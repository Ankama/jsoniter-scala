[info] Loading settings from idea.sbt,build.sbt ...
[info] Loading global plugins from /home/andriy/.sbt/1.0/plugins
[info] Loading settings from plugins.sbt ...
[info] Loading project definition from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/project
[info] Loading settings from release.sbt,build.sbt,version.sbt ...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[info] Setting Scala version to 2.12.5 on 4 projects.
[info] Reapplying settings...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[success] Total time: 0 s, completed Apr 1, 2018 8:30:03 AM
[info] Updating core...
[info] Done updating.
[info] Updating macros...
[info] Done updating.
[info] Updating benchmark...
[info] Done updating.
[info] Compiling 5 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/classes ...
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1026:69: constructor String in class String is deprecated: see corresponding Javadoc for more information.
[warn]   private[this] def toDouble: Double = java.lang.Double.parseDouble(new String(buf, 0, mark, head - mark))
[warn]                                                                     ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:444:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:452:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos + 1)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:941:14: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]       zoneId.getBytes(0, len, buf, pos)
[warn]              ^
[warn] four warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/core_2.12-0.22.2-SNAPSHOT.jar ...
[info] Compiling 1 Scala source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/classes ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/macros_2.12-0.22.2-SNAPSHOT.jar ...
[info] Compiling 47 Scala sources and 1 Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done packaging.
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:14:69: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("s", "bd");
[info]       private[this] def d1(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(JsoniterCodecs.this.stringCodec.decodeValue(in, null))
[info]         };
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _bd: scala.math.BigDecimal = null;
[info]           var _os: Option[String] = None;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = JsoniterCodecs.this.stringCodec.decodeValue(in, _s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3138 => if (in.isCharBufEqualsTo(l, "bd"))
[info]                       {
[info]                         _bd = in.readBigDecimal(_bd);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556 => if (in.isCharBufEqualsTo(l, "os"))
[info]                       _os = d1(in, _os)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs(s = _s, bd = _bd, os = _os)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.s, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bd");
[info]           out.writeVal(x.bd)
[info]         };
[info]         {
[info]           val v = x.os;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("os");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val anyRefsCodec: JsonValueCodec[AnyRefs] = make[AnyRefs](CodecMakerConfig())
[info]                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:15:66: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Arrays':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Arrays] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays): com.github.plokhotnyuk.jsoniter_scala.macros.Arrays = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Array[Int]] = new Array[Array[Int]](0);
[info]       private[this] val v1: Array[BigInt] = new Array[scala.math.BigInt](0);
[info]       private[this] val v2: Array[Int] = new Array[Int](0);
[info]       private[this] def d1(in: JsonReader, default: Array[Array[Int]]): Array[Array[Int]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Array[Int]](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, JsoniterCodecs.this.intArrayCodec.decodeValue(in, v2));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays): com.github.plokhotnyuk.jsoniter_scala.macros.Arrays = if (in.isNextToken('{'))
[info]         {
[info]           var _aa: Array[Array[Int]] = v0;
[info]           var _a: Array[BigInt] = v1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3104 => if (in.isCharBufEqualsTo(l, "aa"))
[info]                       _aa = d1(in, _aa)
[info]                     else
[info]                       in.skip()
[info]                     case 97 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       _a = JsoniterCodecs.this.bigIntArrayCodec.decodeValue(in, _a)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Arrays(aa = _aa, a = _a)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: Array[Array[Int]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             JsoniterCodecs.this.intArrayCodec.encodeValue(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.aa;
[info]           if (v.length.>(0))
[info]             {
[info]               out.writeNonEscapedAsciiKey("aa");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.a;
[info]           if (v.length.>(0))
[info]             {
[info]               out.writeNonEscapedAsciiKey("a");
[info]               JsoniterCodecs.this.bigIntArrayCodec.encodeValue(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val arraysCodec: JsonValueCodec[Arrays] = make[Arrays](CodecMakerConfig())
[info]                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:16:97: Generated JSON codec for type 'Array[BigDecimal]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigDecimal]] {
[info]       def nullValue: Array[BigDecimal] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = d0(in, default);
[info]       def encodeValue(x: Array[BigDecimal], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[BigDecimal] = new Array[scala.math.BigDecimal](0);
[info]       private[this] def d0(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigDecimal](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigDecimal(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[BigDecimal], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigDecimalArrayCodec: JsonValueCodec[Array[BigDecimal]] = make[Array[BigDecimal]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:17:85: Generated JSON codec for type 'Array[BigInt]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigInt]] {
[info]       def nullValue: Array[BigInt] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[BigInt]): Array[BigInt] = d0(in, default);
[info]       def encodeValue(x: Array[BigInt], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[BigInt] = new Array[scala.math.BigInt](0);
[info]       private[this] def d0(in: JsonReader, default: Array[BigInt]): Array[BigInt] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigInt](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigInt(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[BigInt], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigIntArrayCodec: JsonValueCodec[Array[BigInt]] = make[Array[BigInt]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:18:69: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.BitSets':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.BitSets] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets): com.github.plokhotnyuk.jsoniter_scala.macros.BitSets = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = BitSet.newBuilder;
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d2(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               BitSet.empty;
[info]             do 
[info]               x.add(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets): com.github.plokhotnyuk.jsoniter_scala.macros.BitSets = if (in.isNextToken('{'))
[info]         {
[info]           var _bs: scala.collection.immutable.BitSet = BitSet.empty;
[info]           var _mbs: scala.collection.mutable.BitSet = BitSet.empty;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3153 => if (in.isCharBufEqualsTo(l, "bs"))
[info]                       _bs = d1(in, _bs)
[info]                     else
[info]                       in.skip()
[info]                     case 107902 => if (in.isCharBufEqualsTo(l, "mbs"))
[info]                       _mbs = d2(in, _mbs)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.BitSets(bs = _bs, mbs = _mbs)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e2(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.bs;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("bs");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.mbs;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("mbs");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bitSetsCodec: JsonValueCodec[BitSets] = make[BitSets](CodecMakerConfig())
[info]                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:19:88: Generated JSON codec for type 'Array[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Boolean]] {
[info]       def nullValue: Array[Boolean] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Boolean]): Array[Boolean] = d0(in, default);
[info]       def encodeValue(x: Array[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Boolean] = new Array[Boolean](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Boolean]): Array[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Boolean](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBoolean());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanArrayCodec: JsonValueCodec[Array[Boolean]] = make[Array[Boolean]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:20:79: Generated JSON codec for type 'Array[Byte]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Byte]] {
[info]       def nullValue: Array[Byte] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Byte]): Array[Byte] = d0(in, default);
[info]       def encodeValue(x: Array[Byte], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Byte] = new Array[Byte](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Byte]): Array[Byte] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Byte](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readByte());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Byte], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val byteArrayCodec: JsonValueCodec[Array[Byte]] = make[Array[Byte]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:21:85: Generated JSON codec for type 'Array[Double]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Double]] {
[info]       def nullValue: Array[Double] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Double]): Array[Double] = d0(in, default);
[info]       def encodeValue(x: Array[Double], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Double] = new Array[Double](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Double]): Array[Double] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Double](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDouble());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Double], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val doubleArrayCodec: JsonValueCodec[Array[Double]] = make[Array[Double]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:22:91: Generated JSON codec for type 'Array[java.time.Duration]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Duration]] {
[info]       def nullValue: Array[java.time.Duration] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Duration], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Duration] = new Array[java.time.Duration](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Duration](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDuration(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Duration], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val durationArrayCodec: JsonValueCodec[Array[Duration]] = make[Array[Duration]](CodecMakerConfig())
[info]                                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:23:82: Generated JSON codec for type 'Array[Float]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Float]] {
[info]       def nullValue: Array[Float] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Float]): Array[Float] = d0(in, default);
[info]       def encodeValue(x: Array[Float], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Float] = new Array[Float](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Float]): Array[Float] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Float](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readFloat());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Float], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val floatArrayCodec: JsonValueCodec[Array[Float]] = make[Array[Float]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:24:88: Generated JSON codec for type 'Array[java.time.Instant]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Instant]] {
[info]       def nullValue: Array[java.time.Instant] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Instant], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Instant] = new Array[java.time.Instant](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Instant](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInstant(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Instant], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val instantArrayCodec: JsonValueCodec[Array[Instant]] = make[Array[Instant]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:25:94: Generated JSON codec for type 'Array[java.time.LocalDate]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDate]] {
[info]       def nullValue: Array[java.time.LocalDate] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDate], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.LocalDate] = new Array[java.time.LocalDate](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDate](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDate(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalDate], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateArrayCodec: JsonValueCodec[Array[LocalDate]] = make[Array[LocalDate]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:26:106: Generated JSON codec for type 'Array[java.time.LocalDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDateTime]] {
[info]       def nullValue: Array[java.time.LocalDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.LocalDateTime] = new Array[java.time.LocalDateTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateTimeArrayCodec: JsonValueCodec[Array[LocalDateTime]] = make[Array[LocalDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:27:109: Generated JSON codec for type 'Array[java.time.OffsetDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetDateTime]] {
[info]       def nullValue: Array[java.time.OffsetDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.OffsetDateTime] = new Array[java.time.OffsetDateTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetDateTimeArrayCodec: JsonValueCodec[Array[OffsetDateTime]] = make[Array[OffsetDateTime]](CodecMakerConfig())
[info]                                                                                                             ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:28:97: Generated JSON codec for type 'Array[java.time.OffsetTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetTime]] {
[info]       def nullValue: Array[java.time.OffsetTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.OffsetTime] = new Array[java.time.OffsetTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetTimeArrayCodec: JsonValueCodec[Array[OffsetTime]] = make[Array[OffsetTime]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:29:94: Generated JSON codec for type 'Array[java.time.LocalTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalTime]] {
[info]       def nullValue: Array[java.time.LocalTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.LocalTime] = new Array[java.time.LocalTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localTimeArrayCodec: JsonValueCodec[Array[LocalTime]] = make[Array[LocalTime]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:30:85: Generated JSON codec for type 'Array[java.time.Period]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Period]] {
[info]       def nullValue: Array[java.time.Period] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Period], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Period] = new Array[java.time.Period](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Period](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readPeriod(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Period], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val periodArrayCodec: JsonValueCodec[Array[Period]] = make[Array[Period]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:31:106: Generated JSON codec for type 'Array[java.time.ZonedDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZonedDateTime]] {
[info]       def nullValue: Array[java.time.ZonedDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.ZonedDateTime] = new Array[java.time.ZonedDateTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZonedDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZonedDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zonedDateTimeArrayCodec: JsonValueCodec[Array[ZonedDateTime]] = make[Array[ZonedDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:32:97: Generated JSON codec for type 'Array[java.time.ZoneOffset]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneOffset]] {
[info]       def nullValue: Array[java.time.ZoneOffset] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.ZoneOffset] = new Array[java.time.ZoneOffset](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneOffset](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneOffset(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneOffsetArrayCodec: JsonValueCodec[Array[ZoneOffset]] = make[Array[ZoneOffset]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:33:85: Generated JSON codec for type 'Array[java.time.ZoneId]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneId]] {
[info]       def nullValue: Array[java.time.ZoneId] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneId], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.ZoneId] = new Array[java.time.ZoneId](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneId](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneId(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZoneId], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneIdArrayCodec: JsonValueCodec[Array[ZoneId]] = make[Array[ZoneId]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:34:83: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](0);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Suit): com.github.plokhotnyuk.jsoniter_scala.macros.Suit = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val v = in.readString(null);
[info]           try {
[info]             Suit.valueOf(v)
[info]           } catch {
[info]             case ((_): IllegalArgumentException) => in.enumValueError(v)
[info]           }
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private[this] def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Suit, out: JsonWriter): Unit = out.writeVal(x.name);
[info]       private[this] def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val javaEnumArrayCodec: JsonValueCodec[Array[Suit]] = make[Array[Suit]](CodecMakerConfig())
[info]                                                                                   ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:35:87: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](0);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value): com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val len = in.readStringAsCharBuf();
[info]           SuitEnum.values.iterator.find(((e) => in.isCharBufEqualsTo(len, e.toString))).getOrElse(in.enumValueError(len))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private[this] def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value, out: JsonWriter): Unit = out.writeVal(x.toString);
[info]       private[this] def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val enumArrayCodec: JsonValueCodec[Array[SuitEnum]] = make[Array[SuitEnum]](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:36:76: Generated JSON codec for type 'Array[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Int]] {
[info]       def nullValue: Array[Int] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Int]): Array[Int] = d0(in, default);
[info]       def encodeValue(x: Array[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Int] = new Array[Int](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Int]): Array[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Int](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, JsoniterCodecs.this.intCodec.decodeValue(in, 0));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             JsoniterCodecs.this.intCodec.encodeValue(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intArrayCodec: JsonValueCodec[Array[Int]] = make[Array[Int]](CodecMakerConfig())
[info]                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:37:82: Generated JSON codec for type 'Array[Short]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Short]] {
[info]       def nullValue: Array[Short] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Short]): Array[Short] = d0(in, default);
[info]       def encodeValue(x: Array[Short], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Short] = new Array[Short](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Short]): Array[Short] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Short](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readShort());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Short], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val shortArrayCodec: JsonValueCodec[Array[Short]] = make[Array[Short]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:38:79: Generated JSON codec for type 'Array[Long]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Long]] {
[info]       def nullValue: Array[Long] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Long]): Array[Long] = d0(in, default);
[info]       def encodeValue(x: Array[Long], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Long] = new Array[Long](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Long]): Array[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLong());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Long], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val longArrayCodec: JsonValueCodec[Array[Long]] = make[Array[Long]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:39:79: Generated JSON codec for type 'Array[java.util.UUID]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.util.UUID]] {
[info]       def nullValue: Array[java.util.UUID] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = d0(in, default);
[info]       def encodeValue(x: Array[java.util.UUID], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.util.UUID] = new Array[java.util.UUID](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.util.UUID](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readUUID(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.util.UUID], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val uuidArrayCodec: JsonValueCodec[Array[UUID]] = make[Array[UUID]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:40:75: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Iterables':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Iterables] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables): com.github.plokhotnyuk.jsoniter_scala.macros.Iterables = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: scala.collection.immutable.Vector[String]): scala.collection.immutable.Vector[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Vector.newBuilder[String];
[info]             do 
[info]               x.+=(JsoniterCodecs.this.stringCodec.decodeValue(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d2(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Set.newBuilder[Int];
[info]             do 
[info]               x.+=(JsoniterCodecs.this.intCodec.decodeValue(in, 0))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d4(in: JsonReader, default: scala.collection.immutable.HashSet[Long]): scala.collection.immutable.HashSet[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = HashSet.newBuilder[Long];
[info]             do 
[info]               x.+=(in.readLong())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d3(in: JsonReader, default: List[scala.collection.immutable.HashSet[Long]]): List[scala.collection.immutable.HashSet[Long]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = List.newBuilder[scala.collection.immutable.HashSet[Long]];
[info]             do 
[info]               x.+=(d4(in, HashSet.empty[Long]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables): com.github.plokhotnyuk.jsoniter_scala.macros.Iterables = if (in.isNextToken('{'))
[info]         {
[info]           var _l: scala.collection.immutable.Vector[String] = Vector.empty[String];
[info]           var _s: scala.collection.immutable.Set[Int] = Set.empty[Int];
[info]           var _ls: List[scala.collection.immutable.HashSet[Long]] = List.empty[scala.collection.immutable.HashSet[Long]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       _l = d1(in, _l)
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       _s = d2(in, _s)
[info]                     else
[info]                       in.skip()
[info]                     case 3463 => if (in.isCharBufEqualsTo(l, "ls"))
[info]                       _ls = d3(in, _ls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Iterables(l = _l, s = _s, ls = _ls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: scala.collection.immutable.Vector[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e2(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           JsoniterCodecs.this.intCodec.encodeValue(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e4(x: scala.collection.immutable.HashSet[Long], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e3(x: List[scala.collection.immutable.HashSet[Long]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e4(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.l;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("l");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.s;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("s");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.ls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("ls");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val iterablesCodec: JsonValueCodec[Iterables] = make[Iterables](CodecMakerConfig())
[info]                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:41:60: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Maps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Maps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Maps = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Maps): com.github.plokhotnyuk.jsoniter_scala.macros.Maps = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.Maps, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: scala.collection.immutable.HashMap[String,Double]): scala.collection.immutable.HashMap[String,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = HashMap.empty[String, Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsString(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: scala.collection.immutable.HashMap[Long,Double]): scala.collection.immutable.HashMap[Long,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = HashMap.empty[Long, Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsLong(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]]): scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[Int, scala.collection.immutable.HashMap[Long,Double]];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), d3(in, HashMap.empty[Long, Double]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Maps): com.github.plokhotnyuk.jsoniter_scala.macros.Maps = if (in.isNextToken('{'))
[info]         {
[info]           var _m: scala.collection.immutable.HashMap[String,Double] = HashMap.empty[String, Double];
[info]           var _mm: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]] = Map.empty[Int, scala.collection.immutable.HashMap[Long,Double]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 109 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case 3488 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Maps(m = _m, mm = _mm)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: scala.collection.immutable.HashMap[String,Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: scala.collection.immutable.HashMap[Long,Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           e3(kv._2, out)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Maps, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.m;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("m");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.mm;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("mm");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mapsCodec: JsonValueCodec[Maps] = make[Maps](CodecMakerConfig())
[info]                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:42:95: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("s", "i");
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _i: Int = 0;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = JsoniterCodecs.this.stringCodec.decodeValue(in, _s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         _i = JsoniterCodecs.this.intCodec.decodeValue(in, _i);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields(s = _s, i = _i)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.s, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           JsoniterCodecs.this.intCodec.encodeValue(x.i, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val missingReqFieldCodec: JsonValueCodec[MissingReqFields] = make[MissingReqFields](CodecMakerConfig())
[info]                                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:43:96: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables): com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[String]): scala.collection.mutable.ArrayBuffer[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               ArrayBuffer.empty[String];
[info]             do 
[info]               x.+=(JsoniterCodecs.this.stringCodec.decodeValue(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d2(in: JsonReader, default: scala.collection.mutable.TreeSet[Int]): scala.collection.mutable.TreeSet[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               TreeSet.empty[Int];
[info]             do 
[info]               x.+=(JsoniterCodecs.this.intCodec.decodeValue(in, 0))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d4(in: JsonReader, default: scala.collection.mutable.Set[Long]): scala.collection.mutable.Set[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               Set.empty[Long];
[info]             do 
[info]               x.+=(in.readLong())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d3(in: JsonReader, default: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]]): scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = ResizableArray.newBuilder[scala.collection.mutable.Set[Long]];
[info]             do 
[info]               x.+=(d4(in, Set.empty[Long]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables): com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables = if (in.isNextToken('{'))
[info]         {
[info]           var _l: scala.collection.mutable.ArrayBuffer[String] = ArrayBuffer.empty[String];
[info]           var _s: scala.collection.mutable.TreeSet[Int] = TreeSet.empty[Int];
[info]           var _ls: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]] = ResizableArray.empty[scala.collection.mutable.Set[Long]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       _l = d1(in, _l)
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       _s = d2(in, _s)
[info]                     else
[info]                       in.skip()
[info]                     case 3463 => if (in.isCharBufEqualsTo(l, "ls"))
[info]                       _ls = d3(in, _ls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables(l = _l, s = _s, ls = _ls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: scala.collection.mutable.ArrayBuffer[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e2(x: scala.collection.mutable.TreeSet[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           JsoniterCodecs.this.intCodec.encodeValue(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e4(x: scala.collection.mutable.Set[Long], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e3(x: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e4(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.l;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("l");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.s;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("s");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.ls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("ls");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableIterablesCodec: JsonValueCodec[MutableIterables] = make[MutableIterables](CodecMakerConfig())
[info]                                                                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:44:81: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps): com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: scala.collection.mutable.HashMap[String,Double]): scala.collection.mutable.HashMap[String,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               HashMap.empty[String, Double];
[info]             do 
[info]               x.update(in.readKeyAsString(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: scala.collection.mutable.OpenHashMap[Long,Double]): scala.collection.mutable.OpenHashMap[Long,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               OpenHashMap.empty[Long, Double];
[info]             do 
[info]               x.update(in.readKeyAsLong(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]]): scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               Map.empty[Int, scala.collection.mutable.OpenHashMap[Long,Double]];
[info]             do 
[info]               x.update(in.readKeyAsInt(), d3(in, OpenHashMap.empty[Long, Double]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps): com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps = if (in.isNextToken('{'))
[info]         {
[info]           var _m: scala.collection.mutable.HashMap[String,Double] = HashMap.empty[String, Double];
[info]           var _mm: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]] = Map.empty[Int, scala.collection.mutable.OpenHashMap[Long,Double]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 109 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case 3488 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps(m = _m, mm = _mm)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: scala.collection.mutable.HashMap[String,Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: scala.collection.mutable.OpenHashMap[Long,Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           e3(kv._2, out)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.m;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("m");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.mm;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("mm");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableMapsCodec: JsonValueCodec[MutableMaps] = make[MutableMaps](CodecMakerConfig())
[info]                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:45:90: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps): com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: scala.collection.immutable.IntMap[Double]): scala.collection.immutable.IntMap[Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = IntMap.empty[Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: scala.collection.immutable.LongMap[Double]): scala.collection.immutable.LongMap[Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = LongMap.empty[Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsLong(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]]): scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               LongMap.empty[scala.collection.immutable.LongMap[Double]];
[info]             do 
[info]               x.update(in.readKeyAsLong(), d3(in, LongMap.empty[Double]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps): com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps = if (in.isNextToken('{'))
[info]         {
[info]           var _m: scala.collection.immutable.IntMap[Double] = IntMap.empty[Double];
[info]           var _mm: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]] = LongMap.empty[scala.collection.immutable.LongMap[Double]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 109 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case 3488 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps(m = _m, mm = _mm)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: scala.collection.immutable.IntMap[Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: scala.collection.immutable.LongMap[Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           e3(kv._2, out)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.m;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("m");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.mm;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("mm");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intAndLongMapsCodec: JsonValueCodec[IntAndLongMaps] = make[IntAndLongMaps](CodecMakerConfig())
[info]                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:46:57: Generated JSON codec for type 'Int':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Int] {
[info]       def nullValue: Int = 0;
[info]       def decodeValue(in: JsonReader, default: Int): Int = in.readInt();
[info]       def encodeValue(x: Int, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intCodec: JsonValueCodec[Int] = make[Int](CodecMakerConfig())
[info]                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:47:78: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Primitives':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Primitives] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("b", "s", "i", "l", "bl", "ch", "dbl", "f");
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = if (in.isNextToken('{'))
[info]         {
[info]           var _b: Byte = ((0): Byte);
[info]           var _s: Short = ((0): Short);
[info]           var _i: Int = 0;
[info]           var _l: Long = 0L;
[info]           var _bl: Boolean = false;
[info]           var _ch: Char = '\u0000';
[info]           var _dbl: Double = 0.0;
[info]           var _f: Float = 0.0F;
[info]           var req0 = 255;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         _b = in.readByte();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readShort();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         _i = JsoniterCodecs.this.intCodec.decodeValue(in, _i);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = in.readLong();
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3146 => if (in.isCharBufEqualsTo(l, "bl"))
[info]                       {
[info]                         _bl = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3173 => if (in.isCharBufEqualsTo(l, "ch"))
[info]                       {
[info]                         _ch = in.readChar();
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 99246 => if (in.isCharBufEqualsTo(l, "dbl"))
[info]                       {
[info]                         _dbl = in.readDouble();
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102 => if (in.isCharBufEqualsTo(l, "f"))
[info]                       {
[info]                         _f = in.readFloat();
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Primitives(b = _b, s = _s, i = _i, l = _l, bl = _bl, ch = _ch, dbl = _dbl, f = _f)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           out.writeVal(x.b)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           JsoniterCodecs.this.intCodec.encodeValue(x.i, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           out.writeVal(x.l)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bl");
[info]           out.writeVal(x.bl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("ch");
[info]           out.writeVal(x.ch)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("dbl");
[info]           out.writeVal(x.dbl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("f");
[info]           out.writeVal(x.f)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val primitivesCodec: JsonValueCodec[Primitives] = make[Primitives](CodecMakerConfig())
[info]                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:48:87: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("s", "l");
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _l: Long = 0L;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = JsoniterCodecs.this.stringCodec.decodeValue(in, _s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields(s = _s, l = _l)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.s, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           out.writeVal(x.l)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val extractFieldsCodec: JsonValueCodec[ExtractFields] = make[ExtractFields](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:49:65: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("a");
[info]       private[this] val r1: Array[String] = Array("b");
[info]       private[this] val r2: Array[String] = Array("l", "r");
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.A): com.github.plokhotnyuk.jsoniter_scala.macros.A = if (in.isNextToken('{'))
[info]         {
[info]           var _a: Int = 0;
[info]           var req0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 97 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       {
[info]                         _a = JsoniterCodecs.this.intCodec.decodeValue(in, _a);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.A(a = _a)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.B): com.github.plokhotnyuk.jsoniter_scala.macros.B = if (in.isNextToken('{'))
[info]         {
[info]           var _b: String = null;
[info]           var req0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         _b = JsoniterCodecs.this.stringCodec.decodeValue(in, _b);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r1(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.B(b = _b)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.C): com.github.plokhotnyuk.jsoniter_scala.macros.C = if (in.isNextToken('{'))
[info]         {
[info]           var _l: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var _r: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = JsoniterCodecs.this.adtCodec.decodeValue(in, _l);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 114 => if (in.isCharBufEqualsTo(l, "r"))
[info]                       {
[info]                         _r = JsoniterCodecs.this.adtCodec.decodeValue(in, _r);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r2(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.C(l = _l, r = _r)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 65 => if (in.isCharBufEqualsTo(l, "A"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d1(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 66 => if (in.isCharBufEqualsTo(l, "B"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d2(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 67 => if (in.isCharBufEqualsTo(l, "C"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d3(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.A, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("A")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("a");
[info]           JsoniterCodecs.this.intCodec.encodeValue(x.a, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.B, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("B")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.b, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.C, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("C")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           JsoniterCodecs.this.adtCodec.encodeValue(x.l, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("r");
[info]           JsoniterCodecs.this.adtCodec.encodeValue(x.r, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.A)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.B)) => e2(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.C)) => e3(x, out)
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val adtCodec: JsonValueCodec[AdtBase] = make[AdtBase](CodecMakerConfig())
[info]                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:50:66: Generated JSON codec for type 'String':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[String] {
[info]       def nullValue: String = null;
[info]       def decodeValue(in: JsonReader, default: String): String = in.readString(default);
[info]       def encodeValue(x: String, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val stringCodec: JsonValueCodec[String] = make[String](CodecMakerConfig())
[info]                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:51:89: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("status");
[info]       private[this] val r1: Array[String] = Array("distance", "duration", "status");
[info]       private[this] val r2: Array[String] = Array("text", "value");
[info]       private[this] def d1(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(JsoniterCodecs.this.stringCodec.decodeValue(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Value): com.github.plokhotnyuk.jsoniter_scala.macros.Value = if (in.isNextToken('{'))
[info]         {
[info]           var _text: String = null;
[info]           var _value: Int = 0;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = JsoniterCodecs.this.stringCodec.decodeValue(in, _text);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 111972721 => if (in.isCharBufEqualsTo(l, "value"))
[info]                       {
[info]                         _value = JsoniterCodecs.this.intCodec.decodeValue(in, _value);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r2(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Value(text = _text, value = _value)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Elements): com.github.plokhotnyuk.jsoniter_scala.macros.Elements = if (in.isNextToken('{'))
[info]         {
[info]           var _distance: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _duration: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _status: String = null;
[info]           var req0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 288459765 => if (in.isCharBufEqualsTo(l, "distance"))
[info]                       {
[info]                         _distance = d6(in, _distance);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1992012396 => if (in.isCharBufEqualsTo(l, "duration"))
[info]                       {
[info]                         _duration = d6(in, _duration);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         _status = JsoniterCodecs.this.stringCodec.decodeValue(in, _status);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r1(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Elements(distance = _distance, duration = _duration, status = _status)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Rows): com.github.plokhotnyuk.jsoniter_scala.macros.Rows = if (in.isNextToken('{'))
[info]         {
[info]           var _elements: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -8339209 => if (in.isCharBufEqualsTo(l, "elements"))
[info]                       _elements = d4(in, _elements)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Rows(elements = _elements)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = if (in.isNextToken('{'))
[info]         {
[info]           var _destination_addresses: Seq[String] = Seq.empty[String];
[info]           var _origin_addresses: Seq[String] = Seq.empty[String];
[info]           var _rows: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]           var _status: String = null;
[info]           var req0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 715423921 => if (in.isCharBufEqualsTo(l, "destination_addresses"))
[info]                       _destination_addresses = d1(in, _destination_addresses)
[info]                     else
[info]                       in.skip()
[info]                     case 1780936137 => if (in.isCharBufEqualsTo(l, "origin_addresses"))
[info]                       _origin_addresses = d1(in, _origin_addresses)
[info]                     else
[info]                       in.skip()
[info]                     case 3506649 => if (in.isCharBufEqualsTo(l, "rows"))
[info]                       _rows = d2(in, _rows)
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         _status = JsoniterCodecs.this.stringCodec.decodeValue(in, _status);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix(destination_addresses = _destination_addresses, origin_addresses = _origin_addresses, rows = _rows, status = _status)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: Seq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: com.github.plokhotnyuk.jsoniter_scala.macros.Value, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.text, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("value");
[info]           JsoniterCodecs.this.intCodec.encodeValue(x.value, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.Elements, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("distance");
[info]           e6(x.distance, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("duration");
[info]           e6(x.duration, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.status, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e5(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Rows, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.elements;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("elements");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e3(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.destination_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("destination_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.origin_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("origin_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.rows;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("rows");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.status, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val googleMapsAPICodec: JsonValueCodec[DistanceMatrix] = make[DistanceMatrix](CodecMakerConfig())
[info]                                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:52:78: Generated JSON codec for type 'Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]] {
[info]       def nullValue: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]       def decodeValue(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = d0(in, default);
[info]       def encodeValue(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "user", "retweeted_status", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private[this] val r1: Array[String] = Array("screen_name", "name", "id", "id_str");
[info]       private[this] val r2: Array[String] = Array("url", "expanded_url", "display_url");
[info]       private[this] val r3: Array[String] = Array("id", "id_str", "name", "screen_name", "location", "description", "url", "entities", "protected", "followers_count", "friends_count", "listed_count", "created_at", "favourites_count", "utc_offset", "time_zone", "geo_enabled", "verified", "statuses_count", "lang", "contributors_enabled", "is_translator", "is_translation_enabled", "profile_background_color", "profile_background_image_url", "profile_background_image_url_https", "profile_background_tile", "profile_image_url", "profile_image_url_https", "profile_banner_url", "profile_link_color", "profile_sidebar_border_color", "profile_sidebar_fill_color", "profile_text_color", "profile_use_background_image", "has_extended_profile", "default_profile", "default_profile_image", "following", "follow_request_sent", "notifications", "translator_type");
[info]       private[this] val r4: Array[String] = Array("url", "description");
[info]       private[this] val r5: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "user", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private[this] def d3(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(JsoniterCodecs.this.stringCodec.decodeValue(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: Seq[Int]): Seq[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[Int];
[info]             do 
[info]               x.+=(JsoniterCodecs.this.intCodec.decodeValue(in, 0))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions): com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions = if (in.isNextToken('{'))
[info]         {
[info]           var _screen_name: String = null;
[info]           var _name: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var req0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         _screen_name = JsoniterCodecs.this.stringCodec.decodeValue(in, _screen_name);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         _name = JsoniterCodecs.this.stringCodec.decodeValue(in, _name);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = JsoniterCodecs.this.stringCodec.decodeValue(in, _id_str);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       _indices = d6(in, _indices)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r1(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions(screen_name = _screen_name, name = _name, id = _id, id_str = _id_str, indices = _indices)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d8(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Urls): com.github.plokhotnyuk.jsoniter_scala.macros.Urls = if (in.isNextToken('{'))
[info]         {
[info]           var _url: String = null;
[info]           var _expanded_url: String = null;
[info]           var _display_url: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var req0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = JsoniterCodecs.this.stringCodec.decodeValue(in, _url);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -518939415 => if (in.isCharBufEqualsTo(l, "expanded_url"))
[info]                       {
[info]                         _expanded_url = JsoniterCodecs.this.stringCodec.decodeValue(in, _expanded_url);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1714674802 => if (in.isCharBufEqualsTo(l, "display_url"))
[info]                       {
[info]                         _display_url = JsoniterCodecs.this.stringCodec.decodeValue(in, _display_url);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       _indices = d6(in, _indices)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r2(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Urls(url = _url, expanded_url = _expanded_url, display_url = _display_url, indices = _indices)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d7(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]             do 
[info]               x.+=(d8(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Entities): com.github.plokhotnyuk.jsoniter_scala.macros.Entities = if (in.isNextToken('{'))
[info]         {
[info]           var _hashtags: Seq[String] = Seq.empty[String];
[info]           var _symbols: Seq[String] = Seq.empty[String];
[info]           var _user_mentions: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 149143079 => if (in.isCharBufEqualsTo(l, "hashtags"))
[info]                       _hashtags = d3(in, _hashtags)
[info]                     else
[info]                       in.skip()
[info]                     case -1743438373 => if (in.isCharBufEqualsTo(l, "symbols"))
[info]                       _symbols = d3(in, _symbols)
[info]                     else
[info]                       in.skip()
[info]                     case -553518659 => if (in.isCharBufEqualsTo(l, "user_mentions"))
[info]                       _user_mentions = d4(in, _user_mentions)
[info]                     else
[info]                       in.skip()
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       _urls = d7(in, _urls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Entities(hashtags = _hashtags, symbols = _symbols, user_mentions = _user_mentions, urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d9(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(JsoniterCodecs.this.stringCodec.decodeValue(in, null))
[info]         };
[info]       private[this] def d12(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Url): com.github.plokhotnyuk.jsoniter_scala.macros.Url = if (in.isNextToken('{'))
[info]         {
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       _urls = d7(in, _urls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Url(urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d11(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities): com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = if (in.isNextToken('{'))
[info]         {
[info]           var _url: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var _description: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = d12(in, _url);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         _description = d12(in, _description);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r4(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities(url = _url, description = _description)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d10(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.User): com.github.plokhotnyuk.jsoniter_scala.macros.User = if (in.isNextToken('{'))
[info]         {
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _name: String = null;
[info]           var _screen_name: String = null;
[info]           var _location: String = null;
[info]           var _description: String = null;
[info]           var _url: String = null;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = null;
[info]           var _protected: Boolean = false;
[info]           var _followers_count: Int = 0;
[info]           var _friends_count: Int = 0;
[info]           var _listed_count: Int = 0;
[info]           var _created_at: String = null;
[info]           var _favourites_count: Int = 0;
[info]           var _utc_offset: Int = 0;
[info]           var _time_zone: String = null;
[info]           var _geo_enabled: Boolean = false;
[info]           var _verified: Boolean = false;
[info]           var _statuses_count: Int = 0;
[info]           var _lang: String = null;
[info]           var _contributors_enabled: Boolean = false;
[info]           var _is_translator: Boolean = false;
[info]           var _is_translation_enabled: Boolean = false;
[info]           var _profile_background_color: String = null;
[info]           var _profile_background_image_url: String = null;
[info]           var _profile_background_image_url_https: String = null;
[info]           var _profile_background_tile: Boolean = false;
[info]           var _profile_image_url: String = null;
[info]           var _profile_image_url_https: String = null;
[info]           var _profile_banner_url: String = null;
[info]           var _profile_link_color: String = null;
[info]           var _profile_sidebar_border_color: String = null;
[info]           var _profile_sidebar_fill_color: String = null;
[info]           var _profile_text_color: String = null;
[info]           var _profile_use_background_image: Boolean = false;
[info]           var _has_extended_profile: Boolean = false;
[info]           var _default_profile: Boolean = false;
[info]           var _default_profile_image: Boolean = false;
[info]           var _following: Boolean = false;
[info]           var _follow_request_sent: Boolean = false;
[info]           var _notifications: Boolean = false;
[info]           var _translator_type: String = null;
[info]           var req0 = -1;
[info]           var req1 = 1023;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = JsoniterCodecs.this.stringCodec.decodeValue(in, _id_str);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         _name = JsoniterCodecs.this.stringCodec.decodeValue(in, _name);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         _screen_name = JsoniterCodecs.this.stringCodec.decodeValue(in, _screen_name);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1901043637 => if (in.isCharBufEqualsTo(l, "location"))
[info]                       {
[info]                         _location = JsoniterCodecs.this.stringCodec.decodeValue(in, _location);
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         _description = JsoniterCodecs.this.stringCodec.decodeValue(in, _description);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = JsoniterCodecs.this.stringCodec.decodeValue(in, _url);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d11(in, _entities);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -608539730 => if (in.isCharBufEqualsTo(l, "protected"))
[info]                       {
[info]                         _protected = in.readBoolean();
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -460163995 => if (in.isCharBufEqualsTo(l, "followers_count"))
[info]                       {
[info]                         _followers_count = JsoniterCodecs.this.intCodec.decodeValue(in, _followers_count);
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1666926107 => if (in.isCharBufEqualsTo(l, "friends_count"))
[info]                       {
[info]                         _friends_count = JsoniterCodecs.this.intCodec.decodeValue(in, _friends_count);
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1974943731 => if (in.isCharBufEqualsTo(l, "listed_count"))
[info]                       {
[info]                         _listed_count = JsoniterCodecs.this.intCodec.decodeValue(in, _listed_count);
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = JsoniterCodecs.this.stringCodec.decodeValue(in, _created_at);
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 226316666 => if (in.isCharBufEqualsTo(l, "favourites_count"))
[info]                       {
[info]                         _favourites_count = JsoniterCodecs.this.intCodec.decodeValue(in, _favourites_count);
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1699658638 => if (in.isCharBufEqualsTo(l, "utc_offset"))
[info]                       {
[info]                         _utc_offset = JsoniterCodecs.this.intCodec.decodeValue(in, _utc_offset);
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 36848094 => if (in.isCharBufEqualsTo(l, "time_zone"))
[info]                       {
[info]                         _time_zone = JsoniterCodecs.this.stringCodec.decodeValue(in, _time_zone);
[info]                         req0.&=(-32769)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1085743021 => if (in.isCharBufEqualsTo(l, "geo_enabled"))
[info]                       {
[info]                         _geo_enabled = in.readBoolean();
[info]                         req0.&=(-65537)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1994383672 => if (in.isCharBufEqualsTo(l, "verified"))
[info]                       {
[info]                         _verified = in.readBoolean();
[info]                         req0.&=(-131073)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1824078800 => if (in.isCharBufEqualsTo(l, "statuses_count"))
[info]                       {
[info]                         _statuses_count = JsoniterCodecs.this.intCodec.decodeValue(in, _statuses_count);
[info]                         req0.&=(-262145)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = JsoniterCodecs.this.stringCodec.decodeValue(in, _lang);
[info]                         req0.&=(-524289)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 647263482 => if (in.isCharBufEqualsTo(l, "contributors_enabled"))
[info]                       {
[info]                         _contributors_enabled = in.readBoolean();
[info]                         req0.&=(-1048577)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 583435343 => if (in.isCharBufEqualsTo(l, "is_translator"))
[info]                       {
[info]                         _is_translator = in.readBoolean();
[info]                         req0.&=(-2097153)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1690715422 => if (in.isCharBufEqualsTo(l, "is_translation_enabled"))
[info]                       {
[info]                         _is_translation_enabled = in.readBoolean();
[info]                         req0.&=(-4194305)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1592986856 => if (in.isCharBufEqualsTo(l, "profile_background_color"))
[info]                       {
[info]                         _profile_background_color = JsoniterCodecs.this.stringCodec.decodeValue(in, _profile_background_color);
[info]                         req0.&=(-8388609)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1189803120 => if (in.isCharBufEqualsTo(l, "profile_background_image_url"))
[info]                       {
[info]                         _profile_background_image_url = JsoniterCodecs.this.stringCodec.decodeValue(in, _profile_background_image_url);
[info]                         req0.&=(-16777217)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 594447228 => if (in.isCharBufEqualsTo(l, "profile_background_image_url_https"))
[info]                       {
[info]                         _profile_background_image_url_https = JsoniterCodecs.this.stringCodec.decodeValue(in, _profile_background_image_url_https);
[info]                         req0.&=(-33554433)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1021718665 => if (in.isCharBufEqualsTo(l, "profile_background_tile"))
[info]                       {
[info]                         _profile_background_tile = in.readBoolean();
[info]                         req0.&=(-67108865)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -174080651 => if (in.isCharBufEqualsTo(l, "profile_image_url"))
[info]                       {
[info]                         _profile_image_url = JsoniterCodecs.this.stringCodec.decodeValue(in, _profile_image_url);
[info]                         req0.&=(-134217729)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -782008927 => if (in.isCharBufEqualsTo(l, "profile_image_url_https"))
[info]                       {
[info]                         _profile_image_url_https = JsoniterCodecs.this.stringCodec.decodeValue(in, _profile_image_url_https);
[info]                         req0.&=(-268435457)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -690137550 => if (in.isCharBufEqualsTo(l, "profile_banner_url"))
[info]                       {
[info]                         _profile_banner_url = JsoniterCodecs.this.stringCodec.decodeValue(in, _profile_banner_url);
[info]                         req0.&=(-536870913)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1512257332 => if (in.isCharBufEqualsTo(l, "profile_link_color"))
[info]                       {
[info]                         _profile_link_color = JsoniterCodecs.this.stringCodec.decodeValue(in, _profile_link_color);
[info]                         req0.&=(-1073741825)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1412739479 => if (in.isCharBufEqualsTo(l, "profile_sidebar_border_color"))
[info]                       {
[info]                         _profile_sidebar_border_color = JsoniterCodecs.this.stringCodec.decodeValue(in, _profile_sidebar_border_color);
[info]                         req0.&=(2147483647)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 486184128 => if (in.isCharBufEqualsTo(l, "profile_sidebar_fill_color"))
[info]                       {
[info]                         _profile_sidebar_fill_color = JsoniterCodecs.this.stringCodec.decodeValue(in, _profile_sidebar_fill_color);
[info]                         req1.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1774134745 => if (in.isCharBufEqualsTo(l, "profile_text_color"))
[info]                       {
[info]                         _profile_text_color = JsoniterCodecs.this.stringCodec.decodeValue(in, _profile_text_color);
[info]                         req1.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -101767272 => if (in.isCharBufEqualsTo(l, "profile_use_background_image"))
[info]                       {
[info]                         _profile_use_background_image = in.readBoolean();
[info]                         req1.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 284519336 => if (in.isCharBufEqualsTo(l, "has_extended_profile"))
[info]                       {
[info]                         _has_extended_profile = in.readBoolean();
[info]                         req1.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -312724053 => if (in.isCharBufEqualsTo(l, "default_profile"))
[info]                       {
[info]                         _default_profile = in.readBoolean();
[info]                         req1.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 545330631 => if (in.isCharBufEqualsTo(l, "default_profile_image"))
[info]                       {
[info]                         _default_profile_image = in.readBoolean();
[info]                         req1.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 765915793 => if (in.isCharBufEqualsTo(l, "following"))
[info]                       {
[info]                         _following = in.readBoolean();
[info]                         req1.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 585125142 => if (in.isCharBufEqualsTo(l, "follow_request_sent"))
[info]                       {
[info]                         _follow_request_sent = in.readBoolean();
[info]                         req1.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1272354024 => if (in.isCharBufEqualsTo(l, "notifications"))
[info]                       {
[info]                         _notifications = in.readBoolean();
[info]                         req1.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -475640257 => if (in.isCharBufEqualsTo(l, "translator_type"))
[info]                       {
[info]                         _translator_type = JsoniterCodecs.this.stringCodec.decodeValue(in, _translator_type);
[info]                         req1.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r3(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           if (req1.!=(0))
[info]             in.requiredFieldError(r3(Integer.numberOfTrailingZeros(req1).+(32)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.User(id = _id, id_str = _id_str, name = _name, screen_name = _screen_name, location = _location, description = _description, url = _url, entities = _entities, `protected` = _protected, followers_count = _followers_count, friends_count = _friends_count, listed_count = _listed_count, created_at = _created_at, favourites_count = _favourites_count, utc_offset = _utc_offset, time_zone = _time_zone, geo_enabled = _geo_enabled, verified = _verified, statuses_count = _statuses_count, lang = _lang, contributors_enabled = _contributors_enabled, is_translator = _is_translator, is_translation_enabled = _is_translation_enabled, profile_background_color = _profile_background_color, profile_background_image_url = _profile_background_image_url, profile_background_image_url_https = _profile_background_image_url_https, profile_background_tile = _profile_background_tile, profile_image_url = _profile_image_url, profile_image_url_https = _profile_image_url_https, profile_banner_url = _profile_banner_url, profile_link_color = _profile_link_color, profile_sidebar_border_color = _profile_sidebar_border_color, profile_sidebar_fill_color = _profile_sidebar_fill_color, profile_text_color = _profile_text_color, profile_use_background_image = _profile_use_background_image, has_extended_profile = _has_extended_profile, default_profile = _default_profile, default_profile_image = _default_profile_image, following = _following, follow_request_sent = _follow_request_sent, notifications = _notifications, translator_type = _translator_type)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d13(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus): com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var req0 = 32767;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = JsoniterCodecs.this.stringCodec.decodeValue(in, _created_at);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = JsoniterCodecs.this.stringCodec.decodeValue(in, _id_str);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = JsoniterCodecs.this.stringCodec.decodeValue(in, _text);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         _truncated = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d2(in, _entities);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         _source = JsoniterCodecs.this.stringCodec.decodeValue(in, _source);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         _user = d10(in, _user);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       _geo = d9(in, _geo)
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       _coordinates = d9(in, _coordinates)
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       _place = d9(in, _place)
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       _contributors = d9(in, _contributors)
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         _is_quote_status = in.readBoolean();
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         _retweet_count = JsoniterCodecs.this.intCodec.decodeValue(in, _retweet_count);
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         _favorite_count = JsoniterCodecs.this.intCodec.decodeValue(in, _favorite_count);
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         _favorited = in.readBoolean();
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         _retweeted = in.readBoolean();
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         _possibly_sensitive = in.readBoolean();
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = JsoniterCodecs.this.stringCodec.decodeValue(in, _lang);
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r5(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet): com.github.plokhotnyuk.jsoniter_scala.macros.Tweet = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _retweeted_status: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = null;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var req0 = 65535;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = JsoniterCodecs.this.stringCodec.decodeValue(in, _created_at);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = JsoniterCodecs.this.stringCodec.decodeValue(in, _id_str);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = JsoniterCodecs.this.stringCodec.decodeValue(in, _text);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         _truncated = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d2(in, _entities);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         _source = JsoniterCodecs.this.stringCodec.decodeValue(in, _source);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         _user = d10(in, _user);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       _geo = d9(in, _geo)
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       _coordinates = d9(in, _coordinates)
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       _place = d9(in, _place)
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       _contributors = d9(in, _contributors)
[info]                     else
[info]                       in.skip()
[info]                     case 364396852 => if (in.isCharBufEqualsTo(l, "retweeted_status"))
[info]                       {
[info]                         _retweeted_status = d13(in, _retweeted_status);
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         _is_quote_status = in.readBoolean();
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         _retweet_count = JsoniterCodecs.this.intCodec.decodeValue(in, _retweet_count);
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         _favorite_count = JsoniterCodecs.this.intCodec.decodeValue(in, _favorite_count);
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         _favorited = in.readBoolean();
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         _retweeted = in.readBoolean();
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         _possibly_sensitive = in.readBoolean();
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = JsoniterCodecs.this.stringCodec.decodeValue(in, _lang);
[info]                         req0.&=(-32769)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Tweet(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, retweeted_status = _retweeted_status, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]             do 
[info]               x.+=(d1(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e3(x: Seq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: Seq[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           JsoniterCodecs.this.intCodec.encodeValue(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.screen_name, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.name, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.id_str, out)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e5(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e8(x: com.github.plokhotnyuk.jsoniter_scala.macros.Urls, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.url, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("expanded_url");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.expanded_url, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("display_url");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.display_url, out)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e7(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e8(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.Entities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.hashtags;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("hashtags");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.symbols;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("symbols");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.user_mentions;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("user_mentions");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e11(x: com.github.plokhotnyuk.jsoniter_scala.macros.Url, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e10(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           e11(x.url, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           e11(x.description, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e9(x: com.github.plokhotnyuk.jsoniter_scala.macros.User, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.id_str, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.name, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.screen_name, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("location");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.location, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.description, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.url, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e10(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("protected");
[info]           out.writeVal(x.`protected`)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("followers_count");
[info]           JsoniterCodecs.this.intCodec.encodeValue(x.followers_count, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("friends_count");
[info]           JsoniterCodecs.this.intCodec.encodeValue(x.friends_count, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("listed_count");
[info]           JsoniterCodecs.this.intCodec.encodeValue(x.listed_count, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.created_at, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favourites_count");
[info]           JsoniterCodecs.this.intCodec.encodeValue(x.favourites_count, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("utc_offset");
[info]           JsoniterCodecs.this.intCodec.encodeValue(x.utc_offset, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("time_zone");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.time_zone, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("geo_enabled");
[info]           out.writeVal(x.geo_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("verified");
[info]           out.writeVal(x.verified)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("statuses_count");
[info]           JsoniterCodecs.this.intCodec.encodeValue(x.statuses_count, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.lang, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("contributors_enabled");
[info]           out.writeVal(x.contributors_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translator");
[info]           out.writeVal(x.is_translator)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translation_enabled");
[info]           out.writeVal(x.is_translation_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_color");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.profile_background_color, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.profile_background_image_url, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url_https");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.profile_background_image_url_https, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_tile");
[info]           out.writeVal(x.profile_background_tile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.profile_image_url, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url_https");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.profile_image_url_https, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_banner_url");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.profile_banner_url, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_link_color");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.profile_link_color, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_border_color");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.profile_sidebar_border_color, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_fill_color");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.profile_sidebar_fill_color, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_text_color");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.profile_text_color, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_use_background_image");
[info]           out.writeVal(x.profile_use_background_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("has_extended_profile");
[info]           out.writeVal(x.has_extended_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile");
[info]           out.writeVal(x.default_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile_image");
[info]           out.writeVal(x.default_profile_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("following");
[info]           out.writeVal(x.following)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("follow_request_sent");
[info]           out.writeVal(x.follow_request_sent)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("notifications");
[info]           out.writeVal(x.notifications)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("translator_type");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.translator_type, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e12(x: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.created_at, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.id_str, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.text, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.source, out)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           JsoniterCodecs.this.intCodec.encodeValue(x.retweet_count, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           JsoniterCodecs.this.intCodec.encodeValue(x.favorite_count, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.lang, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.created_at, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.id_str, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.text, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.source, out)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted_status");
[info]           e12(x.retweeted_status, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           JsoniterCodecs.this.intCodec.encodeValue(x.retweet_count, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           JsoniterCodecs.this.intCodec.encodeValue(x.favorite_count, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.lang, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e1(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val twitterAPICodec: JsonValueCodec[Seq[Tweet]] = make[Seq[Tweet]](CodecMakerConfig())
[info]                                                                              ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:17:18: local val v1 in value arraysFormat is never used
[warn]     implicit val v1: Format[Array[BigInt]] = Format(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:23:18: local val v1 in value bitSetsFormat is never used
[warn]     implicit val v1: Reads[BitSet] = Reads[BitSet](js => JsSuccess(BitSet(js.as[Array[Int]]: _*)))
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:24:18: local val v2 in value bitSetsFormat is never used
[warn]     implicit val v2: Reads[mutable.BitSet] =
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:31:18: local val v1 in value mapsFormat is never used
[warn]     implicit val v1: OFormat[HashMap[String, Double]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:34:18: local val v2 in value mapsFormat is never used
[warn]     implicit val v2: OFormat[Map[Int, HashMap[Long, Double]]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:46:18: local val v1 in value mutableMapsFormat is never used
[warn]     implicit val v1: OFormat[mutable.HashMap[String, Double]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:49:18: local val v2 in value mutableMapsFormat is never used
[warn]     implicit val v2: OFormat[mutable.Map[Int, mutable.OpenHashMap[Long, Double]]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:66:18: local val v1 in value intAndLongMapsFormat is never used
[warn]     implicit val v1: OFormat[IntMap[Double]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:71:18: local val v2 in value intAndLongMapsFormat is never used
[warn]     implicit val v2: OFormat[mutable.LongMap[LongMap[Double]]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:83:18: local val v1 in value primitivesFormat is never used
[warn]     implicit val v1: Format[Char] = Format(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:90:23: local val v1 in value adtFormat is never used
[warn]     implicit lazy val v1: OFormat[A] = Json.format[A]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:91:23: local val v2 in value adtFormat is never used
[warn]     implicit lazy val v2: OFormat[B] = Json.format[B]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:92:23: local val v3 in value adtFormat is never used
[warn]     implicit lazy val v3: OFormat[C] = Json.format[C]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:97:18: local val v1 in value googleMapsAPIFormat is never used
[warn]     implicit val v1: OFormat[Value] = Json.format[Value]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:98:18: local val v2 in value googleMapsAPIFormat is never used
[warn]     implicit val v2: OFormat[Elements] = Json.format[Elements]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:99:18: local val v3 in value googleMapsAPIFormat is never used
[warn]     implicit val v3: OFormat[Rows] = Json.format[Rows]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:103:18: local val v1 in value twitterAPIFormat is never used
[warn]     implicit val v1: OFormat[Urls] = Json.format[Urls]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:104:18: local val v2 in value twitterAPIFormat is never used
[warn]     implicit val v2: OFormat[Url] = Json.format[Url]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:105:18: local val v3 in value twitterAPIFormat is never used
[warn]     implicit val v3: OFormat[UserEntities] = Json.format[UserEntities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:106:18: local val v4 in value twitterAPIFormat is never used
[warn]     implicit val v4: OFormat[UserMentions] = Json.format[UserMentions]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:107:18: local val v5 in value twitterAPIFormat is never used
[warn]     implicit val v5: OFormat[Entities] = Json.format[Entities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:108:18: local val v6 in value twitterAPIFormat is never used
[warn]     implicit val v6: Format[User] = Jsonx.formatCaseClass[User]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:109:18: local val v7 in value twitterAPIFormat is never used
[warn]     implicit val v7: Format[RetweetedStatus] = Jsonx.formatCaseClass[RetweetedStatus]
[warn]                  ^
[warn] 23 warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.22.2-SNAPSHOT.jar ...
Processing 339 classes from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes with "reflection" generator
Writing out Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/src_managed/jmh and resources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/resource_managed/jmh
[info] Compiling 41 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/test-classes ...
[info] Done packaging.
[info] Compiling 490 Java sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.22.2-SNAPSHOT-tests.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.22.2-SNAPSHOT-jmh.jar ...
[info] Done packaging.
[info] Running (fork) org.openjdk.jmh.Main -jvm /usr/lib/jvm/jdk-10/bin/java -prof gc -rf json -rff jdk10.json .*
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce
[info] # Run progress: 0.00% complete, ETA 00:44:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 340831.901 ops/s
[info] # Warmup Iteration   2: 711589.823 ops/s
[info] # Warmup Iteration   3: 706908.950 ops/s
[info] Iteration   1: 714891.035 ops/s
[info]                  ·gc.alloc.rate:                                  1878.545 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4136.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.046 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.101 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2032.150 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4474.194 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                7.332 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        13.000 ms
[info] Iteration   2: 726358.604 ops/s
[info]                  ·gc.alloc.rate:                                  1908.284 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4136.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.809 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4425.401 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 720710.807 ops/s
[info]                  ·gc.alloc.rate:                                  1893.615 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4136.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.660 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3716.735 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 720142.016 ops/s
[info]                  ·gc.alloc.rate:                                  1892.359 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4136.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.184 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4463.463 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 722180.501 ops/s
[info]                  ·gc.alloc.rate:                                  1898.139 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4136.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.282 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3709.232 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce":
[info]   720856.593 ±(99.9%) 15893.484 ops/s [Average]
[info]   (min, avg, max) = (714891.035, 720856.593, 726358.604), stdev = 4127.487
[info]   CI (99.9%): [704963.108, 736750.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate":
[info]   1894.188 ±(99.9%) 41.415 MB/sec [Average]
[info]   (min, avg, max) = (1878.545, 1894.188, 1908.284), stdev = 10.755
[info]   CI (99.9%): [1852.774, 1935.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4136.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4136.001, 4136.001, 4136.001), stdev = 0.001
[info]   CI (99.9%): [4136.000, 4136.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.011 ±(99.9%) 0.075 MB/sec [Average]
[info]   (min, avg, max) = (0.002, 0.011, 0.046), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.024 ±(99.9%) 0.164 B/op [Average]
[info]   (min, avg, max) = (0.004, 0.024, 0.101), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1904.017 ±(99.9%) 710.390 MB/sec [Average]
[info]   (min, avg, max) = (1701.660, 1904.017, 2042.184), stdev = 184.486
[info]   CI (99.9%): [1193.627, 2614.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   4157.805 ±(99.9%) 1565.201 B/op [Average]
[info]   (min, avg, max) = (3709.232, 4157.805, 4474.194), stdev = 406.478
[info]   CI (99.9%): [2592.604, 5723.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   1.466 ±(99.9%) 12.627 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.466, 7.332), stdev = 3.279
[info]   CI (99.9%): [≈ 0, 14.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 13.000), stdev = 3.834
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala
[info] # Run progress: 0.30% complete, ETA 01:09:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 326249.172 ops/s
[info] # Warmup Iteration   2: 1431769.394 ops/s
[info] # Warmup Iteration   3: 1441573.475 ops/s
[info] Iteration   1: 1444799.148 ops/s
[info]                  ·gc.alloc.rate:                   1027.971 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.342 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1098.614 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.726 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 1414503.094 ops/s
[info]                  ·gc.alloc.rate:                   1006.781 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.734 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1122.172 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.741 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   3: 1430061.414 ops/s
[info]                  ·gc.alloc.rate:                   1017.454 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1007.670 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1109.230 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 5.132 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   4: 1367168.087 ops/s
[info]                  ·gc.alloc.rate:                                  972.740 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1120.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.184 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.212 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.052 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1175.626 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 1399731.629 ops/s
[info]                  ·gc.alloc.rate:                                  996.016 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1120.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.142 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1148.254 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala":
[info]   1411252.674 ±(99.9%) 114970.664 ops/s [Average]
[info]   (min, avg, max) = (1367168.087, 1411252.674, 1444799.148), stdev = 29857.516
[info]   CI (99.9%): [1296282.010, 1526223.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1004.192 ±(99.9%) 81.777 MB/sec [Average]
[info]   (min, avg, max) = (972.740, 1004.192, 1027.971), stdev = 21.237
[info]   CI (99.9%): [922.416, 1085.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1120.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1120.000, 1120.000, 1120.000), stdev = 0.001
[info]   CI (99.9%): [1120.000, 1120.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.037 ±(99.9%) 0.315 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.184), stdev = 0.082
[info]   CI (99.9%): [≈ 0, 0.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.043 ±(99.9%) 0.363 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.043, 0.212), stdev = 0.094
[info]   CI (99.9%): [≈ 0, 0.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1013.388 ±(99.9%) 27.138 MB/sec [Average]
[info]   (min, avg, max) = (1007.670, 1013.388, 1021.142), stdev = 7.048
[info]   CI (99.9%): [986.250, 1040.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1130.779 ±(99.9%) 120.075 B/op [Average]
[info]   (min, avg, max) = (1098.614, 1130.779, 1175.626), stdev = 31.183
[info]   CI (99.9%): [1010.704, 1250.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.199 ±(99.9%) 7.564 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.199, 4.662), stdev = 1.964
[info]   CI (99.9%): [≈ 0, 8.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.320 ±(99.9%) 8.327 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.320, 5.132), stdev = 2.162
[info]   CI (99.9%): [≈ 0, 9.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.time":
[info]   50.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 10.000, 17.000), stdev = 6.557
[info]   CI (99.9%): [50.000, 50.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala
[info] # Run progress: 0.61% complete, ETA 01:09:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2364370.118 ops/s
[info] # Warmup Iteration   2: 3250571.947 ops/s
[info] # Warmup Iteration   3: 3397993.989 ops/s
[info] Iteration   1: 3308234.519 ops/s
[info]                  ·gc.alloc.rate:            218.631 MB/sec
[info]                  ·gc.alloc.rate.norm:       104.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.787 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 160.681 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 3307925.767 ops/s
[info]                  ·gc.alloc.rate:            218.534 MB/sec
[info]                  ·gc.alloc.rate.norm:       104.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.655 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 160.690 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   3: 3446147.112 ops/s
[info]                  ·gc.alloc.rate:      227.760 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3367967.164 ops/s
[info]                  ·gc.alloc.rate:            222.518 MB/sec
[info]                  ·gc.alloc.rate.norm:       104.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.687 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 157.827 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 3429383.463 ops/s
[info]                  ·gc.alloc.rate:            226.559 MB/sec
[info]                  ·gc.alloc.rate.norm:       104.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.993 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 154.694 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala":
[info]   3371931.605 ±(99.9%) 250872.040 ops/s [Average]
[info]   (min, avg, max) = (3307925.767, 3371931.605, 3446147.112), stdev = 65150.672
[info]   CI (99.9%): [3121059.565, 3622803.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   222.801 ±(99.9%) 16.606 MB/sec [Average]
[info]   (min, avg, max) = (218.534, 222.801, 227.760), stdev = 4.312
[info]   CI (99.9%): [206.195, 239.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   104.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (104.000, 104.000, 104.000), stdev = 0.001
[info]   CI (99.9%): [104.000, 104.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   270.024 ±(99.9%) 581.249 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 270.024, 337.787), stdev = 150.949
[info]   CI (99.9%): [≈ 0, 851.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   126.778 ±(99.9%) 273.066 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 126.778, 160.690), stdev = 70.914
[info]   CI (99.9%): [≈ 0, 399.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson
[info] # Run progress: 0.91% complete, ETA 01:09:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16569.787 ops/s
[info] # Warmup Iteration   2: 149397.015 ops/s
[info] # Warmup Iteration   3: 150546.075 ops/s
[info] Iteration   1: 153080.937 ops/s
[info]                  ·gc.alloc.rate:                   1187.126 MB/sec
[info]                  ·gc.alloc.rate.norm:              12208.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1007.631 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        10362.140 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 6.849 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 152324.894 ops/s
[info]                  ·gc.alloc.rate:                   1181.263 MB/sec
[info]                  ·gc.alloc.rate.norm:              12208.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1343.294 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        13882.544 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 13.766 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   3: 153281.332 ops/s
[info]                  ·gc.alloc.rate:                                  1188.776 MB/sec
[info]                  ·gc.alloc.rate.norm:                             12208.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.094 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.970 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.080 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10444.788 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                41.040 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 153188.076 ops/s
[info]                  ·gc.alloc.rate:                                  1187.991 MB/sec
[info]                  ·gc.alloc.rate.norm:                             12208.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.033 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.334 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.290 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       13988.861 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   5: 154386.764 ops/s
[info]                  ·gc.alloc.rate:                                  1197.674 MB/sec
[info]                  ·gc.alloc.rate.norm:                             12208.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.324 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10410.449 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson":
[info]   153252.400 ±(99.9%) 2843.631 ops/s [Average]
[info]   (min, avg, max) = (152324.894, 153252.400, 154386.764), stdev = 738.482
[info]   CI (99.9%): [150408.769, 156096.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1188.566 ±(99.9%) 22.678 MB/sec [Average]
[info]   (min, avg, max) = (1181.263, 1188.566, 1197.674), stdev = 5.889
[info]   CI (99.9%): [1165.888, 1211.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   12208.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (12208.003, 12208.003, 12208.003), stdev = 0.001
[info]   CI (99.9%): [12208.002, 12208.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.026 ±(99.9%) 0.158 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.094), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.263 ±(99.9%) 1.620 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.263, 0.970), stdev = 0.421
[info]   CI (99.9%): [≈ 0, 1.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1150.124 ±(99.9%) 711.328 MB/sec [Average]
[info]   (min, avg, max) = (1007.631, 1150.124, 1361.290), stdev = 184.730
[info]   CI (99.9%): [438.795, 1861.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   11817.756 ±(99.9%) 7447.144 B/op [Average]
[info]   (min, avg, max) = (10362.140, 11817.756, 13988.861), stdev = 1934.000
[info]   CI (99.9%): [4370.613, 19264.900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.199 ±(99.9%) 6.386 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.199, 3.996), stdev = 1.658
[info]   CI (99.9%): [≈ 0, 7.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   12.331 ±(99.9%) 65.587 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12.331, 41.040), stdev = 17.033
[info]   CI (99.9%): [≈ 0, 77.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.time":
[info]   53.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 10.600, 19.000), stdev = 6.504
[info]   CI (99.9%): [53.000, 53.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce
[info] # Run progress: 1.21% complete, ETA 01:08:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 222669.979 ops/s
[info] # Warmup Iteration   2: 533454.020 ops/s
[info] # Warmup Iteration   3: 531860.024 ops/s
[info] Iteration   1: 532249.868 ops/s
[info]                  ·gc.alloc.rate:                   1652.719 MB/sec
[info]                  ·gc.alloc.rate.norm:              4888.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1684.981 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4983.417 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 9.849 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 532428.073 ops/s
[info]                  ·gc.alloc.rate:                                  1653.546 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4888.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.027 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.080 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.936 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5031.044 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 542686.311 ops/s
[info]                  ·gc.alloc.rate:            1685.169 MB/sec
[info]                  ·gc.alloc.rate.norm:       4888.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.735 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4936.053 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 536075.133 ops/s
[info]                  ·gc.alloc.rate:                                  1664.688 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4888.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.781 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4996.916 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 538916.885 ops/s
[info]                  ·gc.alloc.rate:                                  1673.501 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4888.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.760 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4970.541 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce":
[info]   536471.254 ±(99.9%) 17105.309 ops/s [Average]
[info]   (min, avg, max) = (532249.868, 536471.254, 542686.311), stdev = 4442.195
[info]   CI (99.9%): [519365.945, 553576.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.alloc.rate":
[info]   1665.924 ±(99.9%) 52.969 MB/sec [Average]
[info]   (min, avg, max) = (1652.719, 1665.924, 1685.169), stdev = 13.756
[info]   CI (99.9%): [1612.956, 1718.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   4888.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4888.001, 4888.001, 4888.001), stdev = 0.001
[info]   CI (99.9%): [4888.001, 4888.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.006 ±(99.9%) 0.045 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.027), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.018 ±(99.9%) 0.134 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.080), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1698.438 ±(99.9%) 28.971 MB/sec [Average]
[info]   (min, avg, max) = (1684.981, 1698.438, 1701.936), stdev = 7.524
[info]   CI (99.9%): [1669.468, 1727.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   4983.594 ±(99.9%) 134.216 B/op [Average]
[info]   (min, avg, max) = (4936.053, 4983.594, 5031.044), stdev = 34.855
[info]   CI (99.9%): [4849.378, 5117.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   1.970 ±(99.9%) 16.960 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.970, 9.849), stdev = 4.404
[info]   CI (99.9%): [≈ 0, 18.930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.000, 18.000), stdev = 6.164
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala
[info] # Run progress: 1.52% complete, ETA 01:08:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_55ac30bf/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 395283.559 ops/s
[info] # Warmup Iteration   2: 1655256.296 ops/s
[info] # Warmup Iteration   3: 1693937.793 ops/s
[info] Iteration   1: 1694990.513 ops/s
[info]                  ·gc.alloc.rate:            706.312 MB/sec
[info]                  ·gc.alloc.rate.norm:       656.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.278 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 623.462 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 1682357.290 ops/s
[info]                  ·gc.alloc.rate:            701.198 MB/sec
[info]                  ·gc.alloc.rate.norm:       656.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.440 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 628.160 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 1690332.015 ops/s
[info]                  ·gc.alloc.rate:            704.444 MB/sec
[info]                  ·gc.alloc.rate.norm:       656.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.368 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 625.199 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 1666430.228 ops/s
[info]                  ·gc.alloc.rate:            694.403 MB/sec
[info]                  ·gc.alloc.rate.norm:       656.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1006.957 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 951.269 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   5: 1674907.503 ops/s
[info]                  ·gc.alloc.rate:                   698.150 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             671.510 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        630.969 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.756 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala":
[info]   1681803.510 ±(99.9%) 44359.009 ops/s [Average]
[info]   (min, avg, max) = (1666430.228, 1681803.510, 1694990.513), stdev = 11519.894
[info]   CI (99.9%): [1637444.501, 1726162.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   700.901 ±(99.9%) 18.438 MB/sec [Average]
[info]   (min, avg, max) = (694.403, 700.901, 706.312), stdev = 4.788
[info]   CI (99.9%): [682.463, 719.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   656.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (656.000, 656.000, 656.000), stdev = 0.001
[info]   CI (99.9%): [656.000, 656.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   738.511 ±(99.9%) 577.851 MB/sec [Average]
[info]   (min, avg, max) = (671.278, 738.511, 1006.957), stdev = 150.066
[info]   CI (99.9%): [160.659, 1316.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   691.812 ±(99.9%) 558.610 B/op [Average]
[info]   (min, avg, max) = (623.462, 691.812, 951.269), stdev = 145.069
[info]   CI (99.9%): [133.202, 1250.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.751 ±(99.9%) 6.468 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.751, 3.756), stdev = 1.680
[info]   CI (99.9%): [≈ 0, 7.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.time":
[info]   48.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 9.600, 13.000), stdev = 1.949
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala
[info] # Run progress: 1.82% complete, ETA 01:08:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7728464.102 ops/s
[info] # Warmup Iteration   2: 6090410.303 ops/s
[info] # Warmup Iteration   3: 6253068.186 ops/s
[info] Iteration   1: 6218544.286 ops/s
[info]                  ·gc.alloc.rate:            316.025 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.998 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 85.309 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 6297475.496 ops/s
[info]                  ·gc.alloc.rate:      320.072 MB/sec
[info]                  ·gc.alloc.rate.norm: 80.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 6282290.770 ops/s
[info]                  ·gc.alloc.rate:            319.278 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.008 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 84.443 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 6262508.691 ops/s
[info]                  ·gc.alloc.rate:            318.306 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.384 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 84.544 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 6296132.987 ops/s
[info]                  ·gc.alloc.rate:            319.984 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.345 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 84.091 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala":
[info]   6271390.446 ±(99.9%) 126002.613 ops/s [Average]
[info]   (min, avg, max) = (6218544.286, 6271390.446, 6297475.496), stdev = 32722.478
[info]   CI (99.9%): [6145387.833, 6397393.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   318.733 ±(99.9%) 6.435 MB/sec [Average]
[info]   (min, avg, max) = (316.025, 318.733, 320.072), stdev = 1.671
[info]   CI (99.9%): [312.298, 325.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   80.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (80.000, 80.000, 80.000), stdev = 0.001
[info]   CI (99.9%): [80.000, 80.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   269.347 ±(99.9%) 579.791 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.347, 337.008), stdev = 150.570
[info]   CI (99.9%): [≈ 0, 849.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   67.677 ±(99.9%) 145.691 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 67.677, 85.309), stdev = 37.835
[info]   CI (99.9%): [≈ 0, 213.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson
[info] # Run progress: 2.12% complete, ETA 01:08:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 45282.137 ops/s
[info] # Warmup Iteration   2: 291265.098 ops/s
[info] # Warmup Iteration   3: 297694.749 ops/s
[info] Iteration   1: 297973.042 ops/s
[info]                  ·gc.alloc.rate:                   978.204 MB/sec
[info]                  ·gc.alloc.rate.norm:              5168.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1007.628 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5323.453 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.518 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 298632.206 ops/s
[info]                  ·gc.alloc.rate:            980.711 MB/sec
[info]                  ·gc.alloc.rate.norm:       5168.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.276 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5318.533 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   3: 297388.729 ops/s
[info]                  ·gc.alloc.rate:                   977.401 MB/sec
[info]                  ·gc.alloc.rate.norm:              5168.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1005.245 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5315.226 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.989 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 21.092 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   4: 299446.436 ops/s
[info]                  ·gc.alloc.rate:                                  983.073 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5168.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.139 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.729 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            679.983 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3574.659 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                3.501 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 289330.498 ops/s
[info]                  ·gc.alloc.rate:                                  949.959 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5168.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.046 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.248 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.081 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5554.923 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson":
[info]   296554.182 ±(99.9%) 15826.867 ops/s [Average]
[info]   (min, avg, max) = (289330.498, 296554.182, 299446.436), stdev = 4110.187
[info]   CI (99.9%): [280727.315, 312381.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate":
[info]   973.870 ±(99.9%) 52.179 MB/sec [Average]
[info]   (min, avg, max) = (949.959, 973.870, 983.073), stdev = 13.551
[info]   CI (99.9%): [921.690, 1026.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5168.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5168.001, 5168.001, 5168.002), stdev = 0.001
[info]   CI (99.9%): [5168.001, 5168.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.037 ±(99.9%) 0.232 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.139), stdev = 0.060
[info]   CI (99.9%): [≈ 0, 0.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.196 ±(99.9%) 1.221 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.196, 0.729), stdev = 0.317
[info]   CI (99.9%): [≈ 0, 1.417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   944.643 ±(99.9%) 570.185 MB/sec [Average]
[info]   (min, avg, max) = (679.983, 944.643, 1021.081), stdev = 148.075
[info]   CI (99.9%): [374.457, 1514.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   5017.359 ±(99.9%) 3130.341 B/op [Average]
[info]   (min, avg, max) = (3574.659, 5017.359, 5554.923), stdev = 812.940
[info]   CI (99.9%): [1887.018, 8147.699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.064 ±(99.9%) 6.425 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.064, 3.989), stdev = 1.669
[info]   CI (99.9%): [≈ 0, 7.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   5.622 ±(99.9%) 33.979 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.622, 21.092), stdev = 8.824
[info]   CI (99.9%): [≈ 0, 39.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.time":
[info]   48.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.600, 14.000), stdev = 5.595
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce
[info] # Run progress: 2.42% complete, ETA 01:08:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 845292.014 ops/s
[info] # Warmup Iteration   2: 1440384.021 ops/s
[info] # Warmup Iteration   3: 1463721.745 ops/s
[info] Iteration   1: 1481018.685 ops/s
[info]                  ·gc.alloc.rate:                                  2304.114 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2448.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.086 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.092 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2383.245 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2532.072 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   2: 1473530.522 ops/s
[info]                  ·gc.alloc.rate:                                  2291.308 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2448.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.771 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2181.398 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 1455724.149 ops/s
[info]                  ·gc.alloc.rate:                                  2264.668 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2448.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2383.147 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2576.071 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 1467971.274 ops/s
[info]                  ·gc.alloc.rate:                                  2283.930 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2448.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2383.314 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2554.524 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 1477163.132 ops/s
[info]                  ·gc.alloc.rate:            2297.572 MB/sec
[info]                  ·gc.alloc.rate.norm:       2448.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2382.810 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2538.818 B/op
[info]                  ·gc.count:                 7.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce":
[info]   1471081.552 ±(99.9%) 37887.936 ops/s [Average]
[info]   (min, avg, max) = (1455724.149, 1471081.552, 1481018.685), stdev = 9839.377
[info]   CI (99.9%): [1433193.616, 1508969.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate":
[info]   2288.318 ±(99.9%) 58.484 MB/sec [Average]
[info]   (min, avg, max) = (2264.668, 2288.318, 2304.114), stdev = 15.188
[info]   CI (99.9%): [2229.835, 2346.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2448.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2448.000, 2448.000, 2448.000), stdev = 0.001
[info]   CI (99.9%): [2448.000, 2448.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.019 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.086), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.020 ±(99.9%) 0.155 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.092), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2314.857 ±(99.9%) 587.839 MB/sec [Average]
[info]   (min, avg, max) = (2041.771, 2314.857, 2383.314), stdev = 152.660
[info]   CI (99.9%): [1727.018, 2902.697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2476.577 ±(99.9%) 638.728 B/op [Average]
[info]   (min, avg, max) = (2181.398, 2476.577, 2576.071), stdev = 165.876
[info]   CI (99.9%): [1837.849, 3115.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.count":
[info]   34.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.600, 10.000), stdev = 2.074
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala
[info] # Run progress: 2.73% complete, ETA 01:07:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 727779.020 ops/s
[info] # Warmup Iteration   2: 2095066.841 ops/s
[info] # Warmup Iteration   3: 2119876.085 ops/s
[info] Iteration   1: 2106476.260 ops/s
[info]                  ·gc.alloc.rate:                   1477.226 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1343.880 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1004.345 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.498 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 2105943.091 ops/s
[info]                  ·gc.alloc.rate:                                  1476.982 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1104.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.065 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.049 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1697.008 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1268.463 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                3.485 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 2148875.156 ops/s
[info]                  ·gc.alloc.rate:            1507.156 MB/sec
[info]                  ·gc.alloc.rate.norm:       1104.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.402 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 997.235 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 2148587.355 ops/s
[info]                  ·gc.alloc.rate:                                  1506.852 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1104.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.341 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       997.391 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 2126929.400 ops/s
[info]                  ·gc.alloc.rate:                                  1491.753 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1104.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.735 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1259.401 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala":
[info]   2127362.253 ±(99.9%) 81877.189 ops/s [Average]
[info]   (min, avg, max) = (2105943.091, 2127362.253, 2148875.156), stdev = 21263.246
[info]   CI (99.9%): [2045485.064, 2209239.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1491.994 ±(99.9%) 57.572 MB/sec [Average]
[info]   (min, avg, max) = (1476.982, 1491.994, 1507.156), stdev = 14.951
[info]   CI (99.9%): [1434.422, 1549.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1104.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1104.000, 1104.000, 1104.000), stdev = 0.001
[info]   CI (99.9%): [1104.000, 1104.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.014 ±(99.9%) 0.112 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.065), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.010 ±(99.9%) 0.083 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.049), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1493.073 ±(99.9%) 725.717 MB/sec [Average]
[info]   (min, avg, max) = (1343.880, 1493.073, 1701.735), stdev = 188.466
[info]   CI (99.9%): [767.356, 2218.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1105.367 ±(99.9%) 557.625 B/op [Average]
[info]   (min, avg, max) = (997.235, 1105.367, 1268.463), stdev = 144.814
[info]   CI (99.9%): [547.742, 1662.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.821 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.662), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.796 ±(99.9%) 5.846 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.796, 3.485), stdev = 1.518
[info]   CI (99.9%): [≈ 0, 6.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.400, 18.000), stdev = 6.229
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala
[info] # Run progress: 3.03% complete, ETA 01:07:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8814744.767 ops/s
[info] # Warmup Iteration   2: 9846141.446 ops/s
[info] # Warmup Iteration   3: 9845142.310 ops/s
[info] Iteration   1: 9748985.831 ops/s
[info]                  ·gc.alloc.rate:                   1238.526 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1349.886 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        217.983 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.108 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   2: 9451988.352 ops/s
[info]                  ·gc.alloc.rate:                                  1200.920 MB/sec
[info]                  ·gc.alloc.rate.norm:                             200.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.092 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1354.742 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       225.617 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                0.555 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 9283496.726 ops/s
[info]                  ·gc.alloc.rate:                                  1179.616 MB/sec
[info]                  ·gc.alloc.rate.norm:                             200.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.127 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       173.129 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   4: 9571107.593 ops/s
[info]                  ·gc.alloc.rate:            1216.172 MB/sec
[info]                  ·gc.alloc.rate.norm:       200.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.522 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 223.903 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 9442636.172 ops/s
[info]                  ·gc.alloc.rate:            1199.851 MB/sec
[info]                  ·gc.alloc.rate.norm:       200.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.173 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 170.217 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala":
[info]   9499642.935 ±(99.9%) 665613.045 ops/s [Average]
[info]   (min, avg, max) = (9283496.726, 9499642.935, 9748985.831), stdev = 172857.594
[info]   CI (99.9%): [8834029.890, 10165255.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1207.017 ±(99.9%) 84.275 MB/sec [Average]
[info]   (min, avg, max) = (1179.616, 1207.017, 1238.526), stdev = 21.886
[info]   CI (99.9%): [1122.743, 1291.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   200.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (200.000, 200.000, 200.000), stdev = 0.001
[info]   CI (99.9%): [200.000, 200.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.019 ±(99.9%) 0.157 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.092), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.003 ±(99.9%) 0.026 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.015), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1221.690 ±(99.9%) 705.106 MB/sec [Average]
[info]   (min, avg, max) = (1021.127, 1221.690, 1361.522), stdev = 183.114
[info]   CI (99.9%): [516.584, 1926.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   202.170 ±(99.9%) 107.827 B/op [Average]
[info]   (min, avg, max) = (170.217, 202.170, 225.617), stdev = 28.002
[info]   CI (99.9%): [94.342, 309.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.132 ±(99.9%) 0.926 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.132, 0.555), stdev = 0.241
[info]   CI (99.9%): [≈ 0, 1.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.800, 19.000), stdev = 7.259
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson
[info] # Run progress: 3.33% complete, ETA 01:07:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 97166.561 ops/s
[info] # Warmup Iteration   2: 573374.115 ops/s
[info] # Warmup Iteration   3: 592959.179 ops/s
[info] Iteration   1: 591007.805 ops/s
[info]                  ·gc.alloc.rate:                   1519.732 MB/sec
[info]                  ·gc.alloc.rate.norm:              4048.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1679.020 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4472.285 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.548 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         23.000 ms
[info] Iteration   2: 599655.533 ops/s
[info]                  ·gc.alloc.rate:                                  1542.222 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4048.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.139 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.364 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1357.494 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3563.130 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                10.490 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   3: 600471.948 ops/s
[info]                  ·gc.alloc.rate:                                  1544.111 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4048.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.593 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4460.852 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 599385.459 ops/s
[info]                  ·gc.alloc.rate:            1541.300 MB/sec
[info]                  ·gc.alloc.rate.norm:       4048.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.321 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3575.313 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 592721.913 ops/s
[info]                  ·gc.alloc.rate:            1524.936 MB/sec
[info]                  ·gc.alloc.rate.norm:       4048.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1702.477 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4519.290 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson":
[info]   596648.532 ±(99.9%) 17046.165 ops/s [Average]
[info]   (min, avg, max) = (591007.805, 596648.532, 600471.948), stdev = 4426.835
[info]   CI (99.9%): [579602.366, 613694.697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1534.460 ±(99.9%) 43.386 MB/sec [Average]
[info]   (min, avg, max) = (1519.732, 1534.460, 1544.111), stdev = 11.267
[info]   CI (99.9%): [1491.074, 1577.846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   4048.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4048.001, 4048.001, 4048.001), stdev = 0.001
[info]   CI (99.9%): [4048.001, 4048.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.028 ±(99.9%) 0.237 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.139), stdev = 0.062
[info]   CI (99.9%): [≈ 0, 0.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.074 ±(99.9%) 0.623 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.074, 0.364), stdev = 0.162
[info]   CI (99.9%): [≈ 0, 0.697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1560.381 ±(99.9%) 707.396 MB/sec [Average]
[info]   (min, avg, max) = (1357.494, 1560.381, 1702.477), stdev = 183.708
[info]   CI (99.9%): [852.985, 2267.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   4118.174 ±(99.9%) 1931.557 B/op [Average]
[info]   (min, avg, max) = (3563.130, 4118.174, 4519.290), stdev = 501.619
[info]   CI (99.9%): [2186.616, 6049.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 3.997), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   2.808 ±(99.9%) 17.563 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.808, 10.490), stdev = 4.561
[info]   CI (99.9%): [≈ 0, 20.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.600, 23.000), stdev = 8.385
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce
[info] # Run progress: 3.64% complete, ETA 01:07:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1027124.977 ops/s
[info] # Warmup Iteration   2: 1696563.652 ops/s
[info] # Warmup Iteration   3: 1691564.182 ops/s
[info] Iteration   1: 1669404.215 ops/s
[info]                  ·gc.alloc.rate:                   1493.564 MB/sec
[info]                  ·gc.alloc.rate.norm:              1408.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1685.393 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1588.840 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.140 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         20.000 ms
[info] Iteration   2: 1745378.807 ops/s
[info]                  ·gc.alloc.rate:                                  1561.585 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1408.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.071 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.064 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.706 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1227.780 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   3: 1748702.308 ops/s
[info]                  ·gc.alloc.rate:                                  1564.204 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1408.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.755 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1531.815 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 1748726.473 ops/s
[info]                  ·gc.alloc.rate:            1564.273 MB/sec
[info]                  ·gc.alloc.rate.norm:       1408.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.759 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1531.751 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 1741006.779 ops/s
[info]                  ·gc.alloc.rate:                                  1557.861 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1408.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.915 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1230.903 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce":
[info]   1730643.716 ±(99.9%) 132384.490 ops/s [Average]
[info]   (min, avg, max) = (1669404.215, 1730643.716, 1748726.473), stdev = 34379.832
[info]   CI (99.9%): [1598259.227, 1863028.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1548.297 ±(99.9%) 118.248 MB/sec [Average]
[info]   (min, avg, max) = (1493.564, 1548.297, 1564.273), stdev = 30.709
[info]   CI (99.9%): [1430.050, 1666.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1408.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1408.000, 1408.000, 1408.000), stdev = 0.001
[info]   CI (99.9%): [1408.000, 1408.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.015 ±(99.9%) 0.121 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.071), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.013 ±(99.9%) 0.109 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.064), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1562.505 ±(99.9%) 705.940 MB/sec [Average]
[info]   (min, avg, max) = (1361.706, 1562.505, 1701.759), stdev = 183.330
[info]   CI (99.9%): [856.566, 2268.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   1422.218 ±(99.9%) 683.908 B/op [Average]
[info]   (min, avg, max) = (1227.780, 1422.218, 1588.840), stdev = 177.609
[info]   CI (99.9%): [738.310, 2106.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   0.628 ±(99.9%) 5.407 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.628, 3.140), stdev = 1.404
[info]   CI (99.9%): [≈ 0, 6.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.800, 20.000), stdev = 7.396
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala
[info] # Run progress: 3.94% complete, ETA 01:07:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_55ac30bf/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 1190792.103 ops/s
[info] # Warmup Iteration   2: 4115608.577 ops/s
[info] # Warmup Iteration   3: 4149496.926 ops/s
[info] Iteration   1: 4137195.006 ops/s
[info]                  ·gc.alloc.rate:            1135.299 MB/sec
[info]                  ·gc.alloc.rate.norm:       432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1342.539 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 510.858 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   2: 4099359.149 ops/s
[info]                  ·gc.alloc.rate:            1125.015 MB/sec
[info]                  ·gc.alloc.rate.norm:       432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.056 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 386.705 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 4013466.076 ops/s
[info]                  ·gc.alloc.rate:                                  1101.617 MB/sec
[info]                  ·gc.alloc.rate.norm:                             432.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.038 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1015.818 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       398.354 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1.829 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 4027955.979 ops/s
[info]                  ·gc.alloc.rate:                                  1105.424 MB/sec
[info]                  ·gc.alloc.rate.norm:                             432.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.043 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.408 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       532.039 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 4133970.530 ops/s
[info]                  ·gc.alloc.rate:            1134.549 MB/sec
[info]                  ·gc.alloc.rate.norm:       432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.043 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 388.781 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala":
[info]   4082389.348 ±(99.9%) 225070.564 ops/s [Average]
[info]   (min, avg, max) = (4013466.076, 4082389.348, 4137195.006), stdev = 58450.111
[info]   CI (99.9%): [3857318.784, 4307459.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1120.381 ±(99.9%) 61.507 MB/sec [Average]
[info]   (min, avg, max) = (1101.617, 1120.381, 1135.299), stdev = 15.973
[info]   CI (99.9%): [1058.874, 1181.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   432.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (432.000, 432.000, 432.000), stdev = 0.001
[info]   CI (99.9%): [432.000, 432.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.016 ±(99.9%) 0.086 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.043), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.006 ±(99.9%) 0.034 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.017), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1149.573 ±(99.9%) 712.190 MB/sec [Average]
[info]   (min, avg, max) = (1007.056, 1149.573, 1361.408), stdev = 184.954
[info]   CI (99.9%): [437.382, 1861.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   443.347 ±(99.9%) 276.565 B/op [Average]
[info]   (min, avg, max) = (386.705, 443.347, 532.039), stdev = 71.823
[info]   CI (99.9%): [166.782, 719.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.030 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.663), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.366 ±(99.9%) 3.149 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.366, 1.829), stdev = 0.818
[info]   CI (99.9%): [≈ 0, 3.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.200, 17.000), stdev = 6.301
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala
[info] # Run progress: 4.24% complete, ETA 01:06:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9653739.330 ops/s
[info] # Warmup Iteration   2: 20157584.751 ops/s
[info] # Warmup Iteration   3: 20914161.224 ops/s
[info] Iteration   1: 20978718.371 ops/s
[info]                  ·gc.alloc.rate:                   639.663 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.320 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        50.526 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.050 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 20921737.638 ops/s
[info]                  ·gc.alloc.rate:            638.034 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.079 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 50.712 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 20931789.494 ops/s
[info]                  ·gc.alloc.rate:            638.239 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.666 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 50.589 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 20908860.645 ops/s
[info]                  ·gc.alloc.rate:            637.824 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.965 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 50.645 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 20902237.289 ops/s
[info]                  ·gc.alloc.rate:                   637.487 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.474 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        50.710 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.050 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala":
[info]   20928668.687 ±(99.9%) 116378.141 ops/s [Average]
[info]   (min, avg, max) = (20902237.289, 20928668.687, 20978718.371), stdev = 30223.034
[info]   CI (99.9%): [20812290.547, 21045046.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   638.250 ±(99.9%) 3.225 MB/sec [Average]
[info]   (min, avg, max) = (637.487, 638.250, 639.663), stdev = 0.837
[info]   CI (99.9%): [635.025, 641.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   673.301 ±(99.9%) 2.065 MB/sec [Average]
[info]   (min, avg, max) = (672.666, 673.301, 674.079), stdev = 0.536
[info]   CI (99.9%): [671.235, 675.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   50.636 ±(99.9%) 0.308 B/op [Average]
[info]   (min, avg, max) = (50.526, 50.636, 50.712), stdev = 0.080
[info]   CI (99.9%): [50.328, 50.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.020 ±(99.9%) 0.106 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.050), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 4.55% complete, ETA 01:06:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9814419.171 ops/s
[info] # Warmup Iteration   2: 18382089.572 ops/s
[info] # Warmup Iteration   3: 18421360.846 ops/s
[info] Iteration   1: 18424229.082 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 18433286.310 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 17620424.782 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 18076368.392 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 18092203.455 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc":
[info]   18129302.404 ±(99.9%) 1280770.040 ops/s [Average]
[info]   (min, avg, max) = (17620424.782, 18129302.404, 18433286.310), stdev = 332611.912
[info]   CI (99.9%): [16848532.365, 19410072.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson
[info] # Run progress: 4.85% complete, ETA 01:06:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 167264.593 ops/s
[info] # Warmup Iteration   2: 1224195.866 ops/s
[info] # Warmup Iteration   3: 1230215.982 ops/s
[info] Iteration   1: 1218729.638 ops/s
[info]                  ·gc.alloc.rate:                   1784.412 MB/sec
[info]                  ·gc.alloc.rate.norm:              2304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1684.888 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2175.497 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 6.022 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   2: 1255967.030 ops/s
[info]                  ·gc.alloc.rate:                                  1838.899 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2304.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.178 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.222 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.679 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2559.321 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 1255783.376 ops/s
[info]                  ·gc.alloc.rate:                                  1838.097 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2304.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.750 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2133.093 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 1233037.823 ops/s
[info]                  ·gc.alloc.rate:                                  1804.634 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2304.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.566 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2172.412 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 1228784.789 ops/s
[info]                  ·gc.alloc.rate:            1798.469 MB/sec
[info]                  ·gc.alloc.rate.norm:       2304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2041.960 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2615.935 B/op
[info]                  ·gc.count:                 6.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson":
[info]   1238460.531 ±(99.9%) 64401.728 ops/s [Average]
[info]   (min, avg, max) = (1218729.638, 1238460.531, 1255967.030), stdev = 16724.924
[info]   CI (99.9%): [1174058.803, 1302862.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1812.902 ±(99.9%) 94.302 MB/sec [Average]
[info]   (min, avg, max) = (1784.412, 1812.902, 1838.899), stdev = 24.490
[info]   CI (99.9%): [1718.600, 1907.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2304.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2304.000, 2304.000, 2304.000), stdev = 0.001
[info]   CI (99.9%): [2304.000, 2304.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.037 ±(99.9%) 0.304 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.178), stdev = 0.079
[info]   CI (99.9%): [≈ 0, 0.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.046 ±(99.9%) 0.380 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.222), stdev = 0.099
[info]   CI (99.9%): [≈ 0, 0.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1834.569 ±(99.9%) 730.751 MB/sec [Average]
[info]   (min, avg, max) = (1684.888, 1834.569, 2042.679), stdev = 189.774
[info]   CI (99.9%): [1103.818, 2565.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   2331.252 ±(99.9%) 906.776 B/op [Average]
[info]   (min, avg, max) = (2133.093, 2331.252, 2615.935), stdev = 235.487
[info]   CI (99.9%): [1424.476, 3238.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.031 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.664), stdev = 2.086
[info]   CI (99.9%): [≈ 0, 8.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   1.204 ±(99.9%) 10.369 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.204, 6.022), stdev = 2.693
[info]   CI (99.9%): [≈ 0, 11.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.400, 19.000), stdev = 6.504
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce
[info] # Run progress: 5.15% complete, ETA 01:06:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16027.613 ops/s
[info] # Warmup Iteration   2: 19709.677 ops/s
[info] # Warmup Iteration   3: 19669.189 ops/s
[info] Iteration   1: 19708.372 ops/s
[info]                  ·gc.alloc.rate:            1232.938 MB/sec
[info]                  ·gc.alloc.rate.norm:       98456.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.276 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 107666.286 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 19462.455 ops/s
[info]                  ·gc.alloc.rate:                                  1217.244 MB/sec
[info]                  ·gc.alloc.rate.norm:                             98456.021 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.042 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.426 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1014.281 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       82039.518 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                269.335 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 19700.160 ops/s
[info]                  ·gc.alloc.rate:                                  1232.151 MB/sec
[info]                  ·gc.alloc.rate.norm:                             98456.026 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.041 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.303 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.281 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       108774.327 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 19884.240 ops/s
[info]                  ·gc.alloc.rate:                                  1244.166 MB/sec
[info]                  ·gc.alloc.rate.norm:                             98456.022 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.013 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.038 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.431 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       80830.040 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 19935.355 ops/s
[info]                  ·gc.alloc.rate:                                  1246.822 MB/sec
[info]                  ·gc.alloc.rate.norm:                             98456.020 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.013 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.037 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.323 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       107497.710 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce":
[info]   19738.117 ±(99.9%) 716.700 ops/s [Average]
[info]   (min, avg, max) = (19462.455, 19738.117, 19935.355), stdev = 186.125
[info]   CI (99.9%): [19021.417, 20454.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate":
[info]   1234.664 ±(99.9%) 45.188 MB/sec [Average]
[info]   (min, avg, max) = (1217.244, 1234.664, 1246.822), stdev = 11.735
[info]   CI (99.9%): [1189.476, 1279.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   98456.022 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (98456.020, 98456.022, 98456.026), stdev = 0.002
[info]   CI (99.9%): [98456.013, 98456.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.022 ±(99.9%) 0.073 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.761 ±(99.9%) 5.871 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.761, 3.426), stdev = 1.525
[info]   CI (99.9%): [≈ 0, 7.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1221.319 ±(99.9%) 715.559 MB/sec [Average]
[info]   (min, avg, max) = (1014.281, 1221.319, 1361.323), stdev = 185.828
[info]   CI (99.9%): [505.760, 1936.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   97361.576 ±(99.9%) 56040.970 B/op [Average]
[info]   (min, avg, max) = (80830.040, 97361.576, 108774.327), stdev = 14553.662
[info]   CI (99.9%): [41320.606, 153402.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   53.867 ±(99.9%) 463.812 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 53.867, 269.335), stdev = 120.450
[info]   CI (99.9%): [≈ 0, 517.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 12.000), stdev = 4.087
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala
[info] # Run progress: 5.45% complete, ETA 01:06:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18516.403 ops/s
[info] # Warmup Iteration   2: 31098.175 ops/s
[info] # Warmup Iteration   3: 31614.479 ops/s
[info] Iteration   1: 31787.125 ops/s
[info]                  ·gc.alloc.rate:                   796.886 MB/sec
[info]                  ·gc.alloc.rate.norm:              39454.987 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.130 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        33278.180 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 32.981 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 31449.884 ops/s
[info]                  ·gc.alloc.rate:            788.573 MB/sec
[info]                  ·gc.alloc.rate.norm:       39456.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.915 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 33669.107 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 31567.242 ops/s
[info]                  ·gc.alloc.rate:            791.296 MB/sec
[info]                  ·gc.alloc.rate.norm:       39456.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.073 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 50314.910 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   4: 30549.721 ops/s
[info]                  ·gc.alloc.rate:                   765.701 MB/sec
[info]                  ·gc.alloc.rate.norm:              39456.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:             671.955 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        34625.382 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 240.216 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 31782.763 ops/s
[info]                  ·gc.alloc.rate:                                  796.819 MB/sec
[info]                  ·gc.alloc.rate.norm:                             39456.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.144 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 7.112 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.823 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       33712.240 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala":
[info]   31427.347 ±(99.9%) 1969.168 ops/s [Average]
[info]   (min, avg, max) = (30549.721, 31427.347, 31787.125), stdev = 511.387
[info]   CI (99.9%): [29458.178, 33396.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   787.855 ±(99.9%) 49.652 MB/sec [Average]
[info]   (min, avg, max) = (765.701, 787.855, 796.886), stdev = 12.895
[info]   CI (99.9%): [738.202, 837.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   39455.808 ±(99.9%) 1.767 B/op [Average]
[info]   (min, avg, max) = (39454.987, 39455.808, 39456.014), stdev = 0.459
[info]   CI (99.9%): [39454.042, 39457.575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.029 ±(99.9%) 0.247 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.144), stdev = 0.064
[info]   CI (99.9%): [≈ 0, 0.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.422 ±(99.9%) 12.247 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.422, 7.112), stdev = 3.181
[info]   CI (99.9%): [≈ 0, 13.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   741.379 ±(99.9%) 576.407 MB/sec [Average]
[info]   (min, avg, max) = (671.955, 741.379, 1009.073), stdev = 149.691
[info]   CI (99.9%): [164.973, 1317.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   37119.964 ±(99.9%) 28466.771 B/op [Average]
[info]   (min, avg, max) = (33278.180, 37119.964, 50314.910), stdev = 7392.730
[info]   CI (99.9%): [8653.193, 65586.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.820 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.662), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   54.639 ±(99.9%) 403.234 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 54.639, 240.216), stdev = 104.719
[info]   CI (99.9%): [≈ 0, 457.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 8.600, 13.000), stdev = 2.608
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala
[info] # Run progress: 5.76% complete, ETA 01:05:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27888.061 ops/s
[info] # Warmup Iteration   2: 32144.717 ops/s
[info] # Warmup Iteration   3: 31164.576 ops/s
[info] Iteration   1: 32192.174 ops/s
[info]                  ·gc.alloc.rate:            432.421 MB/sec
[info]                  ·gc.alloc.rate.norm:       21144.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.009 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16478.646 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 32069.529 ops/s
[info]                  ·gc.alloc.rate:            430.762 MB/sec
[info]                  ·gc.alloc.rate.norm:       21144.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.986 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 33082.645 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 31993.596 ops/s
[info]                  ·gc.alloc.rate:            429.817 MB/sec
[info]                  ·gc.alloc.rate.norm:       21144.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.073 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16581.644 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 32222.175 ops/s
[info]                  ·gc.alloc.rate:            432.878 MB/sec
[info]                  ·gc.alloc.rate.norm:       21144.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.061 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16463.818 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   5: 32152.035 ops/s
[info]                  ·gc.alloc.rate:            431.883 MB/sec
[info]                  ·gc.alloc.rate.norm:       21144.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.015 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 32998.287 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala":
[info]   32125.902 ±(99.9%) 360.330 ops/s [Average]
[info]   (min, avg, max) = (31993.596, 32125.902, 32222.175), stdev = 93.576
[info]   CI (99.9%): [31765.572, 32486.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   431.552 ±(99.9%) 4.817 MB/sec [Average]
[info]   (min, avg, max) = (429.817, 431.552, 432.878), stdev = 1.251
[info]   CI (99.9%): [426.736, 436.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   21144.014 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (21144.013, 21144.014, 21144.017), stdev = 0.002
[info]   CI (99.9%): [21144.007, 21144.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   471.829 ±(99.9%) 710.662 MB/sec [Average]
[info]   (min, avg, max) = (337.009, 471.829, 674.015), stdev = 184.557
[info]   CI (99.9%): [≈ 0, 1182.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   23121.008 ±(99.9%) 34868.919 B/op [Average]
[info]   (min, avg, max) = (16463.818, 23121.008, 33082.645), stdev = 9055.347
[info]   CI (99.9%): [≈ 0, 57989.927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.000, 6.000), stdev = 1.871
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson
[info] # Run progress: 6.06% complete, ETA 01:05:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13291.270 ops/s
[info] # Warmup Iteration   2: 24853.605 ops/s
[info] # Warmup Iteration   3: 24911.622 ops/s
[info] Iteration   1: 24969.199 ops/s
[info]                  ·gc.alloc.rate:            1323.075 MB/sec
[info]                  ·gc.alloc.rate.norm:       83400.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.494 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 84813.146 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 24996.202 ops/s
[info]                  ·gc.alloc.rate:                                  1324.877 MB/sec
[info]                  ·gc.alloc.rate.norm:                             83400.022 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.083 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.207 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1353.866 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       85224.848 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                251.648 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   3: 24963.612 ops/s
[info]                  ·gc.alloc.rate:                                  1322.693 MB/sec
[info]                  ·gc.alloc.rate.norm:                             83400.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.011 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.674 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.413 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       85841.451 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 25216.910 ops/s
[info]                  ·gc.alloc.rate:                                  1336.039 MB/sec
[info]                  ·gc.alloc.rate.norm:                             83400.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.265 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.355 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       84980.347 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 25247.846 ops/s
[info]                  ·gc.alloc.rate:                                  1337.915 MB/sec
[info]                  ·gc.alloc.rate.norm:                             83400.017 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.488 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.540 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       84872.662 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson":
[info]   25078.754 ±(99.9%) 543.726 ops/s [Average]
[info]   (min, avg, max) = (24963.612, 25078.754, 25247.846), stdev = 141.204
[info]   CI (99.9%): [24535.028, 25622.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1328.920 ±(99.9%) 28.614 MB/sec [Average]
[info]   (min, avg, max) = (1322.693, 1328.920, 1337.915), stdev = 7.431
[info]   CI (99.9%): [1300.306, 1357.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   83400.018 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (83400.016, 83400.018, 83400.022), stdev = 0.002
[info]   CI (99.9%): [83400.008, 83400.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.021 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.083), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.327 ±(99.9%) 8.408 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.327, 5.207), stdev = 2.184
[info]   CI (99.9%): [≈ 0, 9.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1356.734 ±(99.9%) 27.291 MB/sec [Average]
[info]   (min, avg, max) = (1345.494, 1356.734, 1361.540), stdev = 7.087
[info]   CI (99.9%): [1329.443, 1384.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   85146.491 ±(99.9%) 1614.074 B/op [Average]
[info]   (min, avg, max) = (84813.146, 85146.491, 85841.451), stdev = 419.170
[info]   CI (99.9%): [83532.417, 86760.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.800 ±(99.9%) 6.884 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.800, 3.998), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   50.330 ±(99.9%) 433.353 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 50.330, 251.648), stdev = 112.540
[info]   CI (99.9%): [≈ 0, 483.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.000, 16.000), stdev = 5.874
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce
[info] # Run progress: 6.36% complete, ETA 01:05:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17388.892 ops/s
[info] # Warmup Iteration   2: 27639.134 ops/s
[info] # Warmup Iteration   3: 27596.350 ops/s
[info] Iteration   1: 27518.098 ops/s
[info]                  ·gc.alloc.rate:                   1563.062 MB/sec
[info]                  ·gc.alloc.rate.norm:              89408.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.076 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        77110.701 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 190.491 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 27815.427 ops/s
[info]                  ·gc.alloc.rate:                                  1579.885 MB/sec
[info]                  ·gc.alloc.rate.norm:                             89408.071 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.094 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.321 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.698 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       96301.642 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 28049.818 ops/s
[info]                  ·gc.alloc.rate:                                  1593.176 MB/sec
[info]                  ·gc.alloc.rate.norm:                             89408.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.388 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.701 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       95498.385 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 28030.760 ops/s
[info]                  ·gc.alloc.rate:                                  1592.392 MB/sec
[info]                  ·gc.alloc.rate.norm:                             89408.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.147 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1700.803 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       95494.981 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 27405.200 ops/s
[info]                  ·gc.alloc.rate:                                  1556.649 MB/sec
[info]                  ·gc.alloc.rate.norm:                             89408.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.517 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.301 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       78187.996 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce":
[info]   27763.861 ±(99.9%) 1130.383 ops/s [Average]
[info]   (min, avg, max) = (27405.200, 27763.861, 28049.818), stdev = 293.557
[info]   CI (99.9%): [26633.477, 28894.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1577.033 ±(99.9%) 64.299 MB/sec [Average]
[info]   (min, avg, max) = (1556.649, 1577.033, 1593.176), stdev = 16.698
[info]   CI (99.9%): [1512.734, 1641.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   89408.026 ±(99.9%) 0.096 B/op [Average]
[info]   (min, avg, max) = (89408.015, 89408.026, 89408.071), stdev = 0.025
[info]   CI (99.9%): [89407.930, 89408.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.023 ±(99.9%) 0.155 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.094), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.275 ±(99.9%) 8.745 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.275, 5.321), stdev = 2.271
[info]   CI (99.9%): [≈ 0, 10.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1562.716 ±(99.9%) 731.468 MB/sec [Average]
[info]   (min, avg, max) = (1348.076, 1562.716, 1701.701), stdev = 189.960
[info]   CI (99.9%): [831.248, 2294.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   88518.741 ±(99.9%) 38256.519 B/op [Average]
[info]   (min, avg, max) = (77110.701, 88518.741, 96301.642), stdev = 9935.096
[info]   CI (99.9%): [50262.222, 126775.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   38.098 ±(99.9%) 328.037 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 38.098, 190.491), stdev = 85.190
[info]   CI (99.9%): [≈ 0, 366.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 14.000), stdev = 4.472
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala
[info] # Run progress: 6.67% complete, ETA 01:05:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11750.573 ops/s
[info] # Warmup Iteration   2: 26362.245 ops/s
[info] # Warmup Iteration   3: 27540.386 ops/s
[info] Iteration   1: 27737.390 ops/s
[info]                  ·gc.alloc.rate:                   1519.481 MB/sec
[info]                  ·gc.alloc.rate.norm:              86208.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1682.175 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        95438.483 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 226.785 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         22.000 ms
[info] Iteration   2: 27913.130 ops/s
[info]                  ·gc.alloc.rate:                                  1528.721 MB/sec
[info]                  ·gc.alloc.rate.norm:                             86208.071 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.100 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.612 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.372 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       76770.877 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 28199.938 ops/s
[info]                  ·gc.alloc.rate:                                  1545.014 MB/sec
[info]                  ·gc.alloc.rate.norm:                             86208.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.405 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.292 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       94983.751 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 27394.892 ops/s
[info]                  ·gc.alloc.rate:                                  1500.814 MB/sec
[info]                  ·gc.alloc.rate.norm:                             86208.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.195 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.788 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       78222.239 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   5: 28237.289 ops/s
[info]                  ·gc.alloc.rate:                                  1546.608 MB/sec
[info]                  ·gc.alloc.rate.norm:                             86208.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.180 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.876 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       94862.675 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala":
[info]   27896.528 ±(99.9%) 1341.405 ops/s [Average]
[info]   (min, avg, max) = (27394.892, 27896.528, 28237.289), stdev = 348.359
[info]   CI (99.9%): [26555.123, 29237.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1528.128 ±(99.9%) 73.259 MB/sec [Average]
[info]   (min, avg, max) = (1500.814, 1528.128, 1546.608), stdev = 19.025
[info]   CI (99.9%): [1454.869, 1601.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   86208.026 ±(99.9%) 0.096 B/op [Average]
[info]   (min, avg, max) = (86208.014, 86208.026, 86208.071), stdev = 0.025
[info]   CI (99.9%): [86207.930, 86208.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.023 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.100), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.278 ±(99.9%) 9.344 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.278, 5.612), stdev = 2.427
[info]   CI (99.9%): [≈ 0, 10.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1561.901 ±(99.9%) 704.851 MB/sec [Average]
[info]   (min, avg, max) = (1361.372, 1561.901, 1702.292), stdev = 183.048
[info]   CI (99.9%): [857.050, 2266.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   88055.605 ±(99.9%) 37178.285 B/op [Average]
[info]   (min, avg, max) = (76770.877, 88055.605, 95438.483), stdev = 9655.083
[info]   CI (99.9%): [50877.320, 125233.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.884 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   45.357 ±(99.9%) 390.537 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 45.357, 226.785), stdev = 101.421
[info]   CI (99.9%): [≈ 0, 435.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 9.400, 22.000), stdev = 7.403
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala
[info] # Run progress: 6.97% complete, ETA 01:05:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22134.936 ops/s
[info] # Warmup Iteration   2: 29935.168 ops/s
[info] # Warmup Iteration   3: 30287.818 ops/s
[info] Iteration   1: 29938.413 ops/s
[info]                  ·gc.alloc.rate:                                  1544.812 MB/sec
[info]                  ·gc.alloc.rate.norm:                             81224.017 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.078 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.087 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1685.730 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       88633.265 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                210.114 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        14.000 ms
[info] Iteration   2: 30003.876 ops/s
[info]                  ·gc.alloc.rate:                                  1548.369 MB/sec
[info]                  ·gc.alloc.rate.norm:                             81224.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.428 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.505 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       71421.552 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   3: 29911.741 ops/s
[info]                  ·gc.alloc.rate:                                  1543.734 MB/sec
[info]                  ·gc.alloc.rate.norm:                             81224.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.388 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.891 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       89545.496 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   4: 30826.079 ops/s
[info]                  ·gc.alloc.rate:                                  1590.625 MB/sec
[info]                  ·gc.alloc.rate.norm:                             81224.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.067 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.714 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       86896.685 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 30815.961 ops/s
[info]                  ·gc.alloc.rate:                                  1590.164 MB/sec
[info]                  ·gc.alloc.rate.norm:                             81224.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.134 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.374 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       69537.647 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala":
[info]   30299.214 ±(99.9%) 1838.810 ops/s [Average]
[info]   (min, avg, max) = (29911.741, 30299.214, 30826.079), stdev = 477.533
[info]   CI (99.9%): [28460.404, 32138.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1563.541 ±(99.9%) 94.627 MB/sec [Average]
[info]   (min, avg, max) = (1543.734, 1563.541, 1590.625), stdev = 24.574
[info]   CI (99.9%): [1468.913, 1658.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   81224.015 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (81224.013, 81224.015, 81224.017), stdev = 0.002
[info]   CI (99.9%): [81224.008, 81224.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.019 ±(99.9%) 0.126 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.019, 0.078), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.021 ±(99.9%) 6.627 B/op [Average]
[info]   (min, avg, max) = (0.067, 1.021, 4.087), stdev = 1.721
[info]   CI (99.9%): [≈ 0, 7.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1562.443 ±(99.9%) 707.006 MB/sec [Average]
[info]   (min, avg, max) = (1361.374, 1562.443, 1701.891), stdev = 183.607
[info]   CI (99.9%): [855.437, 2269.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   81206.929 ±(99.9%) 37972.369 B/op [Average]
[info]   (min, avg, max) = (69537.647, 81206.929, 89545.496), stdev = 9861.304
[info]   CI (99.9%): [43234.560, 119179.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   42.023 ±(99.9%) 361.830 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 42.023, 210.114), stdev = 93.966
[info]   CI (99.9%): [≈ 0, 403.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.400, 14.000), stdev = 5.177
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 7.27% complete, ETA 01:04:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23874.134 ops/s
[info] # Warmup Iteration   2: 29421.450 ops/s
[info] # Warmup Iteration   3: 29627.602 ops/s
[info] Iteration   1: 29778.287 ops/s
[info]                  ·gc.alloc.rate:                   1479.409 MB/sec
[info]                  ·gc.alloc.rate.norm:              78168.066 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.945 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        71116.154 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 211.236 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 30620.907 ops/s
[info]                  ·gc.alloc.rate:                                  1520.993 MB/sec
[info]                  ·gc.alloc.rate.norm:                             78168.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.062 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.209 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.153 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       87478.341 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 30675.109 ops/s
[info]                  ·gc.alloc.rate:                                  1523.864 MB/sec
[info]                  ·gc.alloc.rate.norm:                             78168.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.193 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.847 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       69857.219 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 30655.786 ops/s
[info]                  ·gc.alloc.rate:                                  1522.420 MB/sec
[info]                  ·gc.alloc.rate.norm:                             78168.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.202 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.749 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       87375.634 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 30704.914 ops/s
[info]                  ·gc.alloc.rate:                                  1524.833 MB/sec
[info]                  ·gc.alloc.rate.norm:                             78168.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.470 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.382 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       69788.979 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc":
[info]   30487.000 ±(99.9%) 1530.073 ops/s [Average]
[info]   (min, avg, max) = (29778.287, 30487.000, 30704.914), stdev = 397.355
[info]   CI (99.9%): [28956.927, 32017.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1514.304 ±(99.9%) 75.322 MB/sec [Average]
[info]   (min, avg, max) = (1479.409, 1514.304, 1524.833), stdev = 19.561
[info]   CI (99.9%): [1438.982, 1589.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   78168.024 ±(99.9%) 0.091 B/op [Average]
[info]   (min, avg, max) = (78168.013, 78168.024, 78168.066), stdev = 0.024
[info]   CI (99.9%): [78167.933, 78168.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.016 ±(99.9%) 0.101 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.062), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.815 ±(99.9%) 5.194 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.815, 3.209), stdev = 1.349
[info]   CI (99.9%): [≈ 0, 6.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   1494.615 ±(99.9%) 729.232 MB/sec [Average]
[info]   (min, avg, max) = (1345.945, 1494.615, 1702.153), stdev = 189.379
[info]   CI (99.9%): [765.383, 2223.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   77123.265 ±(99.9%) 36276.419 B/op [Average]
[info]   (min, avg, max) = (69788.979, 77123.265, 87478.341), stdev = 9420.871
[info]   CI (99.9%): [40846.847, 113399.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space":
[info]   0.800 ±(99.9%) 6.885 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.800, 3.998), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm":
[info]   42.247 ±(99.9%) 363.761 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 42.247, 211.236), stdev = 94.468
[info]   CI (99.9%): [≈ 0, 406.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 14.000), stdev = 4.604
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson
[info] # Run progress: 7.58% complete, ETA 01:04:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4995.658 ops/s
[info] # Warmup Iteration   2: 7811.848 ops/s
[info] # Warmup Iteration   3: 7639.769 ops/s
[info] Iteration   1: 7756.895 ops/s
[info]                  ·gc.alloc.rate:            1009.071 MB/sec
[info]                  ·gc.alloc.rate.norm:       204776.053 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.772 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 204715.546 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 7727.054 ops/s
[info]                  ·gc.alloc.rate:            1005.684 MB/sec
[info]                  ·gc.alloc.rate.norm:       204776.053 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.420 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 205536.633 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   3: 7687.130 ops/s
[info]                  ·gc.alloc.rate:                   1000.431 MB/sec
[info]                  ·gc.alloc.rate.norm:              204776.053 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.370 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        206605.884 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 818.241 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   4: 7928.995 ops/s
[info]                  ·gc.alloc.rate:                                  1031.990 MB/sec
[info]                  ·gc.alloc.rate.norm:                             204776.055 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.052 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 10.284 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.434 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       202681.504 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 7877.906 ops/s
[info]                  ·gc.alloc.rate:                                  1025.386 MB/sec
[info]                  ·gc.alloc.rate.norm:                             204776.056 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.234 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.955 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       271991.034 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson":
[info]   7795.596 ±(99.9%) 397.059 ops/s [Average]
[info]   (min, avg, max) = (7687.130, 7795.596, 7928.995), stdev = 103.115
[info]   CI (99.9%): [7398.537, 8192.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1014.512 ±(99.9%) 52.003 MB/sec [Average]
[info]   (min, avg, max) = (1000.431, 1014.512, 1031.990), stdev = 13.505
[info]   CI (99.9%): [962.510, 1066.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   204776.054 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (204776.053, 204776.054, 204776.056), stdev = 0.002
[info]   CI (99.9%): [204776.048, 204776.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.011 ±(99.9%) 0.089 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.052), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.103 ±(99.9%) 17.613 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.103, 10.284), stdev = 4.574
[info]   CI (99.9%): [≈ 0, 19.716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1082.190 ±(99.9%) 602.561 MB/sec [Average]
[info]   (min, avg, max) = (1008.772, 1082.190, 1361.955), stdev = 156.483
[info]   CI (99.9%): [479.629, 1684.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   218306.120 ±(99.9%) 115693.389 B/op [Average]
[info]   (min, avg, max) = (202681.504, 218306.120, 271991.034), stdev = 30045.206
[info]   CI (99.9%): [102612.731, 333999.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.800 ±(99.9%) 6.884 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.800, 3.998), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   163.648 ±(99.9%) 1409.061 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 163.648, 818.241), stdev = 365.929
[info]   CI (99.9%): [≈ 0, 1572.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time":
[info]   60.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 12.000, 19.000), stdev = 7.382
[info]   CI (99.9%): [60.000, 60.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce
[info] # Run progress: 7.88% complete, ETA 01:04:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13628.996 ops/s
[info] # Warmup Iteration   2: 18555.428 ops/s
[info] # Warmup Iteration   3: 18492.087 ops/s
[info] Iteration   1: 18591.624 ops/s
[info]                  ·gc.alloc.rate:                   1444.195 MB/sec
[info]                  ·gc.alloc.rate.norm:              122264.058 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1685.109 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        142659.565 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 281.936 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   2: 19197.688 ops/s
[info]                  ·gc.alloc.rate:                                  1491.060 MB/sec
[info]                  ·gc.alloc.rate.norm:                             122264.021 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.439 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.228 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       111618.026 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 19132.281 ops/s
[info]                  ·gc.alloc.rate:                                  1486.084 MB/sec
[info]                  ·gc.alloc.rate.norm:                             122264.030 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.019 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.545 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.364 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       112002.997 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 18747.029 ops/s
[info]                  ·gc.alloc.rate:                                  1456.623 MB/sec
[info]                  ·gc.alloc.rate.norm:                             122264.091 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.014 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.145 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.216 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       142878.336 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 18947.330 ops/s
[info]                  ·gc.alloc.rate:                                  1471.689 MB/sec
[info]                  ·gc.alloc.rate.norm:                             122264.022 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.704 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.338 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       113096.372 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce":
[info]   18923.190 ±(99.9%) 982.896 ops/s [Average]
[info]   (min, avg, max) = (18591.624, 18923.190, 19197.688), stdev = 255.255
[info]   CI (99.9%): [17940.295, 19906.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1469.930 ±(99.9%) 75.797 MB/sec [Average]
[info]   (min, avg, max) = (1444.195, 1469.930, 1491.060), stdev = 19.684
[info]   CI (99.9%): [1394.133, 1545.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   122264.044 ±(99.9%) 0.116 B/op [Average]
[info]   (min, avg, max) = (122264.021, 122264.044, 122264.091), stdev = 0.030
[info]   CI (99.9%): [122263.929, 122264.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.009 ±(99.9%) 0.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.019), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.767 ±(99.9%) 2.317 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.767, 1.545), stdev = 0.602
[info]   CI (99.9%): [≈ 0, 3.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1494.251 ±(99.9%) 701.346 MB/sec [Average]
[info]   (min, avg, max) = (1361.228, 1494.251, 1702.216), stdev = 182.137
[info]   CI (99.9%): [792.905, 2195.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   124451.059 ±(99.9%) 64424.511 B/op [Average]
[info]   (min, avg, max) = (111618.026, 124451.059, 142878.336), stdev = 16730.841
[info]   CI (99.9%): [60026.548, 188875.570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   56.387 ±(99.9%) 485.511 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 56.387, 281.936), stdev = 126.086
[info]   CI (99.9%): [≈ 0, 541.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 16.000), stdev = 5.541
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala
[info] # Run progress: 8.18% complete, ETA 01:04:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25522.759 ops/s
[info] # Warmup Iteration   2: 39348.794 ops/s
[info] # Warmup Iteration   3: 40043.471 ops/s
[info] Iteration   1: 40162.743 ops/s
[info]                  ·gc.alloc.rate:            990.893 MB/sec
[info]                  ·gc.alloc.rate.norm:       38823.195 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.385 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 39547.727 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 40110.107 ops/s
[info]                  ·gc.alloc.rate:            989.507 MB/sec
[info]                  ·gc.alloc.rate.norm:       38824.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.284 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 39599.976 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 40132.356 ops/s
[info]                  ·gc.alloc.rate:                                  990.070 MB/sec
[info]                  ·gc.alloc.rate.norm:                             38824.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.074 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.912 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.276 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       39734.027 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                156.742 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   4: 40595.623 ops/s
[info]                  ·gc.alloc.rate:                                  1001.276 MB/sec
[info]                  ·gc.alloc.rate.norm:                             38824.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.048 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.875 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.078 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       39591.808 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 40559.465 ops/s
[info]                  ·gc.alloc.rate:            1000.388 MB/sec
[info]                  ·gc.alloc.rate.norm:       38824.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.077 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 39626.945 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala":
[info]   40312.059 ±(99.9%) 937.280 ops/s [Average]
[info]   (min, avg, max) = (40110.107, 40312.059, 40595.623), stdev = 243.409
[info]   CI (99.9%): [39374.779, 41249.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   994.427 ±(99.9%) 22.627 MB/sec [Average]
[info]   (min, avg, max) = (989.507, 994.427, 1001.276), stdev = 5.876
[info]   CI (99.9%): [971.799, 1017.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   38823.847 ±(99.9%) 1.404 B/op [Average]
[info]   (min, avg, max) = (38823.195, 38823.847, 38824.011), stdev = 0.365
[info]   CI (99.9%): [38822.444, 38825.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.025 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.074), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.957 ±(99.9%) 5.242 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.957, 2.912), stdev = 1.361
[info]   CI (99.9%): [≈ 0, 6.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1014.820 ±(99.9%) 22.852 MB/sec [Average]
[info]   (min, avg, max) = (1009.284, 1014.820, 1021.078), stdev = 5.935
[info]   CI (99.9%): [991.968, 1037.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   39620.096 ±(99.9%) 268.646 B/op [Average]
[info]   (min, avg, max) = (39547.727, 39620.096, 39734.027), stdev = 69.766
[info]   CI (99.9%): [39351.451, 39888.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   31.348 ±(99.9%) 269.919 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 31.348, 156.742), stdev = 70.097
[info]   CI (99.9%): [≈ 0, 301.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.200, 13.000), stdev = 5.263
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala
[info] # Run progress: 8.48% complete, ETA 01:04:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 50223.625 ops/s
[info] # Warmup Iteration   2: 55650.553 ops/s
[info] # Warmup Iteration   3: 55473.044 ops/s
[info] Iteration   1: 56632.491 ops/s
[info]                  ·gc.alloc.rate:            731.586 MB/sec
[info]                  ·gc.alloc.rate.norm:       20336.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.971 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18734.489 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 56804.357 ops/s
[info]                  ·gc.alloc.rate:            733.855 MB/sec
[info]                  ·gc.alloc.rate.norm:       20336.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.015 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18677.772 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 55664.807 ops/s
[info]                  ·gc.alloc.rate:            719.297 MB/sec
[info]                  ·gc.alloc.rate.norm:       20336.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.172 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19060.224 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 55466.846 ops/s
[info]                  ·gc.alloc.rate:            716.620 MB/sec
[info]                  ·gc.alloc.rate.norm:       20336.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.036 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19127.562 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 55989.496 ops/s
[info]                  ·gc.alloc.rate:                                  723.327 MB/sec
[info]                  ·gc.alloc.rate.norm:                             20336.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.020 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.570 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1014.369 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       28518.541 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                93.626 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala":
[info]   56111.600 ±(99.9%) 2262.953 ops/s [Average]
[info]   (min, avg, max) = (55466.846, 56111.600, 56804.357), stdev = 587.682
[info]   CI (99.9%): [53848.646, 58374.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   724.937 ±(99.9%) 29.027 MB/sec [Average]
[info]   (min, avg, max) = (716.620, 724.937, 733.855), stdev = 7.538
[info]   CI (99.9%): [695.909, 753.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   20336.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (20336.007, 20336.007, 20336.008), stdev = 0.001
[info]   CI (99.9%): [20336.006, 20336.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.004 ±(99.9%) 0.035 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.020), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.114 ±(99.9%) 0.982 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.114, 0.570), stdev = 0.255
[info]   CI (99.9%): [≈ 0, 1.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   742.113 ±(99.9%) 586.053 MB/sec [Average]
[info]   (min, avg, max) = (673.971, 742.113, 1014.369), stdev = 152.196
[info]   CI (99.9%): [156.059, 1328.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   20823.718 ±(99.9%) 16580.937 B/op [Average]
[info]   (min, avg, max) = (18677.772, 20823.718, 28518.541), stdev = 4306.017
[info]   CI (99.9%): [4242.781, 37404.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   18.725 ±(99.9%) 161.230 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18.725, 93.626), stdev = 41.871
[info]   CI (99.9%): [≈ 0, 179.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 0.707
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson
[info] # Run progress: 8.79% complete, ETA 01:04:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11586.232 ops/s
[info] # Warmup Iteration   2: 28316.171 ops/s
[info] # Warmup Iteration   3: 28337.548 ops/s
[info] Iteration   1: 29152.516 ops/s
[info]                  ·gc.alloc.rate:                                  1947.037 MB/sec
[info]                  ·gc.alloc.rate.norm:                             105128.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.024 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.323 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2032.743 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       109755.606 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                251.733 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        13.000 ms
[info] Iteration   2: 29572.176 ops/s
[info]                  ·gc.alloc.rate:                                  1974.961 MB/sec
[info]                  ·gc.alloc.rate.norm:                             105128.017 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.231 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.010 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       108697.096 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 29120.897 ops/s
[info]                  ·gc.alloc.rate:                                  1945.035 MB/sec
[info]                  ·gc.alloc.rate.norm:                             105128.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.054 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.841 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       91983.509 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 28912.880 ops/s
[info]                  ·gc.alloc.rate:                                  1931.351 MB/sec
[info]                  ·gc.alloc.rate.norm:                             105128.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.428 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.427 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       111174.148 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 29698.812 ops/s
[info]                  ·gc.alloc.rate:                                  1984.278 MB/sec
[info]                  ·gc.alloc.rate.norm:                             105128.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.018 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.966 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.666 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       108221.430 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson":
[info]   29291.456 ±(99.9%) 1271.961 ops/s [Average]
[info]   (min, avg, max) = (28912.880, 29291.456, 29698.812), stdev = 330.324
[info]   CI (99.9%): [28019.495, 30563.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1956.532 ±(99.9%) 85.366 MB/sec [Average]
[info]   (min, avg, max) = (1931.351, 1956.532, 1984.278), stdev = 22.169
[info]   CI (99.9%): [1871.166, 2041.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   105128.015 ±(99.9%) 0.005 B/op [Average]
[info]   (min, avg, max) = (105128.014, 105128.015, 105128.017), stdev = 0.001
[info]   CI (99.9%): [105128.010, 105128.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.011 ±(99.9%) 0.038 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.011, 0.024), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.600 ±(99.9%) 2.038 B/op [Average]
[info]   (min, avg, max) = (0.054, 0.600, 1.323), stdev = 0.529
[info]   CI (99.9%): [≈ 0, 2.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1972.337 ±(99.9%) 582.486 MB/sec [Average]
[info]   (min, avg, max) = (1701.841, 1972.337, 2042.666), stdev = 151.270
[info]   CI (99.9%): [1389.851, 2554.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   105966.358 ±(99.9%) 30414.105 B/op [Average]
[info]   (min, avg, max) = (91983.509, 105966.358, 111174.148), stdev = 7898.446
[info]   CI (99.9%): [75552.253, 136380.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   50.347 ±(99.9%) 433.499 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 50.347, 251.733), stdev = 112.578
[info]   CI (99.9%): [≈ 0, 483.846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 13.000), stdev = 3.715
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala
[info] # Run progress: 9.09% complete, ETA 01:03:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17072.582 ops/s
[info] # Warmup Iteration   2: 31928.742 ops/s
[info] # Warmup Iteration   3: 32018.705 ops/s
[info] Iteration   1: 32140.718 ops/s
[info]                  ·gc.alloc.rate:                                  1820.206 MB/sec
[info]                  ·gc.alloc.rate.norm:                             89144.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.043 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.130 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2033.362 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       99583.243 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                228.327 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   2: 31686.781 ops/s
[info]                  ·gc.alloc.rate:                                  1795.060 MB/sec
[info]                  ·gc.alloc.rate.norm:                             89144.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.142 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.215 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       84533.231 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 32328.951 ops/s
[info]                  ·gc.alloc.rate:                                  1830.965 MB/sec
[info]                  ·gc.alloc.rate.norm:                             89144.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.895 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       82859.978 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 32344.174 ops/s
[info]                  ·gc.alloc.rate:                                  1831.614 MB/sec
[info]                  ·gc.alloc.rate.norm:                             89144.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.987 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       99382.794 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 32382.041 ops/s
[info]                  ·gc.alloc.rate:            1833.931 MB/sec
[info]                  ·gc.alloc.rate.norm:       89144.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.705 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 82716.715 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala":
[info]   32176.533 ±(99.9%) 1113.875 ops/s [Average]
[info]   (min, avg, max) = (31686.781, 32176.533, 32382.041), stdev = 289.270
[info]   CI (99.9%): [31062.658, 33290.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1822.355 ±(99.9%) 62.194 MB/sec [Average]
[info]   (min, avg, max) = (1795.060, 1822.355, 1833.931), stdev = 16.152
[info]   CI (99.9%): [1760.161, 1884.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   89144.014 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (89144.013, 89144.014, 89144.016), stdev = 0.001
[info]   CI (99.9%): [89144.008, 89144.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.009 ±(99.9%) 0.074 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.043), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.458 ±(99.9%) 3.607 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.458, 2.130), stdev = 0.937
[info]   CI (99.9%): [≈ 0, 4.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1836.233 ±(99.9%) 708.194 MB/sec [Average]
[info]   (min, avg, max) = (1701.705, 1836.233, 2041.987), stdev = 183.916
[info]   CI (99.9%): [1128.039, 2544.427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   89815.192 ±(99.9%) 34095.943 B/op [Average]
[info]   (min, avg, max) = (82716.715, 89815.192, 99583.243), stdev = 8854.608
[info]   CI (99.9%): [55719.250, 123911.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   45.665 ±(99.9%) 393.193 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 45.665, 228.327), stdev = 102.111
[info]   CI (99.9%): [≈ 0, 438.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 12.000), stdev = 3.391
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala
[info] # Run progress: 9.39% complete, ETA 01:03:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37153.212 ops/s
[info] # Warmup Iteration   2: 43793.868 ops/s
[info] # Warmup Iteration   3: 44456.725 ops/s
[info] Iteration   1: 44474.779 ops/s
[info]                  ·gc.alloc.rate:                                  1708.705 MB/sec
[info]                  ·gc.alloc.rate.norm:                             60480.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.089 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.159 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1694.329 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       59971.164 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                141.441 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   2: 44877.585 ops/s
[info]                  ·gc.alloc.rate:                                  1724.229 MB/sec
[info]                  ·gc.alloc.rate.norm:                             60480.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.103 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.621 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       59687.022 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 45338.736 ops/s
[info]                  ·gc.alloc.rate:            1742.177 MB/sec
[info]                  ·gc.alloc.rate.norm:       60480.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.893 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 59081.544 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 45060.350 ops/s
[info]                  ·gc.alloc.rate:                                  1731.900 MB/sec
[info]                  ·gc.alloc.rate.norm:                             60480.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.092 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.252 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       59444.667 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 45551.225 ops/s
[info]                  ·gc.alloc.rate:                                  1750.115 MB/sec
[info]                  ·gc.alloc.rate.norm:                             60480.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.051 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.580 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       58802.741 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala":
[info]   45060.535 ±(99.9%) 1604.791 ops/s [Average]
[info]   (min, avg, max) = (44474.779, 45060.535, 45551.225), stdev = 416.759
[info]   CI (99.9%): [43455.744, 46665.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1731.425 ±(99.9%) 61.884 MB/sec [Average]
[info]   (min, avg, max) = (1708.705, 1731.425, 1750.115), stdev = 16.071
[info]   CI (99.9%): [1669.541, 1793.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   60480.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (60480.009, 60480.009, 60480.010), stdev = 0.001
[info]   CI (99.9%): [60480.008, 60480.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.019 ±(99.9%) 0.151 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.089), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.681 ±(99.9%) 5.335 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.681, 3.159), stdev = 1.386
[info]   CI (99.9%): [≈ 0, 6.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1700.335 ±(99.9%) 12.969 MB/sec [Average]
[info]   (min, avg, max) = (1694.329, 1700.335, 1702.252), stdev = 3.368
[info]   CI (99.9%): [1687.366, 1713.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   59397.427 ±(99.9%) 1794.484 B/op [Average]
[info]   (min, avg, max) = (58802.741, 59397.427, 59971.164), stdev = 466.022
[info]   CI (99.9%): [57602.944, 61191.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   28.288 ±(99.9%) 243.571 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 28.288, 141.441), stdev = 63.255
[info]   CI (99.9%): [≈ 0, 271.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 9.000), stdev = 2.236
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 9.70% complete, ETA 01:03:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37738.057 ops/s
[info] # Warmup Iteration   2: 45423.674 ops/s
[info] # Warmup Iteration   3: 45286.284 ops/s
[info] Iteration   1: 45506.792 ops/s
[info]                  ·gc.alloc.rate:                                  1669.317 MB/sec
[info]                  ·gc.alloc.rate.norm:                             57736.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.061 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.096 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1694.551 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       58608.752 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                138.228 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   2: 45497.118 ops/s
[info]                  ·gc.alloc.rate:                                  1668.881 MB/sec
[info]                  ·gc.alloc.rate.norm:                             57736.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.080 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.446 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       47100.084 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   3: 45295.914 ops/s
[info]                  ·gc.alloc.rate:            1661.324 MB/sec
[info]                  ·gc.alloc.rate.norm:       57736.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.692 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 59138.927 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 44769.872 ops/s
[info]                  ·gc.alloc.rate:                                  1642.487 MB/sec
[info]                  ·gc.alloc.rate.norm:                             57736.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.024 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.086 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       59830.981 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 44852.179 ops/s
[info]                  ·gc.alloc.rate:                                  1645.467 MB/sec
[info]                  ·gc.alloc.rate.norm:                             57736.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.092 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.095 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       59722.947 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   45184.375 ±(99.9%) 1356.455 ops/s [Average]
[info]   (min, avg, max) = (44769.872, 45184.375, 45506.792), stdev = 352.267
[info]   CI (99.9%): [43827.919, 46540.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1657.495 ±(99.9%) 49.236 MB/sec [Average]
[info]   (min, avg, max) = (1642.487, 1657.495, 1669.317), stdev = 12.786
[info]   CI (99.9%): [1608.260, 1706.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   57736.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (57736.009, 57736.009, 57736.009), stdev = 0.001
[info]   CI (99.9%): [57736.009, 57736.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.013 ±(99.9%) 0.102 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.061), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.458 ±(99.9%) 3.528 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.458, 2.096), stdev = 0.916
[info]   CI (99.9%): [≈ 0, 3.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   1632.374 ±(99.9%) 583.324 MB/sec [Average]
[info]   (min, avg, max) = (1361.446, 1632.374, 1702.095), stdev = 151.487
[info]   CI (99.9%): [1049.050, 2215.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   56880.338 ±(99.9%) 21137.258 B/op [Average]
[info]   (min, avg, max) = (47100.084, 56880.338, 59830.981), stdev = 5489.279
[info]   CI (99.9%): [35743.081, 78017.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm":
[info]   27.646 ±(99.9%) 238.037 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 27.646, 138.228), stdev = 61.818
[info]   CI (99.9%): [≈ 0, 265.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 9.000), stdev = 2.510
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce
[info] # Run progress: 10.00% complete, ETA 01:03:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 271138.035 ops/s
[info] # Warmup Iteration   2: 333752.310 ops/s
[info] # Warmup Iteration   3: 336138.542 ops/s
[info] Iteration   1: 336813.347 ops/s
[info]                  ·gc.alloc.rate:                                  1697.968 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7936.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.140 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.655 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1694.911 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7921.710 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                15.563 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   2: 340890.215 ops/s
[info]                  ·gc.alloc.rate:                                  1719.064 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7936.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.146 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7857.900 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 341111.565 ops/s
[info]                  ·gc.alloc.rate:                                  1720.349 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7936.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.315 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7852.810 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 338964.675 ops/s
[info]                  ·gc.alloc.rate:                                  1709.072 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7936.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.921 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7902.798 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 341361.341 ops/s
[info]                  ·gc.alloc.rate:                                  1721.312 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7936.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.025 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.020 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7847.060 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce":
[info]   339828.229 ±(99.9%) 7446.900 ops/s [Average]
[info]   (min, avg, max) = (336813.347, 339828.229, 341361.341), stdev = 1933.936
[info]   CI (99.9%): [332381.329, 347275.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1713.553 ±(99.9%) 38.493 MB/sec [Average]
[info]   (min, avg, max) = (1697.968, 1713.553, 1721.312), stdev = 9.996
[info]   CI (99.9%): [1675.060, 1752.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   7936.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7936.001, 7936.001, 7936.001), stdev = 0.001
[info]   CI (99.9%): [7936.001, 7936.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.030 ±(99.9%) 0.236 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0.030, 0.140), stdev = 0.061
[info]   CI (99.9%): [≈ 0, 0.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.142 ±(99.9%) 1.104 B/op [Average]
[info]   (min, avg, max) = (0.002, 0.142, 0.655), stdev = 0.287
[info]   CI (99.9%): [≈ 0, 1.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1700.663 ±(99.9%) 12.395 MB/sec [Average]
[info]   (min, avg, max) = (1694.911, 1700.663, 1702.315), stdev = 3.219
[info]   CI (99.9%): [1688.268, 1713.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   7876.455 ±(99.9%) 129.289 B/op [Average]
[info]   (min, avg, max) = (7847.060, 7876.455, 7921.710), stdev = 33.576
[info]   CI (99.9%): [7747.166, 8005.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   3.113 ±(99.9%) 26.801 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.113, 15.563), stdev = 6.960
[info]   CI (99.9%): [≈ 0, 29.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 9.000), stdev = 2.387
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala
[info] # Run progress: 10.30% complete, ETA 01:03:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 367959.432 ops/s
[info] # Warmup Iteration   2: 583013.289 ops/s
[info] # Warmup Iteration   3: 581136.749 ops/s
[info] Iteration   1: 589827.166 ops/s
[info]                  ·gc.alloc.rate:            500.604 MB/sec
[info]                  ·gc.alloc.rate.norm:       1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.671 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1795.209 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 593332.471 ops/s
[info]                  ·gc.alloc.rate:            503.739 MB/sec
[info]                  ·gc.alloc.rate.norm:       1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.451 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 892.325 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 581253.567 ops/s
[info]                  ·gc.alloc.rate:            493.292 MB/sec
[info]                  ·gc.alloc.rate.norm:       1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.640 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1821.735 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 588253.069 ops/s
[info]                  ·gc.alloc.rate:            499.268 MB/sec
[info]                  ·gc.alloc.rate.norm:       1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.353 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 900.055 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 589354.054 ops/s
[info]                  ·gc.alloc.rate:            500.172 MB/sec
[info]                  ·gc.alloc.rate.norm:       1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.666 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1796.747 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala":
[info]   588404.065 ±(99.9%) 17044.189 ops/s [Average]
[info]   (min, avg, max) = (581253.567, 588404.065, 593332.471), stdev = 4426.322
[info]   CI (99.9%): [571359.876, 605448.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   499.415 ±(99.9%) 14.687 MB/sec [Average]
[info]   (min, avg, max) = (493.292, 499.415, 503.739), stdev = 3.814
[info]   CI (99.9%): [484.728, 514.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1336.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1336.001, 1336.001, 1336.001), stdev = 0.001
[info]   CI (99.9%): [1336.001, 1336.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   538.156 ±(99.9%) 709.194 MB/sec [Average]
[info]   (min, avg, max) = (336.353, 538.156, 672.671), stdev = 184.175
[info]   CI (99.9%): [≈ 0, 1247.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1441.214 ±(99.9%) 1916.294 B/op [Average]
[info]   (min, avg, max) = (892.325, 1441.214, 1821.735), stdev = 497.655
[info]   CI (99.9%): [≈ 0, 3357.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 8.000), stdev = 2.049
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala
[info] # Run progress: 10.61% complete, ETA 01:02:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1642919.242 ops/s
[info] # Warmup Iteration   2: 1702409.446 ops/s
[info] # Warmup Iteration   3: 1739502.415 ops/s
[info] Iteration   1: 1721813.524 ops/s
[info]                  ·gc.alloc.rate:            332.506 MB/sec
[info]                  ·gc.alloc.rate.norm:       304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.000 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 308.109 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 1730059.600 ops/s
[info]                  ·gc.alloc.rate:            334.112 MB/sec
[info]                  ·gc.alloc.rate.norm:       304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.021 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 306.647 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 1688702.330 ops/s
[info]                  ·gc.alloc.rate:            326.143 MB/sec
[info]                  ·gc.alloc.rate.norm:       304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.034 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 314.152 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 1687405.602 ops/s
[info]                  ·gc.alloc.rate:            325.887 MB/sec
[info]                  ·gc.alloc.rate.norm:       304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.014 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 314.380 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 1681423.501 ops/s
[info]                  ·gc.alloc.rate:            324.766 MB/sec
[info]                  ·gc.alloc.rate.norm:       304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.049 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 315.498 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala":
[info]   1701880.911 ±(99.9%) 85953.558 ops/s [Average]
[info]   (min, avg, max) = (1681423.501, 1701880.911, 1730059.600), stdev = 22321.866
[info]   CI (99.9%): [1615927.353, 1787834.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   328.683 ±(99.9%) 16.528 MB/sec [Average]
[info]   (min, avg, max) = (324.766, 328.683, 334.112), stdev = 4.292
[info]   CI (99.9%): [312.154, 345.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   304.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (304.000, 304.000, 304.000), stdev = 0.001
[info]   CI (99.9%): [304.000, 304.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   337.023 ±(99.9%) 0.073 MB/sec [Average]
[info]   (min, avg, max) = (337.000, 337.023, 337.049), stdev = 0.019
[info]   CI (99.9%): [336.951, 337.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   311.757 ±(99.9%) 15.644 B/op [Average]
[info]   (min, avg, max) = (306.647, 311.757, 315.498), stdev = 4.063
[info]   CI (99.9%): [296.113, 327.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson
[info] # Run progress: 10.91% complete, ETA 01:02:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 53421.193 ops/s
[info] # Warmup Iteration   2: 88621.723 ops/s
[info] # Warmup Iteration   3: 91173.657 ops/s
[info] Iteration   1: 92360.235 ops/s
[info]                  ·gc.alloc.rate:                                  3354.488 MB/sec
[info]                  ·gc.alloc.rate.norm:                             57176.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.029 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.132 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       58005.124 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   2: 92338.757 ops/s
[info]                  ·gc.alloc.rate:                                  3355.179 MB/sec
[info]                  ·gc.alloc.rate.norm:                             57176.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.061 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3064.113 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       52215.917 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 92460.692 ops/s
[info]                  ·gc.alloc.rate:                                  3358.630 MB/sec
[info]                  ·gc.alloc.rate.norm:                             57176.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.048 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.613 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       57941.773 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   4: 92461.977 ops/s
[info]                  ·gc.alloc.rate:                                  3358.157 MB/sec
[info]                  ·gc.alloc.rate.norm:                             57176.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.171 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       57942.399 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   5: 92102.920 ops/s
[info]                  ·gc.alloc.rate:                                  3346.574 MB/sec
[info]                  ·gc.alloc.rate.norm:                             57176.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.045 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3404.650 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       58168.216 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson":
[info]   92344.916 ±(99.9%) 564.425 ops/s [Average]
[info]   (min, avg, max) = (92102.920, 92344.916, 92461.977), stdev = 146.579
[info]   CI (99.9%): [91780.491, 92909.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3354.606 ±(99.9%) 18.632 MB/sec [Average]
[info]   (min, avg, max) = (3346.574, 3354.606, 3358.630), stdev = 4.839
[info]   CI (99.9%): [3335.973, 3373.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   57176.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (57176.004, 57176.004, 57176.005), stdev = 0.001
[info]   CI (99.9%): [57176.004, 57176.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.003 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.002, 0.004), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.041 ±(99.9%) 0.060 B/op [Average]
[info]   (min, avg, max) = (0.022, 0.041, 0.061), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   3335.736 ±(99.9%) 584.692 MB/sec [Average]
[info]   (min, avg, max) = (3064.113, 3335.736, 3404.650), stdev = 151.843
[info]   CI (99.9%): [2751.044, 3920.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   56854.686 ±(99.9%) 9991.646 B/op [Average]
[info]   (min, avg, max) = (52215.917, 56854.686, 58168.216), stdev = 2594.799
[info]   CI (99.9%): [46863.040, 66846.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   49.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.800, 10.000), stdev = 0.447
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.200, 9.000), stdev = 0.447
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce
[info] # Run progress: 11.21% complete, ETA 01:02:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 269775.242 ops/s
[info] # Warmup Iteration   2: 330680.982 ops/s
[info] # Warmup Iteration   3: 318041.642 ops/s
[info] Iteration   1: 333021.759 ops/s
[info]                  ·gc.alloc.rate:            512.848 MB/sec
[info]                  ·gc.alloc.rate.norm:       2424.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.025 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1592.963 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 329760.775 ops/s
[info]                  ·gc.alloc.rate:            507.778 MB/sec
[info]                  ·gc.alloc.rate.norm:       2424.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.000 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3217.505 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 329404.880 ops/s
[info]                  ·gc.alloc.rate:            507.250 MB/sec
[info]                  ·gc.alloc.rate.norm:       2424.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.017 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1610.506 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 330945.270 ops/s
[info]                  ·gc.alloc.rate:            509.674 MB/sec
[info]                  ·gc.alloc.rate.norm:       2424.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.120 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3206.102 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 332200.700 ops/s
[info]                  ·gc.alloc.rate:            511.565 MB/sec
[info]                  ·gc.alloc.rate.norm:       2424.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.025 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1596.957 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce":
[info]   331066.677 ±(99.9%) 5962.298 ops/s [Average]
[info]   (min, avg, max) = (329404.880, 331066.677, 333021.759), stdev = 1548.390
[info]   CI (99.9%): [325104.379, 337028.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   509.823 ±(99.9%) 9.237 MB/sec [Average]
[info]   (min, avg, max) = (507.250, 509.823, 512.848), stdev = 2.399
[info]   CI (99.9%): [500.586, 519.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2424.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2424.001, 2424.001, 2424.001), stdev = 0.001
[info]   CI (99.9%): [2424.001, 2424.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   471.837 ±(99.9%) 710.841 MB/sec [Average]
[info]   (min, avg, max) = (337.017, 471.837, 674.120), stdev = 184.603
[info]   CI (99.9%): [≈ 0, 1182.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2244.807 ±(99.9%) 3399.258 B/op [Average]
[info]   (min, avg, max) = (1592.963, 2244.807, 3217.505), stdev = 882.777
[info]   CI (99.9%): [≈ 0, 5644.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 7.000), stdev = 1.949
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala
[info] # Run progress: 11.52% complete, ETA 01:02:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 643209.276 ops/s
[info] # Warmup Iteration   2: 971629.280 ops/s
[info] # Warmup Iteration   3: 984757.440 ops/s
[info] Iteration   1: 982303.008 ops/s
[info]                  ·gc.alloc.rate:            693.885 MB/sec
[info]                  ·gc.alloc.rate.norm:       1112.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.643 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1077.958 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 984480.300 ops/s
[info]                  ·gc.alloc.rate:            695.521 MB/sec
[info]                  ·gc.alloc.rate.norm:       1112.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.756 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1075.605 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 985235.214 ops/s
[info]                  ·gc.alloc.rate:            696.095 MB/sec
[info]                  ·gc.alloc.rate.norm:       1112.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.797 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1074.783 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 981805.951 ops/s
[info]                  ·gc.alloc.rate:            693.580 MB/sec
[info]                  ·gc.alloc.rate.norm:       1112.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.721 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1078.558 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 982269.525 ops/s
[info]                  ·gc.alloc.rate:                   693.927 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.726 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1078.025 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 6.404 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala":
[info]   983218.800 ±(99.9%) 5900.805 ops/s [Average]
[info]   (min, avg, max) = (981805.951, 983218.800, 985235.214), stdev = 1532.420
[info]   CI (99.9%): [977317.994, 989119.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   694.601 ±(99.9%) 4.343 MB/sec [Average]
[info]   (min, avg, max) = (693.580, 694.601, 696.095), stdev = 1.128
[info]   CI (99.9%): [690.259, 698.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1112.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1112.000, 1112.000, 1112.000), stdev = 0.001
[info]   CI (99.9%): [1112.000, 1112.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   672.728 ±(99.9%) 0.219 MB/sec [Average]
[info]   (min, avg, max) = (672.643, 672.728, 672.797), stdev = 0.057
[info]   CI (99.9%): [672.509, 672.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1076.986 ±(99.9%) 6.460 B/op [Average]
[info]   (min, avg, max) = (1074.783, 1076.986, 1078.558), stdev = 1.678
[info]   CI (99.9%): [1070.525, 1083.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.281 ±(99.9%) 11.028 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.281, 6.404), stdev = 2.864
[info]   CI (99.9%): [≈ 0, 12.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.000, 8.000), stdev = 0.001
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala
[info] # Run progress: 11.82% complete, ETA 01:02:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2133194.635 ops/s
[info] # Warmup Iteration   2: 2407451.971 ops/s
[info] # Warmup Iteration   3: 2435086.030 ops/s
[info] Iteration   1: 2435137.721 ops/s
[info]                  ·gc.alloc.rate:                   1126.609 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1347.211 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        870.550 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.431 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 2498672.020 ops/s
[info]                  ·gc.alloc.rate:                   1155.882 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1010.622 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        636.512 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.518 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 2420317.814 ops/s
[info]                  ·gc.alloc.rate:                                  1119.598 MB/sec
[info]                  ·gc.alloc.rate.norm:                             728.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.162 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.106 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.251 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       664.051 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 2432137.741 ops/s
[info]                  ·gc.alloc.rate:                                  1124.844 MB/sec
[info]                  ·gc.alloc.rate.norm:                             728.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.405 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       881.103 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 2442409.182 ops/s
[info]                  ·gc.alloc.rate:            1129.729 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.173 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 658.046 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala":
[info]   2445734.896 ±(99.9%) 118005.279 ops/s [Average]
[info]   (min, avg, max) = (2420317.814, 2445734.896, 2498672.020), stdev = 30645.596
[info]   CI (99.9%): [2327729.617, 2563740.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1131.332 ±(99.9%) 54.707 MB/sec [Average]
[info]   (min, avg, max) = (1119.598, 1131.332, 1155.882), stdev = 14.207
[info]   CI (99.9%): [1076.626, 1186.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   728.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (728.000, 728.000, 728.000), stdev = 0.001
[info]   CI (99.9%): [728.000, 728.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.033 ±(99.9%) 0.279 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.162), stdev = 0.073
[info]   CI (99.9%): [≈ 0, 0.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.021 ±(99.9%) 0.182 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.106), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1152.332 ±(99.9%) 710.431 MB/sec [Average]
[info]   (min, avg, max) = (1010.622, 1152.332, 1361.405), stdev = 184.497
[info]   CI (99.9%): [441.901, 1862.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   742.052 ±(99.9%) 472.103 B/op [Average]
[info]   (min, avg, max) = (636.512, 742.052, 881.103), stdev = 122.604
[info]   CI (99.9%): [269.949, 1214.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.689 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.997), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.590 ±(99.9%) 4.212 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.590, 2.518), stdev = 1.094
[info]   CI (99.9%): [≈ 0, 4.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.800, 12.000), stdev = 4.438
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 12.12% complete, ETA 01:01:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1801727.195 ops/s
[info] # Warmup Iteration   2: 1974152.034 ops/s
[info] # Warmup Iteration   3: 1924223.046 ops/s
[info] Iteration   1: 1989309.606 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1977110.953 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1986721.069 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1988960.559 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1981081.253 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   1984636.688 ±(99.9%) 20570.735 ops/s [Average]
[info]   (min, avg, max) = (1977110.953, 1984636.688, 1989309.606), stdev = 5342.155
[info]   CI (99.9%): [1964065.953, 2005207.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson
[info] # Run progress: 12.42% complete, ETA 01:01:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 294789.084 ops/s
[info] # Warmup Iteration   2: 404737.711 ops/s
[info] # Warmup Iteration   3: 420139.509 ops/s
[info] Iteration   1: 415667.158 ops/s
[info]                  ·gc.alloc.rate:            486.009 MB/sec
[info]                  ·gc.alloc.rate.norm:       1840.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.861 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2547.408 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 417787.666 ops/s
[info]                  ·gc.alloc.rate:            488.563 MB/sec
[info]                  ·gc.alloc.rate.norm:       1840.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.496 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1267.293 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 417970.797 ops/s
[info]                  ·gc.alloc.rate:            488.669 MB/sec
[info]                  ·gc.alloc.rate.norm:       1840.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.841 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2533.471 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 411961.123 ops/s
[info]                  ·gc.alloc.rate:            481.694 MB/sec
[info]                  ·gc.alloc.rate.norm:       1840.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.456 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1285.213 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 404420.743 ops/s
[info]                  ·gc.alloc.rate:            472.727 MB/sec
[info]                  ·gc.alloc.rate.norm:       1840.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.703 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2618.368 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson":
[info]   413561.497 ±(99.9%) 21769.833 ops/s [Average]
[info]   (min, avg, max) = (404420.743, 413561.497, 417970.797), stdev = 5653.557
[info]   CI (99.9%): [391791.664, 435331.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   483.532 ±(99.9%) 25.684 MB/sec [Average]
[info]   (min, avg, max) = (472.727, 483.532, 488.669), stdev = 6.670
[info]   CI (99.9%): [457.849, 509.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1840.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1840.001, 1840.001, 1840.001), stdev = 0.001
[info]   CI (99.9%): [1840.001, 1840.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   538.271 ±(99.9%) 709.339 MB/sec [Average]
[info]   (min, avg, max) = (336.456, 538.271, 672.861), stdev = 184.213
[info]   CI (99.9%): [≈ 0, 1247.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   2050.351 ±(99.9%) 2723.993 B/op [Average]
[info]   (min, avg, max) = (1267.293, 2050.351, 2618.368), stdev = 707.412
[info]   CI (99.9%): [≈ 0, 4774.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 7.000), stdev = 1.643
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce
[info] # Run progress: 12.73% complete, ETA 01:01:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 136768.400 ops/s
[info] # Warmup Iteration   2: 160355.257 ops/s
[info] # Warmup Iteration   3: 161638.705 ops/s
[info] Iteration   1: 164095.798 ops/s
[info]                  ·gc.alloc.rate:                                  1968.174 MB/sec
[info]                  ·gc.alloc.rate.norm:                             18880.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.064 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.612 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.051 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       19588.684 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 163172.554 ops/s
[info]                  ·gc.alloc.rate:            1956.985 MB/sec
[info]                  ·gc.alloc.rate.norm:       18880.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.605 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16416.226 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 162357.965 ops/s
[info]                  ·gc.alloc.rate:                                  1947.326 MB/sec
[info]                  ·gc.alloc.rate.norm:                             18880.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.012 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.114 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.033 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       19798.220 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   4: 163465.229 ops/s
[info]                  ·gc.alloc.rate:                                  1960.698 MB/sec
[info]                  ·gc.alloc.rate.norm:                             18880.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.059 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.096 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       19663.806 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 161801.729 ops/s
[info]                  ·gc.alloc.rate:                                  1941.180 MB/sec
[info]                  ·gc.alloc.rate.norm:                             18880.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.064 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.645 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       19866.855 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce":
[info]   162978.655 ±(99.9%) 3493.688 ops/s [Average]
[info]   (min, avg, max) = (161801.729, 162978.655, 164095.798), stdev = 907.300
[info]   CI (99.9%): [159484.967, 166472.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate":
[info]   1954.872 ±(99.9%) 41.283 MB/sec [Average]
[info]   (min, avg, max) = (1941.180, 1954.872, 1968.174), stdev = 10.721
[info]   CI (99.9%): [1913.590, 1996.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   18880.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (18880.002, 18880.003, 18880.003), stdev = 0.001
[info]   CI (99.9%): [18880.002, 18880.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.018 ±(99.9%) 0.101 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.064), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.170 ±(99.9%) 0.964 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.170, 0.612), stdev = 0.250
[info]   CI (99.9%): [≈ 0, 1.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1974.086 ±(99.9%) 586.536 MB/sec [Average]
[info]   (min, avg, max) = (1701.605, 1974.086, 2042.645), stdev = 152.322
[info]   CI (99.9%): [1387.550, 2560.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   19066.758 ±(99.9%) 5720.956 B/op [Average]
[info]   (min, avg, max) = (16416.226, 19066.758, 19866.855), stdev = 1485.714
[info]   CI (99.9%): [13345.802, 24787.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 10.000), stdev = 2.608
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala
[info] # Run progress: 13.03% complete, ETA 01:01:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 229327.780 ops/s
[info] # Warmup Iteration   2: 357278.415 ops/s
[info] # Warmup Iteration   3: 362092.231 ops/s
[info] Iteration   1: 369249.760 ops/s
[info]                  ·gc.alloc.rate:            313.384 MB/sec
[info]                  ·gc.alloc.rate.norm:       1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.327 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1433.811 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 357204.336 ops/s
[info]                  ·gc.alloc.rate:            303.150 MB/sec
[info]                  ·gc.alloc.rate.norm:       1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.320 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1482.184 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 370775.322 ops/s
[info]                  ·gc.alloc.rate:            314.668 MB/sec
[info]                  ·gc.alloc.rate.norm:       1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.331 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1427.977 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 371251.778 ops/s
[info]                  ·gc.alloc.rate:            315.087 MB/sec
[info]                  ·gc.alloc.rate.norm:       1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.346 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1426.142 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 370180.420 ops/s
[info]                  ·gc.alloc.rate:            314.281 MB/sec
[info]                  ·gc.alloc.rate.norm:       1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.464 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1430.302 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala":
[info]   367732.323 ±(99.9%) 22844.147 ops/s [Average]
[info]   (min, avg, max) = (357204.336, 367732.323, 371251.778), stdev = 5932.552
[info]   CI (99.9%): [344888.176, 390576.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   312.114 ±(99.9%) 19.446 MB/sec [Average]
[info]   (min, avg, max) = (303.150, 312.114, 315.087), stdev = 5.050
[info]   CI (99.9%): [292.668, 331.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1336.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1336.001, 1336.001, 1336.001), stdev = 0.001
[info]   CI (99.9%): [1336.001, 1336.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   336.358 ±(99.9%) 0.232 MB/sec [Average]
[info]   (min, avg, max) = (336.320, 336.358, 336.464), stdev = 0.060
[info]   CI (99.9%): [336.126, 336.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1440.083 ±(99.9%) 91.293 B/op [Average]
[info]   (min, avg, max) = (1426.142, 1440.083, 1482.184), stdev = 23.708
[info]   CI (99.9%): [1348.790, 1531.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala
[info] # Run progress: 13.33% complete, ETA 01:01:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 828323.919 ops/s
[info] # Warmup Iteration   2: 859641.149 ops/s
[info] # Warmup Iteration   3: 875499.748 ops/s
[info] Iteration   1: 873055.566 ops/s
[info]                  ·gc.alloc.rate:            168.600 MB/sec
[info]                  ·gc.alloc.rate.norm:       304.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.663 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 608.836 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 870948.592 ops/s
[info]                  ·gc.alloc.rate:      168.256 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 869715.367 ops/s
[info]                  ·gc.alloc.rate:            167.966 MB/sec
[info]                  ·gc.alloc.rate.norm:       304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.016 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 609.964 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 869776.997 ops/s
[info]                  ·gc.alloc.rate:      168.010 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 869523.229 ops/s
[info]                  ·gc.alloc.rate:            167.963 MB/sec
[info]                  ·gc.alloc.rate.norm:       304.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.076 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 610.084 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala":
[info]   870603.950 ±(99.9%) 5701.876 ops/s [Average]
[info]   (min, avg, max) = (869523.229, 870603.950, 873055.566), stdev = 1480.759
[info]   CI (99.9%): [864902.074, 876305.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   168.159 ±(99.9%) 1.058 MB/sec [Average]
[info]   (min, avg, max) = (167.963, 168.159, 168.600), stdev = 0.275
[info]   CI (99.9%): [167.101, 169.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   304.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (304.000, 304.000, 304.001), stdev = 0.001
[info]   CI (99.9%): [304.000, 304.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   202.351 ±(99.9%) 711.293 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 202.351, 337.663), stdev = 184.721
[info]   CI (99.9%): [≈ 0, 913.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   365.777 ±(99.9%) 1285.758 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 365.777, 610.084), stdev = 333.907
[info]   CI (99.9%): [≈ 0, 1651.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson
[info] # Run progress: 13.64% complete, ETA 01:00:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 43906.144 ops/s
[info] # Warmup Iteration   2: 75167.966 ops/s
[info] # Warmup Iteration   3: 77194.471 ops/s
[info] Iteration   1: 78502.974 ops/s
[info]                  ·gc.alloc.rate:                                  3341.868 MB/sec
[info]                  ·gc.alloc.rate.norm:                             67016.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.174 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.134 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       68244.582 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   2: 76507.946 ops/s
[info]                  ·gc.alloc.rate:                                  3257.069 MB/sec
[info]                  ·gc.alloc.rate.norm:                             67016.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.010 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.206 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.254 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       70023.829 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 76113.511 ops/s
[info]                  ·gc.alloc.rate:                                  3240.536 MB/sec
[info]                  ·gc.alloc.rate.norm:                             67016.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.076 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.152 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       63347.621 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 76813.429 ops/s
[info]                  ·gc.alloc.rate:                                  3271.306 MB/sec
[info]                  ·gc.alloc.rate.norm:                             67016.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.107 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3404.604 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       69746.737 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   5: 76585.387 ops/s
[info]                  ·gc.alloc.rate:                                  3260.924 MB/sec
[info]                  ·gc.alloc.rate.norm:                             67016.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.158 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.551 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       62959.737 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson":
[info]   76904.649 ±(99.9%) 3575.175 ops/s [Average]
[info]   (min, avg, max) = (76113.511, 76904.649, 78502.974), stdev = 928.462
[info]   CI (99.9%): [73329.474, 80479.825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3274.341 ±(99.9%) 151.481 MB/sec [Average]
[info]   (min, avg, max) = (3240.536, 3274.341, 3341.868), stdev = 39.339
[info]   CI (99.9%): [3122.860, 3425.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   67016.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (67016.005, 67016.005, 67016.006), stdev = 0.001
[info]   CI (99.9%): [67016.005, 67016.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.007 ±(99.9%) 0.010 MB/sec [Average]
[info]   (min, avg, max) = (0.004, 0.007, 0.010), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.144 ±(99.9%) 0.202 B/op [Average]
[info]   (min, avg, max) = (0.076, 0.144, 0.206), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   3267.539 ±(99.9%) 717.751 MB/sec [Average]
[info]   (min, avg, max) = (3063.152, 3267.539, 3404.604), stdev = 186.398
[info]   CI (99.9%): [2549.788, 3985.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   66864.501 ±(99.9%) 13312.441 B/op [Average]
[info]   (min, avg, max) = (62959.737, 66864.501, 70023.829), stdev = 3457.199
[info]   CI (99.9%): [53552.060, 80176.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.count":
[info]   48.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.600, 10.000), stdev = 0.548
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.800, 8.000), stdev = 0.447
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce
[info] # Run progress: 13.94% complete, ETA 01:00:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 209746.790 ops/s
[info] # Warmup Iteration   2: 252311.033 ops/s
[info] # Warmup Iteration   3: 264339.777 ops/s
[info] Iteration   1: 255817.482 ops/s
[info]                  ·gc.alloc.rate:            1133.687 MB/sec
[info]                  ·gc.alloc.rate.norm:       6968.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.670 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8270.919 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 263897.247 ops/s
[info]                  ·gc.alloc.rate:                   1168.077 MB/sec
[info]                  ·gc.alloc.rate.norm:              6968.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1010.973 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        6030.820 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 19.864 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 257505.836 ops/s
[info]                  ·gc.alloc.rate:                                  1139.934 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6968.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.119 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.728 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.077 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6241.475 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 264982.468 ops/s
[info]                  ·gc.alloc.rate:            1172.983 MB/sec
[info]                  ·gc.alloc.rate.norm:       6968.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.374 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8087.121 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 264314.216 ops/s
[info]                  ·gc.alloc.rate:            1170.418 MB/sec
[info]                  ·gc.alloc.rate.norm:       6968.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.369 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6080.644 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce":
[info]   261303.450 ±(99.9%) 16544.935 ops/s [Average]
[info]   (min, avg, max) = (255817.482, 261303.450, 264982.468), stdev = 4296.667
[info]   CI (99.9%): [244758.515, 277848.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1157.020 ±(99.9%) 71.858 MB/sec [Average]
[info]   (min, avg, max) = (1133.687, 1157.020, 1172.983), stdev = 18.661
[info]   CI (99.9%): [1085.162, 1228.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   6968.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6968.002, 6968.002, 6968.002), stdev = 0.001
[info]   CI (99.9%): [6968.001, 6968.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.024 ±(99.9%) 0.205 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.119), stdev = 0.053
[info]   CI (99.9%): [≈ 0, 0.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.146 ±(99.9%) 1.253 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.146, 0.728), stdev = 0.325
[info]   CI (99.9%): [≈ 0, 1.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1152.093 ±(99.9%) 708.559 MB/sec [Average]
[info]   (min, avg, max) = (1010.973, 1152.093, 1361.374), stdev = 184.010
[info]   CI (99.9%): [443.534, 1860.652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   6942.196 ±(99.9%) 4365.111 B/op [Average]
[info]   (min, avg, max) = (6030.820, 6942.196, 8270.919), stdev = 1133.606
[info]   CI (99.9%): [2577.085, 11307.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   3.973 ±(99.9%) 34.208 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.973, 19.864), stdev = 8.884
[info]   CI (99.9%): [≈ 0, 38.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.200, 13.000), stdev = 4.970
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala
[info] # Run progress: 14.24% complete, ETA 01:00:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1125295.625 ops/s
[info] # Warmup Iteration   2: 1667630.346 ops/s
[info] # Warmup Iteration   3: 1681267.002 ops/s
[info] Iteration   1: 1676029.692 ops/s
[info]                  ·gc.alloc.rate:                   860.240 MB/sec
[info]                  ·gc.alloc.rate.norm:              808.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.271 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        947.042 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.626 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 1683365.086 ops/s
[info]                  ·gc.alloc.rate:            864.220 MB/sec
[info]                  ·gc.alloc.rate.norm:       808.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.798 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 629.031 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 1628410.730 ops/s
[info]                  ·gc.alloc.rate:            835.864 MB/sec
[info]                  ·gc.alloc.rate.norm:       808.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.047 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 975.410 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   4: 1628681.062 ops/s
[info]                  ·gc.alloc.rate:                                  836.090 MB/sec
[info]                  ·gc.alloc.rate.norm:                             808.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.057 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.055 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            676.781 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       654.044 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                3.862 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 1684775.859 ops/s
[info]                  ·gc.alloc.rate:                                  865.144 MB/sec
[info]                  ·gc.alloc.rate.norm:                             808.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.036 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.034 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.449 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       953.981 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala":
[info]   1660252.486 ±(99.9%) 112184.674 ops/s [Average]
[info]   (min, avg, max) = (1628410.730, 1660252.486, 1684775.859), stdev = 29134.003
[info]   CI (99.9%): [1548067.812, 1772437.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   852.312 ±(99.9%) 57.855 MB/sec [Average]
[info]   (min, avg, max) = (835.864, 852.312, 865.144), stdev = 15.025
[info]   CI (99.9%): [794.456, 910.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   808.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (808.000, 808.000, 808.000), stdev = 0.001
[info]   CI (99.9%): [808.000, 808.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.019 ±(99.9%) 0.103 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.057), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.018 ±(99.9%) 0.099 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.055), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   877.669 ±(99.9%) 713.456 MB/sec [Average]
[info]   (min, avg, max) = (672.798, 877.669, 1021.449), stdev = 185.282
[info]   CI (99.9%): [164.214, 1591.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   831.902 ±(99.9%) 671.232 B/op [Average]
[info]   (min, avg, max) = (629.031, 831.902, 975.410), stdev = 174.317
[info]   CI (99.9%): [160.670, 1503.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.689 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.997), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.898 ±(99.9%) 6.467 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.898, 3.862), stdev = 1.679
[info]   CI (99.9%): [≈ 0, 7.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.200, 13.000), stdev = 4.324
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala
[info] # Run progress: 14.55% complete, ETA 01:00:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1855783.567 ops/s
[info] # Warmup Iteration   2: 2155696.371 ops/s
[info] # Warmup Iteration   3: 2174010.585 ops/s
[info] Iteration   1: 2175474.465 ops/s
[info]                  ·gc.alloc.rate:                   585.956 MB/sec
[info]                  ·gc.alloc.rate.norm:              424.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             336.330 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        243.369 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.482 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2178138.260 ops/s
[info]                  ·gc.alloc.rate:                   586.711 MB/sec
[info]                  ·gc.alloc.rate.norm:              424.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.368 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        486.625 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.481 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 2181585.512 ops/s
[info]                  ·gc.alloc.rate:            587.630 MB/sec
[info]                  ·gc.alloc.rate.norm:       424.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.025 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 486.337 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 2174162.026 ops/s
[info]                  ·gc.alloc.rate:                   586.405 MB/sec
[info]                  ·gc.alloc.rate.norm:              424.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             671.511 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        485.536 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.665 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.481 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 2152289.273 ops/s
[info]                  ·gc.alloc.rate:            579.948 MB/sec
[info]                  ·gc.alloc.rate.norm:       424.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.137 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 246.481 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala":
[info]   2172329.907 ±(99.9%) 44502.646 ops/s [Average]
[info]   (min, avg, max) = (2152289.273, 2172329.907, 2181585.512), stdev = 11557.196
[info]   CI (99.9%): [2127827.261, 2216832.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   585.330 ±(99.9%) 11.823 MB/sec [Average]
[info]   (min, avg, max) = (579.948, 585.330, 587.630), stdev = 3.070
[info]   CI (99.9%): [573.507, 597.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   424.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (424.000, 424.000, 424.000), stdev = 0.001
[info]   CI (99.9%): [424.000, 424.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   538.474 ±(99.9%) 709.156 MB/sec [Average]
[info]   (min, avg, max) = (336.330, 538.474, 674.025), stdev = 184.166
[info]   CI (99.9%): [≈ 0, 1247.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   389.670 ±(99.9%) 508.818 B/op [Average]
[info]   (min, avg, max) = (243.369, 389.670, 486.625), stdev = 132.138
[info]   CI (99.9%): [≈ 0, 898.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.399 ±(99.9%) 1.404 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.399, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.289 ±(99.9%) 1.015 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.289, 0.482), stdev = 0.264
[info]   CI (99.9%): [≈ 0, 1.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 6.000), stdev = 1.517
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 14.85% complete, ETA 00:59:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2271290.520 ops/s
[info] # Warmup Iteration   2: 2512549.294 ops/s
[info] # Warmup Iteration   3: 2500888.621 ops/s
[info] Iteration   1: 2501706.968 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2492376.887 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2503481.759 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2511000.954 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2502659.564 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc":
[info]   2502245.226 ±(99.9%) 25544.988 ops/s [Average]
[info]   (min, avg, max) = (2492376.887, 2502245.226, 2511000.954), stdev = 6633.952
[info]   CI (99.9%): [2476700.238, 2527790.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson
[info] # Run progress: 15.15% complete, ETA 00:59:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25244.220 ops/s
[info] # Warmup Iteration   2: 37584.488 ops/s
[info] # Warmup Iteration   3: 39179.683 ops/s
[info] Iteration   1: 39214.555 ops/s
[info]                  ·gc.alloc.rate:                                  1659.532 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66611.505 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.056 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.245 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1685.729 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       67663.000 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                160.402 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        17.000 ms
[info] Iteration   2: 39016.895 ops/s
[info]                  ·gc.alloc.rate:                                  1651.605 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66608.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.093 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.757 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.310 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       68652.923 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 39599.295 ops/s
[info]                  ·gc.alloc.rate:                                  1676.221 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66608.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.059 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.295 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       67644.086 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 39562.577 ops/s
[info]                  ·gc.alloc.rate:                                  1674.723 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66608.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.406 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       67709.050 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 39424.351 ops/s
[info]                  ·gc.alloc.rate:                                  1668.703 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66608.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.157 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.180 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       67944.300 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson":
[info]   39363.534 ±(99.9%) 945.671 ops/s [Average]
[info]   (min, avg, max) = (39016.895, 39363.534, 39599.295), stdev = 245.588
[info]   CI (99.9%): [38417.864, 40309.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1666.157 ±(99.9%) 40.238 MB/sec [Average]
[info]   (min, avg, max) = (1651.605, 1666.157, 1676.221), stdev = 10.450
[info]   CI (99.9%): [1625.919, 1706.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   66608.710 ±(99.9%) 6.017 B/op [Average]
[info]   (min, avg, max) = (66608.010, 66608.710, 66611.505), stdev = 1.563
[info]   CI (99.9%): [66602.692, 66614.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.031 ±(99.9%) 0.162 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.031, 0.093), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.245 ±(99.9%) 6.510 B/op [Average]
[info]   (min, avg, max) = (0.007, 1.245, 3.757), stdev = 1.691
[info]   CI (99.9%): [≈ 0, 7.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1698.984 ±(99.9%) 28.534 MB/sec [Average]
[info]   (min, avg, max) = (1685.729, 1698.984, 1702.406), stdev = 7.410
[info]   CI (99.9%): [1670.450, 1727.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   67922.672 ±(99.9%) 1638.684 B/op [Average]
[info]   (min, avg, max) = (67644.086, 67922.672, 68652.923), stdev = 425.561
[info]   CI (99.9%): [66283.988, 69561.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   32.080 ±(99.9%) 276.222 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 32.080, 160.402), stdev = 71.734
[info]   CI (99.9%): [≈ 0, 308.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.600, 17.000), stdev = 5.814
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce
[info] # Run progress: 15.45% complete, ETA 00:59:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18429.804 ops/s
[info] # Warmup Iteration   2: 25484.305 ops/s
[info] # Warmup Iteration   3: 25481.170 ops/s
[info] Iteration   1: 25209.245 ops/s
[info]                  ·gc.alloc.rate:                   1476.160 MB/sec
[info]                  ·gc.alloc.rate.norm:              92168.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.099 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        84172.199 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 207.935 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 25859.323 ops/s
[info]                  ·gc.alloc.rate:                                  1515.128 MB/sec
[info]                  ·gc.alloc.rate.norm:                             92168.021 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.102 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 6.192 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.355 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       103496.549 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 25959.028 ops/s
[info]                  ·gc.alloc.rate:                                  1520.073 MB/sec
[info]                  ·gc.alloc.rate.norm:                             92168.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.010 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.577 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.476 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       82551.683 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 25561.217 ops/s
[info]                  ·gc.alloc.rate:                                  1497.286 MB/sec
[info]                  ·gc.alloc.rate.norm:                             92168.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.362 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.892 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       83833.581 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 25593.597 ops/s
[info]                  ·gc.alloc.rate:                                  1498.660 MB/sec
[info]                  ·gc.alloc.rate.norm:                             92168.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.020 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.199 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.797 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       104660.977 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce":
[info]   25636.482 ±(99.9%) 1128.787 ops/s [Average]
[info]   (min, avg, max) = (25209.245, 25636.482, 25959.028), stdev = 293.142
[info]   CI (99.9%): [24507.696, 26765.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate":
[info]   1501.461 ±(99.9%) 66.657 MB/sec [Average]
[info]   (min, avg, max) = (1476.160, 1501.461, 1520.073), stdev = 17.311
[info]   CI (99.9%): [1434.805, 1568.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   92168.017 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (92168.016, 92168.017, 92168.021), stdev = 0.002
[info]   CI (99.9%): [92168.008, 92168.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.027 ±(99.9%) 0.163 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.102), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.666 ±(99.9%) 9.886 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.666, 6.192), stdev = 2.567
[info]   CI (99.9%): [≈ 0, 11.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1494.924 ±(99.9%) 726.726 MB/sec [Average]
[info]   (min, avg, max) = (1348.099, 1494.924, 1701.797), stdev = 188.729
[info]   CI (99.9%): [768.197, 2221.650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   91742.998 ±(99.9%) 43453.296 B/op [Average]
[info]   (min, avg, max) = (82551.683, 91742.998, 104660.977), stdev = 11284.683
[info]   CI (99.9%): [48289.702, 135196.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   41.587 ±(99.9%) 358.077 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 41.587, 207.935), stdev = 92.991
[info]   CI (99.9%): [≈ 0, 399.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 13.000), stdev = 4.159
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala
[info] # Run progress: 15.76% complete, ETA 00:59:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 35964.798 ops/s
[info] # Warmup Iteration   2: 58472.198 ops/s
[info] # Warmup Iteration   3: 58555.852 ops/s
[info] Iteration   1: 59028.859 ops/s
[info]                  ·gc.alloc.rate:            975.217 MB/sec
[info]                  ·gc.alloc.rate.norm:       26008.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.962 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26907.968 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 58728.276 ops/s
[info]                  ·gc.alloc.rate:            970.395 MB/sec
[info]                  ·gc.alloc.rate.norm:       26008.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.067 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 27044.478 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   3: 58009.297 ops/s
[info]                  ·gc.alloc.rate:                                  958.476 MB/sec
[info]                  ·gc.alloc.rate.norm:                             26008.008 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.096 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.618 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.037 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       27488.523 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                108.436 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   4: 59559.356 ops/s
[info]                  ·gc.alloc.rate:                                  984.009 MB/sec
[info]                  ·gc.alloc.rate.norm:                             26008.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.051 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.353 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.006 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       26985.865 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 59613.480 ops/s
[info]                  ·gc.alloc.rate:            985.024 MB/sec
[info]                  ·gc.alloc.rate.norm:       26008.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.756 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 17974.282 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala":
[info]   58987.854 ±(99.9%) 2543.072 ops/s [Average]
[info]   (min, avg, max) = (58009.297, 58987.854, 59613.480), stdev = 660.428
[info]   CI (99.9%): [56444.782, 61530.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   974.624 ±(99.9%) 41.973 MB/sec [Average]
[info]   (min, avg, max) = (958.476, 974.624, 985.024), stdev = 10.900
[info]   CI (99.9%): [932.651, 1016.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   26008.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (26008.007, 26008.007, 26008.008), stdev = 0.001
[info]   CI (99.9%): [26008.006, 26008.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.030 ±(99.9%) 0.167 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.096), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.794 ±(99.9%) 4.527 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.794, 2.618), stdev = 1.176
[info]   CI (99.9%): [≈ 0, 5.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   946.566 ±(99.9%) 572.486 MB/sec [Average]
[info]   (min, avg, max) = (680.756, 946.566, 1021.006), stdev = 148.673
[info]   CI (99.9%): [374.079, 1519.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   25280.223 ±(99.9%) 15750.584 B/op [Average]
[info]   (min, avg, max) = (17974.282, 25280.223, 27488.523), stdev = 4090.377
[info]   CI (99.9%): [9529.639, 41030.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   21.687 ±(99.9%) 186.733 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21.687, 108.436), stdev = 48.494
[info]   CI (99.9%): [≈ 0, 208.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 7.600, 13.000), stdev = 5.683
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala
[info] # Run progress: 16.06% complete, ETA 00:59:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 71717.759 ops/s
[info] # Warmup Iteration   2: 81075.460 ops/s
[info] # Warmup Iteration   3: 80383.114 ops/s
[info] Iteration   1: 81930.741 ops/s
[info]                  ·gc.alloc.rate:            527.952 MB/sec
[info]                  ·gc.alloc.rate.norm:       10144.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.999 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12950.122 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 82415.723 ops/s
[info]                  ·gc.alloc.rate:            531.160 MB/sec
[info]                  ·gc.alloc.rate.norm:       10144.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.043 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6436.806 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 81950.533 ops/s
[info]                  ·gc.alloc.rate:            528.093 MB/sec
[info]                  ·gc.alloc.rate.norm:       10144.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.006 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12946.804 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 82246.789 ops/s
[info]                  ·gc.alloc.rate:            530.050 MB/sec
[info]                  ·gc.alloc.rate.norm:       10144.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.035 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6450.108 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   5: 81891.735 ops/s
[info]                  ·gc.alloc.rate:            527.678 MB/sec
[info]                  ·gc.alloc.rate.norm:       10144.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.969 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12956.289 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala":
[info]   82087.104 ±(99.9%) 892.237 ops/s [Average]
[info]   (min, avg, max) = (81891.735, 82087.104, 82415.723), stdev = 231.711
[info]   CI (99.9%): [81194.867, 82979.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   528.987 ±(99.9%) 5.913 MB/sec [Average]
[info]   (min, avg, max) = (527.678, 528.987, 531.160), stdev = 1.536
[info]   CI (99.9%): [523.073, 534.900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10144.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10144.005, 10144.005, 10144.005), stdev = 0.001
[info]   CI (99.9%): [10144.004, 10144.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   539.210 ±(99.9%) 710.661 MB/sec [Average]
[info]   (min, avg, max) = (337.035, 539.210, 674.006), stdev = 184.556
[info]   CI (99.9%): [≈ 0, 1249.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   10348.026 ±(99.9%) 13725.128 B/op [Average]
[info]   (min, avg, max) = (6436.806, 10348.026, 12956.289), stdev = 3564.372
[info]   CI (99.9%): [≈ 0, 24073.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.600, 6.000), stdev = 1.949
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson
[info] # Run progress: 16.36% complete, ETA 00:58:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15235.622 ops/s
[info] # Warmup Iteration   2: 31588.200 ops/s
[info] # Warmup Iteration   3: 31390.901 ops/s
[info] Iteration   1: 32207.651 ops/s
[info]                  ·gc.alloc.rate:                                  1682.855 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82248.017 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.098 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.781 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1689.704 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       82582.725 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                195.308 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        15.000 ms
[info] Iteration   2: 33080.559 ops/s
[info]                  ·gc.alloc.rate:                                  1728.386 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82248.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.395 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.669 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       80976.626 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 33011.186 ops/s
[info]                  ·gc.alloc.rate:                                  1724.851 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82248.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.451 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.789 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       81148.317 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 33129.552 ops/s
[info]                  ·gc.alloc.rate:            1731.495 MB/sec
[info]                  ·gc.alloc.rate.norm:       82248.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1702.157 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 80854.434 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 32549.480 ops/s
[info]                  ·gc.alloc.rate:                                  1701.306 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82248.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.143 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.224 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       82292.409 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson":
[info]   32795.685 ±(99.9%) 1546.817 ops/s [Average]
[info]   (min, avg, max) = (32207.651, 32795.685, 33129.552), stdev = 401.703
[info]   CI (99.9%): [31248.869, 34342.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1713.779 ±(99.9%) 80.810 MB/sec [Average]
[info]   (min, avg, max) = (1682.855, 1713.779, 1731.495), stdev = 20.986
[info]   CI (99.9%): [1632.969, 1794.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   82248.013 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (82248.012, 82248.013, 82248.017), stdev = 0.002
[info]   CI (99.9%): [82248.006, 82248.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.024 ±(99.9%) 0.160 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.098), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.154 ±(99.9%) 7.840 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.154, 4.781), stdev = 2.036
[info]   CI (99.9%): [≈ 0, 8.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1699.508 ±(99.9%) 21.125 MB/sec [Average]
[info]   (min, avg, max) = (1689.704, 1699.508, 1702.224), stdev = 5.486
[info]   CI (99.9%): [1678.383, 1720.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   81570.902 ±(99.9%) 3098.169 B/op [Average]
[info]   (min, avg, max) = (80854.434, 81570.902, 82582.725), stdev = 804.585
[info]   CI (99.9%): [78472.733, 84669.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   39.062 ±(99.9%) 336.332 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 39.062, 195.308), stdev = 87.344
[info]   CI (99.9%): [≈ 0, 375.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 15.000), stdev = 4.827
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce
[info] # Run progress: 16.67% complete, ETA 00:58:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27880.876 ops/s
[info] # Warmup Iteration   2: 37550.049 ops/s
[info] # Warmup Iteration   3: 37726.060 ops/s
[info] Iteration   1: 37941.471 ops/s
[info]                  ·gc.alloc.rate:            425.005 MB/sec
[info]                  ·gc.alloc.rate.norm:       17632.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.018 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13981.750 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 38059.358 ops/s
[info]                  ·gc.alloc.rate:            426.303 MB/sec
[info]                  ·gc.alloc.rate.norm:       17632.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.999 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 27876.817 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 38058.474 ops/s
[info]                  ·gc.alloc.rate:            426.291 MB/sec
[info]                  ·gc.alloc.rate.norm:       17632.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.999 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13938.775 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 38178.641 ops/s
[info]                  ·gc.alloc.rate:            427.839 MB/sec
[info]                  ·gc.alloc.rate.norm:       17632.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.160 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13894.971 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 38066.996 ops/s
[info]                  ·gc.alloc.rate:            426.434 MB/sec
[info]                  ·gc.alloc.rate.norm:       17632.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.033 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13935.480 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce":
[info]   38060.988 ±(99.9%) 323.154 ops/s [Average]
[info]   (min, avg, max) = (37941.471, 38060.988, 38178.641), stdev = 83.922
[info]   CI (99.9%): [37737.834, 38384.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate":
[info]   426.374 ±(99.9%) 3.869 MB/sec [Average]
[info]   (min, avg, max) = (425.005, 426.374, 427.839), stdev = 1.005
[info]   CI (99.9%): [422.506, 430.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   17632.011 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (17632.011, 17632.011, 17632.012), stdev = 0.001
[info]   CI (99.9%): [17632.009, 17632.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   404.442 ±(99.9%) 580.242 MB/sec [Average]
[info]   (min, avg, max) = (336.999, 404.442, 673.999), stdev = 150.687
[info]   CI (99.9%): [≈ 0, 984.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   16725.558 ±(99.9%) 24004.216 B/op [Average]
[info]   (min, avg, max) = (13894.971, 16725.558, 27876.817), stdev = 6233.819
[info]   CI (99.9%): [≈ 0, 40729.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 7.000), stdev = 1.789
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala
[info] # Run progress: 16.97% complete, ETA 00:58:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22484.074 ops/s
[info] # Warmup Iteration   2: 39267.940 ops/s
[info] # Warmup Iteration   3: 38802.331 ops/s
[info] Iteration   1: 40642.592 ops/s
[info]                  ·gc.alloc.rate:            367.199 MB/sec
[info]                  ·gc.alloc.rate.norm:       14216.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.477 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13026.590 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 40709.990 ops/s
[info]                  ·gc.alloc.rate:            367.680 MB/sec
[info]                  ·gc.alloc.rate.norm:       14216.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.363 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13005.155 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 40422.227 ops/s
[info]                  ·gc.alloc.rate:            365.217 MB/sec
[info]                  ·gc.alloc.rate.norm:       14216.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.031 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26158.716 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 40655.370 ops/s
[info]                  ·gc.alloc.rate:                   367.148 MB/sec
[info]                  ·gc.alloc.rate.norm:              14216.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:             335.656 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        12996.638 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 25.787 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 40681.598 ops/s
[info]                  ·gc.alloc.rate:            367.514 MB/sec
[info]                  ·gc.alloc.rate.norm:       14216.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.442 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13014.104 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala":
[info]   40622.355 ±(99.9%) 442.156 ops/s [Average]
[info]   (min, avg, max) = (40422.227, 40622.355, 40709.990), stdev = 114.826
[info]   CI (99.9%): [40180.200, 41064.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   366.952 ±(99.9%) 3.830 MB/sec [Average]
[info]   (min, avg, max) = (365.217, 366.952, 367.680), stdev = 0.995
[info]   CI (99.9%): [363.122, 370.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   14216.011 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (14216.010, 14216.011, 14216.013), stdev = 0.001
[info]   CI (99.9%): [14216.005, 14216.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   403.394 ±(99.9%) 578.264 MB/sec [Average]
[info]   (min, avg, max) = (335.656, 403.394, 672.031), stdev = 150.173
[info]   CI (99.9%): [≈ 0, 981.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   15640.241 ±(99.9%) 22641.851 B/op [Average]
[info]   (min, avg, max) = (12996.638, 15640.241, 26158.716), stdev = 5880.017
[info]   CI (99.9%): [≈ 0, 38282.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   5.157 ±(99.9%) 44.407 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.157, 25.787), stdev = 11.532
[info]   CI (99.9%): [≈ 0, 49.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 8.000), stdev = 1.732
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala
[info] # Run progress: 17.27% complete, ETA 00:58:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 35364.371 ops/s
[info] # Warmup Iteration   2: 43225.497 ops/s
[info] # Warmup Iteration   3: 44302.547 ops/s
[info] Iteration   1: 44375.314 ops/s
[info]                  ·gc.alloc.rate:            389.964 MB/sec
[info]                  ·gc.alloc.rate.norm:       13832.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.360 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11930.671 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 44424.737 ops/s
[info]                  ·gc.alloc.rate:                   390.381 MB/sec
[info]                  ·gc.alloc.rate.norm:              13832.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:             336.348 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        11917.514 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 23.599 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 44558.596 ops/s
[info]                  ·gc.alloc.rate:            391.631 MB/sec
[info]                  ·gc.alloc.rate.norm:       13832.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.084 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11905.476 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   4: 44438.515 ops/s
[info]                  ·gc.alloc.rate:            390.518 MB/sec
[info]                  ·gc.alloc.rate.norm:       13832.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.367 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11914.028 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 44325.554 ops/s
[info]                  ·gc.alloc.rate:            389.486 MB/sec
[info]                  ·gc.alloc.rate.norm:       13832.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.654 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23888.252 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala":
[info]   44424.543 ±(99.9%) 335.623 ops/s [Average]
[info]   (min, avg, max) = (44325.554, 44424.543, 44558.596), stdev = 87.160
[info]   CI (99.9%): [44088.920, 44760.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   390.396 ±(99.9%) 3.077 MB/sec [Average]
[info]   (min, avg, max) = (389.486, 390.396, 391.631), stdev = 0.799
[info]   CI (99.9%): [387.319, 393.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   13832.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13832.009, 13832.009, 13832.010), stdev = 0.001
[info]   CI (99.9%): [13832.008, 13832.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   403.763 ±(99.9%) 578.809 MB/sec [Average]
[info]   (min, avg, max) = (336.348, 403.763, 672.654), stdev = 150.315
[info]   CI (99.9%): [≈ 0, 982.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   14311.188 ±(99.9%) 20615.382 B/op [Average]
[info]   (min, avg, max) = (11905.476, 14311.188, 23888.252), stdev = 5353.749
[info]   CI (99.9%): [≈ 0, 34926.570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   4.720 ±(99.9%) 40.639 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.720, 23.599), stdev = 10.554
[info]   CI (99.9%): [≈ 0, 45.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 6.000), stdev = 1.517
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 17.58% complete, ETA 00:58:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36150.362 ops/s
[info] # Warmup Iteration   2: 43300.956 ops/s
[info] # Warmup Iteration   3: 43860.896 ops/s
[info] Iteration   1: 44748.821 ops/s
[info]                  ·gc.alloc.rate:            342.130 MB/sec
[info]                  ·gc.alloc.rate.norm:       12032.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.421 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11831.242 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 44434.639 ops/s
[info]                  ·gc.alloc.rate:            339.723 MB/sec
[info]                  ·gc.alloc.rate.norm:       12032.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.438 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11915.636 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 44069.239 ops/s
[info]                  ·gc.alloc.rate:                   336.868 MB/sec
[info]                  ·gc.alloc.rate.norm:              12032.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:             336.372 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        12014.314 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 23.791 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 44771.517 ops/s
[info]                  ·gc.alloc.rate:            342.226 MB/sec
[info]                  ·gc.alloc.rate.norm:       12032.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.024 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11849.110 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 44553.176 ops/s
[info]                  ·gc.alloc.rate:            340.667 MB/sec
[info]                  ·gc.alloc.rate.norm:       12032.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.114 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11906.545 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc":
[info]   44515.478 ±(99.9%) 1101.127 ops/s [Average]
[info]   (min, avg, max) = (44069.239, 44515.478, 44771.517), stdev = 285.959
[info]   CI (99.9%): [43414.351, 45616.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   340.323 ±(99.9%) 8.459 MB/sec [Average]
[info]   (min, avg, max) = (336.868, 340.323, 342.226), stdev = 2.197
[info]   CI (99.9%): [331.863, 348.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   12032.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (12032.009, 12032.009, 12032.009), stdev = 0.001
[info]   CI (99.9%): [12032.009, 12032.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   336.674 ±(99.9%) 1.398 MB/sec [Average]
[info]   (min, avg, max) = (336.372, 336.674, 337.114), stdev = 0.363
[info]   CI (99.9%): [335.276, 338.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   11903.369 ±(99.9%) 276.441 B/op [Average]
[info]   (min, avg, max) = (11831.242, 11903.369, 12014.314), stdev = 71.791
[info]   CI (99.9%): [11626.928, 12179.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm":
[info]   4.758 ±(99.9%) 40.969 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.758, 23.791), stdev = 10.640
[info]   CI (99.9%): [≈ 0, 45.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce
[info] # Run progress: 17.88% complete, ETA 00:57:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14367.407 ops/s
[info] # Warmup Iteration   2: 18406.463 ops/s
[info] # Warmup Iteration   3: 18891.554 ops/s
[info] Iteration   1: 19321.142 ops/s
[info]                  ·gc.alloc.rate:            724.229 MB/sec
[info]                  ·gc.alloc.rate.norm:       59007.972 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.279 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 55019.719 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 19273.268 ops/s
[info]                  ·gc.alloc.rate:                   722.549 MB/sec
[info]                  ·gc.alloc.rate.norm:              59016.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1011.615 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        82626.287 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 54.395 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 19459.492 ops/s
[info]                  ·gc.alloc.rate:                   729.619 MB/sec
[info]                  ·gc.alloc.rate.norm:              59015.851 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.725 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        54575.733 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 53.875 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 16142.631 ops/s
[info]                  ·gc.alloc.rate:            605.246 MB/sec
[info]                  ·gc.alloc.rate.norm:       59000.106 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.917 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 65791.730 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 16547.733 ops/s
[info]                  ·gc.alloc.rate:                   620.344 MB/sec
[info]                  ·gc.alloc.rate.norm:              59000.027 B/op
[info]                  ·gc.churn.G1_Old_Gen:             337.059 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        32057.245 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 63.354 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce":
[info]   18148.853 ±(99.9%) 6369.546 ops/s [Average]
[info]   (min, avg, max) = (16142.631, 18148.853, 19459.492), stdev = 1654.151
[info]   CI (99.9%): [11779.308, 24518.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate":
[info]   680.397 ±(99.9%) 238.731 MB/sec [Average]
[info]   (min, avg, max) = (605.246, 680.397, 729.619), stdev = 61.998
[info]   CI (99.9%): [441.666, 919.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   59007.995 ±(99.9%) 30.556 B/op [Average]
[info]   (min, avg, max) = (59000.027, 59007.995, 59016.021), stdev = 7.935
[info]   CI (99.9%): [58977.439, 59038.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   674.719 ±(99.9%) 918.347 MB/sec [Average]
[info]   (min, avg, max) = (337.059, 674.719, 1011.615), stdev = 238.492
[info]   CI (99.9%): [≈ 0, 1593.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   58014.143 ±(99.9%) 71023.202 B/op [Average]
[info]   (min, avg, max) = (32057.245, 58014.143, 82626.287), stdev = 18444.500
[info]   CI (99.9%): [≈ 0, 129037.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.400 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.400, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   34.325 ±(99.9%) 121.526 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 34.325, 63.354), stdev = 31.560
[info]   CI (99.9%): [≈ 0, 155.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 9.000), stdev = 2.191
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala
[info] # Run progress: 18.18% complete, ETA 00:57:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10649.745 ops/s
[info] # Warmup Iteration   2: 18113.705 ops/s
[info] # Warmup Iteration   3: 18304.875 ops/s
[info] Iteration   1: 17711.332 ops/s
[info]                  ·gc.alloc.rate:            502.409 MB/sec
[info]                  ·gc.alloc.rate.norm:       44654.297 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.627 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 59783.334 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 17892.662 ops/s
[info]                  ·gc.alloc.rate:            507.828 MB/sec
[info]                  ·gc.alloc.rate.norm:       44680.025 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.309 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 29589.343 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 18255.915 ops/s
[info]                  ·gc.alloc.rate:            518.239 MB/sec
[info]                  ·gc.alloc.rate.norm:       44680.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.761 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 58002.178 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 18219.022 ops/s
[info]                  ·gc.alloc.rate:            517.145 MB/sec
[info]                  ·gc.alloc.rate.norm:       44678.232 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.731 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 58119.952 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 18441.404 ops/s
[info]                  ·gc.alloc.rate:            523.603 MB/sec
[info]                  ·gc.alloc.rate.norm:       44680.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.454 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 28710.197 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala":
[info]   18104.067 ±(99.9%) 1137.410 ops/s [Average]
[info]   (min, avg, max) = (17711.332, 18104.067, 18441.404), stdev = 295.382
[info]   CI (99.9%): [16966.657, 19241.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   513.845 ±(99.9%) 32.923 MB/sec [Average]
[info]   (min, avg, max) = (502.409, 513.845, 523.603), stdev = 8.550
[info]   CI (99.9%): [480.922, 546.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   44674.520 ±(99.9%) 43.633 B/op [Average]
[info]   (min, avg, max) = (44654.297, 44674.520, 44680.025), stdev = 11.331
[info]   CI (99.9%): [44630.887, 44718.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   538.176 ±(99.9%) 709.338 MB/sec [Average]
[info]   (min, avg, max) = (336.309, 538.176, 672.761), stdev = 184.213
[info]   CI (99.9%): [≈ 0, 1247.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   46841.001 ±(99.9%) 62257.789 B/op [Average]
[info]   (min, avg, max) = (28710.197, 46841.001, 59783.334), stdev = 16168.150
[info]   CI (99.9%): [≈ 0, 109098.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.800, 9.000), stdev = 2.588
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala
[info] # Run progress: 18.48% complete, ETA 00:57:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 70057.027 ops/s
[info] # Warmup Iteration   2: 74080.210 ops/s
[info] # Warmup Iteration   3: 74961.559 ops/s
[info] Iteration   1: 74666.260 ops/s
[info]                  ·gc.alloc.rate:            194.307 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      338.376 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7132.979 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 74842.368 ops/s
[info]                  ·gc.alloc.rate:      194.774 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 73998.105 ops/s
[info]                  ·gc.alloc.rate:            192.549 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.675 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7183.192 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 74706.900 ops/s
[info]                  ·gc.alloc.rate:            194.423 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.726 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7115.031 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 74882.068 ops/s
[info]                  ·gc.alloc.rate:      194.845 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala":
[info]   74619.140 ±(99.9%) 1381.099 ops/s [Average]
[info]   (min, avg, max) = (73998.105, 74619.140, 74882.068), stdev = 358.667
[info]   CI (99.9%): [73238.041, 76000.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   194.180 ±(99.9%) 3.617 MB/sec [Average]
[info]   (min, avg, max) = (192.549, 194.180, 194.845), stdev = 0.939
[info]   CI (99.9%): [190.563, 197.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.005, 4096.006, 4096.006), stdev = 0.001
[info]   CI (99.9%): [4096.005, 4096.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   202.755 ±(99.9%) 712.714 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 202.755, 338.376), stdev = 185.090
[info]   CI (99.9%): [≈ 0, 915.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   4286.240 ±(99.9%) 15067.046 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4286.240, 7183.192), stdev = 3912.864
[info]   CI (99.9%): [≈ 0, 19353.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson
[info] # Run progress: 18.79% complete, ETA 00:57:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8787.276 ops/s
[info] # Warmup Iteration   2: 15715.590 ops/s
[info] # Warmup Iteration   3: 15804.107 ops/s
[info] Iteration   1: 15684.647 ops/s
[info]                  ·gc.alloc.rate:            1016.822 MB/sec
[info]                  ·gc.alloc.rate.norm:       102064.026 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.828 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 101261.642 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 15781.142 ops/s
[info]                  ·gc.alloc.rate:            1023.156 MB/sec
[info]                  ·gc.alloc.rate.norm:       102064.749 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.931 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 100645.758 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 15906.968 ops/s
[info]                  ·gc.alloc.rate:                                  1031.514 MB/sec
[info]                  ·gc.alloc.rate.norm:                             102064.026 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.070 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 6.971 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.121 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       100244.129 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                395.440 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   4: 15649.625 ops/s
[info]                  ·gc.alloc.rate:                                  1014.693 MB/sec
[info]                  ·gc.alloc.rate.norm:                             102064.035 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.045 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.513 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.020 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       102700.422 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 15515.459 ops/s
[info]                  ·gc.alloc.rate:                                  1006.205 MB/sec
[info]                  ·gc.alloc.rate.norm:                             102064.026 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.197 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.157 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       103580.579 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson":
[info]   15707.568 ±(99.9%) 564.490 ops/s [Average]
[info]   (min, avg, max) = (15515.459, 15707.568, 15906.968), stdev = 146.596
[info]   CI (99.9%): [15143.078, 16272.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1018.478 ±(99.9%) 36.505 MB/sec [Average]
[info]   (min, avg, max) = (1006.205, 1018.478, 1031.514), stdev = 9.480
[info]   CI (99.9%): [981.973, 1054.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   102064.172 ±(99.9%) 1.241 B/op [Average]
[info]   (min, avg, max) = (102064.026, 102064.172, 102064.749), stdev = 0.322
[info]   CI (99.9%): [102062.932, 102065.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.023 ±(99.9%) 0.125 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.070), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.336 ±(99.9%) 12.434 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.336, 6.971), stdev = 3.229
[info]   CI (99.9%): [≈ 0, 14.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1014.611 ±(99.9%) 23.724 MB/sec [Average]
[info]   (min, avg, max) = (1008.828, 1014.611, 1021.157), stdev = 6.161
[info]   CI (99.9%): [990.887, 1038.335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   101686.506 ±(99.9%) 5431.884 B/op [Average]
[info]   (min, avg, max) = (100244.129, 101686.506, 103580.579), stdev = 1410.643
[info]   CI (99.9%): [96254.622, 107118.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   79.088 ±(99.9%) 680.972 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 79.088, 395.440), stdev = 176.846
[info]   CI (99.9%): [≈ 0, 760.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.000, 13.000), stdev = 5.148
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce
[info] # Run progress: 19.09% complete, ETA 00:57:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 41437.155 ops/s
[info] # Warmup Iteration   2: 57507.209 ops/s
[info] # Warmup Iteration   3: 57672.038 ops/s
[info] Iteration   1: 57880.197 ops/s
[info]                  ·gc.alloc.rate:                   876.838 MB/sec
[info]                  ·gc.alloc.rate.norm:              23848.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.010 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        18331.558 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 18.114 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 57673.998 ops/s
[info]                  ·gc.alloc.rate:            873.701 MB/sec
[info]                  ·gc.alloc.rate.norm:       23848.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1012.311 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 27631.419 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 57929.781 ops/s
[info]                  ·gc.alloc.rate:            877.647 MB/sec
[info]                  ·gc.alloc.rate.norm:       23848.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.004 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18314.474 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 56333.350 ops/s
[info]                  ·gc.alloc.rate:                                  853.516 MB/sec
[info]                  ·gc.alloc.rate.norm:                             23848.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.069 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.929 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1015.090 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       28362.526 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                93.053 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   5: 57841.815 ops/s
[info]                  ·gc.alloc.rate:                                  876.243 MB/sec
[info]                  ·gc.alloc.rate.norm:                             23848.008 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.108 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.945 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.948 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       27786.331 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce":
[info]   57531.828 ±(99.9%) 2606.221 ops/s [Average]
[info]   (min, avg, max) = (56333.350, 57531.828, 57929.781), stdev = 676.827
[info]   CI (99.9%): [54925.607, 60138.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate":
[info]   871.589 ±(99.9%) 39.316 MB/sec [Average]
[info]   (min, avg, max) = (853.516, 871.589, 877.647), stdev = 10.210
[info]   CI (99.9%): [832.273, 910.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   23848.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (23848.007, 23848.007, 23848.008), stdev = 0.001
[info]   CI (99.9%): [23848.006, 23848.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.035 ±(99.9%) 0.194 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.035, 0.108), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.975 ±(99.9%) 5.322 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.975, 2.945), stdev = 1.382
[info]   CI (99.9%): [≈ 0, 6.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   879.273 ±(99.9%) 721.637 MB/sec [Average]
[info]   (min, avg, max) = (674.004, 879.273, 1020.948), stdev = 187.407
[info]   CI (99.9%): [157.636, 1600.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   24085.262 ±(99.9%) 20282.263 B/op [Average]
[info]   (min, avg, max) = (18314.474, 24085.262, 28362.526), stdev = 5267.239
[info]   CI (99.9%): [3802.999, 44367.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   22.233 ±(99.9%) 155.408 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 22.233, 93.053), stdev = 40.359
[info]   CI (99.9%): [≈ 0, 177.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.800, 10.000), stdev = 2.588
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala
[info] # Run progress: 19.39% complete, ETA 00:56:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 49647.558 ops/s
[info] # Warmup Iteration   2: 84608.734 ops/s
[info] # Warmup Iteration   3: 86744.968 ops/s
[info] Iteration   1: 84217.814 ops/s
[info]                  ·gc.alloc.rate:            998.437 MB/sec
[info]                  ·gc.alloc.rate.norm:       18664.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.895 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18859.504 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 83944.892 ops/s
[info]                  ·gc.alloc.rate:                   995.385 MB/sec
[info]                  ·gc.alloc.rate.norm:              18664.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.403 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        18908.113 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 12.489 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 84395.117 ops/s
[info]                  ·gc.alloc.rate:                                  1000.638 MB/sec
[info]                  ·gc.alloc.rate.norm:                             18664.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.083 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.541 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1012.995 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       18894.492 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                74.534 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   4: 86668.627 ops/s
[info]                  ·gc.alloc.rate:                                  1027.557 MB/sec
[info]                  ·gc.alloc.rate.norm:                             18664.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.047 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.857 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.985 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       18544.629 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 87355.001 ops/s
[info]                  ·gc.alloc.rate:                                  1035.820 MB/sec
[info]                  ·gc.alloc.rate.norm:                             18664.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.047 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.114 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       18399.018 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala":
[info]   85316.290 ±(99.9%) 6064.337 ops/s [Average]
[info]   (min, avg, max) = (83944.892, 85316.290, 87355.001), stdev = 1574.889
[info]   CI (99.9%): [79251.954, 91380.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1011.567 ±(99.9%) 71.978 MB/sec [Average]
[info]   (min, avg, max) = (995.385, 1011.567, 1035.820), stdev = 18.692
[info]   CI (99.9%): [939.589, 1083.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   18664.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (18664.005, 18664.005, 18664.005), stdev = 0.001
[info]   CI (99.9%): [18664.004, 18664.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.026 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.083), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.489 ±(99.9%) 2.664 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.489, 1.541), stdev = 0.692
[info]   CI (99.9%): [≈ 0, 3.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1014.478 ±(99.9%) 24.097 MB/sec [Average]
[info]   (min, avg, max) = (1008.403, 1014.478, 1021.114), stdev = 6.258
[info]   CI (99.9%): [990.381, 1038.575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   18721.151 ±(99.9%) 901.152 B/op [Average]
[info]   (min, avg, max) = (18399.018, 18721.151, 18908.113), stdev = 234.026
[info]   CI (99.9%): [17819.999, 19622.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   17.405 ±(99.9%) 124.727 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17.405, 74.534), stdev = 32.391
[info]   CI (99.9%): [≈ 0, 142.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.600, 12.000), stdev = 4.827
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala
[info] # Run progress: 19.70% complete, ETA 00:56:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 253311.171 ops/s
[info] # Warmup Iteration   2: 279615.066 ops/s
[info] # Warmup Iteration   3: 283158.582 ops/s
[info] Iteration   1: 280087.865 ops/s
[info]                  ·gc.alloc.rate:            444.152 MB/sec
[info]                  ·gc.alloc.rate.norm:       2496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.410 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3784.365 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 281976.264 ops/s
[info]                  ·gc.alloc.rate:            447.099 MB/sec
[info]                  ·gc.alloc.rate.norm:       2496.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.339 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1877.669 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 286560.703 ops/s
[info]                  ·gc.alloc.rate:            454.391 MB/sec
[info]                  ·gc.alloc.rate.norm:       2496.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.358 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1847.637 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 285261.459 ops/s
[info]                  ·gc.alloc.rate:            452.408 MB/sec
[info]                  ·gc.alloc.rate.norm:       2496.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.812 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3712.008 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 287012.931 ops/s
[info]                  ·gc.alloc.rate:                   455.196 MB/sec
[info]                  ·gc.alloc.rate.norm:              2496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             336.414 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1844.676 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.653 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala":
[info]   284179.844 ±(99.9%) 11626.271 ops/s [Average]
[info]   (min, avg, max) = (280087.865, 284179.844, 287012.931), stdev = 3019.306
[info]   CI (99.9%): [272553.574, 295806.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   450.649 ±(99.9%) 18.526 MB/sec [Average]
[info]   (min, avg, max) = (444.152, 450.649, 455.196), stdev = 4.811
[info]   CI (99.9%): [432.123, 469.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2496.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2496.001, 2496.001, 2496.002), stdev = 0.001
[info]   CI (99.9%): [2496.001, 2496.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   471.067 ±(99.9%) 710.215 MB/sec [Average]
[info]   (min, avg, max) = (336.339, 471.067, 673.410), stdev = 184.441
[info]   CI (99.9%): [≈ 0, 1181.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   2613.271 ±(99.9%) 3990.913 B/op [Average]
[info]   (min, avg, max) = (1844.676, 2613.271, 3784.365), stdev = 1036.427
[info]   CI (99.9%): [≈ 0, 6604.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.731 ±(99.9%) 6.290 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.731, 3.653), stdev = 1.634
[info]   CI (99.9%): [≈ 0, 7.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 6.000), stdev = 1.414
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 20.00% complete, ETA 00:56:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 297894.258 ops/s
[info] # Warmup Iteration   2: 329189.018 ops/s
[info] # Warmup Iteration   3: 330118.983 ops/s
[info] Iteration   1: 330086.624 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 329217.139 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 324869.157 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 330255.762 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 331174.491 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc":
[info]   329120.635 ±(99.9%) 9534.592 ops/s [Average]
[info]   (min, avg, max) = (324869.157, 329120.635, 331174.491), stdev = 2476.103
[info]   CI (99.9%): [319586.043, 338655.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson
[info] # Run progress: 20.30% complete, ETA 00:56:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 55191.965 ops/s
[info] # Warmup Iteration   2: 76321.279 ops/s
[info] # Warmup Iteration   3: 77126.639 ops/s
[info] Iteration   1: 77077.364 ops/s
[info]                  ·gc.alloc.rate:            1051.321 MB/sec
[info]                  ·gc.alloc.rate.norm:       21472.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.942 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 20606.453 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 77465.960 ops/s
[info]                  ·gc.alloc.rate:            1057.017 MB/sec
[info]                  ·gc.alloc.rate.norm:       21472.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.341 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 20503.525 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 76685.651 ops/s
[info]                  ·gc.alloc.rate:                                  1046.119 MB/sec
[info]                  ·gc.alloc.rate.norm:                             21472.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.067 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.383 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.063 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       20793.524 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                82.026 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   4: 76716.509 ops/s
[info]                  ·gc.alloc.rate:                                  1046.521 MB/sec
[info]                  ·gc.alloc.rate.norm:                             21472.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.019 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.400 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.470 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       27933.965 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 78349.202 ops/s
[info]                  ·gc.alloc.rate:                                  1068.750 MB/sec
[info]                  ·gc.alloc.rate.norm:                             21472.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.080 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.021 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       20513.087 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson":
[info]   77258.937 ±(99.9%) 2645.052 ops/s [Average]
[info]   (min, avg, max) = (76685.651, 77258.937, 78349.202), stdev = 686.912
[info]   CI (99.9%): [74613.885, 79903.989] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1053.946 ±(99.9%) 36.116 MB/sec [Average]
[info]   (min, avg, max) = (1046.119, 1053.946, 1068.750), stdev = 9.379
[info]   CI (99.9%): [1017.830, 1090.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   21472.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (21472.005, 21472.005, 21472.006), stdev = 0.001
[info]   CI (99.9%): [21472.005, 21472.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.018 ±(99.9%) 0.110 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.067), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.373 ±(99.9%) 2.267 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.373, 1.383), stdev = 0.589
[info]   CI (99.9%): [≈ 0, 2.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1082.767 ±(99.9%) 600.219 MB/sec [Average]
[info]   (min, avg, max) = (1008.942, 1082.767, 1361.470), stdev = 155.875
[info]   CI (99.9%): [482.548, 1682.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   22070.111 ±(99.9%) 12630.357 B/op [Average]
[info]   (min, avg, max) = (20503.525, 22070.111, 27933.965), stdev = 3280.064
[info]   CI (99.9%): [9439.753, 34700.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   16.405 ±(99.9%) 141.253 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16.405, 82.026), stdev = 36.683
[info]   CI (99.9%): [≈ 0, 157.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.800, 12.000), stdev = 4.438
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce
[info] # Run progress: 20.61% complete, ETA 00:56:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19877.002 ops/s
[info] # Warmup Iteration   2: 27234.835 ops/s
[info] # Warmup Iteration   3: 27893.425 ops/s
[info] Iteration   1: 27918.193 ops/s
[info]                  ·gc.alloc.rate:            580.128 MB/sec
[info]                  ·gc.alloc.rate.norm:       32712.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.985 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 38004.402 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 27908.406 ops/s
[info]                  ·gc.alloc.rate:            579.982 MB/sec
[info]                  ·gc.alloc.rate.norm:       32712.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.033 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 38016.656 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 27983.991 ops/s
[info]                  ·gc.alloc.rate:            581.642 MB/sec
[info]                  ·gc.alloc.rate.norm:       32712.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.076 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18957.391 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 27942.500 ops/s
[info]                  ·gc.alloc.rate:            580.722 MB/sec
[info]                  ·gc.alloc.rate.norm:       32712.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.072 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 37970.405 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 27789.406 ops/s
[info]                  ·gc.alloc.rate:            577.483 MB/sec
[info]                  ·gc.alloc.rate.norm:       32712.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.003 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 38179.424 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce":
[info]   27908.499 ±(99.9%) 279.883 ops/s [Average]
[info]   (min, avg, max) = (27789.406, 27908.499, 27983.991), stdev = 72.685
[info]   CI (99.9%): [27628.616, 28188.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   579.991 ±(99.9%) 5.955 MB/sec [Average]
[info]   (min, avg, max) = (577.483, 579.991, 581.642), stdev = 1.547
[info]   CI (99.9%): [574.036, 585.947] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   32712.016 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (32712.015, 32712.016, 32712.018), stdev = 0.002
[info]   CI (99.9%): [32712.010, 32712.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   606.634 ±(99.9%) 580.244 MB/sec [Average]
[info]   (min, avg, max) = (337.076, 606.634, 674.072), stdev = 150.688
[info]   CI (99.9%): [26.390, 1186.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   34225.656 ±(99.9%) 32867.561 B/op [Average]
[info]   (min, avg, max) = (18957.391, 34225.656, 38179.424), stdev = 8535.601
[info]   CI (99.9%): [1358.095, 67093.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 8.000), stdev = 1.871
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala
[info] # Run progress: 20.91% complete, ETA 00:55:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 50811.975 ops/s
[info] # Warmup Iteration   2: 83094.748 ops/s
[info] # Warmup Iteration   3: 85193.894 ops/s
[info] Iteration   1: 86256.853 ops/s
[info]                  ·gc.alloc.rate:            1133.586 MB/sec
[info]                  ·gc.alloc.rate.norm:       20688.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.982 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18413.982 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 83525.966 ops/s
[info]                  ·gc.alloc.rate:                   1097.723 MB/sec
[info]                  ·gc.alloc.rate.norm:              20688.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.369 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        25355.210 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 75.313 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   3: 86096.304 ops/s
[info]                  ·gc.alloc.rate:                                  1131.496 MB/sec
[info]                  ·gc.alloc.rate.norm:                             20688.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.160 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.919 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.005 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       18667.816 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   4: 85317.313 ops/s
[info]                  ·gc.alloc.rate:            1121.336 MB/sec
[info]                  ·gc.alloc.rate.norm:       20688.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.087 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18838.461 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   5: 86778.583 ops/s
[info]                  ·gc.alloc.rate:            1140.527 MB/sec
[info]                  ·gc.alloc.rate.norm:       20688.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.376 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 24693.981 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala":
[info]   85595.004 ±(99.9%) 4889.042 ops/s [Average]
[info]   (min, avg, max) = (83525.966, 85595.004, 86778.583), stdev = 1269.669
[info]   CI (99.9%): [80705.962, 90484.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1124.933 ±(99.9%) 64.273 MB/sec [Average]
[info]   (min, avg, max) = (1097.723, 1124.933, 1140.527), stdev = 16.692
[info]   CI (99.9%): [1060.660, 1189.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   20688.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (20688.005, 20688.005, 20688.005), stdev = 0.001
[info]   CI (99.9%): [20688.004, 20688.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.032 ±(99.9%) 0.275 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.032, 0.160), stdev = 0.071
[info]   CI (99.9%): [≈ 0, 0.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.584 ±(99.9%) 5.026 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.584, 2.919), stdev = 1.305
[info]   CI (99.9%): [≈ 0, 5.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1151.564 ±(99.9%) 709.973 MB/sec [Average]
[info]   (min, avg, max) = (1008.982, 1151.564, 1361.376), stdev = 184.378
[info]   CI (99.9%): [441.590, 1861.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   21193.890 ±(99.9%) 13508.051 B/op [Average]
[info]   (min, avg, max) = (18413.982, 21193.890, 25355.210), stdev = 3507.998
[info]   CI (99.9%): [7685.839, 34701.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   15.063 ±(99.9%) 129.693 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15.063, 75.313), stdev = 33.681
[info]   CI (99.9%): [≈ 0, 144.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 9.000, 16.000), stdev = 5.831
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala
[info] # Run progress: 21.21% complete, ETA 00:55:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 101334.724 ops/s
[info] # Warmup Iteration   2: 117453.809 ops/s
[info] # Warmup Iteration   3: 119504.287 ops/s
[info] Iteration   1: 118622.404 ops/s
[info]                  ·gc.alloc.rate:            462.986 MB/sec
[info]                  ·gc.alloc.rate.norm:       6144.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.015 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8944.436 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 118094.790 ops/s
[info]                  ·gc.alloc.rate:            460.908 MB/sec
[info]                  ·gc.alloc.rate.norm:       6144.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.992 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4492.172 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 120907.179 ops/s
[info]                  ·gc.alloc.rate:            471.914 MB/sec
[info]                  ·gc.alloc.rate.norm:       6144.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.048 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8775.638 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 121119.151 ops/s
[info]                  ·gc.alloc.rate:            472.768 MB/sec
[info]                  ·gc.alloc.rate.norm:       6144.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.040 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4380.103 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 116586.734 ops/s
[info]                  ·gc.alloc.rate:            455.220 MB/sec
[info]                  ·gc.alloc.rate.norm:       6144.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.149 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4550.424 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala":
[info]   119066.052 ±(99.9%) 7429.886 ops/s [Average]
[info]   (min, avg, max) = (116586.734, 119066.052, 121119.151), stdev = 1929.518
[info]   CI (99.9%): [111636.166, 126495.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   464.759 ±(99.9%) 28.836 MB/sec [Average]
[info]   (min, avg, max) = (455.220, 464.759, 472.768), stdev = 7.489
[info]   CI (99.9%): [435.923, 493.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6144.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6144.003, 6144.004, 6144.004), stdev = 0.001
[info]   CI (99.9%): [6144.003, 6144.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   471.849 ±(99.9%) 710.701 MB/sec [Average]
[info]   (min, avg, max) = (336.992, 471.849, 674.048), stdev = 184.567
[info]   CI (99.9%): [≈ 0, 1182.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   6228.555 ±(99.9%) 9255.886 B/op [Average]
[info]   (min, avg, max) = (4380.103, 6228.555, 8944.436), stdev = 2403.724
[info]   CI (99.9%): [≈ 0, 15484.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 6.000), stdev = 1.414
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson
[info] # Run progress: 21.52% complete, ETA 00:55:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9403.760 ops/s
[info] # Warmup Iteration   2: 20716.394 ops/s
[info] # Warmup Iteration   3: 20852.831 ops/s
[info] Iteration   1: 20624.446 ops/s
[info]                  ·gc.alloc.rate:                   1138.710 MB/sec
[info]                  ·gc.alloc.rate.norm:              86904.090 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1007.755 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        76909.806 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 50.833 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 20842.203 ops/s
[info]                  ·gc.alloc.rate:                   1150.488 MB/sec
[info]                  ·gc.alloc.rate.norm:              86904.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1342.487 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        101406.947 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.661 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 352.107 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   3: 21182.413 ops/s
[info]                  ·gc.alloc.rate:                                  1169.479 MB/sec
[info]                  ·gc.alloc.rate.norm:                             86904.024 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.069 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.136 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.047 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       75874.021 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 21188.761 ops/s
[info]                  ·gc.alloc.rate:                                  1169.741 MB/sec
[info]                  ·gc.alloc.rate.norm:                             86904.022 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.072 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.250 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       101131.947 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 21300.010 ops/s
[info]                  ·gc.alloc.rate:            1176.171 MB/sec
[info]                  ·gc.alloc.rate.norm:       86904.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.201 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 75453.765 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson":
[info]   21027.566 ±(99.9%) 1090.916 ops/s [Average]
[info]   (min, avg, max) = (20624.446, 21027.566, 21300.010), stdev = 283.307
[info]   CI (99.9%): [19936.650, 22118.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1160.918 ±(99.9%) 60.448 MB/sec [Average]
[info]   (min, avg, max) = (1138.710, 1160.918, 1176.171), stdev = 15.698
[info]   CI (99.9%): [1100.470, 1221.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   86904.035 ±(99.9%) 0.119 B/op [Average]
[info]   (min, avg, max) = (86904.019, 86904.035, 86904.090), stdev = 0.031
[info]   CI (99.9%): [86903.916, 86904.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.014 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.069), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.042 ±(99.9%) 8.815 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.042, 5.136), stdev = 2.289
[info]   CI (99.9%): [≈ 0, 9.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1150.748 ±(99.9%) 707.741 MB/sec [Average]
[info]   (min, avg, max) = (1007.755, 1150.748, 1361.250), stdev = 183.798
[info]   CI (99.9%): [443.007, 1858.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   86155.297 ±(99.9%) 53168.852 B/op [Average]
[info]   (min, avg, max) = (75453.765, 86155.297, 101406.947), stdev = 13807.782
[info]   CI (99.9%): [32986.445, 139324.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.065 ±(99.9%) 7.820 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.065, 4.661), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   80.588 ±(99.9%) 590.580 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 80.588, 352.107), stdev = 153.372
[info]   CI (99.9%): [≈ 0, 671.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.000, 18.000), stdev = 7.071
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce
[info] # Run progress: 21.82% complete, ETA 00:55:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 142227.266 ops/s
[info] # Warmup Iteration   2: 177647.913 ops/s
[info] # Warmup Iteration   3: 176903.224 ops/s
[info] Iteration   1: 178213.670 ops/s
[info]                  ·gc.alloc.rate:            622.338 MB/sec
[info]                  ·gc.alloc.rate.norm:       5496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.140 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5953.473 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 180177.295 ops/s
[info]                  ·gc.alloc.rate:            629.079 MB/sec
[info]                  ·gc.alloc.rate.norm:       5496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.006 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2944.278 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 179892.709 ops/s
[info]                  ·gc.alloc.rate:            628.093 MB/sec
[info]                  ·gc.alloc.rate.norm:       5496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.035 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5898.014 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 179163.795 ops/s
[info]                  ·gc.alloc.rate:            625.575 MB/sec
[info]                  ·gc.alloc.rate.norm:       5496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.053 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5921.910 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 177592.756 ops/s
[info]                  ·gc.alloc.rate:            620.116 MB/sec
[info]                  ·gc.alloc.rate.norm:       5496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.077 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5974.254 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce":
[info]   179008.045 ±(99.9%) 4221.730 ops/s [Average]
[info]   (min, avg, max) = (177592.756, 179008.045, 180177.295), stdev = 1096.370
[info]   CI (99.9%): [174786.315, 183229.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   625.040 ±(99.9%) 14.595 MB/sec [Average]
[info]   (min, avg, max) = (620.116, 625.040, 629.079), stdev = 3.790
[info]   CI (99.9%): [610.445, 639.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5496.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5496.002, 5496.002, 5496.002), stdev = 0.001
[info]   CI (99.9%): [5496.002, 5496.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   606.662 ±(99.9%) 580.456 MB/sec [Average]
[info]   (min, avg, max) = (337.006, 606.662, 674.140), stdev = 150.743
[info]   CI (99.9%): [26.206, 1187.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   5338.386 ±(99.9%) 5154.723 B/op [Average]
[info]   (min, avg, max) = (2944.278, 5338.386, 5974.254), stdev = 1338.665
[info]   CI (99.9%): [183.663, 10493.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 7.000), stdev = 1.517
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala
[info] # Run progress: 22.12% complete, ETA 00:54:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 174646.026 ops/s
[info] # Warmup Iteration   2: 262932.879 ops/s
[info] # Warmup Iteration   3: 271698.888 ops/s
[info] Iteration   1: 274802.902 ops/s
[info]                  ·gc.alloc.rate:      277.903 MB/sec
[info]                  ·gc.alloc.rate.norm: 1592.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 272528.402 ops/s
[info]                  ·gc.alloc.rate:            275.585 MB/sec
[info]                  ·gc.alloc.rate.norm:       1592.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.303 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1942.762 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 272860.239 ops/s
[info]                  ·gc.alloc.rate:            276.026 MB/sec
[info]                  ·gc.alloc.rate.norm:       1592.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.424 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1940.349 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 270408.231 ops/s
[info]                  ·gc.alloc.rate:            273.619 MB/sec
[info]                  ·gc.alloc.rate.norm:       1592.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.513 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1957.940 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 271982.992 ops/s
[info]                  ·gc.alloc.rate:            275.048 MB/sec
[info]                  ·gc.alloc.rate.norm:       1592.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.311 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1946.597 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala":
[info]   272516.553 ±(99.9%) 6111.300 ops/s [Average]
[info]   (min, avg, max) = (270408.231, 272516.553, 274802.902), stdev = 1587.085
[info]   CI (99.9%): [266405.254, 278627.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   275.636 ±(99.9%) 5.999 MB/sec [Average]
[info]   (min, avg, max) = (273.619, 275.636, 277.903), stdev = 1.558
[info]   CI (99.9%): [269.637, 281.635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1592.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1592.001, 1592.002, 1592.002), stdev = 0.001
[info]   CI (99.9%): [1592.001, 1592.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   269.110 ±(99.9%) 579.280 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.110, 336.513), stdev = 150.437
[info]   CI (99.9%): [≈ 0, 848.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1557.530 ±(99.9%) 3352.801 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1557.530, 1957.940), stdev = 870.712
[info]   CI (99.9%): [≈ 0, 4910.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.400, 5.000), stdev = 1.949
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala
[info] # Run progress: 22.42% complete, ETA 00:54:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 435028.703 ops/s
[info] # Warmup Iteration   2: 467047.345 ops/s
[info] # Warmup Iteration   3: 466945.290 ops/s
[info] Iteration   1: 466083.879 ops/s
[info]                  ·gc.alloc.rate:            357.790 MB/sec
[info]                  ·gc.alloc.rate.norm:       1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.453 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1135.962 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 460880.394 ops/s
[info]                  ·gc.alloc.rate:                   353.751 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             336.408 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1148.779 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.275 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 467717.259 ops/s
[info]                  ·gc.alloc.rate:            359.007 MB/sec
[info]                  ·gc.alloc.rate.norm:       1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.088 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1134.245 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   4: 466976.946 ops/s
[info]                  ·gc.alloc.rate:            358.403 MB/sec
[info]                  ·gc.alloc.rate.norm:       1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.391 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1133.809 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 462222.290 ops/s
[info]                  ·gc.alloc.rate:            354.741 MB/sec
[info]                  ·gc.alloc.rate.norm:       1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.379 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1145.472 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala":
[info]   464776.154 ±(99.9%) 11695.899 ops/s [Average]
[info]   (min, avg, max) = (460880.394, 464776.154, 467717.259), stdev = 3037.388
[info]   CI (99.9%): [453080.255, 476472.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   356.739 ±(99.9%) 9.018 MB/sec [Average]
[info]   (min, avg, max) = (353.751, 356.739, 359.007), stdev = 2.342
[info]   CI (99.9%): [347.721, 365.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1208.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1208.001, 1208.001, 1208.001), stdev = 0.001
[info]   CI (99.9%): [1208.001, 1208.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   336.544 ±(99.9%) 1.176 MB/sec [Average]
[info]   (min, avg, max) = (336.379, 336.544, 337.088), stdev = 0.305
[info]   CI (99.9%): [335.368, 337.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1139.653 ±(99.9%) 26.828 B/op [Average]
[info]   (min, avg, max) = (1133.809, 1139.653, 1148.779), stdev = 6.967
[info]   CI (99.9%): [1112.826, 1166.481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.455 ±(99.9%) 3.917 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.455, 2.275), stdev = 1.017
[info]   CI (99.9%): [≈ 0, 4.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 22.73% complete, ETA 00:54:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 436602.366 ops/s
[info] # Warmup Iteration   2: 497464.846 ops/s
[info] # Warmup Iteration   3: 494654.412 ops/s
[info] Iteration   1: 471003.692 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 495305.328 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 495300.486 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 475109.548 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 495708.912 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   486485.593 ±(99.9%) 47538.821 ops/s [Average]
[info]   (min, avg, max) = (471003.692, 486485.593, 495708.912), stdev = 12345.681
[info]   CI (99.9%): [438946.773, 534024.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson
[info] # Run progress: 23.03% complete, ETA 00:54:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 149034.697 ops/s
[info] # Warmup Iteration   2: 267318.555 ops/s
[info] # Warmup Iteration   3: 266483.962 ops/s
[info] Iteration   1: 266922.017 ops/s
[info]                  ·gc.alloc.rate:            735.156 MB/sec
[info]                  ·gc.alloc.rate.norm:       4336.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.598 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3967.029 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 264989.495 ops/s
[info]                  ·gc.alloc.rate:                   729.955 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1007.740 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5986.075 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 7.913 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   3: 268513.893 ops/s
[info]                  ·gc.alloc.rate:            739.659 MB/sec
[info]                  ·gc.alloc.rate.norm:       4336.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.726 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3943.630 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 273208.444 ops/s
[info]                  ·gc.alloc.rate:            752.855 MB/sec
[info]                  ·gc.alloc.rate.norm:       4336.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.956 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3875.826 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 274349.364 ops/s
[info]                  ·gc.alloc.rate:                   756.034 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.316 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3878.803 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 26.750 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson":
[info]   269596.642 ±(99.9%) 15544.544 ops/s [Average]
[info]   (min, avg, max) = (264989.495, 269596.642, 274349.364), stdev = 4036.869
[info]   CI (99.9%): [254052.098, 285141.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   742.732 ±(99.9%) 43.460 MB/sec [Average]
[info]   (min, avg, max) = (729.955, 742.732, 756.034), stdev = 11.286
[info]   CI (99.9%): [699.272, 786.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4336.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4336.001, 4336.002, 4336.002), stdev = 0.001
[info]   CI (99.9%): [4336.001, 4336.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   740.467 ±(99.9%) 575.356 MB/sec [Average]
[info]   (min, avg, max) = (672.598, 740.467, 1007.740), stdev = 149.418
[info]   CI (99.9%): [165.111, 1315.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   4330.272 ±(99.9%) 3567.548 B/op [Average]
[info]   (min, avg, max) = (3875.826, 4330.272, 5986.075), stdev = 926.481
[info]   CI (99.9%): [762.724, 7897.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.199 ±(99.9%) 7.782 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.199, 4.664), stdev = 2.021
[info]   CI (99.9%): [≈ 0, 8.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   6.933 ±(99.9%) 44.653 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.933, 26.750), stdev = 11.596
[info]   CI (99.9%): [≈ 0, 51.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 9.200, 14.000), stdev = 2.950
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce
[info] # Run progress: 23.33% complete, ETA 00:54:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27539.728 ops/s
[info] # Warmup Iteration   2: 35462.656 ops/s
[info] # Warmup Iteration   3: 35987.209 ops/s
[info] Iteration   1: 36362.254 ops/s
[info]                  ·gc.alloc.rate:                                  1621.378 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70176.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.099 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.265 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1691.247 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       73200.029 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.329 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                144.095 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   2: 36340.263 ops/s
[info]                  ·gc.alloc.rate:                                  1620.096 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70176.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.264 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.332 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       58967.435 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   3: 36251.344 ops/s
[info]                  ·gc.alloc.rate:                                  1616.136 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70176.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.107 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.674 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       73890.222 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 36460.470 ops/s
[info]                  ·gc.alloc.rate:                                  1626.067 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70176.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.034 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.317 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       73466.742 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 36390.023 ops/s
[info]                  ·gc.alloc.rate:                                  1622.460 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70176.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.249 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.808 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       73608.036 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce":
[info]   36360.871 ±(99.9%) 293.209 ops/s [Average]
[info]   (min, avg, max) = (36251.344, 36360.871, 36460.470), stdev = 76.145
[info]   CI (99.9%): [36067.662, 36654.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate":
[info]   1621.227 ±(99.9%) 13.905 MB/sec [Average]
[info]   (min, avg, max) = (1616.136, 1621.227, 1626.067), stdev = 3.611
[info]   CI (99.9%): [1607.322, 1635.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   70176.012 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (70176.011, 70176.012, 70176.015), stdev = 0.002
[info]   CI (99.9%): [70176.006, 70176.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.023 ±(99.9%) 0.163 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.023, 0.099), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.984 ±(99.9%) 7.073 B/op [Average]
[info]   (min, avg, max) = (0.034, 0.984, 4.265), stdev = 1.837
[info]   CI (99.9%): [≈ 0, 8.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1631.676 ±(99.9%) 582.208 MB/sec [Average]
[info]   (min, avg, max) = (1361.332, 1631.676, 1702.317), stdev = 151.197
[info]   CI (99.9%): [1049.468, 2213.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   70626.493 ±(99.9%) 25115.327 B/op [Average]
[info]   (min, avg, max) = (58967.435, 70626.493, 73890.222), stdev = 6522.371
[info]   CI (99.9%): [45511.166, 95741.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.733 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.329), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   28.819 ±(99.9%) 248.139 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 28.819, 144.095), stdev = 64.441
[info]   CI (99.9%): [≈ 0, 276.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 11.000), stdev = 3.271
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala
[info] # Run progress: 23.64% complete, ETA 00:53:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 58199.451 ops/s
[info] # Warmup Iteration   2: 94243.570 ops/s
[info] # Warmup Iteration   3: 95754.101 ops/s
[info] Iteration   1: 98565.292 ops/s
[info]                  ·gc.alloc.rate:            1089.291 MB/sec
[info]                  ·gc.alloc.rate.norm:       17392.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.274 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16114.429 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 98828.644 ops/s
[info]                  ·gc.alloc.rate:                   1092.217 MB/sec
[info]                  ·gc.alloc.rate.norm:              17392.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.627 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        16060.945 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 10.608 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 97461.518 ops/s
[info]                  ·gc.alloc.rate:                                  1076.924 MB/sec
[info]                  ·gc.alloc.rate.norm:                             17392.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.091 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.465 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.120 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       16426.188 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                64.543 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 99553.299 ops/s
[info]                  ·gc.alloc.rate:                                  1099.993 MB/sec
[info]                  ·gc.alloc.rate.norm:                             17392.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.025 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.490 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       21526.534 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 99775.417 ops/s
[info]                  ·gc.alloc.rate:            1102.438 MB/sec
[info]                  ·gc.alloc.rate.norm:       17392.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.039 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16107.852 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala":
[info]   98836.834 ±(99.9%) 3528.941 ops/s [Average]
[info]   (min, avg, max) = (97461.518, 98836.834, 99775.417), stdev = 916.455
[info]   CI (99.9%): [95307.893, 102365.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1092.173 ±(99.9%) 38.859 MB/sec [Average]
[info]   (min, avg, max) = (1076.924, 1092.173, 1102.438), stdev = 10.092
[info]   CI (99.9%): [1053.314, 1131.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   17392.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (17392.004, 17392.004, 17392.004), stdev = 0.001
[info]   CI (99.9%): [17392.004, 17392.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.018 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.091), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.298 ±(99.9%) 2.512 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.298, 1.465), stdev = 0.652
[info]   CI (99.9%): [≈ 0, 2.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1083.510 ±(99.9%) 598.714 MB/sec [Average]
[info]   (min, avg, max) = (1008.627, 1083.510, 1361.490), stdev = 155.484
[info]   CI (99.9%): [484.796, 1682.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   17247.190 ±(99.9%) 9228.549 B/op [Average]
[info]   (min, avg, max) = (16060.945, 17247.190, 21526.534), stdev = 2396.625
[info]   CI (99.9%): [8018.640, 26475.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.997), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   15.030 ±(99.9%) 108.038 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15.030, 64.543), stdev = 28.057
[info]   CI (99.9%): [≈ 0, 123.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.600, 13.000), stdev = 4.775
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala
[info] # Run progress: 23.94% complete, ETA 00:53:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 140500.004 ops/s
[info] # Warmup Iteration   2: 146547.281 ops/s
[info] # Warmup Iteration   3: 146926.661 ops/s
[info] Iteration   1: 145111.295 ops/s
[info]                  ·gc.alloc.rate:            94.438 MB/sec
[info]                  ·gc.alloc.rate.norm:       1024.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      341.157 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3699.190 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 147239.592 ops/s
[info]                  ·gc.alloc.rate:      95.776 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 147189.651 ops/s
[info]                  ·gc.alloc.rate:      95.781 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 146357.761 ops/s
[info]                  ·gc.alloc.rate:            95.215 MB/sec
[info]                  ·gc.alloc.rate.norm:       1024.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.706 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3631.910 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 150004.415 ops/s
[info]                  ·gc.alloc.rate:      97.580 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala":
[info]   147180.543 ±(99.9%) 6924.893 ops/s [Average]
[info]   (min, avg, max) = (145111.295, 147180.543, 150004.415), stdev = 1798.373
[info]   CI (99.9%): [140255.650, 154105.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   95.758 ±(99.9%) 4.456 MB/sec [Average]
[info]   (min, avg, max) = (94.438, 95.758, 97.580), stdev = 1.157
[info]   CI (99.9%): [91.302, 100.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1024.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1024.003, 1024.003, 1024.003), stdev = 0.001
[info]   CI (99.9%): [1024.002, 1024.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   135.773 ±(99.9%) 715.905 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 135.773, 341.157), stdev = 185.918
[info]   CI (99.9%): [≈ 0, 851.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1466.220 ±(99.9%) 7731.498 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1466.220, 3699.190), stdev = 2007.845
[info]   CI (99.9%): [≈ 0, 9197.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.643
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson
[info] # Run progress: 24.24% complete, ETA 00:53:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17969.521 ops/s
[info] # Warmup Iteration   2: 34615.124 ops/s
[info] # Warmup Iteration   3: 34694.393 ops/s
[info] Iteration   1: 35521.712 ops/s
[info]                  ·gc.alloc.rate:                                  1897.219 MB/sec
[info]                  ·gc.alloc.rate.norm:                             84048.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.090 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.975 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2034.700 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       90138.517 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                177.089 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   2: 35858.895 ops/s
[info]                  ·gc.alloc.rate:                                  1915.050 MB/sec
[info]                  ·gc.alloc.rate.norm:                             84048.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.045 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.519 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       89642.372 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 36384.498 ops/s
[info]                  ·gc.alloc.rate:                                  1942.805 MB/sec
[info]                  ·gc.alloc.rate.norm:                             84048.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.186 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.761 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       73620.172 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 36261.232 ops/s
[info]                  ·gc.alloc.rate:                                  1936.801 MB/sec
[info]                  ·gc.alloc.rate.norm:                             84048.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.228 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.763 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       88646.263 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 36365.324 ops/s
[info]                  ·gc.alloc.rate:                                  1941.772 MB/sec
[info]                  ·gc.alloc.rate.norm:                             84048.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.010 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.434 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.149 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       88392.786 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson":
[info]   36078.332 ±(99.9%) 1450.438 ops/s [Average]
[info]   (min, avg, max) = (35521.712, 36078.332, 36384.498), stdev = 376.674
[info]   CI (99.9%): [34627.894, 37528.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1926.729 ±(99.9%) 76.854 MB/sec [Average]
[info]   (min, avg, max) = (1897.219, 1926.729, 1942.805), stdev = 19.959
[info]   CI (99.9%): [1849.875, 2003.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   84048.012 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (84048.011, 84048.012, 84048.015), stdev = 0.002
[info]   CI (99.9%): [84048.006, 84048.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.022 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.022, 0.090), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.973 ±(99.9%) 6.483 B/op [Average]
[info]   (min, avg, max) = (0.045, 0.973, 3.975), stdev = 1.684
[info]   CI (99.9%): [≈ 0, 7.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1972.779 ±(99.9%) 583.530 MB/sec [Average]
[info]   (min, avg, max) = (1701.761, 1972.779, 2042.763), stdev = 151.541
[info]   CI (99.9%): [1389.249, 2556.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   86088.022 ±(99.9%) 26978.133 B/op [Average]
[info]   (min, avg, max) = (73620.172, 86088.022, 90138.517), stdev = 7006.135
[info]   CI (99.9%): [59109.889, 113066.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.884 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   35.418 ±(99.9%) 304.959 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 35.418, 177.089), stdev = 79.197
[info]   CI (99.9%): [≈ 0, 340.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 12.000), stdev = 3.271
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce
[info] # Run progress: 24.55% complete, ETA 00:53:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 71950.643 ops/s
[info] # Warmup Iteration   2: 89983.094 ops/s
[info] # Warmup Iteration   3: 91473.947 ops/s
[info] Iteration   1: 91165.202 ops/s
[info]                  ·gc.alloc.rate:            440.336 MB/sec
[info]                  ·gc.alloc.rate.norm:       7600.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.320 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11638.450 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 91563.066 ops/s
[info]                  ·gc.alloc.rate:            442.049 MB/sec
[info]                  ·gc.alloc.rate.norm:       7600.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.000 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5793.933 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 91398.046 ops/s
[info]                  ·gc.alloc.rate:            441.454 MB/sec
[info]                  ·gc.alloc.rate.norm:       7600.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.150 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5804.328 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 91540.734 ops/s
[info]                  ·gc.alloc.rate:            442.006 MB/sec
[info]                  ·gc.alloc.rate.norm:       7600.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.037 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5795.136 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 90714.897 ops/s
[info]                  ·gc.alloc.rate:            438.014 MB/sec
[info]                  ·gc.alloc.rate.norm:       7600.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.068 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11695.789 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce":
[info]   91276.389 ±(99.9%) 1353.897 ops/s [Average]
[info]   (min, avg, max) = (90714.897, 91276.389, 91563.066), stdev = 351.603
[info]   CI (99.9%): [89922.492, 92630.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate":
[info]   440.772 ±(99.9%) 6.505 MB/sec [Average]
[info]   (min, avg, max) = (438.014, 440.772, 442.049), stdev = 1.689
[info]   CI (99.9%): [434.267, 447.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   7600.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7600.004, 7600.005, 7600.005), stdev = 0.001
[info]   CI (99.9%): [7600.004, 7600.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   471.915 ±(99.9%) 711.038 MB/sec [Average]
[info]   (min, avg, max) = (337.000, 471.915, 674.320), stdev = 184.654
[info]   CI (99.9%): [≈ 0, 1182.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   8145.527 ±(99.9%) 12379.148 B/op [Average]
[info]   (min, avg, max) = (5793.933, 8145.527, 11695.789), stdev = 3214.825
[info]   CI (99.9%): [≈ 0, 20524.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 7.000), stdev = 2.191
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala
[info] # Run progress: 24.85% complete, ETA 00:53:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 66763.925 ops/s
[info] # Warmup Iteration   2: 100137.070 ops/s
[info] # Warmup Iteration   3: 100601.877 ops/s
[info] Iteration   1: 97369.440 ops/s
[info]                  ·gc.alloc.rate:            321.660 MB/sec
[info]                  ·gc.alloc.rate.norm:       5200.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.350 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5437.499 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 98836.209 ops/s
[info]                  ·gc.alloc.rate:            326.573 MB/sec
[info]                  ·gc.alloc.rate.norm:       5200.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.421 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5356.805 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 100528.750 ops/s
[info]                  ·gc.alloc.rate:            332.086 MB/sec
[info]                  ·gc.alloc.rate.norm:       5200.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.346 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5266.711 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 99564.701 ops/s
[info]                  ·gc.alloc.rate:            328.898 MB/sec
[info]                  ·gc.alloc.rate.norm:       5200.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.342 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5317.696 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 97046.694 ops/s
[info]                  ·gc.alloc.rate:            320.566 MB/sec
[info]                  ·gc.alloc.rate.norm:       5200.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.326 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5455.650 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala":
[info]   98669.159 ±(99.9%) 5649.317 ops/s [Average]
[info]   (min, avg, max) = (97046.694, 98669.159, 100528.750), stdev = 1467.110
[info]   CI (99.9%): [93019.842, 104318.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   325.957 ±(99.9%) 18.679 MB/sec [Average]
[info]   (min, avg, max) = (320.566, 325.957, 332.086), stdev = 4.851
[info]   CI (99.9%): [307.278, 344.635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   5200.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5200.004, 5200.004, 5200.005), stdev = 0.001
[info]   CI (99.9%): [5200.004, 5200.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   336.357 ±(99.9%) 0.141 MB/sec [Average]
[info]   (min, avg, max) = (336.326, 336.357, 336.421), stdev = 0.037
[info]   CI (99.9%): [336.216, 336.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   5366.872 ±(99.9%) 306.977 B/op [Average]
[info]   (min, avg, max) = (5266.711, 5366.872, 5455.650), stdev = 79.721
[info]   CI (99.9%): [5059.895, 5673.849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala
[info] # Run progress: 25.15% complete, ETA 00:52:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 103655.957 ops/s
[info] # Warmup Iteration   2: 110908.171 ops/s
[info] # Warmup Iteration   3: 114358.940 ops/s
[info] Iteration   1: 114537.013 ops/s
[info]                  ·gc.alloc.rate:            350.462 MB/sec
[info]                  ·gc.alloc.rate.norm:       4816.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.378 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4622.463 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 114346.840 ops/s
[info]                  ·gc.alloc.rate:            349.825 MB/sec
[info]                  ·gc.alloc.rate.norm:       4816.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.322 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4630.102 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 114531.598 ops/s
[info]                  ·gc.alloc.rate:            350.432 MB/sec
[info]                  ·gc.alloc.rate.norm:       4816.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.373 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4622.786 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 113961.714 ops/s
[info]                  ·gc.alloc.rate:            348.686 MB/sec
[info]                  ·gc.alloc.rate.norm:       4816.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.382 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4646.067 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   5: 114382.984 ops/s
[info]                  ·gc.alloc.rate:                   349.980 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             336.382 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4628.888 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 9.166 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala":
[info]   114352.030 ±(99.9%) 902.635 ops/s [Average]
[info]   (min, avg, max) = (113961.714, 114352.030, 114537.013), stdev = 234.412
[info]   CI (99.9%): [113449.395, 115254.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   349.877 ±(99.9%) 2.778 MB/sec [Average]
[info]   (min, avg, max) = (348.686, 349.877, 350.462), stdev = 0.721
[info]   CI (99.9%): [347.099, 352.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   4816.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4816.004, 4816.004, 4816.004), stdev = 0.001
[info]   CI (99.9%): [4816.003, 4816.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   336.367 ±(99.9%) 0.100 MB/sec [Average]
[info]   (min, avg, max) = (336.322, 336.367, 336.382), stdev = 0.026
[info]   CI (99.9%): [336.268, 336.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   4630.061 ±(99.9%) 36.946 B/op [Average]
[info]   (min, avg, max) = (4622.463, 4630.061, 4646.067), stdev = 9.595
[info]   CI (99.9%): [4593.115, 4667.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.833 ±(99.9%) 15.785 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.833, 9.166), stdev = 4.099
[info]   CI (99.9%): [≈ 0, 17.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 25.45% complete, ETA 00:52:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 105013.958 ops/s
[info] # Warmup Iteration   2: 115057.160 ops/s
[info] # Warmup Iteration   3: 117370.527 ops/s
[info] Iteration   1: 114056.176 ops/s
[info]                  ·gc.alloc.rate:                   259.147 MB/sec
[info]                  ·gc.alloc.rate.norm:              3576.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             336.395 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4641.954 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 9.192 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 117850.741 ops/s
[info]                  ·gc.alloc.rate:      267.750 MB/sec
[info]                  ·gc.alloc.rate.norm: 3576.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 117029.511 ops/s
[info]                  ·gc.alloc.rate:            265.898 MB/sec
[info]                  ·gc.alloc.rate.norm:       3576.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.054 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4532.969 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 115792.133 ops/s
[info]                  ·gc.alloc.rate:            263.095 MB/sec
[info]                  ·gc.alloc.rate.norm:       3576.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.063 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4581.386 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   5: 117373.437 ops/s
[info]                  ·gc.alloc.rate:            266.685 MB/sec
[info]                  ·gc.alloc.rate.norm:       3576.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.050 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4519.532 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc":
[info]   116420.400 ±(99.9%) 5874.424 ops/s [Average]
[info]   (min, avg, max) = (114056.176, 116420.400, 117850.741), stdev = 1525.569
[info]   CI (99.9%): [110545.976, 122294.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   264.515 ±(99.9%) 13.327 MB/sec [Average]
[info]   (min, avg, max) = (259.147, 264.515, 267.750), stdev = 3.461
[info]   CI (99.9%): [251.188, 277.842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   3576.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3576.003, 3576.004, 3576.004), stdev = 0.001
[info]   CI (99.9%): [3576.003, 3576.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   269.513 ±(99.9%) 580.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.513, 337.063), stdev = 150.662
[info]   CI (99.9%): [≈ 0, 849.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   3655.168 ±(99.9%) 7870.197 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3655.168, 4641.954), stdev = 2043.865
[info]   CI (99.9%): [≈ 0, 11525.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm":
[info]   1.838 ±(99.9%) 15.829 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.838, 9.192), stdev = 4.111
[info]   CI (99.9%): [≈ 0, 17.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 4.000), stdev = 1.517
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce
[info] # Run progress: 25.76% complete, ETA 00:52:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5801.202 ops/s
[info] # Warmup Iteration   2: 8425.343 ops/s
[info] # Warmup Iteration   3: 8592.250 ops/s
[info] Iteration   1: 8540.759 ops/s
[info]                  ·gc.alloc.rate:                   1413.548 MB/sec
[info]                  ·gc.alloc.rate.norm:              260512.048 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1349.310 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        248673.180 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 245.482 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 8456.842 ops/s
[info]                  ·gc.alloc.rate:                                  1399.823 MB/sec
[info]                  ·gc.alloc.rate.norm:                             260512.052 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.030 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.593 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1358.803 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       252878.004 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     2.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                495.839 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 8543.104 ops/s
[info]                  ·gc.alloc.rate:                                  1413.934 MB/sec
[info]                  ·gc.alloc.rate.norm:                             260512.048 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.758 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.351 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       250823.797 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 8480.922 ops/s
[info]                  ·gc.alloc.rate:            1403.648 MB/sec
[info]                  ·gc.alloc.rate.norm:       260512.052 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.325 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 252657.002 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 8569.274 ops/s
[info]                  ·gc.alloc.rate:            1418.754 MB/sec
[info]                  ·gc.alloc.rate.norm:       260519.507 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1702.261 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 312578.658 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce":
[info]   8518.180 ±(99.9%) 181.555 ops/s [Average]
[info]   (min, avg, max) = (8456.842, 8518.180, 8569.274), stdev = 47.149
[info]   CI (99.9%): [8336.626, 8699.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate":
[info]   1409.942 ±(99.9%) 30.356 MB/sec [Average]
[info]   (min, avg, max) = (1399.823, 1409.942, 1418.754), stdev = 7.883
[info]   CI (99.9%): [1379.585, 1440.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   260513.541 ±(99.9%) 12.842 B/op [Average]
[info]   (min, avg, max) = (260512.048, 260513.541, 260519.507), stdev = 3.335
[info]   CI (99.9%): [260500.699, 260526.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.007 ±(99.9%) 0.050 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.030), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.270 ±(99.9%) 9.391 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.270, 5.593), stdev = 2.439
[info]   CI (99.9%): [≈ 0, 10.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1426.610 ±(99.9%) 593.666 MB/sec [Average]
[info]   (min, avg, max) = (1349.310, 1426.610, 1702.261), stdev = 154.173
[info]   CI (99.9%): [832.944, 2020.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   263522.128 ±(99.9%) 105798.682 B/op [Average]
[info]   (min, avg, max) = (248673.180, 263522.128, 312578.658), stdev = 27475.582
[info]   CI (99.9%): [157723.446, 369320.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 4.588 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 2.664), stdev = 1.192
[info]   CI (99.9%): [≈ 0, 5.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   148.264 ±(99.9%) 852.825 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 148.264, 495.839), stdev = 221.476
[info]   CI (99.9%): [≈ 0, 1001.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 12.000), stdev = 3.834
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala
[info] # Run progress: 26.06% complete, ETA 00:52:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4388.670 ops/s
[info] # Warmup Iteration   2: 8448.121 ops/s
[info] # Warmup Iteration   3: 8600.099 ops/s
[info] Iteration   1: 8595.808 ops/s
[info]                  ·gc.alloc.rate:            1339.068 MB/sec
[info]                  ·gc.alloc.rate.norm:       245184.047 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.283 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 246322.075 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   2: 8768.785 ops/s
[info]                  ·gc.alloc.rate:                                  1366.104 MB/sec
[info]                  ·gc.alloc.rate.norm:                             245184.050 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.100 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 17.936 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1353.524 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       242926.283 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                717.302 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   3: 8848.899 ops/s
[info]                  ·gc.alloc.rate:                                  1378.355 MB/sec
[info]                  ·gc.alloc.rate.norm:                             245184.050 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.017 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.042 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.639 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       302690.281 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 8870.230 ops/s
[info]                  ·gc.alloc.rate:            1381.635 MB/sec
[info]                  ·gc.alloc.rate.norm:       245184.046 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.321 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 241579.051 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 8847.174 ops/s
[info]                  ·gc.alloc.rate:            1378.530 MB/sec
[info]                  ·gc.alloc.rate.norm:       245198.535 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.711 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 242206.955 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala":
[info]   8786.179 ±(99.9%) 435.915 ops/s [Average]
[info]   (min, avg, max) = (8595.808, 8786.179, 8870.230), stdev = 113.206
[info]   CI (99.9%): [8350.264, 9222.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1368.738 ±(99.9%) 67.851 MB/sec [Average]
[info]   (min, avg, max) = (1339.068, 1368.738, 1381.635), stdev = 17.621
[info]   CI (99.9%): [1300.887, 1436.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   245186.946 ±(99.9%) 24.948 B/op [Average]
[info]   (min, avg, max) = (245184.046, 245186.946, 245198.535), stdev = 6.479
[info]   CI (99.9%): [245161.998, 245211.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.023 ±(99.9%) 0.167 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.100), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   4.196 ±(99.9%) 30.010 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.196, 17.936), stdev = 7.793
[info]   CI (99.9%): [≈ 0, 34.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1424.695 ±(99.9%) 596.703 MB/sec [Average]
[info]   (min, avg, max) = (1345.283, 1424.695, 1701.639), stdev = 154.962
[info]   CI (99.9%): [827.993, 2021.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   255144.929 ±(99.9%) 102587.738 B/op [Average]
[info]   (min, avg, max) = (241579.051, 255144.929, 302690.281), stdev = 26641.710
[info]   CI (99.9%): [152557.191, 357732.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   143.460 ±(99.9%) 1235.237 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 143.460, 717.302), stdev = 320.787
[info]   CI (99.9%): [≈ 0, 1378.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.200, 18.000), stdev = 6.301
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala
[info] # Run progress: 26.36% complete, ETA 00:51:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 73011.200 ops/s
[info] # Warmup Iteration   2: 77010.140 ops/s
[info] # Warmup Iteration   3: 79817.483 ops/s
[info] Iteration   1: 78763.878 ops/s
[info]                  ·gc.alloc.rate:            204.973 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      338.377 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6761.829 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 79662.420 ops/s
[info]                  ·gc.alloc.rate:            207.356 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.777 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6672.290 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   3: 79995.597 ops/s
[info]                  ·gc.alloc.rate:      208.196 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 79785.562 ops/s
[info]                  ·gc.alloc.rate:            207.641 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.725 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6662.089 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 80022.662 ops/s
[info]                  ·gc.alloc.rate:      208.230 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala":
[info]   79646.024 ±(99.9%) 1984.089 ops/s [Average]
[info]   (min, avg, max) = (78763.878, 79646.024, 80022.662), stdev = 515.262
[info]   CI (99.9%): [77661.935, 81630.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   207.279 ±(99.9%) 5.166 MB/sec [Average]
[info]   (min, avg, max) = (204.973, 207.279, 208.230), stdev = 1.342
[info]   CI (99.9%): [202.113, 212.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.005, 4096.005, 4096.005), stdev = 0.001
[info]   CI (99.9%): [4096.005, 4096.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   202.776 ±(99.9%) 712.786 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 202.776, 338.377), stdev = 185.108
[info]   CI (99.9%): [≈ 0, 915.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   4019.242 ±(99.9%) 14128.990 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4019.242, 6761.829), stdev = 3669.254
[info]   CI (99.9%): [≈ 0, 18148.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson
[info] # Run progress: 26.67% complete, ETA 00:51:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2215.051 ops/s
[info] # Warmup Iteration   2: 4583.634 ops/s
[info] # Warmup Iteration   3: 4703.884 ops/s
[info] Iteration   1: 4629.864 ops/s
[info]                  ·gc.alloc.rate:            1228.404 MB/sec
[info]                  ·gc.alloc.rate.norm:       417664.095 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.691 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 342960.415 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 4614.012 ops/s
[info]                  ·gc.alloc.rate:                                  1224.692 MB/sec
[info]                  ·gc.alloc.rate.norm:                             417664.088 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.064 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 21.689 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1349.794 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       460328.272 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1363.262 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        14.000 ms
[info] Iteration   3: 4771.341 ops/s
[info]                  ·gc.alloc.rate:                                  1266.071 MB/sec
[info]                  ·gc.alloc.rate.norm:                             417664.092 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.022 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 7.298 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.194 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       449044.489 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 4757.403 ops/s
[info]                  ·gc.alloc.rate:            1262.324 MB/sec
[info]                  ·gc.alloc.rate.norm:       417664.086 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.869 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 337774.114 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 4735.662 ops/s
[info]                  ·gc.alloc.rate:            1256.631 MB/sec
[info]                  ·gc.alloc.rate.norm:       417664.086 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.314 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 452457.113 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson":
[info]   4701.656 ±(99.9%) 285.283 ops/s [Average]
[info]   (min, avg, max) = (4614.012, 4701.656, 4771.341), stdev = 74.087
[info]   CI (99.9%): [4416.373, 4986.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1247.624 ±(99.9%) 75.377 MB/sec [Average]
[info]   (min, avg, max) = (1224.692, 1247.624, 1266.071), stdev = 19.575
[info]   CI (99.9%): [1172.247, 1323.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   417664.089 ±(99.9%) 0.015 B/op [Average]
[info]   (min, avg, max) = (417664.086, 417664.089, 417664.095), stdev = 0.004
[info]   CI (99.9%): [417664.074, 417664.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.017 ±(99.9%) 0.107 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.064), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   5.797 ±(99.9%) 36.308 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.797, 21.689), stdev = 9.429
[info]   CI (99.9%): [≈ 0, 42.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1220.372 ±(99.9%) 723.101 MB/sec [Average]
[info]   (min, avg, max) = (1008.691, 1220.372, 1361.314), stdev = 187.787
[info]   CI (99.9%): [497.271, 1943.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   408512.880 ±(99.9%) 240162.909 B/op [Average]
[info]   (min, avg, max) = (337774.114, 408512.880, 460328.272), stdev = 62369.545
[info]   CI (99.9%): [168349.971, 648675.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.884 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   272.652 ±(99.9%) 2347.620 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 272.652, 1363.262), stdev = 609.669
[info]   CI (99.9%): [≈ 0, 2620.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.800, 14.000), stdev = 5.310
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce
[info] # Run progress: 26.97% complete, ETA 00:51:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15876.739 ops/s
[info] # Warmup Iteration   2: 23991.185 ops/s
[info] # Warmup Iteration   3: 24121.445 ops/s
[info] Iteration   1: 23775.534 ops/s
[info]                  ·gc.alloc.rate:            1231.696 MB/sec
[info]                  ·gc.alloc.rate.norm:       81552.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.653 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 89295.866 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 23716.187 ops/s
[info]                  ·gc.alloc.rate:                                  1228.601 MB/sec
[info]                  ·gc.alloc.rate.norm:                             81548.345 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.052 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.426 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1351.278 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       89691.021 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                221.023 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   3: 24462.038 ops/s
[info]                  ·gc.alloc.rate:                                  1267.292 MB/sec
[info]                  ·gc.alloc.rate.norm:                             81528.018 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.033 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.125 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.664 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       87599.188 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 24521.222 ops/s
[info]                  ·gc.alloc.rate:                                  1270.151 MB/sec
[info]                  ·gc.alloc.rate.norm:                             81528.017 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.066 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.090 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       65541.344 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 24529.102 ops/s
[info]                  ·gc.alloc.rate:            1270.944 MB/sec
[info]                  ·gc.alloc.rate.norm:       81528.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.858 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 87359.963 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce":
[info]   24200.817 ±(99.9%) 1604.382 ops/s [Average]
[info]   (min, avg, max) = (23716.187, 24200.817, 24529.102), stdev = 416.653
[info]   CI (99.9%): [22596.435, 25805.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1253.737 ±(99.9%) 83.187 MB/sec [Average]
[info]   (min, avg, max) = (1228.601, 1253.737, 1270.944), stdev = 21.603
[info]   CI (99.9%): [1170.550, 1336.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   81536.883 ±(99.9%) 47.012 B/op [Average]
[info]   (min, avg, max) = (81528.017, 81536.883, 81552.017), stdev = 12.209
[info]   CI (99.9%): [81489.870, 81583.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.017 ±(99.9%) 0.092 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.052), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.124 ±(99.9%) 6.073 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.124, 3.426), stdev = 1.577
[info]   CI (99.9%): [≈ 0, 7.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1288.909 ±(99.9%) 576.959 MB/sec [Average]
[info]   (min, avg, max) = (1021.090, 1288.909, 1361.858), stdev = 149.834
[info]   CI (99.9%): [711.950, 1865.867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   83897.477 ±(99.9%) 39707.722 B/op [Average]
[info]   (min, avg, max) = (65541.344, 83897.477, 89691.021), stdev = 10311.969
[info]   CI (99.9%): [44189.755, 123605.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   44.205 ±(99.9%) 380.614 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 44.205, 221.023), stdev = 98.844
[info]   CI (99.9%): [≈ 0, 424.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.600, 13.000), stdev = 5.413
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala
[info] # Run progress: 27.27% complete, ETA 00:51:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13334.410 ops/s
[info] # Warmup Iteration   2: 24111.511 ops/s
[info] # Warmup Iteration   3: 24038.892 ops/s
[info] Iteration   1: 24117.297 ops/s
[info]                  ·gc.alloc.rate:            1225.656 MB/sec
[info]                  ·gc.alloc.rate.norm:       79984.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.561 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 87808.785 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 23879.972 ops/s
[info]                  ·gc.alloc.rate:                                  1213.517 MB/sec
[info]                  ·gc.alloc.rate.norm:                             79984.024 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.061 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.046 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.087 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       66773.460 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                263.406 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   3: 24093.610 ops/s
[info]                  ·gc.alloc.rate:            1224.650 MB/sec
[info]                  ·gc.alloc.rate.norm:       79984.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.785 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 88940.549 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 23900.000 ops/s
[info]                  ·gc.alloc.rate:                                  1214.338 MB/sec
[info]                  ·gc.alloc.rate.norm:                             79984.017 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.154 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.958 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       67246.779 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 24120.396 ops/s
[info]                  ·gc.alloc.rate:            1225.925 MB/sec
[info]                  ·gc.alloc.rate.norm:       79984.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.734 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 88844.692 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala":
[info]   24022.255 ±(99.9%) 467.449 ops/s [Average]
[info]   (min, avg, max) = (23879.972, 24022.255, 24120.396), stdev = 121.395
[info]   CI (99.9%): [23554.806, 24489.704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1220.817 ±(99.9%) 24.312 MB/sec [Average]
[info]   (min, avg, max) = (1213.517, 1220.817, 1225.925), stdev = 6.314
[info]   CI (99.9%): [1196.505, 1245.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   79984.019 ±(99.9%) 0.012 B/op [Average]
[info]   (min, avg, max) = (79984.017, 79984.019, 79984.024), stdev = 0.003
[info]   CI (99.9%): [79984.007, 79984.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.013 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.061), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.840 ±(99.9%) 6.906 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.840, 4.046), stdev = 1.794
[info]   CI (99.9%): [≈ 0, 7.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1220.625 ±(99.9%) 716.224 MB/sec [Average]
[info]   (min, avg, max) = (1013.087, 1220.625, 1361.785), stdev = 186.001
[info]   CI (99.9%): [504.401, 1936.849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   79922.853 ±(99.9%) 45426.802 B/op [Average]
[info]   (min, avg, max) = (66773.460, 79922.853, 88940.549), stdev = 11797.196
[info]   CI (99.9%): [34496.051, 125349.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   52.681 ±(99.9%) 453.601 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 52.681, 263.406), stdev = 117.799
[info]   CI (99.9%): [≈ 0, 506.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.000, 16.000), stdev = 5.657
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala
[info] # Run progress: 27.58% complete, ETA 00:51:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 295070.806 ops/s
[info] # Warmup Iteration   2: 324731.208 ops/s
[info] # Warmup Iteration   3: 343721.222 ops/s
[info] Iteration   1: 343480.495 ops/s
[info]                  ·gc.alloc.rate:                   757.828 MB/sec
[info]                  ·gc.alloc.rate.norm:              3472.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.881 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3082.817 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.052 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 344617.919 ops/s
[info]                  ·gc.alloc.rate:            760.229 MB/sec
[info]                  ·gc.alloc.rate.norm:       3472.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.103 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3078.661 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 343107.595 ops/s
[info]                  ·gc.alloc.rate:                   756.945 MB/sec
[info]                  ·gc.alloc.rate.norm:              3472.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.931 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4632.416 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.056 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 343478.949 ops/s
[info]                  ·gc.alloc.rate:            757.720 MB/sec
[info]                  ·gc.alloc.rate.norm:       3472.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.807 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3082.916 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 337979.577 ops/s
[info]                  ·gc.alloc.rate:                                  745.685 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3472.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.033 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.154 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            676.891 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3151.690 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                18.612 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala":
[info]   342532.907 ±(99.9%) 10041.855 ops/s [Average]
[info]   (min, avg, max) = (337979.577, 342532.907, 344617.919), stdev = 2607.838
[info]   CI (99.9%): [332491.052, 352574.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   755.681 ±(99.9%) 22.034 MB/sec [Average]
[info]   (min, avg, max) = (745.685, 755.681, 760.229), stdev = 5.722
[info]   CI (99.9%): [733.648, 777.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3472.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3472.001, 3472.001, 3472.001), stdev = 0.001
[info]   CI (99.9%): [3472.001, 3472.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.007 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.033), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.031 ±(99.9%) 0.265 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.031, 0.154), stdev = 0.069
[info]   CI (99.9%): [≈ 0, 0.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   741.323 ±(99.9%) 578.235 MB/sec [Average]
[info]   (min, avg, max) = (672.807, 741.323, 1009.931), stdev = 150.166
[info]   CI (99.9%): [163.088, 1319.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   3405.700 ±(99.9%) 2643.201 B/op [Average]
[info]   (min, avg, max) = (3078.661, 3405.700, 4632.416), stdev = 686.431
[info]   CI (99.9%): [762.499, 6048.901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 6.439 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 3.997), stdev = 1.672
[info]   CI (99.9%): [≈ 0, 7.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   4.944 ±(99.9%) 30.004 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.944, 18.612), stdev = 7.792
[info]   CI (99.9%): [≈ 0, 34.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 9.000), stdev = 1.789
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 27.88% complete, ETA 00:50:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 348789.019 ops/s
[info] # Warmup Iteration   2: 380357.818 ops/s
[info] # Warmup Iteration   3: 381500.198 ops/s
[info] Iteration   1: 381159.069 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 360007.875 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 380137.096 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 344836.027 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 380297.414 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc":
[info]   369287.496 ±(99.9%) 62797.736 ops/s [Average]
[info]   (min, avg, max) = (344836.027, 369287.496, 381159.069), stdev = 16308.373
[info]   CI (99.9%): [306489.760, 432085.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson
[info] # Run progress: 28.18% complete, ETA 00:50:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17154.524 ops/s
[info] # Warmup Iteration   2: 25132.241 ops/s
[info] # Warmup Iteration   3: 26040.834 ops/s
[info] Iteration   1: 25878.376 ops/s
[info]                  ·gc.alloc.rate:            1361.313 MB/sec
[info]                  ·gc.alloc.rate.norm:       82792.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.570 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 81834.545 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 26128.185 ops/s
[info]                  ·gc.alloc.rate:                                  1374.277 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82792.021 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.106 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 6.385 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1353.381 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       81533.174 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                240.748 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   3: 26161.087 ops/s
[info]                  ·gc.alloc.rate:                                  1376.105 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82792.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.024 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.474 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.832 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       102389.042 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   4: 25769.059 ops/s
[info]                  ·gc.alloc.rate:            1355.363 MB/sec
[info]                  ·gc.alloc.rate.norm:       82792.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.338 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 83157.032 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 25915.453 ops/s
[info]                  ·gc.alloc.rate:                                  1363.284 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82792.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.494 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.634 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       82691.822 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson":
[info]   25970.432 ±(99.9%) 648.017 ops/s [Average]
[info]   (min, avg, max) = (25769.059, 25970.432, 26161.087), stdev = 168.288
[info]   CI (99.9%): [25322.416, 26618.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1366.068 ±(99.9%) 34.067 MB/sec [Average]
[info]   (min, avg, max) = (1355.363, 1366.068, 1376.105), stdev = 8.847
[info]   CI (99.9%): [1332.001, 1400.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   82792.017 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (82792.016, 82792.017, 82792.021), stdev = 0.002
[info]   CI (99.9%): [82792.008, 82792.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.028 ±(99.9%) 0.173 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.106), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.670 ±(99.9%) 10.409 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.670, 6.385), stdev = 2.703
[info]   CI (99.9%): [≈ 0, 12.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1424.751 ±(99.9%) 596.980 MB/sec [Average]
[info]   (min, avg, max) = (1345.570, 1424.751, 1701.832), stdev = 155.034
[info]   CI (99.9%): [827.771, 2021.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   86321.123 ±(99.9%) 34677.992 B/op [Average]
[info]   (min, avg, max) = (81533.174, 86321.123, 102389.042), stdev = 9005.764
[info]   CI (99.9%): [51643.131, 120999.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   48.150 ±(99.9%) 414.582 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 48.150, 240.748), stdev = 107.666
[info]   CI (99.9%): [≈ 0, 462.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.200, 16.000), stdev = 5.215
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce
[info] # Run progress: 28.48% complete, ETA 00:50:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 104355.079 ops/s
[info] # Warmup Iteration   2: 129048.447 ops/s
[info] # Warmup Iteration   3: 129965.681 ops/s
[info] Iteration   1: 131988.452 ops/s
[info]                  ·gc.alloc.rate:                                  2147.777 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25616.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.071 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.852 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.018 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       24354.638 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   2: 130328.897 ops/s
[info]                  ·gc.alloc.rate:                                  2121.113 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25616.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.061 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.723 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       28775.385 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   3: 129570.126 ops/s
[info]                  ·gc.alloc.rate:                                  2108.888 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25616.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.091 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.394 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       24808.312 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 129015.291 ops/s
[info]                  ·gc.alloc.rate:                                  2099.600 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25616.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.091 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.112 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       24914.630 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 131140.307 ops/s
[info]                  ·gc.alloc.rate:                                  2134.226 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25616.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.041 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.144 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       24510.796 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce":
[info]   130408.615 ±(99.9%) 4589.391 ops/s [Average]
[info]   (min, avg, max) = (129015.291, 130408.615, 131988.452), stdev = 1191.850
[info]   CI (99.9%): [125819.224, 134998.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   2122.321 ±(99.9%) 74.266 MB/sec [Average]
[info]   (min, avg, max) = (2099.600, 2122.321, 2147.777), stdev = 19.287
[info]   CI (99.9%): [2048.055, 2196.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   25616.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (25616.003, 25616.003, 25616.003), stdev = 0.001
[info]   CI (99.9%): [25616.003, 25616.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.019 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (0.003, 0.019, 0.071), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.227 ±(99.9%) 1.348 B/op [Average]
[info]   (min, avg, max) = (0.041, 0.227, 0.852), stdev = 0.350
[info]   CI (99.9%): [≈ 0, 1.575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2110.278 ±(99.9%) 586.458 MB/sec [Average]
[info]   (min, avg, max) = (2042.018, 2110.278, 2382.723), stdev = 152.301
[info]   CI (99.9%): [1523.820, 2696.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   25472.752 ±(99.9%) 7161.552 B/op [Average]
[info]   (min, avg, max) = (24354.638, 25472.752, 28775.385), stdev = 1859.832
[info]   CI (99.9%): [18311.200, 32634.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 9.000), stdev = 2.074
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala
[info] # Run progress: 28.79% complete, ETA 00:50:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 163871.330 ops/s
[info] # Warmup Iteration   2: 262478.015 ops/s
[info] # Warmup Iteration   3: 264063.836 ops/s
[info] Iteration   1: 262955.057 ops/s
[info]                  ·gc.alloc.rate:            376.900 MB/sec
[info]                  ·gc.alloc.rate.norm:       2256.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.766 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4026.958 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 262553.858 ops/s
[info]                  ·gc.alloc.rate:            376.296 MB/sec
[info]                  ·gc.alloc.rate.norm:       2256.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.350 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2016.515 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 262575.413 ops/s
[info]                  ·gc.alloc.rate:            376.370 MB/sec
[info]                  ·gc.alloc.rate.norm:       2256.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.390 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2016.354 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 262490.774 ops/s
[info]                  ·gc.alloc.rate:            376.355 MB/sec
[info]                  ·gc.alloc.rate.norm:       2256.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.485 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2017.007 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 262645.007 ops/s
[info]                  ·gc.alloc.rate:            376.433 MB/sec
[info]                  ·gc.alloc.rate.norm:       2256.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.356 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2015.817 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala":
[info]   262644.022 ±(99.9%) 702.321 ops/s [Average]
[info]   (min, avg, max) = (262490.774, 262644.022, 262955.057), stdev = 182.391
[info]   CI (99.9%): [261941.701, 263346.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   376.471 ±(99.9%) 0.943 MB/sec [Average]
[info]   (min, avg, max) = (376.296, 376.471, 376.900), stdev = 0.245
[info]   CI (99.9%): [375.528, 377.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2256.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2256.002, 2256.002, 2256.002), stdev = 0.001
[info]   CI (99.9%): [2256.001, 2256.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   403.669 ±(99.9%) 579.251 MB/sec [Average]
[info]   (min, avg, max) = (336.350, 403.669, 672.766), stdev = 150.430
[info]   CI (99.9%): [≈ 0, 982.920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   2418.530 ±(99.9%) 3462.262 B/op [Average]
[info]   (min, avg, max) = (2015.817, 2418.530, 4026.958), stdev = 899.139
[info]   CI (99.9%): [≈ 0, 5880.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 8.000), stdev = 1.789
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala
[info] # Run progress: 29.09% complete, ETA 00:50:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 542512.994 ops/s
[info] # Warmup Iteration   2: 573372.147 ops/s
[info] # Warmup Iteration   3: 580031.826 ops/s
[info] Iteration   1: 567715.053 ops/s
[info]                  ·gc.alloc.rate:            369.426 MB/sec
[info]                  ·gc.alloc.rate.norm:       1024.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.111 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 934.426 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 579422.907 ops/s
[info]                  ·gc.alloc.rate:            376.979 MB/sec
[info]                  ·gc.alloc.rate.norm:       1024.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.054 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 915.551 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   3: 580093.124 ops/s
[info]                  ·gc.alloc.rate:            377.528 MB/sec
[info]                  ·gc.alloc.rate.norm:       1024.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.157 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 914.499 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 580888.478 ops/s
[info]                  ·gc.alloc.rate:            377.933 MB/sec
[info]                  ·gc.alloc.rate.norm:       1024.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.056 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 913.246 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 570764.293 ops/s
[info]                  ·gc.alloc.rate:            371.267 MB/sec
[info]                  ·gc.alloc.rate.norm:       1024.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.993 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 929.468 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala":
[info]   575776.771 ±(99.9%) 23436.080 ops/s [Average]
[info]   (min, avg, max) = (567715.053, 575776.771, 580888.478), stdev = 6086.275
[info]   CI (99.9%): [552340.691, 599212.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   374.627 ±(99.9%) 15.308 MB/sec [Average]
[info]   (min, avg, max) = (369.426, 374.627, 377.933), stdev = 3.975
[info]   CI (99.9%): [359.319, 389.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1024.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1024.001, 1024.001, 1024.001), stdev = 0.001
[info]   CI (99.9%): [1024.001, 1024.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   337.074 ±(99.9%) 0.240 MB/sec [Average]
[info]   (min, avg, max) = (336.993, 337.074, 337.157), stdev = 0.062
[info]   CI (99.9%): [336.835, 337.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   921.438 ±(99.9%) 37.684 B/op [Average]
[info]   (min, avg, max) = (913.246, 921.438, 934.426), stdev = 9.786
[info]   CI (99.9%): [883.754, 959.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson
[info] # Run progress: 29.39% complete, ETA 00:49:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 35255.495 ops/s
[info] # Warmup Iteration   2: 62205.525 ops/s
[info] # Warmup Iteration   3: 63216.810 ops/s
[info] Iteration   1: 64384.171 ops/s
[info]                  ·gc.alloc.rate:                                  2818.660 MB/sec
[info]                  ·gc.alloc.rate.norm:                             68920.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.187 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3062.824 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       74890.144 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   2: 64951.914 ops/s
[info]                  ·gc.alloc.rate:                                  2844.822 MB/sec
[info]                  ·gc.alloc.rate.norm:                             68920.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.089 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.712 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       65985.941 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 63741.408 ops/s
[info]                  ·gc.alloc.rate:                                  2791.744 MB/sec
[info]                  ·gc.alloc.rate.norm:                             68920.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.012 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.291 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.667 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       67239.395 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 63313.634 ops/s
[info]                  ·gc.alloc.rate:                                  2772.693 MB/sec
[info]                  ·gc.alloc.rate.norm:                             68920.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.163 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.279 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       67691.728 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 63859.498 ops/s
[info]                  ·gc.alloc.rate:                                  2797.238 MB/sec
[info]                  ·gc.alloc.rate.norm:                             68920.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.014 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.348 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3064.436 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       75503.382 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson":
[info]   64050.125 ±(99.9%) 2434.504 ops/s [Average]
[info]   (min, avg, max) = (63313.634, 64050.125, 64951.914), stdev = 632.233
[info]   CI (99.9%): [61615.621, 66484.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2805.031 ±(99.9%) 106.365 MB/sec [Average]
[info]   (min, avg, max) = (2772.693, 2805.031, 2844.822), stdev = 27.623
[info]   CI (99.9%): [2698.666, 2911.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   68920.007 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (68920.006, 68920.007, 68920.007), stdev = 0.001
[info]   CI (99.9%): [68920.005, 68920.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.009 ±(99.9%) 0.016 MB/sec [Average]
[info]   (min, avg, max) = (0.004, 0.009, 0.014), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.216 ±(99.9%) 0.399 B/op [Average]
[info]   (min, avg, max) = (0.089, 0.216, 0.348), stdev = 0.104
[info]   CI (99.9%): [≈ 0, 0.615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2859.583 ±(99.9%) 717.256 MB/sec [Average]
[info]   (min, avg, max) = (2723.279, 2859.583, 3064.436), stdev = 186.269
[info]   CI (99.9%): [2142.328, 3576.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   70262.118 ±(99.9%) 17531.948 B/op [Average]
[info]   (min, avg, max) = (65985.941, 70262.118, 75503.382), stdev = 4552.991
[info]   CI (99.9%): [52730.170, 87794.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.count":
[info]   42.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.400, 9.000), stdev = 0.548
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.000, 8.000), stdev = 1.000
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce
[info] # Run progress: 29.70% complete, ETA 00:49:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 179377.103 ops/s
[info] # Warmup Iteration   2: 237695.330 ops/s
[info] # Warmup Iteration   3: 236300.641 ops/s
[info] Iteration   1: 237078.657 ops/s
[info]                  ·gc.alloc.rate:            1412.134 MB/sec
[info]                  ·gc.alloc.rate.norm:       9376.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.084 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8950.735 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 235475.980 ops/s
[info]                  ·gc.alloc.rate:                                  1402.477 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9376.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.070 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.471 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1357.968 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9078.445 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                22.262 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 237082.616 ops/s
[info]                  ·gc.alloc.rate:                                  1412.747 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9376.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.416 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11298.453 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 239944.837 ops/s
[info]                  ·gc.alloc.rate:                                  1429.884 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9376.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.036 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.020 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8931.005 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 240055.387 ops/s
[info]                  ·gc.alloc.rate:                                  1430.026 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9376.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.509 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8926.764 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce":
[info]   237927.495 ±(99.9%) 7711.358 ops/s [Average]
[info]   (min, avg, max) = (235475.980, 237927.495, 240055.387), stdev = 2002.615
[info]   CI (99.9%): [230216.137, 245638.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1417.454 ±(99.9%) 46.660 MB/sec [Average]
[info]   (min, avg, max) = (1402.477, 1417.454, 1430.026), stdev = 12.118
[info]   CI (99.9%): [1370.793, 1464.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   9376.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9376.002, 9376.002, 9376.002), stdev = 0.001
[info]   CI (99.9%): [9376.001, 9376.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.016 ±(99.9%) 0.118 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.070), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.106 ±(99.9%) 0.787 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.106, 0.471), stdev = 0.204
[info]   CI (99.9%): [≈ 0, 0.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1426.399 ±(99.9%) 594.536 MB/sec [Average]
[info]   (min, avg, max) = (1348.084, 1426.399, 1702.416), stdev = 154.399
[info]   CI (99.9%): [831.863, 2020.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   9437.080 ±(99.9%) 4013.912 B/op [Average]
[info]   (min, avg, max) = (8926.764, 9437.080, 11298.453), stdev = 1042.400
[info]   CI (99.9%): [5423.169, 13450.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   4.452 ±(99.9%) 38.337 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.452, 22.262), stdev = 9.956
[info]   CI (99.9%): [≈ 0, 42.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 13.000), stdev = 3.962
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala
[info] # Run progress: 30.00% complete, ETA 00:49:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 543046.240 ops/s
[info] # Warmup Iteration   2: 782020.666 ops/s
[info] # Warmup Iteration   3: 805431.221 ops/s
[info] Iteration   1: 791340.087 ops/s
[info]                  ·gc.alloc.rate:            623.349 MB/sec
[info]                  ·gc.alloc.rate.norm:       1240.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.315 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 669.017 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 795618.093 ops/s
[info]                  ·gc.alloc.rate:            626.709 MB/sec
[info]                  ·gc.alloc.rate.norm:       1240.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.651 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1330.901 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 802403.173 ops/s
[info]                  ·gc.alloc.rate:            632.088 MB/sec
[info]                  ·gc.alloc.rate.norm:       1240.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.689 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1319.649 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 803481.112 ops/s
[info]                  ·gc.alloc.rate:            632.954 MB/sec
[info]                  ·gc.alloc.rate.norm:       1240.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.708 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1317.880 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 806544.748 ops/s
[info]                  ·gc.alloc.rate:            635.332 MB/sec
[info]                  ·gc.alloc.rate.norm:       1240.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.669 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1312.871 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala":
[info]   799877.442 ±(99.9%) 23958.248 ops/s [Average]
[info]   (min, avg, max) = (791340.087, 799877.442, 806544.748), stdev = 6221.881
[info]   CI (99.9%): [775919.195, 823835.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   630.087 ±(99.9%) 18.918 MB/sec [Average]
[info]   (min, avg, max) = (623.349, 630.087, 635.332), stdev = 4.913
[info]   CI (99.9%): [611.169, 649.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1240.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1240.001, 1240.001, 1240.001), stdev = 0.001
[info]   CI (99.9%): [1240.000, 1240.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   605.406 ±(99.9%) 579.239 MB/sec [Average]
[info]   (min, avg, max) = (336.315, 605.406, 672.708), stdev = 150.427
[info]   CI (99.9%): [26.167, 1184.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1190.064 ±(99.9%) 1121.880 B/op [Average]
[info]   (min, avg, max) = (669.017, 1190.064, 1330.901), stdev = 291.349
[info]   CI (99.9%): [68.184, 2311.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.200, 8.000), stdev = 1.789
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala
[info] # Run progress: 30.30% complete, ETA 00:49:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 939972.212 ops/s
[info] # Warmup Iteration   2: 1049333.316 ops/s
[info] # Warmup Iteration   3: 1023053.376 ops/s
[info] Iteration   1: 1060463.166 ops/s
[info]                  ·gc.alloc.rate:            576.681 MB/sec
[info]                  ·gc.alloc.rate.norm:       856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.021 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1000.487 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 1044016.954 ops/s
[info]                  ·gc.alloc.rate:            567.655 MB/sec
[info]                  ·gc.alloc.rate.norm:       856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.260 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1015.248 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 1051605.281 ops/s
[info]                  ·gc.alloc.rate:                   572.062 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.598 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1007.933 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.997 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 1057853.565 ops/s
[info]                  ·gc.alloc.rate:            575.320 MB/sec
[info]                  ·gc.alloc.rate.norm:       856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.049 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 501.484 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 1052918.202 ops/s
[info]                  ·gc.alloc.rate:                   572.601 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.375 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1006.651 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.996 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala":
[info]   1053371.434 ±(99.9%) 24445.764 ops/s [Average]
[info]   (min, avg, max) = (1044016.954, 1053371.434, 1060463.166), stdev = 6348.487
[info]   CI (99.9%): [1028925.669, 1077817.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   572.864 ±(99.9%) 13.401 MB/sec [Average]
[info]   (min, avg, max) = (567.655, 572.864, 576.681), stdev = 3.480
[info]   CI (99.9%): [559.463, 586.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   856.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (856.000, 856.000, 856.000), stdev = 0.001
[info]   CI (99.9%): [856.000, 856.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   606.261 ±(99.9%) 579.500 MB/sec [Average]
[info]   (min, avg, max) = (337.049, 606.261, 674.021), stdev = 150.494
[info]   CI (99.9%): [26.760, 1185.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   906.361 ±(99.9%) 871.762 B/op [Average]
[info]   (min, avg, max) = (501.484, 906.361, 1015.248), stdev = 226.394
[info]   CI (99.9%): [34.599, 1778.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.399 ±(99.9%) 2.101 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.399, 0.997), stdev = 0.546
[info]   CI (99.9%): [≈ 0, 2.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 6.000), stdev = 1.342
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 30.61% complete, ETA 00:49:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 953272.560 ops/s
[info] # Warmup Iteration   2: 1068028.565 ops/s
[info] # Warmup Iteration   3: 1072924.532 ops/s
[info] Iteration   1: 1067521.504 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1063291.125 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1059163.456 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1065145.153 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1071142.085 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   1065252.665 ±(99.9%) 17303.340 ops/s [Average]
[info]   (min, avg, max) = (1059163.456, 1065252.665, 1071142.085), stdev = 4493.623
[info]   CI (99.9%): [1047949.324, 1082556.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson
[info] # Run progress: 30.91% complete, ETA 00:48:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18887.359 ops/s
[info] # Warmup Iteration   2: 28233.646 ops/s
[info] # Warmup Iteration   3: 29397.909 ops/s
[info] Iteration   1: 29143.173 ops/s
[info]                  ·gc.alloc.rate:                   1522.219 MB/sec
[info]                  ·gc.alloc.rate.norm:              82216.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1681.796 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        90834.857 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 215.845 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   2: 29346.971 ops/s
[info]                  ·gc.alloc.rate:                                  1532.632 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82202.690 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.190 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 10.211 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.844 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       91278.378 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 29734.791 ops/s
[info]                  ·gc.alloc.rate:            1552.780 MB/sec
[info]                  ·gc.alloc.rate.norm:       82200.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.421 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 72069.987 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 28642.421 ops/s
[info]                  ·gc.alloc.rate:                                  1495.765 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82200.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.055 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.376 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       74814.624 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 28893.500 ops/s
[info]                  ·gc.alloc.rate:                                  1508.945 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82200.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.071 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.804 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       92706.034 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson":
[info]   29152.171 ±(99.9%) 1615.700 ops/s [Average]
[info]   (min, avg, max) = (28642.421, 29152.171, 29734.791), stdev = 419.592
[info]   CI (99.9%): [27536.471, 30767.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1522.469 ±(99.9%) 84.322 MB/sec [Average]
[info]   (min, avg, max) = (1495.765, 1522.469, 1552.780), stdev = 21.898
[info]   CI (99.9%): [1438.147, 1606.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   82203.750 ±(99.9%) 26.783 B/op [Average]
[info]   (min, avg, max) = (82200.014, 82203.750, 82216.019), stdev = 6.955
[info]   CI (99.9%): [82176.968, 82230.533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.039 ±(99.9%) 0.327 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.039, 0.190), stdev = 0.085
[info]   CI (99.9%): [≈ 0, 0.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.067 ±(99.9%) 17.531 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.067, 10.211), stdev = 4.553
[info]   CI (99.9%): [≈ 0, 19.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1561.648 ±(99.9%) 704.610 MB/sec [Average]
[info]   (min, avg, max) = (1361.376, 1561.648, 1701.844), stdev = 182.985
[info]   CI (99.9%): [857.039, 2266.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   84340.776 ±(99.9%) 38583.413 B/op [Average]
[info]   (min, avg, max) = (72069.987, 84340.776, 92706.034), stdev = 10019.990
[info]   CI (99.9%): [45757.363, 122924.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   43.169 ±(99.9%) 371.698 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 43.169, 215.845), stdev = 96.529
[info]   CI (99.9%): [≈ 0, 414.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.000, 19.000), stdev = 6.782
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce
[info] # Run progress: 31.21% complete, ETA 00:48:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 88074.299 ops/s
[info] # Warmup Iteration   2: 112602.987 ops/s
[info] # Warmup Iteration   3: 111422.501 ops/s
[info] Iteration   1: 111606.052 ops/s
[info]                  ·gc.alloc.rate:            1374.345 MB/sec
[info]                  ·gc.alloc.rate.norm:       19384.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.047 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19013.096 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 113134.426 ops/s
[info]                  ·gc.alloc.rate:                                  1393.051 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19384.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.053 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.736 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1357.922 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       18895.181 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                46.334 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 113181.208 ops/s
[info]                  ·gc.alloc.rate:                                  1394.207 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19384.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.827 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       18933.819 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 113247.097 ops/s
[info]                  ·gc.alloc.rate:                                  1394.669 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19384.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.033 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.473 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       18922.619 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 114717.812 ops/s
[info]                  ·gc.alloc.rate:                                  1412.586 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19384.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.049 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.635 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       23350.431 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce":
[info]   113177.319 ±(99.9%) 4239.524 ops/s [Average]
[info]   (min, avg, max) = (111606.052, 113177.319, 114717.812), stdev = 1100.991
[info]   CI (99.9%): [108937.795, 117416.843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   1393.772 ±(99.9%) 52.122 MB/sec [Average]
[info]   (min, avg, max) = (1374.345, 1393.772, 1412.586), stdev = 13.536
[info]   CI (99.9%): [1341.649, 1445.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   19384.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (19384.004, 19384.004, 19384.004), stdev = 0.001
[info]   CI (99.9%): [19384.003, 19384.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.012 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.053), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.166 ±(99.9%) 1.229 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.166, 0.736), stdev = 0.319
[info]   CI (99.9%): [≈ 0, 1.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1426.181 ±(99.9%) 593.324 MB/sec [Average]
[info]   (min, avg, max) = (1348.047, 1426.181, 1701.635), stdev = 154.084
[info]   CI (99.9%): [832.857, 2019.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   19823.029 ±(99.9%) 7594.874 B/op [Average]
[info]   (min, avg, max) = (18895.181, 19823.029, 23350.431), stdev = 1972.365
[info]   CI (99.9%): [12228.155, 27417.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   9.267 ±(99.9%) 79.791 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.267, 46.334), stdev = 20.721
[info]   CI (99.9%): [≈ 0, 89.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 13.000), stdev = 4.062
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala
[info] # Run progress: 31.52% complete, ETA 00:48:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 97498.662 ops/s
[info] # Warmup Iteration   2: 170770.489 ops/s
[info] # Warmup Iteration   3: 164746.195 ops/s
[info] Iteration   1: 170869.659 ops/s
[info]                  ·gc.alloc.rate:            912.024 MB/sec
[info]                  ·gc.alloc.rate.norm:       8400.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.259 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9295.560 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 169119.385 ops/s
[info]                  ·gc.alloc.rate:            902.438 MB/sec
[info]                  ·gc.alloc.rate.norm:       8400.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.007 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9391.954 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   3: 167771.658 ops/s
[info]                  ·gc.alloc.rate:            895.335 MB/sec
[info]                  ·gc.alloc.rate.norm:       8400.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.738 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6311.603 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 168478.099 ops/s
[info]                  ·gc.alloc.rate:                                  899.417 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8400.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.088 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.825 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.480 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9502.638 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                37.338 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 167300.688 ops/s
[info]                  ·gc.alloc.rate:                                  892.856 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8400.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.032 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.298 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.166 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9607.142 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala":
[info]   168707.898 ±(99.9%) 5360.604 ops/s [Average]
[info]   (min, avg, max) = (167300.688, 168707.898, 170869.659), stdev = 1392.132
[info]   CI (99.9%): [163347.293, 174068.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   900.414 ±(99.9%) 28.739 MB/sec [Average]
[info]   (min, avg, max) = (892.856, 900.414, 912.024), stdev = 7.463
[info]   CI (99.9%): [871.676, 929.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   8400.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8400.002, 8400.002, 8400.003), stdev = 0.001
[info]   CI (99.9%): [8400.002, 8400.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.024 ±(99.9%) 0.148 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.088), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.225 ±(99.9%) 1.385 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.225, 0.825), stdev = 0.360
[info]   CI (99.9%): [≈ 0, 1.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   945.930 ±(99.9%) 588.415 MB/sec [Average]
[info]   (min, avg, max) = (672.738, 945.930, 1021.166), stdev = 152.810
[info]   CI (99.9%): [357.515, 1534.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   8821.780 ±(99.9%) 5422.069 B/op [Average]
[info]   (min, avg, max) = (6311.603, 8821.780, 9607.142), stdev = 1408.094
[info]   CI (99.9%): [3399.711, 14243.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.800 ±(99.9%) 6.885 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.800, 3.998), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   7.468 ±(99.9%) 64.299 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.468, 37.338), stdev = 16.698
[info]   CI (99.9%): [≈ 0, 71.767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.600, 13.000), stdev = 4.159
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala
[info] # Run progress: 31.82% complete, ETA 00:48:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 235451.491 ops/s
[info] # Warmup Iteration   2: 254091.082 ops/s
[info] # Warmup Iteration   3: 254819.552 ops/s
[info] Iteration   1: 250119.800 ops/s
[info]                  ·gc.alloc.rate:            650.770 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.962 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4241.972 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 254200.052 ops/s
[info]                  ·gc.alloc.rate:            661.525 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.095 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4173.831 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 254370.847 ops/s
[info]                  ·gc.alloc.rate:            661.862 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.985 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4171.025 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 254410.393 ops/s
[info]                  ·gc.alloc.rate:            662.003 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.022 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4170.370 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 251925.479 ops/s
[info]                  ·gc.alloc.rate:            655.533 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.018 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4211.500 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala":
[info]   253005.314 ±(99.9%) 7396.485 ops/s [Average]
[info]   (min, avg, max) = (250119.800, 253005.314, 254410.393), stdev = 1920.844
[info]   CI (99.9%): [245608.830, 260401.799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   658.339 ±(99.9%) 19.363 MB/sec [Average]
[info]   (min, avg, max) = (650.770, 658.339, 662.003), stdev = 5.029
[info]   CI (99.9%): [638.975, 677.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.002, 4096.002, 4096.002), stdev = 0.001
[info]   CI (99.9%): [4096.001, 4096.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   674.016 ±(99.9%) 0.195 MB/sec [Average]
[info]   (min, avg, max) = (673.962, 674.016, 674.095), stdev = 0.051
[info]   CI (99.9%): [673.821, 674.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   4193.739 ±(99.9%) 123.284 B/op [Average]
[info]   (min, avg, max) = (4170.370, 4193.739, 4241.972), stdev = 32.016
[info]   CI (99.9%): [4070.456, 4317.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson
[info] # Run progress: 32.12% complete, ETA 00:47:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25167.114 ops/s
[info] # Warmup Iteration   2: 60671.385 ops/s
[info] # Warmup Iteration   3: 60751.551 ops/s
[info] Iteration   1: 63410.361 ops/s
[info]                  ·gc.alloc.rate:                                  2676.802 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66432.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.082 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.604 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       67593.527 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   2: 63147.504 ops/s
[info]                  ·gc.alloc.rate:                                  2665.851 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66432.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.087 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.629 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       67871.791 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 62513.628 ops/s
[info]                  ·gc.alloc.rate:                                  2639.316 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66432.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.132 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2383.341 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       59989.066 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 62513.859 ops/s
[info]                  ·gc.alloc.rate:                                  2639.168 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66432.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.128 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.665 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       68558.932 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 62711.107 ops/s
[info]                  ·gc.alloc.rate:                                  2646.670 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66432.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.157 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.784 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       68342.506 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson":
[info]   62859.292 ±(99.9%) 1549.267 ops/s [Average]
[info]   (min, avg, max) = (62513.628, 62859.292, 63410.361), stdev = 402.340
[info]   CI (99.9%): [61310.024, 64408.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2653.561 ±(99.9%) 65.256 MB/sec [Average]
[info]   (min, avg, max) = (2639.168, 2653.561, 2676.802), stdev = 16.947
[info]   CI (99.9%): [2588.306, 2718.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   66432.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (66432.006, 66432.007, 66432.007), stdev = 0.001
[info]   CI (99.9%): [66432.006, 66432.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.005 ±(99.9%) 0.005 MB/sec [Average]
[info]   (min, avg, max) = (0.003, 0.005, 0.006), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.117 ±(99.9%) 0.122 B/op [Average]
[info]   (min, avg, max) = (0.082, 0.117, 0.157), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2655.405 ±(99.9%) 585.640 MB/sec [Average]
[info]   (min, avg, max) = (2383.341, 2655.405, 2723.665), stdev = 152.089
[info]   CI (99.9%): [2069.764, 3241.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   66471.164 ±(99.9%) 14029.739 B/op [Average]
[info]   (min, avg, max) = (59989.066, 66471.164, 68558.932), stdev = 3643.479
[info]   CI (99.9%): [52441.425, 80500.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count":
[info]   39.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.800, 8.000), stdev = 0.447
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce
[info] # Run progress: 32.42% complete, ETA 00:47:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 132099.947 ops/s
[info] # Warmup Iteration   2: 175443.689 ops/s
[info] # Warmup Iteration   3: 179168.805 ops/s
[info] Iteration   1: 179858.015 ops/s
[info]                  ·gc.alloc.rate:            628.138 MB/sec
[info]                  ·gc.alloc.rate.norm:       5496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.107 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2949.581 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 176909.384 ops/s
[info]                  ·gc.alloc.rate:            617.723 MB/sec
[info]                  ·gc.alloc.rate.norm:       5496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.087 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5997.484 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 176029.062 ops/s
[info]                  ·gc.alloc.rate:            614.600 MB/sec
[info]                  ·gc.alloc.rate.norm:       5496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.036 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6027.497 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 178976.549 ops/s
[info]                  ·gc.alloc.rate:            625.118 MB/sec
[info]                  ·gc.alloc.rate.norm:       5496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.284 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5928.262 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 175498.150 ops/s
[info]                  ·gc.alloc.rate:            612.785 MB/sec
[info]                  ·gc.alloc.rate.norm:       5496.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.055 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6045.525 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce":
[info]   177454.232 ±(99.9%) 7267.892 ops/s [Average]
[info]   (min, avg, max) = (175498.150, 177454.232, 179858.015), stdev = 1887.449
[info]   CI (99.9%): [170186.340, 184722.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   619.673 ±(99.9%) 25.707 MB/sec [Average]
[info]   (min, avg, max) = (612.785, 619.673, 628.138), stdev = 6.676
[info]   CI (99.9%): [593.966, 645.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5496.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5496.002, 5496.002, 5496.003), stdev = 0.001
[info]   CI (99.9%): [5496.002, 5496.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   606.714 ±(99.9%) 580.348 MB/sec [Average]
[info]   (min, avg, max) = (337.107, 606.714, 674.284), stdev = 150.715
[info]   CI (99.9%): [26.366, 1187.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   5389.670 ±(99.9%) 5255.291 B/op [Average]
[info]   (min, avg, max) = (2949.581, 5389.670, 6045.525), stdev = 1364.782
[info]   CI (99.9%): [134.379, 10644.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 7.000), stdev = 1.643
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala
[info] # Run progress: 32.73% complete, ETA 00:47:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 320516.253 ops/s
[info] # Warmup Iteration   2: 534842.711 ops/s
[info] # Warmup Iteration   3: 536919.145 ops/s
[info] Iteration   1: 542640.066 ops/s
[info]                  ·gc.alloc.rate:            548.794 MB/sec
[info]                  ·gc.alloc.rate.norm:       1592.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.332 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 975.668 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 532972.886 ops/s
[info]                  ·gc.alloc.rate:            539.007 MB/sec
[info]                  ·gc.alloc.rate.norm:       1592.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.660 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1986.755 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 537147.318 ops/s
[info]                  ·gc.alloc.rate:            543.258 MB/sec
[info]                  ·gc.alloc.rate.norm:       1592.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.698 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1971.319 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 537711.481 ops/s
[info]                  ·gc.alloc.rate:            543.816 MB/sec
[info]                  ·gc.alloc.rate.norm:       1592.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.340 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 984.622 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 536053.397 ops/s
[info]                  ·gc.alloc.rate:            542.203 MB/sec
[info]                  ·gc.alloc.rate.norm:       1592.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.758 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1975.334 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala":
[info]   537305.030 ±(99.9%) 13475.430 ops/s [Average]
[info]   (min, avg, max) = (532972.886, 537305.030, 542640.066), stdev = 3499.526
[info]   CI (99.9%): [523829.599, 550780.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   543.416 ±(99.9%) 13.616 MB/sec [Average]
[info]   (min, avg, max) = (539.007, 543.416, 548.794), stdev = 3.536
[info]   CI (99.9%): [529.800, 557.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1592.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1592.001, 1592.001, 1592.001), stdev = 0.001
[info]   CI (99.9%): [1592.001, 1592.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   538.158 ±(99.9%) 709.432 MB/sec [Average]
[info]   (min, avg, max) = (336.332, 538.158, 672.758), stdev = 184.237
[info]   CI (99.9%): [≈ 0, 1247.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1578.740 ±(99.9%) 2104.294 B/op [Average]
[info]   (min, avg, max) = (975.668, 1578.740, 1986.755), stdev = 546.478
[info]   CI (99.9%): [≈ 0, 3683.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.600, 9.000), stdev = 2.408
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala
[info] # Run progress: 33.03% complete, ETA 00:47:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 444014.639 ops/s
[info] # Warmup Iteration   2: 499790.247 ops/s
[info] # Warmup Iteration   3: 502090.754 ops/s
[info] Iteration   1: 501246.978 ops/s
[info]                  ·gc.alloc.rate:            384.758 MB/sec
[info]                  ·gc.alloc.rate.norm:       1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.093 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1058.350 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 502598.244 ops/s
[info]                  ·gc.alloc.rate:            385.672 MB/sec
[info]                  ·gc.alloc.rate.norm:       1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.326 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1053.441 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 501743.948 ops/s
[info]                  ·gc.alloc.rate:            385.049 MB/sec
[info]                  ·gc.alloc.rate.norm:       1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.347 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1055.210 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 501751.425 ops/s
[info]                  ·gc.alloc.rate:            385.118 MB/sec
[info]                  ·gc.alloc.rate.norm:       1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.403 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1055.196 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 499664.653 ops/s
[info]                  ·gc.alloc.rate:            383.457 MB/sec
[info]                  ·gc.alloc.rate.norm:       1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.703 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2119.213 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala":
[info]   501401.050 ±(99.9%) 4179.514 ops/s [Average]
[info]   (min, avg, max) = (499664.653, 501401.050, 502598.244), stdev = 1085.406
[info]   CI (99.9%): [497221.536, 505580.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   384.811 ±(99.9%) 3.181 MB/sec [Average]
[info]   (min, avg, max) = (383.457, 384.811, 385.672), stdev = 0.826
[info]   CI (99.9%): [381.630, 387.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1208.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1208.001, 1208.001, 1208.001), stdev = 0.001
[info]   CI (99.9%): [1208.001, 1208.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   403.775 ±(99.9%) 578.890 MB/sec [Average]
[info]   (min, avg, max) = (336.326, 403.775, 672.703), stdev = 150.336
[info]   CI (99.9%): [≈ 0, 982.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1268.282 ±(99.9%) 1831.706 B/op [Average]
[info]   (min, avg, max) = (1053.441, 1268.282, 2119.213), stdev = 475.688
[info]   CI (99.9%): [≈ 0, 3099.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 6.000), stdev = 1.342
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 33.33% complete, ETA 00:47:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 452299.566 ops/s
[info] # Warmup Iteration   2: 491933.731 ops/s
[info] # Warmup Iteration   3: 477102.641 ops/s
[info] Iteration   1: 490672.333 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 489485.302 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 489220.033 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 489499.611 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 490528.682 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   489881.192 ±(99.9%) 2572.025 ops/s [Average]
[info]   (min, avg, max) = (489220.033, 489881.192, 490672.333), stdev = 667.947
[info]   CI (99.9%): [487309.167, 492453.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson
[info] # Run progress: 33.64% complete, ETA 00:46:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 157861.893 ops/s
[info] # Warmup Iteration   2: 295859.891 ops/s
[info] # Warmup Iteration   3: 295001.778 ops/s
[info] Iteration   1: 296023.822 ops/s
[info]                  ·gc.alloc.rate:            812.279 MB/sec
[info]                  ·gc.alloc.rate.norm:       4320.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.598 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3577.126 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 294289.487 ops/s
[info]                  ·gc.alloc.rate:            807.627 MB/sec
[info]                  ·gc.alloc.rate.norm:       4320.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.668 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3598.102 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 289147.513 ops/s
[info]                  ·gc.alloc.rate:                   793.820 MB/sec
[info]                  ·gc.alloc.rate.norm:              4320.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.084 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5486.035 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.626 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   4: 296677.326 ops/s
[info]                  ·gc.alloc.rate:                   814.194 MB/sec
[info]                  ·gc.alloc.rate.norm:              4320.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.013 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3565.611 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 24.737 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 298262.757 ops/s
[info]                  ·gc.alloc.rate:                                  818.560 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4320.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.053 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.282 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.015 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5388.471 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson":
[info]   294880.181 ±(99.9%) 13503.614 ops/s [Average]
[info]   (min, avg, max) = (289147.513, 294880.181, 298262.757), stdev = 3506.846
[info]   CI (99.9%): [281376.567, 308383.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   809.296 ±(99.9%) 36.580 MB/sec [Average]
[info]   (min, avg, max) = (793.820, 809.296, 818.560), stdev = 9.500
[info]   CI (99.9%): [772.716, 845.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4320.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4320.001, 4320.001, 4320.001), stdev = 0.001
[info]   CI (99.9%): [4320.001, 4320.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.011 ±(99.9%) 0.092 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.053), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.056 ±(99.9%) 0.486 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.056, 0.282), stdev = 0.126
[info]   CI (99.9%): [≈ 0, 0.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   809.276 ±(99.9%) 721.782 MB/sec [Average]
[info]   (min, avg, max) = (672.013, 809.276, 1021.015), stdev = 187.445
[info]   CI (99.9%): [87.493, 1531.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   4323.069 ±(99.9%) 3919.021 B/op [Average]
[info]   (min, avg, max) = (3565.611, 4323.069, 5486.035), stdev = 1017.757
[info]   CI (99.9%): [404.047, 8242.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.821 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.662), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   5.673 ±(99.9%) 41.480 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.673, 24.737), stdev = 10.772
[info]   CI (99.9%): [≈ 0, 47.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.600, 13.000), stdev = 3.578
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce
[info] # Run progress: 33.94% complete, ETA 00:46:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5749.807 ops/s
[info] # Warmup Iteration   2: 7916.514 ops/s
[info] # Warmup Iteration   3: 8152.762 ops/s
[info] Iteration   1: 8207.438 ops/s
[info]                  ·gc.alloc.rate:                   1049.199 MB/sec
[info]                  ·gc.alloc.rate.norm:              201240.057 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1012.271 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        194157.086 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 127.735 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 8184.875 ops/s
[info]                  ·gc.alloc.rate:            1046.591 MB/sec
[info]                  ·gc.alloc.rate.norm:       201240.050 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.802 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 194550.744 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 8199.803 ops/s
[info]                  ·gc.alloc.rate:                                  1048.610 MB/sec
[info]                  ·gc.alloc.rate.norm:                             201240.054 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.025 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.753 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1015.354 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       194857.923 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                639.298 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   4: 8234.794 ops/s
[info]                  ·gc.alloc.rate:                                  1052.781 MB/sec
[info]                  ·gc.alloc.rate.norm:                             201240.050 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.030 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.792 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.932 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       195151.998 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 8256.574 ops/s
[info]                  ·gc.alloc.rate:            1055.765 MB/sec
[info]                  ·gc.alloc.rate.norm:       201242.928 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.084 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 194632.160 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce":
[info]   8216.697 ±(99.9%) 110.627 ops/s [Average]
[info]   (min, avg, max) = (8184.875, 8216.697, 8256.574), stdev = 28.729
[info]   CI (99.9%): [8106.070, 8327.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1050.589 ±(99.9%) 14.073 MB/sec [Average]
[info]   (min, avg, max) = (1046.591, 1050.589, 1055.765), stdev = 3.655
[info]   CI (99.9%): [1036.516, 1064.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   201240.628 ±(99.9%) 4.952 B/op [Average]
[info]   (min, avg, max) = (201240.050, 201240.628, 201242.928), stdev = 1.286
[info]   CI (99.9%): [201235.676, 201245.580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.011 ±(99.9%) 0.059 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.030), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.109 ±(99.9%) 11.210 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.109, 5.792), stdev = 2.911
[info]   CI (99.9%): [≈ 0, 13.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1016.289 ±(99.9%) 17.402 MB/sec [Average]
[info]   (min, avg, max) = (1011.802, 1016.289, 1021.084), stdev = 4.519
[info]   CI (99.9%): [998.887, 1033.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   194669.982 ±(99.9%) 1423.139 B/op [Average]
[info]   (min, avg, max) = (194157.086, 194669.982, 195151.998), stdev = 369.585
[info]   CI (99.9%): [193246.843, 196093.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.562 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.331), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   153.407 ±(99.9%) 1067.382 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 153.407, 639.298), stdev = 277.196
[info]   CI (99.9%): [≈ 0, 1220.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.400, 10.000), stdev = 3.647
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala
[info] # Run progress: 34.24% complete, ETA 00:46:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5243.564 ops/s
[info] # Warmup Iteration   2: 8896.492 ops/s
[info] # Warmup Iteration   3: 9243.455 ops/s
[info] Iteration   1: 9282.410 ops/s
[info]                  ·gc.alloc.rate:            1100.398 MB/sec
[info]                  ·gc.alloc.rate.norm:       186576.051 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.186 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 171110.797 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 9251.189 ops/s
[info]                  ·gc.alloc.rate:            1096.615 MB/sec
[info]                  ·gc.alloc.rate.norm:       186576.044 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.087 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 171684.064 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   3: 9035.690 ops/s
[info]                  ·gc.alloc.rate:                                  1070.968 MB/sec
[info]                  ·gc.alloc.rate.norm:                             186576.045 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.090 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 15.764 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.034 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       177179.988 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                696.189 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 9078.221 ops/s
[info]                  ·gc.alloc.rate:                                  1076.060 MB/sec
[info]                  ·gc.alloc.rate.norm:                             186576.045 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.012 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.163 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.369 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       236045.082 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 9343.265 ops/s
[info]                  ·gc.alloc.rate:                                  1107.779 MB/sec
[info]                  ·gc.alloc.rate.norm:                             186576.047 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.247 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.316 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       172013.591 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala":
[info]   9198.155 ±(99.9%) 515.711 ops/s [Average]
[info]   (min, avg, max) = (9035.690, 9198.155, 9343.265), stdev = 133.928
[info]   CI (99.9%): [8682.444, 9713.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1090.364 ±(99.9%) 61.606 MB/sec [Average]
[info]   (min, avg, max) = (1070.968, 1090.364, 1107.779), stdev = 15.999
[info]   CI (99.9%): [1028.759, 1151.970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   186576.046 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (186576.044, 186576.046, 186576.051), stdev = 0.003
[info]   CI (99.9%): [186576.036, 186576.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.021 ±(99.9%) 0.151 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.090), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   3.635 ±(99.9%) 26.341 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.635, 15.764), stdev = 6.841
[info]   CI (99.9%): [≈ 0, 29.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1083.598 ±(99.9%) 598.263 MB/sec [Average]
[info]   (min, avg, max) = (1009.087, 1083.598, 1361.369), stdev = 155.367
[info]   CI (99.9%): [485.336, 1681.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   185606.704 ±(99.9%) 108977.024 B/op [Average]
[info]   (min, avg, max) = (171110.797, 185606.704, 236045.082), stdev = 28300.987
[info]   CI (99.9%): [76629.680, 294583.728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   139.238 ±(99.9%) 1198.879 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 139.238, 696.189), stdev = 311.345
[info]   CI (99.9%): [≈ 0, 1338.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.600, 13.000), stdev = 4.775
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala
[info] # Run progress: 34.55% complete, ETA 00:46:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 140731.001 ops/s
[info] # Warmup Iteration   2: 147828.532 ops/s
[info] # Warmup Iteration   3: 149145.658 ops/s
[info] Iteration   1: 149987.325 ops/s
[info]                  ·gc.alloc.rate:            975.801 MB/sec
[info]                  ·gc.alloc.rate.norm:       10240.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1013.162 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10632.064 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 149680.260 ops/s
[info]                  ·gc.alloc.rate:            973.993 MB/sec
[info]                  ·gc.alloc.rate.norm:       10240.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1013.352 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10653.797 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 149086.155 ops/s
[info]                  ·gc.alloc.rate:                                  969.863 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10240.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.033 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.353 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1015.739 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10724.368 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     2.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                28.129 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 146851.500 ops/s
[info]                  ·gc.alloc.rate:                                  955.499 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10240.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.027 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.294 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.840 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7296.503 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 146688.391 ops/s
[info]                  ·gc.alloc.rate:            954.244 MB/sec
[info]                  ·gc.alloc.rate.norm:       10240.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.044 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10956.840 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala":
[info]   148458.726 ±(99.9%) 6070.015 ops/s [Average]
[info]   (min, avg, max) = (146688.391, 148458.726, 149987.325), stdev = 1576.364
[info]   CI (99.9%): [142388.711, 154528.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   965.880 ±(99.9%) 39.612 MB/sec [Average]
[info]   (min, avg, max) = (954.244, 965.880, 975.801), stdev = 10.287
[info]   CI (99.9%): [926.268, 1005.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10240.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10240.003, 10240.003, 10240.003), stdev = 0.001
[info]   CI (99.9%): [10240.002, 10240.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.012 ±(99.9%) 0.065 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.033), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.129 ±(99.9%) 0.687 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.129, 0.353), stdev = 0.178
[info]   CI (99.9%): [≈ 0, 0.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   948.827 ±(99.9%) 576.994 MB/sec [Average]
[info]   (min, avg, max) = (680.840, 948.827, 1021.044), stdev = 149.843
[info]   CI (99.9%): [371.834, 1525.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   10052.715 ±(99.9%) 5953.639 B/op [Average]
[info]   (min, avg, max) = (7296.503, 10052.715, 10956.840), stdev = 1546.141
[info]   CI (99.9%): [4099.075, 16006.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.533 ±(99.9%) 4.588 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.533, 2.664), stdev = 1.191
[info]   CI (99.9%): [≈ 0, 5.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   5.626 ±(99.9%) 48.441 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.626, 28.129), stdev = 12.580
[info]   CI (99.9%): [≈ 0, 54.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.400, 8.000), stdev = 3.130
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson
[info] # Run progress: 34.85% complete, ETA 00:46:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3557.317 ops/s
[info] # Warmup Iteration   2: 6699.996 ops/s
[info] # Warmup Iteration   3: 6901.507 ops/s
[info] Iteration   1: 6912.724 ops/s
[info]                  ·gc.alloc.rate:            1287.230 MB/sec
[info]                  ·gc.alloc.rate.norm:       293096.064 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.257 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 306308.535 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   2: 6750.219 ops/s
[info]                  ·gc.alloc.rate:                                  1257.302 MB/sec
[info]                  ·gc.alloc.rate.norm:                             293096.060 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.169 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 39.393 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1353.695 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       315566.711 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                931.791 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   3: 6910.473 ops/s
[info]                  ·gc.alloc.rate:                                  1286.824 MB/sec
[info]                  ·gc.alloc.rate.norm:                             293096.059 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.039 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.051 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       232561.778 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 6919.890 ops/s
[info]                  ·gc.alloc.rate:                                  1288.939 MB/sec
[info]                  ·gc.alloc.rate.norm:                             293096.059 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.104 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.866 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       309679.142 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 6979.687 ops/s
[info]                  ·gc.alloc.rate:                                  1300.289 MB/sec
[info]                  ·gc.alloc.rate.norm:                             293096.058 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.050 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       307017.525 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson":
[info]   6894.599 ±(99.9%) 329.594 ops/s [Average]
[info]   (min, avg, max) = (6750.219, 6894.599, 6979.687), stdev = 85.594
[info]   CI (99.9%): [6565.005, 7224.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1284.117 ±(99.9%) 61.516 MB/sec [Average]
[info]   (min, avg, max) = (1257.302, 1284.117, 1300.289), stdev = 15.975
[info]   CI (99.9%): [1222.601, 1345.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   293096.060 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (293096.058, 293096.060, 293096.064), stdev = 0.002
[info]   CI (99.9%): [293096.052, 293096.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.036 ±(99.9%) 0.287 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.036, 0.169), stdev = 0.075
[info]   CI (99.9%): [≈ 0, 0.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   8.312 ±(99.9%) 66.932 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.312, 39.393), stdev = 17.382
[info]   CI (99.9%): [≈ 0, 75.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1288.784 ±(99.9%) 576.930 MB/sec [Average]
[info]   (min, avg, max) = (1021.051, 1288.784, 1362.050), stdev = 149.827
[info]   CI (99.9%): [711.854, 1865.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   294226.738 ±(99.9%) 133477.902 B/op [Average]
[info]   (min, avg, max) = (232561.778, 294226.738, 315566.711), stdev = 34663.787
[info]   CI (99.9%): [160748.836, 427704.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   186.358 ±(99.9%) 1604.601 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 186.358, 931.791), stdev = 416.710
[info]   CI (99.9%): [≈ 0, 1790.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.400, 17.000), stdev = 6.107
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce
[info] # Run progress: 35.15% complete, ETA 00:45:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16073.394 ops/s
[info] # Warmup Iteration   2: 22140.824 ops/s
[info] # Warmup Iteration   3: 22014.091 ops/s
[info] Iteration   1: 22126.498 ops/s
[info]                  ·gc.alloc.rate:                   929.332 MB/sec
[info]                  ·gc.alloc.rate.norm:              66100.538 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1011.199 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        71923.472 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 47.380 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 22333.896 ops/s
[info]                  ·gc.alloc.rate:            938.372 MB/sec
[info]                  ·gc.alloc.rate.norm:       66104.024 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1012.186 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 71303.919 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 22350.282 ops/s
[info]                  ·gc.alloc.rate:            938.274 MB/sec
[info]                  ·gc.alloc.rate.norm:       66083.409 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.974 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 47468.527 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 21601.858 ops/s
[info]                  ·gc.alloc.rate:                                  906.968 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66080.019 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.112 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 8.165 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.819 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       74156.444 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                242.659 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 22298.408 ops/s
[info]                  ·gc.alloc.rate:                                  936.292 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66080.020 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.016 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.161 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.221 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       72074.026 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce":
[info]   22142.188 ±(99.9%) 1212.589 ops/s [Average]
[info]   (min, avg, max) = (21601.858, 22142.188, 22350.282), stdev = 314.906
[info]   CI (99.9%): [20929.599, 23354.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   929.847 ±(99.9%) 51.264 MB/sec [Average]
[info]   (min, avg, max) = (906.968, 929.847, 938.372), stdev = 13.313
[info]   CI (99.9%): [878.583, 981.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   66089.602 ±(99.9%) 45.137 B/op [Average]
[info]   (min, avg, max) = (66080.019, 66089.602, 66104.024), stdev = 11.722
[info]   CI (99.9%): [66044.465, 66134.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.026 ±(99.9%) 0.188 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.112), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.865 ±(99.9%) 13.699 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.865, 8.165), stdev = 3.557
[info]   CI (99.9%): [≈ 0, 15.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   947.280 ±(99.9%) 588.525 MB/sec [Average]
[info]   (min, avg, max) = (673.974, 947.280, 1021.221), stdev = 152.838
[info]   CI (99.9%): [358.755, 1535.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   67385.278 ±(99.9%) 43071.350 B/op [Average]
[info]   (min, avg, max) = (47468.527, 67385.278, 74156.444), stdev = 11185.493
[info]   CI (99.9%): [24313.928, 110456.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.561 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.331), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   58.008 ±(99.9%) 405.250 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 58.008, 242.659), stdev = 105.242
[info]   CI (99.9%): [≈ 0, 463.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.800, 10.000), stdev = 3.347
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala
[info] # Run progress: 35.45% complete, ETA 00:45:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15389.905 ops/s
[info] # Warmup Iteration   2: 25333.987 ops/s
[info] # Warmup Iteration   3: 24979.595 ops/s
[info] Iteration   1: 25272.584 ops/s
[info]                  ·gc.alloc.rate:            972.144 MB/sec
[info]                  ·gc.alloc.rate.norm:       60552.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.955 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 62844.871 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 25353.127 ops/s
[info]                  ·gc.alloc.rate:            975.517 MB/sec
[info]                  ·gc.alloc.rate.norm:       60552.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.261 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 62646.606 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 25416.001 ops/s
[info]                  ·gc.alloc.rate:                                  977.937 MB/sec
[info]                  ·gc.alloc.rate.norm:                             60552.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.077 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.788 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.255 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       62738.842 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                247.490 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   4: 25475.164 ops/s
[info]                  ·gc.alloc.rate:                                  979.913 MB/sec
[info]                  ·gc.alloc.rate.norm:                             60552.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.047 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.898 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.983 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       63089.878 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 25337.833 ops/s
[info]                  ·gc.alloc.rate:            974.771 MB/sec
[info]                  ·gc.alloc.rate.norm:       60552.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.076 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 63428.442 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala":
[info]   25370.942 ±(99.9%) 298.148 ops/s [Average]
[info]   (min, avg, max) = (25272.584, 25370.942, 25475.164), stdev = 77.428
[info]   CI (99.9%): [25072.794, 25669.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   976.056 ±(99.9%) 11.497 MB/sec [Average]
[info]   (min, avg, max) = (972.144, 976.056, 979.913), stdev = 2.986
[info]   CI (99.9%): [964.560, 987.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   60552.017 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (60552.016, 60552.017, 60552.020), stdev = 0.002
[info]   CI (99.9%): [60552.010, 60552.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.025 ±(99.9%) 0.137 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.077), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.537 ±(99.9%) 8.505 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.537, 4.788), stdev = 2.209
[info]   CI (99.9%): [≈ 0, 10.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1014.706 ±(99.9%) 23.168 MB/sec [Average]
[info]   (min, avg, max) = (1008.955, 1014.706, 1021.076), stdev = 6.017
[info]   CI (99.9%): [991.538, 1037.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   62949.728 ±(99.9%) 1211.822 B/op [Average]
[info]   (min, avg, max) = (62646.606, 62949.728, 63428.442), stdev = 314.706
[info]   CI (99.9%): [61737.906, 64161.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   49.498 ±(99.9%) 426.194 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 49.498, 247.490), stdev = 110.681
[info]   CI (99.9%): [≈ 0, 475.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.600, 12.000), stdev = 4.722
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala
[info] # Run progress: 35.76% complete, ETA 00:45:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 721450.645 ops/s
[info] # Warmup Iteration   2: 856269.951 ops/s
[info] # Warmup Iteration   3: 853719.151 ops/s
[info] Iteration   1: 862970.573 ops/s
[info]                  ·gc.alloc.rate:                                  1557.227 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2840.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.066 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.120 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1351.563 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2464.919 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                6.074 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   2: 862429.537 ops/s
[info]                  ·gc.alloc.rate:                                  1556.345 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2840.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.071 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.130 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.097 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3105.968 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 865210.786 ops/s
[info]                  ·gc.alloc.rate:                                  1561.116 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2840.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.425 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2476.720 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 853721.846 ops/s
[info]                  ·gc.alloc.rate:            1540.339 MB/sec
[info]                  ·gc.alloc.rate.norm:       2840.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.774 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3137.647 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 857602.436 ops/s
[info]                  ·gc.alloc.rate:                                  1547.372 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2840.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.823 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3123.476 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala":
[info]   860387.035 ±(99.9%) 17885.173 ops/s [Average]
[info]   (min, avg, max) = (853721.846, 860387.035, 865210.786), stdev = 4644.723
[info]   CI (99.9%): [842501.862, 878272.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1552.480 ±(99.9%) 32.536 MB/sec [Average]
[info]   (min, avg, max) = (1540.339, 1552.480, 1561.116), stdev = 8.449
[info]   CI (99.9%): [1519.944, 1585.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2840.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2840.000, 2840.000, 2840.001), stdev = 0.001
[info]   CI (99.9%): [2840.000, 2840.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.028 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.071), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.051 ±(99.9%) 0.260 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.051, 0.130), stdev = 0.068
[info]   CI (99.9%): [≈ 0, 0.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1563.737 ±(99.9%) 728.610 MB/sec [Average]
[info]   (min, avg, max) = (1351.563, 1563.737, 1702.097), stdev = 189.218
[info]   CI (99.9%): [835.127, 2292.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   2861.746 ±(99.9%) 1374.934 B/op [Average]
[info]   (min, avg, max) = (2464.919, 2861.746, 3137.647), stdev = 357.066
[info]   CI (99.9%): [1486.812, 4236.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.215 ±(99.9%) 10.460 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.215, 6.074), stdev = 2.716
[info]   CI (99.9%): [≈ 0, 11.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 10.000), stdev = 2.683
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 36.06% complete, ETA 00:45:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 463576.193 ops/s
[info] # Warmup Iteration   2: 500290.463 ops/s
[info] # Warmup Iteration   3: 502352.990 ops/s
[info] Iteration   1: 502350.948 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 501315.865 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 502177.106 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 502244.383 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 502142.511 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   502046.163 ±(99.9%) 1601.549 ops/s [Average]
[info]   (min, avg, max) = (501315.865, 502046.163, 502350.948), stdev = 415.917
[info]   CI (99.9%): [500444.614, 503647.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson
[info] # Run progress: 36.36% complete, ETA 00:44:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15161.382 ops/s
[info] # Warmup Iteration   2: 21483.981 ops/s
[info] # Warmup Iteration   3: 21910.103 ops/s
[info] Iteration   1: 22035.083 ops/s
[info]                  ·gc.alloc.rate:            930.103 MB/sec
[info]                  ·gc.alloc.rate.norm:       66429.934 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.134 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 72074.436 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 22493.288 ops/s
[info]                  ·gc.alloc.rate:            949.411 MB/sec
[info]                  ·gc.alloc.rate.norm:       66432.024 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.216 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 70616.671 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 22349.197 ops/s
[info]                  ·gc.alloc.rate:            943.383 MB/sec
[info]                  ·gc.alloc.rate.norm:       66420.646 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.931 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 47378.954 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 22658.623 ops/s
[info]                  ·gc.alloc.rate:                                  956.055 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66416.018 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.212 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 14.719 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.069 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       70654.644 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                277.621 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 22790.288 ops/s
[info]                  ·gc.alloc.rate:                                  961.676 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66416.019 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.021 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.432 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.121 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       70521.497 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson":
[info]   22465.296 ±(99.9%) 1126.504 ops/s [Average]
[info]   (min, avg, max) = (22035.083, 22465.296, 22790.288), stdev = 292.550
[info]   CI (99.9%): [21338.791, 23591.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   948.126 ±(99.9%) 46.980 MB/sec [Average]
[info]   (min, avg, max) = (930.103, 948.126, 961.676), stdev = 12.201
[info]   CI (99.9%): [901.145, 995.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   66422.928 ±(99.9%) 29.358 B/op [Average]
[info]   (min, avg, max) = (66416.018, 66422.928, 66432.024), stdev = 7.624
[info]   CI (99.9%): [66393.571, 66452.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.047 ±(99.9%) 0.358 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.047, 0.212), stdev = 0.093
[info]   CI (99.9%): [≈ 0, 0.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   3.230 ±(99.9%) 24.846 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.230, 14.719), stdev = 6.452
[info]   CI (99.9%): [≈ 0, 28.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   945.894 ±(99.9%) 587.911 MB/sec [Average]
[info]   (min, avg, max) = (672.931, 945.894, 1021.121), stdev = 152.679
[info]   CI (99.9%): [357.984, 1533.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   66249.241 ±(99.9%) 40694.713 B/op [Average]
[info]   (min, avg, max) = (47378.954, 66249.241, 72074.436), stdev = 10568.288
[info]   CI (99.9%): [25554.527, 106943.954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   55.524 ±(99.9%) 478.081 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 55.524, 277.621), stdev = 124.156
[info]   CI (99.9%): [≈ 0, 533.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.600, 11.000), stdev = 3.435
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce
[info] # Run progress: 36.67% complete, ETA 00:44:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17691.799 ops/s
[info] # Warmup Iteration   2: 25321.321 ops/s
[info] # Warmup Iteration   3: 25551.171 ops/s
[info] Iteration   1: 26074.040 ops/s
[info]                  ·gc.alloc.rate:            1381.122 MB/sec
[info]                  ·gc.alloc.rate.norm:       83368.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1349.577 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 81463.877 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 25156.102 ops/s
[info]                  ·gc.alloc.rate:                                  1332.208 MB/sec
[info]                  ·gc.alloc.rate.norm:                             83368.022 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.399 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1355.272 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       84811.294 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                208.382 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   3: 25980.650 ops/s
[info]                  ·gc.alloc.rate:                                  1376.417 MB/sec
[info]                  ·gc.alloc.rate.norm:                             83368.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.015 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.883 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.786 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       82481.791 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 26304.768 ops/s
[info]                  ·gc.alloc.rate:                                  1393.505 MB/sec
[info]                  ·gc.alloc.rate.norm:                             83368.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.152 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.142 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       101832.517 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 26210.736 ops/s
[info]                  ·gc.alloc.rate:                                  1388.274 MB/sec
[info]                  ·gc.alloc.rate.norm:                             83368.017 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.227 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.465 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       81758.129 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce":
[info]   25945.259 ±(99.9%) 1764.935 ops/s [Average]
[info]   (min, avg, max) = (25156.102, 25945.259, 26304.768), stdev = 458.348
[info]   CI (99.9%): [24180.325, 27710.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate":
[info]   1374.305 ±(99.9%) 94.062 MB/sec [Average]
[info]   (min, avg, max) = (1332.208, 1374.305, 1393.505), stdev = 24.428
[info]   CI (99.9%): [1280.243, 1468.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   83368.017 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (83368.016, 83368.017, 83368.022), stdev = 0.003
[info]   CI (99.9%): [83368.007, 83368.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.005 ±(99.9%) 0.022 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.015), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.332 ±(99.9%) 1.308 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.332, 0.883), stdev = 0.340
[info]   CI (99.9%): [≈ 0, 1.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1426.048 ±(99.9%) 594.626 MB/sec [Average]
[info]   (min, avg, max) = (1349.577, 1426.048, 1702.142), stdev = 154.423
[info]   CI (99.9%): [831.422, 2020.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   86469.521 ±(99.9%) 33454.486 B/op [Average]
[info]   (min, avg, max) = (81463.877, 86469.521, 101832.517), stdev = 8688.024
[info]   CI (99.9%): [53015.035, 119924.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   41.676 ±(99.9%) 358.846 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 41.676, 208.382), stdev = 93.191
[info]   CI (99.9%): [≈ 0, 400.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 13.000), stdev = 4.450
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala
[info] # Run progress: 36.97% complete, ETA 00:44:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14900.676 ops/s
[info] # Warmup Iteration   2: 25721.299 ops/s
[info] # Warmup Iteration   3: 25397.441 ops/s
[info] Iteration   1: 25690.845 ops/s
[info]                  ·gc.alloc.rate:            1173.200 MB/sec
[info]                  ·gc.alloc.rate.norm:       71888.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.297 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 82433.295 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 25955.315 ops/s
[info]                  ·gc.alloc.rate:                                  1185.693 MB/sec
[info]                  ·gc.alloc.rate.norm:                             71889.072 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.038 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.310 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1349.773 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       81837.319 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                242.361 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        17.000 ms
[info] Iteration   3: 26482.343 ops/s
[info]                  ·gc.alloc.rate:                                  1209.536 MB/sec
[info]                  ·gc.alloc.rate.norm:                             71888.017 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.010 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.573 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.147 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       60691.196 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 26439.217 ops/s
[info]                  ·gc.alloc.rate:                                  1207.516 MB/sec
[info]                  ·gc.alloc.rate.norm:                             71888.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.183 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.465 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       81053.184 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 26518.817 ops/s
[info]                  ·gc.alloc.rate:            1211.317 MB/sec
[info]                  ·gc.alloc.rate.norm:       71888.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.107 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 60599.676 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala":
[info]   26217.307 ±(99.9%) 1435.882 ops/s [Average]
[info]   (min, avg, max) = (25690.845, 26217.307, 26518.817), stdev = 372.894
[info]   CI (99.9%): [24781.426, 27653.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1197.452 ±(99.9%) 65.743 MB/sec [Average]
[info]   (min, avg, max) = (1173.200, 1197.452, 1211.317), stdev = 17.073
[info]   CI (99.9%): [1131.709, 1263.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   71888.227 ±(99.9%) 1.819 B/op [Average]
[info]   (min, avg, max) = (71888.015, 71888.227, 71889.072), stdev = 0.472
[info]   CI (99.9%): [71886.409, 71890.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.010 ±(99.9%) 0.062 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.038), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.613 ±(99.9%) 3.762 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.613, 2.310), stdev = 0.977
[info]   CI (99.9%): [≈ 0, 4.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1219.758 ±(99.9%) 698.585 MB/sec [Average]
[info]   (min, avg, max) = (1021.107, 1219.758, 1361.465), stdev = 181.420
[info]   CI (99.9%): [521.173, 1918.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   73322.934 ±(99.9%) 44603.204 B/op [Average]
[info]   (min, avg, max) = (60599.676, 73322.934, 82433.295), stdev = 11583.310
[info]   CI (99.9%): [28719.731, 117926.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.884 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   48.472 ±(99.9%) 417.361 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 48.472, 242.361), stdev = 108.387
[info]   CI (99.9%): [≈ 0, 465.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.200, 17.000), stdev = 7.596
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala
[info] # Run progress: 37.27% complete, ETA 00:44:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 233293.777 ops/s
[info] # Warmup Iteration   2: 263933.092 ops/s
[info] # Warmup Iteration   3: 260957.046 ops/s
[info] Iteration   1: 264241.066 ops/s
[info]                  ·gc.alloc.rate:            687.546 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.303 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4023.066 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 259732.998 ops/s
[info]                  ·gc.alloc.rate:            675.991 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.496 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4093.004 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 259520.672 ops/s
[info]                  ·gc.alloc.rate:            675.292 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.336 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4096.268 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 266663.805 ops/s
[info]                  ·gc.alloc.rate:            694.198 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1013.498 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5979.978 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 263700.768 ops/s
[info]                  ·gc.alloc.rate:                   686.176 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             675.391 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4031.624 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 15.904 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala":
[info]   262771.862 ±(99.9%) 11864.354 ops/s [Average]
[info]   (min, avg, max) = (259520.672, 262771.862, 266663.805), stdev = 3081.135
[info]   CI (99.9%): [250907.508, 274636.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   683.841 ±(99.9%) 31.114 MB/sec [Average]
[info]   (min, avg, max) = (675.292, 683.841, 694.198), stdev = 8.080
[info]   CI (99.9%): [652.726, 714.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.002, 4096.002, 4096.002), stdev = 0.001
[info]   CI (99.9%): [4096.001, 4096.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   743.005 ±(99.9%) 582.258 MB/sec [Average]
[info]   (min, avg, max) = (675.303, 743.005, 1013.498), stdev = 151.211
[info]   CI (99.9%): [160.747, 1325.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   4444.788 ±(99.9%) 3307.175 B/op [Average]
[info]   (min, avg, max) = (4023.066, 4444.788, 5979.978), stdev = 858.863
[info]   CI (99.9%): [1137.613, 7751.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.533 ±(99.9%) 4.588 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.533, 2.664), stdev = 1.191
[info]   CI (99.9%): [≈ 0, 5.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   3.181 ±(99.9%) 27.387 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.181, 15.904), stdev = 7.112
[info]   CI (99.9%): [≈ 0, 30.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.400, 9.000), stdev = 1.517
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson
[info] # Run progress: 37.58% complete, ETA 00:44:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7136.790 ops/s
[info] # Warmup Iteration   2: 15224.159 ops/s
[info] # Warmup Iteration   3: 15469.903 ops/s
[info] Iteration   1: 15476.073 ops/s
[info]                  ·gc.alloc.rate:                                  1592.886 MB/sec
[info]                  ·gc.alloc.rate.norm:                             162024.026 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.087 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 8.881 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1685.491 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       171443.531 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                406.425 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        18.000 ms
[info] Iteration   2: 15347.177 ops/s
[info]                  ·gc.alloc.rate:                                  1579.755 MB/sec
[info]                  ·gc.alloc.rate.norm:                             162024.979 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.015 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.507 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.728 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       174534.963 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 15722.032 ops/s
[info]                  ·gc.alloc.rate:                                  1618.368 MB/sec
[info]                  ·gc.alloc.rate.norm:                             162024.026 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.553 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.407 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       136298.209 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 15723.850 ops/s
[info]                  ·gc.alloc.rate:                                  1618.752 MB/sec
[info]                  ·gc.alloc.rate.norm:                             162024.028 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.394 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.946 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       170351.096 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 15690.757 ops/s
[info]                  ·gc.alloc.rate:                                  1615.169 MB/sec
[info]                  ·gc.alloc.rate.norm:                             162024.033 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.349 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.750 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       170709.295 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson":
[info]   15591.978 ±(99.9%) 659.751 ops/s [Average]
[info]   (min, avg, max) = (15347.177, 15591.978, 15723.850), stdev = 171.335
[info]   CI (99.9%): [14932.227, 16251.729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1604.986 ±(99.9%) 68.214 MB/sec [Average]
[info]   (min, avg, max) = (1579.755, 1604.986, 1618.752), stdev = 17.715
[info]   CI (99.9%): [1536.772, 1673.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   162024.218 ±(99.9%) 1.637 B/op [Average]
[info]   (min, avg, max) = (162024.026, 162024.218, 162024.979), stdev = 0.425
[info]   CI (99.9%): [162022.581, 162025.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.023 ±(99.9%) 0.140 MB/sec [Average]
[info]   (min, avg, max) = (0.003, 0.023, 0.087), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.337 ±(99.9%) 14.203 B/op [Average]
[info]   (min, avg, max) = (0.349, 2.337, 8.881), stdev = 3.689
[info]   CI (99.9%): [≈ 0, 16.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1630.464 ±(99.9%) 579.805 MB/sec [Average]
[info]   (min, avg, max) = (1361.407, 1630.464, 1701.946), stdev = 150.574
[info]   CI (99.9%): [1050.659, 2210.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   164667.419 ±(99.9%) 61396.480 B/op [Average]
[info]   (min, avg, max) = (136298.209, 164667.419, 174534.963), stdev = 15944.471
[info]   CI (99.9%): [103270.939, 226063.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   81.285 ±(99.9%) 699.888 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 81.285, 406.425), stdev = 181.759
[info]   CI (99.9%): [≈ 0, 781.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.800, 18.000), stdev = 6.261
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce
[info] # Run progress: 37.88% complete, ETA 00:43:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38627.571 ops/s
[info] # Warmup Iteration   2: 50779.541 ops/s
[info] # Warmup Iteration   3: 50402.340 ops/s
[info] Iteration   1: 51434.284 ops/s
[info]                  ·gc.alloc.rate:                   1247.750 MB/sec
[info]                  ·gc.alloc.rate.norm:              38176.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1011.992 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        30962.773 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 20.384 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 51306.850 ops/s
[info]                  ·gc.alloc.rate:                                  1244.211 MB/sec
[info]                  ·gc.alloc.rate.norm:                             38176.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.055 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.696 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1351.294 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       41461.603 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                102.173 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   3: 52027.753 ops/s
[info]                  ·gc.alloc.rate:                                  1261.934 MB/sec
[info]                  ·gc.alloc.rate.norm:                             38176.008 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.018 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.543 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.543 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       41189.379 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 51771.446 ops/s
[info]                  ·gc.alloc.rate:            1255.658 MB/sec
[info]                  ·gc.alloc.rate.norm:       38176.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.102 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 31044.767 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   5: 51601.725 ops/s
[info]                  ·gc.alloc.rate:            1251.493 MB/sec
[info]                  ·gc.alloc.rate.norm:       38176.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.292 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 41525.349 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce":
[info]   51628.412 ±(99.9%) 1092.071 ops/s [Average]
[info]   (min, avg, max) = (51306.850, 51628.412, 52027.753), stdev = 283.607
[info]   CI (99.9%): [50536.341, 52720.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1252.209 ±(99.9%) 26.596 MB/sec [Average]
[info]   (min, avg, max) = (1244.211, 1252.209, 1261.934), stdev = 6.907
[info]   CI (99.9%): [1225.613, 1278.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   38176.008 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (38176.008, 38176.008, 38176.009), stdev = 0.001
[info]   CI (99.9%): [38176.007, 38176.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.015 ±(99.9%) 0.092 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.055), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.448 ±(99.9%) 2.836 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.448, 1.696), stdev = 0.736
[info]   CI (99.9%): [≈ 0, 3.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1221.444 ±(99.9%) 720.526 MB/sec [Average]
[info]   (min, avg, max) = (1011.992, 1221.444, 1361.543), stdev = 187.118
[info]   CI (99.9%): [500.918, 1941.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   37236.774 ±(99.9%) 21915.559 B/op [Average]
[info]   (min, avg, max) = (30962.773, 37236.774, 41525.349), stdev = 5691.401
[info]   CI (99.9%): [15321.215, 59152.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   24.511 ±(99.9%) 170.592 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 24.511, 102.173), stdev = 44.302
[info]   CI (99.9%): [≈ 0, 195.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.000, 11.000), stdev = 4.183
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala
[info] # Run progress: 38.18% complete, ETA 00:43:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 71380.500 ops/s
[info] # Warmup Iteration   2: 111125.616 ops/s
[info] # Warmup Iteration   3: 112027.892 ops/s
[info] Iteration   1: 114313.294 ops/s
[info]                  ·gc.alloc.rate:            968.744 MB/sec
[info]                  ·gc.alloc.rate.norm:       13336.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.309 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13894.437 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 113403.137 ops/s
[info]                  ·gc.alloc.rate:            960.769 MB/sec
[info]                  ·gc.alloc.rate.norm:       13336.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.040 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14006.036 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 113770.867 ops/s
[info]                  ·gc.alloc.rate:                                  963.917 MB/sec
[info]                  ·gc.alloc.rate.norm:                             13336.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.092 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.273 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.051 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       14015.784 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                55.289 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   4: 115007.557 ops/s
[info]                  ·gc.alloc.rate:                                  974.364 MB/sec
[info]                  ·gc.alloc.rate.norm:                             13336.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.046 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.623 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.692 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9316.543 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        1.000 ms
[info] Iteration   5: 115658.935 ops/s
[info]                  ·gc.alloc.rate:            979.907 MB/sec
[info]                  ·gc.alloc.rate.norm:       13336.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.049 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13895.928 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala":
[info]   114430.758 ±(99.9%) 3522.010 ops/s [Average]
[info]   (min, avg, max) = (113403.137, 114430.758, 115658.935), stdev = 914.655
[info]   CI (99.9%): [110908.748, 117952.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   969.540 ±(99.9%) 29.823 MB/sec [Average]
[info]   (min, avg, max) = (960.769, 969.540, 979.907), stdev = 7.745
[info]   CI (99.9%): [939.717, 999.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   13336.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13336.004, 13336.004, 13336.004), stdev = 0.001
[info]   CI (99.9%): [13336.003, 13336.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.028 ±(99.9%) 0.158 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.092), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.379 ±(99.9%) 2.186 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.379, 1.273), stdev = 0.568
[info]   CI (99.9%): [≈ 0, 2.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   946.628 ±(99.9%) 572.753 MB/sec [Average]
[info]   (min, avg, max) = (680.692, 946.628, 1021.049), stdev = 148.742
[info]   CI (99.9%): [373.875, 1519.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   13025.746 ±(99.9%) 7987.458 B/op [Average]
[info]   (min, avg, max) = (9316.543, 13025.746, 14015.784), stdev = 2074.317
[info]   CI (99.9%): [5038.288, 21013.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   11.058 ±(99.9%) 95.211 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.058, 55.289), stdev = 24.726
[info]   CI (99.9%): [≈ 0, 106.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 7.600, 12.000), stdev = 5.225
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala
[info] # Run progress: 38.48% complete, ETA 00:43:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1146628.578 ops/s
[info] # Warmup Iteration   2: 1360062.100 ops/s
[info] # Warmup Iteration   3: 1406556.749 ops/s
[info] Iteration   1: 1380515.559 ops/s
[info]                  ·gc.alloc.rate:                   1480.332 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.981 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1534.801 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 5.316 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 1374896.709 ops/s
[info]                  ·gc.alloc.rate:                                  1474.363 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1688.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.125 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.143 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.787 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1948.378 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 1371312.189 ops/s
[info]                  ·gc.alloc.rate:                                  1470.554 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1688.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.443 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1562.755 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 1373874.953 ops/s
[info]                  ·gc.alloc.rate:            1473.578 MB/sec
[info]                  ·gc.alloc.rate.norm:       1688.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.714 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1559.859 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 1373902.896 ops/s
[info]                  ·gc.alloc.rate:            1473.640 MB/sec
[info]                  ·gc.alloc.rate.norm:       1688.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1702.195 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1949.802 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala":
[info]   1374900.461 ±(99.9%) 13122.145 ops/s [Average]
[info]   (min, avg, max) = (1371312.189, 1374900.461, 1380515.559), stdev = 3407.779
[info]   CI (99.9%): [1361778.316, 1388022.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1474.494 ±(99.9%) 13.776 MB/sec [Average]
[info]   (min, avg, max) = (1470.554, 1474.494, 1480.332), stdev = 3.578
[info]   CI (99.9%): [1460.718, 1488.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1688.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1688.000, 1688.000, 1688.000), stdev = 0.001
[info]   CI (99.9%): [1688.000, 1688.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.025 ±(99.9%) 0.214 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.125), stdev = 0.055
[info]   CI (99.9%): [≈ 0, 0.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.029 ±(99.9%) 0.244 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.143), stdev = 0.063
[info]   CI (99.9%): [≈ 0, 0.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1494.624 ±(99.9%) 729.338 MB/sec [Average]
[info]   (min, avg, max) = (1345.981, 1494.624, 1702.195), stdev = 189.407
[info]   CI (99.9%): [765.286, 2223.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1711.119 ±(99.9%) 837.550 B/op [Average]
[info]   (min, avg, max) = (1534.801, 1711.119, 1949.802), stdev = 217.509
[info]   CI (99.9%): [873.569, 2548.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.063 ±(99.9%) 9.154 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.063, 5.316), stdev = 2.377
[info]   CI (99.9%): [≈ 0, 10.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 12.000), stdev = 3.782
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 38.79% complete, ETA 00:43:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 618949.818 ops/s
[info] # Warmup Iteration   2: 672930.568 ops/s
[info] # Warmup Iteration   3: 676039.261 ops/s
[info] Iteration   1: 676308.073 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 674846.270 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 671139.438 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 673950.926 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 661808.987 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc":
[info]   671610.739 ±(99.9%) 22312.691 ops/s [Average]
[info]   (min, avg, max) = (661808.987, 671610.739, 676308.073), stdev = 5794.535
[info]   CI (99.9%): [649298.048, 693923.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson
[info] # Run progress: 39.09% complete, ETA 00:43:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 39083.808 ops/s
[info] # Warmup Iteration   2: 55593.687 ops/s
[info] # Warmup Iteration   3: 55719.952 ops/s
[info] Iteration   1: 55088.624 ops/s
[info]                  ·gc.alloc.rate:            1281.335 MB/sec
[info]                  ·gc.alloc.rate.norm:       36608.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.606 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 38444.234 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 56660.929 ops/s
[info]                  ·gc.alloc.rate:                                  1317.873 MB/sec
[info]                  ·gc.alloc.rate.norm:                             36608.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.144 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1353.554 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       37599.154 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                111.021 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   3: 56677.782 ops/s
[info]                  ·gc.alloc.rate:                                  1318.157 MB/sec
[info]                  ·gc.alloc.rate.norm:                             36608.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.028 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.770 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.384 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       37808.519 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 57140.565 ops/s
[info]                  ·gc.alloc.rate:            1329.318 MB/sec
[info]                  ·gc.alloc.rate.norm:       36608.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.765 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 37501.563 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 57261.127 ops/s
[info]                  ·gc.alloc.rate:                                  1332.158 MB/sec
[info]                  ·gc.alloc.rate.norm:                             36608.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.379 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       28067.731 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson":
[info]   56565.806 ±(99.9%) 3344.452 ops/s [Average]
[info]   (min, avg, max) = (55088.624, 56565.806, 57261.127), stdev = 868.544
[info]   CI (99.9%): [53221.354, 59910.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1315.768 ±(99.9%) 78.159 MB/sec [Average]
[info]   (min, avg, max) = (1281.335, 1315.768, 1332.158), stdev = 20.298
[info]   CI (99.9%): [1237.609, 1393.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   36608.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (36608.007, 36608.007, 36608.008), stdev = 0.001
[info]   CI (99.9%): [36608.006, 36608.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.034 ±(99.9%) 0.241 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.034, 0.144), stdev = 0.063
[info]   CI (99.9%): [≈ 0, 0.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.958 ±(99.9%) 6.703 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.958, 4.014), stdev = 1.741
[info]   CI (99.9%): [≈ 0, 7.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1288.738 ±(99.9%) 576.075 MB/sec [Average]
[info]   (min, avg, max) = (1021.379, 1288.738, 1361.765), stdev = 149.605
[info]   CI (99.9%): [712.662, 1864.813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   35884.240 ±(99.9%) 16884.854 B/op [Average]
[info]   (min, avg, max) = (28067.731, 35884.240, 38444.234), stdev = 4384.943
[info]   CI (99.9%): [18999.386, 52769.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   22.204 ±(99.9%) 191.185 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 22.204, 111.021), stdev = 49.650
[info]   CI (99.9%): [≈ 0, 213.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.200, 16.000), stdev = 5.718
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce
[info] # Run progress: 39.39% complete, ETA 00:42:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9180.145 ops/s
[info] # Warmup Iteration   2: 13151.223 ops/s
[info] # Warmup Iteration   3: 13165.257 ops/s
[info] Iteration   1: 13318.712 ops/s
[info]                  ·gc.alloc.rate:                   1188.598 MB/sec
[info]                  ·gc.alloc.rate.norm:              140456.031 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.808 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        159387.960 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 78.710 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 13054.249 ops/s
[info]                  ·gc.alloc.rate:                   1164.626 MB/sec
[info]                  ·gc.alloc.rate.norm:              140456.056 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1012.153 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        122067.513 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.329 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 401.538 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 13226.778 ops/s
[info]                  ·gc.alloc.rate:                                  1180.363 MB/sec
[info]                  ·gc.alloc.rate.norm:                             140456.055 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.027 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.264 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.152 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       121510.848 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 13290.052 ops/s
[info]                  ·gc.alloc.rate:            1185.866 MB/sec
[info]                  ·gc.alloc.rate.norm:       140456.033 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.400 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 161246.565 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 13316.226 ops/s
[info]                  ·gc.alloc.rate:            1188.209 MB/sec
[info]                  ·gc.alloc.rate.norm:       140456.038 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.993 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 120689.767 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce":
[info]   13241.203 ±(99.9%) 426.980 ops/s [Average]
[info]   (min, avg, max) = (13054.249, 13241.203, 13318.712), stdev = 110.885
[info]   CI (99.9%): [12814.223, 13668.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1181.532 ±(99.9%) 38.530 MB/sec [Average]
[info]   (min, avg, max) = (1164.626, 1181.532, 1188.598), stdev = 10.006
[info]   CI (99.9%): [1143.003, 1220.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   140456.043 ±(99.9%) 0.047 B/op [Average]
[info]   (min, avg, max) = (140456.031, 140456.043, 140456.056), stdev = 0.012
[info]   CI (99.9%): [140455.996, 140456.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.005 ±(99.9%) 0.047 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.027), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.653 ±(99.9%) 5.620 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.653, 3.264), stdev = 1.460
[info]   CI (99.9%): [≈ 0, 6.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1152.901 ±(99.9%) 711.117 MB/sec [Average]
[info]   (min, avg, max) = (1012.153, 1152.901, 1361.400), stdev = 184.675
[info]   CI (99.9%): [441.784, 1864.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   136980.531 ±(99.9%) 82092.610 B/op [Average]
[info]   (min, avg, max) = (120689.767, 136980.531, 161246.565), stdev = 21319.190
[info]   CI (99.9%): [54887.921, 219073.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.559 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.329), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   96.050 ±(99.9%) 670.555 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 96.050, 401.538), stdev = 174.141
[info]   CI (99.9%): [≈ 0, 766.604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 12.000), stdev = 4.438
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala
[info] # Run progress: 39.70% complete, ETA 00:42:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7921.149 ops/s
[info] # Warmup Iteration   2: 13763.485 ops/s
[info] # Warmup Iteration   3: 13969.379 ops/s
[info] Iteration   1: 14000.488 ops/s
[info]                  ·gc.alloc.rate:                   1085.404 MB/sec
[info]                  ·gc.alloc.rate.norm:              122032.029 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.304 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        113363.615 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 74.877 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 13622.940 ops/s
[info]                  ·gc.alloc.rate:            1056.135 MB/sec
[info]                  ·gc.alloc.rate.norm:       122036.313 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.035 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 116593.955 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   3: 13660.796 ops/s
[info]                  ·gc.alloc.rate:                                  1059.504 MB/sec
[info]                  ·gc.alloc.rate.norm:                             122064.370 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.085 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 9.827 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.200 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       117190.628 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                460.474 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 13893.141 ops/s
[info]                  ·gc.alloc.rate:                                  1077.480 MB/sec
[info]                  ·gc.alloc.rate.norm:                             122064.029 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.135 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.113 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       115678.397 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 14089.736 ops/s
[info]                  ·gc.alloc.rate:            1092.587 MB/sec
[info]                  ·gc.alloc.rate.norm:       122064.036 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.372 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 152092.630 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala":
[info]   13853.420 ±(99.9%) 792.142 ops/s [Average]
[info]   (min, avg, max) = (13622.940, 13853.420, 14089.736), stdev = 205.717
[info]   CI (99.9%): [13061.278, 14645.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1074.222 ±(99.9%) 61.391 MB/sec [Average]
[info]   (min, avg, max) = (1056.135, 1074.222, 1092.587), stdev = 15.943
[info]   CI (99.9%): [1012.831, 1135.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   122052.156 ±(99.9%) 63.489 B/op [Average]
[info]   (min, avg, max) = (122032.029, 122052.156, 122064.370), stdev = 16.488
[info]   CI (99.9%): [121988.666, 122115.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.017 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.085), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.992 ±(99.9%) 16.867 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.992, 9.827), stdev = 4.380
[info]   CI (99.9%): [≈ 0, 18.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1083.405 ±(99.9%) 598.709 MB/sec [Average]
[info]   (min, avg, max) = (1008.304, 1083.405, 1361.372), stdev = 155.483
[info]   CI (99.9%): [484.695, 1682.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   122983.845 ±(99.9%) 62909.194 B/op [Average]
[info]   (min, avg, max) = (113363.615, 122983.845, 152092.630), stdev = 16337.318
[info]   CI (99.9%): [60074.651, 185893.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.689 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.997), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   107.070 ±(99.9%) 770.905 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 107.070, 460.474), stdev = 200.202
[info]   CI (99.9%): [≈ 0, 877.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.400, 13.000), stdev = 4.827
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala
[info] # Run progress: 40.00% complete, ETA 00:42:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 256212.348 ops/s
[info] # Warmup Iteration   2: 264305.625 ops/s
[info] # Warmup Iteration   3: 272504.624 ops/s
[info] Iteration   1: 272930.875 ops/s
[info]                  ·gc.alloc.rate:            710.158 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.338 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3895.167 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 268093.845 ops/s
[info]                  ·gc.alloc.rate:            697.772 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.529 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3965.435 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 264390.319 ops/s
[info]                  ·gc.alloc.rate:            688.163 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.561 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4020.997 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 264490.422 ops/s
[info]                  ·gc.alloc.rate:            688.276 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.414 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4019.461 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 264074.356 ops/s
[info]                  ·gc.alloc.rate:                   687.305 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             675.503 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4025.670 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.665 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 15.880 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala":
[info]   266795.963 ±(99.9%) 14641.492 ops/s [Average]
[info]   (min, avg, max) = (264074.356, 266795.963, 272930.875), stdev = 3802.349
[info]   CI (99.9%): [252154.471, 281437.455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   694.335 ±(99.9%) 37.847 MB/sec [Average]
[info]   (min, avg, max) = (687.305, 694.335, 710.158), stdev = 9.829
[info]   CI (99.9%): [656.488, 732.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.001, 4096.002, 4096.002), stdev = 0.001
[info]   CI (99.9%): [4096.001, 4096.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   675.469 ±(99.9%) 0.353 MB/sec [Average]
[info]   (min, avg, max) = (675.338, 675.469, 675.561), stdev = 0.092
[info]   CI (99.9%): [675.117, 675.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   3985.346 ±(99.9%) 216.027 B/op [Average]
[info]   (min, avg, max) = (3895.167, 3985.346, 4025.670), stdev = 56.102
[info]   CI (99.9%): [3769.319, 4201.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.533 ±(99.9%) 4.589 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.533, 2.665), stdev = 1.192
[info]   CI (99.9%): [≈ 0, 5.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   3.176 ±(99.9%) 27.347 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.176, 15.880), stdev = 7.102
[info]   CI (99.9%): [≈ 0, 30.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 7.000), stdev = 0.837
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson
[info] # Run progress: 40.30% complete, ETA 00:42:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5070.266 ops/s
[info] # Warmup Iteration   2: 9428.289 ops/s
[info] # Warmup Iteration   3: 9470.160 ops/s
[info] Iteration   1: 9508.984 ops/s
[info]                  ·gc.alloc.rate:            1332.531 MB/sec
[info]                  ·gc.alloc.rate.norm:       220392.043 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1343.534 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 222211.867 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 9672.953 ops/s
[info]                  ·gc.alloc.rate:                                  1354.846 MB/sec
[info]                  ·gc.alloc.rate.norm:                             220392.042 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.091 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 14.831 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.377 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       165496.181 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                650.280 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 9689.152 ops/s
[info]                  ·gc.alloc.rate:                                  1356.686 MB/sec
[info]                  ·gc.alloc.rate.norm:                             220392.042 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.467 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.431 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       221162.867 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 9710.023 ops/s
[info]                  ·gc.alloc.rate:                                  1360.020 MB/sec
[info]                  ·gc.alloc.rate.norm:                             220393.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.213 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.820 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       220684.652 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 9716.106 ops/s
[info]                  ·gc.alloc.rate:                                  1360.906 MB/sec
[info]                  ·gc.alloc.rate.norm:                             220392.042 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.212 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.871 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       220548.399 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson":
[info]   9659.444 ±(99.9%) 330.527 ops/s [Average]
[info]   (min, avg, max) = (9508.984, 9659.444, 9716.106), stdev = 85.837
[info]   CI (99.9%): [9328.916, 9989.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1352.998 ±(99.9%) 45.061 MB/sec [Average]
[info]   (min, avg, max) = (1332.531, 1352.998, 1360.906), stdev = 11.702
[info]   CI (99.9%): [1307.937, 1398.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   220392.237 ±(99.9%) 1.676 B/op [Average]
[info]   (min, avg, max) = (220392.042, 220392.237, 220393.016), stdev = 0.435
[info]   CI (99.9%): [220390.561, 220393.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.019 ±(99.9%) 0.155 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.091), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   3.145 ±(99.9%) 25.164 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.145, 14.831), stdev = 6.535
[info]   CI (99.9%): [≈ 0, 28.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1289.207 ±(99.9%) 585.918 MB/sec [Average]
[info]   (min, avg, max) = (1017.377, 1289.207, 1361.871), stdev = 152.161
[info]   CI (99.9%): [703.289, 1875.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   210020.793 ±(99.9%) 95875.574 B/op [Average]
[info]   (min, avg, max) = (165496.181, 210020.793, 222211.867), stdev = 24898.582
[info]   CI (99.9%): [114145.219, 305896.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.800 ±(99.9%) 6.884 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.800, 3.998), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   130.056 ±(99.9%) 1119.821 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 130.056, 650.280), stdev = 290.814
[info]   CI (99.9%): [≈ 0, 1249.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.000, 16.000), stdev = 5.099
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce
[info] # Run progress: 40.61% complete, ETA 00:41:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27976.369 ops/s
[info] # Warmup Iteration   2: 37048.456 ops/s
[info] # Warmup Iteration   3: 37320.017 ops/s
[info] Iteration   1: 37342.613 ops/s
[info]                  ·gc.alloc.rate:            1161.131 MB/sec
[info]                  ·gc.alloc.rate.norm:       48931.543 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.978 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 42646.040 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 37367.843 ops/s
[info]                  ·gc.alloc.rate:                   1161.853 MB/sec
[info]                  ·gc.alloc.rate.norm:              48928.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.448 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        56785.943 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 140.281 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   3: 37619.862 ops/s
[info]                  ·gc.alloc.rate:                                  1169.328 MB/sec
[info]                  ·gc.alloc.rate.norm:                             48928.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.055 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.313 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.989 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       42721.105 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 37357.684 ops/s
[info]                  ·gc.alloc.rate:                                  1161.589 MB/sec
[info]                  ·gc.alloc.rate.norm:                             48928.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.055 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.829 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       57362.417 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 36666.921 ops/s
[info]                  ·gc.alloc.rate:                                  1140.164 MB/sec
[info]                  ·gc.alloc.rate.norm:                             48928.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.120 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.450 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       43833.634 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce":
[info]   37270.985 ±(99.9%) 1373.117 ops/s [Average]
[info]   (min, avg, max) = (36666.921, 37270.985, 37619.862), stdev = 356.594
[info]   CI (99.9%): [35897.868, 38644.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1158.813 ±(99.9%) 42.211 MB/sec [Average]
[info]   (min, avg, max) = (1140.164, 1158.813, 1169.328), stdev = 10.962
[info]   CI (99.9%): [1116.602, 1201.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   48928.717 ±(99.9%) 6.081 B/op [Average]
[info]   (min, avg, max) = (48928.011, 48928.717, 48931.543), stdev = 1.579
[info]   CI (99.9%): [48922.636, 48934.799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.012 ±(99.9%) 0.094 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.055), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.498 ±(99.9%) 3.913 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.498, 2.313), stdev = 1.016
[info]   CI (99.9%): [≈ 0, 4.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1152.939 ±(99.9%) 711.142 MB/sec [Average]
[info]   (min, avg, max) = (1011.978, 1152.939, 1361.829), stdev = 184.681
[info]   CI (99.9%): [441.796, 1864.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   48669.828 ±(99.9%) 29608.330 B/op [Average]
[info]   (min, avg, max) = (42646.040, 48669.828, 57362.417), stdev = 7689.189
[info]   CI (99.9%): [19061.497, 78278.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   28.056 ±(99.9%) 241.573 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 28.056, 140.281), stdev = 62.736
[info]   CI (99.9%): [≈ 0, 269.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.800, 14.000), stdev = 4.970
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala
[info] # Run progress: 40.91% complete, ETA 00:41:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28085.852 ops/s
[info] # Warmup Iteration   2: 43267.164 ops/s
[info] # Warmup Iteration   3: 43216.021 ops/s
[info] Iteration   1: 43364.230 ops/s
[info]                  ·gc.alloc.rate:            1150.144 MB/sec
[info]                  ·gc.alloc.rate.norm:       41752.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.969 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 36627.147 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 43496.670 ops/s
[info]                  ·gc.alloc.rate:                   1153.779 MB/sec
[info]                  ·gc.alloc.rate.norm:              41752.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.064 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        36515.174 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 144.615 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   3: 44468.050 ops/s
[info]                  ·gc.alloc.rate:                                  1179.586 MB/sec
[info]                  ·gc.alloc.rate.norm:                             41752.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.209 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 7.413 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.499 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       48190.879 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 44377.365 ops/s
[info]                  ·gc.alloc.rate:            1177.249 MB/sec
[info]                  ·gc.alloc.rate.norm:       41752.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.121 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 36214.815 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   5: 43242.581 ops/s
[info]                  ·gc.alloc.rate:            1147.208 MB/sec
[info]                  ·gc.alloc.rate.norm:       41752.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.600 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 49554.677 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala":
[info]   43789.779 ±(99.9%) 2254.962 ops/s [Average]
[info]   (min, avg, max) = (43242.581, 43789.779, 44468.050), stdev = 585.606
[info]   CI (99.9%): [41534.817, 46044.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1161.593 ±(99.9%) 59.899 MB/sec [Average]
[info]   (min, avg, max) = (1147.208, 1161.593, 1179.586), stdev = 15.556
[info]   CI (99.9%): [1101.694, 1221.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   41752.010 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (41752.009, 41752.010, 41752.010), stdev = 0.001
[info]   CI (99.9%): [41752.008, 41752.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.042 ±(99.9%) 0.361 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.209), stdev = 0.094
[info]   CI (99.9%): [≈ 0, 0.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.483 ±(99.9%) 12.765 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.483, 7.413), stdev = 3.315
[info]   CI (99.9%): [≈ 0, 14.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1152.451 ±(99.9%) 735.258 MB/sec [Average]
[info]   (min, avg, max) = (1008.969, 1152.451, 1361.600), stdev = 190.944
[info]   CI (99.9%): [417.193, 1887.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   41420.539 ±(99.9%) 26267.805 B/op [Average]
[info]   (min, avg, max) = (36214.815, 41420.539, 49554.677), stdev = 6821.665
[info]   CI (99.9%): [15152.734, 67688.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   28.923 ±(99.9%) 249.035 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 28.923, 144.615), stdev = 64.674
[info]   CI (99.9%): [≈ 0, 277.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.000, 13.000), stdev = 5.523
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala
[info] # Run progress: 41.21% complete, ETA 00:41:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1472219.230 ops/s
[info] # Warmup Iteration   2: 1636760.686 ops/s
[info] # Warmup Iteration   3: 1689367.600 ops/s
[info] Iteration   1: 1658487.970 ops/s
[info]                  ·gc.alloc.rate:                                  1508.781 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1432.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.076 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.072 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1350.769 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1282.029 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                3.793 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   2: 1686027.641 ops/s
[info]                  ·gc.alloc.rate:                                  1533.906 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1432.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.059 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.055 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.809 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1588.749 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 1686560.207 ops/s
[info]                  ·gc.alloc.rate:                                  1534.826 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1432.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.823 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1270.588 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 1676215.875 ops/s
[info]                  ·gc.alloc.rate:                                  1524.953 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1432.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.822 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1598.089 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 1682147.099 ops/s
[info]                  ·gc.alloc.rate:            1530.672 MB/sec
[info]                  ·gc.alloc.rate.norm:       1432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.757 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1273.973 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala":
[info]   1677887.758 ±(99.9%) 44688.959 ops/s [Average]
[info]   (min, avg, max) = (1658487.970, 1677887.758, 1686560.207), stdev = 11605.581
[info]   CI (99.9%): [1633198.799, 1722576.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1526.628 ±(99.9%) 41.197 MB/sec [Average]
[info]   (min, avg, max) = (1508.781, 1526.628, 1534.826), stdev = 10.699
[info]   CI (99.9%): [1485.430, 1567.825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1432.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1432.000, 1432.000, 1432.000), stdev = 0.001
[info]   CI (99.9%): [1432.000, 1432.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.027 ±(99.9%) 0.142 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.076), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.026 ±(99.9%) 0.135 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.072), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1495.596 ±(99.9%) 725.099 MB/sec [Average]
[info]   (min, avg, max) = (1350.769, 1495.596, 1701.822), stdev = 188.306
[info]   CI (99.9%): [770.497, 2220.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1402.686 ±(99.9%) 670.766 B/op [Average]
[info]   (min, avg, max) = (1270.588, 1402.686, 1598.089), stdev = 174.196
[info]   CI (99.9%): [731.920, 2073.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.759 ±(99.9%) 6.532 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.759, 3.793), stdev = 1.696
[info]   CI (99.9%): [≈ 0, 7.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 10.000), stdev = 2.950
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 41.52% complete, ETA 00:41:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1645880.500 ops/s
[info] # Warmup Iteration   2: 1831634.533 ops/s
[info] # Warmup Iteration   3: 1826399.029 ops/s
[info] Iteration   1: 1831262.859 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1831738.590 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1825305.897 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1826117.821 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1826087.729 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   1828102.579 ±(99.9%) 12027.987 ops/s [Average]
[info]   (min, avg, max) = (1825305.897, 1828102.579, 1831738.590), stdev = 3123.630
[info]   CI (99.9%): [1816074.593, 1840130.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson
[info] # Run progress: 41.82% complete, ETA 00:41:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24213.113 ops/s
[info] # Warmup Iteration   2: 34350.104 ops/s
[info] # Warmup Iteration   3: 34416.501 ops/s
[info] Iteration   1: 34534.724 ops/s
[info]                  ·gc.alloc.rate:            1044.793 MB/sec
[info]                  ·gc.alloc.rate.norm:       47623.625 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.987 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 45991.507 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 35176.018 ops/s
[info]                  ·gc.alloc.rate:            1064.204 MB/sec
[info]                  ·gc.alloc.rate.norm:       47616.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.169 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 45153.563 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 34163.715 ops/s
[info]                  ·gc.alloc.rate:                                  1033.511 MB/sec
[info]                  ·gc.alloc.rate.norm:                             47616.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.087 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.988 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.085 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       46674.981 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                184.122 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   4: 34850.868 ops/s
[info]                  ·gc.alloc.rate:                                  1054.468 MB/sec
[info]                  ·gc.alloc.rate.norm:                             47616.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.047 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.122 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.251 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       46116.046 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 34735.265 ops/s
[info]                  ·gc.alloc.rate:            1051.202 MB/sec
[info]                  ·gc.alloc.rate.norm:       47616.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.905 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 61689.818 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson":
[info]   34692.118 ±(99.9%) 1447.459 ops/s [Average]
[info]   (min, avg, max) = (34163.715, 34692.118, 35176.018), stdev = 375.901
[info]   CI (99.9%): [33244.659, 36139.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1049.636 ±(99.9%) 43.968 MB/sec [Average]
[info]   (min, avg, max) = (1033.511, 1049.636, 1064.204), stdev = 11.418
[info]   CI (99.9%): [1005.668, 1093.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   47617.535 ±(99.9%) 13.110 B/op [Average]
[info]   (min, avg, max) = (47616.012, 47617.535, 47623.625), stdev = 3.405
[info]   CI (99.9%): [47604.424, 47630.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.027 ±(99.9%) 0.151 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.087), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.222 ±(99.9%) 6.925 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.222, 3.988), stdev = 1.799
[info]   CI (99.9%): [≈ 0, 8.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1082.879 ±(99.9%) 600.928 MB/sec [Average]
[info]   (min, avg, max) = (1008.987, 1082.879, 1361.905), stdev = 156.059
[info]   CI (99.9%): [481.951, 1683.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   49125.183 ±(99.9%) 27127.379 B/op [Average]
[info]   (min, avg, max) = (45153.563, 49125.183, 61689.818), stdev = 7044.894
[info]   CI (99.9%): [21997.803, 76252.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   36.824 ±(99.9%) 317.070 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 36.824, 184.122), stdev = 82.342
[info]   CI (99.9%): [≈ 0, 353.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.600, 12.000), stdev = 4.336
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce
[info] # Run progress: 42.12% complete, ETA 00:40:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 102848.831 ops/s
[info] # Warmup Iteration   2: 128128.699 ops/s
[info] # Warmup Iteration   3: 127750.133 ops/s
[info] Iteration   1: 129806.608 ops/s
[info]                  ·gc.alloc.rate:                                  2224.547 MB/sec
[info]                  ·gc.alloc.rate.norm:                             26976.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.017 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.210 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.072 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       24763.216 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 129305.825 ops/s
[info]                  ·gc.alloc.rate:                                  2216.588 MB/sec
[info]                  ·gc.alloc.rate.norm:                             26976.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.055 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2383.108 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       29002.562 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 128787.009 ops/s
[info]                  ·gc.alloc.rate:                                  2207.049 MB/sec
[info]                  ·gc.alloc.rate.norm:                             26976.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.060 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.084 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       24959.699 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 129818.419 ops/s
[info]                  ·gc.alloc.rate:                                  2225.463 MB/sec
[info]                  ·gc.alloc.rate.norm:                             26976.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.115 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2383.214 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       28888.193 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 129380.595 ops/s
[info]                  ·gc.alloc.rate:            2217.812 MB/sec
[info]                  ·gc.alloc.rate.norm:       26976.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2042.623 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 24845.123 B/op
[info]                  ·gc.count:                 6.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce":
[info]   129419.691 ±(99.9%) 1637.620 ops/s [Average]
[info]   (min, avg, max) = (128787.009, 129419.691, 129818.419), stdev = 425.285
[info]   CI (99.9%): [127782.071, 131057.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate":
[info]   2218.292 ±(99.9%) 28.563 MB/sec [Average]
[info]   (min, avg, max) = (2207.049, 2218.292, 2225.463), stdev = 7.418
[info]   CI (99.9%): [2189.729, 2246.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   26976.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (26976.003, 26976.003, 26976.003), stdev = 0.001
[info]   CI (99.9%): [26976.003, 26976.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.007 ±(99.9%) 0.025 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.017), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.088 ±(99.9%) 0.305 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.088, 0.210), stdev = 0.079
[info]   CI (99.9%): [≈ 0, 0.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2178.620 ±(99.9%) 718.991 MB/sec [Average]
[info]   (min, avg, max) = (2042.072, 2178.620, 2383.214), stdev = 186.720
[info]   CI (99.9%): [1459.630, 2897.611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   26491.759 ±(99.9%) 8630.407 B/op [Average]
[info]   (min, avg, max) = (24763.216, 26491.759, 29002.562), stdev = 2241.289
[info]   CI (99.9%): [17861.351, 35122.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala
[info] # Run progress: 42.42% complete, ETA 00:40:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 145944.099 ops/s
[info] # Warmup Iteration   2: 218626.030 ops/s
[info] # Warmup Iteration   3: 220849.154 ops/s
[info] Iteration   1: 225931.836 ops/s
[info]                  ·gc.alloc.rate:            500.689 MB/sec
[info]                  ·gc.alloc.rate.norm:       3488.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.745 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4686.612 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 227001.889 ops/s
[info]                  ·gc.alloc.rate:            503.045 MB/sec
[info]                  ·gc.alloc.rate.norm:       3488.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.373 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2332.334 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 223737.283 ops/s
[info]                  ·gc.alloc.rate:            495.849 MB/sec
[info]                  ·gc.alloc.rate.norm:       3488.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.788 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4732.666 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 226918.155 ops/s
[info]                  ·gc.alloc.rate:            502.926 MB/sec
[info]                  ·gc.alloc.rate.norm:       3488.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.414 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2333.167 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 224724.723 ops/s
[info]                  ·gc.alloc.rate:            497.932 MB/sec
[info]                  ·gc.alloc.rate.norm:       3488.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.654 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4711.925 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala":
[info]   225662.777 ±(99.9%) 5455.514 ops/s [Average]
[info]   (min, avg, max) = (223737.283, 225662.777, 227001.889), stdev = 1416.780
[info]   CI (99.9%): [220207.263, 231118.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   500.088 ±(99.9%) 12.143 MB/sec [Average]
[info]   (min, avg, max) = (495.849, 500.088, 503.045), stdev = 3.154
[info]   CI (99.9%): [487.945, 512.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3488.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3488.002, 3488.002, 3488.002), stdev = 0.001
[info]   CI (99.9%): [3488.002, 3488.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   538.195 ±(99.9%) 709.361 MB/sec [Average]
[info]   (min, avg, max) = (336.373, 538.195, 672.788), stdev = 184.219
[info]   CI (99.9%): [≈ 0, 1247.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   3759.341 ±(99.9%) 5015.059 B/op [Average]
[info]   (min, avg, max) = (2332.334, 3759.341, 4732.666), stdev = 1302.395
[info]   CI (99.9%): [≈ 0, 8774.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.600, 9.000), stdev = 2.408
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala
[info] # Run progress: 42.73% complete, ETA 00:40:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 416136.471 ops/s
[info] # Warmup Iteration   2: 444760.113 ops/s
[info] # Warmup Iteration   3: 451742.955 ops/s
[info] Iteration   1: 452312.356 ops/s
[info]                  ·gc.alloc.rate:            570.032 MB/sec
[info]                  ·gc.alloc.rate.norm:       1984.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.921 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2345.590 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 452406.763 ops/s
[info]                  ·gc.alloc.rate:            570.213 MB/sec
[info]                  ·gc.alloc.rate.norm:       1984.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.024 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2345.201 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 451319.450 ops/s
[info]                  ·gc.alloc.rate:            568.835 MB/sec
[info]                  ·gc.alloc.rate.norm:       1984.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.017 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2350.859 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 422450.077 ops/s
[info]                  ·gc.alloc.rate:            532.473 MB/sec
[info]                  ·gc.alloc.rate.norm:       1984.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.022 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1255.747 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 451574.442 ops/s
[info]                  ·gc.alloc.rate:            569.232 MB/sec
[info]                  ·gc.alloc.rate.norm:       1984.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.104 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2349.521 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala":
[info]   446012.618 ±(99.9%) 50751.921 ops/s [Average]
[info]   (min, avg, max) = (422450.077, 446012.618, 452406.763), stdev = 13180.113
[info]   CI (99.9%): [395260.697, 496764.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   562.157 ±(99.9%) 63.934 MB/sec [Average]
[info]   (min, avg, max) = (532.473, 562.157, 570.213), stdev = 16.603
[info]   CI (99.9%): [498.223, 626.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1984.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1984.001, 1984.001, 1984.001), stdev = 0.001
[info]   CI (99.9%): [1984.001, 1984.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   606.618 ±(99.9%) 580.325 MB/sec [Average]
[info]   (min, avg, max) = (337.022, 606.618, 674.104), stdev = 150.709
[info]   CI (99.9%): [26.292, 1186.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   2129.384 ±(99.9%) 1880.592 B/op [Average]
[info]   (min, avg, max) = (1255.747, 2129.384, 2350.859), stdev = 488.384
[info]   CI (99.9%): [248.791, 4009.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 6.000), stdev = 1.304
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson
[info] # Run progress: 43.03% complete, ETA 00:40:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36973.147 ops/s
[info] # Warmup Iteration   2: 61986.260 ops/s
[info] # Warmup Iteration   3: 63433.512 ops/s
[info] Iteration   1: 64924.706 ops/s
[info]                  ·gc.alloc.rate:                                  2896.368 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70232.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.018 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.430 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.434 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       66014.394 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   2: 63337.947 ops/s
[info]                  ·gc.alloc.rate:                                  2826.035 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70232.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.195 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.134 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       76124.343 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 64611.770 ops/s
[info]                  ·gc.alloc.rate:                                  2883.801 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70232.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.019 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.468 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.624 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       66331.064 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 64343.226 ops/s
[info]                  ·gc.alloc.rate:                                  2870.595 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70232.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.092 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3062.890 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       74936.693 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   5: 64781.508 ops/s
[info]                  ·gc.alloc.rate:                                  2890.500 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70232.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.129 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.831 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       66158.052 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson":
[info]   64399.831 ±(99.9%) 2432.993 ops/s [Average]
[info]   (min, avg, max) = (63337.947, 64399.831, 64924.706), stdev = 631.841
[info]   CI (99.9%): [61966.838, 66832.825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2873.460 ±(99.9%) 108.562 MB/sec [Average]
[info]   (min, avg, max) = (2826.035, 2873.460, 2896.368), stdev = 28.193
[info]   CI (99.9%): [2764.898, 2982.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   70232.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (70232.006, 70232.007, 70232.007), stdev = 0.001
[info]   CI (99.9%): [70232.005, 70232.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.011 ±(99.9%) 0.028 MB/sec [Average]
[info]   (min, avg, max) = (0.004, 0.011, 0.019), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.263 ±(99.9%) 0.672 B/op [Average]
[info]   (min, avg, max) = (0.092, 0.263, 0.468), stdev = 0.175
[info]   CI (99.9%): [≈ 0, 0.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2858.983 ±(99.9%) 717.194 MB/sec [Average]
[info]   (min, avg, max) = (2722.434, 2858.983, 3063.134), stdev = 186.253
[info]   CI (99.9%): [2141.788, 3576.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   69912.910 ±(99.9%) 19817.475 B/op [Average]
[info]   (min, avg, max) = (66014.394, 69912.910, 76124.343), stdev = 5146.535
[info]   CI (99.9%): [50095.435, 89730.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.count":
[info]   42.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.400, 9.000), stdev = 0.548
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.000, 8.000), stdev = 0.707
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce
[info] # Run progress: 43.33% complete, ETA 00:40:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 168955.042 ops/s
[info] # Warmup Iteration   2: 211216.347 ops/s
[info] # Warmup Iteration   3: 216630.224 ops/s
[info] Iteration   1: 215943.642 ops/s
[info]                  ·gc.alloc.rate:                                  1526.626 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11128.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.039 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.285 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1688.425 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12307.401 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                24.275 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        14.000 ms
[info] Iteration   2: 216026.061 ops/s
[info]                  ·gc.alloc.rate:                                  1527.215 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11128.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.046 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.332 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.405 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9919.834 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   3: 213457.341 ops/s
[info]                  ·gc.alloc.rate:                                  1509.525 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11128.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.317 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12549.238 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 219706.960 ops/s
[info]                  ·gc.alloc.rate:                                  1553.517 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11128.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.654 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9753.663 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 219356.575 ops/s
[info]                  ·gc.alloc.rate:                                  1551.255 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11128.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.292 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12211.473 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce":
[info]   216898.116 ±(99.9%) 10086.199 ops/s [Average]
[info]   (min, avg, max) = (213457.341, 216898.116, 219706.960), stdev = 2619.354
[info]   CI (99.9%): [206811.917, 226984.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1533.627 ±(99.9%) 71.456 MB/sec [Average]
[info]   (min, avg, max) = (1509.525, 1533.627, 1553.517), stdev = 18.557
[info]   CI (99.9%): [1462.171, 1605.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   11128.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11128.002, 11128.002, 11128.002), stdev = 0.001
[info]   CI (99.9%): [11128.002, 11128.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.018 ±(99.9%) 0.084 MB/sec [Average]
[info]   (min, avg, max) = (0.002, 0.018, 0.046), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.135 ±(99.9%) 0.615 B/op [Average]
[info]   (min, avg, max) = (0.017, 0.135, 0.332), stdev = 0.160
[info]   CI (99.9%): [≈ 0, 0.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1563.218 ±(99.9%) 709.301 MB/sec [Average]
[info]   (min, avg, max) = (1361.405, 1563.218, 1702.317), stdev = 184.203
[info]   CI (99.9%): [853.917, 2272.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   11348.322 ±(99.9%) 5339.281 B/op [Average]
[info]   (min, avg, max) = (9753.663, 11348.322, 12549.238), stdev = 1386.594
[info]   CI (99.9%): [6009.041, 16687.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   4.855 ±(99.9%) 41.803 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.855, 24.275), stdev = 10.856
[info]   CI (99.9%): [≈ 0, 46.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 14.000), stdev = 4.722
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala
[info] # Run progress: 43.64% complete, ETA 00:39:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 302102.627 ops/s
[info] # Warmup Iteration   2: 449332.946 ops/s
[info] # Warmup Iteration   3: 444719.270 ops/s
[info] Iteration   1: 453202.344 ops/s
[info]                  ·gc.alloc.rate:            465.247 MB/sec
[info]                  ·gc.alloc.rate.norm:       1616.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.667 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2336.456 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 455618.599 ops/s
[info]                  ·gc.alloc.rate:            467.697 MB/sec
[info]                  ·gc.alloc.rate.norm:       1616.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.309 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1162.027 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 455777.998 ops/s
[info]                  ·gc.alloc.rate:            467.886 MB/sec
[info]                  ·gc.alloc.rate.norm:       1616.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.329 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1161.626 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 453192.739 ops/s
[info]                  ·gc.alloc.rate:            465.405 MB/sec
[info]                  ·gc.alloc.rate.norm:       1616.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.911 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2336.513 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 455528.265 ops/s
[info]                  ·gc.alloc.rate:            467.612 MB/sec
[info]                  ·gc.alloc.rate.norm:       1616.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.315 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1162.259 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala":
[info]   454663.989 ±(99.9%) 5166.272 ops/s [Average]
[info]   (min, avg, max) = (453192.739, 454663.989, 455777.998), stdev = 1341.664
[info]   CI (99.9%): [449497.718, 459830.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   466.769 ±(99.9%) 5.092 MB/sec [Average]
[info]   (min, avg, max) = (465.247, 466.769, 467.886), stdev = 1.322
[info]   CI (99.9%): [461.677, 471.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1616.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1616.001, 1616.001, 1616.001), stdev = 0.001
[info]   CI (99.9%): [1616.001, 1616.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   470.906 ±(99.9%) 709.645 MB/sec [Average]
[info]   (min, avg, max) = (336.309, 470.906, 672.911), stdev = 184.293
[info]   CI (99.9%): [≈ 0, 1180.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1631.776 ±(99.9%) 2477.149 B/op [Average]
[info]   (min, avg, max) = (1161.626, 1631.776, 2336.513), stdev = 643.308
[info]   CI (99.9%): [≈ 0, 4108.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 9.000), stdev = 2.490
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala
[info] # Run progress: 43.94% complete, ETA 00:39:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 514139.899 ops/s
[info] # Warmup Iteration   2: 575006.421 ops/s
[info] # Warmup Iteration   3: 607789.027 ops/s
[info] Iteration   1: 611907.338 ops/s
[info]                  ·gc.alloc.rate:            478.893 MB/sec
[info]                  ·gc.alloc.rate.norm:       1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.328 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 865.238 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 609376.730 ops/s
[info]                  ·gc.alloc.rate:            476.905 MB/sec
[info]                  ·gc.alloc.rate.norm:       1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.332 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 868.854 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 595427.669 ops/s
[info]                  ·gc.alloc.rate:                   465.982 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.320 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1780.178 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.761 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 595346.288 ops/s
[info]                  ·gc.alloc.rate:            465.994 MB/sec
[info]                  ·gc.alloc.rate.norm:       1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.048 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 891.091 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 596346.608 ops/s
[info]                  ·gc.alloc.rate:            466.748 MB/sec
[info]                  ·gc.alloc.rate.norm:       1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.736 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1775.716 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala":
[info]   601680.927 ±(99.9%) 31723.483 ops/s [Average]
[info]   (min, avg, max) = (595346.288, 601680.927, 611907.338), stdev = 8238.488
[info]   CI (99.9%): [569957.444, 633404.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   470.904 ±(99.9%) 24.764 MB/sec [Average]
[info]   (min, avg, max) = (465.982, 470.904, 478.893), stdev = 6.431
[info]   CI (99.9%): [446.140, 495.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1232.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1232.001, 1232.001, 1232.001), stdev = 0.001
[info]   CI (99.9%): [1232.001, 1232.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   471.153 ±(99.9%) 709.622 MB/sec [Average]
[info]   (min, avg, max) = (336.328, 471.153, 673.320), stdev = 184.287
[info]   CI (99.9%): [≈ 0, 1180.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1236.215 ±(99.9%) 1904.654 B/op [Average]
[info]   (min, avg, max) = (865.238, 1236.215, 1780.178), stdev = 494.633
[info]   CI (99.9%): [≈ 0, 3140.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.352 ±(99.9%) 3.032 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.352, 1.761), stdev = 0.787
[info]   CI (99.9%): [≈ 0, 3.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 6.000), stdev = 1.414
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 44.24% complete, ETA 00:39:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 575712.102 ops/s
[info] # Warmup Iteration   2: 627151.496 ops/s
[info] # Warmup Iteration   3: 627376.619 ops/s
[info] Iteration   1: 631744.750 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 632087.474 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 626739.743 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 629346.441 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 630163.508 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc":
[info]   630016.383 ±(99.9%) 8277.431 ops/s [Average]
[info]   (min, avg, max) = (626739.743, 630016.383, 632087.474), stdev = 2149.623
[info]   CI (99.9%): [621738.952, 638293.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson
[info] # Run progress: 44.55% complete, ETA 00:39:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16897.974 ops/s
[info] # Warmup Iteration   2: 23678.876 ops/s
[info] # Warmup Iteration   3: 24092.674 ops/s
[info] Iteration   1: 24021.065 ops/s
[info]                  ·gc.alloc.rate:                   1451.339 MB/sec
[info]                  ·gc.alloc.rate.norm:              95104.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1681.776 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        110204.137 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 261.871 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         20.000 ms
[info] Iteration   2: 24189.258 ops/s
[info]                  ·gc.alloc.rate:                                  1461.531 MB/sec
[info]                  ·gc.alloc.rate.norm:                             95102.493 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.164 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 10.660 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.411 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       88587.639 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 24464.550 ops/s
[info]                  ·gc.alloc.rate:                                  1478.070 MB/sec
[info]                  ·gc.alloc.rate.norm:                             95088.017 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.169 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.550 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       87592.028 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 24332.273 ops/s
[info]                  ·gc.alloc.rate:                                  1469.816 MB/sec
[info]                  ·gc.alloc.rate.norm:                             95088.017 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.613 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       110083.892 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 24404.022 ops/s
[info]                  ·gc.alloc.rate:                                  1474.440 MB/sec
[info]                  ·gc.alloc.rate.norm:                             95088.017 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.169 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.546 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       87807.339 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson":
[info]   24282.233 ±(99.9%) 687.287 ops/s [Average]
[info]   (min, avg, max) = (24021.065, 24282.233, 24464.550), stdev = 178.486
[info]   CI (99.9%): [23594.947, 24969.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1467.039 ±(99.9%) 41.338 MB/sec [Average]
[info]   (min, avg, max) = (1451.339, 1467.039, 1478.070), stdev = 10.735
[info]   CI (99.9%): [1425.702, 1508.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   95094.112 ±(99.9%) 32.207 B/op [Average]
[info]   (min, avg, max) = (95088.017, 95094.112, 95104.018), stdev = 8.364
[info]   CI (99.9%): [95061.905, 95126.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.034 ±(99.9%) 0.280 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.034, 0.164), stdev = 0.073
[info]   CI (99.9%): [≈ 0, 0.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.202 ±(99.9%) 18.209 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.202, 10.660), stdev = 4.729
[info]   CI (99.9%): [≈ 0, 20.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1493.579 ±(99.9%) 696.926 MB/sec [Average]
[info]   (min, avg, max) = (1361.411, 1493.579, 1701.613), stdev = 180.990
[info]   CI (99.9%): [796.653, 2190.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   96855.007 ±(99.9%) 46734.791 B/op [Average]
[info]   (min, avg, max) = (87592.028, 96855.007, 110204.137), stdev = 12136.877
[info]   CI (99.9%): [50120.216, 143589.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   52.374 ±(99.9%) 450.958 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 52.374, 261.871), stdev = 117.112
[info]   CI (99.9%): [≈ 0, 503.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.800, 20.000), stdev = 7.396
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce
[info] # Run progress: 44.85% complete, ETA 00:38:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4288.600 ops/s
[info] # Warmup Iteration   2: 6231.517 ops/s
[info] # Warmup Iteration   3: 6494.254 ops/s
[info] Iteration   1: 6503.163 ops/s
[info]                  ·gc.alloc.rate:            1000.826 MB/sec
[info]                  ·gc.alloc.rate.norm:       242272.063 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.833 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 244694.599 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 6489.157 ops/s
[info]                  ·gc.alloc.rate:                   998.814 MB/sec
[info]                  ·gc.alloc.rate.norm:              242272.063 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1010.977 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        245222.365 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 161.543 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 6466.123 ops/s
[info]                  ·gc.alloc.rate:                   995.164 MB/sec
[info]                  ·gc.alloc.rate.norm:              242272.068 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1011.687 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        246294.564 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 810.713 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 6551.617 ops/s
[info]                  ·gc.alloc.rate:                                  1008.353 MB/sec
[info]                  ·gc.alloc.rate.norm:                             242272.062 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.045 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 10.796 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.966 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       245302.458 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 6554.785 ops/s
[info]                  ·gc.alloc.rate:                                  1008.920 MB/sec
[info]                  ·gc.alloc.rate.norm:                             242272.072 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.010 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.518 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.917 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       245152.815 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce":
[info]   6512.969 ±(99.9%) 150.373 ops/s [Average]
[info]   (min, avg, max) = (6466.123, 6512.969, 6554.785), stdev = 39.051
[info]   CI (99.9%): [6362.596, 6663.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1002.415 ±(99.9%) 23.236 MB/sec [Average]
[info]   (min, avg, max) = (995.164, 1002.415, 1008.920), stdev = 6.034
[info]   CI (99.9%): [979.179, 1025.652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   242272.066 ±(99.9%) 0.017 B/op [Average]
[info]   (min, avg, max) = (242272.062, 242272.066, 242272.072), stdev = 0.004
[info]   CI (99.9%): [242272.049, 242272.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.011 ±(99.9%) 0.075 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.045), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.663 ±(99.9%) 18.003 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.663, 10.796), stdev = 4.675
[info]   CI (99.9%): [≈ 0, 20.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1015.076 ±(99.9%) 20.656 MB/sec [Average]
[info]   (min, avg, max) = (1010.833, 1015.076, 1020.966), stdev = 5.364
[info]   CI (99.9%): [994.420, 1035.732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   245333.360 ±(99.9%) 2259.937 B/op [Average]
[info]   (min, avg, max) = (244694.599, 245333.360, 246294.564), stdev = 586.899
[info]   CI (99.9%): [243073.423, 247593.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   194.451 ±(99.9%) 1353.619 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 194.451, 810.713), stdev = 351.531
[info]   CI (99.9%): [≈ 0, 1548.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.800, 10.000), stdev = 3.962
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala
[info] # Run progress: 45.15% complete, ETA 00:38:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2986.539 ops/s
[info] # Warmup Iteration   2: 6402.454 ops/s
[info] # Warmup Iteration   3: 6751.433 ops/s
[info] Iteration   1: 6725.833 ops/s
[info]                  ·gc.alloc.rate:            969.572 MB/sec
[info]                  ·gc.alloc.rate.norm:       226864.065 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.116 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 236116.623 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 6726.565 ops/s
[info]                  ·gc.alloc.rate:                   969.639 MB/sec
[info]                  ·gc.alloc.rate.norm:              226864.061 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.520 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        235960.771 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 155.853 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   3: 6551.840 ops/s
[info]                  ·gc.alloc.rate:                   944.228 MB/sec
[info]                  ·gc.alloc.rate.norm:              226864.067 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.982 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        242422.194 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 960.088 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   4: 6548.216 ops/s
[info]                  ·gc.alloc.rate:                                  944.144 MB/sec
[info]                  ·gc.alloc.rate.norm:                             226864.062 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.092 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 22.216 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.347 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       245414.810 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 6609.399 ops/s
[info]                  ·gc.alloc.rate:                                  952.586 MB/sec
[info]                  ·gc.alloc.rate.norm:                             226864.067 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.128 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.971 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       243150.357 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala":
[info]   6632.371 ±(99.9%) 342.808 ops/s [Average]
[info]   (min, avg, max) = (6548.216, 6632.371, 6726.565), stdev = 89.026
[info]   CI (99.9%): [6289.563, 6975.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   956.034 ±(99.9%) 49.501 MB/sec [Average]
[info]   (min, avg, max) = (944.144, 956.034, 969.639), stdev = 12.855
[info]   CI (99.9%): [906.533, 1005.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   226864.064 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (226864.061, 226864.064, 226864.067), stdev = 0.003
[info]   CI (99.9%): [226864.054, 226864.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.019 ±(99.9%) 0.159 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.092), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   4.469 ±(99.9%) 38.202 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.469, 22.216), stdev = 9.921
[info]   CI (99.9%): [≈ 0, 42.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1013.787 ±(99.9%) 25.932 MB/sec [Average]
[info]   (min, avg, max) = (1008.520, 1013.787, 1021.347), stdev = 6.735
[info]   CI (99.9%): [987.855, 1039.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   240612.951 ±(99.9%) 16632.530 B/op [Average]
[info]   (min, avg, max) = (235960.771, 240612.951, 245414.810), stdev = 4319.415
[info]   CI (99.9%): [223980.421, 257245.481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.687 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   223.188 ±(99.9%) 1607.378 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 223.188, 960.088), stdev = 417.431
[info]   CI (99.9%): [≈ 0, 1830.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.600, 13.000), stdev = 5.177
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala
[info] # Run progress: 45.45% complete, ETA 00:38:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 89754.587 ops/s
[info] # Warmup Iteration   2: 95327.053 ops/s
[info] # Warmup Iteration   3: 98770.312 ops/s
[info] Iteration   1: 96931.156 ops/s
[info]                  ·gc.alloc.rate:            939.237 MB/sec
[info]                  ·gc.alloc.rate.norm:       15248.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.563 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10967.395 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 97913.878 ops/s
[info]                  ·gc.alloc.rate:            948.452 MB/sec
[info]                  ·gc.alloc.rate.norm:       15248.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1012.973 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16285.295 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 98242.614 ops/s
[info]                  ·gc.alloc.rate:                   951.557 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1012.928 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        16231.430 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 42.686 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 96660.024 ops/s
[info]                  ·gc.alloc.rate:                                  936.352 MB/sec
[info]                  ·gc.alloc.rate.norm:                             15248.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.037 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.595 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.119 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       16628.396 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 97911.278 ops/s
[info]                  ·gc.alloc.rate:            948.479 MB/sec
[info]                  ·gc.alloc.rate.norm:       15248.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.067 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16414.952 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala":
[info]   97531.790 ±(99.9%) 2665.031 ops/s [Average]
[info]   (min, avg, max) = (96660.024, 97531.790, 98242.614), stdev = 692.100
[info]   CI (99.9%): [94866.759, 100196.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   944.815 ±(99.9%) 25.459 MB/sec [Average]
[info]   (min, avg, max) = (936.352, 944.815, 951.557), stdev = 6.612
[info]   CI (99.9%): [919.356, 970.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   15248.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (15248.004, 15248.004, 15248.005), stdev = 0.001
[info]   CI (99.9%): [15248.004, 15248.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.007 ±(99.9%) 0.063 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.037), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.119 ±(99.9%) 1.024 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.119, 0.595), stdev = 0.266
[info]   CI (99.9%): [≈ 0, 1.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   948.730 ±(99.9%) 588.222 MB/sec [Average]
[info]   (min, avg, max) = (675.563, 948.730, 1021.119), stdev = 152.759
[info]   CI (99.9%): [360.508, 1536.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   15305.494 ±(99.9%) 9356.636 B/op [Average]
[info]   (min, avg, max) = (10967.395, 15305.494, 16628.396), stdev = 2429.889
[info]   CI (99.9%): [5948.858, 24662.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.533 ±(99.9%) 4.587 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.533, 2.664), stdev = 1.191
[info]   CI (99.9%): [≈ 0, 5.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   8.537 ±(99.9%) 73.508 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.537, 42.686), stdev = 19.090
[info]   CI (99.9%): [≈ 0, 82.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.600, 9.000), stdev = 3.286
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson
[info] # Run progress: 45.76% complete, ETA 00:38:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2430.571 ops/s
[info] # Warmup Iteration   2: 6170.756 ops/s
[info] # Warmup Iteration   3: 6293.413 ops/s
[info] Iteration   1: 6379.406 ops/s
[info]                  ·gc.alloc.rate:            1160.679 MB/sec
[info]                  ·gc.alloc.rate.norm:       286280.069 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.357 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 248956.690 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 6343.118 ops/s
[info]                  ·gc.alloc.rate:                   1154.645 MB/sec
[info]                  ·gc.alloc.rate.norm:              286280.064 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1343.022 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        332985.933 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.989 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 989.067 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   3: 6462.526 ops/s
[info]                  ·gc.alloc.rate:                                  1175.375 MB/sec
[info]                  ·gc.alloc.rate.norm:                             286280.063 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.080 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 19.548 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.001 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       248679.921 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 6468.377 ops/s
[info]                  ·gc.alloc.rate:                                  1176.778 MB/sec
[info]                  ·gc.alloc.rate.norm:                             286280.068 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.564 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.271 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       248449.306 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 6438.832 ops/s
[info]                  ·gc.alloc.rate:            1171.223 MB/sec
[info]                  ·gc.alloc.rate.norm:       286280.063 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.370 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 332757.234 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson":
[info]   6418.452 ±(99.9%) 211.349 ops/s [Average]
[info]   (min, avg, max) = (6343.118, 6418.452, 6468.377), stdev = 54.887
[info]   CI (99.9%): [6207.103, 6629.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1167.740 ±(99.9%) 37.207 MB/sec [Average]
[info]   (min, avg, max) = (1154.645, 1167.740, 1176.778), stdev = 9.663
[info]   CI (99.9%): [1130.533, 1204.947] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   286280.066 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (286280.063, 286280.066, 286280.069), stdev = 0.003
[info]   CI (99.9%): [286280.055, 286280.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.017 ±(99.9%) 0.137 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.080), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   4.022 ±(99.9%) 33.434 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.022, 19.548), stdev = 8.683
[info]   CI (99.9%): [≈ 0, 37.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1151.204 ±(99.9%) 707.198 MB/sec [Average]
[info]   (min, avg, max) = (1009.357, 1151.204, 1361.370), stdev = 183.657
[info]   CI (99.9%): [444.006, 1858.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   282365.817 ±(99.9%) 177536.507 B/op [Average]
[info]   (min, avg, max) = (248449.306, 282365.817, 332985.933), stdev = 46105.667
[info]   CI (99.9%): [104829.310, 459902.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.798 ±(99.9%) 6.870 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.798, 3.989), stdev = 1.784
[info]   CI (99.9%): [≈ 0, 7.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   197.813 ±(99.9%) 1703.233 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 197.813, 989.067), stdev = 442.324
[info]   CI (99.9%): [≈ 0, 1901.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.600, 17.000), stdev = 6.542
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce
[info] # Run progress: 46.06% complete, ETA 00:38:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12874.618 ops/s
[info] # Warmup Iteration   2: 17945.635 ops/s
[info] # Warmup Iteration   3: 18005.270 ops/s
[info] Iteration   1: 17907.336 ops/s
[info]                  ·gc.alloc.rate:            812.441 MB/sec
[info]                  ·gc.alloc.rate.norm:       71386.978 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.460 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 88874.281 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 18006.310 ops/s
[info]                  ·gc.alloc.rate:                   817.472 MB/sec
[info]                  ·gc.alloc.rate.norm:              71432.023 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.328 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        58923.811 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 58.225 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 17829.943 ops/s
[info]                  ·gc.alloc.rate:            809.118 MB/sec
[info]                  ·gc.alloc.rate.norm:       71432.031 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.614 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 59557.471 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 17920.865 ops/s
[info]                  ·gc.alloc.rate:                   813.221 MB/sec
[info]                  ·gc.alloc.rate.norm:              71415.086 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1011.242 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        88804.863 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 292.506 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 17958.739 ops/s
[info]                  ·gc.alloc.rate:                                  814.748 MB/sec
[info]                  ·gc.alloc.rate.norm:                             71408.023 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.148 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 12.965 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.688 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       59658.446 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce":
[info]   17924.639 ±(99.9%) 251.871 ops/s [Average]
[info]   (min, avg, max) = (17829.943, 17924.639, 18006.310), stdev = 65.410
[info]   CI (99.9%): [17672.768, 18176.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   813.400 ±(99.9%) 11.819 MB/sec [Average]
[info]   (min, avg, max) = (809.118, 813.400, 817.472), stdev = 3.069
[info]   CI (99.9%): [801.581, 825.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   71414.828 ±(99.9%) 72.388 B/op [Average]
[info]   (min, avg, max) = (71386.978, 71414.828, 71432.031), stdev = 18.799
[info]   CI (99.9%): [71342.440, 71487.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.030 ±(99.9%) 0.255 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.148), stdev = 0.066
[info]   CI (99.9%): [≈ 0, 0.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.593 ±(99.9%) 22.327 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.593, 12.965), stdev = 5.798
[info]   CI (99.9%): [≈ 0, 24.920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   810.466 ±(99.9%) 706.207 MB/sec [Average]
[info]   (min, avg, max) = (674.328, 810.466, 1011.460), stdev = 183.400
[info]   CI (99.9%): [104.260, 1516.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   71163.774 ±(99.9%) 62142.450 B/op [Average]
[info]   (min, avg, max) = (58923.811, 71163.774, 88874.281), stdev = 16138.197
[info]   CI (99.9%): [9021.324, 133306.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.561 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.331), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   70.146 ±(99.9%) 488.393 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 70.146, 292.506), stdev = 126.834
[info]   CI (99.9%): [≈ 0, 558.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.200, 10.000), stdev = 2.950
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala
[info] # Run progress: 46.36% complete, ETA 00:37:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11583.402 ops/s
[info] # Warmup Iteration   2: 19054.872 ops/s
[info] # Warmup Iteration   3: 19243.264 ops/s
[info] Iteration   1: 19311.475 ops/s
[info]                  ·gc.alloc.rate:            818.276 MB/sec
[info]                  ·gc.alloc.rate.norm:       66696.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.673 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 54828.213 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 19534.115 ops/s
[info]                  ·gc.alloc.rate:            827.624 MB/sec
[info]                  ·gc.alloc.rate.norm:       66696.023 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.992 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 81312.005 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   3: 19887.842 ops/s
[info]                  ·gc.alloc.rate:            842.714 MB/sec
[info]                  ·gc.alloc.rate.norm:       66696.026 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.702 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 53240.587 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 19754.246 ops/s
[info]                  ·gc.alloc.rate:                                  837.003 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66696.021 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.083 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 6.605 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.009 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       80720.928 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                318.426 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   5: 19403.080 ops/s
[info]                  ·gc.alloc.rate:                                  822.482 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66696.023 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.046 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.725 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.991 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       55222.337 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala":
[info]   19578.151 ±(99.9%) 924.602 ops/s [Average]
[info]   (min, avg, max) = (19311.475, 19578.151, 19887.842), stdev = 240.116
[info]   CI (99.9%): [18653.549, 20502.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   829.620 ±(99.9%) 38.965 MB/sec [Average]
[info]   (min, avg, max) = (818.276, 829.620, 842.714), stdev = 10.119
[info]   CI (99.9%): [790.655, 868.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   66696.023 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (66696.021, 66696.023, 66696.026), stdev = 0.002
[info]   CI (99.9%): [66696.015, 66696.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.026 ±(99.9%) 0.145 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.083), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.066 ±(99.9%) 11.577 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.066, 6.605), stdev = 3.007
[info]   CI (99.9%): [≈ 0, 13.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   809.674 ±(99.9%) 707.835 MB/sec [Average]
[info]   (min, avg, max) = (672.673, 809.674, 1013.009), stdev = 183.823
[info]   CI (99.9%): [101.838, 1517.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   65064.814 ±(99.9%) 56150.780 B/op [Average]
[info]   (min, avg, max) = (53240.587, 65064.814, 81312.005), stdev = 14582.179
[info]   CI (99.9%): [8914.034, 121215.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   63.685 ±(99.9%) 548.348 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 63.685, 318.426), stdev = 142.404
[info]   CI (99.9%): [≈ 0, 612.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.400, 13.000), stdev = 4.037
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala
[info] # Run progress: 46.67% complete, ETA 00:37:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 497383.204 ops/s
[info] # Warmup Iteration   2: 596186.758 ops/s
[info] # Warmup Iteration   3: 603880.296 ops/s
[info] Iteration   1: 599501.090 ops/s
[info]                  ·gc.alloc.rate:                   1359.127 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1347.612 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3537.772 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.749 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 603218.599 ops/s
[info]                  ·gc.alloc.rate:                                  1367.341 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3568.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.124 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.325 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1357.409 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3542.081 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                10.428 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 604700.278 ops/s
[info]                  ·gc.alloc.rate:                                  1371.110 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3568.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.853 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3543.910 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 601916.346 ops/s
[info]                  ·gc.alloc.rate:                                  1364.890 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3568.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.944 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3560.299 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 609538.911 ops/s
[info]                  ·gc.alloc.rate:                                  1382.219 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3568.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.989 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3515.779 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala":
[info]   603775.045 ±(99.9%) 14421.843 ops/s [Average]
[info]   (min, avg, max) = (599501.090, 603775.045, 609538.911), stdev = 3745.307
[info]   CI (99.9%): [589353.202, 618196.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1368.938 ±(99.9%) 33.142 MB/sec [Average]
[info]   (min, avg, max) = (1359.127, 1368.938, 1382.219), stdev = 8.607
[info]   CI (99.9%): [1335.796, 1402.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3568.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3568.001, 3568.001, 3568.001), stdev = 0.001
[info]   CI (99.9%): [3568.001, 3568.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.026 ±(99.9%) 0.211 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.124), stdev = 0.055
[info]   CI (99.9%): [≈ 0, 0.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.068 ±(99.9%) 0.552 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.068, 0.325), stdev = 0.143
[info]   CI (99.9%): [≈ 0, 0.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1358.161 ±(99.9%) 23.927 MB/sec [Average]
[info]   (min, avg, max) = (1347.612, 1358.161, 1361.989), stdev = 6.214
[info]   CI (99.9%): [1334.235, 1382.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   3539.968 ±(99.9%) 61.588 B/op [Average]
[info]   (min, avg, max) = (3515.779, 3539.968, 3560.299), stdev = 15.994
[info]   CI (99.9%): [3478.380, 3601.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   2.435 ±(99.9%) 17.450 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.435, 10.428), stdev = 4.532
[info]   CI (99.9%): [≈ 0, 19.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 11.000), stdev = 3.578
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 46.97% complete, ETA 00:37:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 368775.662 ops/s
[info] # Warmup Iteration   2: 408960.871 ops/s
[info] # Warmup Iteration   3: 411255.298 ops/s
[info] Iteration   1: 411355.152 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 405259.532 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 410651.867 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 411269.780 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 410677.747 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   409842.816 ±(99.9%) 9945.094 ops/s [Average]
[info]   (min, avg, max) = (405259.532, 409842.816, 411355.152), stdev = 2582.709
[info]   CI (99.9%): [399897.721, 419787.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson
[info] # Run progress: 47.27% complete, ETA 00:37:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13243.913 ops/s
[info] # Warmup Iteration   2: 18787.289 ops/s
[info] # Warmup Iteration   3: 18802.815 ops/s
[info] Iteration   1: 18685.937 ops/s
[info]                  ·gc.alloc.rate:            885.600 MB/sec
[info]                  ·gc.alloc.rate.norm:       74614.954 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.549 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 56664.621 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 18733.821 ops/s
[info]                  ·gc.alloc.rate:            888.117 MB/sec
[info]                  ·gc.alloc.rate.norm:       74624.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.030 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 84783.724 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 18433.924 ops/s
[info]                  ·gc.alloc.rate:            873.954 MB/sec
[info]                  ·gc.alloc.rate.norm:       74624.028 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.040 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 86158.620 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   4: 18307.047 ops/s
[info]                  ·gc.alloc.rate:                                  867.781 MB/sec
[info]                  ·gc.alloc.rate.norm:                             74610.520 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.068 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.830 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            676.693 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       58181.051 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                343.589 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 18541.557 ops/s
[info]                  ·gc.alloc.rate:                                  878.871 MB/sec
[info]                  ·gc.alloc.rate.norm:                             74608.024 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.078 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 6.656 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.068 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       86679.267 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson":
[info]   18540.457 ±(99.9%) 679.026 ops/s [Average]
[info]   (min, avg, max) = (18307.047, 18540.457, 18733.821), stdev = 176.341
[info]   CI (99.9%): [17861.431, 19219.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   878.865 ±(99.9%) 32.097 MB/sec [Average]
[info]   (min, avg, max) = (867.781, 878.865, 888.117), stdev = 8.336
[info]   CI (99.9%): [846.767, 910.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   74616.310 ±(99.9%) 28.755 B/op [Average]
[info]   (min, avg, max) = (74608.024, 74616.310, 74624.028), stdev = 7.468
[info]   CI (99.9%): [74587.555, 74645.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.029 ±(99.9%) 0.155 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.078), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.497 ±(99.9%) 13.215 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.497, 6.656), stdev = 3.432
[info]   CI (99.9%): [≈ 0, 15.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   877.676 ±(99.9%) 714.039 MB/sec [Average]
[info]   (min, avg, max) = (672.549, 877.676, 1021.068), stdev = 185.434
[info]   CI (99.9%): [163.637, 1591.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   74493.457 ±(99.9%) 60100.325 B/op [Average]
[info]   (min, avg, max) = (56664.621, 74493.457, 86679.267), stdev = 15607.863
[info]   CI (99.9%): [14393.132, 134593.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   68.718 ±(99.9%) 591.681 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 68.718, 343.589), stdev = 153.658
[info]   CI (99.9%): [≈ 0, 660.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.000, 12.000), stdev = 4.062
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce
[info] # Run progress: 47.58% complete, ETA 00:37:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7971.955 ops/s
[info] # Warmup Iteration   2: 10940.904 ops/s
[info] # Warmup Iteration   3: 11170.042 ops/s
[info] Iteration   1: 11151.204 ops/s
[info]                  ·gc.alloc.rate:            1119.752 MB/sec
[info]                  ·gc.alloc.rate.norm:       158072.037 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.899 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 142705.609 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 11170.905 ops/s
[info]                  ·gc.alloc.rate:            1122.210 MB/sec
[info]                  ·gc.alloc.rate.norm:       158072.039 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.395 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 142462.935 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 11210.860 ops/s
[info]                  ·gc.alloc.rate:                                  1125.873 MB/sec
[info]                  ·gc.alloc.rate.norm:                             158075.154 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.082 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 11.512 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1358.067 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       190675.686 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                467.572 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 11410.489 ops/s
[info]                  ·gc.alloc.rate:                                  1146.078 MB/sec
[info]                  ·gc.alloc.rate.norm:                             158088.036 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.164 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.075 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       140845.265 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 11452.038 ops/s
[info]                  ·gc.alloc.rate:                                  1150.205 MB/sec
[info]                  ·gc.alloc.rate.norm:                             158088.038 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.300 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.083 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       140341.104 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce":
[info]   11279.099 ±(99.9%) 544.192 ops/s [Average]
[info]   (min, avg, max) = (11151.204, 11279.099, 11452.038), stdev = 141.325
[info]   CI (99.9%): [10734.908, 11823.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1132.824 ±(99.9%) 54.783 MB/sec [Average]
[info]   (min, avg, max) = (1119.752, 1132.824, 1150.205), stdev = 14.227
[info]   CI (99.9%): [1078.040, 1187.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   158079.061 ±(99.9%) 31.931 B/op [Average]
[info]   (min, avg, max) = (158072.037, 158079.061, 158088.038), stdev = 8.292
[info]   CI (99.9%): [158047.130, 158110.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.019 ±(99.9%) 0.137 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.082), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.595 ±(99.9%) 19.307 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.595, 11.512), stdev = 5.014
[info]   CI (99.9%): [≈ 0, 21.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1084.504 ±(99.9%) 589.176 MB/sec [Average]
[info]   (min, avg, max) = (1010.899, 1084.504, 1358.067), stdev = 153.007
[info]   CI (99.9%): [495.328, 1673.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   151406.120 ±(99.9%) 84621.010 B/op [Average]
[info]   (min, avg, max) = (140341.104, 151406.120, 190675.686), stdev = 21975.808
[info]   CI (99.9%): [66785.110, 236027.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   93.514 ±(99.9%) 805.186 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 93.514, 467.572), stdev = 209.104
[info]   CI (99.9%): [≈ 0, 898.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.000, 10.000), stdev = 3.536
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala
[info] # Run progress: 47.88% complete, ETA 00:36:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5806.967 ops/s
[info] # Warmup Iteration   2: 10922.122 ops/s
[info] # Warmup Iteration   3: 11154.279 ops/s
[info] Iteration   1: 11107.121 ops/s
[info]                  ·gc.alloc.rate:            1016.787 MB/sec
[info]                  ·gc.alloc.rate.norm:       144056.040 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.245 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 142987.636 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 11043.954 ops/s
[info]                  ·gc.alloc.rate:                   1011.040 MB/sec
[info]                  ·gc.alloc.rate.norm:              144056.037 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.690 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        143721.172 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 94.928 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   3: 11130.393 ops/s
[info]                  ·gc.alloc.rate:                   1018.721 MB/sec
[info]                  ·gc.alloc.rate.norm:              144056.037 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1013.073 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        143257.352 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 565.118 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 11229.861 ops/s
[info]                  ·gc.alloc.rate:                                  1027.988 MB/sec
[info]                  ·gc.alloc.rate.norm:                             144086.109 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.025 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.489 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.060 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       143114.940 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 11251.061 ops/s
[info]                  ·gc.alloc.rate:                                  1030.094 MB/sec
[info]                  ·gc.alloc.rate.norm:                             144088.036 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.506 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.228 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       142847.864 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala":
[info]   11152.478 ±(99.9%) 333.637 ops/s [Average]
[info]   (min, avg, max) = (11043.954, 11152.478, 11251.061), stdev = 86.644
[info]   CI (99.9%): [10818.841, 11486.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1020.926 ±(99.9%) 30.665 MB/sec [Average]
[info]   (min, avg, max) = (1011.040, 1020.926, 1030.094), stdev = 7.964
[info]   CI (99.9%): [990.261, 1051.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   144068.452 ±(99.9%) 65.508 B/op [Average]
[info]   (min, avg, max) = (144056.037, 144068.452, 144088.036), stdev = 17.012
[info]   CI (99.9%): [144002.944, 144133.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.006 ±(99.9%) 0.042 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.025), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.799 ±(99.9%) 5.851 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.489), stdev = 1.519
[info]   CI (99.9%): [≈ 0, 6.650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1014.659 ±(99.9%) 23.704 MB/sec [Average]
[info]   (min, avg, max) = (1008.690, 1014.659, 1021.228), stdev = 6.156
[info]   CI (99.9%): [990.955, 1038.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   143185.793 ±(99.9%) 1291.880 B/op [Average]
[info]   (min, avg, max) = (142847.864, 143185.793, 143721.172), stdev = 335.497
[info]   CI (99.9%): [141893.912, 144477.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   132.009 ±(99.9%) 945.640 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 132.009, 565.118), stdev = 245.580
[info]   CI (99.9%): [≈ 0, 1077.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.000, 13.000), stdev = 5.148
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala
[info] # Run progress: 48.18% complete, ETA 00:36:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 161594.222 ops/s
[info] # Warmup Iteration   2: 173111.706 ops/s
[info] # Warmup Iteration   3: 173478.202 ops/s
[info] Iteration   1: 173326.665 ops/s
[info]                  ·gc.alloc.rate:            1002.413 MB/sec
[info]                  ·gc.alloc.rate.norm:       9104.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.020 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9182.170 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 173128.756 ops/s
[info]                  ·gc.alloc.rate:            1001.618 MB/sec
[info]                  ·gc.alloc.rate.norm:       9104.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.344 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9192.404 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 175264.955 ops/s
[info]                  ·gc.alloc.rate:                                  1013.810 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9104.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.082 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.739 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1014.511 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9110.302 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                29.909 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 177058.258 ops/s
[info]                  ·gc.alloc.rate:                                  1024.092 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9104.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.030 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.264 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.079 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9077.222 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 176939.850 ops/s
[info]                  ·gc.alloc.rate:                                  1023.388 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9104.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.027 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.064 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9083.325 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala":
[info]   175143.697 ±(99.9%) 7272.521 ops/s [Average]
[info]   (min, avg, max) = (173128.756, 175143.697, 177058.258), stdev = 1888.651
[info]   CI (99.9%): [167871.176, 182416.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1013.064 ±(99.9%) 41.883 MB/sec [Average]
[info]   (min, avg, max) = (1001.618, 1013.064, 1024.092), stdev = 10.877
[info]   CI (99.9%): [971.181, 1054.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   9104.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9104.002, 9104.002, 9104.003), stdev = 0.001
[info]   CI (99.9%): [9104.002, 9104.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.023 ±(99.9%) 0.136 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.082), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.206 ±(99.9%) 1.223 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.206, 0.739), stdev = 0.318
[info]   CI (99.9%): [≈ 0, 1.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1015.803 ±(99.9%) 19.248 MB/sec [Average]
[info]   (min, avg, max) = (1011.020, 1015.803, 1021.079), stdev = 4.999
[info]   CI (99.9%): [996.555, 1035.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   9129.085 ±(99.9%) 210.591 B/op [Average]
[info]   (min, avg, max) = (9077.222, 9129.085, 9192.404), stdev = 54.690
[info]   CI (99.9%): [8918.493, 9339.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   5.982 ±(99.9%) 51.505 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.982, 29.909), stdev = 13.376
[info]   CI (99.9%): [≈ 0, 57.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.800, 9.000), stdev = 3.564
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson
[info] # Run progress: 48.48% complete, ETA 00:36:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3946.926 ops/s
[info] # Warmup Iteration   2: 9980.715 ops/s
[info] # Warmup Iteration   3: 10242.666 ops/s
[info] Iteration   1: 10190.325 ops/s
[info]                  ·gc.alloc.rate:                   1275.391 MB/sec
[info]                  ·gc.alloc.rate.norm:              197000.043 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1007.759 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        155660.860 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 102.882 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 10223.476 ops/s
[info]                  ·gc.alloc.rate:                   1279.347 MB/sec
[info]                  ·gc.alloc.rate.norm:              197000.040 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1347.804 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        207541.348 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.661 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 717.781 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   3: 10351.758 ops/s
[info]                  ·gc.alloc.rate:                                  1295.722 MB/sec
[info]                  ·gc.alloc.rate.norm:                             197000.039 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.026 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.932 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.370 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       206981.105 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 9952.182 ops/s
[info]                  ·gc.alloc.rate:            1245.867 MB/sec
[info]                  ·gc.alloc.rate.norm:       197000.435 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.719 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 215319.404 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 10247.193 ops/s
[info]                  ·gc.alloc.rate:            1282.395 MB/sec
[info]                  ·gc.alloc.rate.norm:       197000.040 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.878 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 156826.050 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson":
[info]   10192.987 ±(99.9%) 568.118 ops/s [Average]
[info]   (min, avg, max) = (9952.182, 10192.987, 10351.758), stdev = 147.538
[info]   CI (99.9%): [9624.869, 10761.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1275.744 ±(99.9%) 70.717 MB/sec [Average]
[info]   (min, avg, max) = (1245.867, 1275.744, 1295.722), stdev = 18.365
[info]   CI (99.9%): [1205.027, 1346.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   197000.119 ±(99.9%) 0.679 B/op [Average]
[info]   (min, avg, max) = (197000.039, 197000.119, 197000.435), stdev = 0.176
[info]   CI (99.9%): [196999.441, 197000.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.005 ±(99.9%) 0.045 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.026), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.786 ±(99.9%) 6.772 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.786, 3.932), stdev = 1.759
[info]   CI (99.9%): [≈ 0, 7.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1219.906 ±(99.9%) 723.213 MB/sec [Average]
[info]   (min, avg, max) = (1007.759, 1219.906, 1361.719), stdev = 187.816
[info]   CI (99.9%): [496.693, 1943.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   188465.753 ±(99.9%) 113985.678 B/op [Average]
[info]   (min, avg, max) = (155660.860, 188465.753, 215319.404), stdev = 29601.719
[info]   CI (99.9%): [74480.076, 302451.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.065 ±(99.9%) 7.820 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.065, 4.661), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   164.133 ±(99.9%) 1204.053 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 164.133, 717.781), stdev = 312.689
[info]   CI (99.9%): [≈ 0, 1368.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.800, 15.000), stdev = 6.140
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce
[info] # Run progress: 48.79% complete, ETA 00:36:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20312.130 ops/s
[info] # Warmup Iteration   2: 28450.218 ops/s
[info] # Warmup Iteration   3: 28522.356 ops/s
[info] Iteration   1: 28514.364 ops/s
[info]                  ·gc.alloc.rate:            984.361 MB/sec
[info]                  ·gc.alloc.rate.norm:       54336.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.058 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 37207.535 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 27538.133 ops/s
[info]                  ·gc.alloc.rate:            950.481 MB/sec
[info]                  ·gc.alloc.rate.norm:       54313.850 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.331 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 57791.031 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 27739.697 ops/s
[info]                  ·gc.alloc.rate:                   957.070 MB/sec
[info]                  ·gc.alloc.rate.norm:              54312.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1010.962 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        57370.278 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 188.967 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 27983.692 ops/s
[info]                  ·gc.alloc.rate:                                  965.532 MB/sec
[info]                  ·gc.alloc.rate.norm:                             54312.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.087 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.895 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.999 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       57432.099 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 28483.240 ops/s
[info]                  ·gc.alloc.rate:            982.851 MB/sec
[info]                  ·gc.alloc.rate.norm:       54312.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.108 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 56426.110 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce":
[info]   28051.825 ±(99.9%) 1685.077 ops/s [Average]
[info]   (min, avg, max) = (27538.133, 28051.825, 28514.364), stdev = 437.609
[info]   CI (99.9%): [26366.748, 29736.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   968.059 ±(99.9%) 58.419 MB/sec [Average]
[info]   (min, avg, max) = (950.481, 968.059, 984.361), stdev = 15.171
[info]   CI (99.9%): [909.639, 1026.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   54317.183 ±(99.9%) 40.659 B/op [Average]
[info]   (min, avg, max) = (54312.015, 54317.183, 54336.018), stdev = 10.559
[info]   CI (99.9%): [54276.523, 54357.842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.017 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.087), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.979 ±(99.9%) 8.430 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.979, 4.895), stdev = 2.189
[info]   CI (99.9%): [≈ 0, 9.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   947.692 ±(99.9%) 589.325 MB/sec [Average]
[info]   (min, avg, max) = (674.058, 947.692, 1021.108), stdev = 153.046
[info]   CI (99.9%): [358.366, 1537.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   53245.411 ±(99.9%) 34577.402 B/op [Average]
[info]   (min, avg, max) = (37207.535, 53245.411, 57791.031), stdev = 8979.641
[info]   CI (99.9%): [18668.009, 87822.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   37.793 ±(99.9%) 325.412 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 37.793, 188.967), stdev = 84.508
[info]   CI (99.9%): [≈ 0, 363.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 10.000), stdev = 3.507
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala
[info] # Run progress: 49.09% complete, ETA 00:35:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 50998.938 ops/s
[info] # Warmup Iteration   2: 83807.663 ops/s
[info] # Warmup Iteration   3: 84723.284 ops/s
[info] Iteration   1: 85167.036 ops/s
[info]                  ·gc.alloc.rate:            1355.744 MB/sec
[info]                  ·gc.alloc.rate.norm:       25056.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.392 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 24864.690 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 84360.784 ops/s
[info]                  ·gc.alloc.rate:                                  1342.808 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25056.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.215 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1357.352 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       25327.382 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                74.565 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 85863.091 ops/s
[info]                  ·gc.alloc.rate:                                  1366.725 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25056.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.102 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.377 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       24957.955 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 86378.084 ops/s
[info]                  ·gc.alloc.rate:                                  1374.894 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25056.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.024 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.318 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       24808.600 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 86370.651 ops/s
[info]                  ·gc.alloc.rate:            1375.253 MB/sec
[info]                  ·gc.alloc.rate.norm:       25056.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.752 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 24810.035 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala":
[info]   85627.929 ±(99.9%) 3327.938 ops/s [Average]
[info]   (min, avg, max) = (84360.784, 85627.929, 86378.084), stdev = 864.255
[info]   CI (99.9%): [82299.991, 88955.867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1363.085 ±(99.9%) 53.279 MB/sec [Average]
[info]   (min, avg, max) = (1342.808, 1363.085, 1375.253), stdev = 13.836
[info]   CI (99.9%): [1309.805, 1416.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   25056.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (25056.005, 25056.005, 25056.005), stdev = 0.001
[info]   CI (99.9%): [25056.004, 25056.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.044 ±(99.9%) 0.367 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.044, 0.215), stdev = 0.095
[info]   CI (99.9%): [≈ 0, 0.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.826 ±(99.9%) 6.846 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.826, 4.006), stdev = 1.778
[info]   CI (99.9%): [≈ 0, 7.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1357.438 ±(99.9%) 26.837 MB/sec [Average]
[info]   (min, avg, max) = (1345.392, 1357.438, 1361.752), stdev = 6.969
[info]   CI (99.9%): [1330.601, 1384.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   24953.733 ±(99.9%) 837.621 B/op [Average]
[info]   (min, avg, max) = (24808.600, 24953.733, 25327.382), stdev = 217.528
[info]   CI (99.9%): [24116.111, 25791.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   14.913 ±(99.9%) 128.406 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14.913, 74.565), stdev = 33.347
[info]   CI (99.9%): [≈ 0, 143.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.000, 16.000), stdev = 5.385
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala
[info] # Run progress: 49.39% complete, ETA 00:35:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 867677.923 ops/s
[info] # Warmup Iteration   2: 956757.901 ops/s
[info] # Warmup Iteration   3: 964995.258 ops/s
[info] Iteration   1: 954578.947 ops/s
[info]                  ·gc.alloc.rate:            1309.802 MB/sec
[info]                  ·gc.alloc.rate.norm:       2160.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1347.962 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2222.930 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 974490.888 ops/s
[info]                  ·gc.alloc.rate:                                  1337.055 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2160.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.138 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.223 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1357.230 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2192.593 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                6.455 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 975225.930 ops/s
[info]                  ·gc.alloc.rate:            1338.249 MB/sec
[info]                  ·gc.alloc.rate.norm:       2160.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.344 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2197.276 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 976660.838 ops/s
[info]                  ·gc.alloc.rate:            1340.666 MB/sec
[info]                  ·gc.alloc.rate.norm:       2160.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.874 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2194.170 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 978466.655 ops/s
[info]                  ·gc.alloc.rate:                                  1342.597 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2160.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.318 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2190.118 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala":
[info]   971884.652 ±(99.9%) 37707.752 ops/s [Average]
[info]   (min, avg, max) = (954578.947, 971884.652, 978466.655), stdev = 9792.583
[info]   CI (99.9%): [934176.900, 1009592.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1333.674 ±(99.9%) 52.046 MB/sec [Average]
[info]   (min, avg, max) = (1309.802, 1333.674, 1342.597), stdev = 13.516
[info]   CI (99.9%): [1281.628, 1385.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2160.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2160.000, 2160.000, 2160.000), stdev = 0.001
[info]   CI (99.9%): [2160.000, 2160.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.028 ±(99.9%) 0.237 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.138), stdev = 0.062
[info]   CI (99.9%): [≈ 0, 0.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.045 ±(99.9%) 0.383 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.045, 0.223), stdev = 0.099
[info]   CI (99.9%): [≈ 0, 0.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1357.945 ±(99.9%) 22.662 MB/sec [Average]
[info]   (min, avg, max) = (1347.962, 1357.945, 1361.874), stdev = 5.885
[info]   CI (99.9%): [1335.283, 1380.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   2199.418 ±(99.9%) 51.590 B/op [Average]
[info]   (min, avg, max) = (2190.118, 2199.418, 2222.930), stdev = 13.398
[info]   CI (99.9%): [2147.828, 2251.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.291 ±(99.9%) 11.116 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.291, 6.455), stdev = 2.887
[info]   CI (99.9%): [≈ 0, 12.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 12.000), stdev = 3.912
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 49.70% complete, ETA 00:35:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1032457.699 ops/s
[info] # Warmup Iteration   2: 1119698.151 ops/s
[info] # Warmup Iteration   3: 1120753.329 ops/s
[info] Iteration   1: 1120418.914 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1059206.555 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1115753.456 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1116748.958 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1121213.869 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   1106668.350 ±(99.9%) 102557.148 ops/s [Average]
[info]   (min, avg, max) = (1059206.555, 1106668.350, 1121213.869), stdev = 26633.766
[info]   CI (99.9%): [1004111.202, 1209225.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson
[info] # Run progress: 50.00% complete, ETA 00:35:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 34684.069 ops/s
[info] # Warmup Iteration   2: 67903.479 ops/s
[info] # Warmup Iteration   3: 67658.393 ops/s
[info] Iteration   1: 67845.760 ops/s
[info]                  ·gc.alloc.rate:                   1462.914 MB/sec
[info]                  ·gc.alloc.rate.norm:              33944.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1680.316 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        38988.391 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      5.328 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 123.625 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         23.000 ms
[info] Iteration   2: 69136.837 ops/s
[info]                  ·gc.alloc.rate:                                  1490.878 MB/sec
[info]                  ·gc.alloc.rate.norm:                             33944.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.012 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.268 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.383 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       30995.681 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 69211.158 ops/s
[info]                  ·gc.alloc.rate:                                  1492.904 MB/sec
[info]                  ·gc.alloc.rate.norm:                             33944.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.117 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.219 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       38703.182 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 68828.251 ops/s
[info]                  ·gc.alloc.rate:                                  1484.648 MB/sec
[info]                  ·gc.alloc.rate.norm:                             33944.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.042 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.779 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       31134.812 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 67582.663 ops/s
[info]                  ·gc.alloc.rate:            1457.986 MB/sec
[info]                  ·gc.alloc.rate.norm:       33944.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.834 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 31705.464 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson":
[info]   68520.934 ±(99.9%) 2911.251 ops/s [Average]
[info]   (min, avg, max) = (67582.663, 68520.934, 69211.158), stdev = 756.043
[info]   CI (99.9%): [65609.683, 71432.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1477.866 ±(99.9%) 62.691 MB/sec [Average]
[info]   (min, avg, max) = (1457.986, 1477.866, 1492.904), stdev = 16.281
[info]   CI (99.9%): [1415.175, 1540.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   33944.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (33944.006, 33944.006, 33944.007), stdev = 0.001
[info]   CI (99.9%): [33944.005, 33944.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.004 ±(99.9%) 0.019 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.012), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.085 ±(99.9%) 0.433 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.085, 0.268), stdev = 0.113
[info]   CI (99.9%): [≈ 0, 0.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1493.506 ±(99.9%) 695.798 MB/sec [Average]
[info]   (min, avg, max) = (1361.383, 1493.506, 1702.219), stdev = 180.697
[info]   CI (99.9%): [797.708, 2189.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   34305.506 ±(99.9%) 15997.262 B/op [Average]
[info]   (min, avg, max) = (30995.681, 34305.506, 38988.391), stdev = 4154.438
[info]   CI (99.9%): [18308.244, 50302.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 9.175 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 5.328), stdev = 2.383
[info]   CI (99.9%): [≈ 0, 10.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   24.725 ±(99.9%) 212.891 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 24.725, 123.625), stdev = 55.287
[info]   CI (99.9%): [≈ 0, 237.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.600, 23.000), stdev = 8.620
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce
[info] # Run progress: 50.30% complete, ETA 00:35:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10518.216 ops/s
[info] # Warmup Iteration   2: 25251.813 ops/s
[info] # Warmup Iteration   3: 25368.654 ops/s
[info] Iteration   1: 25330.191 ops/s
[info]                  ·gc.alloc.rate:                   912.744 MB/sec
[info]                  ·gc.alloc.rate.norm:              56728.029 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1012.258 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        62912.904 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 41.390 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 25966.027 ops/s
[info]                  ·gc.alloc.rate:            935.746 MB/sec
[info]                  ·gc.alloc.rate.norm:       56728.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1012.313 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 61369.817 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 25848.144 ops/s
[info]                  ·gc.alloc.rate:                   931.411 MB/sec
[info]                  ·gc.alloc.rate.norm:              56728.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.928 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        41045.871 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 40.559 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 26017.237 ops/s
[info]                  ·gc.alloc.rate:                                  937.631 MB/sec
[info]                  ·gc.alloc.rate.norm:                             56728.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.021 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.252 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1014.990 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       61408.363 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                201.471 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   5: 25495.005 ops/s
[info]                  ·gc.alloc.rate:                                  918.787 MB/sec
[info]                  ·gc.alloc.rate.norm:                             56728.017 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.097 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.974 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.025 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       63040.394 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce":
[info]   25731.321 ±(99.9%) 1166.739 ops/s [Average]
[info]   (min, avg, max) = (25330.191, 25731.321, 26017.237), stdev = 302.998
[info]   CI (99.9%): [24564.582, 26898.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate":
[info]   927.264 ±(99.9%) 42.150 MB/sec [Average]
[info]   (min, avg, max) = (912.744, 927.264, 937.631), stdev = 10.946
[info]   CI (99.9%): [885.114, 969.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   56728.020 ±(99.9%) 0.021 B/op [Average]
[info]   (min, avg, max) = (56728.016, 56728.020, 56728.029), stdev = 0.005
[info]   CI (99.9%): [56727.999, 56728.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.023 ±(99.9%) 0.161 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.097), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.445 ±(99.9%) 9.969 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.445, 5.974), stdev = 2.589
[info]   CI (99.9%): [≈ 0, 11.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   946.903 ±(99.9%) 587.760 MB/sec [Average]
[info]   (min, avg, max) = (673.928, 946.903, 1021.025), stdev = 152.639
[info]   CI (99.9%): [359.143, 1534.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   57955.470 ±(99.9%) 36527.745 B/op [Average]
[info]   (min, avg, max) = (41045.871, 57955.470, 63040.394), stdev = 9486.139
[info]   CI (99.9%): [21427.725, 94483.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 5.318 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.330), stdev = 1.381
[info]   CI (99.9%): [≈ 0, 6.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   56.684 ±(99.9%) 321.496 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 56.684, 201.471), stdev = 83.492
[info]   CI (99.9%): [≈ 0, 378.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.200, 10.000), stdev = 2.775
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala
[info] # Run progress: 50.61% complete, ETA 00:34:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6172.519 ops/s
[info] # Warmup Iteration   2: 20853.796 ops/s
[info] # Warmup Iteration   3: 21096.168 ops/s
[info] Iteration   1: 21482.737 ops/s
[info]                  ·gc.alloc.rate:            588.795 MB/sec
[info]                  ·gc.alloc.rate.norm:       43144.724 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.639 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 49288.489 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 21662.786 ops/s
[info]                  ·gc.alloc.rate:            593.909 MB/sec
[info]                  ·gc.alloc.rate.norm:       43144.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.856 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 48879.022 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 21771.463 ops/s
[info]                  ·gc.alloc.rate:            596.722 MB/sec
[info]                  ·gc.alloc.rate.norm:       43145.278 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.669 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 48636.591 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 21791.971 ops/s
[info]                  ·gc.alloc.rate:            597.496 MB/sec
[info]                  ·gc.alloc.rate.norm:       43144.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.913 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 48589.730 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 21098.779 ops/s
[info]                  ·gc.alloc.rate:            578.347 MB/sec
[info]                  ·gc.alloc.rate.norm:       43144.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.368 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 25092.683 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala":
[info]   21561.547 ±(99.9%) 1102.279 ops/s [Average]
[info]   (min, avg, max) = (21098.779, 21561.547, 21791.971), stdev = 286.258
[info]   CI (99.9%): [20459.268, 22663.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   591.054 ±(99.9%) 30.341 MB/sec [Average]
[info]   (min, avg, max) = (578.347, 591.054, 597.496), stdev = 7.880
[info]   CI (99.9%): [560.712, 621.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   43144.412 ±(99.9%) 2.203 B/op [Average]
[info]   (min, avg, max) = (43144.019, 43144.412, 43145.278), stdev = 0.572
[info]   CI (99.9%): [43142.209, 43146.615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   605.489 ±(99.9%) 579.303 MB/sec [Average]
[info]   (min, avg, max) = (336.368, 605.489, 672.913), stdev = 150.443
[info]   CI (99.9%): [26.186, 1184.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   44097.303 ±(99.9%) 40922.757 B/op [Average]
[info]   (min, avg, max) = (25092.683, 44097.303, 49288.489), stdev = 10627.510
[info]   CI (99.9%): [3174.546, 85020.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.000, 8.000), stdev = 1.732
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala
[info] # Run progress: 50.91% complete, ETA 00:34:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 155966.531 ops/s
[info] # Warmup Iteration   2: 171055.816 ops/s
[info] # Warmup Iteration   3: 162962.467 ops/s
[info] Iteration   1: 170773.700 ops/s
[info]                  ·gc.alloc.rate:            444.493 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.557 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6225.262 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 171768.131 ops/s
[info]                  ·gc.alloc.rate:            447.007 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.712 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3094.513 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 167023.712 ops/s
[info]                  ·gc.alloc.rate:            434.615 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.674 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3182.391 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   4: 166600.058 ops/s
[info]                  ·gc.alloc.rate:            433.529 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.388 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6381.093 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 166856.671 ops/s
[info]                  ·gc.alloc.rate:            434.196 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.682 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3185.538 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala":
[info]   168604.454 ±(99.9%) 9488.062 ops/s [Average]
[info]   (min, avg, max) = (166600.058, 168604.454, 171768.131), stdev = 2464.020
[info]   CI (99.9%): [159116.392, 178092.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   438.768 ±(99.9%) 24.824 MB/sec [Average]
[info]   (min, avg, max) = (433.529, 438.768, 447.007), stdev = 6.447
[info]   CI (99.9%): [413.944, 463.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.002, 4096.002, 4096.003), stdev = 0.001
[info]   CI (99.9%): [4096.002, 4096.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   472.803 ±(99.9%) 712.413 MB/sec [Average]
[info]   (min, avg, max) = (337.674, 472.803, 675.557), stdev = 185.011
[info]   CI (99.9%): [≈ 0, 1185.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   4413.759 ±(99.9%) 6646.448 B/op [Average]
[info]   (min, avg, max) = (3094.513, 4413.759, 6381.093), stdev = 1726.061
[info]   CI (99.9%): [≈ 0, 11060.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.000, 6.000), stdev = 1.871
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson
[info] # Run progress: 51.21% complete, ETA 00:34:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4565.494 ops/s
[info] # Warmup Iteration   2: 19433.713 ops/s
[info] # Warmup Iteration   3: 20209.008 ops/s
[info] Iteration   1: 20420.928 ops/s
[info]                  ·gc.alloc.rate:                   1277.149 MB/sec
[info]                  ·gc.alloc.rate.norm:              98448.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1344.715 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        103656.235 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 51.340 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   2: 20456.826 ops/s
[info]                  ·gc.alloc.rate:                                  1280.305 MB/sec
[info]                  ·gc.alloc.rate.norm:                             98448.020 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.338 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 25.997 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1348.946 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       103726.135 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.995 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                307.185 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        14.000 ms
[info] Iteration   3: 20624.037 ops/s
[info]                  ·gc.alloc.rate:                                  1289.968 MB/sec
[info]                  ·gc.alloc.rate.norm:                             98448.025 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.617 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.122 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       77930.237 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 20570.533 ops/s
[info]                  ·gc.alloc.rate:                                  1286.567 MB/sec
[info]                  ·gc.alloc.rate.norm:                             98448.021 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.201 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.405 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       104174.655 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 20710.525 ops/s
[info]                  ·gc.alloc.rate:                                  1295.372 MB/sec
[info]                  ·gc.alloc.rate.norm:                             98448.020 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.178 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.524 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       103475.563 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson":
[info]   20556.570 ±(99.9%) 458.843 ops/s [Average]
[info]   (min, avg, max) = (20420.928, 20556.570, 20710.525), stdev = 119.160
[info]   CI (99.9%): [20097.727, 21015.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1285.872 ±(99.9%) 28.204 MB/sec [Average]
[info]   (min, avg, max) = (1277.149, 1285.872, 1295.372), stdev = 7.325
[info]   CI (99.9%): [1257.668, 1314.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   98448.021 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (98448.020, 98448.021, 98448.025), stdev = 0.002
[info]   CI (99.9%): [98448.014, 98448.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.070 ±(99.9%) 0.577 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.070, 0.338), stdev = 0.150
[info]   CI (99.9%): [≈ 0, 0.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   5.399 ±(99.9%) 44.348 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.399, 25.997), stdev = 11.517
[info]   CI (99.9%): [≈ 0, 49.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1287.543 ±(99.9%) 574.210 MB/sec [Average]
[info]   (min, avg, max) = (1021.122, 1287.543, 1361.524), stdev = 149.121
[info]   CI (99.9%): [713.333, 1861.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   98592.565 ±(99.9%) 44488.249 B/op [Average]
[info]   (min, avg, max) = (77930.237, 98592.565, 104174.655), stdev = 11553.457
[info]   CI (99.9%): [54104.316, 143080.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.686 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.995), stdev = 1.736
[info]   CI (99.9%): [≈ 0, 7.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   71.705 ±(99.9%) 514.066 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 71.705, 307.185), stdev = 133.501
[info]   CI (99.9%): [≈ 0, 585.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.800, 16.000), stdev = 6.611
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce
[info] # Run progress: 51.52% complete, ETA 00:34:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 63951.156 ops/s
[info] # Warmup Iteration   2: 85095.441 ops/s
[info] # Warmup Iteration   3: 85224.306 ops/s
[info] Iteration   1: 85090.877 ops/s
[info]                  ·gc.alloc.rate:            1125.172 MB/sec
[info]                  ·gc.alloc.rate.norm:       20808.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.358 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18703.230 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 85330.082 ops/s
[info]                  ·gc.alloc.rate:            1127.990 MB/sec
[info]                  ·gc.alloc.rate.norm:       20808.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.076 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18651.290 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 86378.649 ops/s
[info]                  ·gc.alloc.rate:                                  1142.246 MB/sec
[info]                  ·gc.alloc.rate.norm:                             20808.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.094 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.706 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1358.525 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       24747.913 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                60.686 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 85084.713 ops/s
[info]                  ·gc.alloc.rate:            1124.795 MB/sec
[info]                  ·gc.alloc.rate.norm:       20808.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.082 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18889.376 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 86683.799 ops/s
[info]                  ·gc.alloc.rate:                                  1145.872 MB/sec
[info]                  ·gc.alloc.rate.norm:                             20808.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.155 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.343 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       24720.754 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce":
[info]   85713.624 ±(99.9%) 2928.733 ops/s [Average]
[info]   (min, avg, max) = (85084.713, 85713.624, 86683.799), stdev = 760.583
[info]   CI (99.9%): [82784.891, 88642.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1133.215 ±(99.9%) 38.729 MB/sec [Average]
[info]   (min, avg, max) = (1124.795, 1133.215, 1145.872), stdev = 10.058
[info]   CI (99.9%): [1094.486, 1171.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   20808.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (20808.005, 20808.005, 20808.005), stdev = 0.001
[info]   CI (99.9%): [20808.004, 20808.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.020 ±(99.9%) 0.158 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.094), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.372 ±(99.9%) 2.883 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.372, 1.706), stdev = 0.749
[info]   CI (99.9%): [≈ 0, 3.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1152.677 ±(99.9%) 728.713 MB/sec [Average]
[info]   (min, avg, max) = (1011.076, 1152.677, 1361.343), stdev = 189.244
[info]   CI (99.9%): [423.964, 1881.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   21142.512 ±(99.9%) 12630.411 B/op [Average]
[info]   (min, avg, max) = (18651.290, 21142.512, 24747.913), stdev = 3280.078
[info]   CI (99.9%): [8512.101, 33772.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.737 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   12.137 ±(99.9%) 104.506 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12.137, 60.686), stdev = 27.140
[info]   CI (99.9%): [≈ 0, 116.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 10.000), stdev = 3.507
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala
[info] # Run progress: 51.82% complete, ETA 00:34:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 91829.626 ops/s
[info] # Warmup Iteration   2: 141219.326 ops/s
[info] # Warmup Iteration   3: 142806.999 ops/s
[info] Iteration   1: 138875.840 ops/s
[info]                  ·gc.alloc.rate:            1175.102 MB/sec
[info]                  ·gc.alloc.rate.norm:       13320.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.007 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11437.281 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 137464.191 ops/s
[info]                  ·gc.alloc.rate:                                  1163.414 MB/sec
[info]                  ·gc.alloc.rate.norm:                             13320.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.097 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.110 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1349.618 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       15451.864 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                45.761 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        15.000 ms
[info] Iteration   3: 138249.837 ops/s
[info]                  ·gc.alloc.rate:                                  1169.813 MB/sec
[info]                  ·gc.alloc.rate.norm:                             13320.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.108 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.229 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.979 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11625.314 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 144531.802 ops/s
[info]                  ·gc.alloc.rate:            1223.090 MB/sec
[info]                  ·gc.alloc.rate.norm:       13320.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.431 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14826.604 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 144356.602 ops/s
[info]                  ·gc.alloc.rate:            1221.654 MB/sec
[info]                  ·gc.alloc.rate.norm:       13320.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.462 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14844.369 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala":
[info]   140695.654 ±(99.9%) 13318.813 ops/s [Average]
[info]   (min, avg, max) = (137464.191, 140695.654, 144531.802), stdev = 3458.854
[info]   CI (99.9%): [127376.841, 154014.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1190.614 ±(99.9%) 112.780 MB/sec [Average]
[info]   (min, avg, max) = (1163.414, 1190.614, 1223.090), stdev = 29.289
[info]   CI (99.9%): [1077.834, 1303.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   13320.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13320.003, 13320.003, 13320.003), stdev = 0.001
[info]   CI (99.9%): [13320.003, 13320.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.041 ±(99.9%) 0.217 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.041, 0.108), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.468 ±(99.9%) 2.472 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.468, 1.229), stdev = 0.642
[info]   CI (99.9%): [≈ 0, 2.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1220.499 ±(99.9%) 722.807 MB/sec [Average]
[info]   (min, avg, max) = (1009.007, 1220.499, 1361.462), stdev = 187.711
[info]   CI (99.9%): [497.692, 1943.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   13637.086 ±(99.9%) 7469.721 B/op [Average]
[info]   (min, avg, max) = (11437.281, 13637.086, 15451.864), stdev = 1939.863
[info]   CI (99.9%): [6167.365, 21106.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   9.152 ±(99.9%) 78.803 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.152, 45.761), stdev = 20.465
[info]   CI (99.9%): [≈ 0, 87.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.200, 15.000), stdev = 5.848
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala
[info] # Run progress: 52.12% complete, ETA 00:33:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 400721.636 ops/s
[info] # Warmup Iteration   2: 446156.689 ops/s
[info] # Warmup Iteration   3: 451262.841 ops/s
[info] Iteration   1: 455013.324 ops/s
[info]                  ·gc.alloc.rate:                   504.127 MB/sec
[info]                  ·gc.alloc.rate.norm:              1744.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             336.346 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1163.569 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.304 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 454005.719 ops/s
[info]                  ·gc.alloc.rate:            503.048 MB/sec
[info]                  ·gc.alloc.rate.norm:       1744.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.418 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2334.649 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 454491.431 ops/s
[info]                  ·gc.alloc.rate:                   503.510 MB/sec
[info]                  ·gc.alloc.rate.norm:              1744.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             336.322 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1164.913 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.307 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 450992.417 ops/s
[info]                  ·gc.alloc.rate:            499.675 MB/sec
[info]                  ·gc.alloc.rate.norm:       1744.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.037 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2352.574 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 422129.894 ops/s
[info]                  ·gc.alloc.rate:            467.685 MB/sec
[info]                  ·gc.alloc.rate.norm:       1744.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.344 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1254.227 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala":
[info]   447326.557 ±(99.9%) 54570.002 ops/s [Average]
[info]   (min, avg, max) = (422129.894, 447326.557, 455013.324), stdev = 14171.656
[info]   CI (99.9%): [392756.556, 501896.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   495.609 ±(99.9%) 60.475 MB/sec [Average]
[info]   (min, avg, max) = (467.685, 495.609, 504.127), stdev = 15.705
[info]   CI (99.9%): [435.135, 556.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1744.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1744.001, 1744.001, 1744.001), stdev = 0.001
[info]   CI (99.9%): [1744.001, 1744.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   471.293 ±(99.9%) 711.586 MB/sec [Average]
[info]   (min, avg, max) = (336.322, 471.293, 674.037), stdev = 184.797
[info]   CI (99.9%): [≈ 0, 1182.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1653.986 ±(99.9%) 2428.376 B/op [Average]
[info]   (min, avg, max) = (1163.569, 1653.986, 2352.574), stdev = 630.642
[info]   CI (99.9%): [≈ 0, 4082.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.922 ±(99.9%) 4.862 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.922, 2.307), stdev = 1.263
[info]   CI (99.9%): [≈ 0, 5.785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.000, 6.000), stdev = 1.871
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 52.42% complete, ETA 00:33:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 455816.007 ops/s
[info] # Warmup Iteration   2: 525026.043 ops/s
[info] # Warmup Iteration   3: 527292.973 ops/s
[info] Iteration   1: 527207.015 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 528774.188 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 528702.884 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 527475.660 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 527541.343 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc":
[info]   527940.218 ±(99.9%) 2848.998 ops/s [Average]
[info]   (min, avg, max) = (527207.015, 527940.218, 528774.188), stdev = 739.876
[info]   CI (99.9%): [525091.220, 530789.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson
[info] # Run progress: 52.73% complete, ETA 00:33:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 87252.790 ops/s
[info] # Warmup Iteration   2: 118921.538 ops/s
[info] # Warmup Iteration   3: 123039.043 ops/s
[info] Iteration   1: 123251.753 ops/s
[info]                  ·gc.alloc.rate:            1262.604 MB/sec
[info]                  ·gc.alloc.rate.norm:       16128.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.861 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12886.785 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 121434.866 ops/s
[info]                  ·gc.alloc.rate:                                  1244.647 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16128.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.077 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1349.885 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       17491.663 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                51.802 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   3: 123628.827 ops/s
[info]                  ·gc.alloc.rate:                                  1266.762 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16128.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.028 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.359 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.460 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       17333.657 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 121712.762 ops/s
[info]                  ·gc.alloc.rate:            1247.038 MB/sec
[info]                  ·gc.alloc.rate.norm:       16128.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.034 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13205.075 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 121688.473 ops/s
[info]                  ·gc.alloc.rate:                                  1247.282 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16128.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.879 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       17609.805 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson":
[info]   122343.336 ±(99.9%) 3912.477 ops/s [Average]
[info]   (min, avg, max) = (121434.866, 122343.336, 123628.827), stdev = 1016.058
[info]   CI (99.9%): [118430.859, 126255.813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1253.667 ±(99.9%) 39.337 MB/sec [Average]
[info]   (min, avg, max) = (1244.647, 1253.667, 1266.762), stdev = 10.216
[info]   CI (99.9%): [1214.330, 1293.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   16128.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16128.003, 16128.003, 16128.004), stdev = 0.001
[info]   CI (99.9%): [16128.003, 16128.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.021 ±(99.9%) 0.129 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.077), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.275 ±(99.9%) 1.670 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.275, 1.001), stdev = 0.434
[info]   CI (99.9%): [≈ 0, 1.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1220.624 ±(99.9%) 723.409 MB/sec [Average]
[info]   (min, avg, max) = (1008.861, 1220.624, 1361.879), stdev = 187.867
[info]   CI (99.9%): [497.215, 1944.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   15705.397 ±(99.9%) 9366.039 B/op [Average]
[info]   (min, avg, max) = (12886.785, 15705.397, 17609.805), stdev = 2432.331
[info]   CI (99.9%): [6339.358, 25071.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.800 ±(99.9%) 6.884 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.800, 3.998), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   10.360 ±(99.9%) 89.205 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.360, 51.802), stdev = 23.166
[info]   CI (99.9%): [≈ 0, 99.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.600, 12.000), stdev = 4.506
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce
[info] # Run progress: 53.03% complete, ETA 00:33:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 119338.444 ops/s
[info] # Warmup Iteration   2: 142937.577 ops/s
[info] # Warmup Iteration   3: 145862.555 ops/s
[info] Iteration   1: 148285.555 ops/s
[info]                  ·gc.alloc.rate:                                  2493.429 MB/sec
[info]                  ·gc.alloc.rate.norm:                             26472.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.030 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.109 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       25290.147 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 148353.469 ops/s
[info]                  ·gc.alloc.rate:                                  2495.013 MB/sec
[info]                  ·gc.alloc.rate.norm:                             26472.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.097 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.965 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       28890.558 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 147349.240 ops/s
[info]                  ·gc.alloc.rate:                                  2478.745 MB/sec
[info]                  ·gc.alloc.rate.norm:                             26472.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.014 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.154 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2383.201 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       25451.634 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 148162.192 ops/s
[info]                  ·gc.alloc.rate:            2491.661 MB/sec
[info]                  ·gc.alloc.rate.norm:       26472.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2382.444 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 25311.651 B/op
[info]                  ·gc.count:                 7.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 145468.135 ops/s
[info]                  ·gc.alloc.rate:                                  2446.247 MB/sec
[info]                  ·gc.alloc.rate.norm:                             26472.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.052 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.347 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       25780.520 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce":
[info]   147523.718 ±(99.9%) 4689.411 ops/s [Average]
[info]   (min, avg, max) = (145468.135, 147523.718, 148353.469), stdev = 1217.825
[info]   CI (99.9%): [142834.307, 152213.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate":
[info]   2481.019 ±(99.9%) 78.854 MB/sec [Average]
[info]   (min, avg, max) = (2446.247, 2481.019, 2495.013), stdev = 20.478
[info]   CI (99.9%): [2402.165, 2559.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   26472.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (26472.003, 26472.003, 26472.003), stdev = 0.001
[info]   CI (99.9%): [26472.002, 26472.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.006 ±(99.9%) 0.022 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.014), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.067 ±(99.9%) 0.232 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.154), stdev = 0.060
[info]   CI (99.9%): [≈ 0, 0.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2450.613 ±(99.9%) 586.259 MB/sec [Average]
[info]   (min, avg, max) = (2382.109, 2450.613, 2722.965), stdev = 152.250
[info]   CI (99.9%): [1864.354, 3036.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   26144.902 ±(99.9%) 5958.221 B/op [Average]
[info]   (min, avg, max) = (25290.147, 26144.902, 28890.558), stdev = 1547.331
[info]   CI (99.9%): [20186.681, 32103.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.count":
[info]   36.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.200, 8.000), stdev = 0.447
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 7.000), stdev = 0.894
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala
[info] # Run progress: 53.33% complete, ETA 00:32:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 195767.141 ops/s
[info] # Warmup Iteration   2: 319430.599 ops/s
[info] # Warmup Iteration   3: 321771.030 ops/s
[info] Iteration   1: 320900.408 ops/s
[info]                  ·gc.alloc.rate:            334.383 MB/sec
[info]                  ·gc.alloc.rate.norm:       1640.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.391 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1649.850 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 320745.094 ops/s
[info]                  ·gc.alloc.rate:            334.142 MB/sec
[info]                  ·gc.alloc.rate.norm:       1640.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.318 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1650.678 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 315707.403 ops/s
[info]                  ·gc.alloc.rate:            328.931 MB/sec
[info]                  ·gc.alloc.rate.norm:       1640.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.356 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1677.026 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 312674.212 ops/s
[info]                  ·gc.alloc.rate:            325.752 MB/sec
[info]                  ·gc.alloc.rate.norm:       1640.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.331 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1693.263 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 312626.706 ops/s
[info]                  ·gc.alloc.rate:            325.687 MB/sec
[info]                  ·gc.alloc.rate.norm:       1640.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.319 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1693.540 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala":
[info]   316530.765 ±(99.9%) 15835.343 ops/s [Average]
[info]   (min, avg, max) = (312626.706, 316530.765, 320900.408), stdev = 4112.388
[info]   CI (99.9%): [300695.422, 332366.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   329.779 ±(99.9%) 16.553 MB/sec [Average]
[info]   (min, avg, max) = (325.687, 329.779, 334.383), stdev = 4.299
[info]   CI (99.9%): [313.225, 346.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1640.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1640.001, 1640.001, 1640.001), stdev = 0.001
[info]   CI (99.9%): [1640.001, 1640.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   336.343 ±(99.9%) 0.120 MB/sec [Average]
[info]   (min, avg, max) = (336.318, 336.343, 336.391), stdev = 0.031
[info]   CI (99.9%): [336.223, 336.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1672.871 ±(99.9%) 83.542 B/op [Average]
[info]   (min, avg, max) = (1649.850, 1672.871, 1693.540), stdev = 21.696
[info]   CI (99.9%): [1589.329, 1756.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala
[info] # Run progress: 53.64% complete, ETA 00:32:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 709553.314 ops/s
[info] # Warmup Iteration   2: 723248.136 ops/s
[info] # Warmup Iteration   3: 738986.436 ops/s
[info] Iteration   1: 738200.862 ops/s
[info]                  ·gc.alloc.rate:            255.107 MB/sec
[info]                  ·gc.alloc.rate.norm:       544.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.016 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 718.667 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 741526.667 ops/s
[info]                  ·gc.alloc.rate:      256.245 MB/sec
[info]                  ·gc.alloc.rate.norm: 544.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 736373.348 ops/s
[info]                  ·gc.alloc.rate:            254.485 MB/sec
[info]                  ·gc.alloc.rate.norm:       544.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.023 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 720.439 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 731224.468 ops/s
[info]                  ·gc.alloc.rate:            252.724 MB/sec
[info]                  ·gc.alloc.rate.norm:       544.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.045 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 725.506 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 733592.976 ops/s
[info]                  ·gc.alloc.rate:            253.534 MB/sec
[info]                  ·gc.alloc.rate.norm:       544.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.027 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 723.148 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala":
[info]   736183.664 ±(99.9%) 15397.526 ops/s [Average]
[info]   (min, avg, max) = (731224.468, 736183.664, 741526.667), stdev = 3998.689
[info]   CI (99.9%): [720786.138, 751581.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   254.419 ±(99.9%) 5.261 MB/sec [Average]
[info]   (min, avg, max) = (252.724, 254.419, 256.245), stdev = 1.366
[info]   CI (99.9%): [249.158, 259.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   544.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (544.001, 544.001, 544.001), stdev = 0.001
[info]   CI (99.9%): [544.000, 544.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   269.622 ±(99.9%) 580.382 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.622, 337.045), stdev = 150.723
[info]   CI (99.9%): [≈ 0, 850.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   577.552 ±(99.9%) 1243.265 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 577.552, 725.506), stdev = 322.872
[info]   CI (99.9%): [≈ 0, 1820.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson
[info] # Run progress: 53.94% complete, ETA 00:32:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 41140.436 ops/s
[info] # Warmup Iteration   2: 71824.762 ops/s
[info] # Warmup Iteration   3: 72606.563 ops/s
[info] Iteration   1: 74635.410 ops/s
[info]                  ·gc.alloc.rate:                                  3299.692 MB/sec
[info]                  ·gc.alloc.rate.norm:                             69576.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.134 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.873 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       64603.609 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   2: 72680.269 ops/s
[info]                  ·gc.alloc.rate:                                  3212.553 MB/sec
[info]                  ·gc.alloc.rate.norm:                             69576.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.021 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.444 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.540 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       73712.335 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   3: 72954.967 ops/s
[info]                  ·gc.alloc.rate:                                  3224.733 MB/sec
[info]                  ·gc.alloc.rate.norm:                             69576.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.192 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.212 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       66091.070 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 73681.650 ops/s
[info]                  ·gc.alloc.rate:                                  3257.824 MB/sec
[info]                  ·gc.alloc.rate.norm:                             69576.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.018 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.392 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3404.573 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       72710.072 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   5: 72330.182 ops/s
[info]                  ·gc.alloc.rate:                                  3197.528 MB/sec
[info]                  ·gc.alloc.rate.norm:                             69576.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.125 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.611 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       66662.073 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson":
[info]   73256.496 ±(99.9%) 3530.841 ops/s [Average]
[info]   (min, avg, max) = (72330.182, 73256.496, 74635.410), stdev = 916.948
[info]   CI (99.9%): [69725.655, 76787.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3238.466 ±(99.9%) 157.117 MB/sec [Average]
[info]   (min, avg, max) = (3197.528, 3238.466, 3299.692), stdev = 40.803
[info]   CI (99.9%): [3081.349, 3395.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   69576.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (69576.006, 69576.006, 69576.006), stdev = 0.001
[info]   CI (99.9%): [69576.004, 69576.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.012 ±(99.9%) 0.027 MB/sec [Average]
[info]   (min, avg, max) = (0.006, 0.012, 0.021), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.257 ±(99.9%) 0.578 B/op [Average]
[info]   (min, avg, max) = (0.125, 0.257, 0.444), stdev = 0.150
[info]   CI (99.9%): [≈ 0, 0.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   3199.762 ±(99.9%) 718.127 MB/sec [Average]
[info]   (min, avg, max) = (3063.212, 3199.762, 3404.573), stdev = 186.495
[info]   CI (99.9%): [2481.635, 3917.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   68755.832 ±(99.9%) 15984.657 B/op [Average]
[info]   (min, avg, max) = (64603.609, 68755.832, 73712.335), stdev = 4151.165
[info]   CI (99.9%): [52771.175, 84740.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.count":
[info]   47.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.400, 10.000), stdev = 0.548
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 9.200, 12.000), stdev = 2.168
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce
[info] # Run progress: 54.24% complete, ETA 00:32:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 206394.554 ops/s
[info] # Warmup Iteration   2: 263243.771 ops/s
[info] # Warmup Iteration   3: 262369.177 ops/s
[info] Iteration   1: 260354.688 ops/s
[info]                  ·gc.alloc.rate:                                  1563.313 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9448.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.053 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.321 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1351.923 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8170.450 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                20.134 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   2: 269163.262 ops/s
[info]                  ·gc.alloc.rate:                                  1615.496 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9448.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.067 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.391 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.657 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9951.902 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 266348.392 ops/s
[info]                  ·gc.alloc.rate:                                  1598.621 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9448.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.031 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.682 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10057.103 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 267693.106 ops/s
[info]                  ·gc.alloc.rate:                                  1606.795 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9448.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.030 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.423 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8005.204 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 268448.393 ops/s
[info]                  ·gc.alloc.rate:                                  1611.265 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9448.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.024 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.695 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9978.255 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce":
[info]   266401.568 ±(99.9%) 13621.174 ops/s [Average]
[info]   (min, avg, max) = (260354.688, 266401.568, 269163.262), stdev = 3537.376
[info]   CI (99.9%): [252780.394, 280022.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1599.098 ±(99.9%) 80.703 MB/sec [Average]
[info]   (min, avg, max) = (1563.313, 1599.098, 1615.496), stdev = 20.958
[info]   CI (99.9%): [1518.395, 1679.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   9448.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9448.002, 9448.002, 9448.002), stdev = 0.001
[info]   CI (99.9%): [9448.001, 9448.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.027 ±(99.9%) 0.118 MB/sec [Average]
[info]   (min, avg, max) = (0.004, 0.027, 0.067), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.159 ±(99.9%) 0.697 B/op [Average]
[info]   (min, avg, max) = (0.024, 0.159, 0.391), stdev = 0.181
[info]   CI (99.9%): [≈ 0, 0.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1563.676 ±(99.9%) 727.760 MB/sec [Average]
[info]   (min, avg, max) = (1351.923, 1563.676, 1701.695), stdev = 188.997
[info]   CI (99.9%): [835.916, 2291.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   9232.583 ±(99.9%) 4033.017 B/op [Average]
[info]   (min, avg, max) = (8005.204, 9232.583, 10057.103), stdev = 1047.362
[info]   CI (99.9%): [5199.566, 13265.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.737 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   4.027 ±(99.9%) 34.672 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.027, 20.134), stdev = 9.004
[info]   CI (99.9%): [≈ 0, 38.699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 11.000), stdev = 3.271
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala
[info] # Run progress: 54.55% complete, ETA 00:32:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 759571.915 ops/s
[info] # Warmup Iteration   2: 1241467.620 ops/s
[info] # Warmup Iteration   3: 1245123.954 ops/s
[info] Iteration   1: 1244450.539 ops/s
[info]                  ·gc.alloc.rate:            815.846 MB/sec
[info]                  ·gc.alloc.rate.norm:       1032.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.648 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 850.863 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 1234947.676 ops/s
[info]                  ·gc.alloc.rate:            809.978 MB/sec
[info]                  ·gc.alloc.rate.norm:       1032.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.457 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1286.159 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   3: 1221902.430 ops/s
[info]                  ·gc.alloc.rate:            801.073 MB/sec
[info]                  ·gc.alloc.rate.norm:       1032.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.675 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 866.589 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 1231449.678 ops/s
[info]                  ·gc.alloc.rate:                                  807.934 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1032.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.082 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.105 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1012.815 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1293.701 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.995 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                5.103 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   5: 1217575.192 ops/s
[info]                  ·gc.alloc.rate:                                  798.279 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1032.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.046 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.060 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.708 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       880.007 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala":
[info]   1230065.103 ±(99.9%) 41083.161 ops/s [Average]
[info]   (min, avg, max) = (1217575.192, 1230065.103, 1244450.539), stdev = 10669.166
[info]   CI (99.9%): [1188981.943, 1271148.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   806.622 ±(99.9%) 27.124 MB/sec [Average]
[info]   (min, avg, max) = (798.279, 806.622, 815.846), stdev = 7.044
[info]   CI (99.9%): [779.498, 833.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1032.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1032.000, 1032.000, 1032.000), stdev = 0.001
[info]   CI (99.9%): [1032.000, 1032.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.026 ±(99.9%) 0.144 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.082), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.033 ±(99.9%) 0.184 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.105), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   809.661 ±(99.9%) 708.342 MB/sec [Average]
[info]   (min, avg, max) = (672.648, 809.661, 1012.815), stdev = 183.954
[info]   CI (99.9%): [101.318, 1518.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1035.464 ±(99.9%) 895.426 B/op [Average]
[info]   (min, avg, max) = (850.863, 1035.464, 1293.701), stdev = 232.539
[info]   CI (99.9%): [140.038, 1930.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.880 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.995), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.021 ±(99.9%) 8.788 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.021, 5.103), stdev = 2.282
[info]   CI (99.9%): [≈ 0, 9.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 9.000, 17.000), stdev = 5.385
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala
[info] # Run progress: 54.85% complete, ETA 00:31:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1346472.064 ops/s
[info] # Warmup Iteration   2: 1477546.815 ops/s
[info] # Warmup Iteration   3: 1472619.350 ops/s
[info] Iteration   1: 1498395.122 ops/s
[info]                  ·gc.alloc.rate:            616.825 MB/sec
[info]                  ·gc.alloc.rate.norm:       648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.000 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 708.065 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 1487033.062 ops/s
[info]                  ·gc.alloc.rate:                   612.085 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             336.309 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        356.042 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.705 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1468221.610 ops/s
[info]                  ·gc.alloc.rate:                   604.421 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.373 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        721.924 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.714 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 1464424.943 ops/s
[info]                  ·gc.alloc.rate:                   602.873 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.393 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        723.798 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.716 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 1497736.232 ops/s
[info]                  ·gc.alloc.rate:            616.624 MB/sec
[info]                  ·gc.alloc.rate.norm:       648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.429 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 707.695 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala":
[info]   1483162.194 ±(99.9%) 61902.438 ops/s [Average]
[info]   (min, avg, max) = (1464424.943, 1483162.194, 1498395.122), stdev = 16075.867
[info]   CI (99.9%): [1421259.756, 1545064.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   610.566 ±(99.9%) 25.478 MB/sec [Average]
[info]   (min, avg, max) = (602.873, 610.566, 616.825), stdev = 6.617
[info]   CI (99.9%): [585.087, 636.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   648.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (648.000, 648.000, 648.000), stdev = 0.001
[info]   CI (99.9%): [648.000, 648.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   606.101 ±(99.9%) 580.748 MB/sec [Average]
[info]   (min, avg, max) = (336.309, 606.101, 674.000), stdev = 150.818
[info]   CI (99.9%): [25.352, 1186.849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   643.505 ±(99.9%) 619.462 B/op [Average]
[info]   (min, avg, max) = (356.042, 643.505, 723.798), stdev = 160.872
[info]   CI (99.9%): [24.043, 1262.967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.400 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.400, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.427 ±(99.9%) 1.501 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.427, 0.716), stdev = 0.390
[info]   CI (99.9%): [≈ 0, 1.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 6.000), stdev = 1.342
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 55.15% complete, ETA 00:31:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1417326.978 ops/s
[info] # Warmup Iteration   2: 1553971.269 ops/s
[info] # Warmup Iteration   3: 1535939.447 ops/s
[info] Iteration   1: 1535558.791 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1539660.185 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1539224.052 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1535003.668 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1538963.784 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc":
[info]   1537682.096 ±(99.9%) 8527.152 ops/s [Average]
[info]   (min, avg, max) = (1535003.668, 1537682.096, 1539660.185), stdev = 2214.474
[info]   CI (99.9%): [1529154.944, 1546209.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson
[info] # Run progress: 55.45% complete, ETA 00:31:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21381.993 ops/s
[info] # Warmup Iteration   2: 34392.794 ops/s
[info] # Warmup Iteration   3: 34855.133 ops/s
[info] Iteration   1: 35357.045 ops/s
[info]                  ·gc.alloc.rate:                                  1729.301 MB/sec
[info]                  ·gc.alloc.rate.norm:                             76993.040 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.183 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 8.152 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1689.626 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       75226.573 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                177.911 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        14.000 ms
[info] Iteration   2: 35726.311 ops/s
[info]                  ·gc.alloc.rate:                                  1747.113 MB/sec
[info]                  ·gc.alloc.rate.norm:                             76984.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.234 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.586 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       74977.938 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 35575.382 ops/s
[info]                  ·gc.alloc.rate:                                  1740.087 MB/sec
[info]                  ·gc.alloc.rate.norm:                             76984.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.160 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.936 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       75296.132 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 35740.083 ops/s
[info]                  ·gc.alloc.rate:                                  1747.960 MB/sec
[info]                  ·gc.alloc.rate.norm:                             76984.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.289 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.696 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       74946.476 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 35186.886 ops/s
[info]                  ·gc.alloc.rate:                                  1720.817 MB/sec
[info]                  ·gc.alloc.rate.norm:                             76984.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.079 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.692 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       76128.429 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson":
[info]   35517.141 ±(99.9%) 926.450 ops/s [Average]
[info]   (min, avg, max) = (35186.886, 35517.141, 35740.083), stdev = 240.596
[info]   CI (99.9%): [34590.691, 36443.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1737.056 ±(99.9%) 45.279 MB/sec [Average]
[info]   (min, avg, max) = (1720.817, 1737.056, 1747.960), stdev = 11.759
[info]   CI (99.9%): [1691.777, 1782.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   76985.818 ±(99.9%) 15.548 B/op [Average]
[info]   (min, avg, max) = (76984.011, 76985.818, 76993.040), stdev = 4.038
[info]   CI (99.9%): [76970.270, 77001.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.040 ±(99.9%) 0.308 MB/sec [Average]
[info]   (min, avg, max) = (0.002, 0.040, 0.183), stdev = 0.080
[info]   CI (99.9%): [≈ 0, 0.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.783 ±(99.9%) 13.714 B/op [Average]
[info]   (min, avg, max) = (0.079, 1.783, 8.152), stdev = 3.562
[info]   CI (99.9%): [≈ 0, 15.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1699.307 ±(99.9%) 20.846 MB/sec [Average]
[info]   (min, avg, max) = (1689.626, 1699.307, 1701.936), stdev = 5.414
[info]   CI (99.9%): [1678.461, 1720.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   75315.110 ±(99.9%) 1845.964 B/op [Average]
[info]   (min, avg, max) = (74946.476, 75315.110, 76128.429), stdev = 479.391
[info]   CI (99.9%): [73469.146, 77161.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   35.582 ±(99.9%) 306.373 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 35.582, 177.911), stdev = 79.564
[info]   CI (99.9%): [≈ 0, 341.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 14.000), stdev = 4.528
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce
[info] # Run progress: 55.76% complete, ETA 00:31:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 34743.245 ops/s
[info] # Warmup Iteration   2: 44707.520 ops/s
[info] # Warmup Iteration   3: 45836.238 ops/s
[info] Iteration   1: 46656.118 ops/s
[info]                  ·gc.alloc.rate:            930.634 MB/sec
[info]                  ·gc.alloc.rate.norm:       31400.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.950 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 34109.898 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 46731.816 ops/s
[info]                  ·gc.alloc.rate:            932.088 MB/sec
[info]                  ·gc.alloc.rate.norm:       31400.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.905 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 34055.164 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 47004.496 ops/s
[info]                  ·gc.alloc.rate:            937.622 MB/sec
[info]                  ·gc.alloc.rate.norm:       31400.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.016 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 22572.086 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 46502.865 ops/s
[info]                  ·gc.alloc.rate:                                  927.893 MB/sec
[info]                  ·gc.alloc.rate.norm:                             31400.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.031 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.040 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1018.037 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       34450.506 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                112.731 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 46650.386 ops/s
[info]                  ·gc.alloc.rate:                                  930.581 MB/sec
[info]                  ·gc.alloc.rate.norm:                             31400.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.231 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.991 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       34450.643 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce":
[info]   46709.136 ±(99.9%) 711.489 ops/s [Average]
[info]   (min, avg, max) = (46502.865, 46709.136, 47004.496), stdev = 184.771
[info]   CI (99.9%): [45997.647, 47420.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate":
[info]   931.764 ±(99.9%) 13.896 MB/sec [Average]
[info]   (min, avg, max) = (927.893, 931.764, 937.622), stdev = 3.609
[info]   CI (99.9%): [917.868, 945.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   31400.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (31400.009, 31400.009, 31400.009), stdev = 0.001
[info]   CI (99.9%): [31400.008, 31400.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.008 ±(99.9%) 0.051 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.031), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.254 ±(99.9%) 1.734 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.254, 1.040), stdev = 0.450
[info]   CI (99.9%): [≈ 0, 1.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   946.979 ±(99.9%) 587.822 MB/sec [Average]
[info]   (min, avg, max) = (674.016, 946.979, 1020.991), stdev = 152.655
[info]   CI (99.9%): [359.158, 1534.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   31927.659 ±(99.9%) 20151.177 B/op [Average]
[info]   (min, avg, max) = (22572.086, 31927.659, 34450.643), stdev = 5233.197
[info]   CI (99.9%): [11776.482, 52078.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.737 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   22.546 ±(99.9%) 194.129 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 22.546, 112.731), stdev = 50.415
[info]   CI (99.9%): [≈ 0, 216.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 9.000), stdev = 2.608
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala
[info] # Run progress: 56.06% complete, ETA 00:31:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 52569.484 ops/s
[info] # Warmup Iteration   2: 80547.662 ops/s
[info] # Warmup Iteration   3: 81038.419 ops/s
[info] Iteration   1: 81132.639 ops/s
[info]                  ·gc.alloc.rate:            855.328 MB/sec
[info]                  ·gc.alloc.rate.norm:       16592.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.180 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19576.485 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 80724.893 ops/s
[info]                  ·gc.alloc.rate:            850.894 MB/sec
[info]                  ·gc.alloc.rate.norm:       16592.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.689 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13117.103 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 79961.472 ops/s
[info]                  ·gc.alloc.rate:            842.841 MB/sec
[info]                  ·gc.alloc.rate.norm:       16592.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.058 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19864.112 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   4: 80304.458 ops/s
[info]                  ·gc.alloc.rate:                                  846.588 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16592.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.036 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.715 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            676.790 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       13264.190 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                78.332 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 78489.405 ops/s
[info]                  ·gc.alloc.rate:                                  827.347 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16592.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.037 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.749 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.109 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       20477.808 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala":
[info]   80122.573 ±(99.9%) 3902.897 ops/s [Average]
[info]   (min, avg, max) = (78489.405, 80122.573, 81132.639), stdev = 1013.570
[info]   CI (99.9%): [76219.677, 84025.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   844.600 ±(99.9%) 41.267 MB/sec [Average]
[info]   (min, avg, max) = (827.347, 844.600, 855.328), stdev = 10.717
[info]   CI (99.9%): [803.332, 885.867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   16592.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16592.005, 16592.005, 16592.006), stdev = 0.001
[info]   CI (99.9%): [16592.004, 16592.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.015 ±(99.9%) 0.078 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.037), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.293 ±(99.9%) 1.544 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.293, 0.749), stdev = 0.401
[info]   CI (99.9%): [≈ 0, 1.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   877.765 ±(99.9%) 713.935 MB/sec [Average]
[info]   (min, avg, max) = (672.689, 877.765, 1021.109), stdev = 185.407
[info]   CI (99.9%): [163.830, 1591.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   17259.940 ±(99.9%) 14360.358 B/op [Average]
[info]   (min, avg, max) = (13117.103, 17259.940, 20477.808), stdev = 3729.339
[info]   CI (99.9%): [2899.581, 31620.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   15.666 ±(99.9%) 134.892 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15.666, 78.332), stdev = 35.031
[info]   CI (99.9%): [≈ 0, 150.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.400, 12.000), stdev = 3.912
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala
[info] # Run progress: 56.36% complete, ETA 00:30:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 237278.344 ops/s
[info] # Warmup Iteration   2: 257045.661 ops/s
[info] # Warmup Iteration   3: 260026.186 ops/s
[info] Iteration   1: 254450.692 ops/s
[info]                  ·gc.alloc.rate:            827.586 MB/sec
[info]                  ·gc.alloc.rate.norm:       5120.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.978 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4169.681 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 253924.840 ops/s
[info]                  ·gc.alloc.rate:            825.917 MB/sec
[info]                  ·gc.alloc.rate.norm:       5120.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.006 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6267.402 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 258826.877 ops/s
[info]                  ·gc.alloc.rate:            841.890 MB/sec
[info]                  ·gc.alloc.rate.norm:       5120.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.045 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4099.244 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 258198.714 ops/s
[info]                  ·gc.alloc.rate:                                  840.104 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5120.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.050 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.305 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1014.704 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6184.097 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                20.302 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 259401.750 ops/s
[info]                  ·gc.alloc.rate:                                  843.841 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5120.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.026 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.158 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.768 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4130.559 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala":
[info]   256960.574 ±(99.9%) 9909.444 ops/s [Average]
[info]   (min, avg, max) = (253924.840, 256960.574, 259401.750), stdev = 2573.451
[info]   CI (99.9%): [247051.130, 266870.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   835.868 ±(99.9%) 32.526 MB/sec [Average]
[info]   (min, avg, max) = (825.917, 835.868, 843.841), stdev = 8.447
[info]   CI (99.9%): [803.342, 868.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5120.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5120.002, 5120.002, 5120.002), stdev = 0.001
[info]   CI (99.9%): [5120.001, 5120.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.015 ±(99.9%) 0.087 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.050), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.093 ±(99.9%) 0.528 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.093, 0.305), stdev = 0.137
[info]   CI (99.9%): [≈ 0, 0.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   810.900 ±(99.9%) 709.996 MB/sec [Average]
[info]   (min, avg, max) = (673.978, 810.900, 1014.704), stdev = 184.384
[info]   CI (99.9%): [100.904, 1520.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   4970.197 ±(99.9%) 4415.948 B/op [Average]
[info]   (min, avg, max) = (4099.244, 4970.197, 6267.402), stdev = 1146.808
[info]   CI (99.9%): [554.249, 9386.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.737 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   4.060 ±(99.9%) 34.962 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.060, 20.302), stdev = 9.079
[info]   CI (99.9%): [≈ 0, 39.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.600, 9.000), stdev = 2.608
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson
[info] # Run progress: 56.67% complete, ETA 00:30:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12756.771 ops/s
[info] # Warmup Iteration   2: 22615.145 ops/s
[info] # Warmup Iteration   3: 22859.929 ops/s
[info] Iteration   1: 22827.129 ops/s
[info]                  ·gc.alloc.rate:            1072.509 MB/sec
[info]                  ·gc.alloc.rate.norm:       73960.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.957 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 69577.463 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 23503.619 ops/s
[info]                  ·gc.alloc.rate:            1104.262 MB/sec
[info]                  ·gc.alloc.rate.norm:       73960.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.998 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 67579.557 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   3: 22940.967 ops/s
[info]                  ·gc.alloc.rate:                                  1077.966 MB/sec
[info]                  ·gc.alloc.rate.norm:                             73960.018 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.330 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 22.643 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.089 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       69783.201 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                274.197 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 23941.467 ops/s
[info]                  ·gc.alloc.rate:                                  1125.285 MB/sec
[info]                  ·gc.alloc.rate.norm:                             73960.018 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.045 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.939 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.857 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       89508.847 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 23801.634 ops/s
[info]                  ·gc.alloc.rate:            1118.574 MB/sec
[info]                  ·gc.alloc.rate.norm:       73960.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.187 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 67520.772 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson":
[info]   23402.963 ±(99.9%) 1929.248 ops/s [Average]
[info]   (min, avg, max) = (22827.129, 23402.963, 23941.467), stdev = 501.020
[info]   CI (99.9%): [21473.715, 25332.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1099.719 ±(99.9%) 91.191 MB/sec [Average]
[info]   (min, avg, max) = (1072.509, 1099.719, 1125.285), stdev = 23.682
[info]   CI (99.9%): [1008.529, 1190.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   73960.019 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (73960.017, 73960.019, 73960.022), stdev = 0.002
[info]   CI (99.9%): [73960.012, 73960.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.075 ±(99.9%) 0.554 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.075, 0.330), stdev = 0.144
[info]   CI (99.9%): [≈ 0, 0.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   5.117 ±(99.9%) 38.045 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.117, 22.643), stdev = 9.880
[info]   CI (99.9%): [≈ 0, 43.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1083.618 ±(99.9%) 599.277 MB/sec [Average]
[info]   (min, avg, max) = (1008.957, 1083.618, 1361.857), stdev = 155.630
[info]   CI (99.9%): [484.341, 1682.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   72793.968 ±(99.9%) 36214.200 B/op [Average]
[info]   (min, avg, max) = (67520.772, 72793.968, 89508.847), stdev = 9404.713
[info]   CI (99.9%): [36579.768, 109008.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   54.839 ±(99.9%) 472.184 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 54.839, 274.197), stdev = 122.625
[info]   CI (99.9%): [≈ 0, 527.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.600, 13.000), stdev = 5.128
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce
[info] # Run progress: 56.97% complete, ETA 00:30:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 46719.817 ops/s
[info] # Warmup Iteration   2: 57529.326 ops/s
[info] # Warmup Iteration   3: 58640.299 ops/s
[info] Iteration   1: 59131.652 ops/s
[info]                  ·gc.alloc.rate:            877.208 MB/sec
[info]                  ·gc.alloc.rate.norm:       23352.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.016 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 17942.864 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 58582.672 ops/s
[info]                  ·gc.alloc.rate:            869.199 MB/sec
[info]                  ·gc.alloc.rate.norm:       23352.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.197 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 27166.943 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 58473.012 ops/s
[info]                  ·gc.alloc.rate:            867.446 MB/sec
[info]                  ·gc.alloc.rate.norm:       23352.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.021 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 27217.112 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 58928.550 ops/s
[info]                  ·gc.alloc.rate:                                  874.572 MB/sec
[info]                  ·gc.alloc.rate.norm:                             23352.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.031 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.825 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            677.648 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       18093.927 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                88.957 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 57969.007 ops/s
[info]                  ·gc.alloc.rate:                                  860.386 MB/sec
[info]                  ·gc.alloc.rate.norm:                             23352.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.022 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.589 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.487 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       27724.509 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce":
[info]   58616.979 ±(99.9%) 1726.075 ops/s [Average]
[info]   (min, avg, max) = (57969.007, 58616.979, 59131.652), stdev = 448.256
[info]   CI (99.9%): [56890.903, 60343.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate":
[info]   869.762 ±(99.9%) 25.263 MB/sec [Average]
[info]   (min, avg, max) = (860.386, 869.762, 877.208), stdev = 6.561
[info]   CI (99.9%): [844.499, 895.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   23352.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (23352.007, 23352.007, 23352.008), stdev = 0.001
[info]   CI (99.9%): [23352.006, 23352.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.011 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.031), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.283 ±(99.9%) 1.526 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.283, 0.825), stdev = 0.396
[info]   CI (99.9%): [≈ 0, 1.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   879.074 ±(99.9%) 714.627 MB/sec [Average]
[info]   (min, avg, max) = (674.016, 879.074, 1021.487), stdev = 185.586
[info]   CI (99.9%): [164.447, 1593.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   23629.071 ±(99.9%) 19741.260 B/op [Average]
[info]   (min, avg, max) = (17942.864, 23629.071, 27724.509), stdev = 5126.743
[info]   CI (99.9%): [3887.811, 43370.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.737 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.332), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   17.791 ±(99.9%) 153.190 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17.791, 88.957), stdev = 39.783
[info]   CI (99.9%): [≈ 0, 170.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.400, 10.000), stdev = 3.209
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala
[info] # Run progress: 57.27% complete, ETA 00:30:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 58910.731 ops/s
[info] # Warmup Iteration   2: 94589.908 ops/s
[info] # Warmup Iteration   3: 95044.783 ops/s
[info] Iteration   1: 94353.698 ops/s
[info]                  ·gc.alloc.rate:            1292.252 MB/sec
[info]                  ·gc.alloc.rate.norm:       21559.983 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.276 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 22444.644 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 95696.508 ops/s
[info]                  ·gc.alloc.rate:                                  1310.934 MB/sec
[info]                  ·gc.alloc.rate.norm:                             21560.025 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.162 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.662 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.184 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       16728.925 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                65.733 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 95791.283 ops/s
[info]                  ·gc.alloc.rate:                                  1312.383 MB/sec
[info]                  ·gc.alloc.rate.norm:                             21560.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.073 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.729 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       22370.672 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 96194.222 ops/s
[info]                  ·gc.alloc.rate:                                  1317.949 MB/sec
[info]                  ·gc.alloc.rate.norm:                             21559.983 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.062 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.778 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       22276.968 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 95660.602 ops/s
[info]                  ·gc.alloc.rate:                                  1310.277 MB/sec
[info]                  ·gc.alloc.rate.norm:                             21560.025 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.376 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       22400.833 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala":
[info]   95539.263 ±(99.9%) 2679.934 ops/s [Average]
[info]   (min, avg, max) = (94353.698, 95539.263, 96194.222), stdev = 695.970
[info]   CI (99.9%): [92859.329, 98219.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1308.759 ±(99.9%) 37.389 MB/sec [Average]
[info]   (min, avg, max) = (1292.252, 1308.759, 1317.949), stdev = 9.710
[info]   CI (99.9%): [1271.370, 1346.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   21560.004 ±(99.9%) 0.081 B/op [Average]
[info]   (min, avg, max) = (21559.983, 21560.004, 21560.025), stdev = 0.021
[info]   CI (99.9%): [21559.924, 21560.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.034 ±(99.9%) 0.275 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.034, 0.162), stdev = 0.071
[info]   CI (99.9%): [≈ 0, 0.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.560 ±(99.9%) 4.527 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.560, 2.662), stdev = 1.176
[info]   CI (99.9%): [≈ 0, 5.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1289.469 ±(99.9%) 586.747 MB/sec [Average]
[info]   (min, avg, max) = (1017.184, 1289.469, 1361.778), stdev = 152.376
[info]   CI (99.9%): [702.722, 1876.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   21244.408 ±(99.9%) 9722.805 B/op [Average]
[info]   (min, avg, max) = (16728.925, 21244.408, 22444.644), stdev = 2524.982
[info]   CI (99.9%): [11521.603, 30967.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   13.147 ±(99.9%) 113.195 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13.147, 65.733), stdev = 29.396
[info]   CI (99.9%): [≈ 0, 126.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.800, 16.000), stdev = 5.357
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala
[info] # Run progress: 57.58% complete, ETA 00:29:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 257290.290 ops/s
[info] # Warmup Iteration   2: 282149.398 ops/s
[info] # Warmup Iteration   3: 287157.648 ops/s
[info] Iteration   1: 286708.287 ops/s
[info]                  ·gc.alloc.rate:                   913.545 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1010.316 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5547.344 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.657 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 280299.195 ops/s
[info]                  ·gc.alloc.rate:            893.165 MB/sec
[info]                  ·gc.alloc.rate.norm:       5016.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.056 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5666.846 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 286535.245 ops/s
[info]                  ·gc.alloc.rate:                   913.000 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.661 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5547.053 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 21.954 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 284284.993 ops/s
[info]                  ·gc.alloc.rate:                                  906.127 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5016.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.114 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.631 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.860 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3769.004 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 283717.164 ops/s
[info]                  ·gc.alloc.rate:                                  904.423 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5016.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.018 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.101 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.378 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5664.643 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala":
[info]   284308.977 ±(99.9%) 10030.562 ops/s [Average]
[info]   (min, avg, max) = (280299.195, 284308.977, 286708.287), stdev = 2604.905
[info]   CI (99.9%): [274278.415, 294339.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   906.052 ±(99.9%) 31.821 MB/sec [Average]
[info]   (min, avg, max) = (893.165, 906.052, 913.545), stdev = 8.264
[info]   CI (99.9%): [874.231, 937.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5016.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5016.001, 5016.001, 5016.002), stdev = 0.001
[info]   CI (99.9%): [5016.001, 5016.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.026 ±(99.9%) 0.191 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.114), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.146 ±(99.9%) 1.056 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.146, 0.631), stdev = 0.274
[info]   CI (99.9%): [≈ 0, 1.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   946.254 ±(99.9%) 571.616 MB/sec [Average]
[info]   (min, avg, max) = (680.860, 946.254, 1021.378), stdev = 148.447
[info]   CI (99.9%): [374.638, 1517.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   5238.978 ±(99.9%) 3172.452 B/op [Average]
[info]   (min, avg, max) = (3769.004, 5238.978, 5666.846), stdev = 823.876
[info]   CI (99.9%): [2066.526, 8411.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   5.122 ±(99.9%) 36.741 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.122, 21.954), stdev = 9.542
[info]   CI (99.9%): [≈ 0, 41.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.200, 9.000), stdev = 3.834
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 57.88% complete, ETA 00:29:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 299002.968 ops/s
[info] # Warmup Iteration   2: 321676.091 ops/s
[info] # Warmup Iteration   3: 301124.809 ops/s
[info] Iteration   1: 322416.071 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 321999.988 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 322888.032 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 322622.594 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 322817.959 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc":
[info]   322548.929 ±(99.9%) 1377.355 ops/s [Average]
[info]   (min, avg, max) = (321999.988, 322548.929, 322888.032), stdev = 357.695
[info]   CI (99.9%): [321171.573, 323926.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson
[info] # Run progress: 58.18% complete, ETA 00:29:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 57593.141 ops/s
[info] # Warmup Iteration   2: 76062.860 ops/s
[info] # Warmup Iteration   3: 76800.196 ops/s
[info] Iteration   1: 76034.154 ops/s
[info]                  ·gc.alloc.rate:            1126.852 MB/sec
[info]                  ·gc.alloc.rate.norm:       23328.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.053 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 20889.341 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 75834.280 ops/s
[info]                  ·gc.alloc.rate:                   1124.117 MB/sec
[info]                  ·gc.alloc.rate.norm:              23328.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.713 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        27926.634 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 82.950 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   3: 76953.417 ops/s
[info]                  ·gc.alloc.rate:                                  1140.482 MB/sec
[info]                  ·gc.alloc.rate.norm:                             23327.979 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.135 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.762 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.081 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       20885.688 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 78007.472 ops/s
[info]                  ·gc.alloc.rate:                                  1156.060 MB/sec
[info]                  ·gc.alloc.rate.norm:                             23328.031 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.017 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       20603.004 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 78036.804 ops/s
[info]                  ·gc.alloc.rate:                                  1156.508 MB/sec
[info]                  ·gc.alloc.rate.norm:                             23328.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.112 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.309 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       27459.058 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson":
[info]   76973.225 ±(99.9%) 4029.543 ops/s [Average]
[info]   (min, avg, max) = (75834.280, 76973.225, 78036.804), stdev = 1046.459
[info]   CI (99.9%): [72943.683, 81002.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1140.804 ±(99.9%) 59.424 MB/sec [Average]
[info]   (min, avg, max) = (1124.117, 1140.804, 1156.508), stdev = 15.432
[info]   CI (99.9%): [1081.380, 1200.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   23328.005 ±(99.9%) 0.070 B/op [Average]
[info]   (min, avg, max) = (23327.979, 23328.005, 23328.031), stdev = 0.018
[info]   CI (99.9%): [23327.935, 23328.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.028 ±(99.9%) 0.230 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.135), stdev = 0.060
[info]   CI (99.9%): [≈ 0, 0.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.575 ±(99.9%) 4.712 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.575, 2.762), stdev = 1.224
[info]   CI (99.9%): [≈ 0, 5.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1151.634 ±(99.9%) 710.192 MB/sec [Average]
[info]   (min, avg, max) = (1009.053, 1151.634, 1361.309), stdev = 184.435
[info]   CI (99.9%): [441.442, 1861.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   23552.745 ±(99.9%) 14573.819 B/op [Average]
[info]   (min, avg, max) = (20603.004, 23552.745, 27926.634), stdev = 3784.775
[info]   CI (99.9%): [8978.926, 38126.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   16.590 ±(99.9%) 142.846 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16.590, 82.950), stdev = 37.097
[info]   CI (99.9%): [≈ 0, 159.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.400, 16.000), stdev = 6.189
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce
[info] # Run progress: 58.48% complete, ETA 00:29:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 44549.703 ops/s
[info] # Warmup Iteration   2: 67873.765 ops/s
[info] # Warmup Iteration   3: 67773.529 ops/s
[info] Iteration   1: 68039.372 ops/s
[info]                  ·gc.alloc.rate:            1378.920 MB/sec
[info]                  ·gc.alloc.rate.norm:       31904.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1681.592 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 38906.914 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   2: 70257.737 ops/s
[info]                  ·gc.alloc.rate:                                  1424.365 MB/sec
[info]                  ·gc.alloc.rate.norm:                             31904.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.143 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.193 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1357.758 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       30412.106 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                89.535 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 70368.566 ops/s
[info]                  ·gc.alloc.rate:                                  1426.270 MB/sec
[info]                  ·gc.alloc.rate.norm:                             31904.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.105 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.446 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       30453.968 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 70409.371 ops/s
[info]                  ·gc.alloc.rate:                                  1427.313 MB/sec
[info]                  ·gc.alloc.rate.norm:                             31904.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.085 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.610 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       30435.372 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 71169.057 ops/s
[info]                  ·gc.alloc.rate:                                  1442.497 MB/sec
[info]                  ·gc.alloc.rate.norm:                             31904.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.147 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.440 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       30111.260 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce":
[info]   70048.821 ±(99.9%) 4543.389 ops/s [Average]
[info]   (min, avg, max) = (68039.372, 70048.821, 71169.057), stdev = 1179.904
[info]   CI (99.9%): [65505.431, 74592.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate":
[info]   1419.873 ±(99.9%) 92.444 MB/sec [Average]
[info]   (min, avg, max) = (1378.920, 1419.873, 1442.497), stdev = 24.007
[info]   CI (99.9%): [1327.429, 1512.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   31904.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (31904.006, 31904.006, 31904.006), stdev = 0.001
[info]   CI (99.9%): [31904.005, 31904.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.032 ±(99.9%) 0.239 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.032, 0.143), stdev = 0.062
[info]   CI (99.9%): [≈ 0, 0.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.706 ±(99.9%) 5.358 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.706, 3.193), stdev = 1.391
[info]   CI (99.9%): [≈ 0, 6.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1424.769 ±(99.9%) 552.866 MB/sec [Average]
[info]   (min, avg, max) = (1357.758, 1424.769, 1681.592), stdev = 143.578
[info]   CI (99.9%): [871.903, 1977.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   32063.924 ±(99.9%) 14739.978 B/op [Average]
[info]   (min, avg, max) = (30111.260, 32063.924, 38906.914), stdev = 3827.925
[info]   CI (99.9%): [17323.946, 46803.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.884 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   17.907 ±(99.9%) 154.185 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17.907, 89.535), stdev = 40.041
[info]   CI (99.9%): [≈ 0, 172.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.600, 17.000), stdev = 5.941
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala
[info] # Run progress: 58.79% complete, ETA 00:29:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 41861.236 ops/s
[info] # Warmup Iteration   2: 75482.756 ops/s
[info] # Warmup Iteration   3: 75717.519 ops/s
[info] Iteration   1: 76273.398 ops/s
[info]                  ·gc.alloc.rate:            879.097 MB/sec
[info]                  ·gc.alloc.rate.norm:       18144.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1006.956 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 20782.934 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 75864.320 ops/s
[info]                  ·gc.alloc.rate:            874.434 MB/sec
[info]                  ·gc.alloc.rate.norm:       18144.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.342 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13929.974 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 75701.624 ops/s
[info]                  ·gc.alloc.rate:            872.473 MB/sec
[info]                  ·gc.alloc.rate.norm:       18144.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1006.932 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 20940.220 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   4: 77024.833 ops/s
[info]                  ·gc.alloc.rate:                                  887.819 MB/sec
[info]                  ·gc.alloc.rate.norm:                             18144.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.101 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.070 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1016.343 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       20770.619 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                95.278 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 78121.082 ops/s
[info]                  ·gc.alloc.rate:                                  900.527 MB/sec
[info]                  ·gc.alloc.rate.norm:                             18144.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.094 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.721 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       13715.296 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala":
[info]   76597.051 ±(99.9%) 3826.068 ops/s [Average]
[info]   (min, avg, max) = (75701.624, 76597.051, 78121.082), stdev = 993.618
[info]   CI (99.9%): [72770.984, 80423.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   882.870 ±(99.9%) 44.315 MB/sec [Average]
[info]   (min, avg, max) = (872.473, 882.870, 900.527), stdev = 11.508
[info]   CI (99.9%): [838.555, 927.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   18144.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (18144.005, 18144.005, 18144.006), stdev = 0.001
[info]   CI (99.9%): [18144.005, 18144.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.021 ±(99.9%) 0.173 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.101), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.433 ±(99.9%) 3.528 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.433, 2.070), stdev = 0.916
[info]   CI (99.9%): [≈ 0, 3.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   876.459 ±(99.9%) 704.801 MB/sec [Average]
[info]   (min, avg, max) = (671.342, 876.459, 1016.343), stdev = 183.035
[info]   CI (99.9%): [171.658, 1581.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   18027.809 ±(99.9%) 14786.909 B/op [Average]
[info]   (min, avg, max) = (13715.296, 18027.809, 20940.220), stdev = 3840.113
[info]   CI (99.9%): [3240.899, 32814.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   19.056 ±(99.9%) 164.075 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 19.056, 95.278), stdev = 42.610
[info]   CI (99.9%): [≈ 0, 183.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.600, 13.000), stdev = 4.615
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala
[info] # Run progress: 59.09% complete, ETA 00:28:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 81986.513 ops/s
[info] # Warmup Iteration   2: 100742.899 ops/s
[info] # Warmup Iteration   3: 101582.468 ops/s
[info] Iteration   1: 100496.889 ops/s
[info]                  ·gc.alloc.rate:            1058.612 MB/sec
[info]                  ·gc.alloc.rate.norm:       16576.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.803 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 21072.920 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 99136.913 ops/s
[info]                  ·gc.alloc.rate:            1043.992 MB/sec
[info]                  ·gc.alloc.rate.norm:       16576.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.076 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16021.630 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 100046.174 ops/s
[info]                  ·gc.alloc.rate:                                  1053.542 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16576.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.087 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.362 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.048 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       16001.834 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                62.876 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 99393.137 ops/s
[info]                  ·gc.alloc.rate:                                  1046.708 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16576.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.020 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.315 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.096 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       16170.399 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 99308.371 ops/s
[info]                  ·gc.alloc.rate:            1046.093 MB/sec
[info]                  ·gc.alloc.rate.norm:       16576.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.318 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16183.423 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala":
[info]   99676.297 ±(99.9%) 2209.230 ops/s [Average]
[info]   (min, avg, max) = (99136.913, 99676.297, 100496.889), stdev = 573.730
[info]   CI (99.9%): [97467.067, 101885.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1049.789 ±(99.9%) 23.476 MB/sec [Average]
[info]   (min, avg, max) = (1043.992, 1049.789, 1058.612), stdev = 6.097
[info]   CI (99.9%): [1026.313, 1073.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   16576.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16576.004, 16576.004, 16576.004), stdev = 0.001
[info]   CI (99.9%): [16576.004, 16576.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.021 ±(99.9%) 0.144 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.087), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.335 ±(99.9%) 2.272 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.335, 1.362), stdev = 0.590
[info]   CI (99.9%): [≈ 0, 2.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1082.868 ±(99.9%) 566.308 MB/sec [Average]
[info]   (min, avg, max) = (1009.076, 1082.868, 1345.803), stdev = 147.068
[info]   CI (99.9%): [516.560, 1649.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   17090.041 ±(99.9%) 8579.405 B/op [Average]
[info]   (min, avg, max) = (16001.834, 17090.041, 21072.920), stdev = 2228.044
[info]   CI (99.9%): [8510.636, 25669.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   12.575 ±(99.9%) 108.276 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12.575, 62.876), stdev = 28.119
[info]   CI (99.9%): [≈ 0, 120.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.400, 13.000), stdev = 4.561
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson
[info] # Run progress: 59.39% complete, ETA 00:28:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17871.777 ops/s
[info] # Warmup Iteration   2: 35569.436 ops/s
[info] # Warmup Iteration   3: 36249.980 ops/s
[info] Iteration   1: 35971.170 ops/s
[info]                  ·gc.alloc.rate:                                  1796.076 MB/sec
[info]                  ·gc.alloc.rate.norm:                             78600.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.099 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.349 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1692.317 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       74059.305 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                204.020 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        20.000 ms
[info] Iteration   2: 36949.192 ops/s
[info]                  ·gc.alloc.rate:                                  1845.103 MB/sec
[info]                  ·gc.alloc.rate.norm:                             78600.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.238 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.194 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       86995.914 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 37062.864 ops/s
[info]                  ·gc.alloc.rate:                                  1851.350 MB/sec
[info]                  ·gc.alloc.rate.norm:                             78600.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.141 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.292 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       72271.694 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 36978.002 ops/s
[info]                  ·gc.alloc.rate:                                  1847.073 MB/sec
[info]                  ·gc.alloc.rate.norm:                             78600.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.112 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.770 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       86927.699 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 36150.026 ops/s
[info]                  ·gc.alloc.rate:                                  1805.058 MB/sec
[info]                  ·gc.alloc.rate.norm:                             78600.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.285 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.731 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       74100.724 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson":
[info]   36622.251 ±(99.9%) 1995.745 ops/s [Average]
[info]   (min, avg, max) = (35971.170, 36622.251, 37062.864), stdev = 518.289
[info]   CI (99.9%): [34626.506, 38617.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1828.932 ±(99.9%) 100.830 MB/sec [Average]
[info]   (min, avg, max) = (1796.076, 1828.932, 1851.350), stdev = 26.185
[info]   CI (99.9%): [1728.102, 1929.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   78600.012 ±(99.9%) 0.005 B/op [Average]
[info]   (min, avg, max) = (78600.011, 78600.012, 78600.014), stdev = 0.001
[info]   CI (99.9%): [78600.007, 78600.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.023 ±(99.9%) 0.163 MB/sec [Average]
[info]   (min, avg, max) = (0.003, 0.023, 0.099), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.025 ±(99.9%) 7.161 B/op [Average]
[info]   (min, avg, max) = (0.112, 1.025, 4.349), stdev = 1.860
[info]   CI (99.9%): [≈ 0, 8.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1836.261 ±(99.9%) 725.058 MB/sec [Average]
[info]   (min, avg, max) = (1692.317, 1836.261, 2042.770), stdev = 188.295
[info]   CI (99.9%): [1111.203, 2561.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   78871.067 ±(99.9%) 28582.014 B/op [Average]
[info]   (min, avg, max) = (72271.694, 78871.067, 86995.914), stdev = 7422.658
[info]   CI (99.9%): [50289.054, 107453.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   40.804 ±(99.9%) 351.335 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 40.804, 204.020), stdev = 91.241
[info]   CI (99.9%): [≈ 0, 392.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.800, 20.000), stdev = 6.834
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce
[info] # Run progress: 59.70% complete, ETA 00:28:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 97202.869 ops/s
[info] # Warmup Iteration   2: 128223.344 ops/s
[info] # Warmup Iteration   3: 130242.087 ops/s
[info] Iteration   1: 126776.208 ops/s
[info]                  ·gc.alloc.rate:            562.414 MB/sec
[info]                  ·gc.alloc.rate.norm:       6984.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.611 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8352.420 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 125471.280 ops/s
[info]                  ·gc.alloc.rate:            556.667 MB/sec
[info]                  ·gc.alloc.rate.norm:       6984.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.662 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8439.277 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 128122.089 ops/s
[info]                  ·gc.alloc.rate:            568.416 MB/sec
[info]                  ·gc.alloc.rate.norm:       6984.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.332 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4132.440 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 128256.672 ops/s
[info]                  ·gc.alloc.rate:                   569.068 MB/sec
[info]                  ·gc.alloc.rate.norm:              6984.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.067 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        8248.072 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 8.175 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 126222.488 ops/s
[info]                  ·gc.alloc.rate:            560.252 MB/sec
[info]                  ·gc.alloc.rate.norm:       6984.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.966 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8389.073 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce":
[info]   126969.747 ±(99.9%) 4646.902 ops/s [Average]
[info]   (min, avg, max) = (125471.280, 126969.747, 128256.672), stdev = 1206.786
[info]   CI (99.9%): [122322.846, 131616.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate":
[info]   563.364 ±(99.9%) 20.510 MB/sec [Average]
[info]   (min, avg, max) = (556.667, 563.364, 569.068), stdev = 5.327
[info]   CI (99.9%): [542.853, 583.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   6984.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6984.003, 6984.003, 6984.003), stdev = 0.001
[info]   CI (99.9%): [6984.003, 6984.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   605.328 ±(99.9%) 579.035 MB/sec [Average]
[info]   (min, avg, max) = (336.332, 605.328, 672.966), stdev = 150.373
[info]   CI (99.9%): [26.293, 1184.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   7512.256 ±(99.9%) 7280.322 B/op [Average]
[info]   (min, avg, max) = (4132.440, 7512.256, 8439.277), stdev = 1890.677
[info]   CI (99.9%): [231.934, 14792.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   1.635 ±(99.9%) 14.077 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.635, 8.175), stdev = 3.656
[info]   CI (99.9%): [≈ 0, 15.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 8.000), stdev = 1.949
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala
[info] # Run progress: 60.00% complete, ETA 00:28:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 111251.489 ops/s
[info] # Warmup Iteration   2: 158798.918 ops/s
[info] # Warmup Iteration   3: 157809.943 ops/s
[info] Iteration   1: 162014.500 ops/s
[info]                  ·gc.alloc.rate:            240.409 MB/sec
[info]                  ·gc.alloc.rate.norm:       2336.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.653 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3261.471 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 162399.564 ops/s
[info]                  ·gc.alloc.rate:            240.987 MB/sec
[info]                  ·gc.alloc.rate.norm:       2336.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.662 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3253.741 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 162434.207 ops/s
[info]                  ·gc.alloc.rate:            241.044 MB/sec
[info]                  ·gc.alloc.rate.norm:       2336.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.672 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3253.060 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 163946.628 ops/s
[info]                  ·gc.alloc.rate:      243.304 MB/sec
[info]                  ·gc.alloc.rate.norm: 2336.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 161437.397 ops/s
[info]                  ·gc.alloc.rate:            239.590 MB/sec
[info]                  ·gc.alloc.rate.norm:       2336.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.696 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3273.046 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala":
[info]   162446.459 ±(99.9%) 3580.090 ops/s [Average]
[info]   (min, avg, max) = (161437.397, 162446.459, 163946.628), stdev = 929.738
[info]   CI (99.9%): [158866.369, 166026.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   241.067 ±(99.9%) 5.317 MB/sec [Average]
[info]   (min, avg, max) = (239.590, 241.067, 243.304), stdev = 1.381
[info]   CI (99.9%): [235.750, 246.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   2336.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2336.002, 2336.003, 2336.003), stdev = 0.001
[info]   CI (99.9%): [2336.002, 2336.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   268.537 ±(99.9%) 578.046 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 268.537, 335.696), stdev = 150.117
[info]   CI (99.9%): [≈ 0, 846.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   2608.263 ±(99.9%) 5614.569 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2608.263, 3273.046), stdev = 1458.086
[info]   CI (99.9%): [≈ 0, 8222.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.400, 5.000), stdev = 1.949
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala
[info] # Run progress: 60.30% complete, ETA 00:28:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 652352.600 ops/s
[info] # Warmup Iteration   2: 724648.974 ops/s
[info] # Warmup Iteration   3: 738123.657 ops/s
[info] Iteration   1: 729256.986 ops/s
[info]                  ·gc.alloc.rate:            904.286 MB/sec
[info]                  ·gc.alloc.rate.norm:       1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.956 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2177.941 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 722688.482 ops/s
[info]                  ·gc.alloc.rate:            896.104 MB/sec
[info]                  ·gc.alloc.rate.norm:       1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.946 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2197.807 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 741089.586 ops/s
[info]                  ·gc.alloc.rate:            919.019 MB/sec
[info]                  ·gc.alloc.rate.norm:       1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.705 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1428.828 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 720118.141 ops/s
[info]                  ·gc.alloc.rate:                                  893.005 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1952.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.072 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.158 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.043 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2223.132 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                8.735 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 712166.888 ops/s
[info]                  ·gc.alloc.rate:                                  883.214 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1952.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.025 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.055 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.124 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2256.797 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala":
[info]   725064.016 ±(99.9%) 41777.297 ops/s [Average]
[info]   (min, avg, max) = (712166.888, 725064.016, 741089.586), stdev = 10849.431
[info]   CI (99.9%): [683286.720, 766841.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   899.126 ±(99.9%) 51.739 MB/sec [Average]
[info]   (min, avg, max) = (883.214, 899.126, 919.019), stdev = 13.436
[info]   CI (99.9%): [847.387, 950.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1952.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1952.001, 1952.001, 1952.001), stdev = 0.001
[info]   CI (99.9%): [1952.000, 1952.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.019 ±(99.9%) 0.121 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.072), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.043 ±(99.9%) 0.265 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.043, 0.158), stdev = 0.069
[info]   CI (99.9%): [≈ 0, 0.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   945.755 ±(99.9%) 588.111 MB/sec [Average]
[info]   (min, avg, max) = (672.705, 945.755, 1021.124), stdev = 152.730
[info]   CI (99.9%): [357.644, 1533.865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   2056.901 ±(99.9%) 1356.733 B/op [Average]
[info]   (min, avg, max) = (1428.828, 2056.901, 2256.797), stdev = 352.339
[info]   CI (99.9%): [700.168, 3413.635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.747 ±(99.9%) 15.043 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.747, 8.735), stdev = 3.907
[info]   CI (99.9%): [≈ 0, 16.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.600, 10.000), stdev = 2.881
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 60.61% complete, ETA 00:27:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 692306.524 ops/s
[info] # Warmup Iteration   2: 738148.223 ops/s
[info] # Warmup Iteration   3: 744290.574 ops/s
[info] Iteration   1: 743502.148 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 738804.794 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 700462.361 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 737655.181 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 737537.277 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc":
[info]   731592.352 ±(99.9%) 67661.822 ops/s [Average]
[info]   (min, avg, max) = (700462.361, 731592.352, 743502.148), stdev = 17571.560
[info]   CI (99.9%): [663930.531, 799254.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson
[info] # Run progress: 60.91% complete, ETA 00:27:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 140503.124 ops/s
[info] # Warmup Iteration   2: 190605.098 ops/s
[info] # Warmup Iteration   3: 192181.693 ops/s
[info] Iteration   1: 192085.475 ops/s
[info]                  ·gc.alloc.rate:            625.691 MB/sec
[info]                  ·gc.alloc.rate.norm:       5128.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.274 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5501.586 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 193699.384 ops/s
[info]                  ·gc.alloc.rate:            630.993 MB/sec
[info]                  ·gc.alloc.rate.norm:       5128.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.656 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2727.834 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 191773.456 ops/s
[info]                  ·gc.alloc.rate:            624.849 MB/sec
[info]                  ·gc.alloc.rate.norm:       5128.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.482 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5510.707 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 190851.987 ops/s
[info]                  ·gc.alloc.rate:            621.728 MB/sec
[info]                  ·gc.alloc.rate.norm:       5128.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.358 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5537.354 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 190913.678 ops/s
[info]                  ·gc.alloc.rate:            622.080 MB/sec
[info]                  ·gc.alloc.rate.norm:       5128.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.482 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5535.237 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson":
[info]   191864.796 ±(99.9%) 4454.598 ops/s [Average]
[info]   (min, avg, max) = (190851.987, 191864.796, 193699.384), stdev = 1156.845
[info]   CI (99.9%): [187410.198, 196319.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   625.068 ±(99.9%) 14.360 MB/sec [Average]
[info]   (min, avg, max) = (621.728, 625.068, 630.993), stdev = 3.729
[info]   CI (99.9%): [610.708, 639.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5128.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5128.002, 5128.002, 5128.002), stdev = 0.001
[info]   CI (99.9%): [5128.002, 5128.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   604.250 ±(99.9%) 578.170 MB/sec [Average]
[info]   (min, avg, max) = (335.656, 604.250, 671.482), stdev = 150.149
[info]   CI (99.9%): [26.080, 1182.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   4962.543 ±(99.9%) 4810.749 B/op [Average]
[info]   (min, avg, max) = (2727.834, 4962.543, 5537.354), stdev = 1249.336
[info]   CI (99.9%): [151.795, 9773.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.400, 9.000), stdev = 1.949
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce
[info] # Run progress: 61.21% complete, ETA 00:27:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 91416.939 ops/s
[info] # Warmup Iteration   2: 123272.105 ops/s
[info] # Warmup Iteration   3: 123052.734 ops/s
[info] Iteration   1: 121863.739 ops/s
[info]                  ·gc.alloc.rate:                   1497.410 MB/sec
[info]                  ·gc.alloc.rate.norm:              19344.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1347.890 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        17412.461 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 43.015 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 122095.643 ops/s
[info]                  ·gc.alloc.rate:                                  1500.357 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19344.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.037 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.473 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.635 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       21939.072 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 123678.094 ops/s
[info]                  ·gc.alloc.rate:                                  1520.416 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19344.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.011 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.145 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.855 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       17326.651 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 123765.235 ops/s
[info]                  ·gc.alloc.rate:                                  1521.050 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19344.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.102 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.886 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       21643.791 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 124337.460 ops/s
[info]                  ·gc.alloc.rate:                                  1528.298 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19344.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.639 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       17234.556 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce":
[info]   123148.034 ±(99.9%) 4232.896 ops/s [Average]
[info]   (min, avg, max) = (121863.739, 123148.034, 124337.460), stdev = 1099.270
[info]   CI (99.9%): [118915.138, 127380.930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate":
[info]   1513.506 ±(99.9%) 52.919 MB/sec [Average]
[info]   (min, avg, max) = (1497.410, 1513.506, 1528.298), stdev = 13.743
[info]   CI (99.9%): [1460.587, 1566.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   19344.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (19344.003, 19344.003, 19344.004), stdev = 0.001
[info]   CI (99.9%): [19344.003, 19344.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.011 ±(99.9%) 0.058 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.037), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.145 ±(99.9%) 0.748 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.145, 0.473), stdev = 0.194
[info]   CI (99.9%): [≈ 0, 0.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1494.981 ±(99.9%) 727.186 MB/sec [Average]
[info]   (min, avg, max) = (1347.890, 1494.981, 1701.886), stdev = 188.848
[info]   CI (99.9%): [767.795, 2222.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   19111.306 ±(99.9%) 9432.702 B/op [Average]
[info]   (min, avg, max) = (17234.556, 19111.306, 21939.072), stdev = 2449.643
[info]   CI (99.9%): [9678.604, 28544.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   8.603 ±(99.9%) 74.074 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.603, 43.015), stdev = 19.237
[info]   CI (99.9%): [≈ 0, 82.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.600, 18.000), stdev = 6.427
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala
[info] # Run progress: 61.52% complete, ETA 00:27:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 98577.646 ops/s
[info] # Warmup Iteration   2: 157332.138 ops/s
[info] # Warmup Iteration   3: 162023.259 ops/s
[info] Iteration   1: 161294.035 ops/s
[info]                  ·gc.alloc.rate:            860.654 MB/sec
[info]                  ·gc.alloc.rate.norm:       8400.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.003 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9847.890 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 161742.990 ops/s
[info]                  ·gc.alloc.rate:            863.110 MB/sec
[info]                  ·gc.alloc.rate.norm:       8400.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.699 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6546.875 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 155717.983 ops/s
[info]                  ·gc.alloc.rate:            830.932 MB/sec
[info]                  ·gc.alloc.rate.norm:       8400.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.997 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10200.090 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   4: 161574.632 ops/s
[info]                  ·gc.alloc.rate:                                  862.187 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8400.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.040 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.391 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            676.658 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6592.451 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                38.932 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 161945.601 ops/s
[info]                  ·gc.alloc.rate:                                  864.230 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8400.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.052 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.504 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.061 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9924.351 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala":
[info]   160455.048 ±(99.9%) 10238.242 ops/s [Average]
[info]   (min, avg, max) = (155717.983, 160455.048, 161945.601), stdev = 2658.839
[info]   CI (99.9%): [150216.806, 170693.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   856.223 ±(99.9%) 54.674 MB/sec [Average]
[info]   (min, avg, max) = (830.932, 856.223, 864.230), stdev = 14.199
[info]   CI (99.9%): [801.549, 910.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   8400.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8400.003, 8400.003, 8400.003), stdev = 0.001
[info]   CI (99.9%): [8400.002, 8400.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.018 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.052), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.179 ±(99.9%) 0.957 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.179, 0.504), stdev = 0.248
[info]   CI (99.9%): [≈ 0, 1.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   877.684 ±(99.9%) 713.864 MB/sec [Average]
[info]   (min, avg, max) = (672.699, 877.684, 1021.061), stdev = 185.388
[info]   CI (99.9%): [163.819, 1591.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   8622.331 ±(99.9%) 7233.296 B/op [Average]
[info]   (min, avg, max) = (6546.875, 8622.331, 10200.090), stdev = 1878.464
[info]   CI (99.9%): [1389.036, 15855.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   7.786 ±(99.9%) 67.043 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.786, 38.932), stdev = 17.411
[info]   CI (99.9%): [≈ 0, 74.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.000, 12.000), stdev = 4.062
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala
[info] # Run progress: 61.82% complete, ETA 00:26:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 290874.315 ops/s
[info] # Warmup Iteration   2: 311601.933 ops/s
[info] # Warmup Iteration   3: 316440.466 ops/s
[info] Iteration   1: 316510.447 ops/s
[info]                  ·gc.alloc.rate:            614.466 MB/sec
[info]                  ·gc.alloc.rate.norm:       3056.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.984 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3352.009 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 301132.065 ops/s
[info]                  ·gc.alloc.rate:            584.829 MB/sec
[info]                  ·gc.alloc.rate.norm:       3056.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.130 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1761.663 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 315984.380 ops/s
[info]                  ·gc.alloc.rate:            613.476 MB/sec
[info]                  ·gc.alloc.rate.norm:       3056.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.044 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3357.715 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 314550.084 ops/s
[info]                  ·gc.alloc.rate:            610.864 MB/sec
[info]                  ·gc.alloc.rate.norm:       3056.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.238 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3373.042 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 314364.326 ops/s
[info]                  ·gc.alloc.rate:            610.271 MB/sec
[info]                  ·gc.alloc.rate.norm:       3056.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.977 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3375.016 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala":
[info]   312508.260 ±(99.9%) 24741.154 ops/s [Average]
[info]   (min, avg, max) = (301132.065, 312508.260, 316510.447), stdev = 6425.199
[info]   CI (99.9%): [287767.106, 337249.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   606.781 ±(99.9%) 47.732 MB/sec [Average]
[info]   (min, avg, max) = (584.829, 606.781, 614.466), stdev = 12.396
[info]   CI (99.9%): [559.049, 654.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3056.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3056.001, 3056.001, 3056.001), stdev = 0.001
[info]   CI (99.9%): [3056.001, 3056.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   606.674 ±(99.9%) 580.214 MB/sec [Average]
[info]   (min, avg, max) = (337.130, 606.674, 674.238), stdev = 150.680
[info]   CI (99.9%): [26.461, 1186.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   3043.889 ±(99.9%) 2760.347 B/op [Average]
[info]   (min, avg, max) = (1761.663, 3043.889, 3375.016), stdev = 716.853
[info]   CI (99.9%): [283.542, 5804.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 6.000), stdev = 1.304
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson
[info] # Run progress: 62.12% complete, ETA 00:26:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22770.684 ops/s
[info] # Warmup Iteration   2: 59432.966 ops/s
[info] # Warmup Iteration   3: 60982.392 ops/s
[info] Iteration   1: 62627.265 ops/s
[info]                  ·gc.alloc.rate:                                  2642.772 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66432.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.011 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.287 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.118 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       59879.887 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 62239.937 ops/s
[info]                  ·gc.alloc.rate:                                  2627.825 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66432.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.066 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.896 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       68860.702 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 62792.307 ops/s
[info]                  ·gc.alloc.rate:                                  2650.738 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66432.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.011 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.271 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.583 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       68257.622 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 62667.025 ops/s
[info]                  ·gc.alloc.rate:                                  2644.508 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66432.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.231 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.514 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       68391.574 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 62370.950 ops/s
[info]                  ·gc.alloc.rate:                                  2632.222 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66432.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.012 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.293 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.307 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       60124.655 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson":
[info]   62539.497 ±(99.9%) 873.901 ops/s [Average]
[info]   (min, avg, max) = (62239.937, 62539.497, 62792.307), stdev = 226.949
[info]   CI (99.9%): [61665.596, 63413.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2639.613 ±(99.9%) 36.086 MB/sec [Average]
[info]   (min, avg, max) = (2627.825, 2639.613, 2650.738), stdev = 9.371
[info]   CI (99.9%): [2603.527, 2675.699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   66432.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (66432.007, 66432.007, 66432.007), stdev = 0.001
[info]   CI (99.9%): [66432.006, 66432.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.009 ±(99.9%) 0.014 MB/sec [Average]
[info]   (min, avg, max) = (0.003, 0.009, 0.012), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.230 ±(99.9%) 0.364 B/op [Average]
[info]   (min, avg, max) = (0.066, 0.230, 0.293), stdev = 0.095
[info]   CI (99.9%): [≈ 0, 0.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2586.884 ±(99.9%) 719.449 MB/sec [Average]
[info]   (min, avg, max) = (2382.118, 2586.884, 2723.896), stdev = 186.839
[info]   CI (99.9%): [1867.434, 3306.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   65102.888 ±(99.9%) 17953.203 B/op [Average]
[info]   (min, avg, max) = (59879.887, 65102.888, 68860.702), stdev = 4662.390
[info]   CI (99.9%): [47149.685, 83056.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.count":
[info]   38.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.600, 8.000), stdev = 0.548
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce
[info] # Run progress: 62.42% complete, ETA 00:26:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 145724.692 ops/s
[info] # Warmup Iteration   2: 183689.289 ops/s
[info] # Warmup Iteration   3: 184281.368 ops/s
[info] Iteration   1: 184562.705 ops/s
[info]                  ·gc.alloc.rate:            632.158 MB/sec
[info]                  ·gc.alloc.rate.norm:       5392.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.974 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5748.672 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 185035.855 ops/s
[info]                  ·gc.alloc.rate:            633.914 MB/sec
[info]                  ·gc.alloc.rate.norm:       5392.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.119 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5733.979 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 185503.243 ops/s
[info]                  ·gc.alloc.rate:            635.437 MB/sec
[info]                  ·gc.alloc.rate.norm:       5392.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.015 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2859.742 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 184721.342 ops/s
[info]                  ·gc.alloc.rate:            632.772 MB/sec
[info]                  ·gc.alloc.rate.norm:       5392.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.051 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5743.756 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 184392.988 ops/s
[info]                  ·gc.alloc.rate:            631.628 MB/sec
[info]                  ·gc.alloc.rate.norm:       5392.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.022 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5753.909 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce":
[info]   184843.226 ±(99.9%) 1688.355 ops/s [Average]
[info]   (min, avg, max) = (184392.988, 184843.226, 185503.243), stdev = 438.460
[info]   CI (99.9%): [183154.872, 186531.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate":
[info]   633.182 ±(99.9%) 5.857 MB/sec [Average]
[info]   (min, avg, max) = (631.628, 633.182, 635.437), stdev = 1.521
[info]   CI (99.9%): [627.325, 639.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5392.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5392.002, 5392.002, 5392.002), stdev = 0.001
[info]   CI (99.9%): [5392.002, 5392.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   606.636 ±(99.9%) 580.380 MB/sec [Average]
[info]   (min, avg, max) = (337.015, 606.636, 674.119), stdev = 150.723
[info]   CI (99.9%): [26.256, 1187.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   5168.012 ±(99.9%) 4968.804 B/op [Average]
[info]   (min, avg, max) = (2859.742, 5168.012, 5753.909), stdev = 1290.383
[info]   CI (99.9%): [199.207, 10136.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 7.000), stdev = 1.643
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala
[info] # Run progress: 62.73% complete, ETA 00:26:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 183631.516 ops/s
[info] # Warmup Iteration   2: 285614.446 ops/s
[info] # Warmup Iteration   3: 289010.808 ops/s
[info] Iteration   1: 277348.698 ops/s
[info]                  ·gc.alloc.rate:            273.424 MB/sec
[info]                  ·gc.alloc.rate.norm:       1552.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.300 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1908.900 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 291550.236 ops/s
[info]                  ·gc.alloc.rate:      287.523 MB/sec
[info]                  ·gc.alloc.rate.norm: 1552.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 289702.593 ops/s
[info]                  ·gc.alloc.rate:            285.719 MB/sec
[info]                  ·gc.alloc.rate.norm:       1552.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.444 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1827.538 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 288602.005 ops/s
[info]                  ·gc.alloc.rate:            284.551 MB/sec
[info]                  ·gc.alloc.rate.norm:       1552.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.346 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1834.502 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 288179.302 ops/s
[info]                  ·gc.alloc.rate:            284.140 MB/sec
[info]                  ·gc.alloc.rate.norm:       1552.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.339 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1837.118 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala":
[info]   287076.567 ±(99.9%) 21532.998 ops/s [Average]
[info]   (min, avg, max) = (277348.698, 287076.567, 291550.236), stdev = 5592.051
[info]   CI (99.9%): [265543.569, 308609.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   283.071 ±(99.9%) 21.373 MB/sec [Average]
[info]   (min, avg, max) = (273.424, 283.071, 287.523), stdev = 5.550
[info]   CI (99.9%): [261.698, 304.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1552.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1552.001, 1552.001, 1552.002), stdev = 0.001
[info]   CI (99.9%): [1552.001, 1552.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   269.086 ±(99.9%) 579.228 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.086, 336.444), stdev = 150.424
[info]   CI (99.9%): [≈ 0, 848.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1481.612 ±(99.9%) 3191.816 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1481.612, 1908.900), stdev = 828.904
[info]   CI (99.9%): [≈ 0, 4673.427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.200, 4.000), stdev = 1.789
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala
[info] # Run progress: 63.03% complete, ETA 00:26:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1449445.512 ops/s
[info] # Warmup Iteration   2: 1615292.381 ops/s
[info] # Warmup Iteration   3: 1572801.188 ops/s
[info] Iteration   1: 1576527.835 ops/s
[info]                  ·gc.alloc.rate:                   1169.771 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.681 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1008.152 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.665 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 1571986.949 ops/s
[info]                  ·gc.alloc.rate:                                  1166.324 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1168.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.075 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.075 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1349.936 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1351.876 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                4.669 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   3: 1607151.164 ops/s
[info]                  ·gc.alloc.rate:                                  1192.840 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1168.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.065 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.064 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.306 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1000.038 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 1633813.027 ops/s
[info]                  ·gc.alloc.rate:            1212.781 MB/sec
[info]                  ·gc.alloc.rate.norm:       1168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.943 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1311.654 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 1640086.896 ops/s
[info]                  ·gc.alloc.rate:            1217.137 MB/sec
[info]                  ·gc.alloc.rate.norm:       1168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.175 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 979.949 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala":
[info]   1605913.174 ±(99.9%) 121192.320 ops/s [Average]
[info]   (min, avg, max) = (1571986.949, 1605913.174, 1640086.896), stdev = 31473.261
[info]   CI (99.9%): [1484720.854, 1727105.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1191.771 ±(99.9%) 90.664 MB/sec [Average]
[info]   (min, avg, max) = (1166.324, 1191.771, 1217.137), stdev = 23.545
[info]   CI (99.9%): [1101.106, 1282.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1168.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1168.000, 1168.000, 1168.000), stdev = 0.001
[info]   CI (99.9%): [1168.000, 1168.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.028 ±(99.9%) 0.149 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.075), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.028 ±(99.9%) 0.148 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.075), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1152.808 ±(99.9%) 714.453 MB/sec [Average]
[info]   (min, avg, max) = (1009.681, 1152.808, 1361.943), stdev = 185.541
[info]   CI (99.9%): [438.355, 1867.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1130.334 ±(99.9%) 711.272 B/op [Average]
[info]   (min, avg, max) = (979.949, 1130.334, 1351.876), stdev = 184.715
[info]   CI (99.9%): [419.062, 1841.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.820 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.662), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.067 ±(99.9%) 7.832 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.067, 4.669), stdev = 2.034
[info]   CI (99.9%): [≈ 0, 8.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 10.000), stdev = 3.578
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 63.33% complete, ETA 00:25:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1457951.110 ops/s
[info] # Warmup Iteration   2: 1600787.165 ops/s
[info] # Warmup Iteration   3: 1590733.168 ops/s
[info] Iteration   1: 1603583.918 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1594984.748 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1599407.510 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1598789.366 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1600290.279 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc":
[info]   1599411.164 ±(99.9%) 11894.147 ops/s [Average]
[info]   (min, avg, max) = (1594984.748, 1599411.164, 1603583.918), stdev = 3088.872
[info]   CI (99.9%): [1587517.017, 1611305.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson
[info] # Run progress: 63.64% complete, ETA 00:25:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 163095.520 ops/s
[info] # Warmup Iteration   2: 301124.344 ops/s
[info] # Warmup Iteration   3: 301499.763 ops/s
[info] Iteration   1: 303090.067 ops/s
[info]                  ·gc.alloc.rate:                   824.034 MB/sec
[info]                  ·gc.alloc.rate.norm:              4280.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             671.984 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3490.261 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.459 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 300716.068 ops/s
[info]                  ·gc.alloc.rate:                   817.740 MB/sec
[info]                  ·gc.alloc.rate.norm:              4280.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.506 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5278.459 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.486 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   3: 298128.188 ops/s
[info]                  ·gc.alloc.rate:            810.966 MB/sec
[info]                  ·gc.alloc.rate.norm:       4280.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.988 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3551.801 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 292030.110 ops/s
[info]                  ·gc.alloc.rate:                   793.997 MB/sec
[info]                  ·gc.alloc.rate.norm:              4280.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.693 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3626.117 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 21.541 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 301619.452 ops/s
[info]                  ·gc.alloc.rate:                                  820.302 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4280.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.062 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.323 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.225 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5328.331 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson":
[info]   299116.777 ±(99.9%) 16763.166 ops/s [Average]
[info]   (min, avg, max) = (292030.110, 299116.777, 303090.067), stdev = 4353.341
[info]   CI (99.9%): [282353.611, 315879.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   813.408 ±(99.9%) 45.641 MB/sec [Average]
[info]   (min, avg, max) = (793.997, 813.408, 824.034), stdev = 11.853
[info]   CI (99.9%): [767.767, 859.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4280.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4280.001, 4280.001, 4280.001), stdev = 0.001
[info]   CI (99.9%): [4280.001, 4280.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.012 ±(99.9%) 0.106 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.065 ±(99.9%) 0.556 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.065, 0.323), stdev = 0.144
[info]   CI (99.9%): [≈ 0, 0.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   809.479 ±(99.9%) 722.170 MB/sec [Average]
[info]   (min, avg, max) = (671.984, 809.479, 1021.225), stdev = 187.545
[info]   CI (99.9%): [87.309, 1531.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   4254.994 ±(99.9%) 3690.556 B/op [Average]
[info]   (min, avg, max) = (3490.261, 4254.994, 5328.331), stdev = 958.426
[info]   CI (99.9%): [564.438, 7945.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 6.437 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 3.996), stdev = 1.672
[info]   CI (99.9%): [≈ 0, 7.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   5.697 ±(99.9%) 34.754 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.697, 21.541), stdev = 9.026
[info]   CI (99.9%): [≈ 0, 40.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.600, 13.000), stdev = 3.578
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce
[info] # Run progress: 63.94% complete, ETA 00:25:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2172.577 ops/s
[info] # Warmup Iteration   2: 4368.379 ops/s
[info] # Warmup Iteration   3: 4217.566 ops/s
[info] Iteration   1: 4415.254 ops/s
[info]                  ·gc.alloc.rate:            871.181 MB/sec
[info]                  ·gc.alloc.rate.norm:       310616.100 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.478 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 239769.472 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 4412.040 ops/s
[info]                  ·gc.alloc.rate:            870.933 MB/sec
[info]                  ·gc.alloc.rate.norm:       310616.107 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.345 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 359980.204 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 4397.838 ops/s
[info]                  ·gc.alloc.rate:                   867.849 MB/sec
[info]                  ·gc.alloc.rate.norm:              310616.093 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1006.973 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        360410.755 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 238.367 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 4339.067 ops/s
[info]                  ·gc.alloc.rate:                   856.324 MB/sec
[info]                  ·gc.alloc.rate.norm:              310616.094 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.738 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        244023.447 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1449.644 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 4403.573 ops/s
[info]                  ·gc.alloc.rate:                                  869.172 MB/sec
[info]                  ·gc.alloc.rate.norm:                             310616.100 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.219 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 78.373 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.123 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       364918.731 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce":
[info]   4393.555 ±(99.9%) 120.239 ops/s [Average]
[info]   (min, avg, max) = (4339.067, 4393.555, 4415.254), stdev = 31.226
[info]   CI (99.9%): [4273.315, 4513.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   867.092 ±(99.9%) 23.761 MB/sec [Average]
[info]   (min, avg, max) = (856.324, 867.092, 871.181), stdev = 6.171
[info]   CI (99.9%): [843.331, 890.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   310616.099 ±(99.9%) 0.022 B/op [Average]
[info]   (min, avg, max) = (310616.093, 310616.099, 310616.107), stdev = 0.006
[info]   CI (99.9%): [310616.077, 310616.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.044 ±(99.9%) 0.378 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.044, 0.219), stdev = 0.098
[info]   CI (99.9%): [≈ 0, 0.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   15.675 ±(99.9%) 134.963 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15.675, 78.373), stdev = 35.049
[info]   CI (99.9%): [≈ 0, 150.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   876.531 ±(99.9%) 717.116 MB/sec [Average]
[info]   (min, avg, max) = (672.478, 876.531, 1021.123), stdev = 186.233
[info]   CI (99.9%): [159.415, 1593.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   313820.522 ±(99.9%) 252999.193 B/op [Average]
[info]   (min, avg, max) = (239769.472, 313820.522, 364918.731), stdev = 65703.087
[info]   CI (99.9%): [60821.329, 566819.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   337.602 ±(99.9%) 2426.525 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 337.602, 1449.644), stdev = 630.161
[info]   CI (99.9%): [≈ 0, 2764.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.600, 11.000), stdev = 3.130
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala
[info] # Run progress: 64.24% complete, ETA 00:25:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1800.974 ops/s
[info] # Warmup Iteration   2: 4085.503 ops/s
[info] # Warmup Iteration   3: 4238.596 ops/s
[info] Iteration   1: 4270.265 ops/s
[info]                  ·gc.alloc.rate:            802.701 MB/sec
[info]                  ·gc.alloc.rate.norm:       295816.096 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1006.387 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 370879.760 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 4274.238 ops/s
[info]                  ·gc.alloc.rate:                   803.532 MB/sec
[info]                  ·gc.alloc.rate.norm:              295816.103 B/op
[info]                  ·gc.churn.G1_Old_Gen:             670.926 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        246997.902 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 245.281 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 4271.791 ops/s
[info]                  ·gc.alloc.rate:            802.845 MB/sec
[info]                  ·gc.alloc.rate.norm:       295816.095 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.332 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 247358.907 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 4259.200 ops/s
[info]                  ·gc.alloc.rate:                   800.449 MB/sec
[info]                  ·gc.alloc.rate.norm:              295816.103 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1005.725 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        371678.347 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      5.328 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1969.157 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   5: 4278.210 ops/s
[info]                  ·gc.alloc.rate:                                  804.280 MB/sec
[info]                  ·gc.alloc.rate.norm:                             295816.095 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.078 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 28.755 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.091 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       250139.275 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                244.994 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala":
[info]   4270.741 ±(99.9%) 27.401 ops/s [Average]
[info]   (min, avg, max) = (4259.200, 4270.741, 4278.210), stdev = 7.116
[info]   CI (99.9%): [4243.340, 4298.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   802.761 ±(99.9%) 5.532 MB/sec [Average]
[info]   (min, avg, max) = (800.449, 802.761, 804.280), stdev = 1.437
[info]   CI (99.9%): [797.229, 808.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   295816.099 ±(99.9%) 0.016 B/op [Average]
[info]   (min, avg, max) = (295816.095, 295816.099, 295816.103), stdev = 0.004
[info]   CI (99.9%): [295816.082, 295816.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.016 ±(99.9%) 0.135 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.078), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   5.751 ±(99.9%) 49.518 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.751, 28.755), stdev = 12.860
[info]   CI (99.9%): [≈ 0, 55.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   806.892 ±(99.9%) 700.231 MB/sec [Average]
[info]   (min, avg, max) = (670.926, 806.892, 1006.387), stdev = 181.848
[info]   CI (99.9%): [106.661, 1507.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   297410.838 ±(99.9%) 259701.641 B/op [Average]
[info]   (min, avg, max) = (246997.902, 297410.838, 371678.347), stdev = 67443.692
[info]   CI (99.9%): [37709.197, 557112.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.332 ±(99.9%) 8.697 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.332, 5.328), stdev = 2.259
[info]   CI (99.9%): [≈ 0, 10.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   491.886 ±(99.9%) 3214.770 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 491.886, 1969.157), stdev = 834.866
[info]   CI (99.9%): [≈ 0, 3706.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 9.400, 14.000), stdev = 4.722
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala
[info] # Run progress: 64.55% complete, ETA 00:25:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18756.854 ops/s
[info] # Warmup Iteration   2: 29526.707 ops/s
[info] # Warmup Iteration   3: 31127.585 ops/s
[info] Iteration   1: 31403.228 ops/s
[info]                  ·gc.alloc.rate:            533.563 MB/sec
[info]                  ·gc.alloc.rate.norm:       26744.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.354 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16859.209 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 31395.548 ops/s
[info]                  ·gc.alloc.rate:            533.391 MB/sec
[info]                  ·gc.alloc.rate.norm:       26744.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.684 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 33728.082 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 31576.791 ops/s
[info]                  ·gc.alloc.rate:            536.482 MB/sec
[info]                  ·gc.alloc.rate.norm:       26744.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.352 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16767.388 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 31186.944 ops/s
[info]                  ·gc.alloc.rate:            529.919 MB/sec
[info]                  ·gc.alloc.rate.norm:       26744.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.761 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 33952.993 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 30625.235 ops/s
[info]                  ·gc.alloc.rate:            520.323 MB/sec
[info]                  ·gc.alloc.rate.norm:       26744.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.338 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 17287.417 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala":
[info]   31237.549 ±(99.9%) 1421.336 ops/s [Average]
[info]   (min, avg, max) = (30625.235, 31237.549, 31576.791), stdev = 369.117
[info]   CI (99.9%): [29816.213, 32658.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   530.736 ±(99.9%) 24.137 MB/sec [Average]
[info]   (min, avg, max) = (520.323, 530.736, 536.482), stdev = 6.268
[info]   CI (99.9%): [506.599, 554.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   26744.014 ±(99.9%) 0.005 B/op [Average]
[info]   (min, avg, max) = (26744.013, 26744.014, 26744.016), stdev = 0.001
[info]   CI (99.9%): [26744.009, 26744.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   470.898 ±(99.9%) 709.443 MB/sec [Average]
[info]   (min, avg, max) = (336.338, 470.898, 672.761), stdev = 184.240
[info]   CI (99.9%): [≈ 0, 1180.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   23719.018 ±(99.9%) 35587.910 B/op [Average]
[info]   (min, avg, max) = (16767.388, 23719.018, 33952.993), stdev = 9242.067
[info]   CI (99.9%): [≈ 0, 59306.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 7.000), stdev = 1.949
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson
[info] # Run progress: 64.85% complete, ETA 00:24:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1378.248 ops/s
[info] # Warmup Iteration   2: 3573.201 ops/s
[info] # Warmup Iteration   3: 3585.347 ops/s
[info] Iteration   1: 3641.794 ops/s
[info]                  ·gc.alloc.rate:            924.972 MB/sec
[info]                  ·gc.alloc.rate.norm:       399728.389 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.062 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 435203.654 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 3734.369 ops/s
[info]                  ·gc.alloc.rate:            948.392 MB/sec
[info]                  ·gc.alloc.rate.norm:       399728.109 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1005.526 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 423808.822 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   3: 3730.473 ops/s
[info]                  ·gc.alloc.rate:                   947.348 MB/sec
[info]                  ·gc.alloc.rate.norm:              399728.109 B/op
[info]                  ·gc.churn.G1_Old_Gen:             670.552 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        282935.700 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 280.969 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 3722.364 ops/s
[info]                  ·gc.alloc.rate:                                  945.352 MB/sec
[info]                  ·gc.alloc.rate.norm:                             399728.110 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.078 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 33.134 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1016.187 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       429679.639 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.661 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1971.008 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 3745.623 ops/s
[info]                  ·gc.alloc.rate:            951.359 MB/sec
[info]                  ·gc.alloc.rate.norm:       399728.117 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.029 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 429001.070 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson":
[info]   3714.925 ±(99.9%) 160.688 ops/s [Average]
[info]   (min, avg, max) = (3641.794, 3714.925, 3745.623), stdev = 41.730
[info]   CI (99.9%): [3554.237, 3875.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   943.485 ±(99.9%) 40.716 MB/sec [Average]
[info]   (min, avg, max) = (924.972, 943.485, 951.359), stdev = 10.574
[info]   CI (99.9%): [902.768, 984.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   399728.167 ±(99.9%) 0.478 B/op [Average]
[info]   (min, avg, max) = (399728.109, 399728.167, 399728.389), stdev = 0.124
[info]   CI (99.9%): [399727.689, 399728.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.016 ±(99.9%) 0.135 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.078), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   6.627 ±(99.9%) 57.059 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.627, 33.134), stdev = 14.818
[info]   CI (99.9%): [≈ 0, 63.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   944.071 ±(99.9%) 589.289 MB/sec [Average]
[info]   (min, avg, max) = (670.552, 944.071, 1021.029), stdev = 153.036
[info]   CI (99.9%): [354.783, 1533.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   400125.777 ±(99.9%) 252738.911 B/op [Average]
[info]   (min, avg, max) = (282935.700, 400125.777, 435203.654), stdev = 65635.493
[info]   CI (99.9%): [147386.866, 652864.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.065 ±(99.9%) 7.820 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.065, 4.661), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   450.395 ±(99.9%) 3306.588 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 450.395, 1971.008), stdev = 858.710
[info]   CI (99.9%): [≈ 0, 3756.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.200, 14.000), stdev = 4.494
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce
[info] # Run progress: 65.15% complete, ETA 00:24:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8821.736 ops/s
[info] # Warmup Iteration   2: 14134.933 ops/s
[info] # Warmup Iteration   3: 14086.436 ops/s
[info] Iteration   1: 14211.292 ops/s
[info]                  ·gc.alloc.rate:                   790.671 MB/sec
[info]                  ·gc.alloc.rate.norm:              87584.029 B/op
[info]                  ·gc.churn.G1_Old_Gen:             671.963 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        74434.584 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 73.771 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 14193.763 ops/s
[info]                  ·gc.alloc.rate:            790.072 MB/sec
[info]                  ·gc.alloc.rate.norm:       87602.154 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.833 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 74602.829 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 14137.435 ops/s
[info]                  ·gc.alloc.rate:                   787.479 MB/sec
[info]                  ·gc.alloc.rate.norm:              87648.029 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.726 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        112273.272 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 74.157 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   4: 14130.167 ops/s
[info]                  ·gc.alloc.rate:                   786.789 MB/sec
[info]                  ·gc.alloc.rate.norm:              87648.029 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.006 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        74861.189 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 74.193 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 14135.369 ops/s
[info]                  ·gc.alloc.rate:                                  787.221 MB/sec
[info]                  ·gc.alloc.rate.norm:                             87648.036 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.035 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.929 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            676.134 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       75279.717 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                519.170 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce":
[info]   14161.605 ±(99.9%) 146.170 ops/s [Average]
[info]   (min, avg, max) = (14130.167, 14161.605, 14211.292), stdev = 37.960
[info]   CI (99.9%): [14015.435, 14307.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   788.446 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (786.789, 788.446, 790.671), stdev = 1.787
[info]   CI (99.9%): [781.566, 795.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   87626.055 ±(99.9%) 118.471 B/op [Average]
[info]   (min, avg, max) = (87584.029, 87626.055, 87648.036), stdev = 30.767
[info]   CI (99.9%): [87507.584, 87744.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.007 ±(99.9%) 0.061 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.035), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.786 ±(99.9%) 6.766 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.786, 3.929), stdev = 1.757
[info]   CI (99.9%): [≈ 0, 7.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   740.332 ±(99.9%) 577.775 MB/sec [Average]
[info]   (min, avg, max) = (671.963, 740.332, 1008.726), stdev = 150.046
[info]   CI (99.9%): [162.558, 1318.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   82290.318 ±(99.9%) 64552.231 B/op [Average]
[info]   (min, avg, max) = (74434.584, 82290.318, 112273.272), stdev = 16764.009
[info]   CI (99.9%): [17738.087, 146842.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   1.332 ±(99.9%) 7.255 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.332, 4.663), stdev = 1.884
[info]   CI (99.9%): [≈ 0, 8.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   148.258 ±(99.9%) 807.905 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 148.258, 519.170), stdev = 209.810
[info]   CI (99.9%): [≈ 0, 956.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.600, 11.000), stdev = 2.191
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala
[info] # Run progress: 65.45% complete, ETA 00:24:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9779.763 ops/s
[info] # Warmup Iteration   2: 16049.359 ops/s
[info] # Warmup Iteration   3: 16479.813 ops/s
[info] Iteration   1: 16449.628 ops/s
[info]                  ·gc.alloc.rate:            852.009 MB/sec
[info]                  ·gc.alloc.rate.norm:       81536.129 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1006.934 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 96362.178 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 16456.415 ops/s
[info]                  ·gc.alloc.rate:                   852.689 MB/sec
[info]                  ·gc.alloc.rate.norm:              81536.041 B/op
[info]                  ·gc.churn.G1_Old_Gen:             670.914 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        64154.325 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 63.708 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 16370.982 ops/s
[info]                  ·gc.alloc.rate:            847.976 MB/sec
[info]                  ·gc.alloc.rate.norm:       81536.027 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.004 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 96827.099 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   4: 16403.504 ops/s
[info]                  ·gc.alloc.rate:                                  849.673 MB/sec
[info]                  ·gc.alloc.rate.norm:                             81536.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.049 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.709 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            676.029 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       64872.890 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                447.399 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 16416.604 ops/s
[info]                  ·gc.alloc.rate:                                  850.370 MB/sec
[info]                  ·gc.alloc.rate.norm:                             81536.043 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.062 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.943 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.003 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       97896.895 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala":
[info]   16419.427 ±(99.9%) 134.616 ops/s [Average]
[info]   (min, avg, max) = (16370.982, 16419.427, 16456.415), stdev = 34.959
[info]   CI (99.9%): [16284.811, 16554.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   850.543 ±(99.9%) 7.238 MB/sec [Average]
[info]   (min, avg, max) = (847.976, 850.543, 852.689), stdev = 1.880
[info]   CI (99.9%): [843.306, 857.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   81536.051 ±(99.9%) 0.174 B/op [Average]
[info]   (min, avg, max) = (81536.015, 81536.051, 81536.129), stdev = 0.045
[info]   CI (99.9%): [81535.877, 81536.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.022 ±(99.9%) 0.118 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.062), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.130 ±(99.9%) 11.357 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.130, 5.943), stdev = 2.949
[info]   CI (99.9%): [≈ 0, 13.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   876.377 ±(99.9%) 713.615 MB/sec [Average]
[info]   (min, avg, max) = (670.914, 876.377, 1021.003), stdev = 185.324
[info]   CI (99.9%): [162.762, 1589.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   84022.677 ±(99.9%) 68617.571 B/op [Average]
[info]   (min, avg, max) = (64154.325, 84022.677, 97896.895), stdev = 17819.765
[info]   CI (99.9%): [15405.106, 152640.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.821 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.662), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   102.222 ±(99.9%) 750.576 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 102.222, 447.399), stdev = 194.922
[info]   CI (99.9%): [≈ 0, 852.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.800, 13.000), stdev = 4.382
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala
[info] # Run progress: 65.76% complete, ETA 00:24:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 221378.162 ops/s
[info] # Warmup Iteration   2: 250904.460 ops/s
[info] # Warmup Iteration   3: 266248.300 ops/s
[info] Iteration   1: 265450.228 ops/s
[info]                  ·gc.alloc.rate:            936.181 MB/sec
[info]                  ·gc.alloc.rate.norm:       5552.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.961 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5983.625 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 266056.275 ops/s
[info]                  ·gc.alloc.rate:            938.328 MB/sec
[info]                  ·gc.alloc.rate.norm:       5552.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.983 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5970.066 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 265731.610 ops/s
[info]                  ·gc.alloc.rate:                   937.223 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.020 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5977.321 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 23.673 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 257476.313 ops/s
[info]                  ·gc.alloc.rate:                                  908.343 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5552.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.107 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.655 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.867 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4161.614 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 261846.443 ops/s
[info]                  ·gc.alloc.rate:                                  923.646 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5552.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.026 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.157 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.152 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6138.111 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala":
[info]   263312.174 ±(99.9%) 14169.202 ops/s [Average]
[info]   (min, avg, max) = (257476.313, 263312.174, 266056.275), stdev = 3679.697
[info]   CI (99.9%): [249142.971, 277481.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   928.744 ±(99.9%) 49.509 MB/sec [Average]
[info]   (min, avg, max) = (908.343, 928.744, 938.328), stdev = 12.857
[info]   CI (99.9%): [879.235, 978.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5552.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5552.002, 5552.002, 5552.002), stdev = 0.001
[info]   CI (99.9%): [5552.001, 5552.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.027 ±(99.9%) 0.179 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.107), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.162 ±(99.9%) 1.093 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.162, 0.655), stdev = 0.284
[info]   CI (99.9%): [≈ 0, 1.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   945.797 ±(99.9%) 570.643 MB/sec [Average]
[info]   (min, avg, max) = (680.867, 945.797, 1021.152), stdev = 148.194
[info]   CI (99.9%): [375.154, 1516.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   5646.147 ±(99.9%) 3206.895 B/op [Average]
[info]   (min, avg, max) = (4161.614, 5646.147, 6138.111), stdev = 832.820
[info]   CI (99.9%): [2439.253, 8853.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   4.735 ±(99.9%) 40.766 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.735, 23.673), stdev = 10.587
[info]   CI (99.9%): [≈ 0, 45.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.800, 10.000), stdev = 3.962
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 66.06% complete, ETA 00:24:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 265640.826 ops/s
[info] # Warmup Iteration   2: 281494.882 ops/s
[info] # Warmup Iteration   3: 281861.275 ops/s
[info] Iteration   1: 283145.640 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 280258.556 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 282750.564 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 282540.405 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 282525.005 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   282244.034 ±(99.9%) 4381.269 ops/s [Average]
[info]   (min, avg, max) = (280258.556, 282244.034, 283145.640), stdev = 1137.802
[info]   CI (99.9%): [277862.765, 286625.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson
[info] # Run progress: 66.36% complete, ETA 00:23:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10555.816 ops/s
[info] # Warmup Iteration   2: 14989.565 ops/s
[info] # Warmup Iteration   3: 15469.966 ops/s
[info] Iteration   1: 15134.231 ops/s
[info]                  ·gc.alloc.rate:            840.211 MB/sec
[info]                  ·gc.alloc.rate.norm:       87400.029 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1006.839 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 104732.918 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 15398.506 ops/s
[info]                  ·gc.alloc.rate:            855.109 MB/sec
[info]                  ·gc.alloc.rate.norm:       87410.671 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.380 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 68629.609 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 15410.324 ops/s
[info]                  ·gc.alloc.rate:            855.836 MB/sec
[info]                  ·gc.alloc.rate.norm:       87416.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.080 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 102864.265 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   4: 15306.601 ops/s
[info]                  ·gc.alloc.rate:                                  850.099 MB/sec
[info]                  ·gc.alloc.rate.norm:                             87416.051 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.114 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 11.717 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1011.721 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       104035.725 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                479.427 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   5: 15417.737 ops/s
[info]                  ·gc.alloc.rate:                                  856.183 MB/sec
[info]                  ·gc.alloc.rate.norm:                             87407.456 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.169 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 17.251 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.701 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       69492.554 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson":
[info]   15333.480 ±(99.9%) 462.300 ops/s [Average]
[info]   (min, avg, max) = (15134.231, 15333.480, 15417.737), stdev = 120.058
[info]   CI (99.9%): [14871.180, 15795.780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   851.488 ±(99.9%) 26.057 MB/sec [Average]
[info]   (min, avg, max) = (840.211, 851.488, 856.183), stdev = 6.767
[info]   CI (99.9%): [825.430, 877.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   87410.043 ±(99.9%) 25.763 B/op [Average]
[info]   (min, avg, max) = (87400.029, 87410.043, 87416.051), stdev = 6.691
[info]   CI (99.9%): [87384.280, 87435.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.057 ±(99.9%) 0.308 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.057, 0.169), stdev = 0.080
[info]   CI (99.9%): [≈ 0, 0.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   5.794 ±(99.9%) 31.464 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.794, 17.251), stdev = 8.171
[info]   CI (99.9%): [≈ 0, 37.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   875.544 ±(99.9%) 701.438 MB/sec [Average]
[info]   (min, avg, max) = (671.380, 875.544, 1011.721), stdev = 182.161
[info]   CI (99.9%): [174.106, 1576.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   89951.014 ±(99.9%) 73485.449 B/op [Average]
[info]   (min, avg, max) = (68629.609, 89951.014, 104732.918), stdev = 19083.938
[info]   CI (99.9%): [16465.565, 163436.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   95.885 ±(99.9%) 825.603 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 95.885, 479.427), stdev = 214.406
[info]   CI (99.9%): [≈ 0, 921.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 9.200, 13.000), stdev = 5.020
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce
[info] # Run progress: 66.67% complete, ETA 00:23:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 536942.840 ops/s
[info] # Warmup Iteration   2: 813023.362 ops/s
[info] # Warmup Iteration   3: 841710.304 ops/s
[info] Iteration   1: 847313.249 ops/s
[info]                  ·gc.alloc.rate:                                  2730.130 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5072.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.709 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5058.214 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   2: 851109.908 ops/s
[info]                  ·gc.alloc.rate:                                  2742.075 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5072.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.411 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5035.628 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 838747.562 ops/s
[info]                  ·gc.alloc.rate:                                  2702.554 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5072.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.791 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5109.981 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 848307.327 ops/s
[info]                  ·gc.alloc.rate:                                  2734.616 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5072.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2724.123 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5052.538 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   5: 847876.285 ops/s
[info]                  ·gc.alloc.rate:                                  2732.083 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5072.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.958 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5055.059 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce":
[info]   846670.866 ±(99.9%) 17961.050 ops/s [Average]
[info]   (min, avg, max) = (838747.562, 846670.866, 851109.908), stdev = 4664.428
[info]   CI (99.9%): [828709.816, 864631.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.alloc.rate":
[info]   2728.292 ±(99.9%) 58.085 MB/sec [Average]
[info]   (min, avg, max) = (2702.554, 2728.292, 2742.075), stdev = 15.085
[info]   CI (99.9%): [2670.207, 2786.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5072.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5072.000, 5072.000, 5072.001), stdev = 0.001
[info]   CI (99.9%): [5072.000, 5072.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.003 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.002, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.004 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (0.002, 0.004, 0.005), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2722.998 ±(99.9%) 2.537 MB/sec [Average]
[info]   (min, avg, max) = (2722.411, 2722.998, 2724.123), stdev = 0.659
[info]   CI (99.9%): [2720.461, 2725.536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   5062.284 ±(99.9%) 108.045 B/op [Average]
[info]   (min, avg, max) = (5035.628, 5062.284, 5109.981), stdev = 28.059
[info]   CI (99.9%): [4954.239, 5170.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.count":
[info]   40.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.000, 8.000), stdev = 0.001
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.400, 11.000), stdev = 2.074
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala
[info] # Run progress: 66.97% complete, ETA 00:23:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 554536.172 ops/s
[info] # Warmup Iteration   2: 1353734.761 ops/s
[info] # Warmup Iteration   3: 1330289.287 ops/s
[info] Iteration   1: 1371416.072 ops/s
[info]                  ·gc.alloc.rate:            1289.359 MB/sec
[info]                  ·gc.alloc.rate.norm:       1480.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.957 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1158.139 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   2: 1335150.184 ops/s
[info]                  ·gc.alloc.rate:                                  1255.343 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1480.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.043 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.051 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1349.366 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1590.850 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                4.711 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        14.000 ms
[info] Iteration   3: 1364037.985 ops/s
[info]                  ·gc.alloc.rate:                                  1282.953 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1480.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.057 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.065 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.885 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1571.056 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 1357722.891 ops/s
[info]                  ·gc.alloc.rate:                                  1276.519 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1480.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.376 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1578.383 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 1369955.507 ops/s
[info]                  ·gc.alloc.rate:            1288.100 MB/sec
[info]                  ·gc.alloc.rate.norm:       1480.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.066 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1173.184 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala":
[info]   1359656.528 ±(99.9%) 56718.719 ops/s [Average]
[info]   (min, avg, max) = (1335150.184, 1359656.528, 1371416.072), stdev = 14729.671
[info]   CI (99.9%): [1302937.809, 1416375.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1278.455 ±(99.9%) 53.428 MB/sec [Average]
[info]   (min, avg, max) = (1255.343, 1278.455, 1289.359), stdev = 13.875
[info]   CI (99.9%): [1225.026, 1331.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1480.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1480.000, 1480.000, 1480.000), stdev = 0.001
[info]   CI (99.9%): [1480.000, 1480.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.021 ±(99.9%) 0.103 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.057), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.025 ±(99.9%) 0.120 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.065), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1220.530 ±(99.9%) 722.872 MB/sec [Average]
[info]   (min, avg, max) = (1008.957, 1220.530, 1361.885), stdev = 187.728
[info]   CI (99.9%): [497.658, 1943.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1414.322 ±(99.9%) 874.743 B/op [Average]
[info]   (min, avg, max) = (1158.139, 1414.322, 1590.850), stdev = 227.168
[info]   CI (99.9%): [539.580, 2289.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.942 ±(99.9%) 8.113 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.942, 4.711), stdev = 2.107
[info]   CI (99.9%): [≈ 0, 9.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.400, 14.000), stdev = 6.066
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala
[info] # Run progress: 67.27% complete, ETA 00:23:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7048247.186 ops/s
[info] # Warmup Iteration   2: 7934268.280 ops/s
[info] # Warmup Iteration   3: 7883182.368 ops/s
[info] Iteration   1: 7606447.187 ops/s
[info]                  ·gc.alloc.rate:                                  1894.340 MB/sec
[info]                  ·gc.alloc.rate.norm:                             392.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.133 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.028 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.142 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       422.585 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 7727692.813 ops/s
[info]                  ·gc.alloc.rate:                                  1924.899 MB/sec
[info]                  ·gc.alloc.rate.norm:                             392.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.582 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       415.966 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 7714924.294 ops/s
[info]                  ·gc.alloc.rate:                                  1921.230 MB/sec
[info]                  ·gc.alloc.rate.norm:                             392.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.695 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       347.207 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 7826391.272 ops/s
[info]                  ·gc.alloc.rate:                                  1949.211 MB/sec
[info]                  ·gc.alloc.rate.norm:                             392.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.271 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       410.715 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 7608153.298 ops/s
[info]                  ·gc.alloc.rate:                                  1894.477 MB/sec
[info]                  ·gc.alloc.rate.norm:                             392.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.866 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       422.497 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala":
[info]   7696721.773 ±(99.9%) 355526.180 ops/s [Average]
[info]   (min, avg, max) = (7606447.187, 7696721.773, 7826391.272), stdev = 92329.020
[info]   CI (99.9%): [7341195.592, 8052247.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1916.831 ±(99.9%) 89.034 MB/sec [Average]
[info]   (min, avg, max) = (1894.340, 1916.831, 1949.211), stdev = 23.122
[info]   CI (99.9%): [1827.798, 2005.865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   392.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (392.000, 392.000, 392.000), stdev = 0.001
[info]   CI (99.9%): [392.000, 392.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.028 ±(99.9%) 0.227 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.028, 0.133), stdev = 0.059
[info]   CI (99.9%): [≈ 0, 0.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.006 ±(99.9%) 0.047 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.006, 0.028), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1974.111 ±(99.9%) 586.397 MB/sec [Average]
[info]   (min, avg, max) = (1701.695, 1974.111, 2042.582), stdev = 152.285
[info]   CI (99.9%): [1387.714, 2560.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   403.794 ±(99.9%) 123.296 B/op [Average]
[info]   (min, avg, max) = (347.207, 403.794, 422.585), stdev = 32.020
[info]   CI (99.9%): [280.498, 527.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson
[info] # Run progress: 67.58% complete, ETA 00:22:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 53584.391 ops/s
[info] # Warmup Iteration   2: 286591.896 ops/s
[info] # Warmup Iteration   3: 288065.390 ops/s
[info] Iteration   1: 293897.766 ops/s
[info]                  ·gc.alloc.rate:                   1757.945 MB/sec
[info]                  ·gc.alloc.rate.norm:              9416.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1683.630 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        9017.953 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      5.328 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 28.538 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         20.000 ms
[info] Iteration   2: 298512.092 ops/s
[info]                  ·gc.alloc.rate:                                  1785.901 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9416.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.070 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.369 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.951 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8973.385 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 298898.753 ops/s
[info]                  ·gc.alloc.rate:                                  1788.393 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9416.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.172 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8962.038 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 292816.427 ops/s
[info]                  ·gc.alloc.rate:                                  1752.150 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9416.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.729 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10977.566 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   5: 299404.861 ops/s
[info]                  ·gc.alloc.rate:                                  1790.970 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9416.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.601 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8946.147 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson":
[info]   296705.980 ±(99.9%) 11925.958 ops/s [Average]
[info]   (min, avg, max) = (292816.427, 296705.980, 299404.861), stdev = 3097.134
[info]   CI (99.9%): [284780.022, 308631.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1775.072 ±(99.9%) 71.165 MB/sec [Average]
[info]   (min, avg, max) = (1752.150, 1775.072, 1790.970), stdev = 18.481
[info]   CI (99.9%): [1703.907, 1846.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   9416.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9416.001, 9416.001, 9416.001), stdev = 0.001
[info]   CI (99.9%): [9416.001, 9416.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.015 ±(99.9%) 0.118 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.070), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.081 ±(99.9%) 0.621 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.081, 0.369), stdev = 0.161
[info]   CI (99.9%): [≈ 0, 0.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1766.417 ±(99.9%) 595.564 MB/sec [Average]
[info]   (min, avg, max) = (1683.630, 1766.417, 2042.729), stdev = 154.666
[info]   CI (99.9%): [1170.852, 2361.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   9375.418 ±(99.9%) 3450.276 B/op [Average]
[info]   (min, avg, max) = (8946.147, 9375.418, 10977.566), stdev = 896.026
[info]   CI (99.9%): [5925.142, 12825.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 9.175 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 5.328), stdev = 2.383
[info]   CI (99.9%): [≈ 0, 10.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   5.708 ±(99.9%) 49.144 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.708, 28.538), stdev = 12.763
[info]   CI (99.9%): [≈ 0, 54.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 8.800, 20.000), stdev = 7.155
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce
[info] # Run progress: 67.88% complete, ETA 00:22:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 497791.512 ops/s
[info] # Warmup Iteration   2: 976281.039 ops/s
[info] # Warmup Iteration   3: 972883.790 ops/s
[info] Iteration   1: 989493.165 ops/s
[info]                  ·gc.alloc.rate:                                  2127.303 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3384.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.134 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.214 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2379.279 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3784.830 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                5.298 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   2: 993144.940 ops/s
[info]                  ·gc.alloc.rate:                                  2135.865 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3384.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.940 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3236.773 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 988758.574 ops/s
[info]                  ·gc.alloc.rate:                                  2126.526 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3384.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.998 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3251.080 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 993372.242 ops/s
[info]                  ·gc.alloc.rate:                                  2135.743 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3384.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.334 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3235.997 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 975079.430 ops/s
[info]                  ·gc.alloc.rate:                                  2096.274 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3384.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.572 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3846.168 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce":
[info]   987969.670 ±(99.9%) 28884.508 ops/s [Average]
[info]   (min, avg, max) = (975079.430, 987969.670, 993372.242), stdev = 7501.215
[info]   CI (99.9%): [959085.162, 1016854.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.alloc.rate":
[info]   2124.342 ±(99.9%) 62.805 MB/sec [Average]
[info]   (min, avg, max) = (2096.274, 2124.342, 2135.865), stdev = 16.310
[info]   CI (99.9%): [2061.537, 2187.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3384.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3384.000, 3384.000, 3384.000), stdev = 0.001
[info]   CI (99.9%): [3384.000, 3384.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.029 ±(99.9%) 0.227 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.029, 0.134), stdev = 0.059
[info]   CI (99.9%): [≈ 0, 0.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.046 ±(99.9%) 0.361 B/op [Average]
[info]   (min, avg, max) = (0.002, 0.046, 0.214), stdev = 0.094
[info]   CI (99.9%): [≈ 0, 0.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   2178.025 ±(99.9%) 713.239 MB/sec [Average]
[info]   (min, avg, max) = (2042.334, 2178.025, 2382.572), stdev = 185.226
[info]   CI (99.9%): [1464.785, 2891.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   3470.970 ±(99.9%) 1214.166 B/op [Average]
[info]   (min, avg, max) = (3235.997, 3470.970, 3846.168), stdev = 315.315
[info]   CI (99.9%): [2256.803, 4685.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   1.060 ±(99.9%) 9.123 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.060, 5.298), stdev = 2.369
[info]   CI (99.9%): [≈ 0, 10.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 8.000), stdev = 1.225
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala
[info] # Run progress: 68.18% complete, ETA 00:22:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_55ac30bf/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 1053276.851 ops/s
[info] # Warmup Iteration   2: 2803408.892 ops/s
[info] # Warmup Iteration   3: 2807929.565 ops/s
[info] Iteration   1: 2854362.773 ops/s
[info]                  ·gc.alloc.rate:                   1624.651 MB/sec
[info]                  ·gc.alloc.rate.norm:              896.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1343.277 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        740.821 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.571 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 2874800.125 ops/s
[info]                  ·gc.alloc.rate:                                  1636.326 MB/sec
[info]                  ·gc.alloc.rate.norm:                             896.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.042 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.023 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.002 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       931.415 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                0.365 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 2898752.692 ops/s
[info]                  ·gc.alloc.rate:                                  1650.539 MB/sec
[info]                  ·gc.alloc.rate.norm:                             896.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.266 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       924.080 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 2904711.910 ops/s
[info]                  ·gc.alloc.rate:                                  1653.492 MB/sec
[info]                  ·gc.alloc.rate.norm:                             896.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.849 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       922.204 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 2909094.986 ops/s
[info]                  ·gc.alloc.rate:                                  1655.966 MB/sec
[info]                  ·gc.alloc.rate.norm:                             896.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.882 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       920.844 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala":
[info]   2888344.497 ±(99.9%) 89169.912 ops/s [Average]
[info]   (min, avg, max) = (2854362.773, 2888344.497, 2909094.986), stdev = 23157.143
[info]   CI (99.9%): [2799174.585, 2977514.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1644.195 ±(99.9%) 51.270 MB/sec [Average]
[info]   (min, avg, max) = (1624.651, 1644.195, 1655.966), stdev = 13.315
[info]   CI (99.9%): [1592.925, 1695.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   896.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (896.000, 896.000, 896.000), stdev = 0.001
[info]   CI (99.9%): [896.000, 896.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.010 ±(99.9%) 0.070 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.042), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.005 ±(99.9%) 0.038 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.023), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1630.055 ±(99.9%) 617.314 MB/sec [Average]
[info]   (min, avg, max) = (1343.277, 1630.055, 1702.266), stdev = 160.315
[info]   CI (99.9%): [1012.741, 2247.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   887.873 ±(99.9%) 316.929 B/op [Average]
[info]   (min, avg, max) = (740.821, 887.873, 931.415), stdev = 82.306
[info]   CI (99.9%): [570.944, 1204.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.820 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.662), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.587 ±(99.9%) 4.314 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.587, 2.571), stdev = 1.120
[info]   CI (99.9%): [≈ 0, 4.901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.600, 18.000), stdev = 6.066
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala
[info] # Run progress: 68.48% complete, ETA 00:22:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10726652.239 ops/s
[info] # Warmup Iteration   2: 13424898.327 ops/s
[info] # Warmup Iteration   3: 14140432.082 ops/s
[info] Iteration   1: 13836292.552 ops/s
[info]                  ·gc.alloc.rate:                   843.799 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.696 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        76.533 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.076 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 14066783.348 ops/s
[info]                  ·gc.alloc.rate:                   858.210 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1010.799 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        113.069 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.075 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 14173777.169 ops/s
[info]                  ·gc.alloc.rate:            864.476 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.423 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 74.784 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 13901605.153 ops/s
[info]                  ·gc.alloc.rate:                                  847.873 MB/sec
[info]                  ·gc.alloc.rate.norm:                             96.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.037 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.801 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       114.787 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                0.453 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 13300030.923 ops/s
[info]                  ·gc.alloc.rate:                                  811.201 MB/sec
[info]                  ·gc.alloc.rate.norm:                             96.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.111 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.732 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       80.560 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala":
[info]   13855697.829 ±(99.9%) 1301525.225 ops/s [Average]
[info]   (min, avg, max) = (13300030.923, 13855697.829, 14173777.169), stdev = 338001.968
[info]   CI (99.9%): [12554172.604, 15157223.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   845.112 ±(99.9%) 79.518 MB/sec [Average]
[info]   (min, avg, max) = (811.201, 845.112, 864.476), stdev = 20.651
[info]   CI (99.9%): [765.593, 924.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   96.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (96.000, 96.000, 96.000), stdev = 0.001
[info]   CI (99.9%): [96.000, 96.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.030 ±(99.9%) 0.186 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.111), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.003 ±(99.9%) 0.022 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.013), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   810.290 ±(99.9%) 710.207 MB/sec [Average]
[info]   (min, avg, max) = (672.696, 810.290, 1013.801), stdev = 184.439
[info]   CI (99.9%): [100.083, 1520.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   91.947 ±(99.9%) 77.723 B/op [Average]
[info]   (min, avg, max) = (74.784, 91.947, 114.787), stdev = 20.184
[info]   CI (99.9%): [14.224, 169.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 6.438 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 3.997), stdev = 1.672
[info]   CI (99.9%): [≈ 0, 7.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.121 ±(99.9%) 0.729 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.121, 0.453), stdev = 0.189
[info]   CI (99.9%): [≈ 0, 0.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.800, 9.000), stdev = 2.588
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson
[info] # Run progress: 68.79% complete, ETA 00:22:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 87681.599 ops/s
[info] # Warmup Iteration   2: 479490.908 ops/s
[info] # Warmup Iteration   3: 481255.146 ops/s
[info] Iteration   1: 476794.847 ops/s
[info]                  ·gc.alloc.rate:                   1623.409 MB/sec
[info]                  ·gc.alloc.rate.norm:              5360.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1679.641 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5545.659 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 13.193 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         22.000 ms
[info] Iteration   2: 475240.625 ops/s
[info]                  ·gc.alloc.rate:                                  1618.254 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5360.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.176 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.582 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.070 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5634.303 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                2.206 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 481074.380 ops/s
[info]                  ·gc.alloc.rate:                                  1638.141 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5360.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.797 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5568.281 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 487017.035 ops/s
[info]                  ·gc.alloc.rate:                                  1658.334 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5360.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.747 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5500.319 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 490191.195 ops/s
[info]                  ·gc.alloc.rate:                                  1669.106 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5360.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.364 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4371.749 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson":
[info]   482063.616 ±(99.9%) 24797.491 ops/s [Average]
[info]   (min, avg, max) = (475240.625, 482063.616, 490191.195), stdev = 6439.830
[info]   CI (99.9%): [457266.125, 506861.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1641.449 ±(99.9%) 84.460 MB/sec [Average]
[info]   (min, avg, max) = (1618.254, 1641.449, 1669.106), stdev = 21.934
[info]   CI (99.9%): [1556.989, 1725.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5360.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5360.001, 5360.001, 5360.001), stdev = 0.001
[info]   CI (99.9%): [5360.001, 5360.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.036 ±(99.9%) 0.300 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.036, 0.176), stdev = 0.078
[info]   CI (99.9%): [≈ 0, 0.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.120 ±(99.9%) 0.993 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.120, 0.582), stdev = 0.258
[info]   CI (99.9%): [≈ 0, 1.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1629.124 ±(99.9%) 577.528 MB/sec [Average]
[info]   (min, avg, max) = (1361.364, 1629.124, 1701.797), stdev = 149.982
[info]   CI (99.9%): [1051.595, 2206.652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   5324.062 ±(99.9%) 2058.352 B/op [Average]
[info]   (min, avg, max) = (4371.749, 5324.062, 5634.303), stdev = 534.548
[info]   CI (99.9%): [3265.710, 7382.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.687 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   3.080 ±(99.9%) 22.079 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.080, 13.193), stdev = 5.734
[info]   CI (99.9%): [≈ 0, 25.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 8.000, 22.000), stdev = 7.874
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala
[info] # Run progress: 69.09% complete, ETA 00:21:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 874443.003 ops/s
[info] # Warmup Iteration   2: 1835293.863 ops/s
[info] # Warmup Iteration   3: 1856216.847 ops/s
[info] Iteration   1: 1850006.902 ops/s
[info]                  ·gc.alloc.rate:            1175.178 MB/sec
[info]                  ·gc.alloc.rate.norm:       1000.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1342.665 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1142.521 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   2: 1853240.417 ops/s
[info]                  ·gc.alloc.rate:                   1177.142 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1007.572 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        855.947 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      5.328 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 4.526 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   3: 1861039.293 ops/s
[info]                  ·gc.alloc.rate:                                  1182.283 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1000.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.060 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.051 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.378 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1151.482 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 1863637.315 ops/s
[info]                  ·gc.alloc.rate:            1183.823 MB/sec
[info]                  ·gc.alloc.rate.norm:       1000.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.935 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 862.406 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   5: 1863114.049 ops/s
[info]                  ·gc.alloc.rate:            1183.603 MB/sec
[info]                  ·gc.alloc.rate.norm:       1000.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.362 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1150.184 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala":
[info]   1858207.595 ±(99.9%) 23853.634 ops/s [Average]
[info]   (min, avg, max) = (1850006.902, 1858207.595, 1863637.315), stdev = 6194.713
[info]   CI (99.9%): [1834353.961, 1882061.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1180.406 ±(99.9%) 15.331 MB/sec [Average]
[info]   (min, avg, max) = (1175.178, 1180.406, 1183.823), stdev = 3.981
[info]   CI (99.9%): [1165.075, 1195.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1000.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1000.000, 1000.000, 1000.000), stdev = 0.001
[info]   CI (99.9%): [1000.000, 1000.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.012 ±(99.9%) 0.103 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.060), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.010 ±(99.9%) 0.087 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.051), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1218.782 ±(99.9%) 719.779 MB/sec [Average]
[info]   (min, avg, max) = (1007.572, 1218.782, 1361.378), stdev = 186.924
[info]   CI (99.9%): [499.003, 1938.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1032.508 ±(99.9%) 609.492 B/op [Average]
[info]   (min, avg, max) = (855.947, 1032.508, 1151.482), stdev = 158.283
[info]   CI (99.9%): [423.017, 1642.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 9.174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 5.328), stdev = 2.383
[info]   CI (99.9%): [≈ 0, 10.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.905 ±(99.9%) 7.794 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.905, 4.526), stdev = 2.024
[info]   CI (99.9%): [≈ 0, 8.699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.200, 18.000), stdev = 7.294
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala
[info] # Run progress: 69.39% complete, ETA 00:21:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7307786.561 ops/s
[info] # Warmup Iteration   2: 8385390.900 ops/s
[info] # Warmup Iteration   3: 8481201.935 ops/s
[info] Iteration   1: 8514598.853 ops/s
[info]                  ·gc.alloc.rate:            1124.950 MB/sec
[info]                  ·gc.alloc.rate.norm:       208.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.873 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 186.908 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 8438418.591 ops/s
[info]                  ·gc.alloc.rate:                   1114.940 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1347.877 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        251.456 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.621 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 8472537.164 ops/s
[info]                  ·gc.alloc.rate:                                  1119.907 MB/sec
[info]                  ·gc.alloc.rate.norm:                             208.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.119 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.388 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       189.702 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 8521634.110 ops/s
[info]                  ·gc.alloc.rate:            1126.074 MB/sec
[info]                  ·gc.alloc.rate.norm:       208.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.093 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 188.609 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 8518333.844 ops/s
[info]                  ·gc.alloc.rate:                                  1125.563 MB/sec
[info]                  ·gc.alloc.rate.norm:                             208.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.373 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       251.577 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala":
[info]   8493104.513 ±(99.9%) 140509.327 ops/s [Average]
[info]   (min, avg, max) = (8438418.591, 8493104.513, 8521634.110), stdev = 36489.826
[info]   CI (99.9%): [8352595.185, 8633613.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1122.287 ±(99.9%) 18.448 MB/sec [Average]
[info]   (min, avg, max) = (1114.940, 1122.287, 1126.074), stdev = 4.791
[info]   CI (99.9%): [1103.839, 1140.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   208.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (208.000, 208.000, 208.000), stdev = 0.001
[info]   CI (99.9%): [208.000, 208.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.024 ±(99.9%) 0.204 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.119), stdev = 0.053
[info]   CI (99.9%): [≈ 0, 0.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.004 ±(99.9%) 0.038 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.022), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1152.521 ±(99.9%) 710.849 MB/sec [Average]
[info]   (min, avg, max) = (1010.873, 1152.521, 1361.373), stdev = 184.605
[info]   CI (99.9%): [441.672, 1863.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   213.650 ±(99.9%) 133.160 B/op [Average]
[info]   (min, avg, max) = (186.908, 213.650, 251.577), stdev = 34.581
[info]   CI (99.9%): [80.490, 346.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.124 ±(99.9%) 1.070 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.124, 0.621), stdev = 0.278
[info]   CI (99.9%): [≈ 0, 1.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 12.000), stdev = 4.087
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson
[info] # Run progress: 69.70% complete, ETA 00:21:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 81350.706 ops/s
[info] # Warmup Iteration   2: 311175.923 ops/s
[info] # Warmup Iteration   3: 307040.802 ops/s
[info] Iteration   1: 313838.355 ops/s
[info]                  ·gc.alloc.rate:                   1504.472 MB/sec
[info]                  ·gc.alloc.rate.norm:              7544.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1344.392 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        6741.299 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 6.681 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   2: 316929.080 ops/s
[info]                  ·gc.alloc.rate:                                  1519.451 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7544.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.069 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.340 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1357.858 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6741.701 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                19.848 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 316314.358 ops/s
[info]                  ·gc.alloc.rate:                                  1516.026 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7544.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.816 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8468.527 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   4: 318817.170 ops/s
[info]                  ·gc.alloc.rate:                                  1528.026 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7544.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.505 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6721.873 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 315392.370 ops/s
[info]                  ·gc.alloc.rate:                                  1512.027 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7544.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.338 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8493.522 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson":
[info]   316258.266 ±(99.9%) 7102.030 ops/s [Average]
[info]   (min, avg, max) = (313838.355, 316258.266, 318817.170), stdev = 1844.375
[info]   CI (99.9%): [309156.237, 323360.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1516.000 ±(99.9%) 33.635 MB/sec [Average]
[info]   (min, avg, max) = (1504.472, 1516.000, 1528.026), stdev = 8.735
[info]   CI (99.9%): [1482.366, 1549.635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   7544.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7544.001, 7544.001, 7544.001), stdev = 0.001
[info]   CI (99.9%): [7544.001, 7544.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.014 ±(99.9%) 0.117 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.069), stdev = 0.030
[info]   CI (99.9%): [≈ 0, 0.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.071 ±(99.9%) 0.579 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.340), stdev = 0.150
[info]   CI (99.9%): [≈ 0, 0.650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1493.582 ±(99.9%) 733.301 MB/sec [Average]
[info]   (min, avg, max) = (1344.392, 1493.582, 1702.338), stdev = 190.436
[info]   CI (99.9%): [760.281, 2226.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   7433.384 ±(99.9%) 3682.889 B/op [Average]
[info]   (min, avg, max) = (6721.873, 7433.384, 8493.522), stdev = 956.435
[info]   CI (99.9%): [3750.495, 11116.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 6.690 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 3.998), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   5.306 ±(99.9%) 33.226 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.306, 19.848), stdev = 8.629
[info]   CI (99.9%): [≈ 0, 38.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.600, 17.000), stdev = 5.683
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala
[info] # Run progress: 70.00% complete, ETA 00:21:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_55ac30bf/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 1218513.693 ops/s
[info] # Warmup Iteration   2: 2284898.002 ops/s
[info] # Warmup Iteration   3: 2284654.081 ops/s
[info] Iteration   1: 2311439.703 ops/s
[info]                  ·gc.alloc.rate:            1221.854 MB/sec
[info]                  ·gc.alloc.rate.norm:       832.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.118 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 685.779 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 2280415.209 ops/s
[info]                  ·gc.alloc.rate:                   1205.154 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.527 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        929.600 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.218 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   3: 2209439.587 ops/s
[info]                  ·gc.alloc.rate:                                  1168.308 MB/sec
[info]                  ·gc.alloc.rate.norm:                             832.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.074 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.052 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.466 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       727.428 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   4: 2225935.984 ops/s
[info]                  ·gc.alloc.rate:                                  1176.730 MB/sec
[info]                  ·gc.alloc.rate.norm:                             832.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.586 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       962.702 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 2207462.103 ops/s
[info]                  ·gc.alloc.rate:            1166.950 MB/sec
[info]                  ·gc.alloc.rate.norm:       832.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.221 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 728.100 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala":
[info]   2246938.517 ±(99.9%) 179445.330 ops/s [Average]
[info]   (min, avg, max) = (2207462.103, 2246938.517, 2311439.703), stdev = 46601.382
[info]   CI (99.9%): [2067493.188, 2426383.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1187.799 ±(99.9%) 94.283 MB/sec [Average]
[info]   (min, avg, max) = (1166.950, 1187.799, 1221.854), stdev = 24.485
[info]   CI (99.9%): [1093.516, 1282.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   832.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (832.000, 832.000, 832.000), stdev = 0.001
[info]   CI (99.9%): [832.000, 832.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.016 ±(99.9%) 0.125 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.074), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.011 ±(99.9%) 0.089 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.052), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1151.584 ±(99.9%) 712.367 MB/sec [Average]
[info]   (min, avg, max) = (1007.118, 1151.584, 1361.586), stdev = 185.000
[info]   CI (99.9%): [439.216, 1863.951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   806.722 ±(99.9%) 496.587 B/op [Average]
[info]   (min, avg, max) = (685.779, 806.722, 962.702), stdev = 128.962
[info]   CI (99.9%): [310.135, 1303.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.644 ±(99.9%) 5.542 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.644, 3.218), stdev = 1.439
[info]   CI (99.9%): [≈ 0, 6.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.200, 15.000), stdev = 6.261
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala
[info] # Run progress: 70.30% complete, ETA 00:21:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5522390.855 ops/s
[info] # Warmup Iteration   2: 5996767.019 ops/s
[info] # Warmup Iteration   3: 6102787.245 ops/s
[info] Iteration   1: 6121870.913 ops/s
[info]                  ·gc.alloc.rate:                   933.651 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.501 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        173.127 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.171 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 6067858.856 ops/s
[info]                  ·gc.alloc.rate:            925.390 MB/sec
[info]                  ·gc.alloc.rate.norm:       240.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.324 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 262.287 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 6220191.519 ops/s
[info]                  ·gc.alloc.rate:                   948.459 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.150 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        255.358 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.011 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 6238623.677 ops/s
[info]                  ·gc.alloc.rate:                                  951.127 MB/sec
[info]                  ·gc.alloc.rate.norm:                             240.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.125 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.032 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.996 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       257.630 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 6264738.147 ops/s
[info]                  ·gc.alloc.rate:            955.224 MB/sec
[info]                  ·gc.alloc.rate.norm:       240.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.728 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 171.033 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala":
[info]   6182656.622 ±(99.9%) 323041.177 ops/s [Average]
[info]   (min, avg, max) = (6067858.856, 6182656.622, 6264738.147), stdev = 83892.768
[info]   CI (99.9%): [5859615.446, 6505697.799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   942.770 ±(99.9%) 48.803 MB/sec [Average]
[info]   (min, avg, max) = (925.390, 942.770, 955.224), stdev = 12.674
[info]   CI (99.9%): [893.967, 991.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   240.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (240.000, 240.000, 240.000), stdev = 0.001
[info]   CI (99.9%): [240.000, 240.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.025 ±(99.9%) 0.216 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.125), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.006 ±(99.9%) 0.054 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.032), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   879.140 ±(99.9%) 710.424 MB/sec [Average]
[info]   (min, avg, max) = (673.501, 879.140, 1020.996), stdev = 184.495
[info]   CI (99.9%): [168.716, 1589.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   223.887 ±(99.9%) 182.385 B/op [Average]
[info]   (min, avg, max) = (171.033, 223.887, 262.287), stdev = 47.365
[info]   CI (99.9%): [41.502, 406.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.689 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.997), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.237 ±(99.9%) 1.692 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.237, 1.011), stdev = 0.439
[info]   CI (99.9%): [≈ 0, 1.929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 5.800, 10.000), stdev = 3.834
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson
[info] # Run progress: 70.61% complete, ETA 00:20:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 165992.163 ops/s
[info] # Warmup Iteration   2: 551201.529 ops/s
[info] # Warmup Iteration   3: 565586.829 ops/s
[info] Iteration   1: 556875.484 ops/s
[info]                  ·gc.alloc.rate:                   1613.086 MB/sec
[info]                  ·gc.alloc.rate.norm:              4560.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1684.912 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4763.046 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 11.296 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   2: 574974.847 ops/s
[info]                  ·gc.alloc.rate:                                  1665.601 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4560.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.083 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.226 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.338 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3727.006 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 574648.653 ops/s
[info]                  ·gc.alloc.rate:                                  1664.755 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4560.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.797 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4661.465 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 575939.859 ops/s
[info]                  ·gc.alloc.rate:                                  1668.400 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4560.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.680 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4650.961 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 572925.697 ops/s
[info]                  ·gc.alloc.rate:                                  1659.739 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4560.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.753 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4675.433 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson":
[info]   571072.908 ±(99.9%) 30847.117 ops/s [Average]
[info]   (min, avg, max) = (556875.484, 571072.908, 575939.859), stdev = 8010.898
[info]   CI (99.9%): [540225.791, 601920.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1654.316 ±(99.9%) 89.564 MB/sec [Average]
[info]   (min, avg, max) = (1613.086, 1654.316, 1668.400), stdev = 23.259
[info]   CI (99.9%): [1564.752, 1743.880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4560.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4560.001, 4560.001, 4560.001), stdev = 0.001
[info]   CI (99.9%): [4560.001, 4560.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.017 ±(99.9%) 0.141 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.083), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.047 ±(99.9%) 0.385 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.047, 0.226), stdev = 0.100
[info]   CI (99.9%): [≈ 0, 0.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1630.296 ±(99.9%) 579.632 MB/sec [Average]
[info]   (min, avg, max) = (1361.338, 1630.296, 1701.797), stdev = 150.529
[info]   CI (99.9%): [1050.664, 2209.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   4495.582 ±(99.9%) 1663.206 B/op [Average]
[info]   (min, avg, max) = (3727.006, 4495.582, 4763.046), stdev = 431.929
[info]   CI (99.9%): [2832.376, 6158.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   2.259 ±(99.9%) 19.452 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.259, 11.296), stdev = 5.052
[info]   CI (99.9%): [≈ 0, 21.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.800, 19.000), stdev = 6.834
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce
[info] # Run progress: 70.91% complete, ETA 00:20:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 408704.101 ops/s
[info] # Warmup Iteration   2: 728034.422 ops/s
[info] # Warmup Iteration   3: 737935.976 ops/s
[info] Iteration   1: 736731.005 ops/s
[info]                  ·gc.alloc.rate:                                  2397.255 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5120.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.011 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.023 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2383.439 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5090.493 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 739255.399 ops/s
[info]                  ·gc.alloc.rate:                                  2405.334 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5120.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2383.281 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5073.059 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 744718.514 ops/s
[info]                  ·gc.alloc.rate:                                  2422.415 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5120.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.614 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5035.877 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 744810.849 ops/s
[info]                  ·gc.alloc.rate:                                  2423.484 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5120.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2383.227 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5034.951 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 739525.466 ops/s
[info]                  ·gc.alloc.rate:                                  2406.357 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5120.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2383.341 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5071.029 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce":
[info]   741008.247 ±(99.9%) 13855.870 ops/s [Average]
[info]   (min, avg, max) = (736731.005, 741008.247, 744810.849), stdev = 3598.325
[info]   CI (99.9%): [727152.377, 754864.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate":
[info]   2410.969 ±(99.9%) 44.272 MB/sec [Average]
[info]   (min, avg, max) = (2397.255, 2410.969, 2423.484), stdev = 11.497
[info]   CI (99.9%): [2366.697, 2455.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5120.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5120.001, 5120.001, 5120.001), stdev = 0.001
[info]   CI (99.9%): [5120.000, 5120.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.004 ±(99.9%) 0.015 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.004, 0.011), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.009 ±(99.9%) 0.033 B/op [Average]
[info]   (min, avg, max) = (0.003, 0.009, 0.023), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2383.180 ±(99.9%) 1.256 MB/sec [Average]
[info]   (min, avg, max) = (2382.614, 2383.180, 2383.439), stdev = 0.326
[info]   CI (99.9%): [2381.924, 2384.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   5061.082 ±(99.9%) 94.821 B/op [Average]
[info]   (min, avg, max) = (5034.951, 5061.082, 5090.493), stdev = 24.625
[info]   CI (99.9%): [4966.260, 5155.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.count":
[info]   35.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.000, 7.000), stdev = 0.001
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala
[info] # Run progress: 71.21% complete, ETA 00:20:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 168303.895 ops/s
[info] # Warmup Iteration   2: 760944.451 ops/s
[info] # Warmup Iteration   3: 758120.892 ops/s
[info] Iteration   1: 767232.089 ops/s
[info]                  ·gc.alloc.rate:                   951.329 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.280 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2068.855 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.366 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 777161.157 ops/s
[info]                  ·gc.alloc.rate:                   964.072 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.249 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1361.134 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.349 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 772040.356 ops/s
[info]                  ·gc.alloc.rate:                   957.411 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1007.736 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2054.604 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.358 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   4: 779877.359 ops/s
[info]                  ·gc.alloc.rate:                                  967.431 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1952.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.184 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.371 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.405 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2052.834 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                8.066 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 777501.278 ops/s
[info]                  ·gc.alloc.rate:                                  964.203 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1952.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.027 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.054 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.081 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2067.149 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala":
[info]   774762.448 ±(99.9%) 19590.413 ops/s [Average]
[info]   (min, avg, max) = (767232.089, 774762.448, 779877.359), stdev = 5087.568
[info]   CI (99.9%): [755172.035, 794352.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   960.889 ±(99.9%) 24.910 MB/sec [Average]
[info]   (min, avg, max) = (951.329, 960.889, 967.431), stdev = 6.469
[info]   CI (99.9%): [935.979, 985.799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1952.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1952.001, 1952.001, 1952.001), stdev = 0.001
[info]   CI (99.9%): [1952.000, 1952.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.042 ±(99.9%) 0.309 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.184), stdev = 0.080
[info]   CI (99.9%): [≈ 0, 0.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.085 ±(99.9%) 0.623 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.085, 0.371), stdev = 0.162
[info]   CI (99.9%): [≈ 0, 0.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   945.350 ±(99.9%) 588.290 MB/sec [Average]
[info]   (min, avg, max) = (672.249, 945.350, 1021.081), stdev = 152.777
[info]   CI (99.9%): [357.061, 1533.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1920.915 ±(99.9%) 1205.291 B/op [Average]
[info]   (min, avg, max) = (1361.134, 1920.915, 2068.855), stdev = 313.010
[info]   CI (99.9%): [715.625, 3126.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.199 ±(99.9%) 6.125 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.199, 3.998), stdev = 1.591
[info]   CI (99.9%): [≈ 0, 7.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   2.428 ±(99.9%) 12.346 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.428, 8.066), stdev = 3.206
[info]   CI (99.9%): [≈ 0, 14.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 9.000, 14.000), stdev = 5.099
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala
[info] # Run progress: 71.52% complete, ETA 00:20:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6961706.531 ops/s
[info] # Warmup Iteration   2: 6529278.500 ops/s
[info] # Warmup Iteration   3: 6833605.616 ops/s
[info] Iteration   1: 6933708.785 ops/s
[info]                  ·gc.alloc.rate:            317.155 MB/sec
[info]                  ·gc.alloc.rate.norm:       72.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.696 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 76.663 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   2: 6932800.197 ops/s
[info]                  ·gc.alloc.rate:            317.125 MB/sec
[info]                  ·gc.alloc.rate.norm:       72.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.046 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 76.523 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 7075242.454 ops/s
[info]                  ·gc.alloc.rate:            323.609 MB/sec
[info]                  ·gc.alloc.rate.norm:       72.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.006 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 74.981 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   4: 7100359.718 ops/s
[info]                  ·gc.alloc.rate:                   324.779 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             337.030 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        74.716 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.148 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 7001012.203 ops/s
[info]                  ·gc.alloc.rate:            320.221 MB/sec
[info]                  ·gc.alloc.rate.norm:       72.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.665 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 75.922 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala":
[info]   7008624.671 ±(99.9%) 299960.826 ops/s [Average]
[info]   (min, avg, max) = (6932800.197, 7008624.671, 7100359.718), stdev = 77898.874
[info]   CI (99.9%): [6708663.845, 7308585.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   320.578 ±(99.9%) 13.696 MB/sec [Average]
[info]   (min, avg, max) = (317.125, 320.578, 324.779), stdev = 3.557
[info]   CI (99.9%): [306.882, 334.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   72.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (72.000, 72.000, 72.000), stdev = 0.001
[info]   CI (99.9%): [72.000, 72.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   337.288 ±(99.9%) 1.380 MB/sec [Average]
[info]   (min, avg, max) = (337.006, 337.288, 337.696), stdev = 0.358
[info]   CI (99.9%): [335.909, 338.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   75.761 ±(99.9%) 3.402 B/op [Average]
[info]   (min, avg, max) = (74.716, 75.761, 76.663), stdev = 0.883
[info]   CI (99.9%): [72.359, 79.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.030 ±(99.9%) 0.254 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.148), stdev = 0.066
[info]   CI (99.9%): [≈ 0, 0.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson
[info] # Run progress: 71.82% complete, ETA 00:19:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26072.892 ops/s
[info] # Warmup Iteration   2: 241956.206 ops/s
[info] # Warmup Iteration   3: 257326.326 ops/s
[info] Iteration   1: 259903.575 ops/s
[info]                  ·gc.alloc.rate:                   1445.136 MB/sec
[info]                  ·gc.alloc.rate.norm:              8752.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1681.161 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        10181.407 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 4.034 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         23.000 ms
[info] Iteration   2: 262782.047 ops/s
[info]                  ·gc.alloc.rate:                                  1461.266 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8752.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.145 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.869 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1352.893 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8102.919 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                27.927 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   3: 263595.505 ops/s
[info]                  ·gc.alloc.rate:                                  1465.588 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8752.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.033 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.200 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.369 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8129.637 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 263811.344 ops/s
[info]                  ·gc.alloc.rate:            1466.757 MB/sec
[info]                  ·gc.alloc.rate.norm:       8752.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.693 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10153.843 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 263529.611 ops/s
[info]                  ·gc.alloc.rate:                                  1465.274 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8752.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.433 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8131.765 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson":
[info]   262724.417 ±(99.9%) 6253.300 ops/s [Average]
[info]   (min, avg, max) = (259903.575, 262724.417, 263811.344), stdev = 1623.962
[info]   CI (99.9%): [256471.117, 268977.716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1460.804 ±(99.9%) 34.655 MB/sec [Average]
[info]   (min, avg, max) = (1445.136, 1460.804, 1466.757), stdev = 9.000
[info]   CI (99.9%): [1426.149, 1495.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8752.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8752.002, 8752.002, 8752.002), stdev = 0.001
[info]   CI (99.9%): [8752.001, 8752.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.036 ±(99.9%) 0.241 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.036, 0.145), stdev = 0.063
[info]   CI (99.9%): [≈ 0, 0.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.215 ±(99.9%) 1.446 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.215, 0.869), stdev = 0.375
[info]   CI (99.9%): [≈ 0, 1.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1491.709 ±(99.9%) 702.718 MB/sec [Average]
[info]   (min, avg, max) = (1352.893, 1491.709, 1701.693), stdev = 182.494
[info]   CI (99.9%): [788.992, 2194.427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   8939.914 ±(99.9%) 4315.961 B/op [Average]
[info]   (min, avg, max) = (8102.919, 8939.914, 10181.407), stdev = 1120.841
[info]   CI (99.9%): [4623.953, 13255.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.822 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.663), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   6.392 ±(99.9%) 46.841 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.392, 27.927), stdev = 12.165
[info]   CI (99.9%): [≈ 0, 53.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.000, 23.000), stdev = 8.689
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce
[info] # Run progress: 72.12% complete, ETA 00:19:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5381.252 ops/s
[info] # Warmup Iteration   2: 7464.877 ops/s
[info] # Warmup Iteration   3: 7609.434 ops/s
[info] Iteration   1: 7704.490 ops/s
[info]                  ·gc.alloc.rate:                                  1853.947 MB/sec
[info]                  ·gc.alloc.rate.norm:                             378784.053 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.092 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 18.821 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2035.307 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       415838.081 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                680.363 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   2: 7630.588 ops/s
[info]                  ·gc.alloc.rate:                                  1836.253 MB/sec
[info]                  ·gc.alloc.rate.norm:                             378784.062 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.070 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 14.438 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.741 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       351036.646 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 7586.067 ops/s
[info]                  ·gc.alloc.rate:                                  1825.403 MB/sec
[info]                  ·gc.alloc.rate.norm:                             378784.054 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.097 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 20.158 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.495 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       353072.177 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 7742.969 ops/s
[info]                  ·gc.alloc.rate:                                  1863.378 MB/sec
[info]                  ·gc.alloc.rate.norm:                             378784.061 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.106 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 21.530 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.756 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       415044.412 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 7613.095 ops/s
[info]                  ·gc.alloc.rate:                                  1832.006 MB/sec
[info]                  ·gc.alloc.rate.norm:                             378784.054 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.086 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 17.869 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.372 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       351774.118 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce":
[info]   7655.442 ±(99.9%) 253.167 ops/s [Average]
[info]   (min, avg, max) = (7586.067, 7655.442, 7742.969), stdev = 65.747
[info]   CI (99.9%): [7402.275, 7908.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1842.198 ±(99.9%) 61.125 MB/sec [Average]
[info]   (min, avg, max) = (1825.403, 1842.198, 1863.378), stdev = 15.874
[info]   CI (99.9%): [1781.073, 1903.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   378784.057 ±(99.9%) 0.017 B/op [Average]
[info]   (min, avg, max) = (378784.053, 378784.057, 378784.062), stdev = 0.004
[info]   CI (99.9%): [378784.040, 378784.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.090 ±(99.9%) 0.052 MB/sec [Average]
[info]   (min, avg, max) = (0.070, 0.090, 0.106), stdev = 0.013
[info]   CI (99.9%): [0.039, 0.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   18.563 ±(99.9%) 10.352 B/op [Average]
[info]   (min, avg, max) = (14.438, 18.563, 21.530), stdev = 2.688
[info]   CI (99.9%): [8.211, 28.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1836.334 ±(99.9%) 710.808 MB/sec [Average]
[info]   (min, avg, max) = (1701.372, 1836.334, 2041.756), stdev = 184.595
[info]   CI (99.9%): [1125.526, 2547.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   377353.087 ±(99.9%) 133919.009 B/op [Average]
[info]   (min, avg, max) = (351036.646, 377353.087, 415838.081), stdev = 34778.341
[info]   CI (99.9%): [243434.078, 511272.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   136.073 ±(99.9%) 1171.627 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 136.073, 680.363), stdev = 304.268
[info]   CI (99.9%): [≈ 0, 1307.699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 11.000), stdev = 2.915
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala
[info] # Run progress: 72.42% complete, ETA 00:19:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6334.290 ops/s
[info] # Warmup Iteration   2: 13003.830 ops/s
[info] # Warmup Iteration   3: 13067.838 ops/s
[info] Iteration   1: 13097.194 ops/s
[info]                  ·gc.alloc.rate:            331.736 MB/sec
[info]                  ·gc.alloc.rate.norm:       39872.031 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.622 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 40339.081 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 13101.057 ops/s
[info]                  ·gc.alloc.rate:            331.880 MB/sec
[info]                  ·gc.alloc.rate.norm:       39872.036 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.691 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 40329.846 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 13075.963 ops/s
[info]                  ·gc.alloc.rate:            331.217 MB/sec
[info]                  ·gc.alloc.rate.norm:       39872.031 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.660 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 40406.935 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 13111.889 ops/s
[info]                  ·gc.alloc.rate:            332.207 MB/sec
[info]                  ·gc.alloc.rate.norm:       39872.031 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.740 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 40296.020 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 13116.609 ops/s
[info]                  ·gc.alloc.rate:            332.295 MB/sec
[info]                  ·gc.alloc.rate.norm:       39872.031 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.675 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 40277.593 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala":
[info]   13100.542 ±(99.9%) 60.960 ops/s [Average]
[info]   (min, avg, max) = (13075.963, 13100.542, 13116.609), stdev = 15.831
[info]   CI (99.9%): [13039.582, 13161.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   331.867 ±(99.9%) 1.655 MB/sec [Average]
[info]   (min, avg, max) = (331.217, 331.867, 332.295), stdev = 0.430
[info]   CI (99.9%): [330.212, 333.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   39872.032 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (39872.031, 39872.032, 39872.036), stdev = 0.002
[info]   CI (99.9%): [39872.024, 39872.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   335.678 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (335.622, 335.678, 335.740), stdev = 0.043
[info]   CI (99.9%): [335.512, 335.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   40329.895 ±(99.9%) 191.592 B/op [Average]
[info]   (min, avg, max) = (40277.593, 40329.895, 40406.935), stdev = 49.756
[info]   CI (99.9%): [40138.304, 40521.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala
[info] # Run progress: 72.73% complete, ETA 00:19:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18371.861 ops/s
[info] # Warmup Iteration   2: 21804.583 ops/s
[info] # Warmup Iteration   3: 22723.953 ops/s
[info] Iteration   1: 22774.571 ops/s
[info]                  ·gc.alloc.rate:            389.153 MB/sec
[info]                  ·gc.alloc.rate.norm:       26896.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.029 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23293.505 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 22728.598 ops/s
[info]                  ·gc.alloc.rate:            388.383 MB/sec
[info]                  ·gc.alloc.rate.norm:       26896.023 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.042 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23340.641 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 22757.911 ops/s
[info]                  ·gc.alloc.rate:            388.929 MB/sec
[info]                  ·gc.alloc.rate.norm:       26896.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.071 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23309.879 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 22740.239 ops/s
[info]                  ·gc.alloc.rate:            388.544 MB/sec
[info]                  ·gc.alloc.rate.norm:       26896.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.004 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23328.326 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 22617.736 ops/s
[info]                  ·gc.alloc.rate:            386.462 MB/sec
[info]                  ·gc.alloc.rate.norm:       26896.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.013 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 46908.271 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala":
[info]   22723.811 ±(99.9%) 238.025 ops/s [Average]
[info]   (min, avg, max) = (22617.736, 22723.811, 22774.571), stdev = 61.814
[info]   CI (99.9%): [22485.786, 22961.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   388.294 ±(99.9%) 4.114 MB/sec [Average]
[info]   (min, avg, max) = (386.462, 388.294, 389.153), stdev = 1.069
[info]   CI (99.9%): [384.180, 392.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   26896.019 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (26896.018, 26896.019, 26896.023), stdev = 0.002
[info]   CI (99.9%): [26896.011, 26896.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   404.432 ±(99.9%) 580.294 MB/sec [Average]
[info]   (min, avg, max) = (337.004, 404.432, 674.013), stdev = 150.700
[info]   CI (99.9%): [≈ 0, 984.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   28036.124 ±(99.9%) 40623.777 B/op [Average]
[info]   (min, avg, max) = (23293.505, 28036.124, 46908.271), stdev = 10549.866
[info]   CI (99.9%): [≈ 0, 68659.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 6.000), stdev = 1.342
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson
[info] # Run progress: 73.03% complete, ETA 00:19:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 673.509 ops/s
[info] # Warmup Iteration   2: 1999.523 ops/s
[info] # Warmup Iteration   3: 2047.786 ops/s
[info] Iteration   1: 2061.803 ops/s
[info]                  ·gc.alloc.rate:                   1309.989 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000117.286 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1007.294 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        769023.504 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 508.277 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 2076.811 ops/s
[info]                  ·gc.alloc.rate:                   1319.751 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000112.212 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.414 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1020317.936 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.661 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3532.258 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   3: 2055.291 ops/s
[info]                  ·gc.alloc.rate:                                  1306.371 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1000112.198 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.039 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 30.136 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.681 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1042455.907 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 2100.700 ops/s
[info]                  ·gc.alloc.rate:                                  1334.827 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1000112.209 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.095 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 71.543 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1360.894 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1019642.885 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 2106.692 ops/s
[info]                  ·gc.alloc.rate:            1338.817 MB/sec
[info]                  ·gc.alloc.rate.norm:       1000112.194 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.077 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1016740.676 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson":
[info]   2080.259 ±(99.9%) 88.071 ops/s [Average]
[info]   (min, avg, max) = (2055.291, 2080.259, 2106.692), stdev = 22.872
[info]   CI (99.9%): [1992.189, 2168.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1321.951 ±(99.9%) 55.832 MB/sec [Average]
[info]   (min, avg, max) = (1306.371, 1321.951, 1338.817), stdev = 14.499
[info]   CI (99.9%): [1266.119, 1377.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   1000113.220 ±(99.9%) 8.752 B/op [Average]
[info]   (min, avg, max) = (1000112.194, 1000113.220, 1000117.286), stdev = 2.273
[info]   CI (99.9%): [1000104.468, 1000121.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.027 ±(99.9%) 0.161 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.095), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   20.336 ±(99.9%) 121.141 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 20.336, 71.543), stdev = 31.460
[info]   CI (99.9%): [≈ 0, 141.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1287.472 ±(99.9%) 603.610 MB/sec [Average]
[info]   (min, avg, max) = (1007.294, 1287.472, 1361.681), stdev = 156.756
[info]   CI (99.9%): [683.862, 1891.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   973636.181 ±(99.9%) 442222.201 B/op [Average]
[info]   (min, avg, max) = (769023.504, 973636.181, 1042455.907), stdev = 114843.701
[info]   CI (99.9%): [531413.980, 1415858.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.065 ±(99.9%) 7.819 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.065, 4.661), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   808.107 ±(99.9%) 5924.866 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 808.107, 3532.258), stdev = 1538.669
[info]   CI (99.9%): [≈ 0, 6732.973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 8.400, 16.000), stdev = 6.066
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce
[info] # Run progress: 73.33% complete, ETA 00:18:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5030.585 ops/s
[info] # Warmup Iteration   2: 7000.773 ops/s
[info] # Warmup Iteration   3: 7120.166 ops/s
[info] Iteration   1: 7076.219 ops/s
[info]                  ·gc.alloc.rate:                   1448.251 MB/sec
[info]                  ·gc.alloc.rate.norm:              322160.058 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1684.931 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        374808.884 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 740.729 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   2: 7128.907 ops/s
[info]                  ·gc.alloc.rate:                                  1459.564 MB/sec
[info]                  ·gc.alloc.rate.norm:                             322160.062 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.103 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 22.724 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.702 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       300559.437 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 7261.411 ops/s
[info]                  ·gc.alloc.rate:            1486.703 MB/sec
[info]                  ·gc.alloc.rate.norm:       322160.056 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.812 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 295096.977 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 7108.591 ops/s
[info]                  ·gc.alloc.rate:                                  1454.974 MB/sec
[info]                  ·gc.alloc.rate.norm:                             322160.062 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.770 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.785 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       376808.956 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 7101.585 ops/s
[info]                  ·gc.alloc.rate:                                  1453.539 MB/sec
[info]                  ·gc.alloc.rate.norm:                             322160.057 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.534 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.234 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       301701.766 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce":
[info]   7135.342 ±(99.9%) 280.897 ops/s [Average]
[info]   (min, avg, max) = (7076.219, 7135.342, 7261.411), stdev = 72.948
[info]   CI (99.9%): [6854.446, 7416.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate":
[info]   1460.606 ±(99.9%) 58.285 MB/sec [Average]
[info]   (min, avg, max) = (1448.251, 1460.606, 1486.703), stdev = 15.136
[info]   CI (99.9%): [1402.322, 1518.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   322160.059 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (322160.056, 322160.059, 322160.062), stdev = 0.003
[info]   CI (99.9%): [322160.049, 322160.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.022 ±(99.9%) 0.175 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.103), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   4.806 ±(99.9%) 38.593 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.806, 22.724), stdev = 10.023
[info]   CI (99.9%): [≈ 0, 43.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1494.293 ±(99.9%) 700.119 MB/sec [Average]
[info]   (min, avg, max) = (1361.234, 1494.293, 1701.785), stdev = 181.819
[info]   CI (99.9%): [794.174, 2194.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   329795.204 ±(99.9%) 162052.905 B/op [Average]
[info]   (min, avg, max) = (295096.977, 329795.204, 376808.956), stdev = 42084.625
[info]   CI (99.9%): [167742.299, 491848.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   148.146 ±(99.9%) 1275.580 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 148.146, 740.729), stdev = 331.264
[info]   CI (99.9%): [≈ 0, 1423.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 17.000), stdev = 5.983
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala
[info] # Run progress: 73.64% complete, ETA 00:18:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_55ac30bf/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 18961.264 ops/s
[info] # Warmup Iteration   2: 36939.188 ops/s
[info] # Warmup Iteration   3: 37524.559 ops/s
[info] Iteration   1: 37560.723 ops/s
[info]                  ·gc.alloc.rate:            544.183 MB/sec
[info]                  ·gc.alloc.rate.norm:       22807.790 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.649 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14067.727 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 37501.922 ops/s
[info]                  ·gc.alloc.rate:            543.340 MB/sec
[info]                  ·gc.alloc.rate.norm:       22807.823 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.312 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 28179.711 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 36594.874 ops/s
[info]                  ·gc.alloc.rate:            530.271 MB/sec
[info]                  ·gc.alloc.rate.norm:       22807.843 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.709 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14439.407 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 36383.481 ops/s
[info]                  ·gc.alloc.rate:            527.326 MB/sec
[info]                  ·gc.alloc.rate.norm:       22807.826 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.562 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 29046.267 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 36426.098 ops/s
[info]                  ·gc.alloc.rate:            527.798 MB/sec
[info]                  ·gc.alloc.rate.norm:       22807.882 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.348 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 29011.188 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala":
[info]   36893.420 ±(99.9%) 2264.302 ops/s [Average]
[info]   (min, avg, max) = (36383.481, 36893.420, 37560.723), stdev = 588.032
[info]   CI (99.9%): [34629.118, 39157.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   534.584 ±(99.9%) 32.568 MB/sec [Average]
[info]   (min, avg, max) = (527.326, 534.584, 544.183), stdev = 8.458
[info]   CI (99.9%): [502.016, 567.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   22807.833 ±(99.9%) 0.129 B/op [Average]
[info]   (min, avg, max) = (22807.790, 22807.833, 22807.882), stdev = 0.034
[info]   CI (99.9%): [22807.704, 22807.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   537.116 ±(99.9%) 708.079 MB/sec [Average]
[info]   (min, avg, max) = (335.649, 537.116, 671.562), stdev = 183.886
[info]   CI (99.9%): [≈ 0, 1245.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   22948.860 ±(99.9%) 30598.527 B/op [Average]
[info]   (min, avg, max) = (14067.727, 22948.860, 29046.267), stdev = 7946.340
[info]   CI (99.9%): [≈ 0, 53547.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.200, 9.000), stdev = 2.490
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala
[info] # Run progress: 73.94% complete, ETA 00:18:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 44479.882 ops/s
[info] # Warmup Iteration   2: 55322.623 ops/s
[info] # Warmup Iteration   3: 54330.679 ops/s
[info] Iteration   1: 54106.924 ops/s
[info]                  ·gc.alloc.rate:            408.659 MB/sec
[info]                  ·gc.alloc.rate.norm:       11888.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.382 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9785.469 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 55162.838 ops/s
[info]                  ·gc.alloc.rate:            416.631 MB/sec
[info]                  ·gc.alloc.rate.norm:       11888.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.375 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9597.993 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 55147.223 ops/s
[info]                  ·gc.alloc.rate:                   416.509 MB/sec
[info]                  ·gc.alloc.rate.norm:              11888.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.734 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        19201.207 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 19.011 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 54984.849 ops/s
[info]                  ·gc.alloc.rate:            415.282 MB/sec
[info]                  ·gc.alloc.rate.norm:       11888.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.018 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9647.601 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 55111.865 ops/s
[info]                  ·gc.alloc.rate:            416.216 MB/sec
[info]                  ·gc.alloc.rate.norm:       11888.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.344 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9606.699 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala":
[info]   54902.740 ±(99.9%) 1734.095 ops/s [Average]
[info]   (min, avg, max) = (54106.924, 54902.740, 55162.838), stdev = 450.339
[info]   CI (99.9%): [53168.645, 56636.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   414.659 ±(99.9%) 13.076 MB/sec [Average]
[info]   (min, avg, max) = (408.659, 414.659, 416.631), stdev = 3.396
[info]   CI (99.9%): [401.583, 427.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   11888.008 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11888.007, 11888.008, 11888.008), stdev = 0.001
[info]   CI (99.9%): [11888.007, 11888.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   403.771 ±(99.9%) 578.966 MB/sec [Average]
[info]   (min, avg, max) = (336.344, 403.771, 672.734), stdev = 150.356
[info]   CI (99.9%): [≈ 0, 982.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   11567.794 ±(99.9%) 16434.044 B/op [Average]
[info]   (min, avg, max) = (9597.993, 11567.794, 19201.207), stdev = 4267.869
[info]   CI (99.9%): [≈ 0, 28001.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   3.802 ±(99.9%) 32.738 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.802, 19.011), stdev = 8.502
[info]   CI (99.9%): [≈ 0, 36.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 6.000), stdev = 1.342
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 74.24% complete, ETA 00:18:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 59331.033 ops/s
[info] # Warmup Iteration   2: 68070.265 ops/s
[info] # Warmup Iteration   3: 67477.374 ops/s
[info] Iteration   1: 67947.649 ops/s
[info]                  ·gc.alloc.rate:      1.036 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 67916.066 ops/s
[info]                  ·gc.alloc.rate:      1.036 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 67910.741 ops/s
[info]                  ·gc.alloc.rate:      1.036 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 68004.399 ops/s
[info]                  ·gc.alloc.rate:      1.037 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 67952.260 ops/s
[info]                  ·gc.alloc.rate:      1.036 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   67946.223 ±(99.9%) 143.967 ops/s [Average]
[info]   (min, avg, max) = (67910.741, 67946.223, 68004.399), stdev = 37.388
[info]   CI (99.9%): [67802.256, 68090.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1.036 ±(99.9%) 0.002 MB/sec [Average]
[info]   (min, avg, max) = (1.036, 1.036, 1.037), stdev = 0.001
[info]   CI (99.9%): [1.034, 1.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   24.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (24.006, 24.006, 24.006), stdev = 0.001
[info]   CI (99.9%): [24.006, 24.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson
[info] # Run progress: 74.55% complete, ETA 00:18:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1834.047 ops/s
[info] # Warmup Iteration   2: 5342.750 ops/s
[info] # Warmup Iteration   3: 5567.721 ops/s
[info] Iteration   1: 5469.843 ops/s
[info]                  ·gc.alloc.rate:                   1554.422 MB/sec
[info]                  ·gc.alloc.rate.norm:              447287.330 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1678.479 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        482985.107 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1149.965 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         24.000 ms
[info] Iteration   2: 5541.125 ops/s
[info]                  ·gc.alloc.rate:                                  1575.209 MB/sec
[info]                  ·gc.alloc.rate.norm:                             447288.131 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.126 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 35.781 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.786 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       483230.441 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                189.205 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 5595.240 ops/s
[info]                  ·gc.alloc.rate:                                  1589.965 MB/sec
[info]                  ·gc.alloc.rate.norm:                             447287.797 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.059 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 16.693 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.213 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       382935.384 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 5595.570 ops/s
[info]                  ·gc.alloc.rate:                                  1590.486 MB/sec
[info]                  ·gc.alloc.rate.norm:                             447288.167 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.039 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 11.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.072 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       478669.230 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 5636.679 ops/s
[info]                  ·gc.alloc.rate:                                  1601.545 MB/sec
[info]                  ·gc.alloc.rate.norm:                             447288.478 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.054 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 15.203 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.443 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       475188.308 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson":
[info]   5567.691 ±(99.9%) 247.877 ops/s [Average]
[info]   (min, avg, max) = (5469.843, 5567.691, 5636.679), stdev = 64.373
[info]   CI (99.9%): [5319.815, 5815.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1582.325 ±(99.9%) 70.047 MB/sec [Average]
[info]   (min, avg, max) = (1554.422, 1582.325, 1601.545), stdev = 18.191
[info]   CI (99.9%): [1512.279, 1652.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   447287.981 ±(99.9%) 1.680 B/op [Average]
[info]   (min, avg, max) = (447287.330, 447287.981, 447288.478), stdev = 0.436
[info]   CI (99.9%): [447286.300, 447289.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.056 ±(99.9%) 0.176 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.056, 0.126), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   15.737 ±(99.9%) 49.946 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15.737, 35.781), stdev = 12.971
[info]   CI (99.9%): [≈ 0, 65.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1628.999 ±(99.9%) 577.736 MB/sec [Average]
[info]   (min, avg, max) = (1361.213, 1628.999, 1702.072), stdev = 150.036
[info]   CI (99.9%): [1051.263, 2206.734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   460601.694 ±(99.9%) 167672.644 B/op [Average]
[info]   (min, avg, max) = (382935.384, 460601.694, 483230.441), stdev = 43544.053
[info]   CI (99.9%): [292929.050, 628274.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   267.834 ±(99.9%) 1924.881 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 267.834, 1149.965), stdev = 499.885
[info]   CI (99.9%): [≈ 0, 2192.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.400, 24.000), stdev = 8.792
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala
[info] # Run progress: 74.85% complete, ETA 00:17:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4465631.935 ops/s
[info] # Warmup Iteration   2: 4946403.799 ops/s
[info] # Warmup Iteration   3: 5055931.530 ops/s
[info] Iteration   1: 5063401.181 ops/s
[info]                  ·gc.alloc.rate:                                  1518.256 MB/sec
[info]                  ·gc.alloc.rate.norm:                             472.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.043 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1688.360 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       524.882 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1.035 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        13.000 ms
[info] Iteration   2: 5053026.922 ops/s
[info]                  ·gc.alloc.rate:                                  1515.059 MB/sec
[info]                  ·gc.alloc.rate.norm:                             472.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.059 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.278 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       424.091 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   3: 5045699.562 ops/s
[info]                  ·gc.alloc.rate:                                  1513.589 MB/sec
[info]                  ·gc.alloc.rate.norm:                             472.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.462 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       530.898 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 5054190.410 ops/s
[info]                  ·gc.alloc.rate:                                  1515.616 MB/sec
[info]                  ·gc.alloc.rate.norm:                             472.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.505 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       424.006 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 5035385.505 ops/s
[info]                  ·gc.alloc.rate:                                  1509.904 MB/sec
[info]                  ·gc.alloc.rate.norm:                             472.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.757 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       531.974 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala":
[info]   5050340.716 ±(99.9%) 40285.274 ops/s [Average]
[info]   (min, avg, max) = (5035385.505, 5050340.716, 5063401.181), stdev = 10461.958
[info]   CI (99.9%): [5010055.442, 5090625.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1514.485 ±(99.9%) 11.809 MB/sec [Average]
[info]   (min, avg, max) = (1509.904, 1514.485, 1518.256), stdev = 3.067
[info]   CI (99.9%): [1502.676, 1526.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   472.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (472.000, 472.000, 472.000), stdev = 0.001
[info]   CI (99.9%): [472.000, 472.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.021 ±(99.9%) 0.106 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.021, 0.059), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.007 ±(99.9%) 0.033 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0.007, 0.018), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1563.072 ±(99.9%) 709.267 MB/sec [Average]
[info]   (min, avg, max) = (1361.278, 1563.072, 1702.462), stdev = 184.194
[info]   CI (99.9%): [853.805, 2272.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   487.170 ±(99.9%) 222.126 B/op [Average]
[info]   (min, avg, max) = (424.006, 487.170, 531.974), stdev = 57.685
[info]   CI (99.9%): [265.045, 709.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.207 ±(99.9%) 1.783 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.207, 1.035), stdev = 0.463
[info]   CI (99.9%): [≈ 0, 1.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 13.000), stdev = 4.278
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson
[info] # Run progress: 75.15% complete, ETA 00:17:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 100158.080 ops/s
[info] # Warmup Iteration   2: 300942.608 ops/s
[info] # Warmup Iteration   3: 307961.512 ops/s
[info] Iteration   1: 309028.294 ops/s
[info]                  ·gc.alloc.rate:                                  1783.047 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9080.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.021 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.105 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1688.827 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8600.197 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     5.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                27.141 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        17.000 ms
[info] Iteration   2: 312593.827 ops/s
[info]                  ·gc.alloc.rate:                                  1803.472 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9080.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.040 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.202 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.996 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8569.099 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 314026.268 ops/s
[info]                  ·gc.alloc.rate:                                  1811.700 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9080.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.431 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10236.394 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 315526.753 ops/s
[info]                  ·gc.alloc.rate:            1820.596 MB/sec
[info]                  ·gc.alloc.rate.norm:       9080.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1702.247 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8489.754 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 303881.683 ops/s
[info]                  ·gc.alloc.rate:                                  1753.423 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9080.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.269 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8815.100 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson":
[info]   311011.365 ±(99.9%) 17932.128 ops/s [Average]
[info]   (min, avg, max) = (303881.683, 311011.365, 315526.753), stdev = 4656.917
[info]   CI (99.9%): [293079.237, 328943.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1794.448 ±(99.9%) 103.248 MB/sec [Average]
[info]   (min, avg, max) = (1753.423, 1794.448, 1820.596), stdev = 26.813
[info]   CI (99.9%): [1691.200, 1897.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   9080.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9080.001, 9080.001, 9080.001), stdev = 0.001
[info]   CI (99.9%): [9080.001, 9080.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.013 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.040), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.065 ±(99.9%) 0.336 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.065, 0.202), stdev = 0.087
[info]   CI (99.9%): [≈ 0, 0.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1767.554 ±(99.9%) 592.112 MB/sec [Average]
[info]   (min, avg, max) = (1688.827, 1767.554, 2042.431), stdev = 153.770
[info]   CI (99.9%): [1175.442, 2359.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   8942.109 ±(99.9%) 2824.369 B/op [Average]
[info]   (min, avg, max) = (8489.754, 8942.109, 10236.394), stdev = 733.480
[info]   CI (99.9%): [6117.739, 11766.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 9.178 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 5.330), stdev = 2.383
[info]   CI (99.9%): [≈ 0, 10.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   5.428 ±(99.9%) 46.738 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.428, 27.141), stdev = 12.138
[info]   CI (99.9%): [≈ 0, 52.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.600, 17.000), stdev = 5.814
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala
[info] # Run progress: 75.45% complete, ETA 00:17:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2562122.537 ops/s
[info] # Warmup Iteration   2: 3088888.287 ops/s
[info] # Warmup Iteration   3: 3112175.942 ops/s
[info] Iteration   1: 3118852.406 ops/s
[info]                  ·gc.alloc.rate:            507.281 MB/sec
[info]                  ·gc.alloc.rate.norm:       256.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.047 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 170.091 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 3113367.430 ops/s
[info]                  ·gc.alloc.rate:            506.315 MB/sec
[info]                  ·gc.alloc.rate.norm:       256.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.673 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 340.113 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 3113410.241 ops/s
[info]                  ·gc.alloc.rate:            506.388 MB/sec
[info]                  ·gc.alloc.rate.norm:       256.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.380 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 170.054 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 3101469.385 ops/s
[info]                  ·gc.alloc.rate:            504.553 MB/sec
[info]                  ·gc.alloc.rate.norm:       256.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.896 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 341.414 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 3026812.410 ops/s
[info]                  ·gc.alloc.rate:            492.420 MB/sec
[info]                  ·gc.alloc.rate.norm:       256.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.468 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 174.923 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala":
[info]   3094782.374 ±(99.9%) 148342.282 ops/s [Average]
[info]   (min, avg, max) = (3026812.410, 3094782.374, 3118852.406), stdev = 38524.020
[info]   CI (99.9%): [2946440.092, 3243124.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   503.392 ±(99.9%) 23.922 MB/sec [Average]
[info]   (min, avg, max) = (492.420, 503.392, 507.281), stdev = 6.212
[info]   CI (99.9%): [479.470, 527.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   256.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (256.000, 256.000, 256.000), stdev = 0.001
[info]   CI (99.9%): [256.000, 256.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   471.093 ±(99.9%) 708.976 MB/sec [Average]
[info]   (min, avg, max) = (336.380, 471.093, 672.896), stdev = 184.119
[info]   CI (99.9%): [≈ 0, 1180.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   239.319 ±(99.9%) 356.677 B/op [Average]
[info]   (min, avg, max) = (170.054, 239.319, 341.414), stdev = 92.628
[info]   CI (99.9%): [≈ 0, 595.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 6.000), stdev = 1.643
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson
[info] # Run progress: 75.76% complete, ETA 00:17:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 68435.324 ops/s
[info] # Warmup Iteration   2: 342411.836 ops/s
[info] # Warmup Iteration   3: 350116.429 ops/s
[info] Iteration   1: 347580.282 ops/s
[info]                  ·gc.alloc.rate:                   1342.412 MB/sec
[info]                  ·gc.alloc.rate.norm:              6080.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1343.955 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        6086.990 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 6.033 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 342669.086 ops/s
[info]                  ·gc.alloc.rate:                   1323.593 MB/sec
[info]                  ·gc.alloc.rate.norm:              6080.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1347.410 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        6189.403 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      5.328 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 24.476 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   3: 355663.226 ops/s
[info]                  ·gc.alloc.rate:                                  1373.745 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6080.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.161 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.713 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.362 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6025.198 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 355649.964 ops/s
[info]                  ·gc.alloc.rate:            1374.070 MB/sec
[info]                  ·gc.alloc.rate.norm:       6080.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.734 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6025.418 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 355411.728 ops/s
[info]                  ·gc.alloc.rate:                                  1372.857 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6080.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.408 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6029.299 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson":
[info]   351394.857 ±(99.9%) 23035.592 ops/s [Average]
[info]   (min, avg, max) = (342669.086, 351394.857, 355663.226), stdev = 5982.270
[info]   CI (99.9%): [328359.265, 374430.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1357.335 ±(99.9%) 89.304 MB/sec [Average]
[info]   (min, avg, max) = (1323.593, 1357.335, 1374.070), stdev = 23.192
[info]   CI (99.9%): [1268.032, 1446.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   6080.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6080.001, 6080.001, 6080.001), stdev = 0.001
[info]   CI (99.9%): [6080.001, 6080.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.032 ±(99.9%) 0.277 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.032, 0.161), stdev = 0.072
[info]   CI (99.9%): [≈ 0, 0.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.143 ±(99.9%) 1.225 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.143, 0.713), stdev = 0.318
[info]   CI (99.9%): [≈ 0, 1.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1355.174 ±(99.9%) 33.698 MB/sec [Average]
[info]   (min, avg, max) = (1343.955, 1355.174, 1361.734), stdev = 8.751
[info]   CI (99.9%): [1321.475, 1388.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   6071.262 ±(99.9%) 273.566 B/op [Average]
[info]   (min, avg, max) = (6025.198, 6071.262, 6189.403), stdev = 71.044
[info]   CI (99.9%): [5797.696, 6344.827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.332 ±(99.9%) 8.884 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.332, 5.328), stdev = 2.307
[info]   CI (99.9%): [≈ 0, 10.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   6.102 ±(99.9%) 40.811 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.102, 24.476), stdev = 10.599
[info]   CI (99.9%): [≈ 0, 46.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.600, 18.000), stdev = 7.301
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce
[info] # Run progress: 76.06% complete, ETA 00:16:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4523862.689 ops/s
[info] # Warmup Iteration   2: 6441568.841 ops/s
[info] # Warmup Iteration   3: 6501679.228 ops/s
[info] Iteration   1: 6545574.941 ops/s
[info]                  ·gc.alloc.rate:            3959.234 MB/sec
[info]                  ·gc.alloc.rate.norm:       952.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      3744.292 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 900.317 B/op
[info]                  ·gc.count:                 11.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 6391354.984 ops/s
[info]                  ·gc.alloc.rate:                                  3865.131 MB/sec
[info]                  ·gc.alloc.rate.norm:                             952.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            4083.815 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1005.863 B/op
[info]                  ·gc.count:                                       12.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   3: 6511624.603 ops/s
[info]                  ·gc.alloc.rate:                                  3938.533 MB/sec
[info]                  ·gc.alloc.rate.norm:                             952.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3744.229 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       905.034 B/op
[info]                  ·gc.count:                                       11.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   4: 6493675.163 ops/s
[info]                  ·gc.alloc.rate:                                  3927.365 MB/sec
[info]                  ·gc.alloc.rate.norm:                             952.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            4083.925 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       989.950 B/op
[info]                  ·gc.count:                                       12.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   5: 6540572.713 ops/s
[info]                  ·gc.alloc.rate:            3956.289 MB/sec
[info]                  ·gc.alloc.rate.norm:       952.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      4084.769 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 982.916 B/op
[info]                  ·gc.count:                 12.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce":
[info]   6496560.481 ±(99.9%) 240803.392 ops/s [Average]
[info]   (min, avg, max) = (6391354.984, 6496560.481, 6545574.941), stdev = 62535.876
[info]   CI (99.9%): [6255757.089, 6737363.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.alloc.rate":
[info]   3929.310 ±(99.9%) 147.020 MB/sec [Average]
[info]   (min, avg, max) = (3865.131, 3929.310, 3959.234), stdev = 38.181
[info]   CI (99.9%): [3782.290, 4076.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   952.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (952.000, 952.000, 952.000), stdev = 0.001
[info]   CI (99.9%): [952.000, 952.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.003 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.002), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   3948.206 ±(99.9%) 716.898 MB/sec [Average]
[info]   (min, avg, max) = (3744.229, 3948.206, 4084.769), stdev = 186.176
[info]   CI (99.9%): [3231.307, 4665.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   956.816 ±(99.9%) 193.092 B/op [Average]
[info]   (min, avg, max) = (900.317, 956.816, 1005.863), stdev = 50.145
[info]   CI (99.9%): [763.724, 1149.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.count":
[info]   58.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (11.000, 11.600, 12.000), stdev = 0.548
[info]   CI (99.9%): [58.000, 58.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.time":
[info]   53.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 10.600, 12.000), stdev = 1.140
[info]   CI (99.9%): [53.000, 53.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala
[info] # Run progress: 76.36% complete, ETA 00:16:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2641725.549 ops/s
[info] # Warmup Iteration   2: 6840873.750 ops/s
[info] # Warmup Iteration   3: 7109797.829 ops/s
[info] Iteration   1: 6875687.854 ops/s
[info]                  ·gc.alloc.rate:                                  2585.928 MB/sec
[info]                  ·gc.alloc.rate.norm:                             592.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.768 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       623.327 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 7235866.986 ops/s
[info]                  ·gc.alloc.rate:                                  2721.151 MB/sec
[info]                  ·gc.alloc.rate.norm:                             592.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.592 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       592.313 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 7200322.179 ops/s
[info]                  ·gc.alloc.rate:                                  2707.873 MB/sec
[info]                  ·gc.alloc.rate.norm:                             592.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.669 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       595.235 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 7017525.694 ops/s
[info]                  ·gc.alloc.rate:                                  2639.067 MB/sec
[info]                  ·gc.alloc.rate.norm:                             592.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.577 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       610.733 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   5: 7051990.588 ops/s
[info]                  ·gc.alloc.rate:                                  2652.294 MB/sec
[info]                  ·gc.alloc.rate.norm:                             592.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.514 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       531.784 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala":
[info]   7076278.660 ±(99.9%) 561764.348 ops/s [Average]
[info]   (min, avg, max) = (6875687.854, 7076278.660, 7235866.986), stdev = 145888.417
[info]   CI (99.9%): [6514514.312, 7638043.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2661.262 ±(99.9%) 210.975 MB/sec [Average]
[info]   (min, avg, max) = (2585.928, 2661.262, 2721.151), stdev = 54.789
[info]   CI (99.9%): [2450.288, 2872.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   592.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (592.000, 592.000, 592.000), stdev = 0.001
[info]   CI (99.9%): [592.000, 592.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.003 ±(99.9%) 0.008 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.003, 0.005), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.001 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   2654.624 ±(99.9%) 585.737 MB/sec [Average]
[info]   (min, avg, max) = (2382.514, 2654.624, 2722.768), stdev = 152.114
[info]   CI (99.9%): [2068.887, 3240.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   590.679 ±(99.9%) 135.596 B/op [Average]
[info]   (min, avg, max) = (531.784, 590.679, 623.327), stdev = 35.214
[info]   CI (99.9%): [455.083, 726.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.count":
[info]   39.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.800, 8.000), stdev = 0.447
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.400, 8.000), stdev = 1.140
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala
[info] # Run progress: 76.67% complete, ETA 00:16:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 34965021.356 ops/s
[info] # Warmup Iteration   2: 34682311.444 ops/s
[info] # Warmup Iteration   3: 34783991.431 ops/s
[info] Iteration   1: 34790153.131 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 34817589.658 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 34650606.695 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 34810721.501 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 34808494.079 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala":
[info]   34775513.013 ±(99.9%) 271693.927 ops/s [Average]
[info]   (min, avg, max) = (34650606.695, 34775513.013, 34817589.658), stdev = 70558.050
[info]   CI (99.9%): [34503819.086, 35047206.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala
[info] # Run progress: 76.97% complete, ETA 00:16:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22258928.668 ops/s
[info] # Warmup Iteration   2: 26980022.967 ops/s
[info] # Warmup Iteration   3: 27304669.731 ops/s
[info] Iteration   1: 28296454.235 ops/s
[info]                  ·gc.alloc.rate:            1006.559 MB/sec
[info]                  ·gc.alloc.rate.norm:       56.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.908 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 56.242 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 28152357.867 ops/s
[info]                  ·gc.alloc.rate:            1001.457 MB/sec
[info]                  ·gc.alloc.rate.norm:       56.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.954 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 56.531 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 26961213.302 ops/s
[info]                  ·gc.alloc.rate:                   959.108 MB/sec
[info]                  ·gc.alloc.rate.norm:              56.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.983 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        39.352 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.194 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 24718096.443 ops/s
[info]                  ·gc.alloc.rate:                                  879.377 MB/sec
[info]                  ·gc.alloc.rate.norm:                             56.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.073 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.047 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       65.022 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 24691300.577 ops/s
[info]                  ·gc.alloc.rate:            878.716 MB/sec
[info]                  ·gc.alloc.rate.norm:       56.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.389 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 65.092 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala":
[info]   26563884.485 ±(99.9%) 6833243.994 ops/s [Average]
[info]   (min, avg, max) = (24691300.577, 26563884.485, 28296454.235), stdev = 1774571.765
[info]   CI (99.9%): [19730640.491, 33397128.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.alloc.rate":
[info]   945.044 ±(99.9%) 242.590 MB/sec [Average]
[info]   (min, avg, max) = (878.716, 945.044, 1006.559), stdev = 63.000
[info]   CI (99.9%): [702.453, 1187.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.alloc.rate.norm":
[info]   56.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (56.000, 56.000, 56.000), stdev = 0.001
[info]   CI (99.9%): [56.000, 56.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.015 ±(99.9%) 0.125 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.073), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.001 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.005), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.G1_Old_Gen":
[info]   947.656 ±(99.9%) 589.436 MB/sec [Average]
[info]   (min, avg, max) = (673.983, 947.656, 1021.389), stdev = 153.075
[info]   CI (99.9%): [358.221, 1537.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.G1_Old_Gen.norm":
[info]   56.448 ±(99.9%) 40.411 B/op [Average]
[info]   (min, avg, max) = (39.352, 56.448, 65.092), stdev = 10.495
[info]   CI (99.9%): [16.037, 96.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.039 ±(99.9%) 0.335 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.039, 0.194), stdev = 0.087
[info]   CI (99.9%): [≈ 0, 0.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.600, 9.000), stdev = 3.050
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson
[info] # Run progress: 77.27% complete, ETA 00:16:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3218452.850 ops/s
[info] # Warmup Iteration   2: 5566134.028 ops/s
[info] # Warmup Iteration   3: 5763348.618 ops/s
[info] Iteration   1: 5899566.339 ops/s
[info]                  ·gc.alloc.rate:                                  2848.138 MB/sec
[info]                  ·gc.alloc.rate.norm:                             760.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3062.848 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       817.293 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   2: 5894961.009 ops/s
[info]                  ·gc.alloc.rate:                                  2846.751 MB/sec
[info]                  ·gc.alloc.rate.norm:                             760.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.300 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       727.042 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 5970162.601 ops/s
[info]                  ·gc.alloc.rate:                                  2882.416 MB/sec
[info]                  ·gc.alloc.rate.norm:                             760.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.029 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       807.622 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 5996331.825 ops/s
[info]                  ·gc.alloc.rate:            2894.952 MB/sec
[info]                  ·gc.alloc.rate.norm:       760.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2722.575 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 714.747 B/op
[info]                  ·gc.count:                 8.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 5892734.556 ops/s
[info]                  ·gc.alloc.rate:                                  2844.971 MB/sec
[info]                  ·gc.alloc.rate.norm:                             760.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3062.958 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       818.232 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson":
[info]   5930751.266 ±(99.9%) 188177.697 ops/s [Average]
[info]   (min, avg, max) = (5892734.556, 5930751.266, 5996331.825), stdev = 48869.150
[info]   CI (99.9%): [5742573.569, 6118928.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2863.446 ±(99.9%) 90.447 MB/sec [Average]
[info]   (min, avg, max) = (2844.971, 2863.446, 2894.952), stdev = 23.489
[info]   CI (99.9%): [2772.999, 2953.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   760.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (760.000, 760.000, 760.000), stdev = 0.001
[info]   CI (99.9%): [760.000, 760.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.004 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2926.942 ±(99.9%) 717.104 MB/sec [Average]
[info]   (min, avg, max) = (2722.575, 2926.942, 3063.029), stdev = 186.230
[info]   CI (99.9%): [2209.838, 3644.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   776.987 ±(99.9%) 198.529 B/op [Average]
[info]   (min, avg, max) = (714.747, 776.987, 818.232), stdev = 51.557
[info]   CI (99.9%): [578.459, 975.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.count":
[info]   43.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.600, 9.000), stdev = 0.548
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce
[info] # Run progress: 77.58% complete, ETA 00:15:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12168067.685 ops/s
[info] # Warmup Iteration   2: 20461975.798 ops/s
[info] # Warmup Iteration   3: 20301510.642 ops/s
[info] Iteration   1: 20402710.360 ops/s
[info]                  ·gc.alloc.rate:                                  2281.756 MB/sec
[info]                  ·gc.alloc.rate.norm:                             176.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.030 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2383.030 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       183.812 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 20679343.295 ops/s
[info]                  ·gc.alloc.rate:                                  2312.340 MB/sec
[info]                  ·gc.alloc.rate.norm:                             176.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.597 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       181.348 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 20183790.634 ops/s
[info]                  ·gc.alloc.rate:                                  2256.780 MB/sec
[info]                  ·gc.alloc.rate.norm:                             176.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.096 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       159.257 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 19966106.364 ops/s
[info]                  ·gc.alloc.rate:                                  2233.246 MB/sec
[info]                  ·gc.alloc.rate.norm:                             176.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2383.317 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       187.827 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 19969686.540 ops/s
[info]                  ·gc.alloc.rate:            2232.931 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2042.250 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 160.971 B/op
[info]                  ·gc.count:                 6.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce":
[info]   20240327.438 ±(99.9%) 1172303.295 ops/s [Average]
[info]   (min, avg, max) = (19966106.364, 20240327.438, 20679343.295), stdev = 304443.443
[info]   CI (99.9%): [19068024.144, 21412630.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.alloc.rate":
[info]   2263.410 ±(99.9%) 130.774 MB/sec [Average]
[info]   (min, avg, max) = (2232.931, 2263.410, 2312.340), stdev = 33.961
[info]   CI (99.9%): [2132.637, 2394.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   176.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (176.000, 176.000, 176.000), stdev = 0.001
[info]   CI (99.9%): [176.000, 176.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.007 ±(99.9%) 0.051 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.030), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.001 ±(99.9%) 0.004 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.002), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   2246.658 ±(99.9%) 718.795 MB/sec [Average]
[info]   (min, avg, max) = (2042.096, 2246.658, 2383.317), stdev = 186.669
[info]   CI (99.9%): [1527.863, 2965.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   174.643 ±(99.9%) 51.894 B/op [Average]
[info]   (min, avg, max) = (159.257, 174.643, 187.827), stdev = 13.477
[info]   CI (99.9%): [122.749, 226.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.count":
[info]   33.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala
[info] # Run progress: 77.88% complete, ETA 00:15:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2790427.433 ops/s
[info] # Warmup Iteration   2: 10865530.502 ops/s
[info] # Warmup Iteration   3: 11024188.031 ops/s
[info] Iteration   1: 11047521.668 ops/s
[info]                  ·gc.alloc.rate:                                  2189.619 MB/sec
[info]                  ·gc.alloc.rate.norm:                             312.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.116 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2378.380 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       338.897 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                0.569 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   2: 11340295.760 ops/s
[info]                  ·gc.alloc.rate:            2247.921 MB/sec
[info]                  ·gc.alloc.rate.norm:       312.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2042.230 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 283.451 B/op
[info]                  ·gc.count:                 6.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 11276278.839 ops/s
[info]                  ·gc.alloc.rate:                                  2235.833 MB/sec
[info]                  ·gc.alloc.rate.norm:                             312.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2383.249 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       332.571 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 11251929.982 ops/s
[info]                  ·gc.alloc.rate:                                  2230.232 MB/sec
[info]                  ·gc.alloc.rate.norm:                             312.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.021 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       285.670 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 11233113.852 ops/s
[info]                  ·gc.alloc.rate:                                  2226.588 MB/sec
[info]                  ·gc.alloc.rate.norm:                             312.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.514 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       333.849 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala":
[info]   11229828.020 ±(99.9%) 422237.195 ops/s [Average]
[info]   (min, avg, max) = (11047521.668, 11229828.020, 11340295.760), stdev = 109653.659
[info]   CI (99.9%): [10807590.825, 11652065.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   2226.039 ±(99.9%) 84.342 MB/sec [Average]
[info]   (min, avg, max) = (2189.619, 2226.039, 2247.921), stdev = 21.903
[info]   CI (99.9%): [2141.697, 2310.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   312.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (312.000, 312.000, 312.000), stdev = 0.001
[info]   CI (99.9%): [312.000, 312.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.024 ±(99.9%) 0.198 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.116), stdev = 0.051
[info]   CI (99.9%): [≈ 0, 0.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.003 ±(99.9%) 0.028 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.017), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   2245.679 ±(99.9%) 715.554 MB/sec [Average]
[info]   (min, avg, max) = (2042.021, 2245.679, 2383.249), stdev = 185.827
[info]   CI (99.9%): [1530.124, 2961.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   314.888 ±(99.9%) 107.035 B/op [Average]
[info]   (min, avg, max) = (283.451, 314.888, 338.897), stdev = 27.797
[info]   CI (99.9%): [207.853, 421.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.114 ±(99.9%) 0.981 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.114, 0.569), stdev = 0.255
[info]   CI (99.9%): [≈ 0, 1.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.count":
[info]   33.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 10.000), stdev = 2.345
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala
[info] # Run progress: 78.18% complete, ETA 00:15:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28476808.077 ops/s
[info] # Warmup Iteration   2: 42591356.671 ops/s
[info] # Warmup Iteration   3: 44439780.609 ops/s
[info] Iteration   1: 44564181.728 ops/s
[info]                  ·gc.alloc.rate:                   906.132 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.485 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        23.784 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.024 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 43034019.991 ops/s
[info]                  ·gc.alloc.rate:                   874.706 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1010.223 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        36.958 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.024 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 44386459.379 ops/s
[info]                  ·gc.alloc.rate:            902.700 MB/sec
[info]                  ·gc.alloc.rate.norm:       32.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.478 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 35.785 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 38517769.800 ops/s
[info]                  ·gc.alloc.rate:                                  783.217 MB/sec
[info]                  ·gc.alloc.rate.norm:                             32.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.052 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            676.869 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       27.655 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                0.163 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 36254209.114 ops/s
[info]                  ·gc.alloc.rate:                                  737.096 MB/sec
[info]                  ·gc.alloc.rate.norm:                             32.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.100 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.768 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       29.555 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala":
[info]   41351328.002 ±(99.9%) 14456024.144 ops/s [Average]
[info]   (min, avg, max) = (36254209.114, 41351328.002, 44564181.728), stdev = 3754183.563
[info]   CI (99.9%): [26895303.858, 55807352.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   840.770 ±(99.9%) 294.012 MB/sec [Average]
[info]   (min, avg, max) = (737.096, 840.770, 906.132), stdev = 76.354
[info]   CI (99.9%): [546.758, 1134.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   32.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (32.000, 32.000, 32.000), stdev = 0.001
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.030 ±(99.9%) 0.173 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.100), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.001 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   810.165 ±(99.9%) 701.995 MB/sec [Average]
[info]   (min, avg, max) = (673.485, 810.165, 1010.223), stdev = 182.306
[info]   CI (99.9%): [108.169, 1512.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   30.747 ±(99.9%) 21.389 B/op [Average]
[info]   (min, avg, max) = (23.784, 30.747, 36.958), stdev = 5.555
[info]   CI (99.9%): [9.358, 52.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 6.439 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 3.997), stdev = 1.672
[info]   CI (99.9%): [≈ 0, 7.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.042 ±(99.9%) 0.265 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.163), stdev = 0.069
[info]   CI (99.9%): [≈ 0, 0.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.000, 9.000), stdev = 3.082
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 78.48% complete, ETA 00:15:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33663474.623 ops/s
[info] # Warmup Iteration   2: 46505820.298 ops/s
[info] # Warmup Iteration   3: 46910014.533 ops/s
[info] Iteration   1: 46756697.768 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 44763827.815 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 46839366.171 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 45366838.344 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 46896320.915 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc":
[info]   46124610.203 ±(99.9%) 3817722.231 ops/s [Average]
[info]   (min, avg, max) = (44763827.815, 46124610.203, 46896320.915), stdev = 991450.340
[info]   CI (99.9%): [42306887.971, 49942332.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala
[info] # Run progress: 78.79% complete, ETA 00:14:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 41113219.996 ops/s
[info] # Warmup Iteration   2: 39639589.727 ops/s
[info] # Warmup Iteration   3: 39525508.121 ops/s
[info] Iteration   1: 39782731.376 ops/s
[info]                  ·gc.alloc.rate:                                  2021.621 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.872 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       80.801 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 39630830.633 ops/s
[info]                  ·gc.alloc.rate:                                  2014.217 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.184 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       81.111 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 39934279.772 ops/s
[info]                  ·gc.alloc.rate:                                  2029.717 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.170 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       80.491 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 39985027.293 ops/s
[info]                  ·gc.alloc.rate:            2032.139 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2042.117 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 80.393 B/op
[info]                  ·gc.count:                 6.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 39631398.135 ops/s
[info]                  ·gc.alloc.rate:                                  2014.792 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.252 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       67.590 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala":
[info]   39792853.442 ±(99.9%) 636678.847 ops/s [Average]
[info]   (min, avg, max) = (39630830.633, 39792853.442, 39985027.293), stdev = 165343.475
[info]   CI (99.9%): [39156174.594, 40429532.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.alloc.rate":
[info]   2022.497 ±(99.9%) 31.857 MB/sec [Average]
[info]   (min, avg, max) = (2014.217, 2022.497, 2032.139), stdev = 8.273
[info]   CI (99.9%): [1990.640, 2054.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.alloc.rate.norm":
[info]   80.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (80.000, 80.000, 80.000), stdev = 0.001
[info]   CI (99.9%): [80.000, 80.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.007 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.G1_Old_Gen":
[info]   1974.119 ±(99.9%) 585.214 MB/sec [Average]
[info]   (min, avg, max) = (1702.252, 1974.119, 2042.184), stdev = 151.978
[info]   CI (99.9%): [1388.905, 2559.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.G1_Old_Gen.norm":
[info]   78.077 ±(99.9%) 22.600 B/op [Average]
[info]   (min, avg, max) = (67.590, 78.077, 81.111), stdev = 5.869
[info]   CI (99.9%): [55.477, 100.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 5.000), stdev = 0.894
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson
[info] # Run progress: 79.09% complete, ETA 00:14:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1285978.294 ops/s
[info] # Warmup Iteration   2: 2056765.108 ops/s
[info] # Warmup Iteration   3: 2133110.307 ops/s
[info] Iteration   1: 2132727.978 ops/s
[info]                  ·gc.alloc.rate:                                  1712.378 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1264.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.159 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.118 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1689.550 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1247.150 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                2.950 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   2: 2144702.721 ops/s
[info]                  ·gc.alloc.rate:                                  1722.653 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1264.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.010 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.183 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1248.980 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 2140624.723 ops/s
[info]                  ·gc.alloc.rate:                                  1718.924 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1264.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.732 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1251.358 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 2143156.713 ops/s
[info]                  ·gc.alloc.rate:                                  1721.323 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1264.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.090 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1249.877 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 2150930.190 ops/s
[info]                  ·gc.alloc.rate:                                  1727.504 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1264.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.036 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1245.365 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson":
[info]   2142428.465 ±(99.9%) 25493.971 ops/s [Average]
[info]   (min, avg, max) = (2132727.978, 2142428.465, 2150930.190), stdev = 6620.703
[info]   CI (99.9%): [2116934.495, 2167922.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1720.556 ±(99.9%) 21.337 MB/sec [Average]
[info]   (min, avg, max) = (1712.378, 1720.556, 1727.504), stdev = 5.541
[info]   CI (99.9%): [1699.220, 1741.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1264.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1264.000, 1264.000, 1264.000), stdev = 0.001
[info]   CI (99.9%): [1264.000, 1264.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.035 ±(99.9%) 0.268 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.035, 0.159), stdev = 0.070
[info]   CI (99.9%): [≈ 0, 0.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.026 ±(99.9%) 0.198 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.026, 0.118), stdev = 0.051
[info]   CI (99.9%): [≈ 0, 0.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1699.518 ±(99.9%) 21.467 MB/sec [Average]
[info]   (min, avg, max) = (1689.550, 1699.518, 1702.183), stdev = 5.575
[info]   CI (99.9%): [1678.050, 1720.985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   1248.546 ±(99.9%) 9.017 B/op [Average]
[info]   (min, avg, max) = (1245.365, 1248.546, 1251.358), stdev = 2.342
[info]   CI (99.9%): [1239.529, 1257.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   0.590 ±(99.9%) 5.079 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.590, 2.950), stdev = 1.319
[info]   CI (99.9%): [≈ 0, 5.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 12.000), stdev = 3.578
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce
[info] # Run progress: 79.39% complete, ETA 00:14:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 381522.262 ops/s
[info] # Warmup Iteration   2: 549088.308 ops/s
[info] # Warmup Iteration   3: 567564.935 ops/s
[info] Iteration   1: 560098.157 ops/s
[info]                  ·gc.alloc.rate:                                  2015.403 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5664.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.162 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.455 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.151 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5739.170 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 575148.927 ops/s
[info]                  ·gc.alloc.rate:                                  2069.296 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5664.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.836 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5588.837 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 571626.633 ops/s
[info]                  ·gc.alloc.rate:                                  2057.036 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5664.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.286 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5623.385 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 574338.472 ops/s
[info]                  ·gc.alloc.rate:                                  2067.380 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5664.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.829 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5596.738 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 567923.774 ops/s
[info]                  ·gc.alloc.rate:                                  2043.419 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5664.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.888 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5659.756 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce":
[info]   569827.192 ±(99.9%) 23595.024 ops/s [Average]
[info]   (min, avg, max) = (560098.157, 569827.192, 575148.927), stdev = 6127.553
[info]   CI (99.9%): [546232.169, 593422.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.alloc.rate":
[info]   2050.507 ±(99.9%) 85.301 MB/sec [Average]
[info]   (min, avg, max) = (2015.403, 2050.507, 2069.296), stdev = 22.152
[info]   CI (99.9%): [1965.206, 2135.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5664.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5664.001, 5664.001, 5664.001), stdev = 0.001
[info]   CI (99.9%): [5664.001, 5664.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.034 ±(99.9%) 0.275 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.034, 0.162), stdev = 0.071
[info]   CI (99.9%): [≈ 0, 0.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.097 ±(99.9%) 0.772 B/op [Average]
[info]   (min, avg, max) = (0.004, 0.097, 0.455), stdev = 0.200
[info]   CI (99.9%): [≈ 0, 0.869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2042.198 ±(99.9%) 1.535 MB/sec [Average]
[info]   (min, avg, max) = (2041.836, 2042.198, 2042.829), stdev = 0.399
[info]   CI (99.9%): [2040.663, 2043.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   5641.577 ±(99.9%) 235.629 B/op [Average]
[info]   (min, avg, max) = (5588.837, 5641.577, 5739.170), stdev = 61.192
[info]   CI (99.9%): [5405.948, 5877.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala
[info] # Run progress: 79.70% complete, ETA 00:14:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 194567.004 ops/s
[info] # Warmup Iteration   2: 569803.204 ops/s
[info] # Warmup Iteration   3: 554882.110 ops/s
[info] Iteration   1: 566713.061 ops/s
[info]                  ·gc.alloc.rate:            677.008 MB/sec
[info]                  ·gc.alloc.rate.norm:       1880.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.533 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1864.796 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 572456.410 ops/s
[info]                  ·gc.alloc.rate:            683.728 MB/sec
[info]                  ·gc.alloc.rate.norm:       1880.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.420 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1846.159 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 563660.494 ops/s
[info]                  ·gc.alloc.rate:            673.202 MB/sec
[info]                  ·gc.alloc.rate.norm:       1880.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.385 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1874.928 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 571435.509 ops/s
[info]                  ·gc.alloc.rate:            682.523 MB/sec
[info]                  ·gc.alloc.rate.norm:       1880.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.419 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1849.415 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 575393.293 ops/s
[info]                  ·gc.alloc.rate:            687.196 MB/sec
[info]                  ·gc.alloc.rate.norm:       1880.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.348 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1836.644 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala":
[info]   569931.753 ±(99.9%) 18076.740 ops/s [Average]
[info]   (min, avg, max) = (563660.494, 569931.753, 575393.293), stdev = 4694.472
[info]   CI (99.9%): [551855.014, 588008.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   680.731 ±(99.9%) 21.486 MB/sec [Average]
[info]   (min, avg, max) = (673.202, 680.731, 687.196), stdev = 5.580
[info]   CI (99.9%): [659.245, 702.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1880.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1880.001, 1880.001, 1880.001), stdev = 0.001
[info]   CI (99.9%): [1880.001, 1880.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   671.421 ±(99.9%) 0.266 MB/sec [Average]
[info]   (min, avg, max) = (671.348, 671.421, 671.533), stdev = 0.069
[info]   CI (99.9%): [671.155, 671.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1854.388 ±(99.9%) 58.952 B/op [Average]
[info]   (min, avg, max) = (1836.644, 1854.388, 1874.928), stdev = 15.310
[info]   CI (99.9%): [1795.436, 1913.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 9.400, 10.000), stdev = 0.548
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala
[info] # Run progress: 80.00% complete, ETA 00:14:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2992537.992 ops/s
[info] # Warmup Iteration   2: 3109380.301 ops/s
[info] # Warmup Iteration   3: 3156399.642 ops/s
[info] Iteration   1: 3165292.527 ops/s
[info]                  ·gc.alloc.rate:            1319.104 MB/sec
[info]                  ·gc.alloc.rate.norm:       656.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.002 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 670.372 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 3161241.246 ops/s
[info]                  ·gc.alloc.rate:                                  1317.788 MB/sec
[info]                  ·gc.alloc.rate.norm:                             656.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.111 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.055 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1358.406 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       676.220 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1.658 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 3165548.585 ops/s
[info]                  ·gc.alloc.rate:            1319.232 MB/sec
[info]                  ·gc.alloc.rate.norm:       656.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.390 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 676.963 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 3144879.712 ops/s
[info]                  ·gc.alloc.rate:                                  1310.688 MB/sec
[info]                  ·gc.alloc.rate.norm:                             656.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.117 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       511.070 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 3121252.993 ops/s
[info]                  ·gc.alloc.rate:            1300.779 MB/sec
[info]                  ·gc.alloc.rate.norm:       656.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.414 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 686.579 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala":
[info]   3151643.013 ±(99.9%) 73088.626 ops/s [Average]
[info]   (min, avg, max) = (3121252.993, 3151643.013, 3165548.585), stdev = 18980.884
[info]   CI (99.9%): [3078554.387, 3224731.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1313.518 ±(99.9%) 30.587 MB/sec [Average]
[info]   (min, avg, max) = (1300.779, 1313.518, 1319.232), stdev = 7.943
[info]   CI (99.9%): [1282.931, 1344.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   656.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (656.000, 656.000, 656.000), stdev = 0.001
[info]   CI (99.9%): [656.000, 656.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.023 ±(99.9%) 0.191 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.111), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.011 ±(99.9%) 0.095 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.055), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1290.066 ±(99.9%) 579.321 MB/sec [Average]
[info]   (min, avg, max) = (1021.117, 1290.066, 1361.414), stdev = 150.448
[info]   CI (99.9%): [710.746, 1869.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   644.241 ±(99.9%) 287.533 B/op [Average]
[info]   (min, avg, max) = (511.070, 644.241, 686.579), stdev = 74.671
[info]   CI (99.9%): [356.708, 931.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.332 ±(99.9%) 2.856 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.332, 1.658), stdev = 0.742
[info]   CI (99.9%): [≈ 0, 3.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.200, 12.000), stdev = 4.087
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson
[info] # Run progress: 80.30% complete, ETA 00:13:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 41342.102 ops/s
[info] # Warmup Iteration   2: 207532.471 ops/s
[info] # Warmup Iteration   3: 212104.088 ops/s
[info] Iteration   1: 214094.486 ops/s
[info]                  ·gc.alloc.rate:                   1498.203 MB/sec
[info]                  ·gc.alloc.rate.norm:              11016.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1680.964 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        12359.809 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 4.897 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         23.000 ms
[info] Iteration   2: 214309.248 ops/s
[info]                  ·gc.alloc.rate:                                  1500.044 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11016.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.049 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.361 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1356.930 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9965.006 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                34.244 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 215925.912 ops/s
[info]                  ·gc.alloc.rate:                                  1511.094 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11016.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.677 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12405.362 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 218514.806 ops/s
[info]                  ·gc.alloc.rate:            1529.164 MB/sec
[info]                  ·gc.alloc.rate.norm:       11016.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.313 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9806.816 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 217236.285 ops/s
[info]                  ·gc.alloc.rate:            1520.814 MB/sec
[info]                  ·gc.alloc.rate.norm:       11016.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.812 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9864.272 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson":
[info]   216016.147 ±(99.9%) 7292.489 ops/s [Average]
[info]   (min, avg, max) = (214094.486, 216016.147, 218514.806), stdev = 1893.836
[info]   CI (99.9%): [208723.658, 223308.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1511.864 ±(99.9%) 51.169 MB/sec [Average]
[info]   (min, avg, max) = (1498.203, 1511.864, 1529.164), stdev = 13.288
[info]   CI (99.9%): [1460.695, 1563.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   11016.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11016.002, 11016.002, 11016.002), stdev = 0.001
[info]   CI (99.9%): [11016.002, 11016.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.010 ±(99.9%) 0.084 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.049), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.075 ±(99.9%) 0.616 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.075, 0.361), stdev = 0.160
[info]   CI (99.9%): [≈ 0, 0.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1492.539 ±(99.9%) 699.350 MB/sec [Average]
[info]   (min, avg, max) = (1356.930, 1492.539, 1701.677), stdev = 181.619
[info]   CI (99.9%): [793.189, 2191.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   10880.253 ±(99.9%) 5285.773 B/op [Average]
[info]   (min, avg, max) = (9806.816, 10880.253, 12405.362), stdev = 1372.698
[info]   CI (99.9%): [5594.480, 16166.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.822 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.663), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   7.828 ±(99.9%) 57.445 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.828, 34.244), stdev = 14.918
[info]   CI (99.9%): [≈ 0, 65.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.400, 23.000), stdev = 8.385
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce
[info] # Run progress: 80.61% complete, ETA 00:13:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 531440.429 ops/s
[info] # Warmup Iteration   2: 779559.944 ops/s
[info] # Warmup Iteration   3: 795427.933 ops/s
[info] Iteration   1: 809089.470 ops/s
[info]                  ·gc.alloc.rate:                                  1813.439 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3528.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.083 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.161 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1695.096 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3297.767 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                6.479 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   2: 812289.232 ops/s
[info]                  ·gc.alloc.rate:                                  1821.139 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3528.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.289 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3297.758 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 808556.849 ops/s
[info]                  ·gc.alloc.rate:                                  1812.116 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3528.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.039 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3975.636 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 814247.445 ops/s
[info]                  ·gc.alloc.rate:                                  1824.985 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3528.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.734 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3289.736 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 818560.273 ops/s
[info]                  ·gc.alloc.rate:                                  1834.617 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3528.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.716 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3272.429 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce":
[info]   812548.654 ±(99.9%) 15758.642 ops/s [Average]
[info]   (min, avg, max) = (808556.849, 812548.654, 818560.273), stdev = 4092.469
[info]   CI (99.9%): [796790.012, 828307.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1821.259 ±(99.9%) 35.349 MB/sec [Average]
[info]   (min, avg, max) = (1812.116, 1821.259, 1834.617), stdev = 9.180
[info]   CI (99.9%): [1785.911, 1856.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3528.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3528.000, 3528.001, 3528.001), stdev = 0.001
[info]   CI (99.9%): [3528.000, 3528.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.018 ±(99.9%) 0.139 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.018, 0.083), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.035 ±(99.9%) 0.270 B/op [Average]
[info]   (min, avg, max) = (0.003, 0.035, 0.161), stdev = 0.070
[info]   CI (99.9%): [≈ 0, 0.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1768.575 ±(99.9%) 588.762 MB/sec [Average]
[info]   (min, avg, max) = (1695.096, 1768.575, 2042.039), stdev = 152.900
[info]   CI (99.9%): [1179.813, 2357.337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   3426.665 ±(99.9%) 1182.372 B/op [Average]
[info]   (min, avg, max) = (3272.429, 3426.665, 3975.636), stdev = 307.058
[info]   CI (99.9%): [2244.293, 4609.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   1.296 ±(99.9%) 11.157 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.296, 6.479), stdev = 2.897
[info]   CI (99.9%): [≈ 0, 12.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 10.000), stdev = 2.608
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala
[info] # Run progress: 80.91% complete, ETA 00:13:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_55ac30bf/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 537286.595 ops/s
[info] # Warmup Iteration   2: 1365214.300 ops/s
[info] # Warmup Iteration   3: 1343962.784 ops/s
[info] Iteration   1: 1344046.144 ops/s
[info]                  ·gc.alloc.rate:            806.242 MB/sec
[info]                  ·gc.alloc.rate.norm:       944.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.332 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1179.450 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   2: 1360221.853 ops/s
[info]                  ·gc.alloc.rate:            815.739 MB/sec
[info]                  ·gc.alloc.rate.norm:       944.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.365 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 776.926 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 1373958.111 ops/s
[info]                  ·gc.alloc.rate:            823.986 MB/sec
[info]                  ·gc.alloc.rate.norm:       944.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.065 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1153.745 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   4: 1364292.758 ops/s
[info]                  ·gc.alloc.rate:                   818.133 MB/sec
[info]                  ·gc.alloc.rate.norm:              944.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             671.329 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        774.611 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 4.611 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 1370871.047 ops/s
[info]                  ·gc.alloc.rate:                                  822.732 MB/sec
[info]                  ·gc.alloc.rate.norm:                             944.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.256 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.293 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.099 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1170.459 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                0.764 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala":
[info]   1362677.983 ±(99.9%) 45159.086 ops/s [Average]
[info]   (min, avg, max) = (1344046.144, 1362677.983, 1373958.111), stdev = 11727.671
[info]   CI (99.9%): [1317518.896, 1407837.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   817.366 ±(99.9%) 27.201 MB/sec [Average]
[info]   (min, avg, max) = (806.242, 817.366, 823.986), stdev = 7.064
[info]   CI (99.9%): [790.165, 844.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   944.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (944.000, 944.000, 944.000), stdev = 0.001
[info]   CI (99.9%): [944.000, 944.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.051 ±(99.9%) 0.440 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.051, 0.256), stdev = 0.114
[info]   CI (99.9%): [≈ 0, 0.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.059 ±(99.9%) 0.505 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.059, 0.293), stdev = 0.131
[info]   CI (99.9%): [≈ 0, 0.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   875.438 ±(99.9%) 717.695 MB/sec [Average]
[info]   (min, avg, max) = (671.329, 875.438, 1020.099), stdev = 186.383
[info]   CI (99.9%): [157.743, 1593.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1011.038 ±(99.9%) 827.775 B/op [Average]
[info]   (min, avg, max) = (774.611, 1011.038, 1179.450), stdev = 214.970
[info]   CI (99.9%): [183.264, 1838.813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.075 ±(99.9%) 7.717 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.075, 4.611), stdev = 2.004
[info]   CI (99.9%): [≈ 0, 8.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.time":
[info]   50.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 10.000, 14.000), stdev = 4.183
[info]   CI (99.9%): [50.000, 50.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala
[info] # Run progress: 81.21% complete, ETA 00:13:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5360689.279 ops/s
[info] # Warmup Iteration   2: 6490290.626 ops/s
[info] # Warmup Iteration   3: 6629967.247 ops/s
[info] Iteration   1: 6906369.560 ops/s
[info]                  ·gc.alloc.rate:            772.134 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.286 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 153.469 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 6884987.366 ops/s
[info]                  ·gc.alloc.rate:                   769.739 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.649 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        153.801 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.152 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 6819207.336 ops/s
[info]                  ·gc.alloc.rate:                   762.411 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.677 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        233.081 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.154 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 6675794.748 ops/s
[info]                  ·gc.alloc.rate:            746.517 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.456 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 158.775 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 6478567.243 ops/s
[info]                  ·gc.alloc.rate:                                  724.328 MB/sec
[info]                  ·gc.alloc.rate.norm:                             176.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.032 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            676.663 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       164.418 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                0.971 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala":
[info]   6752985.250 ±(99.9%) 685047.535 ops/s [Average]
[info]   (min, avg, max) = (6478567.243, 6752985.250, 6906369.560), stdev = 177904.669
[info]   CI (99.9%): [6067937.715, 7438032.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   755.026 ±(99.9%) 76.493 MB/sec [Average]
[info]   (min, avg, max) = (724.328, 755.026, 772.134), stdev = 19.865
[info]   CI (99.9%): [678.533, 831.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   176.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (176.000, 176.000, 176.000), stdev = 0.001
[info]   CI (99.9%): [176.000, 176.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.006 ±(99.9%) 0.056 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.032), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.002 ±(99.9%) 0.014 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.008), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   741.146 ±(99.9%) 578.064 MB/sec [Average]
[info]   (min, avg, max) = (672.649, 741.146, 1009.677), stdev = 150.121
[info]   CI (99.9%): [163.082, 1319.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   172.709 ±(99.9%) 131.083 B/op [Average]
[info]   (min, avg, max) = (153.469, 172.709, 233.081), stdev = 34.042
[info]   CI (99.9%): [41.626, 303.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 6.437 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 3.996), stdev = 1.672
[info]   CI (99.9%): [≈ 0, 7.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.255 ±(99.9%) 1.568 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.255, 0.971), stdev = 0.407
[info]   CI (99.9%): [≈ 0, 1.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.400, 9.000), stdev = 1.517
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson
[info] # Run progress: 81.52% complete, ETA 00:13:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 110753.892 ops/s
[info] # Warmup Iteration   2: 466276.724 ops/s
[info] # Warmup Iteration   3: 464286.223 ops/s
[info] Iteration   1: 458878.277 ops/s
[info]                  ·gc.alloc.rate:                   1569.751 MB/sec
[info]                  ·gc.alloc.rate.norm:              5384.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1680.007 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5762.160 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      5.329 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 18.278 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         22.000 ms
[info] Iteration   2: 475336.058 ops/s
[info]                  ·gc.alloc.rate:                                  1625.904 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5384.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.072 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.238 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.851 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5635.489 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 469681.151 ops/s
[info]                  ·gc.alloc.rate:            1606.993 MB/sec
[info]                  ·gc.alloc.rate.norm:       5384.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.836 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4562.636 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 460758.973 ops/s
[info]                  ·gc.alloc.rate:                                  1576.465 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5384.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.314 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5813.805 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 478761.441 ops/s
[info]                  ·gc.alloc.rate:                                  1638.142 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5384.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.346 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5595.016 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson":
[info]   468683.180 ±(99.9%) 33666.018 ops/s [Average]
[info]   (min, avg, max) = (458878.277, 468683.180, 478761.441), stdev = 8742.958
[info]   CI (99.9%): [435017.162, 502349.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1603.451 ±(99.9%) 115.264 MB/sec [Average]
[info]   (min, avg, max) = (1569.751, 1603.451, 1638.142), stdev = 29.934
[info]   CI (99.9%): [1488.187, 1718.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5384.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5384.001, 5384.001, 5384.001), stdev = 0.001
[info]   CI (99.9%): [5384.001, 5384.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.015 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.072), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.050 ±(99.9%) 0.405 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.238), stdev = 0.105
[info]   CI (99.9%): [≈ 0, 0.455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1629.671 ±(99.9%) 577.717 MB/sec [Average]
[info]   (min, avg, max) = (1361.836, 1629.671, 1702.346), stdev = 150.031
[info]   CI (99.9%): [1051.953, 2207.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   5473.821 ±(99.9%) 1991.392 B/op [Average]
[info]   (min, avg, max) = (4562.636, 5473.821, 5813.805), stdev = 517.158
[info]   CI (99.9%): [3482.429, 7465.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 9.177 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 5.329), stdev = 2.383
[info]   CI (99.9%): [≈ 0, 10.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   3.656 ±(99.9%) 31.476 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.656, 18.278), stdev = 8.174
[info]   CI (99.9%): [≈ 0, 35.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.800, 22.000), stdev = 8.012
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce
[info] # Run progress: 81.82% complete, ETA 00:12:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 336449.636 ops/s
[info] # Warmup Iteration   2: 578189.644 ops/s
[info] # Warmup Iteration   3: 578996.737 ops/s
[info] Iteration   1: 592574.709 ops/s
[info]                  ·gc.alloc.rate:                                  2050.850 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5448.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.113 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.301 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2038.667 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5415.637 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                8.846 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   2: 590534.931 ops/s
[info]                  ·gc.alloc.rate:                                  2044.439 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5448.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.645 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5443.219 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 595341.462 ops/s
[info]                  ·gc.alloc.rate:                                  2060.339 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5448.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.909 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5399.267 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 595627.058 ops/s
[info]                  ·gc.alloc.rate:                                  2061.570 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5448.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.138 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5396.647 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 594844.712 ops/s
[info]                  ·gc.alloc.rate:                                  2058.714 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5448.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.982 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5403.723 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce":
[info]   593784.574 ±(99.9%) 8384.880 ops/s [Average]
[info]   (min, avg, max) = (590534.931, 593784.574, 595627.058), stdev = 2177.527
[info]   CI (99.9%): [585399.694, 602169.455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.alloc.rate":
[info]   2055.182 ±(99.9%) 28.168 MB/sec [Average]
[info]   (min, avg, max) = (2044.439, 2055.182, 2061.570), stdev = 7.315
[info]   CI (99.9%): [2027.014, 2083.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5448.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5448.001, 5448.001, 5448.001), stdev = 0.001
[info]   CI (99.9%): [5448.001, 5448.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.025 ±(99.9%) 0.190 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.025, 0.113), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.066 ±(99.9%) 0.505 B/op [Average]
[info]   (min, avg, max) = (0.003, 0.066, 0.301), stdev = 0.131
[info]   CI (99.9%): [≈ 0, 0.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2041.468 ±(99.9%) 6.129 MB/sec [Average]
[info]   (min, avg, max) = (2038.667, 2041.468, 2042.645), stdev = 1.592
[info]   CI (99.9%): [2035.339, 2047.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   5411.699 ±(99.9%) 73.409 B/op [Average]
[info]   (min, avg, max) = (5396.647, 5411.699, 5443.219), stdev = 19.064
[info]   CI (99.9%): [5338.290, 5485.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   1.769 ±(99.9%) 15.234 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.769, 8.846), stdev = 3.956
[info]   CI (99.9%): [≈ 0, 17.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 8.000), stdev = 1.643
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala
[info] # Run progress: 82.12% complete, ETA 00:12:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 64767.591 ops/s
[info] # Warmup Iteration   2: 584413.569 ops/s
[info] # Warmup Iteration   3: 586670.477 ops/s
[info] Iteration   1: 587225.718 ops/s
[info]                  ·gc.alloc.rate:            907.197 MB/sec
[info]                  ·gc.alloc.rate.norm:       2432.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1006.969 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2699.469 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   2: 586980.025 ops/s
[info]                  ·gc.alloc.rate:            907.155 MB/sec
[info]                  ·gc.alloc.rate.norm:       2432.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.343 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2700.596 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   3: 593807.587 ops/s
[info]                  ·gc.alloc.rate:            917.474 MB/sec
[info]                  ·gc.alloc.rate.norm:       2432.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.385 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1779.677 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 594351.804 ops/s
[info]                  ·gc.alloc.rate:                   918.270 MB/sec
[info]                  ·gc.alloc.rate.norm:              2432.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1011.028 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2677.666 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 12.348 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   5: 594663.276 ops/s
[info]                  ·gc.alloc.rate:                                  919.077 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2432.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.252 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.668 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.388 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2702.729 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala":
[info]   591405.682 ±(99.9%) 15174.570 ops/s [Average]
[info]   (min, avg, max) = (586980.025, 591405.682, 594663.276), stdev = 3940.788
[info]   CI (99.9%): [576231.112, 606580.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   913.835 ±(99.9%) 23.508 MB/sec [Average]
[info]   (min, avg, max) = (907.155, 913.835, 919.077), stdev = 6.105
[info]   CI (99.9%): [890.327, 937.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2432.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2432.001, 2432.001, 2432.001), stdev = 0.001
[info]   CI (99.9%): [2432.001, 2432.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.050 ±(99.9%) 0.435 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.252), stdev = 0.113
[info]   CI (99.9%): [≈ 0, 0.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.134 ±(99.9%) 1.150 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.134, 0.668), stdev = 0.299
[info]   CI (99.9%): [≈ 0, 1.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   943.623 ±(99.9%) 586.441 MB/sec [Average]
[info]   (min, avg, max) = (671.385, 943.623, 1021.388), stdev = 152.297
[info]   CI (99.9%): [357.181, 1530.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   2512.027 ±(99.9%) 1576.922 B/op [Average]
[info]   (min, avg, max) = (1779.677, 2512.027, 2702.729), stdev = 409.522
[info]   CI (99.9%): [935.105, 4088.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   2.470 ±(99.9%) 21.263 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.470, 12.348), stdev = 5.522
[info]   CI (99.9%): [≈ 0, 23.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala:·gc.time":
[info]   52.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 10.400, 14.000), stdev = 4.615
[info]   CI (99.9%): [52.000, 52.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala
[info] # Run progress: 82.42% complete, ETA 00:12:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4315917.633 ops/s
[info] # Warmup Iteration   2: 4994499.283 ops/s
[info] # Warmup Iteration   3: 5144689.475 ops/s
[info] Iteration   1: 5126494.045 ops/s
[info]                  ·gc.alloc.rate:            1276.615 MB/sec
[info]                  ·gc.alloc.rate.norm:       392.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1347.952 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 413.905 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 5090079.713 ops/s
[info]                  ·gc.alloc.rate:                                  1267.891 MB/sec
[info]                  ·gc.alloc.rate.norm:                             392.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.109 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.034 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1355.076 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       418.956 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1.030 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 5083085.364 ops/s
[info]                  ·gc.alloc.rate:                                  1265.906 MB/sec
[info]                  ·gc.alloc.rate.norm:                             392.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.018 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.423 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       421.578 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 5084803.642 ops/s
[info]                  ·gc.alloc.rate:            1266.348 MB/sec
[info]                  ·gc.alloc.rate.norm:       392.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.092 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 316.081 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   5: 5082066.069 ops/s
[info]                  ·gc.alloc.rate:                                  1265.705 MB/sec
[info]                  ·gc.alloc.rate.norm:                             392.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.505 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       421.670 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala":
[info]   5093305.766 ±(99.9%) 72422.382 ops/s [Average]
[info]   (min, avg, max) = (5082066.069, 5093305.766, 5126494.045), stdev = 18807.863
[info]   CI (99.9%): [5020883.384, 5165728.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1268.493 ±(99.9%) 17.792 MB/sec [Average]
[info]   (min, avg, max) = (1265.705, 1268.493, 1276.615), stdev = 4.621
[info]   CI (99.9%): [1250.701, 1286.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   392.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (392.000, 392.000, 392.000), stdev = 0.001
[info]   CI (99.9%): [392.000, 392.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.026 ±(99.9%) 0.181 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.109), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.008 ±(99.9%) 0.056 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.034), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1289.410 ±(99.9%) 577.973 MB/sec [Average]
[info]   (min, avg, max) = (1021.092, 1289.410, 1361.505), stdev = 150.098
[info]   CI (99.9%): [711.437, 1867.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   398.438 ±(99.9%) 177.695 B/op [Average]
[info]   (min, avg, max) = (316.081, 398.438, 421.670), stdev = 46.147
[info]   CI (99.9%): [220.743, 576.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.206 ±(99.9%) 1.774 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.206, 1.030), stdev = 0.461
[info]   CI (99.9%): [≈ 0, 1.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.600, 12.000), stdev = 4.278
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson
[info] # Run progress: 82.73% complete, ETA 00:12:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 88885.820 ops/s
[info] # Warmup Iteration   2: 317935.968 ops/s
[info] # Warmup Iteration   3: 319546.944 ops/s
[info] Iteration   1: 319552.252 ops/s
[info]                  ·gc.alloc.rate:                   1667.865 MB/sec
[info]                  ·gc.alloc.rate.norm:              8216.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1683.697 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        8293.988 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      5.328 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 26.247 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         21.000 ms
[info] Iteration   2: 324559.335 ops/s
[info]                  ·gc.alloc.rate:                                  1694.112 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8216.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.066 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.321 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.793 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8253.248 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 329383.714 ops/s
[info]                  ·gc.alloc.rate:            1719.916 MB/sec
[info]                  ·gc.alloc.rate.norm:       8216.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1702.331 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8132.000 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 330066.591 ops/s
[info]                  ·gc.alloc.rate:                                  1722.657 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8216.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.605 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8115.594 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 326748.014 ops/s
[info]                  ·gc.alloc.rate:            1706.331 MB/sec
[info]                  ·gc.alloc.rate.norm:       8216.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1702.570 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8197.891 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson":
[info]   326061.981 ±(99.9%) 16356.850 ops/s [Average]
[info]   (min, avg, max) = (319552.252, 326061.981, 330066.591), stdev = 4247.822
[info]   CI (99.9%): [309705.132, 342418.831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1702.177 ±(99.9%) 85.968 MB/sec [Average]
[info]   (min, avg, max) = (1667.865, 1702.177, 1722.657), stdev = 22.326
[info]   CI (99.9%): [1616.209, 1788.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8216.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8216.001, 8216.001, 8216.001), stdev = 0.001
[info]   CI (99.9%): [8216.001, 8216.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.014 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.066), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.067 ±(99.9%) 0.549 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.321), stdev = 0.142
[info]   CI (99.9%): [≈ 0, 0.615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1698.399 ±(99.9%) 31.684 MB/sec [Average]
[info]   (min, avg, max) = (1683.697, 1698.399, 1702.570), stdev = 8.228
[info]   CI (99.9%): [1666.715, 1730.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   8198.544 ±(99.9%) 294.590 B/op [Average]
[info]   (min, avg, max) = (8115.594, 8198.544, 8293.988), stdev = 76.504
[info]   CI (99.9%): [7903.954, 8493.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 9.175 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 5.328), stdev = 2.383
[info]   CI (99.9%): [≈ 0, 10.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   5.249 ±(99.9%) 45.199 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.249, 26.247), stdev = 11.738
[info]   CI (99.9%): [≈ 0, 50.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.400, 21.000), stdev = 7.603
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce
[info] # Run progress: 83.03% complete, ETA 00:11:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 205451.834 ops/s
[info] # Warmup Iteration   2: 424730.104 ops/s
[info] # Warmup Iteration   3: 425970.628 ops/s
[info] Iteration   1: 429259.551 ops/s
[info]                  ·gc.alloc.rate:            1099.485 MB/sec
[info]                  ·gc.alloc.rate.norm:       4032.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.993 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3707.485 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 428460.143 ops/s
[info]                  ·gc.alloc.rate:            1097.454 MB/sec
[info]                  ·gc.alloc.rate.norm:       4032.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.056 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3714.580 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 425127.174 ops/s
[info]                  ·gc.alloc.rate:                                  1089.146 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4032.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.060 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.221 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1014.559 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3755.880 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                12.331 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   4: 427102.903 ops/s
[info]                  ·gc.alloc.rate:                                  1094.042 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4032.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.121 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.446 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.433 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5017.451 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 427610.201 ops/s
[info]                  ·gc.alloc.rate:                                  1095.361 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4032.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.111 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3758.688 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce":
[info]   427511.995 ±(99.9%) 6032.532 ops/s [Average]
[info]   (min, avg, max) = (425127.174, 427511.995, 429259.551), stdev = 1566.629
[info]   CI (99.9%): [421479.463, 433544.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1095.097 ±(99.9%) 15.086 MB/sec [Average]
[info]   (min, avg, max) = (1089.146, 1095.097, 1099.485), stdev = 3.918
[info]   CI (99.9%): [1080.011, 1110.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   4032.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4032.001, 4032.001, 4032.001), stdev = 0.001
[info]   CI (99.9%): [4032.001, 4032.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.037 ±(99.9%) 0.207 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.121), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.135 ±(99.9%) 0.763 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.135, 0.446), stdev = 0.198
[info]   CI (99.9%): [≈ 0, 0.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1083.830 ±(99.9%) 597.772 MB/sec [Average]
[info]   (min, avg, max) = (1010.993, 1083.830, 1361.433), stdev = 155.239
[info]   CI (99.9%): [486.059, 1681.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   3990.817 ±(99.9%) 2211.725 B/op [Average]
[info]   (min, avg, max) = (3707.485, 3990.817, 5017.451), stdev = 574.378
[info]   CI (99.9%): [1779.092, 6202.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   2.466 ±(99.9%) 21.234 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.466, 12.331), stdev = 5.514
[info]   CI (99.9%): [≈ 0, 23.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.800, 10.000), stdev = 3.633
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala
[info] # Run progress: 83.33% complete, ETA 00:11:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2656932.059 ops/s
[info] # Warmup Iteration   2: 3097072.894 ops/s
[info] # Warmup Iteration   3: 3161980.624 ops/s
[info] Iteration   1: 3173802.519 ops/s
[info]                  ·gc.alloc.rate:                   613.671 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.454 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        333.120 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.665 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.329 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 3085887.175 ops/s
[info]                  ·gc.alloc.rate:            596.179 MB/sec
[info]                  ·gc.alloc.rate.norm:       304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.476 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 171.574 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 3072967.638 ops/s
[info]                  ·gc.alloc.rate:            593.488 MB/sec
[info]                  ·gc.alloc.rate.norm:       304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.730 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 344.590 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 3078564.435 ops/s
[info]                  ·gc.alloc.rate:            594.571 MB/sec
[info]                  ·gc.alloc.rate.norm:       304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.735 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 343.965 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 3068345.694 ops/s
[info]                  ·gc.alloc.rate:            592.570 MB/sec
[info]                  ·gc.alloc.rate.norm:       304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.705 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 345.111 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala":
[info]   3095913.492 ±(99.9%) 169545.487 ops/s [Average]
[info]   (min, avg, max) = (3068345.694, 3095913.492, 3173802.519), stdev = 44030.424
[info]   CI (99.9%): [2926368.006, 3265458.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   598.096 ±(99.9%) 33.924 MB/sec [Average]
[info]   (min, avg, max) = (592.570, 598.096, 613.671), stdev = 8.810
[info]   CI (99.9%): [564.172, 632.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   304.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (304.000, 304.000, 304.000), stdev = 0.001
[info]   CI (99.9%): [304.000, 304.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   605.420 ±(99.9%) 578.922 MB/sec [Average]
[info]   (min, avg, max) = (336.476, 605.420, 672.735), stdev = 150.344
[info]   CI (99.9%): [26.498, 1184.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   307.672 ±(99.9%) 293.585 B/op [Average]
[info]   (min, avg, max) = (171.574, 307.672, 345.111), stdev = 76.243
[info]   CI (99.9%): [14.087, 601.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.145 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.665), stdev = 0.297
[info]   CI (99.9%): [≈ 0, 1.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.066 ±(99.9%) 0.567 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.066, 0.329), stdev = 0.147
[info]   CI (99.9%): [≈ 0, 0.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 7.000), stdev = 1.517
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson
[info] # Run progress: 83.64% complete, ETA 00:11:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 67137.616 ops/s
[info] # Warmup Iteration   2: 339738.208 ops/s
[info] # Warmup Iteration   3: 340766.577 ops/s
[info] Iteration   1: 342296.357 ops/s
[info]                  ·gc.alloc.rate:                   1247.761 MB/sec
[info]                  ·gc.alloc.rate.norm:              5736.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.778 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4637.386 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.063 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 333982.196 ops/s
[info]                  ·gc.alloc.rate:                   1216.904 MB/sec
[info]                  ·gc.alloc.rate.norm:              5736.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.284 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        6341.137 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 15.696 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   3: 344936.490 ops/s
[info]                  ·gc.alloc.rate:                                  1256.907 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5736.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.223 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1360.643 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6209.412 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                3.039 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 343984.166 ops/s
[info]                  ·gc.alloc.rate:                                  1253.961 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5736.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.428 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4672.326 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 342927.962 ops/s
[info]                  ·gc.alloc.rate:                                  1249.571 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5736.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.319 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6248.967 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson":
[info]   341625.434 ±(99.9%) 16904.777 ops/s [Average]
[info]   (min, avg, max) = (333982.196, 341625.434, 344936.490), stdev = 4390.117
[info]   CI (99.9%): [324720.657, 358530.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1245.021 ±(99.9%) 62.089 MB/sec [Average]
[info]   (min, avg, max) = (1216.904, 1245.021, 1256.907), stdev = 16.124
[info]   CI (99.9%): [1182.932, 1307.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5736.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5736.001, 5736.001, 5736.001), stdev = 0.001
[info]   CI (99.9%): [5736.001, 5736.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.045 ±(99.9%) 0.383 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.045, 0.223), stdev = 0.100
[info]   CI (99.9%): [≈ 0, 0.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.205 ±(99.9%) 1.750 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.205, 1.017), stdev = 0.454
[info]   CI (99.9%): [≈ 0, 1.954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1219.490 ±(99.9%) 719.081 MB/sec [Average]
[info]   (min, avg, max) = (1008.778, 1219.490, 1361.319), stdev = 186.743
[info]   CI (99.9%): [500.409, 1938.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   5621.845 ±(99.9%) 3404.415 B/op [Average]
[info]   (min, avg, max) = (4637.386, 5621.845, 6341.137), stdev = 884.116
[info]   CI (99.9%): [2217.430, 9026.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 5.318 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.330), stdev = 1.381
[info]   CI (99.9%): [≈ 0, 6.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   4.360 ±(99.9%) 25.099 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.360, 15.696), stdev = 6.518
[info]   CI (99.9%): [≈ 0, 29.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.600, 18.000), stdev = 6.986
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce
[info] # Run progress: 83.94% complete, ETA 00:11:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1079851.063 ops/s
[info] # Warmup Iteration   2: 1947720.264 ops/s
[info] # Warmup Iteration   3: 1954808.282 ops/s
[info] Iteration   1: 1980484.168 ops/s
[info]                  ·gc.alloc.rate:                                  2798.353 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2224.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.299 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2434.566 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 1979989.516 ops/s
[info]                  ·gc.alloc.rate:                                  2798.208 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2224.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.536 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2164.651 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 1950970.023 ops/s
[info]                  ·gc.alloc.rate:                                  2757.291 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2224.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.569 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2196.800 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 1957973.539 ops/s
[info]                  ·gc.alloc.rate:            2766.366 MB/sec
[info]                  ·gc.alloc.rate.norm:       2224.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2722.825 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2188.996 B/op
[info]                  ·gc.count:                 8.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 1957136.846 ops/s
[info]                  ·gc.alloc.rate:                                  2766.189 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2224.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.722 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2189.857 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce":
[info]   1965310.819 ±(99.9%) 53494.944 ops/s [Average]
[info]   (min, avg, max) = (1950970.023, 1965310.819, 1980484.168), stdev = 13892.467
[info]   CI (99.9%): [1911815.875, 2018805.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate":
[info]   2777.282 ±(99.9%) 75.155 MB/sec [Average]
[info]   (min, avg, max) = (2757.291, 2777.282, 2798.353), stdev = 19.517
[info]   CI (99.9%): [2702.127, 2852.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2224.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2224.000, 2224.000, 2224.000), stdev = 0.001
[info]   CI (99.9%): [2224.000, 2224.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.006 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.004), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.001 ±(99.9%) 0.005 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2791.390 ±(99.9%) 585.305 MB/sec [Average]
[info]   (min, avg, max) = (2722.825, 2791.390, 3063.299), stdev = 152.002
[info]   CI (99.9%): [2206.085, 3376.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2234.974 ±(99.9%) 432.187 B/op [Average]
[info]   (min, avg, max) = (2164.651, 2234.974, 2434.566), stdev = 112.238
[info]   CI (99.9%): [1802.787, 2667.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.count":
[info]   41.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.200, 9.000), stdev = 0.447
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala
[info] # Run progress: 84.24% complete, ETA 00:11:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30412.231 ops/s
[info] # Warmup Iteration   2: 265235.484 ops/s
[info] # Warmup Iteration   3: 294815.951 ops/s
[info] Iteration   1: 296969.267 ops/s
[info]                  ·gc.alloc.rate:                   561.424 MB/sec
[info]                  ·gc.alloc.rate.norm:              2976.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             671.363 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3558.767 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.531 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 298407.276 ops/s
[info]                  ·gc.alloc.rate:            564.172 MB/sec
[info]                  ·gc.alloc.rate.norm:       2976.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.362 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1774.306 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 294388.343 ops/s
[info]                  ·gc.alloc.rate:            556.639 MB/sec
[info]                  ·gc.alloc.rate.norm:       2976.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.806 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3597.076 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 296813.182 ops/s
[info]                  ·gc.alloc.rate:            561.181 MB/sec
[info]                  ·gc.alloc.rate.norm:       2976.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.759 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3567.714 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 297846.701 ops/s
[info]                  ·gc.alloc.rate:            563.183 MB/sec
[info]                  ·gc.alloc.rate.norm:       2976.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.404 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1777.647 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala":
[info]   296884.954 ±(99.9%) 5930.412 ops/s [Average]
[info]   (min, avg, max) = (294388.343, 296884.954, 298407.276), stdev = 1540.109
[info]   CI (99.9%): [290954.542, 302815.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   561.320 ±(99.9%) 11.152 MB/sec [Average]
[info]   (min, avg, max) = (556.639, 561.320, 564.172), stdev = 2.896
[info]   CI (99.9%): [550.168, 572.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2976.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2976.001, 2976.001, 2976.001), stdev = 0.001
[info]   CI (99.9%): [2976.001, 2976.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   537.939 ±(99.9%) 708.500 MB/sec [Average]
[info]   (min, avg, max) = (336.362, 537.939, 672.806), stdev = 183.995
[info]   CI (99.9%): [≈ 0, 1246.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   2855.102 ±(99.9%) 3793.674 B/op [Average]
[info]   (min, avg, max) = (1774.306, 2855.102, 3597.076), stdev = 985.205
[info]   CI (99.9%): [≈ 0, 6648.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.706 ±(99.9%) 6.080 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.706, 3.531), stdev = 1.579
[info]   CI (99.9%): [≈ 0, 6.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.000, 9.000), stdev = 2.739
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala
[info] # Run progress: 84.55% complete, ETA 00:10:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 666082.383 ops/s
[info] # Warmup Iteration   2: 706417.812 ops/s
[info] # Warmup Iteration   3: 717296.193 ops/s
[info] Iteration   1: 734237.120 ops/s
[info]                  ·gc.alloc.rate:                   552.246 MB/sec
[info]                  ·gc.alloc.rate.norm:              1184.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.998 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1445.034 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.428 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 732109.763 ops/s
[info]                  ·gc.alloc.rate:            550.646 MB/sec
[info]                  ·gc.alloc.rate.norm:       1184.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.662 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 726.041 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 721729.080 ops/s
[info]                  ·gc.alloc.rate:                   542.916 MB/sec
[info]                  ·gc.alloc.rate.norm:              1184.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.770 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1471.552 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.453 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 729940.303 ops/s
[info]                  ·gc.alloc.rate:            549.156 MB/sec
[info]                  ·gc.alloc.rate.norm:       1184.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.159 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1453.513 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 717575.061 ops/s
[info]                  ·gc.alloc.rate:            539.679 MB/sec
[info]                  ·gc.alloc.rate.norm:       1184.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.982 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 739.304 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala":
[info]   727118.265 ±(99.9%) 27477.056 ops/s [Average]
[info]   (min, avg, max) = (717575.061, 727118.265, 734237.120), stdev = 7135.704
[info]   CI (99.9%): [699641.209, 754595.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   546.928 ±(99.9%) 20.710 MB/sec [Average]
[info]   (min, avg, max) = (539.679, 546.928, 552.246), stdev = 5.378
[info]   CI (99.9%): [526.218, 567.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1184.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1184.001, 1184.001, 1184.001), stdev = 0.001
[info]   CI (99.9%): [1184.000, 1184.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   539.514 ±(99.9%) 710.736 MB/sec [Average]
[info]   (min, avg, max) = (336.982, 539.514, 674.770), stdev = 184.576
[info]   CI (99.9%): [≈ 0, 1250.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1167.089 ±(99.9%) 1527.586 B/op [Average]
[info]   (min, avg, max) = (726.041, 1167.089, 1471.552), stdev = 396.709
[info]   CI (99.9%): [≈ 0, 2694.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.576 ±(99.9%) 3.038 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.576, 1.453), stdev = 0.789
[info]   CI (99.9%): [≈ 0, 3.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 1.095
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless
[info] # Run progress: 84.85% complete, ETA 00:10:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3697464.078 ops/s
[info] # Warmup Iteration   2: 3973636.259 ops/s
[info] # Warmup Iteration   3: 3996902.485 ops/s
[info] Iteration   1: 4058147.189 ops/s
[info]                  ·gc.alloc.rate:            1299.301 MB/sec
[info]                  ·gc.alloc.rate.norm:       504.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.978 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 392.159 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 3886599.541 ops/s
[info]                  ·gc.alloc.rate:                                  1244.491 MB/sec
[info]                  ·gc.alloc.rate.norm:                             504.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.089 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.036 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1354.796 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       548.672 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1.349 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   3: 4033946.793 ops/s
[info]                  ·gc.alloc.rate:                                  1292.122 MB/sec
[info]                  ·gc.alloc.rate.norm:                             504.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.930 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       531.229 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 4034783.005 ops/s
[info]                  ·gc.alloc.rate:                                  1291.939 MB/sec
[info]                  ·gc.alloc.rate.norm:                             504.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.458 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       531.120 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 4018936.198 ops/s
[info]                  ·gc.alloc.rate:            1286.849 MB/sec
[info]                  ·gc.alloc.rate.norm:       504.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.403 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 533.199 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless":
[info]   4006482.545 ±(99.9%) 263645.864 ops/s [Average]
[info]   (min, avg, max) = (3886599.541, 4006482.545, 4058147.189), stdev = 68467.994
[info]   CI (99.9%): [3742836.681, 4270128.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate":
[info]   1282.940 ±(99.9%) 84.508 MB/sec [Average]
[info]   (min, avg, max) = (1244.491, 1282.940, 1299.301), stdev = 21.946
[info]   CI (99.9%): [1198.433, 1367.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm":
[info]   504.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (504.000, 504.000, 504.000), stdev = 0.001
[info]   CI (99.9%): [504.000, 504.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.020 ±(99.9%) 0.149 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.089), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.008 ±(99.9%) 0.060 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.036), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Old_Gen":
[info]   1290.113 ±(99.9%) 600.966 MB/sec [Average]
[info]   (min, avg, max) = (1010.978, 1290.113, 1361.930), stdev = 156.069
[info]   CI (99.9%): [689.147, 1891.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Old_Gen.norm":
[info]   507.276 ±(99.9%) 249.400 B/op [Average]
[info]   (min, avg, max) = (392.159, 507.276, 548.672), stdev = 64.768
[info]   CI (99.9%): [257.876, 756.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Survivor_Space.norm":
[info]   0.270 ±(99.9%) 2.323 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.270, 1.349), stdev = 0.603
[info]   CI (99.9%): [≈ 0, 2.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 10.000), stdev = 3.194
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump
[info] # Run progress: 85.15% complete, ETA 00:10:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6893474.828 ops/s
[info] # Warmup Iteration   2: 7719998.348 ops/s
[info] # Warmup Iteration   3: 8117329.774 ops/s
[info] Iteration   1: 8117074.603 ops/s
[info]                  ·gc.alloc.rate:                   660.028 MB/sec
[info]                  ·gc.alloc.rate.norm:              128.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.672 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        130.840 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.129 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 8050090.005 ops/s
[info]                  ·gc.alloc.rate:            654.587 MB/sec
[info]                  ·gc.alloc.rate.norm:       128.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.046 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 131.805 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 8071214.878 ops/s
[info]                  ·gc.alloc.rate:                   656.363 MB/sec
[info]                  ·gc.alloc.rate.norm:              128.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.759 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        131.588 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.130 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 7998467.076 ops/s
[info]                  ·gc.alloc.rate:            650.469 MB/sec
[info]                  ·gc.alloc.rate.norm:       128.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.796 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 132.787 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 7928468.962 ops/s
[info]                  ·gc.alloc.rate:            644.697 MB/sec
[info]                  ·gc.alloc.rate.norm:       128.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.009 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 133.820 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump":
[info]   8033063.105 ±(99.9%) 278608.291 ops/s [Average]
[info]   (min, avg, max) = (7928468.962, 8033063.105, 8117074.603), stdev = 72353.688
[info]   CI (99.9%): [7754454.814, 8311671.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate":
[info]   653.229 ±(99.9%) 22.642 MB/sec [Average]
[info]   (min, avg, max) = (644.697, 653.229, 660.028), stdev = 5.880
[info]   CI (99.9%): [630.586, 675.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm":
[info]   128.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (128.000, 128.000, 128.000), stdev = 0.001
[info]   CI (99.9%): [128.000, 128.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.G1_Old_Gen":
[info]   674.457 ±(99.9%) 1.518 MB/sec [Average]
[info]   (min, avg, max) = (674.009, 674.457, 674.796), stdev = 0.394
[info]   CI (99.9%): [672.938, 675.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.G1_Old_Gen.norm":
[info]   132.168 ±(99.9%) 4.451 B/op [Average]
[info]   (min, avg, max) = (130.840, 132.168, 133.820), stdev = 1.156
[info]   CI (99.9%): [127.717, 136.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.G1_Survivor_Space.norm":
[info]   0.052 ±(99.9%) 0.273 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.052, 0.130), stdev = 0.071
[info]   CI (99.9%): [≈ 0, 0.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson
[info] # Run progress: 85.45% complete, ETA 00:10:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16109.812 ops/s
[info] # Warmup Iteration   2: 168696.278 ops/s
[info] # Warmup Iteration   3: 181430.654 ops/s
[info] Iteration   1: 184963.486 ops/s
[info]                  ·gc.alloc.rate:                   1258.665 MB/sec
[info]                  ·gc.alloc.rate.norm:              10712.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1344.033 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        11438.537 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 5.668 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 180519.140 ops/s
[info]                  ·gc.alloc.rate:                   1228.783 MB/sec
[info]                  ·gc.alloc.rate.norm:              10712.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1007.988 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        8787.209 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 5.808 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   3: 181895.048 ops/s
[info]                  ·gc.alloc.rate:                                  1237.677 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10712.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.156 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.354 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1356.578 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11741.082 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                40.347 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   4: 183625.152 ops/s
[info]                  ·gc.alloc.rate:                                  1249.562 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10712.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.336 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11670.193 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 183835.044 ops/s
[info]                  ·gc.alloc.rate:            1250.997 MB/sec
[info]                  ·gc.alloc.rate.norm:       10712.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.018 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8742.743 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson":
[info]   182967.574 ±(99.9%) 6756.129 ops/s [Average]
[info]   (min, avg, max) = (180519.140, 182967.574, 184963.486), stdev = 1754.545
[info]   CI (99.9%): [176211.445, 189723.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1245.137 ±(99.9%) 45.563 MB/sec [Average]
[info]   (min, avg, max) = (1228.783, 1245.137, 1258.665), stdev = 11.833
[info]   CI (99.9%): [1199.574, 1290.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   10712.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10712.002, 10712.002, 10712.002), stdev = 0.001
[info]   CI (99.9%): [10712.002, 10712.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.032 ±(99.9%) 0.268 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.032, 0.156), stdev = 0.070
[info]   CI (99.9%): [≈ 0, 0.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.275 ±(99.9%) 2.322 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.275, 1.354), stdev = 0.603
[info]   CI (99.9%): [≈ 0, 2.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1218.191 ±(99.9%) 716.624 MB/sec [Average]
[info]   (min, avg, max) = (1007.988, 1218.191, 1361.336), stdev = 186.105
[info]   CI (99.9%): [501.567, 1934.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   10475.953 ±(99.9%) 6030.039 B/op [Average]
[info]   (min, avg, max) = (8742.743, 10475.953, 11741.082), stdev = 1565.982
[info]   CI (99.9%): [4445.914, 16505.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.199 ±(99.9%) 7.564 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.199, 4.662), stdev = 1.964
[info]   CI (99.9%): [≈ 0, 8.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   10.365 ±(99.9%) 65.479 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.365, 40.347), stdev = 17.005
[info]   CI (99.9%): [≈ 0, 75.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 9.000, 18.000), stdev = 6.557
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce
[info] # Run progress: 85.76% complete, ETA 00:10:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 432677.508 ops/s
[info] # Warmup Iteration   2: 648695.356 ops/s
[info] # Warmup Iteration   3: 666159.766 ops/s
[info] Iteration   1: 676279.745 ops/s
[info]                  ·gc.alloc.rate:                                  2575.127 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5992.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.582 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6337.437 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 675338.327 ops/s
[info]                  ·gc.alloc.rate:                                  2571.300 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5992.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.915 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5552.999 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 670493.020 ops/s
[info]                  ·gc.alloc.rate:                                  2552.335 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5992.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.678 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6391.906 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        14.000 ms
[info] Iteration   4: 669047.962 ops/s
[info]                  ·gc.alloc.rate:                                  2546.725 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5992.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.279 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5605.087 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 661579.647 ops/s
[info]                  ·gc.alloc.rate:                                  2518.374 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5992.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.783 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6478.355 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        13.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce":
[info]   670547.740 ±(99.9%) 22657.091 ops/s [Average]
[info]   (min, avg, max) = (661579.647, 670547.740, 676279.745), stdev = 5883.975
[info]   CI (99.9%): [647890.649, 693204.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.alloc.rate":
[info]   2552.772 ±(99.9%) 87.450 MB/sec [Average]
[info]   (min, avg, max) = (2518.374, 2552.772, 2575.127), stdev = 22.710
[info]   CI (99.9%): [2465.323, 2640.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5992.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5992.001, 5992.001, 5992.001), stdev = 0.001
[info]   CI (99.9%): [5992.001, 5992.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.004 ±(99.9%) 0.007 MB/sec [Average]
[info]   (min, avg, max) = (0.002, 0.004, 0.006), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.009 ±(99.9%) 0.015 B/op [Average]
[info]   (min, avg, max) = (0.004, 0.009, 0.015), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2586.847 ±(99.9%) 717.971 MB/sec [Average]
[info]   (min, avg, max) = (2382.279, 2586.847, 2723.582), stdev = 186.455
[info]   CI (99.9%): [1868.876, 3304.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   6073.157 ±(99.9%) 1749.062 B/op [Average]
[info]   (min, avg, max) = (5552.999, 6073.157, 6478.355), stdev = 454.226
[info]   CI (99.9%): [4324.095, 7822.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.count":
[info]   38.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.600, 8.000), stdev = 0.548
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 9.000, 14.000), stdev = 4.123
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala
[info] # Run progress: 86.06% complete, ETA 00:09:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2676698.513 ops/s
[info] # Warmup Iteration   2: 3208671.539 ops/s
[info] # Warmup Iteration   3: 3206163.800 ops/s
[info] Iteration   1: 3182152.697 ops/s
[info]                  ·gc.alloc.rate:                                  2053.784 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1016.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.075 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.037 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.938 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1010.140 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 3215724.552 ops/s
[info]                  ·gc.alloc.rate:                                  2075.834 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1016.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.362 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       999.618 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 3159570.087 ops/s
[info]                  ·gc.alloc.rate:            2039.395 MB/sec
[info]                  ·gc.alloc.rate.norm:       1016.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2042.180 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1017.387 B/op
[info]                  ·gc.count:                 6.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 3162051.481 ops/s
[info]                  ·gc.alloc.rate:                                  2041.919 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1016.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.997 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1016.537 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 3227792.073 ops/s
[info]                  ·gc.alloc.rate:                                  2083.423 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1016.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.141 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       995.868 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala":
[info]   3189458.178 ±(99.9%) 119574.817 ops/s [Average]
[info]   (min, avg, max) = (3159570.087, 3189458.178, 3227792.073), stdev = 31053.200
[info]   CI (99.9%): [3069883.361, 3309032.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2058.871 ±(99.9%) 76.605 MB/sec [Average]
[info]   (min, avg, max) = (2039.395, 2058.871, 2083.423), stdev = 19.894
[info]   CI (99.9%): [1982.266, 2135.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1016.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1016.000, 1016.000, 1016.000), stdev = 0.001
[info]   CI (99.9%): [1016.000, 1016.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.016 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.075), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.008 ±(99.9%) 0.063 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.037), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   2042.324 ±(99.9%) 1.562 MB/sec [Average]
[info]   (min, avg, max) = (2041.938, 2042.324, 2042.997), stdev = 0.406
[info]   CI (99.9%): [2040.761, 2043.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1007.910 ±(99.9%) 37.678 B/op [Average]
[info]   (min, avg, max) = (995.868, 1007.910, 1017.387), stdev = 9.785
[info]   CI (99.9%): [970.232, 1045.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson
[info] # Run progress: 86.36% complete, ETA 00:09:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 44909.047 ops/s
[info] # Warmup Iteration   2: 227395.825 ops/s
[info] # Warmup Iteration   3: 227368.046 ops/s
[info] Iteration   1: 227122.870 ops/s
[info]                  ·gc.alloc.rate:                   1625.029 MB/sec
[info]                  ·gc.alloc.rate.norm:              11264.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1680.164 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        11646.177 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      5.328 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 36.928 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         23.000 ms
[info] Iteration   2: 230954.016 ops/s
[info]                  ·gc.alloc.rate:                                  1653.245 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11264.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.051 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.348 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.316 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11598.338 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 230872.329 ops/s
[info]                  ·gc.alloc.rate:                                  1652.133 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11264.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.768 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11602.406 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 233465.514 ops/s
[info]                  ·gc.alloc.rate:                                  1671.139 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11264.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.259 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11473.761 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 233251.481 ops/s
[info]                  ·gc.alloc.rate:                                  1669.702 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11264.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.327 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11484.089 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson":
[info]   231133.242 ±(99.9%) 9837.945 ops/s [Average]
[info]   (min, avg, max) = (227122.870, 231133.242, 233465.514), stdev = 2554.883
[info]   CI (99.9%): [221295.297, 240971.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1654.249 ±(99.9%) 71.611 MB/sec [Average]
[info]   (min, avg, max) = (1625.029, 1654.249, 1671.139), stdev = 18.597
[info]   CI (99.9%): [1582.639, 1725.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   11264.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11264.002, 11264.002, 11264.002), stdev = 0.001
[info]   CI (99.9%): [11264.002, 11264.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.011 ±(99.9%) 0.086 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.051), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.076 ±(99.9%) 0.586 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.076, 0.348), stdev = 0.152
[info]   CI (99.9%): [≈ 0, 0.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1697.767 ±(99.9%) 37.901 MB/sec [Average]
[info]   (min, avg, max) = (1680.164, 1697.767, 1702.327), stdev = 9.843
[info]   CI (99.9%): [1659.865, 1735.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   11560.954 ±(99.9%) 297.583 B/op [Average]
[info]   (min, avg, max) = (11473.761, 11560.954, 11646.177), stdev = 77.281
[info]   CI (99.9%): [11263.371, 11858.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 9.174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 5.328), stdev = 2.383
[info]   CI (99.9%): [≈ 0, 10.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   7.386 ±(99.9%) 63.592 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.386, 36.928), stdev = 16.515
[info]   CI (99.9%): [≈ 0, 70.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 8.000, 23.000), stdev = 8.396
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce
[info] # Run progress: 86.67% complete, ETA 00:09:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 499137.078 ops/s
[info] # Warmup Iteration   2: 741160.193 ops/s
[info] # Warmup Iteration   3: 763854.231 ops/s
[info] Iteration   1: 759680.149 ops/s
[info]                  ·gc.alloc.rate:                                  1614.149 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3344.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.074 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.153 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1688.690 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3498.427 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                6.900 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        15.000 ms
[info] Iteration   2: 771965.253 ops/s
[info]                  ·gc.alloc.rate:                                  1640.229 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3344.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.075 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.152 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.052 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3470.042 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 768267.777 ops/s
[info]                  ·gc.alloc.rate:                                  1632.154 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3344.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.831 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3486.756 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 761845.914 ops/s
[info]                  ·gc.alloc.rate:                                  1618.528 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3344.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.451 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2812.860 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 746031.321 ops/s
[info]                  ·gc.alloc.rate:                                  1585.220 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3344.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.157 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3590.677 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce":
[info]   761558.083 ±(99.9%) 38410.969 ops/s [Average]
[info]   (min, avg, max) = (746031.321, 761558.083, 771965.253), stdev = 9975.207
[info]   CI (99.9%): [723147.114, 799969.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1618.056 ±(99.9%) 81.322 MB/sec [Average]
[info]   (min, avg, max) = (1585.220, 1618.056, 1640.229), stdev = 21.119
[info]   CI (99.9%): [1536.734, 1699.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3344.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3344.001, 3344.001, 3344.001), stdev = 0.001
[info]   CI (99.9%): [3344.000, 3344.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.031 ±(99.9%) 0.153 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.031, 0.075), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.063 ±(99.9%) 0.315 B/op [Average]
[info]   (min, avg, max) = (0.003, 0.063, 0.153), stdev = 0.082
[info]   CI (99.9%): [≈ 0, 0.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1631.236 ±(99.9%) 581.158 MB/sec [Average]
[info]   (min, avg, max) = (1361.451, 1631.236, 1702.157), stdev = 150.925
[info]   CI (99.9%): [1050.078, 2212.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   3371.752 ±(99.9%) 1216.496 B/op [Average]
[info]   (min, avg, max) = (2812.860, 3371.752, 3590.677), stdev = 315.920
[info]   CI (99.9%): [2155.256, 4588.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   1.380 ±(99.9%) 11.883 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.380, 6.900), stdev = 3.086
[info]   CI (99.9%): [≈ 0, 13.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 15.000), stdev = 5.050
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala
[info] # Run progress: 86.97% complete, ETA 00:09:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_55ac30bf/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 555563.180 ops/s
[info] # Warmup Iteration   2: 1323835.544 ops/s
[info] # Warmup Iteration   3: 1345691.478 ops/s
[info] Iteration   1: 1342318.361 ops/s
[info]                  ·gc.alloc.rate:                   668.761 MB/sec
[info]                  ·gc.alloc.rate.norm:              784.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             670.885 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        786.490 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.781 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 1337294.981 ops/s
[info]                  ·gc.alloc.rate:            666.188 MB/sec
[info]                  ·gc.alloc.rate.norm:       784.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.487 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 790.236 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 1339707.499 ops/s
[info]                  ·gc.alloc.rate:                   667.264 MB/sec
[info]                  ·gc.alloc.rate.norm:              784.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             670.702 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        788.041 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.783 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 1338920.542 ops/s
[info]                  ·gc.alloc.rate:                   667.081 MB/sec
[info]                  ·gc.alloc.rate.norm:              784.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             670.909 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        788.498 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.783 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 1344306.580 ops/s
[info]                  ·gc.alloc.rate:                   669.640 MB/sec
[info]                  ·gc.alloc.rate.norm:              784.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             670.788 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        785.345 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.780 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala":
[info]   1340509.592 ±(99.9%) 10752.698 ops/s [Average]
[info]   (min, avg, max) = (1337294.981, 1340509.592, 1344306.580), stdev = 2792.442
[info]   CI (99.9%): [1329756.894, 1351262.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   667.787 ±(99.9%) 5.346 MB/sec [Average]
[info]   (min, avg, max) = (666.188, 667.787, 669.640), stdev = 1.388
[info]   CI (99.9%): [662.441, 673.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   784.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (784.000, 784.000, 784.000), stdev = 0.001
[info]   CI (99.9%): [784.000, 784.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   670.954 ±(99.9%) 1.190 MB/sec [Average]
[info]   (min, avg, max) = (670.702, 670.954, 671.487), stdev = 0.309
[info]   CI (99.9%): [669.764, 672.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   787.722 ±(99.9%) 7.254 B/op [Average]
[info]   (min, avg, max) = (785.345, 787.722, 790.236), stdev = 1.884
[info]   CI (99.9%): [780.468, 794.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.533 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.533, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.625 ±(99.9%) 1.346 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.625, 0.783), stdev = 0.350
[info]   CI (99.9%): [≈ 0, 1.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 9.000, 9.000), stdev = 0.001
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala
[info] # Run progress: 87.27% complete, ETA 00:08:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3900767.584 ops/s
[info] # Warmup Iteration   2: 4431060.228 ops/s
[info] # Warmup Iteration   3: 4596293.518 ops/s
[info] Iteration   1: 4683997.967 ops/s
[info]                  ·gc.alloc.rate:            357.113 MB/sec
[info]                  ·gc.alloc.rate.norm:       120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.421 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 226.289 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 4673933.250 ops/s
[info]                  ·gc.alloc.rate:            356.273 MB/sec
[info]                  ·gc.alloc.rate.norm:       120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.311 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 113.276 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 4616336.188 ops/s
[info]                  ·gc.alloc.rate:            351.911 MB/sec
[info]                  ·gc.alloc.rate.norm:       120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.339 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 114.690 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 4633982.463 ops/s
[info]                  ·gc.alloc.rate:            353.260 MB/sec
[info]                  ·gc.alloc.rate.norm:       120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.342 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 114.253 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 4686302.346 ops/s
[info]                  ·gc.alloc.rate:            357.416 MB/sec
[info]                  ·gc.alloc.rate.norm:       120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.500 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 112.978 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala":
[info]   4658910.443 ±(99.9%) 122365.629 ops/s [Average]
[info]   (min, avg, max) = (4616336.188, 4658910.443, 4686302.346), stdev = 31777.965
[info]   CI (99.9%): [4536544.813, 4781276.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   355.195 ±(99.9%) 9.492 MB/sec [Average]
[info]   (min, avg, max) = (351.911, 355.195, 357.416), stdev = 2.465
[info]   CI (99.9%): [345.702, 364.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   120.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (120.000, 120.000, 120.000), stdev = 0.001
[info]   CI (99.9%): [120.000, 120.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   403.783 ±(99.9%) 580.418 MB/sec [Average]
[info]   (min, avg, max) = (336.311, 403.783, 673.421), stdev = 150.733
[info]   CI (99.9%): [≈ 0, 984.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   136.297 ±(99.9%) 193.732 B/op [Average]
[info]   (min, avg, max) = (112.978, 136.297, 226.289), stdev = 50.312
[info]   CI (99.9%): [≈ 0, 330.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 6.000), stdev = 1.342
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson
[info] # Run progress: 87.58% complete, ETA 00:08:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 112627.571 ops/s
[info] # Warmup Iteration   2: 456333.538 ops/s
[info] # Warmup Iteration   3: 466736.682 ops/s
[info] Iteration   1: 465290.044 ops/s
[info]                  ·gc.alloc.rate:                   1558.167 MB/sec
[info]                  ·gc.alloc.rate.norm:              5272.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1679.524 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5682.606 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 15.772 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         23.000 ms
[info] Iteration   2: 475725.974 ops/s
[info]                  ·gc.alloc.rate:                                  1594.052 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5272.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.084 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.277 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.376 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4502.473 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                2.204 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 476311.109 ops/s
[info]                  ·gc.alloc.rate:            1595.665 MB/sec
[info]                  ·gc.alloc.rate.norm:       5272.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1702.125 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5623.743 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 474744.020 ops/s
[info]                  ·gc.alloc.rate:                                  1590.182 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5272.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.904 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5642.397 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 477925.188 ops/s
[info]                  ·gc.alloc.rate:                                  1600.726 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5272.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.418 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4483.841 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson":
[info]   473999.267 ±(99.9%) 19267.096 ops/s [Average]
[info]   (min, avg, max) = (465290.044, 473999.267, 477925.188), stdev = 5003.604
[info]   CI (99.9%): [454732.171, 493266.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1587.758 ±(99.9%) 65.341 MB/sec [Average]
[info]   (min, avg, max) = (1558.167, 1587.758, 1600.726), stdev = 16.969
[info]   CI (99.9%): [1522.417, 1653.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5272.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5272.001, 5272.001, 5272.001), stdev = 0.001
[info]   CI (99.9%): [5272.001, 5272.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.017 ±(99.9%) 0.144 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.084), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.056 ±(99.9%) 0.476 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.056, 0.277), stdev = 0.124
[info]   CI (99.9%): [≈ 0, 0.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1561.270 ±(99.9%) 703.468 MB/sec [Average]
[info]   (min, avg, max) = (1361.376, 1561.270, 1702.125), stdev = 182.688
[info]   CI (99.9%): [857.801, 2264.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   5187.012 ±(99.9%) 2440.505 B/op [Average]
[info]   (min, avg, max) = (4483.841, 5187.012, 5682.606), stdev = 633.791
[info]   CI (99.9%): [2746.507, 7627.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.820 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.662), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   3.595 ±(99.9%) 26.469 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.595, 15.772), stdev = 6.874
[info]   CI (99.9%): [≈ 0, 30.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.600, 23.000), stdev = 8.620
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala
[info] # Run progress: 87.88% complete, ETA 00:08:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 51488.148 ops/s
[info] # Warmup Iteration   2: 565410.506 ops/s
[info] # Warmup Iteration   3: 585545.280 ops/s
[info] Iteration   1: 588577.802 ops/s
[info]                  ·gc.alloc.rate:            978.021 MB/sec
[info]                  ·gc.alloc.rate.norm:       2616.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.287 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1795.553 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 584583.284 ops/s
[info]                  ·gc.alloc.rate:            971.759 MB/sec
[info]                  ·gc.alloc.rate.norm:       2616.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.293 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2711.658 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   3: 589192.685 ops/s
[info]                  ·gc.alloc.rate:            979.171 MB/sec
[info]                  ·gc.alloc.rate.norm:       2616.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.036 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2690.445 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   4: 589975.893 ops/s
[info]                  ·gc.alloc.rate:                                  980.756 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2616.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.209 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.556 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1015.968 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2709.921 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                12.439 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   5: 582535.372 ops/s
[info]                  ·gc.alloc.rate:                                  968.341 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2616.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.047 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.127 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.239 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2758.904 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala":
[info]   586973.007 ±(99.9%) 12466.075 ops/s [Average]
[info]   (min, avg, max) = (582535.372, 586973.007, 589975.893), stdev = 3237.400
[info]   CI (99.9%): [574506.932, 599439.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   975.610 ±(99.9%) 20.434 MB/sec [Average]
[info]   (min, avg, max) = (968.341, 975.610, 980.756), stdev = 5.307
[info]   CI (99.9%): [955.176, 996.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2616.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2616.001, 2616.001, 2616.001), stdev = 0.001
[info]   CI (99.9%): [2616.001, 2616.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.051 ±(99.9%) 0.348 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.051, 0.209), stdev = 0.090
[info]   CI (99.9%): [≈ 0, 0.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.137 ±(99.9%) 0.928 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.137, 0.556), stdev = 0.241
[info]   CI (99.9%): [≈ 0, 1.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   944.565 ±(99.9%) 588.706 MB/sec [Average]
[info]   (min, avg, max) = (671.287, 944.565, 1021.239), stdev = 152.885
[info]   CI (99.9%): [355.859, 1533.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   2533.296 ±(99.9%) 1591.007 B/op [Average]
[info]   (min, avg, max) = (1795.553, 2533.296, 2758.904), stdev = 413.180
[info]   CI (99.9%): [942.289, 4124.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.031 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.663), stdev = 2.086
[info]   CI (99.9%): [≈ 0, 8.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   2.488 ±(99.9%) 21.421 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.488, 12.439), stdev = 5.563
[info]   CI (99.9%): [≈ 0, 23.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 9.400, 14.000), stdev = 4.775
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala
[info] # Run progress: 88.18% complete, ETA 00:08:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2593595.453 ops/s
[info] # Warmup Iteration   2: 3065788.508 ops/s
[info] # Warmup Iteration   3: 3163441.078 ops/s
[info] Iteration   1: 3037489.249 ops/s
[info]                  ·gc.alloc.rate:                   1436.131 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.484 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        698.594 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.726 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 3009513.953 ops/s
[info]                  ·gc.alloc.rate:                                  1422.573 MB/sec
[info]                  ·gc.alloc.rate.norm:                             744.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.100 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.052 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.495 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       712.057 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   3: 3082639.857 ops/s
[info]                  ·gc.alloc.rate:                                  1457.067 MB/sec
[info]                  ·gc.alloc.rate.norm:                             744.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.780 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       868.954 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 2992020.620 ops/s
[info]                  ·gc.alloc.rate:            1414.942 MB/sec
[info]                  ·gc.alloc.rate.norm:       744.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.115 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 716.223 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 3061553.696 ops/s
[info]                  ·gc.alloc.rate:                                  1447.051 MB/sec
[info]                  ·gc.alloc.rate.norm:                             744.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.384 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       699.954 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala":
[info]   3036643.475 ±(99.9%) 142319.088 ops/s [Average]
[info]   (min, avg, max) = (2992020.620, 3036643.475, 3082639.857), stdev = 36959.815
[info]   CI (99.9%): [2894324.387, 3178962.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1435.553 ±(99.9%) 66.380 MB/sec [Average]
[info]   (min, avg, max) = (1414.942, 1435.553, 1457.067), stdev = 17.239
[info]   CI (99.9%): [1369.173, 1501.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   744.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (744.000, 744.000, 744.000), stdev = 0.001
[info]   CI (99.9%): [744.000, 744.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.020 ±(99.9%) 0.171 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.100), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.011 ±(99.9%) 0.090 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.052), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1427.052 ±(99.9%) 591.783 MB/sec [Average]
[info]   (min, avg, max) = (1348.484, 1427.052, 1701.780), stdev = 153.684
[info]   CI (99.9%): [835.269, 2018.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   739.156 ±(99.9%) 280.925 B/op [Average]
[info]   (min, avg, max) = (698.594, 739.156, 868.954), stdev = 72.955
[info]   CI (99.9%): [458.231, 1020.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.737 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.345 ±(99.9%) 2.972 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.345, 1.726), stdev = 0.772
[info]   CI (99.9%): [≈ 0, 3.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 12.000), stdev = 3.834
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson
[info] # Run progress: 88.48% complete, ETA 00:08:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 82979.432 ops/s
[info] # Warmup Iteration   2: 262860.061 ops/s
[info] # Warmup Iteration   3: 265554.975 ops/s
[info] Iteration   1: 267294.198 ops/s
[info]                  ·gc.alloc.rate:                   1500.138 MB/sec
[info]                  ·gc.alloc.rate.norm:              8832.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1344.412 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        7915.172 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 7.845 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   2: 267991.061 ops/s
[info]                  ·gc.alloc.rate:                                  1503.569 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8832.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.044 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.258 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1696.930 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9967.809 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                23.472 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   3: 268822.634 ops/s
[info]                  ·gc.alloc.rate:            1508.307 MB/sec
[info]                  ·gc.alloc.rate.norm:       8832.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.388 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7971.708 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 264654.609 ops/s
[info]                  ·gc.alloc.rate:                                  1484.929 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8832.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.372 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8097.112 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 265360.874 ops/s
[info]                  ·gc.alloc.rate:            1488.970 MB/sec
[info]                  ·gc.alloc.rate.norm:       8832.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.781 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10094.314 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson":
[info]   266824.675 ±(99.9%) 6786.494 ops/s [Average]
[info]   (min, avg, max) = (264654.609, 266824.675, 268822.634), stdev = 1762.431
[info]   CI (99.9%): [260038.181, 273611.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1497.183 ±(99.9%) 38.064 MB/sec [Average]
[info]   (min, avg, max) = (1484.929, 1497.183, 1508.307), stdev = 9.885
[info]   CI (99.9%): [1459.118, 1535.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8832.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8832.002, 8832.002, 8832.002), stdev = 0.001
[info]   CI (99.9%): [8832.001, 8832.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.009 ±(99.9%) 0.075 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.044), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.055 ±(99.9%) 0.438 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.055, 0.258), stdev = 0.114
[info]   CI (99.9%): [≈ 0, 0.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1493.177 ±(99.9%) 725.269 MB/sec [Average]
[info]   (min, avg, max) = (1344.412, 1493.177, 1701.781), stdev = 188.350
[info]   CI (99.9%): [767.908, 2218.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   8809.223 ±(99.9%) 4305.857 B/op [Average]
[info]   (min, avg, max) = (7915.172, 8809.223, 10094.314), stdev = 1118.217
[info]   CI (99.9%): [4503.366, 13115.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 6.687 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   6.263 ±(99.9%) 39.285 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.263, 23.472), stdev = 10.202
[info]   CI (99.9%): [≈ 0, 45.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.600, 17.000), stdev = 5.983
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce
[info] # Run progress: 88.79% complete, ETA 00:07:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 210382.489 ops/s
[info] # Warmup Iteration   2: 425418.818 ops/s
[info] # Warmup Iteration   3: 425841.318 ops/s
[info] Iteration   1: 423535.583 ops/s
[info]                  ·gc.alloc.rate:            1045.082 MB/sec
[info]                  ·gc.alloc.rate.norm:       3880.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.130 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4993.971 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   2: 416851.527 ops/s
[info]                  ·gc.alloc.rate:            1027.411 MB/sec
[info]                  ·gc.alloc.rate.norm:       3880.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.981 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3817.952 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 414906.024 ops/s
[info]                  ·gc.alloc.rate:                                  1022.624 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3880.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.040 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.152 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1014.321 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3848.500 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                12.635 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   4: 418423.545 ops/s
[info]                  ·gc.alloc.rate:                                  1031.394 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3880.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.114 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.429 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.049 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3841.085 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 430455.075 ops/s
[info]                  ·gc.alloc.rate:            1061.394 MB/sec
[info]                  ·gc.alloc.rate.norm:       3880.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.411 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3733.841 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce":
[info]   420834.351 ±(99.9%) 24099.226 ops/s [Average]
[info]   (min, avg, max) = (414906.024, 420834.351, 430455.075), stdev = 6258.493
[info]   CI (99.9%): [396735.124, 444933.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1037.581 ±(99.9%) 60.540 MB/sec [Average]
[info]   (min, avg, max) = (1022.624, 1037.581, 1061.394), stdev = 15.722
[info]   CI (99.9%): [977.041, 1098.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3880.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3880.001, 3880.001, 3880.001), stdev = 0.001
[info]   CI (99.9%): [3880.001, 3880.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.031 ±(99.9%) 0.191 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.031, 0.114), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.116 ±(99.9%) 0.720 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.116, 0.429), stdev = 0.187
[info]   CI (99.9%): [≈ 0, 0.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1082.578 ±(99.9%) 565.423 MB/sec [Average]
[info]   (min, avg, max) = (1010.981, 1082.578, 1345.130), stdev = 146.838
[info]   CI (99.9%): [517.156, 1648.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   4047.070 ±(99.9%) 2045.820 B/op [Average]
[info]   (min, avg, max) = (3733.841, 4047.070, 4993.971), stdev = 531.293
[info]   CI (99.9%): [2001.249, 6092.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   2.527 ±(99.9%) 21.758 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.527, 12.635), stdev = 5.650
[info]   CI (99.9%): [≈ 0, 24.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.400, 14.000), stdev = 4.669
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala
[info] # Run progress: 89.09% complete, ETA 00:07:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2206423.652 ops/s
[info] # Warmup Iteration   2: 2683282.005 ops/s
[info] # Warmup Iteration   3: 2708019.019 ops/s
[info] Iteration   1: 2700303.026 ops/s
[info]                  ·gc.alloc.rate:                   548.924 MB/sec
[info]                  ·gc.alloc.rate.norm:              320.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.331 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        392.524 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.388 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 2709261.927 ops/s
[info]                  ·gc.alloc.rate:            550.963 MB/sec
[info]                  ·gc.alloc.rate.norm:       320.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.476 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 195.426 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 2696774.228 ops/s
[info]                  ·gc.alloc.rate:                   548.212 MB/sec
[info]                  ·gc.alloc.rate.norm:              320.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.693 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        392.662 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.389 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 2680391.596 ops/s
[info]                  ·gc.alloc.rate:                   545.058 MB/sec
[info]                  ·gc.alloc.rate.norm:              320.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.594 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        395.463 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.391 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 2704162.485 ops/s
[info]                  ·gc.alloc.rate:            549.734 MB/sec
[info]                  ·gc.alloc.rate.norm:       320.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.018 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 196.178 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala":
[info]   2698178.652 ±(99.9%) 42247.986 ops/s [Average]
[info]   (min, avg, max) = (2680391.596, 2698178.652, 2709261.927), stdev = 10971.668
[info]   CI (99.9%): [2655930.666, 2740426.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   548.578 ±(99.9%) 8.538 MB/sec [Average]
[info]   (min, avg, max) = (545.058, 548.578, 550.963), stdev = 2.217
[info]   CI (99.9%): [540.040, 557.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   320.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (320.000, 320.000, 320.000), stdev = 0.001
[info]   CI (99.9%): [320.000, 320.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   538.623 ±(99.9%) 709.622 MB/sec [Average]
[info]   (min, avg, max) = (336.476, 538.623, 673.594), stdev = 184.287
[info]   CI (99.9%): [≈ 0, 1248.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   314.451 ±(99.9%) 417.092 B/op [Average]
[info]   (min, avg, max) = (195.426, 314.451, 395.463), stdev = 108.317
[info]   CI (99.9%): [≈ 0, 731.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.400 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.400, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.234 ±(99.9%) 0.821 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.234, 0.391), stdev = 0.213
[info]   CI (99.9%): [≈ 0, 1.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 6.000), stdev = 1.643
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson
[info] # Run progress: 89.39% complete, ETA 00:07:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 80233.430 ops/s
[info] # Warmup Iteration   2: 346284.409 ops/s
[info] # Warmup Iteration   3: 353860.087 ops/s
[info] Iteration   1: 352768.858 ops/s
[info]                  ·gc.alloc.rate:                   1339.302 MB/sec
[info]                  ·gc.alloc.rate.norm:              5976.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1344.087 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5997.348 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.972 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 358559.252 ops/s
[info]                  ·gc.alloc.rate:                   1361.217 MB/sec
[info]                  ·gc.alloc.rate.norm:              5976.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.680 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5912.182 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 20.467 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   3: 358529.498 ops/s
[info]                  ·gc.alloc.rate:                                  1361.384 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5976.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.201 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.884 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.648 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5977.158 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 358810.601 ops/s
[info]                  ·gc.alloc.rate:                                  1362.168 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5976.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.365 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5972.478 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 364242.050 ops/s
[info]                  ·gc.alloc.rate:                                  1382.943 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5976.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.833 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7353.995 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson":
[info]   358582.052 ±(99.9%) 15627.675 ops/s [Average]
[info]   (min, avg, max) = (352768.858, 358582.052, 364242.050), stdev = 4058.458
[info]   CI (99.9%): [342954.376, 374209.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1361.403 ±(99.9%) 59.437 MB/sec [Average]
[info]   (min, avg, max) = (1339.302, 1361.403, 1382.943), stdev = 15.436
[info]   CI (99.9%): [1301.966, 1420.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5976.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5976.001, 5976.001, 5976.001), stdev = 0.001
[info]   CI (99.9%): [5976.001, 5976.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.041 ±(99.9%) 0.346 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.041, 0.201), stdev = 0.090
[info]   CI (99.9%): [≈ 0, 0.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.178 ±(99.9%) 1.519 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.178, 0.884), stdev = 0.395
[info]   CI (99.9%): [≈ 0, 1.697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1423.123 ±(99.9%) 600.759 MB/sec [Average]
[info]   (min, avg, max) = (1344.087, 1423.123, 1701.833), stdev = 156.015
[info]   CI (99.9%): [822.364, 2023.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   6242.632 ±(99.9%) 2395.419 B/op [Average]
[info]   (min, avg, max) = (5912.182, 6242.632, 7353.995), stdev = 622.083
[info]   CI (99.9%): [3847.213, 8638.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.821 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.662), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   4.688 ±(99.9%) 34.326 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.688, 20.467), stdev = 8.914
[info]   CI (99.9%): [≈ 0, 39.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.000, 18.000), stdev = 7.348
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce
[info] # Run progress: 89.70% complete, ETA 00:07:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 270599.304 ops/s
[info] # Warmup Iteration   2: 614470.384 ops/s
[info] # Warmup Iteration   3: 620230.071 ops/s
[info] Iteration   1: 620403.800 ops/s
[info]                  ·gc.alloc.rate:                                  1910.722 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4848.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.092 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.235 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2032.031 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5155.793 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                8.449 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        13.000 ms
[info] Iteration   2: 626141.946 ops/s
[info]                  ·gc.alloc.rate:                                  1928.288 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4848.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.964 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5133.799 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 629447.721 ops/s
[info]                  ·gc.alloc.rate:                                  1939.117 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4848.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.215 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4255.720 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 622529.709 ops/s
[info]                  ·gc.alloc.rate:                                  1917.552 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4848.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.310 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5163.416 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 614872.830 ops/s
[info]                  ·gc.alloc.rate:                                  1893.582 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4848.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.974 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5227.918 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce":
[info]   622679.201 ±(99.9%) 21434.523 ops/s [Average]
[info]   (min, avg, max) = (614872.830, 622679.201, 629447.721), stdev = 5566.478
[info]   CI (99.9%): [601244.678, 644113.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate":
[info]   1917.852 ±(99.9%) 66.724 MB/sec [Average]
[info]   (min, avg, max) = (1893.582, 1917.852, 1939.117), stdev = 17.328
[info]   CI (99.9%): [1851.128, 1984.576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4848.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4848.001, 4848.001, 4848.001), stdev = 0.001
[info]   CI (99.9%): [4848.001, 4848.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.020 ±(99.9%) 0.157 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.020, 0.092), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.050 ±(99.9%) 0.398 B/op [Average]
[info]   (min, avg, max) = (0.003, 0.050, 0.235), stdev = 0.103
[info]   CI (99.9%): [≈ 0, 0.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1972.099 ±(99.9%) 581.188 MB/sec [Average]
[info]   (min, avg, max) = (1702.215, 1972.099, 2042.310), stdev = 150.933
[info]   CI (99.9%): [1390.911, 2553.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   4987.329 ±(99.9%) 1580.612 B/op [Average]
[info]   (min, avg, max) = (4255.720, 4987.329, 5227.918), stdev = 410.480
[info]   CI (99.9%): [3406.717, 6567.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   1.690 ±(99.9%) 14.550 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.690, 8.449), stdev = 3.779
[info]   CI (99.9%): [≈ 0, 16.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 13.000), stdev = 3.937
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala
[info] # Run progress: 90.00% complete, ETA 00:07:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 330786.751 ops/s
[info] # Warmup Iteration   2: 1319956.847 ops/s
[info] # Warmup Iteration   3: 1341288.980 ops/s
[info] Iteration   1: 1336035.864 ops/s
[info]                  ·gc.alloc.rate:            1011.734 MB/sec
[info]                  ·gc.alloc.rate.norm:       1192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.029 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1188.813 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 1340956.199 ops/s
[info]                  ·gc.alloc.rate:                   1015.587 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.509 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1183.693 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.782 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   3: 1342656.889 ops/s
[info]                  ·gc.alloc.rate:                   1016.942 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.577 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1182.195 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 5.466 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   4: 1321593.114 ops/s
[info]                  ·gc.alloc.rate:                                  1000.883 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1192.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.217 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.258 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.143 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1216.128 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 1356972.427 ops/s
[info]                  ·gc.alloc.rate:                                  1027.934 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1192.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.382 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1184.403 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala":
[info]   1339642.898 ±(99.9%) 49083.510 ops/s [Average]
[info]   (min, avg, max) = (1321593.114, 1339642.898, 1356972.427), stdev = 12746.832
[info]   CI (99.9%): [1290559.389, 1388726.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1014.616 ±(99.9%) 37.561 MB/sec [Average]
[info]   (min, avg, max) = (1000.883, 1014.616, 1027.934), stdev = 9.755
[info]   CI (99.9%): [977.055, 1052.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1192.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1192.000, 1192.000, 1192.000), stdev = 0.001
[info]   CI (99.9%): [1192.000, 1192.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.044 ±(99.9%) 0.373 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.044, 0.217), stdev = 0.097
[info]   CI (99.9%): [≈ 0, 0.417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.052 ±(99.9%) 0.444 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.052, 0.258), stdev = 0.115
[info]   CI (99.9%): [≈ 0, 0.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1013.728 ±(99.9%) 26.498 MB/sec [Average]
[info]   (min, avg, max) = (1008.509, 1013.728, 1021.382), stdev = 6.881
[info]   CI (99.9%): [987.230, 1040.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1191.046 ±(99.9%) 54.817 B/op [Average]
[info]   (min, avg, max) = (1182.195, 1191.046, 1216.128), stdev = 14.236
[info]   CI (99.9%): [1136.230, 1245.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.823 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.663), stdev = 2.032
[info]   CI (99.9%): [≈ 0, 8.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.250 ±(99.9%) 9.169 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.250, 5.466), stdev = 2.381
[info]   CI (99.9%): [≈ 0, 10.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 9.000, 14.000), stdev = 5.958
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala
[info] # Run progress: 90.30% complete, ETA 00:06:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5838661.616 ops/s
[info] # Warmup Iteration   2: 6139903.048 ops/s
[info] # Warmup Iteration   3: 6398450.623 ops/s
[info] Iteration   1: 6385557.900 ops/s
[info]                  ·gc.alloc.rate:            194.709 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.671 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 83.243 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 6413174.509 ops/s
[info]                  ·gc.alloc.rate:      195.577 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 6387379.544 ops/s
[info]                  ·gc.alloc.rate:                   194.820 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             337.102 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        83.056 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.164 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 6326022.315 ops/s
[info]                  ·gc.alloc.rate:            192.941 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.765 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 84.030 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 6399107.197 ops/s
[info]                  ·gc.alloc.rate:      195.129 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala":
[info]   6382248.293 ±(99.9%) 128280.453 ops/s [Average]
[info]   (min, avg, max) = (6326022.315, 6382248.293, 6413174.509), stdev = 33314.026
[info]   CI (99.9%): [6253967.840, 6510528.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   194.635 ±(99.9%) 3.871 MB/sec [Average]
[info]   (min, avg, max) = (192.941, 194.635, 195.577), stdev = 1.005
[info]   CI (99.9%): [190.764, 198.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   202.508 ±(99.9%) 711.844 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 202.508, 337.765), stdev = 184.864
[info]   CI (99.9%): [≈ 0, 914.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   50.066 ±(99.9%) 175.994 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 50.066, 84.030), stdev = 45.705
[info]   CI (99.9%): [≈ 0, 226.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.033 ±(99.9%) 0.283 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.164), stdev = 0.073
[info]   CI (99.9%): [≈ 0, 0.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson
[info] # Run progress: 90.61% complete, ETA 00:06:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25796.749 ops/s
[info] # Warmup Iteration   2: 184461.810 ops/s
[info] # Warmup Iteration   3: 184026.285 ops/s
[info] Iteration   1: 184942.475 ops/s
[info]                  ·gc.alloc.rate:            1332.647 MB/sec
[info]                  ·gc.alloc.rate.norm:       11344.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.201 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11450.864 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   2: 184519.931 ops/s
[info]                  ·gc.alloc.rate:                   1329.897 MB/sec
[info]                  ·gc.alloc.rate.norm:              11344.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1347.507 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        11494.217 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 39.772 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   3: 186331.607 ops/s
[info]                  ·gc.alloc.rate:                                  1343.266 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11344.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.164 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.382 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.847 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11500.925 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 186605.561 ops/s
[info]                  ·gc.alloc.rate:            1344.758 MB/sec
[info]                  ·gc.alloc.rate.norm:       11344.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.366 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11484.101 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 186758.903 ops/s
[info]                  ·gc.alloc.rate:            1345.964 MB/sec
[info]                  ·gc.alloc.rate.norm:       11344.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.427 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11474.326 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson":
[info]   185831.695 ±(99.9%) 3955.089 ops/s [Average]
[info]   (min, avg, max) = (184519.931, 185831.695, 186758.903), stdev = 1027.124
[info]   CI (99.9%): [181876.607, 189786.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1339.306 ±(99.9%) 28.725 MB/sec [Average]
[info]   (min, avg, max) = (1329.897, 1339.306, 1345.964), stdev = 7.460
[info]   CI (99.9%): [1310.581, 1368.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   11344.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11344.002, 11344.002, 11344.002), stdev = 0.001
[info]   CI (99.9%): [11344.002, 11344.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.033 ±(99.9%) 0.282 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.164), stdev = 0.073
[info]   CI (99.9%): [≈ 0, 0.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.276 ±(99.9%) 2.379 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.276, 1.382), stdev = 0.618
[info]   CI (99.9%): [≈ 0, 2.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1355.470 ±(99.9%) 32.204 MB/sec [Average]
[info]   (min, avg, max) = (1345.201, 1355.470, 1361.847), stdev = 8.363
[info]   CI (99.9%): [1323.266, 1387.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   11480.887 ±(99.9%) 75.407 B/op [Average]
[info]   (min, avg, max) = (11450.864, 11480.887, 11500.925), stdev = 19.583
[info]   CI (99.9%): [11405.479, 11556.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.663), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   7.954 ±(99.9%) 68.490 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.954, 39.772), stdev = 17.787
[info]   CI (99.9%): [≈ 0, 76.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.600, 18.000), stdev = 7.701
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce
[info] # Run progress: 90.91% complete, ETA 00:06:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 401068.485 ops/s
[info] # Warmup Iteration   2: 842487.033 ops/s
[info] # Warmup Iteration   3: 835921.410 ops/s
[info] Iteration   1: 843600.907 ops/s
[info]                  ·gc.alloc.rate:            1294.705 MB/sec
[info]                  ·gc.alloc.rate.norm:       2416.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1347.959 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2515.375 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 840954.652 ops/s
[info]                  ·gc.alloc.rate:                                  1290.613 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2416.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.064 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.120 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1351.286 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2529.579 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                6.234 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   3: 836033.154 ops/s
[info]                  ·gc.alloc.rate:                                  1283.162 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2416.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.101 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.190 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.397 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2563.305 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 858399.993 ops/s
[info]                  ·gc.alloc.rate:                                  1318.017 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2416.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.419 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1872.320 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 857534.014 ops/s
[info]                  ·gc.alloc.rate:            1316.289 MB/sec
[info]                  ·gc.alloc.rate.norm:       2416.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.423 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2498.842 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce":
[info]   847304.544 ±(99.9%) 38929.292 ops/s [Average]
[info]   (min, avg, max) = (836033.154, 847304.544, 858399.993), stdev = 10109.814
[info]   CI (99.9%): [808375.252, 886233.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1300.557 ±(99.9%) 60.520 MB/sec [Average]
[info]   (min, avg, max) = (1283.162, 1300.557, 1318.017), stdev = 15.717
[info]   CI (99.9%): [1240.038, 1361.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2416.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2416.000, 2416.000, 2416.001), stdev = 0.001
[info]   CI (99.9%): [2416.000, 2416.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.033 ±(99.9%) 0.180 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.101), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.062 ±(99.9%) 0.339 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.190), stdev = 0.088
[info]   CI (99.9%): [≈ 0, 0.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1288.697 ±(99.9%) 575.801 MB/sec [Average]
[info]   (min, avg, max) = (1021.419, 1288.697, 1361.423), stdev = 149.534
[info]   CI (99.9%): [712.896, 1864.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2395.884 ±(99.9%) 1130.710 B/op [Average]
[info]   (min, avg, max) = (1872.320, 2395.884, 2563.305), stdev = 293.642
[info]   CI (99.9%): [1265.174, 3526.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   1.247 ±(99.9%) 10.735 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.247, 6.234), stdev = 2.788
[info]   CI (99.9%): [≈ 0, 11.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.400, 13.000), stdev = 5.177
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala
[info] # Run progress: 91.21% complete, ETA 00:06:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_55ac30bf/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 609698.973 ops/s
[info] # Warmup Iteration   2: 2099188.318 ops/s
[info] # Warmup Iteration   3: 2050234.297 ops/s
[info] Iteration   1: 2113718.114 ops/s
[info]                  ·gc.alloc.rate:                   870.206 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1007.139 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        749.968 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.496 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 2051667.997 ops/s
[info]                  ·gc.alloc.rate:            845.493 MB/sec
[info]                  ·gc.alloc.rate.norm:       648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1006.594 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 771.470 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   3: 2108178.168 ops/s
[info]                  ·gc.alloc.rate:            867.881 MB/sec
[info]                  ·gc.alloc.rate.norm:       648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.376 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 501.281 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 2098073.850 ops/s
[info]                  ·gc.alloc.rate:                   863.712 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1011.055 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        758.545 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.498 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   5: 2084853.439 ops/s
[info]                  ·gc.alloc.rate:                                  858.296 MB/sec
[info]                  ·gc.alloc.rate.norm:                             648.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.121 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.091 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.717 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       513.931 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala":
[info]   2091298.314 ±(99.9%) 95212.637 ops/s [Average]
[info]   (min, avg, max) = (2051667.997, 2091298.314, 2113718.114), stdev = 24726.420
[info]   CI (99.9%): [1996085.676, 2186510.951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   861.117 ±(99.9%) 37.882 MB/sec [Average]
[info]   (min, avg, max) = (845.493, 861.117, 870.206), stdev = 9.838
[info]   CI (99.9%): [823.235, 899.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   648.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (648.000, 648.000, 648.000), stdev = 0.001
[info]   CI (99.9%): [648.000, 648.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.024 ±(99.9%) 0.208 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.121), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.018 ±(99.9%) 0.157 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.091), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   875.376 ±(99.9%) 700.818 MB/sec [Average]
[info]   (min, avg, max) = (671.376, 875.376, 1011.055), stdev = 182.000
[info]   CI (99.9%): [174.558, 1576.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   659.039 ±(99.9%) 533.402 B/op [Average]
[info]   (min, avg, max) = (501.281, 659.039, 771.470), stdev = 138.523
[info]   CI (99.9%): [125.637, 1192.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.821 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.662), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.799 ±(99.9%) 5.869 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.498), stdev = 1.524
[info]   CI (99.9%): [≈ 0, 6.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 9.400, 13.000), stdev = 4.615
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala
[info] # Run progress: 91.52% complete, ETA 00:05:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3819049.437 ops/s
[info] # Warmup Iteration   2: 5544733.820 ops/s
[info] # Warmup Iteration   3: 5679232.076 ops/s
[info] Iteration   1: 5711861.792 ops/s
[info]                  ·gc.alloc.rate:                   638.596 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             336.315 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        92.690 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.184 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 5683061.067 ops/s
[info]                  ·gc.alloc.rate:            635.380 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.983 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 186.693 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 5685154.435 ops/s
[info]                  ·gc.alloc.rate:            635.657 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.696 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 186.255 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 5684077.128 ops/s
[info]                  ·gc.alloc.rate:                   635.563 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.390 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        186.475 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.184 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 5694070.802 ops/s
[info]                  ·gc.alloc.rate:            636.820 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.538 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 186.148 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala":
[info]   5691645.045 ±(99.9%) 46674.158 ops/s [Average]
[info]   (min, avg, max) = (5683061.067, 5691645.045, 5711861.792), stdev = 12121.131
[info]   CI (99.9%): [5644970.886, 5738319.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   636.403 ±(99.9%) 5.198 MB/sec [Average]
[info]   (min, avg, max) = (635.380, 636.403, 638.596), stdev = 1.350
[info]   CI (99.9%): [631.205, 641.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   176.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (176.000, 176.000, 176.000), stdev = 0.001
[info]   CI (99.9%): [176.000, 176.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   605.984 ±(99.9%) 580.487 MB/sec [Average]
[info]   (min, avg, max) = (336.315, 605.984, 673.983), stdev = 150.751
[info]   CI (99.9%): [25.498, 1186.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   167.652 ±(99.9%) 161.364 B/op [Average]
[info]   (min, avg, max) = (92.690, 167.652, 186.693), stdev = 41.906
[info]   CI (99.9%): [6.288, 329.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.074 ±(99.9%) 0.388 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.074, 0.184), stdev = 0.101
[info]   CI (99.9%): [≈ 0, 0.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 6.000), stdev = 1.342
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 91.82% complete, ETA 00:05:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3720003.242 ops/s
[info] # Warmup Iteration   2: 5411196.183 ops/s
[info] # Warmup Iteration   3: 5455480.148 ops/s
[info] Iteration   1: 5496862.068 ops/s
[info]                  ·gc.alloc.rate:            335.208 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.979 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 96.507 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 5478565.079 ops/s
[info]                  ·gc.alloc.rate:            334.226 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.461 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 96.642 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 5503609.113 ops/s
[info]                  ·gc.alloc.rate:            335.629 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.337 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 96.203 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 5515484.662 ops/s
[info]                  ·gc.alloc.rate:                   336.382 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             336.363 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        95.995 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.190 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 5505854.354 ops/s
[info]                  ·gc.alloc.rate:            335.766 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.001 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 96.353 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc":
[info]   5500075.055 ±(99.9%) 52949.792 ops/s [Average]
[info]   (min, avg, max) = (5478565.079, 5500075.055, 5515484.662), stdev = 13750.893
[info]   CI (99.9%): [5447125.263, 5553024.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   335.442 ±(99.9%) 3.078 MB/sec [Average]
[info]   (min, avg, max) = (334.226, 335.442, 336.382), stdev = 0.799
[info]   CI (99.9%): [332.364, 338.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   96.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (96.000, 96.000, 96.000), stdev = 0.001
[info]   CI (99.9%): [96.000, 96.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   336.628 ±(99.9%) 1.284 MB/sec [Average]
[info]   (min, avg, max) = (336.337, 336.628, 337.001), stdev = 0.333
[info]   CI (99.9%): [335.344, 337.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   96.340 ±(99.9%) 0.977 B/op [Average]
[info]   (min, avg, max) = (95.995, 96.340, 96.642), stdev = 0.254
[info]   CI (99.9%): [95.363, 97.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm":
[info]   0.038 ±(99.9%) 0.327 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.038, 0.190), stdev = 0.085
[info]   CI (99.9%): [≈ 0, 0.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson
[info] # Run progress: 92.12% complete, ETA 00:05:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37479.860 ops/s
[info] # Warmup Iteration   2: 312610.663 ops/s
[info] # Warmup Iteration   3: 311563.440 ops/s
[info] Iteration   1: 317892.530 ops/s
[info]                  ·gc.alloc.rate:                   1583.064 MB/sec
[info]                  ·gc.alloc.rate.norm:              7840.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1680.813 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        8324.100 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.298 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         23.000 ms
[info] Iteration   2: 313286.229 ops/s
[info]                  ·gc.alloc.rate:                                  1560.361 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7840.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.189 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.948 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1697.767 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8530.395 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                20.079 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 319692.208 ops/s
[info]                  ·gc.alloc.rate:                                  1592.839 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7840.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.895 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6703.288 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 323381.953 ops/s
[info]                  ·gc.alloc.rate:                                  1610.576 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7840.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.645 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8283.308 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 325044.037 ops/s
[info]                  ·gc.alloc.rate:                                  1619.351 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7840.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.169 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8240.961 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson":
[info]   319859.391 ±(99.9%) 17895.343 ops/s [Average]
[info]   (min, avg, max) = (313286.229, 319859.391, 325044.037), stdev = 4647.364
[info]   CI (99.9%): [301964.048, 337754.734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1593.238 ±(99.9%) 89.628 MB/sec [Average]
[info]   (min, avg, max) = (1560.361, 1593.238, 1619.351), stdev = 23.276
[info]   CI (99.9%): [1503.610, 1682.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   7840.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7840.001, 7840.001, 7840.001), stdev = 0.001
[info]   CI (99.9%): [7840.001, 7840.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.039 ±(99.9%) 0.323 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.039, 0.189), stdev = 0.084
[info]   CI (99.9%): [≈ 0, 0.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.195 ±(99.9%) 1.621 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.195, 0.948), stdev = 0.421
[info]   CI (99.9%): [≈ 0, 1.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1628.858 ±(99.9%) 575.634 MB/sec [Average]
[info]   (min, avg, max) = (1361.895, 1628.858, 1702.169), stdev = 149.490
[info]   CI (99.9%): [1053.223, 2204.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   8016.410 ±(99.9%) 2858.827 B/op [Average]
[info]   (min, avg, max) = (6703.288, 8016.410, 8530.395), stdev = 742.428
[info]   CI (99.9%): [5157.583, 10875.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   4.675 ±(99.9%) 33.611 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.675, 20.079), stdev = 8.729
[info]   CI (99.9%): [≈ 0, 38.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 8.600, 23.000), stdev = 8.234
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce
[info] # Run progress: 92.42% complete, ETA 00:05:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3289069.638 ops/s
[info] # Warmup Iteration   2: 4817867.302 ops/s
[info] # Warmup Iteration   3: 4920838.066 ops/s
[info] Iteration   1: 4919673.005 ops/s
[info]                  ·gc.alloc.rate:                                  3450.281 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1104.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.213 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1088.940 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   2: 4861444.909 ops/s
[info]                  ·gc.alloc.rate:                                  3409.758 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1104.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.618 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1102.012 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 4883419.227 ops/s
[info]                  ·gc.alloc.rate:                                  3424.845 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1104.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.461 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1097.107 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   4: 4911824.993 ops/s
[info]                  ·gc.alloc.rate:                                  3445.272 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1104.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.928 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1090.752 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   5: 4909883.565 ops/s
[info]                  ·gc.alloc.rate:                                  3443.993 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1104.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.973 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1091.171 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce":
[info]   4897249.140 ±(99.9%) 93296.171 ops/s [Average]
[info]   (min, avg, max) = (4861444.909, 4897249.140, 4919673.005), stdev = 24228.719
[info]   CI (99.9%): [4803952.969, 4990545.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   3434.830 ±(99.9%) 65.574 MB/sec [Average]
[info]   (min, avg, max) = (3409.758, 3434.830, 3450.281), stdev = 17.029
[info]   CI (99.9%): [3369.256, 3500.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   1104.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1104.000, 1104.000, 1104.000), stdev = 0.001
[info]   CI (99.9%): [1104.000, 1104.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.003 ±(99.9%) 0.003 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.003, 0.004), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   3403.639 ±(99.9%) 1.231 MB/sec [Average]
[info]   (min, avg, max) = (3403.213, 3403.639, 3403.973), stdev = 0.320
[info]   CI (99.9%): [3402.408, 3404.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   1093.996 ±(99.9%) 20.915 B/op [Average]
[info]   (min, avg, max) = (1088.940, 1093.996, 1102.012), stdev = 5.431
[info]   CI (99.9%): [1073.082, 1114.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.count":
[info]   50.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (10.000, 10.000, 10.000), stdev = 0.001
[info]   CI (99.9%): [50.000, 50.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.400, 9.000), stdev = 0.548
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala
[info] # Run progress: 92.73% complete, ETA 00:05:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1454767.977 ops/s
[info] # Warmup Iteration   2: 3820595.566 ops/s
[info] # Warmup Iteration   3: 3826949.457 ops/s
[info] Iteration   1: 3938582.416 ops/s
[info]                  ·gc.alloc.rate:                                  2041.621 MB/sec
[info]                  ·gc.alloc.rate.norm:                             816.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.033 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2037.358 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       814.296 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1.863 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   2: 3936617.203 ops/s
[info]                  ·gc.alloc.rate:            2040.597 MB/sec
[info]                  ·gc.alloc.rate.norm:       816.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2041.961 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 816.546 B/op
[info]                  ·gc.count:                 6.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 3948120.416 ops/s
[info]                  ·gc.alloc.rate:                                  2046.644 MB/sec
[info]                  ·gc.alloc.rate.norm:                             816.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.043 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       814.166 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 3943966.811 ops/s
[info]                  ·gc.alloc.rate:                                  2044.532 MB/sec
[info]                  ·gc.alloc.rate.norm:                             816.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.093 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       815.027 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 3942953.576 ops/s
[info]                  ·gc.alloc.rate:                                  2044.011 MB/sec
[info]                  ·gc.alloc.rate.norm:                             816.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.076 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       815.228 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala":
[info]   3942048.084 ±(99.9%) 17527.831 ops/s [Average]
[info]   (min, avg, max) = (3936617.203, 3942048.084, 3948120.416), stdev = 4551.922
[info]   CI (99.9%): [3924520.254, 3959575.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2043.481 ±(99.9%) 9.268 MB/sec [Average]
[info]   (min, avg, max) = (2040.597, 2043.481, 2046.644), stdev = 2.407
[info]   CI (99.9%): [2034.213, 2052.748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   816.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (816.000, 816.000, 816.000), stdev = 0.001
[info]   CI (99.9%): [816.000, 816.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.008 ±(99.9%) 0.054 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.033), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.003 ±(99.9%) 0.022 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.013), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   2041.106 ±(99.9%) 8.071 MB/sec [Average]
[info]   (min, avg, max) = (2037.358, 2041.106, 2042.093), stdev = 2.096
[info]   CI (99.9%): [2033.035, 2049.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   815.052 ±(99.9%) 3.663 B/op [Average]
[info]   (min, avg, max) = (814.166, 815.052, 816.546), stdev = 0.951
[info]   CI (99.9%): [811.390, 818.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.373 ±(99.9%) 3.209 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.373, 1.863), stdev = 0.833
[info]   CI (99.9%): [≈ 0, 3.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 8.000), stdev = 1.342
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala
[info] # Run progress: 93.03% complete, ETA 00:04:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6895678.456 ops/s
[info] # Warmup Iteration   2: 7615842.840 ops/s
[info] # Warmup Iteration   3: 7587719.524 ops/s
[info] Iteration   1: 7659190.227 ops/s
[info]                  ·gc.alloc.rate:            817.387 MB/sec
[info]                  ·gc.alloc.rate.norm:       168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.966 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 138.522 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 7665214.703 ops/s
[info]                  ·gc.alloc.rate:                   818.329 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.894 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        138.553 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.137 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 7573024.227 ops/s
[info]                  ·gc.alloc.rate:            808.243 MB/sec
[info]                  ·gc.alloc.rate.norm:       168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.032 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 210.152 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 7465325.979 ops/s
[info]                  ·gc.alloc.rate:                   796.809 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.073 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        142.122 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.702 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 7340265.666 ops/s
[info]                  ·gc.alloc.rate:                                  783.429 MB/sec
[info]                  ·gc.alloc.rate.norm:                             168.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.032 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.708 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       145.972 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala":
[info]   7540604.160 ±(99.9%) 532322.173 ops/s [Average]
[info]   (min, avg, max) = (7340265.666, 7540604.160, 7665214.703), stdev = 138242.378
[info]   CI (99.9%): [7008281.987, 8072926.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   804.839 ±(99.9%) 56.915 MB/sec [Average]
[info]   (min, avg, max) = (783.429, 804.839, 818.329), stdev = 14.781
[info]   CI (99.9%): [747.924, 861.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   168.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (168.000, 168.000, 168.000), stdev = 0.001
[info]   CI (99.9%): [168.000, 168.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.006 ±(99.9%) 0.054 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.032), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.001 ±(99.9%) 0.012 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.007), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   742.935 ±(99.9%) 577.201 MB/sec [Average]
[info]   (min, avg, max) = (673.966, 742.935, 1011.032), stdev = 149.897
[info]   CI (99.9%): [165.734, 1320.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   155.064 ±(99.9%) 119.168 B/op [Average]
[info]   (min, avg, max) = (138.522, 155.064, 210.152), stdev = 30.948
[info]   CI (99.9%): [35.896, 274.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.168 ±(99.9%) 1.173 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.168, 0.702), stdev = 0.305
[info]   CI (99.9%): [≈ 0, 1.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.000, 8.000), stdev = 2.121
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson
[info] # Run progress: 93.33% complete, ETA 00:04:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2503229.935 ops/s
[info] # Warmup Iteration   2: 4436163.900 ops/s
[info] # Warmup Iteration   3: 4456275.397 ops/s
[info] Iteration   1: 4639323.659 ops/s
[info]                  ·gc.alloc.rate:                                  2498.990 MB/sec
[info]                  ·gc.alloc.rate.norm:                             848.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.109 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       808.338 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 4638694.758 ops/s
[info]                  ·gc.alloc.rate:                                  2498.940 MB/sec
[info]                  ·gc.alloc.rate.norm:                             848.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.750 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       923.949 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 4617642.619 ops/s
[info]                  ·gc.alloc.rate:                                  2488.026 MB/sec
[info]                  ·gc.alloc.rate.norm:                             848.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.869 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       812.159 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 4631215.874 ops/s
[info]                  ·gc.alloc.rate:            2494.575 MB/sec
[info]                  ·gc.alloc.rate.norm:       848.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2382.063 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 809.753 B/op
[info]                  ·gc.count:                 7.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 4599068.938 ops/s
[info]                  ·gc.alloc.rate:                                  2477.562 MB/sec
[info]                  ·gc.alloc.rate.norm:                             848.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.711 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       931.908 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson":
[info]   4625189.169 ±(99.9%) 65509.708 ops/s [Average]
[info]   (min, avg, max) = (4599068.938, 4625189.169, 4639323.659), stdev = 17012.663
[info]   CI (99.9%): [4559679.462, 4690698.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2491.619 ±(99.9%) 34.825 MB/sec [Average]
[info]   (min, avg, max) = (2477.562, 2491.619, 2498.990), stdev = 9.044
[info]   CI (99.9%): [2456.794, 2526.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   848.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (848.000, 848.000, 848.000), stdev = 0.001
[info]   CI (99.9%): [848.000, 848.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.003 ±(99.9%) 0.012 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.008), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.001 ±(99.9%) 0.004 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2518.500 ±(99.9%) 717.899 MB/sec [Average]
[info]   (min, avg, max) = (2382.063, 2518.500, 2722.750), stdev = 186.436
[info]   CI (99.9%): [1800.602, 3236.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   857.221 ±(99.9%) 248.836 B/op [Average]
[info]   (min, avg, max) = (808.338, 857.221, 931.908), stdev = 64.622
[info]   CI (99.9%): [608.385, 1106.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.count":
[info]   37.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.400, 8.000), stdev = 0.548
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce
[info] # Run progress: 93.64% complete, ETA 00:04:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2007976.877 ops/s
[info] # Warmup Iteration   2: 3237294.488 ops/s
[info] # Warmup Iteration   3: 3343028.440 ops/s
[info] Iteration   1: 3355605.714 ops/s
[info]                  ·gc.alloc.rate:            801.613 MB/sec
[info]                  ·gc.alloc.rate.norm:       376.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.108 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 316.193 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 3352827.982 ops/s
[info]                  ·gc.alloc.rate:            800.845 MB/sec
[info]                  ·gc.alloc.rate.norm:       376.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.001 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 316.446 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 3328869.705 ops/s
[info]                  ·gc.alloc.rate:            795.139 MB/sec
[info]                  ·gc.alloc.rate.norm:       376.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.025 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 478.087 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 3352787.420 ops/s
[info]                  ·gc.alloc.rate:            801.033 MB/sec
[info]                  ·gc.alloc.rate.norm:       376.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.159 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 316.446 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 3350402.951 ops/s
[info]                  ·gc.alloc.rate:                                  800.255 MB/sec
[info]                  ·gc.alloc.rate.norm:                             376.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.175 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.082 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.654 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       478.145 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1.565 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce":
[info]   3348098.754 ±(99.9%) 41995.385 ops/s [Average]
[info]   (min, avg, max) = (3328869.705, 3348098.754, 3355605.714), stdev = 10906.068
[info]   CI (99.9%): [3306103.369, 3390094.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   799.777 ±(99.9%) 10.156 MB/sec [Average]
[info]   (min, avg, max) = (795.139, 799.777, 801.613), stdev = 2.637
[info]   CI (99.9%): [789.621, 809.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   376.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (376.000, 376.000, 376.000), stdev = 0.001
[info]   CI (99.9%): [376.000, 376.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.035 ±(99.9%) 0.301 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.035, 0.175), stdev = 0.078
[info]   CI (99.9%): [≈ 0, 0.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.016 ±(99.9%) 0.142 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.082), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   810.189 ±(99.9%) 717.674 MB/sec [Average]
[info]   (min, avg, max) = (674.001, 810.189, 1017.654), stdev = 186.378
[info]   CI (99.9%): [92.515, 1527.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   381.064 ±(99.9%) 341.153 B/op [Average]
[info]   (min, avg, max) = (316.193, 381.064, 478.145), stdev = 88.596
[info]   CI (99.9%): [39.910, 722.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   0.313 ±(99.9%) 2.694 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.313, 1.565), stdev = 0.700
[info]   CI (99.9%): [≈ 0, 3.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.800, 9.000), stdev = 1.483
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala
[info] # Run progress: 93.94% complete, ETA 00:04:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1507728.335 ops/s
[info] # Warmup Iteration   2: 3215971.831 ops/s
[info] # Warmup Iteration   3: 3240393.122 ops/s
[info] Iteration   1: 3245853.762 ops/s
[info]                  ·gc.alloc.rate:            1006.136 MB/sec
[info]                  ·gc.alloc.rate.norm:       488.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.884 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 489.333 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   2: 3206191.511 ops/s
[info]                  ·gc.alloc.rate:            994.366 MB/sec
[info]                  ·gc.alloc.rate.norm:       488.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.388 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 495.372 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 3216769.625 ops/s
[info]                  ·gc.alloc.rate:                                  997.239 MB/sec
[info]                  ·gc.alloc.rate.norm:                             488.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.055 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.027 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.054 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       495.739 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1.956 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   4: 3177711.352 ops/s
[info]                  ·gc.alloc.rate:                                  985.078 MB/sec
[info]                  ·gc.alloc.rate.norm:                             488.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.052 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.026 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.964 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       505.778 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 3237920.088 ops/s
[info]                  ·gc.alloc.rate:            1003.740 MB/sec
[info]                  ·gc.alloc.rate.norm:       488.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.959 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 496.372 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala":
[info]   3216889.267 ±(99.9%) 104227.384 ops/s [Average]
[info]   (min, avg, max) = (3177711.352, 3216889.267, 3245853.762), stdev = 27067.521
[info]   CI (99.9%): [3112661.884, 3321116.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   997.312 ±(99.9%) 32.074 MB/sec [Average]
[info]   (min, avg, max) = (985.078, 997.312, 1006.136), stdev = 8.330
[info]   CI (99.9%): [965.238, 1029.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   488.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (488.000, 488.000, 488.000), stdev = 0.001
[info]   CI (99.9%): [488.000, 488.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.021 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.055), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.010 ±(99.9%) 0.055 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.027), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1014.650 ±(99.9%) 23.037 MB/sec [Average]
[info]   (min, avg, max) = (1008.884, 1014.650, 1020.964), stdev = 5.983
[info]   CI (99.9%): [991.613, 1037.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   496.519 ±(99.9%) 22.725 B/op [Average]
[info]   (min, avg, max) = (489.333, 496.519, 505.778), stdev = 5.901
[info]   CI (99.9%): [473.794, 519.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.391 ±(99.9%) 3.368 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.391, 1.956), stdev = 0.875
[info]   CI (99.9%): [≈ 0, 3.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.200, 15.000), stdev = 5.630
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala
[info] # Run progress: 94.24% complete, ETA 00:04:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6519875.219 ops/s
[info] # Warmup Iteration   2: 9353105.547 ops/s
[info] # Warmup Iteration   3: 9553728.218 ops/s
[info] Iteration   1: 9833224.929 ops/s
[info]                  ·gc.alloc.rate:                   949.448 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.650 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        161.638 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.107 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 9560025.548 ops/s
[info]                  ·gc.alloc.rate:                   923.231 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.775 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        110.765 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.110 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 9605904.089 ops/s
[info]                  ·gc.alloc.rate:            927.738 MB/sec
[info]                  ·gc.alloc.rate.norm:       152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.251 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 165.683 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 9312060.528 ops/s
[info]                  ·gc.alloc.rate:                                  899.219 MB/sec
[info]                  ·gc.alloc.rate.norm:                             152.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.140 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.024 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.065 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       171.920 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                0.676 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 9214700.096 ops/s
[info]                  ·gc.alloc.rate:                                  889.774 MB/sec
[info]                  ·gc.alloc.rate.norm:                             152.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.649 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       116.275 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala":
[info]   9505183.038 ±(99.9%) 947994.901 ops/s [Average]
[info]   (min, avg, max) = (9214700.096, 9505183.038, 9833224.929), stdev = 246191.265
[info]   CI (99.9%): [8557188.137, 10453177.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   917.882 ±(99.9%) 91.539 MB/sec [Average]
[info]   (min, avg, max) = (889.774, 917.882, 949.448), stdev = 23.772
[info]   CI (99.9%): [826.343, 1009.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   152.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (152.000, 152.000, 152.000), stdev = 0.001
[info]   CI (99.9%): [152.000, 152.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.030 ±(99.9%) 0.238 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.140), stdev = 0.062
[info]   CI (99.9%): [≈ 0, 0.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.005 ±(99.9%) 0.040 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.024), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   878.278 ±(99.9%) 708.693 MB/sec [Average]
[info]   (min, avg, max) = (672.775, 878.278, 1017.065), stdev = 184.045
[info]   CI (99.9%): [169.584, 1586.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   145.256 ±(99.9%) 112.695 B/op [Average]
[info]   (min, avg, max) = (110.765, 145.256, 171.920), stdev = 29.266
[info]   CI (99.9%): [32.562, 257.951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 6.437 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 3.996), stdev = 1.672
[info]   CI (99.9%): [≈ 0, 7.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.178 ±(99.9%) 1.090 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.178, 0.676), stdev = 0.283
[info]   CI (99.9%): [≈ 0, 1.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 6.000, 9.000), stdev = 3.317
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 94.55% complete, ETA 00:03:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5333780.768 ops/s
[info] # Warmup Iteration   2: 7538132.572 ops/s
[info] # Warmup Iteration   3: 7702902.859 ops/s
[info] Iteration   1: 7700246.988 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 7701278.667 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 7701742.944 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 7701608.557 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 7701021.461 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   7701179.723 ±(99.9%) 2282.907 ops/s [Average]
[info]   (min, avg, max) = (7700246.988, 7701179.723, 7701742.944), stdev = 592.864
[info]   CI (99.9%): [7698896.817, 7703462.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson
[info] # Run progress: 94.85% complete, ETA 00:03:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2167870.248 ops/s
[info] # Warmup Iteration   2: 2980467.719 ops/s
[info] # Warmup Iteration   3: 3158427.607 ops/s
[info] Iteration   1: 3166906.376 ops/s
[info]                  ·gc.alloc.rate:            1014.085 MB/sec
[info]                  ·gc.alloc.rate.norm:       504.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.121 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 501.533 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 3143195.964 ops/s
[info]                  ·gc.alloc.rate:            1006.596 MB/sec
[info]                  ·gc.alloc.rate.norm:       504.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.250 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 505.329 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 3120036.254 ops/s
[info]                  ·gc.alloc.rate:                                  998.990 MB/sec
[info]                  ·gc.alloc.rate.norm:                             504.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.076 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.038 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.055 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       511.096 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                2.016 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   4: 3149180.489 ops/s
[info]                  ·gc.alloc.rate:                                  1008.273 MB/sec
[info]                  ·gc.alloc.rate.norm:                             504.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.067 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.034 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.663 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       340.240 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        1.000 ms
[info] Iteration   5: 3127015.154 ops/s
[info]                  ·gc.alloc.rate:            1001.238 MB/sec
[info]                  ·gc.alloc.rate.norm:       504.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.026 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 513.961 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson":
[info]   3141266.847 ±(99.9%) 71459.837 ops/s [Average]
[info]   (min, avg, max) = (3120036.254, 3141266.847, 3166906.376), stdev = 18557.893
[info]   CI (99.9%): [3069807.010, 3212726.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1005.836 ±(99.9%) 22.988 MB/sec [Average]
[info]   (min, avg, max) = (998.990, 1005.836, 1014.085), stdev = 5.970
[info]   CI (99.9%): [982.848, 1028.825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   504.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (504.000, 504.000, 504.000), stdev = 0.001
[info]   CI (99.9%): [504.000, 504.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.029 ±(99.9%) 0.152 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.076), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.014 ±(99.9%) 0.076 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.038), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   946.623 ±(99.9%) 572.801 MB/sec [Average]
[info]   (min, avg, max) = (680.663, 946.623, 1021.026), stdev = 148.755
[info]   CI (99.9%): [373.822, 1519.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   474.432 ±(99.9%) 289.461 B/op [Average]
[info]   (min, avg, max) = (340.240, 474.432, 513.961), stdev = 75.172
[info]   CI (99.9%): [184.970, 763.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   0.403 ±(99.9%) 3.472 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.403, 2.016), stdev = 0.902
[info]   CI (99.9%): [≈ 0, 3.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 7.000, 11.000), stdev = 4.690
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce
[info] # Run progress: 95.15% complete, ETA 00:03:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 588268.201 ops/s
[info] # Warmup Iteration   2: 830226.410 ops/s
[info] # Warmup Iteration   3: 839966.616 ops/s
[info] Iteration   1: 865087.180 ops/s
[info]                  ·gc.alloc.rate:            1420.031 MB/sec
[info]                  ·gc.alloc.rate.norm:       2584.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1347.989 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2452.909 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 849094.900 ops/s
[info]                  ·gc.alloc.rate:                                  1394.189 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2584.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.067 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.124 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1358.372 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2517.618 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                6.174 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 869886.646 ops/s
[info]                  ·gc.alloc.rate:                                  1427.891 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2584.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.291 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2463.477 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 869175.248 ops/s
[info]                  ·gc.alloc.rate:                                  1427.034 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2584.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.587 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2465.492 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 858605.699 ops/s
[info]                  ·gc.alloc.rate:                                  1409.622 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2584.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.492 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2495.772 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce":
[info]   862369.935 ±(99.9%) 33380.478 ops/s [Average]
[info]   (min, avg, max) = (849094.900, 862369.935, 869886.646), stdev = 8668.804
[info]   CI (99.9%): [828989.457, 895750.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   1415.753 ±(99.9%) 54.304 MB/sec [Average]
[info]   (min, avg, max) = (1394.189, 1415.753, 1427.891), stdev = 14.102
[info]   CI (99.9%): [1361.450, 1470.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2584.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2584.000, 2584.000, 2584.001), stdev = 0.001
[info]   CI (99.9%): [2584.000, 2584.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.015 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.067), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.027 ±(99.9%) 0.209 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.124), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1358.146 ±(99.9%) 22.464 MB/sec [Average]
[info]   (min, avg, max) = (1347.989, 1358.146, 1361.587), stdev = 5.834
[info]   CI (99.9%): [1335.682, 1380.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2479.054 ±(99.9%) 103.266 B/op [Average]
[info]   (min, avg, max) = (2452.909, 2479.054, 2517.618), stdev = 26.818
[info]   CI (99.9%): [2375.788, 2582.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   1.235 ±(99.9%) 10.631 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.235, 6.174), stdev = 2.761
[info]   CI (99.9%): [≈ 0, 11.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 12.000), stdev = 3.782
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala
[info] # Run progress: 95.45% complete, ETA 00:03:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 465393.750 ops/s
[info] # Warmup Iteration   2: 1076149.084 ops/s
[info] # Warmup Iteration   3: 1095391.969 ops/s
[info] Iteration   1: 1084581.216 ops/s
[info]                  ·gc.alloc.rate:            749.723 MB/sec
[info]                  ·gc.alloc.rate.norm:       1088.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.776 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 976.335 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 1088377.583 ops/s
[info]                  ·gc.alloc.rate:            752.238 MB/sec
[info]                  ·gc.alloc.rate.norm:       1088.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.022 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1459.399 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 1098791.897 ops/s
[info]                  ·gc.alloc.rate:            759.494 MB/sec
[info]                  ·gc.alloc.rate.norm:       1088.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.716 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 963.688 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 1094827.708 ops/s
[info]                  ·gc.alloc.rate:            756.764 MB/sec
[info]                  ·gc.alloc.rate.norm:       1088.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.726 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 967.178 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 1102421.206 ops/s
[info]                  ·gc.alloc.rate:                                  762.060 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1088.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.034 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.049 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            676.096 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       965.269 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                6.657 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala":
[info]   1093799.922 ±(99.9%) 28210.336 ops/s [Average]
[info]   (min, avg, max) = (1084581.216, 1093799.922, 1102421.206), stdev = 7326.135
[info]   CI (99.9%): [1065589.586, 1122010.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   756.056 ±(99.9%) 19.544 MB/sec [Average]
[info]   (min, avg, max) = (749.723, 756.056, 762.060), stdev = 5.076
[info]   CI (99.9%): [736.511, 775.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1088.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1088.000, 1088.000, 1088.000), stdev = 0.001
[info]   CI (99.9%): [1088.000, 1088.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.007 ±(99.9%) 0.059 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.034), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.010 ±(99.9%) 0.084 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.049), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   740.667 ±(99.9%) 577.680 MB/sec [Average]
[info]   (min, avg, max) = (672.716, 740.667, 1009.022), stdev = 150.022
[info]   CI (99.9%): [162.987, 1318.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1066.374 ±(99.9%) 846.227 B/op [Average]
[info]   (min, avg, max) = (963.688, 1066.374, 1459.399), stdev = 219.763
[info]   CI (99.9%): [220.147, 1912.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.030 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.663), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.331 ±(99.9%) 11.464 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.331, 6.657), stdev = 2.977
[info]   CI (99.9%): [≈ 0, 12.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 8.400, 12.000), stdev = 2.191
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala
[info] # Run progress: 95.76% complete, ETA 00:02:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1736828.753 ops/s
[info] # Warmup Iteration   2: 1863275.483 ops/s
[info] # Warmup Iteration   3: 1887688.341 ops/s
[info] Iteration   1: 1891650.437 ops/s
[info]                  ·gc.alloc.rate:            528.843 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.114 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 560.867 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 1894942.964 ops/s
[info]                  ·gc.alloc.rate:            529.723 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.039 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 279.953 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 1891049.044 ops/s
[info]                  ·gc.alloc.rate:                   528.596 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.016 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        561.047 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.554 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 1897541.803 ops/s
[info]                  ·gc.alloc.rate:            530.656 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.839 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 280.124 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   5: 1891663.911 ops/s
[info]                  ·gc.alloc.rate:            528.746 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.018 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 560.890 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala":
[info]   1893369.632 ±(99.9%) 10742.646 ops/s [Average]
[info]   (min, avg, max) = (1891049.044, 1893369.632, 1897541.803), stdev = 2789.831
[info]   CI (99.9%): [1882626.986, 1904112.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   529.313 ±(99.9%) 3.351 MB/sec [Average]
[info]   (min, avg, max) = (528.596, 529.313, 530.656), stdev = 0.870
[info]   CI (99.9%): [525.962, 532.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   440.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (440.000, 440.000, 440.000), stdev = 0.001
[info]   CI (99.9%): [440.000, 440.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   539.405 ±(99.9%) 709.941 MB/sec [Average]
[info]   (min, avg, max) = (337.039, 539.405, 674.114), stdev = 184.369
[info]   CI (99.9%): [≈ 0, 1249.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   448.576 ±(99.9%) 592.435 B/op [Average]
[info]   (min, avg, max) = (279.953, 448.576, 561.047), stdev = 153.853
[info]   CI (99.9%): [≈ 0, 1041.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.111 ±(99.9%) 0.955 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.111, 0.554), stdev = 0.248
[info]   CI (99.9%): [≈ 0, 1.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.000, 5.000), stdev = 1.414
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson
[info] # Run progress: 96.06% complete, ETA 00:02:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 678804.002 ops/s
[info] # Warmup Iteration   2: 1207461.499 ops/s
[info] # Warmup Iteration   3: 1199001.551 ops/s
[info] Iteration   1: 1236432.396 ops/s
[info]                  ·gc.alloc.rate:            879.711 MB/sec
[info]                  ·gc.alloc.rate.norm:       1120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.979 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1284.578 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 1242422.864 ops/s
[info]                  ·gc.alloc.rate:            884.304 MB/sec
[info]                  ·gc.alloc.rate.norm:       1120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.922 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 852.278 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 1233672.191 ops/s
[info]                  ·gc.alloc.rate:            877.789 MB/sec
[info]                  ·gc.alloc.rate.norm:       1120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.054 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1287.486 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   4: 1213063.301 ops/s
[info]                  ·gc.alloc.rate:                                  863.106 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1120.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.034 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.044 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.053 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1314.577 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                5.186 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   5: 1177047.645 ops/s
[info]                  ·gc.alloc.rate:                                  837.804 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1120.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.142 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.189 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.964 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       910.331 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson":
[info]   1220527.679 ±(99.9%) 102808.725 ops/s [Average]
[info]   (min, avg, max) = (1177047.645, 1220527.679, 1242422.864), stdev = 26699.099
[info]   CI (99.9%): [1117718.954, 1323336.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   868.543 ±(99.9%) 72.884 MB/sec [Average]
[info]   (min, avg, max) = (837.804, 868.543, 884.304), stdev = 18.928
[info]   CI (99.9%): [795.659, 941.427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   1120.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1120.000, 1120.000, 1120.000), stdev = 0.001
[info]   CI (99.9%): [1120.000, 1120.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.035 ±(99.9%) 0.236 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.035, 0.142), stdev = 0.061
[info]   CI (99.9%): [≈ 0, 0.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.047 ±(99.9%) 0.316 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.047, 0.189), stdev = 0.082
[info]   CI (99.9%): [≈ 0, 0.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   876.994 ±(99.9%) 703.324 MB/sec [Average]
[info]   (min, avg, max) = (672.922, 876.994, 1013.053), stdev = 182.651
[info]   CI (99.9%): [173.670, 1580.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   1129.850 ±(99.9%) 878.395 B/op [Average]
[info]   (min, avg, max) = (852.278, 1129.850, 1314.577), stdev = 228.117
[info]   CI (99.9%): [251.454, 2008.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   1.037 ±(99.9%) 8.930 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.037, 5.186), stdev = 2.319
[info]   CI (99.9%): [≈ 0, 9.967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 8.000, 11.000), stdev = 4.123
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce
[info] # Run progress: 96.36% complete, ETA 00:02:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1038788.239 ops/s
[info] # Warmup Iteration   2: 1721439.782 ops/s
[info] # Warmup Iteration   3: 1749106.681 ops/s
[info] Iteration   1: 1739577.440 ops/s
[info]                  ·gc.alloc.rate:            1397.881 MB/sec
[info]                  ·gc.alloc.rate.norm:       1264.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1682.643 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1521.489 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   2: 1760702.663 ops/s
[info]                  ·gc.alloc.rate:                                  1414.274 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1264.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.091 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.081 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1358.500 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1214.152 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                2.977 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 1769807.558 ops/s
[info]                  ·gc.alloc.rate:            1421.208 MB/sec
[info]                  ·gc.alloc.rate.norm:       1264.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.437 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1210.841 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 1771785.763 ops/s
[info]                  ·gc.alloc.rate:            1422.739 MB/sec
[info]                  ·gc.alloc.rate.norm:       1264.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.382 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1209.489 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 1757577.676 ops/s
[info]                  ·gc.alloc.rate:                                  1411.372 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1264.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.388 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1219.235 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce":
[info]   1759890.220 ±(99.9%) 49405.220 ops/s [Average]
[info]   (min, avg, max) = (1739577.440, 1759890.220, 1771785.763), stdev = 12830.379
[info]   CI (99.9%): [1710484.999, 1809295.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1413.495 ±(99.9%) 38.209 MB/sec [Average]
[info]   (min, avg, max) = (1397.881, 1413.495, 1422.739), stdev = 9.923
[info]   CI (99.9%): [1375.285, 1451.704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1264.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1264.000, 1264.000, 1264.000), stdev = 0.001
[info]   CI (99.9%): [1264.000, 1264.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.018 ±(99.9%) 0.155 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.091), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.017 ±(99.9%) 0.139 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.081), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1425.070 ±(99.9%) 554.466 MB/sec [Average]
[info]   (min, avg, max) = (1358.500, 1425.070, 1682.643), stdev = 143.993
[info]   CI (99.9%): [870.604, 1979.536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   1275.041 ±(99.9%) 530.695 B/op [Average]
[info]   (min, avg, max) = (1209.489, 1275.041, 1521.489), stdev = 137.820
[info]   CI (99.9%): [744.346, 1805.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.737 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   0.595 ±(99.9%) 5.127 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.595, 2.977), stdev = 1.331
[info]   CI (99.9%): [≈ 0, 5.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 15.000), stdev = 5.215
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala
[info] # Run progress: 96.67% complete, ETA 00:02:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 873629.734 ops/s
[info] # Warmup Iteration   2: 1981043.354 ops/s
[info] # Warmup Iteration   3: 1986981.336 ops/s
[info] Iteration   1: 1986822.015 ops/s
[info]                  ·gc.alloc.rate:            888.587 MB/sec
[info]                  ·gc.alloc.rate.norm:       704.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.077 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 799.461 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 1995484.400 ops/s
[info]                  ·gc.alloc.rate:            892.407 MB/sec
[info]                  ·gc.alloc.rate.norm:       704.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.654 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 530.642 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 1978204.341 ops/s
[info]                  ·gc.alloc.rate:            884.657 MB/sec
[info]                  ·gc.alloc.rate.norm:       704.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.960 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 802.918 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   4: 1980091.163 ops/s
[info]                  ·gc.alloc.rate:                                  885.629 MB/sec
[info]                  ·gc.alloc.rate.norm:                             704.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.067 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.054 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.107 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       808.514 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                3.177 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 1972072.757 ops/s
[info]                  ·gc.alloc.rate:                                  882.048 MB/sec
[info]                  ·gc.alloc.rate.norm:                             704.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.023 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.733 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       543.322 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala":
[info]   1982534.935 ±(99.9%) 34454.707 ops/s [Average]
[info]   (min, avg, max) = (1972072.757, 1982534.935, 1995484.400), stdev = 8947.778
[info]   CI (99.9%): [1948080.228, 2016989.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   886.666 ±(99.9%) 15.292 MB/sec [Average]
[info]   (min, avg, max) = (882.048, 886.666, 892.407), stdev = 3.971
[info]   CI (99.9%): [871.373, 901.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   704.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (704.000, 704.000, 704.000), stdev = 0.001
[info]   CI (99.9%): [704.000, 704.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.018 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.067), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.014 ±(99.9%) 0.090 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.054), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   877.706 ±(99.9%) 706.788 MB/sec [Average]
[info]   (min, avg, max) = (672.654, 877.706, 1017.107), stdev = 183.551
[info]   CI (99.9%): [170.918, 1584.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   696.971 ±(99.9%) 562.789 B/op [Average]
[info]   (min, avg, max) = (530.642, 696.971, 808.514), stdev = 146.154
[info]   CI (99.9%): [134.183, 1259.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.635 ±(99.9%) 5.471 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.635, 3.177), stdev = 1.421
[info]   CI (99.9%): [≈ 0, 6.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.000, 12.000), stdev = 4.243
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala
[info] # Run progress: 96.97% complete, ETA 00:02:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1594964.226 ops/s
[info] # Warmup Iteration   2: 2478365.989 ops/s
[info] # Warmup Iteration   3: 2486381.798 ops/s
[info] Iteration   1: 2448019.731 ops/s
[info]                  ·gc.alloc.rate:            572.275 MB/sec
[info]                  ·gc.alloc.rate.norm:       368.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.657 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 432.551 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 2411208.482 ops/s
[info]                  ·gc.alloc.rate:                   564.160 MB/sec
[info]                  ·gc.alloc.rate.norm:              368.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.174 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        438.458 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.665 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.434 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 2450720.472 ops/s
[info]                  ·gc.alloc.rate:            573.016 MB/sec
[info]                  ·gc.alloc.rate.norm:       368.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.057 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 216.464 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 2433864.482 ops/s
[info]                  ·gc.alloc.rate:            568.998 MB/sec
[info]                  ·gc.alloc.rate.norm:       368.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.697 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 435.068 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 2408392.669 ops/s
[info]                  ·gc.alloc.rate:                   563.066 MB/sec
[info]                  ·gc.alloc.rate.norm:              368.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.391 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        440.105 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.435 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala":
[info]   2430441.167 ±(99.9%) 76723.721 ops/s [Average]
[info]   (min, avg, max) = (2408392.669, 2430441.167, 2450720.472), stdev = 19924.907
[info]   CI (99.9%): [2353717.446, 2507164.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   568.303 ±(99.9%) 17.548 MB/sec [Average]
[info]   (min, avg, max) = (563.066, 568.303, 573.016), stdev = 4.557
[info]   CI (99.9%): [550.755, 585.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   368.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (368.000, 368.000, 368.000), stdev = 0.001
[info]   CI (99.9%): [368.000, 368.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   605.595 ±(99.9%) 578.051 MB/sec [Average]
[info]   (min, avg, max) = (337.057, 605.595, 673.391), stdev = 150.118
[info]   CI (99.9%): [27.545, 1183.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   392.529 ±(99.9%) 379.162 B/op [Average]
[info]   (min, avg, max) = (216.464, 392.529, 440.105), stdev = 98.467
[info]   CI (99.9%): [13.367, 771.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.404 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.364
[info]   CI (99.9%): [≈ 0, 1.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.174 ±(99.9%) 0.916 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.174, 0.435), stdev = 0.238
[info]   CI (99.9%): [≈ 0, 1.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 6.000), stdev = 1.342
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 97.27% complete, ETA 00:01:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1850220.390 ops/s
[info] # Warmup Iteration   2: 2583140.702 ops/s
[info] # Warmup Iteration   3: 2432102.785 ops/s
[info] Iteration   1: 2619600.714 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2520303.346 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2626770.889 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2621834.353 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2620689.470 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   2601839.754 ±(99.9%) 175830.442 ops/s [Average]
[info]   (min, avg, max) = (2520303.346, 2601839.754, 2626770.889), stdev = 45662.607
[info]   CI (99.9%): [2426009.313, 2777670.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson
[info] # Run progress: 97.58% complete, ETA 00:01:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1441171.982 ops/s
[info] # Warmup Iteration   2: 2103375.078 ops/s
[info] # Warmup Iteration   3: 2125656.966 ops/s
[info] Iteration   1: 2115461.881 ops/s
[info]                  ·gc.alloc.rate:            967.763 MB/sec
[info]                  ·gc.alloc.rate.norm:       720.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.165 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 750.803 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 2154960.748 ops/s
[info]                  ·gc.alloc.rate:            986.095 MB/sec
[info]                  ·gc.alloc.rate.norm:       720.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.439 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 737.045 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 2152891.328 ops/s
[info]                  ·gc.alloc.rate:                   984.679 MB/sec
[info]                  ·gc.alloc.rate.norm:              720.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.977 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        737.767 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.922 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   4: 2118674.447 ops/s
[info]                  ·gc.alloc.rate:                                  969.096 MB/sec
[info]                  ·gc.alloc.rate.norm:                             720.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.112 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.083 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.065 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       758.611 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 2127183.485 ops/s
[info]                  ·gc.alloc.rate:            972.968 MB/sec
[info]                  ·gc.alloc.rate.norm:       720.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.073 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 755.598 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson":
[info]   2133834.378 ±(99.9%) 72579.719 ops/s [Average]
[info]   (min, avg, max) = (2115461.881, 2133834.378, 2154960.748), stdev = 18848.723
[info]   CI (99.9%): [2061254.659, 2206414.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   976.120 ±(99.9%) 33.451 MB/sec [Average]
[info]   (min, avg, max) = (967.763, 976.120, 986.095), stdev = 8.687
[info]   CI (99.9%): [942.669, 1009.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   720.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (720.000, 720.000, 720.000), stdev = 0.001
[info]   CI (99.9%): [720.000, 720.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.022 ±(99.9%) 0.193 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.112), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.017 ±(99.9%) 0.143 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.083), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1013.944 ±(99.9%) 25.053 MB/sec [Average]
[info]   (min, avg, max) = (1008.977, 1013.944, 1021.073), stdev = 6.506
[info]   CI (99.9%): [988.890, 1038.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   747.965 ±(99.9%) 38.645 B/op [Average]
[info]   (min, avg, max) = (737.045, 747.965, 758.611), stdev = 10.036
[info]   CI (99.9%): [709.319, 786.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   0.584 ±(99.9%) 5.032 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.584, 2.922), stdev = 1.307
[info]   CI (99.9%): [≈ 0, 5.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.600, 11.000), stdev = 4.669
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce
[info] # Run progress: 97.88% complete, ETA 00:01:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5553.541 ops/s
[info] # Warmup Iteration   2: 8357.000 ops/s
[info] # Warmup Iteration   3: 9735.725 ops/s
[info] Iteration   1: 9758.558 ops/s
[info]                  ·gc.alloc.rate:            1432.481 MB/sec
[info]                  ·gc.alloc.rate.norm:       230976.042 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.599 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 217450.597 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 10593.627 ops/s
[info]                  ·gc.alloc.rate:                                  1551.730 MB/sec
[info]                  ·gc.alloc.rate.norm:                             230568.721 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.072 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 10.738 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1694.968 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       251852.201 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                494.798 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        15.000 ms
[info] Iteration   3: 11064.650 ops/s
[info]                  ·gc.alloc.rate:            1619.488 MB/sec
[info]                  ·gc.alloc.rate.norm:       230400.037 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.595 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 242081.113 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 11105.904 ops/s
[info]                  ·gc.alloc.rate:            1626.559 MB/sec
[info]                  ·gc.alloc.rate.norm:       230417.098 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.072 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 192950.067 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 11056.176 ops/s
[info]                  ·gc.alloc.rate:                                  1618.602 MB/sec
[info]                  ·gc.alloc.rate.norm:                             230440.037 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.018 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.615 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.598 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       242256.233 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce":
[info]   10715.783 ±(99.9%) 2212.840 ops/s [Average]
[info]   (min, avg, max) = (9758.558, 10715.783, 11105.904), stdev = 574.668
[info]   CI (99.9%): [8502.943, 12928.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1569.772 ±(99.9%) 317.853 MB/sec [Average]
[info]   (min, avg, max) = (1432.481, 1569.772, 1626.559), stdev = 82.546
[info]   CI (99.9%): [1251.919, 1887.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   230560.387 ±(99.9%) 930.483 B/op [Average]
[info]   (min, avg, max) = (230400.037, 230560.387, 230976.042), stdev = 241.644
[info]   CI (99.9%): [229629.904, 231490.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.018 ±(99.9%) 0.121 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.072), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.671 ±(99.9%) 17.905 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.671, 10.738), stdev = 4.650
[info]   CI (99.9%): [≈ 0, 20.576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1561.766 ±(99.9%) 725.941 MB/sec [Average]
[info]   (min, avg, max) = (1348.599, 1561.766, 1701.598), stdev = 188.525
[info]   CI (99.9%): [835.826, 2287.707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   229318.042 ±(99.9%) 92366.244 B/op [Average]
[info]   (min, avg, max) = (192950.067, 229318.042, 251852.201), stdev = 23987.220
[info]   CI (99.9%): [136951.798, 321684.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   98.960 ±(99.9%) 852.072 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 98.960, 494.798), stdev = 221.280
[info]   CI (99.9%): [≈ 0, 951.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.600, 16.000), stdev = 6.348
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala
[info] # Run progress: 98.18% complete, ETA 00:01:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4243.124 ops/s
[info] # Warmup Iteration   2: 13918.151 ops/s
[info] # Warmup Iteration   3: 14207.446 ops/s
[info] Iteration   1: 13895.790 ops/s
[info]                  ·gc.alloc.rate:      196.366 MB/sec
[info]                  ·gc.alloc.rate.norm: 22240.029 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 14437.769 ops/s
[info]                  ·gc.alloc.rate:            203.981 MB/sec
[info]                  ·gc.alloc.rate.norm:       22240.030 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.651 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 36595.963 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 14425.397 ops/s
[info]                  ·gc.alloc.rate:            203.933 MB/sec
[info]                  ·gc.alloc.rate.norm:       22255.220 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.621 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 36626.399 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 14502.532 ops/s
[info]                  ·gc.alloc.rate:      205.056 MB/sec
[info]                  ·gc.alloc.rate.norm: 22256.028 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 14419.440 ops/s
[info]                  ·gc.alloc.rate:            203.897 MB/sec
[info]                  ·gc.alloc.rate.norm:       22256.036 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.713 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 36644.176 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala":
[info]   14336.186 ±(99.9%) 956.535 ops/s [Average]
[info]   (min, avg, max) = (13895.790, 14336.186, 14502.532), stdev = 248.409
[info]   CI (99.9%): [13379.650, 15292.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   202.646 ±(99.9%) 13.648 MB/sec [Average]
[info]   (min, avg, max) = (196.366, 202.646, 205.056), stdev = 3.544
[info]   CI (99.9%): [188.999, 216.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   22249.469 ±(99.9%) 33.203 B/op [Average]
[info]   (min, avg, max) = (22240.029, 22249.469, 22256.036), stdev = 8.623
[info]   CI (99.9%): [22216.266, 22282.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   201.397 ±(99.9%) 707.938 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 201.397, 335.713), stdev = 183.849
[info]   CI (99.9%): [≈ 0, 909.335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   21973.308 ±(99.9%) 77239.300 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21973.308, 36644.176), stdev = 20058.801
[info]   CI (99.9%): [≈ 0, 99212.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 5.000), stdev = 2.739
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala
[info] # Run progress: 98.48% complete, ETA 00:01:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18515.192 ops/s
[info] # Warmup Iteration   2: 21138.108 ops/s
[info] # Warmup Iteration   3: 30326.376 ops/s
[info] Iteration   1: 37274.239 ops/s
[info]                  ·gc.alloc.rate:            345.262 MB/sec
[info]                  ·gc.alloc.rate.norm:       14576.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.102 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14231.518 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 37213.993 ops/s
[info]                  ·gc.alloc.rate:            344.583 MB/sec
[info]                  ·gc.alloc.rate.norm:       14576.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.999 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14255.225 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 37262.645 ops/s
[info]                  ·gc.alloc.rate:            345.051 MB/sec
[info]                  ·gc.alloc.rate.norm:       14576.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.013 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14236.482 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 37407.829 ops/s
[info]                  ·gc.alloc.rate:            346.411 MB/sec
[info]                  ·gc.alloc.rate.norm:       14576.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.030 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14181.308 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 35804.024 ops/s
[info]                  ·gc.alloc.rate:            331.546 MB/sec
[info]                  ·gc.alloc.rate.norm:       14576.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.017 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14816.517 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala":
[info]   36992.546 ±(99.9%) 2573.305 ops/s [Average]
[info]   (min, avg, max) = (35804.024, 36992.546, 37407.829), stdev = 668.279
[info]   CI (99.9%): [34419.241, 39565.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   342.570 ±(99.9%) 23.871 MB/sec [Average]
[info]   (min, avg, max) = (331.546, 342.570, 346.411), stdev = 6.199
[info]   CI (99.9%): [318.699, 366.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   14576.012 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (14576.011, 14576.012, 14576.015), stdev = 0.002
[info]   CI (99.9%): [14576.006, 14576.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   337.032 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (336.999, 337.032, 337.102), stdev = 0.040
[info]   CI (99.9%): [336.877, 337.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   14344.210 ±(99.9%) 1022.115 B/op [Average]
[info]   (min, avg, max) = (14181.308, 14344.210, 14816.517), stdev = 265.440
[info]   CI (99.9%): [13322.095, 15366.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson
[info] # Run progress: 98.79% complete, ETA 00:00:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 444.737 ops/s
[info] # Warmup Iteration   2: 2484.448 ops/s
[info] # Warmup Iteration   3: 2287.256 ops/s
[info] Iteration   1: 2340.460 ops/s
[info]                  ·gc.alloc.rate:                   765.400 MB/sec
[info]                  ·gc.alloc.rate.norm:              514524.429 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.314 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        451949.246 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 447.918 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         49.000 ms
[info] Iteration   2: 2862.635 ops/s
[info]                  ·gc.alloc.rate:            935.912 MB/sec
[info]                  ·gc.alloc.rate.norm:       514358.651 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.274 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 553577.832 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  24.000 ms
[info] Iteration   3: 2904.491 ops/s
[info]                  ·gc.alloc.rate:                   949.507 MB/sec
[info]                  ·gc.alloc.rate.norm:              514344.140 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.178 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        546125.813 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 360.956 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         20.000 ms
[info] Iteration   4: 2935.025 ops/s
[info]                  ·gc.alloc.rate:                   959.500 MB/sec
[info]                  ·gc.alloc.rate.norm:              514344.150 B/op
[info]                  ·gc.churn.G1_Old_Gen:             671.577 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        360001.569 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2142.866 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   5: 2951.251 ops/s
[info]                  ·gc.alloc.rate:                                  964.841 MB/sec
[info]                  ·gc.alloc.rate.norm:                             514344.138 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.049 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.808 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       544179.686 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                355.209 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson":
[info]   2798.772 ±(99.9%) 995.076 ops/s [Average]
[info]   (min, avg, max) = (2340.460, 2798.772, 2951.251), stdev = 258.418
[info]   CI (99.9%): [1803.697, 3793.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   915.032 ±(99.9%) 324.876 MB/sec [Average]
[info]   (min, avg, max) = (765.400, 915.032, 964.841), stdev = 84.369
[info]   CI (99.9%): [590.156, 1239.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   514383.102 ±(99.9%) 305.178 B/op [Average]
[info]   (min, avg, max) = (514344.138, 514383.102, 514524.429), stdev = 79.254
[info]   CI (99.9%): [514077.924, 514688.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.007 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.410 ±(99.9%) 3.528 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.410, 2.049), stdev = 0.916
[info]   CI (99.9%): [≈ 0, 3.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   876.030 ±(99.9%) 717.683 MB/sec [Average]
[info]   (min, avg, max) = (671.577, 876.030, 1020.808), stdev = 186.380
[info]   CI (99.9%): [158.347, 1593.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   491166.829 ±(99.9%) 324851.117 B/op [Average]
[info]   (min, avg, max) = (360001.569, 491166.829, 553577.832), stdev = 84362.803
[info]   CI (99.9%): [166315.712, 816017.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.199 ±(99.9%) 6.125 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.199, 3.997), stdev = 1.591
[info]   CI (99.9%): [≈ 0, 7.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   661.390 ±(99.9%) 3257.032 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 661.390, 2142.866), stdev = 845.841
[info]   CI (99.9%): [≈ 0, 3918.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.time":
[info]   111.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 22.200, 49.000), stdev = 16.529
[info]   CI (99.9%): [111.000, 111.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala
[info] # Run progress: 99.09% complete, ETA 00:00:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_55ac30bf/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 21686.432 ops/s
[info] # Warmup Iteration   2: 54623.350 ops/s
[info] # Warmup Iteration   3: 54752.031 ops/s
[info] Iteration   1: 54964.822 ops/s
[info]                  ·gc.alloc.rate:                   701.800 MB/sec
[info]                  ·gc.alloc.rate.norm:              20099.960 B/op
[info]                  ·gc.churn.G1_Old_Gen:             670.617 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        19206.854 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 19.073 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 55487.585 ops/s
[info]                  ·gc.alloc.rate:            708.566 MB/sec
[info]                  ·gc.alloc.rate.norm:       20100.036 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.057 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19007.648 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 54878.841 ops/s
[info]                  ·gc.alloc.rate:            700.945 MB/sec
[info]                  ·gc.alloc.rate.norm:       20099.934 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.197 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19218.194 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 53756.940 ops/s
[info]                  ·gc.alloc.rate:                   686.418 MB/sec
[info]                  ·gc.alloc.rate.norm:              20100.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             670.012 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        19619.601 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 19.503 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 53355.560 ops/s
[info]                  ·gc.alloc.rate:                   681.603 MB/sec
[info]                  ·gc.alloc.rate.norm:              20100.086 B/op
[info]                  ·gc.churn.G1_Old_Gen:             671.654 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        19806.698 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 98.248 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala":
[info]   54488.750 ±(99.9%) 3442.050 ops/s [Average]
[info]   (min, avg, max) = (53355.560, 54488.750, 55487.585), stdev = 893.889
[info]   CI (99.9%): [51046.700, 57930.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   695.866 ±(99.9%) 43.693 MB/sec [Average]
[info]   (min, avg, max) = (681.603, 695.866, 708.566), stdev = 11.347
[info]   CI (99.9%): [652.174, 739.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   20100.004 ±(99.9%) 0.233 B/op [Average]
[info]   (min, avg, max) = (20099.934, 20100.004, 20100.086), stdev = 0.060
[info]   CI (99.9%): [20099.771, 20100.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   670.507 ±(99.9%) 2.633 MB/sec [Average]
[info]   (min, avg, max) = (670.012, 670.507, 671.654), stdev = 0.684
[info]   CI (99.9%): [667.874, 673.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   19371.799 ±(99.9%) 1268.303 B/op [Average]
[info]   (min, avg, max) = (19007.648, 19371.799, 19806.698), stdev = 329.374
[info]   CI (99.9%): [18103.496, 20640.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 5.321 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.332), stdev = 1.382
[info]   CI (99.9%): [≈ 0, 6.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   27.365 ±(99.9%) 157.036 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 27.365, 98.248), stdev = 40.782
[info]   CI (99.9%): [≈ 0, 184.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.time":
[info]   53.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 10.600, 14.000), stdev = 1.949
[info]   CI (99.9%): [53.000, 53.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala
[info] # Run progress: 99.39% complete, ETA 00:00:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 59852.461 ops/s
[info] # Warmup Iteration   2: 75351.232 ops/s
[info] # Warmup Iteration   3: 73623.869 ops/s
[info] Iteration   1: 74634.229 ops/s
[info]                  ·gc.alloc.rate:            489.372 MB/sec
[info]                  ·gc.alloc.rate.norm:       10320.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.386 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7093.800 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 75374.220 ops/s
[info]                  ·gc.alloc.rate:            494.306 MB/sec
[info]                  ·gc.alloc.rate.norm:       10320.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.885 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14048.334 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 76214.718 ops/s
[info]                  ·gc.alloc.rate:            499.654 MB/sec
[info]                  ·gc.alloc.rate.norm:       10320.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.330 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6946.672 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 74822.485 ops/s
[info]                  ·gc.alloc.rate:            490.722 MB/sec
[info]                  ·gc.alloc.rate.norm:       10320.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.924 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14151.769 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 75747.478 ops/s
[info]                  ·gc.alloc.rate:            496.649 MB/sec
[info]                  ·gc.alloc.rate.norm:       10320.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.381 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6989.768 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala":
[info]   75358.626 ±(99.9%) 2507.757 ops/s [Average]
[info]   (min, avg, max) = (74634.229, 75358.626, 76214.718), stdev = 651.257
[info]   CI (99.9%): [72850.869, 77866.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   494.140 ±(99.9%) 16.239 MB/sec [Average]
[info]   (min, avg, max) = (489.372, 494.140, 499.654), stdev = 4.217
[info]   CI (99.9%): [477.901, 510.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   10320.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10320.005, 10320.005, 10320.006), stdev = 0.001
[info]   CI (99.9%): [10320.005, 10320.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   470.981 ±(99.9%) 709.788 MB/sec [Average]
[info]   (min, avg, max) = (336.330, 470.981, 672.924), stdev = 184.330
[info]   CI (99.9%): [≈ 0, 1180.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   9846.069 ±(99.9%) 14955.430 B/op [Average]
[info]   (min, avg, max) = (6946.672, 9846.069, 14151.769), stdev = 3883.878
[info]   CI (99.9%): [≈ 0, 24801.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 6.000), stdev = 1.517
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 99.70% complete, ETA 00:00:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 72467.932 ops/s
[info] # Warmup Iteration   2: 89265.006 ops/s
[info] # Warmup Iteration   3: 90540.058 ops/s
[info] Iteration   1: 90733.124 ops/s
[info]                  ·gc.alloc.rate:      12.911 MB/sec
[info]                  ·gc.alloc.rate.norm: 224.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 90565.295 ops/s
[info]                  ·gc.alloc.rate:      12.888 MB/sec
[info]                  ·gc.alloc.rate.norm: 224.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 90586.494 ops/s
[info]                  ·gc.alloc.rate:      12.896 MB/sec
[info]                  ·gc.alloc.rate.norm: 224.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 90522.033 ops/s
[info]                  ·gc.alloc.rate:      12.881 MB/sec
[info]                  ·gc.alloc.rate.norm: 224.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 90512.478 ops/s
[info]                  ·gc.alloc.rate:      12.879 MB/sec
[info]                  ·gc.alloc.rate.norm: 224.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   90583.885 ±(99.9%) 341.978 ops/s [Average]
[info]   (min, avg, max) = (90512.478, 90583.885, 90733.124), stdev = 88.811
[info]   CI (99.9%): [90241.907, 90925.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   12.891 ±(99.9%) 0.050 MB/sec [Average]
[info]   (min, avg, max) = (12.879, 12.891, 12.911), stdev = 0.013
[info]   CI (99.9%): [12.841, 12.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   224.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (224.004, 224.005, 224.005), stdev = 0.001
[info]   CI (99.9%): [224.004, 224.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # Run complete. Total time: 01:10:44
[info] Benchmark                                                                                                Mode  Cnt         Score          Error   Units
[info] AdtBenchmark.readCirce                                                                                  thrpt    5    720856.593 ±    15893.484   ops/s
[info] AdtBenchmark.readCirce:·gc.alloc.rate                                                                   thrpt    5      1894.188 ±       41.415  MB/sec
[info] AdtBenchmark.readCirce:·gc.alloc.rate.norm                                                              thrpt    5      4136.001 ±        0.001    B/op
[info] AdtBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                       thrpt    5         0.011 ±        0.075  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                  thrpt    5         0.024 ±        0.164    B/op
[info] AdtBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                             thrpt    5      1904.017 ±      710.390  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                        thrpt    5      4157.805 ±     1565.201    B/op
[info] AdtBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                      thrpt    5         0.666 ±        5.735  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                                 thrpt    5         1.466 ±       12.627    B/op
[info] AdtBenchmark.readCirce:·gc.count                                                                        thrpt    5        28.000                 counts
[info] AdtBenchmark.readCirce:·gc.time                                                                         thrpt    5        31.000                     ms
[info] AdtBenchmark.readJacksonScala                                                                           thrpt    5   1411252.674 ±   114970.664   ops/s
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate                                                            thrpt    5      1004.192 ±       81.777  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                       thrpt    5      1120.000 ±        0.001    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                thrpt    5         0.037 ±        0.315  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           thrpt    5         0.043 ±        0.363    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                      thrpt    5      1013.388 ±       27.138  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                 thrpt    5      1130.779 ±      120.075    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                               thrpt    5         1.199 ±        7.564  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                          thrpt    5         1.320 ±        8.327    B/op
[info] AdtBenchmark.readJacksonScala:·gc.count                                                                 thrpt    5        15.000                 counts
[info] AdtBenchmark.readJacksonScala:·gc.time                                                                  thrpt    5        50.000                     ms
[info] AdtBenchmark.readJsoniterScala                                                                          thrpt    5   3371931.605 ±   250872.040   ops/s
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate                                                           thrpt    5       222.801 ±       16.606  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                      thrpt    5       104.000 ±        0.001    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                     thrpt    5       270.024 ±      581.249  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                thrpt    5       126.778 ±      273.066    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.count                                                                thrpt    5         4.000                 counts
[info] AdtBenchmark.readJsoniterScala:·gc.time                                                                 thrpt    5        11.000                     ms
[info] AdtBenchmark.readPlayJson                                                                               thrpt    5    153252.400 ±     2843.631   ops/s
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate                                                                thrpt    5      1188.566 ±       22.678  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate.norm                                                           thrpt    5     12208.003 ±        0.001    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                    thrpt    5         0.026 ±        0.158  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                               thrpt    5         0.263 ±        1.620    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                          thrpt    5      1150.124 ±      711.328  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                     thrpt    5     11817.756 ±     7447.144    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                   thrpt    5         1.199 ±        6.386  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                              thrpt    5        12.331 ±       65.587    B/op
[info] AdtBenchmark.readPlayJson:·gc.count                                                                     thrpt    5        17.000                 counts
[info] AdtBenchmark.readPlayJson:·gc.time                                                                      thrpt    5        53.000                     ms
[info] AdtBenchmark.writeCirce                                                                                 thrpt    5    536471.254 ±    17105.309   ops/s
[info] AdtBenchmark.writeCirce:·gc.alloc.rate                                                                  thrpt    5      1665.924 ±       52.969  MB/sec
[info] AdtBenchmark.writeCirce:·gc.alloc.rate.norm                                                             thrpt    5      4888.001 ±        0.001    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                      thrpt    5         0.006 ±        0.045  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                 thrpt    5         0.018 ±        0.134    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                            thrpt    5      1698.438 ±       28.971  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                       thrpt    5      4983.594 ±      134.216    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                     thrpt    5         0.666 ±        5.734  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                                thrpt    5         1.970 ±       16.960    B/op
[info] AdtBenchmark.writeCirce:·gc.count                                                                       thrpt    5        25.000                 counts
[info] AdtBenchmark.writeCirce:·gc.time                                                                        thrpt    5        35.000                     ms
[info] AdtBenchmark.writeJacksonScala                                                                          thrpt    5   1681803.510 ±    44359.009   ops/s
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate                                                           thrpt    5       700.901 ±       18.438  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                      thrpt    5       656.000 ±        0.001    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                     thrpt    5       738.511 ±      577.851  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                thrpt    5       691.812 ±      558.610    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                              thrpt    5         0.799 ±        6.883  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                         thrpt    5         0.751 ±        6.468    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.count                                                                thrpt    5        11.000                 counts
[info] AdtBenchmark.writeJacksonScala:·gc.time                                                                 thrpt    5        48.000                     ms
[info] AdtBenchmark.writeJsoniterScala                                                                         thrpt    5   6271390.446 ±   126002.613   ops/s
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate                                                          thrpt    5       318.733 ±        6.435  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                     thrpt    5        80.000 ±        0.001    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                    thrpt    5       269.347 ±      579.791  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                               thrpt    5        67.677 ±      145.691    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.count                                                               thrpt    5         4.000                 counts
[info] AdtBenchmark.writeJsoniterScala:·gc.time                                                                thrpt    5        12.000                     ms
[info] AdtBenchmark.writePlayJson                                                                              thrpt    5    296554.182 ±    15826.867   ops/s
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate                                                               thrpt    5       973.870 ±       52.179  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate.norm                                                          thrpt    5      5168.001 ±        0.001    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   thrpt    5         0.037 ±        0.232  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              thrpt    5         0.196 ±        1.221    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                         thrpt    5       944.643 ±      570.185  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                    thrpt    5      5017.359 ±     3130.341    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                  thrpt    5         1.064 ±        6.425  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                             thrpt    5         5.622 ±       33.979    B/op
[info] AdtBenchmark.writePlayJson:·gc.count                                                                    thrpt    5        14.000                 counts
[info] AdtBenchmark.writePlayJson:·gc.time                                                                     thrpt    5        48.000                     ms
[info] AnyRefsBenchmark.readCirce                                                                              thrpt    5   1471081.552 ±    37887.936   ops/s
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate                                                               thrpt    5      2288.318 ±       58.484  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm                                                          thrpt    5      2448.000 ±        0.001    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   thrpt    5         0.019 ±        0.146  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              thrpt    5         0.020 ±        0.155    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                         thrpt    5      2314.857 ±      587.839  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                    thrpt    5      2476.577 ±      638.728    B/op
[info] AnyRefsBenchmark.readCirce:·gc.count                                                                    thrpt    5        34.000                 counts
[info] AnyRefsBenchmark.readCirce:·gc.time                                                                     thrpt    5        33.000                     ms
[info] AnyRefsBenchmark.readJacksonScala                                                                       thrpt    5   2127362.253 ±    81877.189   ops/s
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate                                                        thrpt    5      1491.994 ±       57.572  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                   thrpt    5      1104.000 ±        0.001    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                            thrpt    5         0.014 ±        0.112  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       thrpt    5         0.010 ±        0.083    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                  thrpt    5      1493.073 ±      725.717  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                             thrpt    5      1105.367 ±      557.625    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                           thrpt    5         1.066 ±        7.821  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                      thrpt    5         0.796 ±        5.846    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.count                                                             thrpt    5        22.000                 counts
[info] AnyRefsBenchmark.readJacksonScala:·gc.time                                                              thrpt    5        37.000                     ms
[info] AnyRefsBenchmark.readJsoniterScala                                                                      thrpt    5   9499642.935 ±   665613.045   ops/s
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate                                                       thrpt    5      1207.017 ±       84.275  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                  thrpt    5       200.000 ±        0.001    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                           thrpt    5         0.019 ±        0.157  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      thrpt    5         0.003 ±        0.026    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                 thrpt    5      1221.690 ±      705.106  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                            thrpt    5       202.170 ±      107.827    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                          thrpt    5         0.799 ±        5.560  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                     thrpt    5         0.132 ±        0.926    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.count                                                            thrpt    5        18.000                 counts
[info] AnyRefsBenchmark.readJsoniterScala:·gc.time                                                             thrpt    5        34.000                     ms
[info] AnyRefsBenchmark.readPlayJson                                                                           thrpt    5    596648.532 ±    17046.165   ops/s
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate                                                            thrpt    5      1534.460 ±       43.386  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                       thrpt    5      4048.001 ±        0.001    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                thrpt    5         0.028 ±        0.237  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           thrpt    5         0.074 ±        0.623    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                      thrpt    5      1560.381 ±      707.396  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                 thrpt    5      4118.174 ±     1931.557    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                               thrpt    5         1.066 ±        6.688  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                          thrpt    5         2.808 ±       17.563    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.count                                                                 thrpt    5        23.000                 counts
[info] AnyRefsBenchmark.readPlayJson:·gc.time                                                                  thrpt    5        43.000                     ms
[info] AnyRefsBenchmark.writeCirce                                                                             thrpt    5   1730643.716 ±   132384.490   ops/s
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate                                                              thrpt    5      1548.297 ±      118.248  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm                                                         thrpt    5      1408.000 ±        0.001    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  thrpt    5         0.015 ±        0.121  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             thrpt    5         0.013 ±        0.109    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                        thrpt    5      1562.505 ±      705.940  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                   thrpt    5      1422.218 ±      683.908    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                 thrpt    5         0.666 ±        5.736  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                            thrpt    5         0.628 ±        5.407    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.count                                                                   thrpt    5        23.000                 counts
[info] AnyRefsBenchmark.writeCirce:·gc.time                                                                    thrpt    5        34.000                     ms
[info] AnyRefsBenchmark.writeJacksonScala                                                                      thrpt    5   4082389.348 ±   225070.564   ops/s
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate                                                       thrpt    5      1120.381 ±       61.507  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                  thrpt    5       432.000 ±        0.001    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                           thrpt    5         0.016 ±        0.086  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      thrpt    5         0.006 ±        0.034    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                 thrpt    5      1149.573 ±      712.190  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                            thrpt    5       443.347 ±      276.565    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                          thrpt    5         0.933 ±        8.030  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                     thrpt    5         0.366 ±        3.149    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.count                                                            thrpt    5        17.000                 counts
[info] AnyRefsBenchmark.writeJacksonScala:·gc.time                                                             thrpt    5        41.000                     ms
[info] AnyRefsBenchmark.writeJsoniterScala                                                                     thrpt    5  20928668.687 ±   116378.141   ops/s
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                      thrpt    5       638.250 ±        3.225  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                 thrpt    5        48.000 ±        0.001    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                thrpt    5       673.301 ±        2.065  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                           thrpt    5        50.636 ±        0.308    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                         thrpt    5         0.266 ±        1.405  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                    thrpt    5         0.020 ±        0.106    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.count                                                           thrpt    5        10.000                 counts
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.time                                                            thrpt    5        30.000                     ms
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc                                                             thrpt    5  18129302.404 ±  1280770.040   ops/s
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                              thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                         thrpt    5        ≈ 10⁻⁵                   B/op
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                   thrpt    5           ≈ 0                 counts
[info] AnyRefsBenchmark.writePlayJson                                                                          thrpt    5   1238460.531 ±    64401.728   ops/s
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate                                                           thrpt    5      1812.902 ±       94.302  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                      thrpt    5      2304.000 ±        0.001    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                               thrpt    5         0.037 ±        0.304  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          thrpt    5         0.046 ±        0.380    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                     thrpt    5      1834.569 ±      730.751  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                thrpt    5      2331.252 ±      906.776    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                              thrpt    5         0.933 ±        8.031  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                         thrpt    5         1.204 ±       10.369    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.count                                                                thrpt    5        27.000                 counts
[info] AnyRefsBenchmark.writePlayJson:·gc.time                                                                 thrpt    5        37.000                     ms
[info] ArrayOfBigDecimalsBenchmark.readCirce                                                                   thrpt    5     19738.117 ±      716.700   ops/s
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate                                                    thrpt    5      1234.664 ±       45.188  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm                                               thrpt    5     98456.022 ±        0.009    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                        thrpt    5         0.022 ±        0.073  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   thrpt    5         1.761 ±        5.871    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                              thrpt    5      1221.319 ±      715.559  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                         thrpt    5     97361.576 ±    56040.970    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                       thrpt    5         0.666 ±        5.734  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                  thrpt    5        53.867 ±      463.812    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.count                                                         thrpt    5        18.000                 counts
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.time                                                          thrpt    5        29.000                     ms
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala                                                            thrpt    5     31427.347 ±     1969.168   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate                                             thrpt    5       787.855 ±       49.652  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        thrpt    5     39455.808 ±        1.767    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.029 ±        0.247  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         1.422 ±       12.247    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                       thrpt    5       741.379 ±      576.407  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                  thrpt    5     37119.964 ±    28466.771    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                thrpt    5         1.066 ±        7.820  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                           thrpt    5        54.639 ±      403.234    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count                                                  thrpt    5        11.000                 counts
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time                                                   thrpt    5        43.000                     ms
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala                                                           thrpt    5     32125.902 ±      360.330   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate                                            thrpt    5       431.552 ±        4.817  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       thrpt    5     21144.014 ±        0.007    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                      thrpt    5       471.829 ±      710.662  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                 thrpt    5     23121.008 ±    34868.919    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count                                                 thrpt    5         7.000                 counts
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time                                                  thrpt    5        20.000                     ms
[info] ArrayOfBigDecimalsBenchmark.readPlayJson                                                                thrpt    5     25078.754 ±      543.726   ops/s
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate                                                 thrpt    5      1328.920 ±       28.614  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            thrpt    5     83400.018 ±        0.009    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.021 ±        0.134  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         1.327 ±        8.408    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                           thrpt    5      1356.734 ±       27.291  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                      thrpt    5     85146.491 ±     1614.074    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.800 ±        6.884  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                               thrpt    5        50.330 ±      433.353    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count                                                      thrpt    5        20.000                 counts
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time                                                       thrpt    5        35.000                     ms
[info] ArrayOfBigDecimalsBenchmark.writeCirce                                                                  thrpt    5     27763.861 ±     1130.383   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate                                                   thrpt    5      1577.033 ±       64.299  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm                                              thrpt    5     89408.026 ±        0.096    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                       thrpt    5         0.023 ±        0.155  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  thrpt    5         1.275 ±        8.745    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                             thrpt    5      1562.716 ±      731.468  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                        thrpt    5     88518.741 ±    38256.519    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                      thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                 thrpt    5        38.098 ±      328.037    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count                                                        thrpt    5        23.000                 counts
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time                                                         thrpt    5        30.000                     ms
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala                                                           thrpt    5     27896.528 ±     1341.405   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate                                            thrpt    5      1528.128 ±       73.259  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       thrpt    5     86208.026 ±        0.096    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5         0.023 ±        0.166  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5         1.278 ±        9.344    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                      thrpt    5      1561.901 ±      704.851  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                 thrpt    5     88055.605 ±    37178.285    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                               thrpt    5         0.799 ±        6.884  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                          thrpt    5        45.357 ±      390.537    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count                                                 thrpt    5        23.000                 counts
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time                                                  thrpt    5        47.000                     ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala                                                          thrpt    5     30299.214 ±     1838.810   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           thrpt    5      1563.541 ±       94.627  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      thrpt    5     81224.015 ±        0.006    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'               thrpt    5         0.019 ±        0.126  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm          thrpt    5         1.021 ±        6.627    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                     thrpt    5      1562.443 ±      707.006  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                thrpt    5     81206.929 ±    37972.369    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                              thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                         thrpt    5        42.023 ±      361.830    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count                                                thrpt    5        23.000                 counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time                                                 thrpt    5        37.000                     ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc                                                  thrpt    5     30487.000 ±     1530.073   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   thrpt    5      1514.304 ±       75.322  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              thrpt    5     78168.024 ±        0.091    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'       thrpt    5         0.016 ±        0.101  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm  thrpt    5         0.815 ±        5.194    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                             thrpt    5      1494.615 ±      729.232  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                        thrpt    5     77123.265 ±    36276.419    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space                      thrpt    5         0.800 ±        6.885  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm                 thrpt    5        42.247 ±      363.761    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        thrpt    5        22.000                 counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                         thrpt    5        29.000                     ms
[info] ArrayOfBigDecimalsBenchmark.writePlayJson                                                               thrpt    5      7795.596 ±      397.059   ops/s
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate                                                thrpt    5      1014.512 ±       52.003  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm                                           thrpt    5    204776.054 ±        0.006    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.011 ±        0.089  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         2.103 ±       17.613    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                          thrpt    5      1082.190 ±      602.561  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                     thrpt    5    218306.120 ±   115693.389    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.800 ±        6.884  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                              thrpt    5       163.648 ±     1409.061    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count                                                     thrpt    5        16.000                 counts
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time                                                      thrpt    5        60.000                     ms
[info] ArrayOfBigIntsBenchmark.readCirce                                                                       thrpt    5     18923.190 ±      982.896   ops/s
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate                                                        thrpt    5      1469.930 ±       75.797  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm                                                   thrpt    5    122264.044 ±        0.116    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                            thrpt    5         0.009 ±        0.028  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       thrpt    5         0.767 ±        2.317    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                  thrpt    5      1494.251 ±      701.346  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                             thrpt    5    124451.059 ±    64424.511    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                           thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                      thrpt    5        56.387 ±      485.511    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.count                                                             thrpt    5        22.000                 counts
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.time                                                              thrpt    5        31.000                     ms
[info] ArrayOfBigIntsBenchmark.readJacksonScala                                                                thrpt    5     40312.059 ±      937.280   ops/s
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate                                                 thrpt    5       994.427 ±       22.627  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                            thrpt    5     38823.847 ±        1.404    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.025 ±        0.134  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         0.957 ±        5.242    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                           thrpt    5      1014.820 ±       22.852  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                      thrpt    5     39620.096 ±      268.646    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.799 ±        6.883  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                               thrpt    5        31.348 ±      269.919    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count                                                      thrpt    5        15.000                 counts
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time                                                       thrpt    5        41.000                     ms
[info] ArrayOfBigIntsBenchmark.readJsoniterScala                                                               thrpt    5     56111.600 ±     2262.953   ops/s
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                                thrpt    5       724.937 ±       29.027  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                           thrpt    5     20336.007 ±        0.001    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.004 ±        0.035  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         0.114 ±        0.982    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                          thrpt    5       742.113 ±      586.053  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                     thrpt    5     20823.718 ±    16580.937    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                              thrpt    5        18.725 ±      161.230    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count                                                     thrpt    5        11.000                 counts
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time                                                      thrpt    5        30.000                     ms
[info] ArrayOfBigIntsBenchmark.readPlayJson                                                                    thrpt    5     29291.456 ±     1271.961   ops/s
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate                                                     thrpt    5      1956.532 ±       85.366  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                thrpt    5    105128.015 ±        0.005    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                         thrpt    5         0.011 ±        0.038  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    thrpt    5         0.600 ±        2.038    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                               thrpt    5      1972.337 ±      582.486  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                          thrpt    5    105966.358 ±    30414.105    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                        thrpt    5         0.932 ±        8.029  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                   thrpt    5        50.347 ±      433.499    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.count                                                          thrpt    5        29.000                 counts
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.time                                                           thrpt    5        32.000                     ms
[info] ArrayOfBigIntsBenchmark.writeJacksonScala                                                               thrpt    5     32176.533 ±     1113.875   ops/s
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                                thrpt    5      1822.355 ±       62.194  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                           thrpt    5     89144.014 ±        0.006    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.009 ±        0.074  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         0.458 ±        3.607    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                          thrpt    5      1836.233 ±      708.194  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                     thrpt    5     89815.192 ±    34095.943    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.932 ±        8.028  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                              thrpt    5        45.665 ±      393.193    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count                                                     thrpt    5        27.000                 counts
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time                                                      thrpt    5        30.000                     ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala                                                              thrpt    5     45060.535 ±     1604.791   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                               thrpt    5      1731.425 ±       61.884  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                          thrpt    5     60480.009 ±        0.001    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                   thrpt    5         0.019 ±        0.151  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm              thrpt    5         0.681 ±        5.335    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                         thrpt    5      1700.335 ±       12.969  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                    thrpt    5     59397.427 ±     1794.484    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                  thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                             thrpt    5        28.288 ±      243.571    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count                                                    thrpt    5        25.000                 counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time                                                     thrpt    5        25.000                     ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc                                                      thrpt    5     45184.375 ±     1356.455   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                       thrpt    5      1657.495 ±       49.236  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                  thrpt    5     57736.009 ±        0.001    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'           thrpt    5         0.013 ±        0.102  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm      thrpt    5         0.458 ±        3.528    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                                 thrpt    5      1632.374 ±      583.324  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                            thrpt    5     56880.338 ±    21137.258    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space                          thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm                     thrpt    5        27.646 ±      238.037    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                            thrpt    5        24.000                 counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                             thrpt    5        27.000                     ms
[info] ArrayOfBooleansBenchmark.readCirce                                                                      thrpt    5    339828.229 ±     7446.900   ops/s
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                       thrpt    5      1713.553 ±       38.493  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                                  thrpt    5      7936.001 ±        0.001    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                           thrpt    5         0.030 ±        0.236  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      thrpt    5         0.142 ±        1.104    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                 thrpt    5      1700.663 ±       12.395  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                            thrpt    5      7876.455 ±      129.289    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                          thrpt    5         0.666 ±        5.734  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                     thrpt    5         3.113 ±       26.801    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.count                                                            thrpt    5        25.000                 counts
[info] ArrayOfBooleansBenchmark.readCirce:·gc.time                                                             thrpt    5        24.000                     ms
[info] ArrayOfBooleansBenchmark.readJacksonScala                                                               thrpt    5    588404.065 ±    17044.189   ops/s
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                                thrpt    5       499.415 ±       14.687  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                           thrpt    5      1336.001 ±        0.001    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                          thrpt    5       538.156 ±      709.194  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                     thrpt    5      1441.214 ±     1916.294    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.count                                                     thrpt    5         8.000                 counts
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.time                                                      thrpt    5        31.000                     ms
[info] ArrayOfBooleansBenchmark.readJsoniterScala                                                              thrpt    5   1701880.911 ±    85953.558   ops/s
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                               thrpt    5       328.683 ±       16.528  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                          thrpt    5       304.000 ±        0.001    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                         thrpt    5       337.023 ±        0.073  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                    thrpt    5       311.757 ±       15.644    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count                                                    thrpt    5         5.000                 counts
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time                                                     thrpt    5        15.000                     ms
[info] ArrayOfBooleansBenchmark.readPlayJson                                                                   thrpt    5     92344.916 ±      564.425   ops/s
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                    thrpt    5      3354.606 ±       18.632  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                               thrpt    5     57176.004 ±        0.001    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                        thrpt    5         0.002 ±        0.003  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   thrpt    5         0.041 ±        0.060    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                              thrpt    5      3335.736 ±      584.692  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                         thrpt    5     56854.686 ±     9991.646    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.count                                                         thrpt    5        49.000                 counts
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.time                                                          thrpt    5        41.000                     ms
[info] ArrayOfBooleansBenchmark.writeCirce                                                                     thrpt    5    331066.677 ±     5962.298   ops/s
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                      thrpt    5       509.823 ±        9.237  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                                 thrpt    5      2424.001 ±        0.001    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                thrpt    5       471.837 ±      710.841  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                           thrpt    5      2244.807 ±     3399.258    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.count                                                           thrpt    5         7.000                 counts
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.time                                                            thrpt    5        22.000                     ms
[info] ArrayOfBooleansBenchmark.writeJacksonScala                                                              thrpt    5    983218.800 ±     5900.805   ops/s
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                               thrpt    5       694.601 ±        4.343  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                          thrpt    5      1112.000 ±        0.001    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                         thrpt    5       672.728 ±        0.219  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                    thrpt    5      1076.986 ±        6.460    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                  thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                             thrpt    5         1.281 ±       11.028    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count                                                    thrpt    5        10.000                 counts
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time                                                     thrpt    5        40.000                     ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScala                                                             thrpt    5   2445734.896 ±   118005.279   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                              thrpt    5      1131.332 ±       54.707  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                         thrpt    5       728.000 ±        0.001    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                  thrpt    5         0.033 ±        0.279  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm             thrpt    5         0.021 ±        0.182    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                        thrpt    5      1152.332 ±      710.431  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                   thrpt    5       742.052 ±      472.103    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                 thrpt    5         0.933 ±        6.689  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                            thrpt    5         0.590 ±        4.212    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count                                                   thrpt    5        17.000                 counts
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time                                                    thrpt    5        29.000                     ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                     thrpt    5   1984636.688 ±    20570.735   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                      thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                 thrpt    5        ≈ 10⁻⁴                   B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                           thrpt    5           ≈ 0                 counts
[info] ArrayOfBooleansBenchmark.writePlayJson                                                                  thrpt    5    413561.497 ±    21769.833   ops/s
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                                   thrpt    5       483.532 ±       25.684  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                              thrpt    5      1840.001 ±        0.001    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                             thrpt    5       538.271 ±      709.339  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                        thrpt    5      2050.351 ±     2723.993    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.count                                                        thrpt    5         8.000                 counts
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.time                                                         thrpt    5        29.000                     ms
[info] ArrayOfBytesBenchmark.readCirce                                                                         thrpt    5    162978.655 ±     3493.688   ops/s
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate                                                          thrpt    5      1954.872 ±       41.283  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm                                                     thrpt    5     18880.003 ±        0.001    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                              thrpt    5         0.018 ±        0.101  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         thrpt    5         0.170 ±        0.964    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                    thrpt    5      1974.086 ±      586.536  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                               thrpt    5     19066.758 ±     5720.956    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.count                                                               thrpt    5        29.000                 counts
[info] ArrayOfBytesBenchmark.readCirce:·gc.time                                                                thrpt    5        28.000                     ms
[info] ArrayOfBytesBenchmark.readJacksonScala                                                                  thrpt    5    367732.323 ±    22844.147   ops/s
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate                                                   thrpt    5       312.114 ±       19.446  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                              thrpt    5      1336.001 ±        0.001    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                             thrpt    5       336.358 ±        0.232  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                        thrpt    5      1440.083 ±       91.293    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.count                                                        thrpt    5         5.000                 counts
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.time                                                         thrpt    5        21.000                     ms
[info] ArrayOfBytesBenchmark.readJsoniterScala                                                                 thrpt    5    870603.950 ±     5701.876   ops/s
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate                                                  thrpt    5       168.159 ±        1.058  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                             thrpt    5       304.000 ±        0.001    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                            thrpt    5       202.351 ±      711.293  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                       thrpt    5       365.777 ±     1285.758    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.count                                                       thrpt    5         3.000                 counts
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.time                                                        thrpt    5         9.000                     ms
[info] ArrayOfBytesBenchmark.readPlayJson                                                                      thrpt    5     76904.649 ±     3575.175   ops/s
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate                                                       thrpt    5      3274.341 ±      151.481  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                  thrpt    5     67016.005 ±        0.001    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                           thrpt    5         0.007 ±        0.010  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      thrpt    5         0.144 ±        0.202    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                 thrpt    5      3267.539 ±      717.751  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                            thrpt    5     66864.501 ±    13312.441    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.count                                                            thrpt    5        48.000                 counts
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.time                                                             thrpt    5        39.000                     ms
[info] ArrayOfBytesBenchmark.writeCirce                                                                        thrpt    5    261303.450 ±    16544.935   ops/s
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate                                                         thrpt    5      1157.020 ±       71.858  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm                                                    thrpt    5      6968.002 ±        0.001    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                             thrpt    5         0.024 ±        0.205  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        thrpt    5         0.146 ±        1.253    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                   thrpt    5      1152.093 ±      708.559  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                              thrpt    5      6942.196 ±     4365.111    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                            thrpt    5         0.666 ±        5.734  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                       thrpt    5         3.973 ±       34.208    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.count                                                              thrpt    5        17.000                 counts
[info] ArrayOfBytesBenchmark.writeCirce:·gc.time                                                               thrpt    5        31.000                     ms
[info] ArrayOfBytesBenchmark.writeJacksonScala                                                                 thrpt    5   1660252.486 ±   112184.674   ops/s
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate                                                  thrpt    5       852.312 ±       57.855  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                             thrpt    5       808.000 ±        0.001    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                      thrpt    5         0.019 ±        0.103  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 thrpt    5         0.018 ±        0.099    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                            thrpt    5       877.669 ±      713.456  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                       thrpt    5       831.902 ±      671.232    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                     thrpt    5         0.933 ±        6.689  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                thrpt    5         0.898 ±        6.467    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.count                                                       thrpt    5        13.000                 counts
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.time                                                        thrpt    5        41.000                     ms
[info] ArrayOfBytesBenchmark.writeJsoniterScala                                                                thrpt    5   2172329.907 ±    44502.646   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate                                                 thrpt    5       585.330 ±       11.823  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                            thrpt    5       424.000 ±        0.001    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                           thrpt    5       538.474 ±      709.156  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                      thrpt    5       389.670 ±      508.818    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.399 ±        1.404  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                               thrpt    5         0.289 ±        1.015    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count                                                      thrpt    5         8.000                 counts
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time                                                       thrpt    5        23.000                     ms
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc                                                        thrpt    5   2502245.226 ±    25544.988   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                         thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                    thrpt    5        ≈ 10⁻⁴                   B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                              thrpt    5           ≈ 0                 counts
[info] ArrayOfBytesBenchmark.writePlayJson                                                                     thrpt    5     39363.534 ±      945.671   ops/s
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate                                                      thrpt    5      1666.157 ±       40.238  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm                                                 thrpt    5     66608.710 ±        6.017    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                          thrpt    5         0.031 ±        0.162  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     thrpt    5         1.245 ±        6.510    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                thrpt    5      1698.984 ±       28.534  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                           thrpt    5     67922.672 ±     1638.684    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                         thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                    thrpt    5        32.080 ±      276.222    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.count                                                           thrpt    5        25.000                 counts
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.time                                                            thrpt    5        33.000                     ms
[info] ArrayOfDoublesBenchmark.readCirce                                                                       thrpt    5     25636.482 ±     1128.787   ops/s
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate                                                        thrpt    5      1501.461 ±       66.657  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm                                                   thrpt    5     92168.017 ±        0.009    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                            thrpt    5         0.027 ±        0.163  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       thrpt    5         1.666 ±        9.886    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                  thrpt    5      1494.924 ±      726.726  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                             thrpt    5     91742.998 ±    43453.296    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                           thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                      thrpt    5        41.587 ±      358.077    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.count                                                             thrpt    5        22.000                 counts
[info] ArrayOfDoublesBenchmark.readCirce:·gc.time                                                              thrpt    5        28.000                     ms
[info] ArrayOfDoublesBenchmark.readJacksonScala                                                                thrpt    5     58987.854 ±     2543.072   ops/s
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate                                                 thrpt    5       974.624 ±       41.973  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                            thrpt    5     26008.007 ±        0.001    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.030 ±        0.167  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         0.794 ±        4.527    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                           thrpt    5       946.566 ±      572.486  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                      thrpt    5     25280.223 ±    15750.584    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                               thrpt    5        21.687 ±      186.733    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.count                                                      thrpt    5        14.000                 counts
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.time                                                       thrpt    5        38.000                     ms
[info] ArrayOfDoublesBenchmark.readJsoniterScala                                                               thrpt    5     82087.104 ±      892.237   ops/s
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate                                                thrpt    5       528.987 ±        5.913  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                           thrpt    5     10144.005 ±        0.001    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                          thrpt    5       539.210 ±      710.661  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                     thrpt    5     10348.026 ±    13725.128    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count                                                     thrpt    5         8.000                 counts
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time                                                      thrpt    5        23.000                     ms
[info] ArrayOfDoublesBenchmark.readPlayJson                                                                    thrpt    5     32795.685 ±     1546.817   ops/s
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate                                                     thrpt    5      1713.779 ±       80.810  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                thrpt    5     82248.013 ±        0.008    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                         thrpt    5         0.024 ±        0.160  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    thrpt    5         1.154 ±        7.840    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                               thrpt    5      1699.508 ±       21.125  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                          thrpt    5     81570.902 ±     3098.169    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                        thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                   thrpt    5        39.062 ±      336.332    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.count                                                          thrpt    5        25.000                 counts
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.time                                                           thrpt    5        32.000                     ms
[info] ArrayOfDoublesBenchmark.writeCirce                                                                      thrpt    5     38060.988 ±      323.154   ops/s
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate                                                       thrpt    5       426.374 ±        3.869  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm                                                  thrpt    5     17632.011 ±        0.002    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                 thrpt    5       404.442 ±      580.242  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                            thrpt    5     16725.558 ±    24004.216    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.count                                                            thrpt    5         6.000                 counts
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.time                                                             thrpt    5        19.000                     ms
[info] ArrayOfDoublesBenchmark.writeJacksonScala                                                               thrpt    5     40622.355 ±      442.156   ops/s
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate                                                thrpt    5       366.952 ±        3.830  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                           thrpt    5     14216.011 ±        0.006    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                          thrpt    5       403.394 ±      578.264  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                     thrpt    5     15640.241 ±    22641.851    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                              thrpt    5         5.157 ±       44.407    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count                                                     thrpt    5         6.000                 counts
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time                                                      thrpt    5        25.000                     ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScala                                                              thrpt    5     44424.543 ±      335.623   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate                                               thrpt    5       390.396 ±        3.077  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                          thrpt    5     13832.009 ±        0.001    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                         thrpt    5       403.763 ±      578.809  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                    thrpt    5     14311.188 ±    20615.382    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                  thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                             thrpt    5         4.720 ±       40.639    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count                                                    thrpt    5         6.000                 counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time                                                     thrpt    5        17.000                     ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc                                                      thrpt    5     44515.478 ±     1101.127   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                       thrpt    5       340.323 ±        8.459  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                  thrpt    5     12032.009 ±        0.001    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                                 thrpt    5       336.674 ±        1.398  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                            thrpt    5     11903.369 ±      276.441    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space                          thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm                     thrpt    5         4.758 ±       40.969    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                            thrpt    5         5.000                 counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                             thrpt    5        15.000                     ms
[info] ArrayOfDurationsBenchmark.readCirce                                                                     thrpt    5     18148.853 ±     6369.546   ops/s
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate                                                      thrpt    5       680.397 ±      238.731  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm                                                 thrpt    5     59007.995 ±       30.556    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                thrpt    5       674.719 ±      918.347  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                           thrpt    5     58014.143 ±    71023.202    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                         thrpt    5         0.400 ±        1.405  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                    thrpt    5        34.325 ±      121.526    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.count                                                           thrpt    5        10.000                 counts
[info] ArrayOfDurationsBenchmark.readCirce:·gc.time                                                            thrpt    5        32.000                     ms
[info] ArrayOfDurationsBenchmark.readJacksonScala                                                              thrpt    5     18104.067 ±     1137.410   ops/s
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate                                               thrpt    5       513.845 ±       32.923  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          thrpt    5     44674.520 ±       43.633    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                         thrpt    5       538.176 ±      709.338  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                    thrpt    5     46841.001 ±    62257.789    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.count                                                    thrpt    5         8.000                 counts
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.time                                                     thrpt    5        34.000                     ms
[info] ArrayOfDurationsBenchmark.readJsoniterScala                                                             thrpt    5     74619.140 ±     1381.099   ops/s
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate                                              thrpt    5       194.180 ±        3.617  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         thrpt    5      4096.006 ±        0.001    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                        thrpt    5       202.755 ±      712.714  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                   thrpt    5      4286.240 ±    15067.046    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count                                                   thrpt    5         3.000                 counts
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time                                                    thrpt    5         9.000                     ms
[info] ArrayOfDurationsBenchmark.readPlayJson                                                                  thrpt    5     15707.568 ±      564.490   ops/s
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate                                                   thrpt    5      1018.478 ±       36.505  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm                                              thrpt    5    102064.172 ±        1.241    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                       thrpt    5         0.023 ±        0.125  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  thrpt    5         2.336 ±       12.434    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                             thrpt    5      1014.611 ±       23.724  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                        thrpt    5    101686.506 ±     5431.884    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                      thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                 thrpt    5        79.088 ±      680.972    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.count                                                        thrpt    5        15.000                 counts
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.time                                                         thrpt    5        40.000                     ms
[info] ArrayOfDurationsBenchmark.writeCirce                                                                    thrpt    5     57531.828 ±     2606.221   ops/s
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate                                                     thrpt    5       871.589 ±       39.316  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm                                                thrpt    5     23848.007 ±        0.001    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                         thrpt    5         0.035 ±        0.194  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    thrpt    5         0.975 ±        5.322    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                               thrpt    5       879.273 ±      721.637  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                          thrpt    5     24085.262 ±    20282.263    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                        thrpt    5         0.799 ±        5.560  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                   thrpt    5        22.233 ±      155.408    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.count                                                          thrpt    5        13.000                 counts
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.time                                                           thrpt    5        34.000                     ms
[info] ArrayOfDurationsBenchmark.writeJacksonScala                                                             thrpt    5     85316.290 ±     6064.337   ops/s
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate                                              thrpt    5      1011.567 ±       71.978  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         thrpt    5     18664.005 ±        0.001    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                  thrpt    5         0.026 ±        0.143  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm             thrpt    5         0.489 ±        2.664    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                        thrpt    5      1014.478 ±       24.097  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                   thrpt    5     18721.151 ±      901.152    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                 thrpt    5         0.932 ±        6.688  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                            thrpt    5        17.405 ±      124.727    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.count                                                   thrpt    5        15.000                 counts
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.time                                                    thrpt    5        38.000                     ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScala                                                            thrpt    5    284179.844 ±    11626.271   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate                                             thrpt    5       450.649 ±       18.526  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        thrpt    5      2496.001 ±        0.001    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                       thrpt    5       471.067 ±      710.215  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                  thrpt    5      2613.271 ±     3990.913    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                           thrpt    5         0.731 ±        6.290    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count                                                  thrpt    5         7.000                 counts
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time                                                   thrpt    5        20.000                     ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc                                                    thrpt    5    329120.635 ±     9534.592   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          thrpt    5           ≈ 0                 counts
[info] ArrayOfDurationsBenchmark.writePlayJson                                                                 thrpt    5     77258.937 ±     2645.052   ops/s
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate                                                  thrpt    5      1053.946 ±       36.116  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm                                             thrpt    5     21472.005 ±        0.001    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                      thrpt    5         0.018 ±        0.110  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 thrpt    5         0.373 ±        2.267    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                            thrpt    5      1082.767 ±      600.219  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                       thrpt    5     22070.111 ±    12630.357    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                     thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                thrpt    5        16.405 ±      141.253    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.count                                                       thrpt    5        16.000                 counts
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.time                                                        thrpt    5        39.000                     ms
[info] ArrayOfEnumsBenchmark.readCirce                                                                         thrpt    5     27908.499 ±      279.883   ops/s
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate                                                          thrpt    5       579.991 ±        5.955  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                                     thrpt    5     32712.016 ±        0.006    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                    thrpt    5       606.634 ±      580.244  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                               thrpt    5     34225.656 ±    32867.561    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.count                                                               thrpt    5         9.000                 counts
[info] ArrayOfEnumsBenchmark.readCirce:·gc.time                                                                thrpt    5        30.000                     ms
[info] ArrayOfEnumsBenchmark.readJacksonScala                                                                  thrpt    5     85595.004 ±     4889.042   ops/s
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                                   thrpt    5      1124.933 ±       64.273  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                              thrpt    5     20688.005 ±        0.001    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                       thrpt    5         0.032 ±        0.275  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  thrpt    5         0.584 ±        5.026    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                             thrpt    5      1151.564 ±      709.973  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                        thrpt    5     21193.890 ±    13508.051    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                      thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                 thrpt    5        15.063 ±      129.693    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.count                                                        thrpt    5        17.000                 counts
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.time                                                         thrpt    5        45.000                     ms
[info] ArrayOfEnumsBenchmark.readJsoniterScala                                                                 thrpt    5    119066.052 ±     7429.886   ops/s
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                                                  thrpt    5       464.759 ±       28.836  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                             thrpt    5      6144.004 ±        0.001    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                            thrpt    5       471.849 ±      710.701  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                       thrpt    5      6228.555 ±     9255.886    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count                                                       thrpt    5         7.000                 counts
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time                                                        thrpt    5        20.000                     ms
[info] ArrayOfEnumsBenchmark.readPlayJson                                                                      thrpt    5     21027.566 ±     1090.916   ops/s
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate                                                       thrpt    5      1160.918 ±       60.448  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                  thrpt    5     86904.035 ±        0.119    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                           thrpt    5         0.014 ±        0.119  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      thrpt    5         1.042 ±        8.815    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                 thrpt    5      1150.748 ±      707.741  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                            thrpt    5     86155.297 ±    53168.852    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                          thrpt    5         1.065 ±        7.820  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                     thrpt    5        80.588 ±      590.580    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.count                                                            thrpt    5        17.000                 counts
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.time                                                             thrpt    5        40.000                     ms
[info] ArrayOfEnumsBenchmark.writeCirce                                                                        thrpt    5    179008.045 ±     4221.730   ops/s
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate                                                         thrpt    5       625.040 ±       14.595  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                                    thrpt    5      5496.002 ±        0.001    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                   thrpt    5       606.662 ±      580.456  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                              thrpt    5      5338.386 ±     5154.723    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.count                                                              thrpt    5         9.000                 counts
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.time                                                               thrpt    5        28.000                     ms
[info] ArrayOfEnumsBenchmark.writeJacksonScala                                                                 thrpt    5    272516.553 ±     6111.300   ops/s
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                                                  thrpt    5       275.636 ±        5.999  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                             thrpt    5      1592.002 ±        0.001    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                            thrpt    5       269.110 ±      579.280  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                       thrpt    5      1557.530 ±     3352.801    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.count                                                       thrpt    5         4.000                 counts
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.time                                                        thrpt    5        17.000                     ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScala                                                                thrpt    5    464776.154 ±    11695.899   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                 thrpt    5       356.739 ±        9.018  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                            thrpt    5      1208.001 ±        0.001    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                           thrpt    5       336.544 ±        1.176  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                      thrpt    5      1139.653 ±       26.828    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                               thrpt    5         0.455 ±        3.917    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count                                                      thrpt    5         5.000                 counts
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time                                                       thrpt    5        14.000                     ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc                                                        thrpt    5    486485.593 ±    47538.821   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                         thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                    thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                              thrpt    5           ≈ 0                 counts
[info] ArrayOfEnumsBenchmark.writePlayJson                                                                     thrpt    5    269596.642 ±    15544.544   ops/s
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate                                                      thrpt    5       742.732 ±       43.460  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                 thrpt    5      4336.002 ±        0.001    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                thrpt    5       740.467 ±      575.356  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                           thrpt    5      4330.272 ±     3567.548    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                         thrpt    5         1.199 ±        7.782  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                    thrpt    5         6.933 ±       44.653    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.count                                                           thrpt    5        11.000                 counts
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.time                                                            thrpt    5        46.000                     ms
[info] ArrayOfFloatsBenchmark.readCirce                                                                        thrpt    5     36360.871 ±      293.209   ops/s
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate                                                         thrpt    5      1621.227 ±       13.905  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm                                                    thrpt    5     70176.012 ±        0.006    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                             thrpt    5         0.023 ±        0.163  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        thrpt    5         0.984 ±        7.073    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                   thrpt    5      1631.676 ±      582.208  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                              thrpt    5     70626.493 ±    25115.327    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                            thrpt    5         0.666 ±        5.733  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                       thrpt    5        28.819 ±      248.139    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.count                                                              thrpt    5        24.000                 counts
[info] ArrayOfFloatsBenchmark.readCirce:·gc.time                                                               thrpt    5        26.000                     ms
[info] ArrayOfFloatsBenchmark.readJacksonScala                                                                 thrpt    5     98836.834 ±     3528.941   ops/s
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate                                                  thrpt    5      1092.173 ±       38.859  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                             thrpt    5     17392.004 ±        0.001    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                      thrpt    5         0.018 ±        0.156  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 thrpt    5         0.298 ±        2.512    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                            thrpt    5      1083.510 ±      598.714  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                       thrpt    5     17247.190 ±     9228.549    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                     thrpt    5         0.933 ±        6.688  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                thrpt    5        15.030 ±      108.038    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.count                                                       thrpt    5        16.000                 counts
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.time                                                        thrpt    5        38.000                     ms
[info] ArrayOfFloatsBenchmark.readJsoniterScala                                                                thrpt    5    147180.543 ±     6924.893   ops/s
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate                                                 thrpt    5        95.758 ±        4.456  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                            thrpt    5      1024.003 ±        0.001    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                           thrpt    5       135.773 ±      715.905  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                      thrpt    5      1466.220 ±     7731.498    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count                                                      thrpt    5         2.000                 counts
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time                                                       thrpt    5         6.000                     ms
[info] ArrayOfFloatsBenchmark.readPlayJson                                                                     thrpt    5     36078.332 ±     1450.438   ops/s
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate                                                      thrpt    5      1926.729 ±       76.854  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                 thrpt    5     84048.012 ±        0.007    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                          thrpt    5         0.022 ±        0.146  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     thrpt    5         0.973 ±        6.483    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                thrpt    5      1972.779 ±      583.530  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                           thrpt    5     86088.022 ±    26978.133    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                         thrpt    5         0.799 ±        6.884  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                    thrpt    5        35.418 ±      304.959    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.count                                                           thrpt    5        29.000                 counts
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.time                                                            thrpt    5        31.000                     ms
[info] ArrayOfFloatsBenchmark.writeCirce                                                                       thrpt    5     91276.389 ±     1353.897   ops/s
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate                                                        thrpt    5       440.772 ±        6.505  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm                                                   thrpt    5      7600.005 ±        0.001    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                  thrpt    5       471.915 ±      711.038  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                             thrpt    5      8145.527 ±    12379.148    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.count                                                             thrpt    5         7.000                 counts
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.time                                                              thrpt    5        23.000                     ms
[info] ArrayOfFloatsBenchmark.writeJacksonScala                                                                thrpt    5     98669.159 ±     5649.317   ops/s
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate                                                 thrpt    5       325.957 ±       18.679  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                            thrpt    5      5200.004 ±        0.001    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                           thrpt    5       336.357 ±        0.141  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                      thrpt    5      5366.872 ±      306.977    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count                                                      thrpt    5         5.000                 counts
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time                                                       thrpt    5        20.000                     ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScala                                                               thrpt    5    114352.030 ±      902.635   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                thrpt    5       349.877 ±        2.778  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                           thrpt    5      4816.004 ±        0.001    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                          thrpt    5       336.367 ±        0.100  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                     thrpt    5      4630.061 ±       36.946    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                              thrpt    5         1.833 ±       15.785    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count                                                     thrpt    5         5.000                 counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time                                                      thrpt    5        14.000                     ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc                                                       thrpt    5    116420.400 ±     5874.424   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                        thrpt    5       264.515 ±       13.327  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                   thrpt    5      3576.004 ±        0.001    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                                  thrpt    5       269.513 ±      580.147  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                             thrpt    5      3655.168 ±     7870.197    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space                           thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm                      thrpt    5         1.838 ±       15.829    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                             thrpt    5         4.000                 counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                              thrpt    5        12.000                     ms
[info] ArrayOfInstantsBenchmark.readCirce                                                                      thrpt    5      8518.180 ±      181.555   ops/s
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate                                                       thrpt    5      1409.942 ±       30.356  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm                                                  thrpt    5    260513.541 ±       12.842    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                           thrpt    5         0.007 ±        0.050  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      thrpt    5         1.270 ±        9.391    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                 thrpt    5      1426.610 ±      593.666  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                            thrpt    5    263522.128 ±   105798.682    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                          thrpt    5         0.799 ±        4.588  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                     thrpt    5       148.264 ±      852.825    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.count                                                            thrpt    5        21.000                 counts
[info] ArrayOfInstantsBenchmark.readCirce:·gc.time                                                             thrpt    5        29.000                     ms
[info] ArrayOfInstantsBenchmark.readJacksonScala                                                               thrpt    5      8786.179 ±      435.915   ops/s
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate                                                thrpt    5      1368.738 ±       67.851  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                           thrpt    5    245186.946 ±       24.948    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.023 ±        0.167  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         4.196 ±       30.010    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                          thrpt    5      1424.695 ±      596.703  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                     thrpt    5    255144.929 ±   102587.738    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                              thrpt    5       143.460 ±     1235.237    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.count                                                     thrpt    5        21.000                 counts
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.time                                                      thrpt    5        41.000                     ms
[info] ArrayOfInstantsBenchmark.readJsoniterScala                                                              thrpt    5     79646.024 ±     1984.089   ops/s
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate                                               thrpt    5       207.279 ±        5.166  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                          thrpt    5      4096.005 ±        0.001    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                         thrpt    5       202.776 ±      712.786  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                    thrpt    5      4019.242 ±    14128.990    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count                                                    thrpt    5         3.000                 counts
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time                                                     thrpt    5         8.000                     ms
[info] ArrayOfInstantsBenchmark.readPlayJson                                                                   thrpt    5      4701.656 ±      285.283   ops/s
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate                                                    thrpt    5      1247.624 ±       75.377  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm                                               thrpt    5    417664.089 ±        0.015    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                        thrpt    5         0.017 ±        0.107  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   thrpt    5         5.797 ±       36.308    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                              thrpt    5      1220.372 ±      723.101  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                         thrpt    5    408512.880 ±   240162.909    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                       thrpt    5         0.799 ±        6.884  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                  thrpt    5       272.652 ±     2347.620    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.count                                                         thrpt    5        18.000                 counts
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.time                                                          thrpt    5        34.000                     ms
[info] ArrayOfInstantsBenchmark.writeCirce                                                                     thrpt    5     24200.817 ±     1604.382   ops/s
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate                                                      thrpt    5      1253.737 ±       83.187  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm                                                 thrpt    5     81536.883 ±       47.012    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                          thrpt    5         0.017 ±        0.092  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     thrpt    5         1.124 ±        6.073    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                thrpt    5      1288.909 ±      576.959  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                           thrpt    5     83897.477 ±    39707.722    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                         thrpt    5         0.666 ±        5.734  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                    thrpt    5        44.205 ±      380.614    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.count                                                           thrpt    5        19.000                 counts
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.time                                                            thrpt    5        33.000                     ms
[info] ArrayOfInstantsBenchmark.writeJacksonScala                                                              thrpt    5     24022.255 ±      467.449   ops/s
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate                                               thrpt    5      1220.817 ±       24.312  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                          thrpt    5     79984.019 ±        0.012    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                   thrpt    5         0.013 ±        0.105  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm              thrpt    5         0.840 ±        6.906    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                         thrpt    5      1220.625 ±      716.224  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                    thrpt    5     79922.853 ±    45426.802    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                  thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                             thrpt    5        52.681 ±      453.601    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.count                                                    thrpt    5        18.000                 counts
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.time                                                     thrpt    5        35.000                     ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScala                                                             thrpt    5    342532.907 ±    10041.855   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate                                              thrpt    5       755.681 ±       22.034  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                         thrpt    5      3472.001 ±        0.001    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                  thrpt    5         0.007 ±        0.057  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm             thrpt    5         0.031 ±        0.265    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                        thrpt    5       741.323 ±      578.235  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                   thrpt    5      3405.700 ±     2643.201    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                 thrpt    5         1.066 ±        6.439  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                            thrpt    5         4.944 ±       30.004    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count                                                   thrpt    5        11.000                 counts
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time                                                    thrpt    5        31.000                     ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc                                                     thrpt    5    369287.496 ±    62797.736   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                      thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                 thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                           thrpt    5           ≈ 0                 counts
[info] ArrayOfInstantsBenchmark.writePlayJson                                                                  thrpt    5     25970.432 ±      648.017   ops/s
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate                                                   thrpt    5      1366.068 ±       34.067  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm                                              thrpt    5     82792.017 ±        0.009    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                       thrpt    5         0.028 ±        0.173  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  thrpt    5         1.670 ±       10.409    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                             thrpt    5      1424.751 ±      596.980  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                        thrpt    5     86321.123 ±    34677.992    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                      thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                 thrpt    5        48.150 ±      414.582    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.count                                                        thrpt    5        21.000                 counts
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.time                                                         thrpt    5        41.000                     ms
[info] ArrayOfIntsBenchmark.readCirce                                                                          thrpt    5    130408.615 ±     4589.391   ops/s
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate                                                           thrpt    5      2122.321 ±       74.266  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                                      thrpt    5     25616.003 ±        0.001    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                               thrpt    5         0.019 ±        0.113  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          thrpt    5         0.227 ±        1.348    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                     thrpt    5      2110.278 ±      586.458  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                thrpt    5     25472.752 ±     7161.552    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.count                                                                thrpt    5        31.000                 counts
[info] ArrayOfIntsBenchmark.readCirce:·gc.time                                                                 thrpt    5        27.000                     ms
[info] ArrayOfIntsBenchmark.readJacksonScala                                                                   thrpt    5    262644.022 ±      702.321   ops/s
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                                    thrpt    5       376.471 ±        0.943  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                               thrpt    5      2256.002 ±        0.001    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                              thrpt    5       403.669 ±      579.251  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                         thrpt    5      2418.530 ±     3462.262    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.count                                                         thrpt    5         6.000                 counts
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.time                                                          thrpt    5        24.000                     ms
[info] ArrayOfIntsBenchmark.readJsoniterScala                                                                  thrpt    5    575776.771 ±    23436.080   ops/s
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                                   thrpt    5       374.627 ±       15.308  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                              thrpt    5      1024.001 ±        0.001    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                             thrpt    5       337.074 ±        0.240  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                        thrpt    5       921.438 ±       37.684    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.count                                                        thrpt    5         5.000                 counts
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.time                                                         thrpt    5        14.000                     ms
[info] ArrayOfIntsBenchmark.readPlayJson                                                                       thrpt    5     64050.125 ±     2434.504   ops/s
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                                        thrpt    5      2805.031 ±      106.365  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                   thrpt    5     68920.007 ±        0.002    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                            thrpt    5         0.009 ±        0.016  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       thrpt    5         0.216 ±        0.399    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                  thrpt    5      2859.583 ±      717.256  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                             thrpt    5     70262.118 ±    17531.948    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.count                                                             thrpt    5        42.000                 counts
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.time                                                              thrpt    5        35.000                     ms
[info] ArrayOfIntsBenchmark.writeCirce                                                                         thrpt    5    237927.495 ±     7711.358   ops/s
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate                                                          thrpt    5      1417.454 ±       46.660  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                                     thrpt    5      9376.002 ±        0.001    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                              thrpt    5         0.016 ±        0.118  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         thrpt    5         0.106 ±        0.787    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                    thrpt    5      1426.399 ±      594.536  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                               thrpt    5      9437.080 ±     4013.912    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                             thrpt    5         0.666 ±        5.734  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                        thrpt    5         4.452 ±       38.337    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.count                                                               thrpt    5        21.000                 counts
[info] ArrayOfIntsBenchmark.writeCirce:·gc.time                                                                thrpt    5        31.000                     ms
[info] ArrayOfIntsBenchmark.writeJacksonScala                                                                  thrpt    5    799877.442 ±    23958.248   ops/s
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                                   thrpt    5       630.087 ±       18.918  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                              thrpt    5      1240.001 ±        0.001    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                             thrpt    5       605.406 ±      579.239  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                        thrpt    5      1190.064 ±     1121.880    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.count                                                        thrpt    5         9.000                 counts
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.time                                                         thrpt    5        36.000                     ms
[info] ArrayOfIntsBenchmark.writeJsoniterScala                                                                 thrpt    5   1053371.434 ±    24445.764   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                  thrpt    5       572.864 ±       13.401  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                             thrpt    5       856.000 ±        0.001    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                            thrpt    5       606.261 ±      579.500  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                       thrpt    5       906.361 ±      871.762    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                     thrpt    5         0.266 ±        1.405  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                thrpt    5         0.399 ±        2.101    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count                                                       thrpt    5         9.000                 counts
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time                                                        thrpt    5        27.000                     ms
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc                                                         thrpt    5   1065252.665 ±    17303.340   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                          thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                     thrpt    5        ≈ 10⁻³                   B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                               thrpt    5           ≈ 0                 counts
[info] ArrayOfIntsBenchmark.writePlayJson                                                                      thrpt    5     29152.171 ±     1615.700   ops/s
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                                       thrpt    5      1522.469 ±       84.322  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                  thrpt    5     82203.750 ±       26.783    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                           thrpt    5         0.039 ±        0.327  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      thrpt    5         2.067 ±       17.531    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                 thrpt    5      1561.648 ±      704.610  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                            thrpt    5     84340.776 ±    38583.413    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                          thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                     thrpt    5        43.169 ±      371.698    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.count                                                            thrpt    5        23.000                 counts
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.time                                                             thrpt    5        40.000                     ms
[info] ArrayOfJavaEnumsBenchmark.readCirce                                                                     thrpt    5    113177.319 ±     4239.524   ops/s
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate                                                      thrpt    5      1393.772 ±       52.122  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                                 thrpt    5     19384.004 ±        0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                          thrpt    5         0.012 ±        0.088  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     thrpt    5         0.166 ±        1.229    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                thrpt    5      1426.181 ±      593.324  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                           thrpt    5     19823.029 ±     7594.874    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                         thrpt    5         0.666 ±        5.734  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                    thrpt    5         9.267 ±       79.791    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.count                                                           thrpt    5        21.000                 counts
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.time                                                            thrpt    5        30.000                     ms
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala                                                              thrpt    5    168707.898 ±     5360.604   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                               thrpt    5       900.414 ±       28.739  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          thrpt    5      8400.002 ±        0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                   thrpt    5         0.024 ±        0.148  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm              thrpt    5         0.225 ±        1.385    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                         thrpt    5       945.930 ±      588.415  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                    thrpt    5      8821.780 ±     5422.069    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                  thrpt    5         0.800 ±        6.885  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                             thrpt    5         7.468 ±       64.299    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count                                                    thrpt    5        14.000                 counts
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time                                                     thrpt    5        43.000                     ms
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala                                                             thrpt    5    253005.314 ±     7396.485   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                                              thrpt    5       658.339 ±       19.363  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         thrpt    5      4096.002 ±        0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                        thrpt    5       674.016 ±        0.195  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                   thrpt    5      4193.739 ±      123.284    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count                                                   thrpt    5        10.000                 counts
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time                                                    thrpt    5        28.000                     ms
[info] ArrayOfJavaEnumsBenchmark.readPlayJson                                                                  thrpt    5     62859.292 ±     1549.267   ops/s
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate                                                   thrpt    5      2653.561 ±       65.256  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                                              thrpt    5     66432.007 ±        0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                       thrpt    5         0.005 ±        0.005  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  thrpt    5         0.117 ±        0.122    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                             thrpt    5      2655.405 ±      585.640  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                        thrpt    5     66471.164 ±    14029.739    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count                                                        thrpt    5        39.000                 counts
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time                                                         thrpt    5        32.000                     ms
[info] ArrayOfJavaEnumsBenchmark.writeCirce                                                                    thrpt    5    177454.232 ±     7267.892   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate                                                     thrpt    5       619.673 ±       25.707  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                                thrpt    5      5496.002 ±        0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                               thrpt    5       606.714 ±      580.348  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                          thrpt    5      5389.670 ±     5255.291    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.count                                                          thrpt    5         9.000                 counts
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.time                                                           thrpt    5        29.000                     ms
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala                                                             thrpt    5    537305.030 ±    13475.430   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                                              thrpt    5       543.416 ±       13.616  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         thrpt    5      1592.001 ±        0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                        thrpt    5       538.158 ±      709.432  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                   thrpt    5      1578.740 ±     2104.294    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count                                                   thrpt    5         8.000                 counts
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time                                                    thrpt    5        33.000                     ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala                                                            thrpt    5    501401.050 ±     4179.514   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                                             thrpt    5       384.811 ±        3.181  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        thrpt    5      1208.001 ±        0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                       thrpt    5       403.775 ±      578.890  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                  thrpt    5      1268.282 ±     1831.706    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count                                                  thrpt    5         6.000                 counts
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time                                                   thrpt    5        18.000                     ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc                                                    thrpt    5    489881.192 ±     2572.025   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          thrpt    5           ≈ 0                 counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson                                                                 thrpt    5    294880.181 ±    13503.614   ops/s
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate                                                  thrpt    5       809.296 ±       36.580  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                                             thrpt    5      4320.001 ±        0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                      thrpt    5         0.011 ±        0.092  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 thrpt    5         0.056 ±        0.486    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                            thrpt    5       809.276 ±      721.782  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                       thrpt    5      4323.069 ±     3919.021    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                     thrpt    5         1.066 ±        7.821  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                thrpt    5         5.673 ±       41.480    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count                                                       thrpt    5        12.000                 counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time                                                        thrpt    5        43.000                     ms
[info] ArrayOfLocalDateTimesBenchmark.readCirce                                                                thrpt    5      8216.697 ±      110.627   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate                                                 thrpt    5      1050.589 ±       14.073  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                            thrpt    5    201240.628 ±        4.952    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.011 ±        0.059  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         2.109 ±       11.210    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                           thrpt    5      1016.289 ±       17.402  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                      thrpt    5    194669.982 ±     1423.139    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.799 ±        5.562  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                               thrpt    5       153.407 ±     1067.382    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count                                                      thrpt    5        15.000                 counts
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time                                                       thrpt    5        32.000                     ms
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala                                                         thrpt    5      9198.155 ±      515.711   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                          thrpt    5      1090.364 ±       61.606  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     thrpt    5    186576.046 ±        0.010    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'              thrpt    5         0.021 ±        0.151  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm         thrpt    5         3.635 ±       26.341    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                    thrpt    5      1083.598 ±      598.263  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                               thrpt    5    185606.704 ±   108977.024    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                             thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                        thrpt    5       139.238 ±     1198.879    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count                                               thrpt    5        16.000                 counts
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time                                                thrpt    5        38.000                     ms
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala                                                        thrpt    5    148458.726 ±     6070.015   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                         thrpt    5       965.880 ±       39.612  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    thrpt    5     10240.003 ±        0.001    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'             thrpt    5         0.012 ±        0.065  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm        thrpt    5         0.129 ±        0.687    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                   thrpt    5       948.827 ±      576.994  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                              thrpt    5     10052.715 ±     5953.639    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                            thrpt    5         0.533 ±        4.588  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                       thrpt    5         5.626 ±       48.441    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count                                              thrpt    5        14.000                 counts
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time                                               thrpt    5        27.000                     ms
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson                                                             thrpt    5      6894.599 ±      329.594   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                              thrpt    5      1284.117 ±       61.516  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                         thrpt    5    293096.060 ±        0.008    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                  thrpt    5         0.036 ±        0.287  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm             thrpt    5         8.312 ±       66.932    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                        thrpt    5      1288.784 ±      576.930  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                   thrpt    5    294226.738 ±   133477.902    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                 thrpt    5         0.799 ±        6.883  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                            thrpt    5       186.358 ±     1604.601    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count                                                   thrpt    5        19.000                 counts
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time                                                    thrpt    5        37.000                     ms
[info] ArrayOfLocalDateTimesBenchmark.writeCirce                                                               thrpt    5     22142.188 ±     1212.589   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate                                                thrpt    5       929.847 ±       51.264  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                           thrpt    5     66089.602 ±       45.137    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.026 ±        0.188  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         1.865 ±       13.699    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                          thrpt    5       947.280 ±      588.525  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                     thrpt    5     67385.278 ±    43071.350    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.799 ±        5.561  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                              thrpt    5        58.008 ±      405.250    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count                                                     thrpt    5        14.000                 counts
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time                                                      thrpt    5        34.000                     ms
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala                                                        thrpt    5     25370.942 ±      298.148   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                         thrpt    5       976.056 ±       11.497  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                    thrpt    5     60552.017 ±        0.007    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'             thrpt    5         0.025 ±        0.137  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm        thrpt    5         1.537 ±        8.505    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                   thrpt    5      1014.706 ±       23.168  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                              thrpt    5     62949.728 ±     1211.822    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                            thrpt    5         0.799 ±        6.883  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                       thrpt    5        49.498 ±      426.194    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.count                                              thrpt    5        15.000                 counts
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.time                                               thrpt    5        38.000                     ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala                                                       thrpt    5    860387.035 ±    17885.173   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                        thrpt    5      1552.480 ±       32.536  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                   thrpt    5      2840.000 ±        0.001    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'            thrpt    5         0.028 ±        0.143  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm       thrpt    5         0.051 ±        0.260    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                  thrpt    5      1563.737 ±      728.610  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                             thrpt    5      2861.746 ±     1374.934    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                           thrpt    5         0.666 ±        5.736  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                      thrpt    5         1.215 ±       10.460    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count                                             thrpt    5        23.000                 counts
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time                                              thrpt    5        26.000                     ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc                                               thrpt    5    502046.163 ±     1601.549   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                           thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                     thrpt    5           ≈ 0                 counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson                                                            thrpt    5     22465.296 ±     1126.504   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                             thrpt    5       948.126 ±       46.980  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                        thrpt    5     66422.928 ±       29.358    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.047 ±        0.358  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         3.230 ±       24.846    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                       thrpt    5       945.894 ±      587.911  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                  thrpt    5     66249.241 ±    40694.713    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                           thrpt    5        55.524 ±      478.081    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count                                                  thrpt    5        14.000                 counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time                                                   thrpt    5        38.000                     ms
[info] ArrayOfLocalDatesBenchmark.readCirce                                                                    thrpt    5     25945.259 ±     1764.935   ops/s
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate                                                     thrpt    5      1374.305 ±       94.062  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm                                                thrpt    5     83368.017 ±        0.010    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                         thrpt    5         0.005 ±        0.022  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    thrpt    5         0.332 ±        1.308    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                               thrpt    5      1426.048 ±      594.626  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                          thrpt    5     86469.521 ±    33454.486    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                        thrpt    5         0.666 ±        5.734  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                   thrpt    5        41.676 ±      358.846    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.count                                                          thrpt    5        21.000                 counts
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.time                                                           thrpt    5        32.000                     ms
[info] ArrayOfLocalDatesBenchmark.readJacksonScala                                                             thrpt    5     26217.307 ±     1435.882   ops/s
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate                                              thrpt    5      1197.452 ±       65.743  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                         thrpt    5     71888.227 ±        1.819    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                  thrpt    5         0.010 ±        0.062  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm             thrpt    5         0.613 ±        3.762    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                        thrpt    5      1219.758 ±      698.585  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                   thrpt    5     73322.934 ±    44603.204    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                 thrpt    5         0.799 ±        6.884  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                            thrpt    5        48.472 ±      417.361    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count                                                   thrpt    5        18.000                 counts
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time                                                    thrpt    5        41.000                     ms
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala                                                            thrpt    5    262771.862 ±    11864.354   ops/s
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate                                             thrpt    5       683.841 ±       31.114  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                        thrpt    5      4096.002 ±        0.001    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                       thrpt    5       743.005 ±      582.258  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                  thrpt    5      4444.788 ±     3307.175    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                thrpt    5         0.533 ±        4.588  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                           thrpt    5         3.181 ±       27.387    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count                                                  thrpt    5        11.000                 counts
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time                                                   thrpt    5        32.000                     ms
[info] ArrayOfLocalDatesBenchmark.readPlayJson                                                                 thrpt    5     15591.978 ±      659.751   ops/s
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate                                                  thrpt    5      1604.986 ±       68.214  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm                                             thrpt    5    162024.218 ±        1.637    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                      thrpt    5         0.023 ±        0.140  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 thrpt    5         2.337 ±       14.203    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                            thrpt    5      1630.464 ±      579.805  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                       thrpt    5    164667.419 ±    61396.480    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                     thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                thrpt    5        81.285 ±      699.888    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count                                                       thrpt    5        24.000                 counts
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time                                                        thrpt    5        34.000                     ms
[info] ArrayOfLocalDatesBenchmark.writeCirce                                                                   thrpt    5     51628.412 ±     1092.071   ops/s
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate                                                    thrpt    5      1252.209 ±       26.596  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm                                               thrpt    5     38176.008 ±        0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                        thrpt    5         0.015 ±        0.092  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   thrpt    5         0.448 ±        2.836    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                              thrpt    5      1221.444 ±      720.526  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                         thrpt    5     37236.774 ±    21915.559    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                       thrpt    5         0.799 ±        5.560  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                  thrpt    5        24.511 ±      170.592    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.count                                                         thrpt    5        18.000                 counts
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.time                                                          thrpt    5        30.000                     ms
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala                                                            thrpt    5    114430.758 ±     3522.010   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate                                             thrpt    5       969.540 ±       29.823  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                        thrpt    5     13336.004 ±        0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.028 ±        0.158  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         0.379 ±        2.186    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                       thrpt    5       946.628 ±      572.753  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                  thrpt    5     13025.746 ±     7987.458    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                           thrpt    5        11.058 ±       95.211    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.count                                                  thrpt    5        14.000                 counts
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.time                                                   thrpt    5        38.000                     ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala                                                           thrpt    5   1374900.461 ±    13122.145   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate                                            thrpt    5      1474.494 ±       13.776  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                       thrpt    5      1688.000 ±        0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5         0.025 ±        0.214  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5         0.029 ±        0.244    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                      thrpt    5      1494.624 ±      729.338  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                 thrpt    5      1711.119 ±      837.550    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                               thrpt    5         0.932 ±        8.028  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                          thrpt    5         1.063 ±        9.154    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count                                                 thrpt    5        22.000                 counts
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time                                                  thrpt    5        27.000                     ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc                                                   thrpt    5    671610.739 ±    22312.691   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                    thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                               thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                         thrpt    5           ≈ 0                 counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson                                                                thrpt    5     56565.806 ±     3344.452   ops/s
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate                                                 thrpt    5      1315.768 ±       78.159  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm                                            thrpt    5     36608.007 ±        0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.034 ±        0.241  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         0.958 ±        6.703    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                           thrpt    5      1288.738 ±      576.075  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                      thrpt    5     35884.240 ±    16884.854    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.799 ±        6.883  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                               thrpt    5        22.204 ±      191.185    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count                                                      thrpt    5        19.000                 counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time                                                       thrpt    5        36.000                     ms
[info] ArrayOfLocalTimesBenchmark.readCirce                                                                    thrpt    5     13241.203 ±      426.980   ops/s
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate                                                     thrpt    5      1181.532 ±       38.530  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm                                                thrpt    5    140456.043 ±        0.047    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                         thrpt    5         0.005 ±        0.047  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    thrpt    5         0.653 ±        5.620    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                               thrpt    5      1152.901 ±      711.117  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                          thrpt    5    136980.531 ±    82092.610    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                        thrpt    5         0.799 ±        5.559  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                   thrpt    5        96.050 ±      670.555    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.count                                                          thrpt    5        17.000                 counts
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.time                                                           thrpt    5        31.000                     ms
[info] ArrayOfLocalTimesBenchmark.readJacksonScala                                                             thrpt    5     13853.420 ±      792.142   ops/s
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate                                              thrpt    5      1074.222 ±       61.391  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                         thrpt    5    122052.156 ±       63.489    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                  thrpt    5         0.017 ±        0.146  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm             thrpt    5         1.992 ±       16.867    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                        thrpt    5      1083.405 ±      598.709  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                   thrpt    5    122983.845 ±    62909.194    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                 thrpt    5         0.933 ±        6.689  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                            thrpt    5       107.070 ±      770.905    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count                                                   thrpt    5        16.000                 counts
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time                                                    thrpt    5        37.000                     ms
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala                                                            thrpt    5    266795.963 ±    14641.492   ops/s
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                             thrpt    5       694.335 ±       37.847  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                        thrpt    5      4096.002 ±        0.001    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                       thrpt    5       675.469 ±        0.353  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                  thrpt    5      3985.346 ±      216.027    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                thrpt    5         0.533 ±        4.589  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                           thrpt    5         3.176 ±       27.347    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count                                                  thrpt    5        10.000                 counts
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time                                                   thrpt    5        29.000                     ms
[info] ArrayOfLocalTimesBenchmark.readPlayJson                                                                 thrpt    5      9659.444 ±      330.527   ops/s
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate                                                  thrpt    5      1352.998 ±       45.061  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                             thrpt    5    220392.237 ±        1.676    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                      thrpt    5         0.019 ±        0.155  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 thrpt    5         3.145 ±       25.164    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                            thrpt    5      1289.207 ±      585.918  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                       thrpt    5    210020.793 ±    95875.574    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                     thrpt    5         0.800 ±        6.884  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                thrpt    5       130.056 ±     1119.821    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count                                                       thrpt    5        19.000                 counts
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time                                                        thrpt    5        35.000                     ms
[info] ArrayOfLocalTimesBenchmark.writeCirce                                                                   thrpt    5     37270.985 ±     1373.117   ops/s
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate                                                    thrpt    5      1158.813 ±       42.211  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                               thrpt    5     48928.717 ±        6.081    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                        thrpt    5         0.012 ±        0.094  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   thrpt    5         0.498 ±        3.913    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                              thrpt    5      1152.939 ±      711.142  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                         thrpt    5     48669.828 ±    29608.330    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                       thrpt    5         0.666 ±        5.736  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                  thrpt    5        28.056 ±      241.573    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.count                                                         thrpt    5        17.000                 counts
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.time                                                          thrpt    5        34.000                     ms
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala                                                            thrpt    5     43789.779 ±     2254.962   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                             thrpt    5      1161.593 ±       59.899  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                        thrpt    5     41752.010 ±        0.002    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.042 ±        0.361  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         1.483 ±       12.765    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                       thrpt    5      1152.451 ±      735.258  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                  thrpt    5     41420.539 ±    26267.805    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                           thrpt    5        28.923 ±      249.035    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.count                                                  thrpt    5        17.000                 counts
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.time                                                   thrpt    5        35.000                     ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala                                                           thrpt    5   1677887.758 ±    44688.959   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                            thrpt    5      1526.628 ±       41.197  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                       thrpt    5      1432.000 ±        0.001    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5         0.027 ±        0.142  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5         0.026 ±        0.135    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                      thrpt    5      1495.596 ±      725.099  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                 thrpt    5      1402.686 ±      670.766    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                               thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                          thrpt    5         0.759 ±        6.532    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count                                                 thrpt    5        22.000                 counts
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time                                                  thrpt    5        24.000                     ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc                                                   thrpt    5   1828102.579 ±    12027.987   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                    thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                               thrpt    5        ≈ 10⁻⁴                   B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                         thrpt    5           ≈ 0                 counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson                                                                thrpt    5     34692.118 ±     1447.459   ops/s
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate                                                 thrpt    5      1049.636 ±       43.968  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                            thrpt    5     47617.535 ±       13.110    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.027 ±        0.151  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         1.222 ±        6.925    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                           thrpt    5      1082.879 ±      600.928  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                      thrpt    5     49125.183 ±    27127.379    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                               thrpt    5        36.824 ±      317.070    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count                                                      thrpt    5        16.000                 counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time                                                       thrpt    5        38.000                     ms
[info] ArrayOfLongsBenchmark.readCirce                                                                         thrpt    5    129419.691 ±     1637.620   ops/s
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate                                                          thrpt    5      2218.292 ±       28.563  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm                                                     thrpt    5     26976.003 ±        0.001    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                              thrpt    5         0.007 ±        0.025  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         thrpt    5         0.088 ±        0.305    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                    thrpt    5      2178.620 ±      718.991  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                               thrpt    5     26491.759 ±     8630.407    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.count                                                               thrpt    5        32.000                 counts
[info] ArrayOfLongsBenchmark.readCirce:·gc.time                                                                thrpt    5        26.000                     ms
[info] ArrayOfLongsBenchmark.readJacksonScala                                                                  thrpt    5    225662.777 ±     5455.514   ops/s
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate                                                   thrpt    5       500.088 ±       12.143  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                              thrpt    5      3488.002 ±        0.001    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                             thrpt    5       538.195 ±      709.361  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                        thrpt    5      3759.341 ±     5015.059    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.count                                                        thrpt    5         8.000                 counts
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.time                                                         thrpt    5        33.000                     ms
[info] ArrayOfLongsBenchmark.readJsoniterScala                                                                 thrpt    5    446012.618 ±    50751.921   ops/s
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate                                                  thrpt    5       562.157 ±       63.934  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                             thrpt    5      1984.001 ±        0.001    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                            thrpt    5       606.618 ±      580.325  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                       thrpt    5      2129.384 ±     1880.592    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.count                                                       thrpt    5         9.000                 counts
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.time                                                        thrpt    5        26.000                     ms
[info] ArrayOfLongsBenchmark.readPlayJson                                                                      thrpt    5     64399.831 ±     2432.993   ops/s
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate                                                       thrpt    5      2873.460 ±      108.562  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                  thrpt    5     70232.007 ±        0.001    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                           thrpt    5         0.011 ±        0.028  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      thrpt    5         0.263 ±        0.672    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                 thrpt    5      2858.983 ±      717.194  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                            thrpt    5     69912.910 ±    19817.475    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.count                                                            thrpt    5        42.000                 counts
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.time                                                             thrpt    5        35.000                     ms
[info] ArrayOfLongsBenchmark.writeCirce                                                                        thrpt    5    216898.116 ±    10086.199   ops/s
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate                                                         thrpt    5      1533.627 ±       71.456  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm                                                    thrpt    5     11128.002 ±        0.001    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                             thrpt    5         0.018 ±        0.084  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        thrpt    5         0.135 ±        0.615    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                   thrpt    5      1563.218 ±      709.301  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                              thrpt    5     11348.322 ±     5339.281    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                            thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                       thrpt    5         4.855 ±       41.803    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.count                                                              thrpt    5        23.000                 counts
[info] ArrayOfLongsBenchmark.writeCirce:·gc.time                                                               thrpt    5        28.000                     ms
[info] ArrayOfLongsBenchmark.writeJacksonScala                                                                 thrpt    5    454663.989 ±     5166.272   ops/s
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate                                                  thrpt    5       466.769 ±        5.092  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                             thrpt    5      1616.001 ±        0.001    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                            thrpt    5       470.906 ±      709.645  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                       thrpt    5      1631.776 ±     2477.149    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.count                                                       thrpt    5         7.000                 counts
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.time                                                        thrpt    5        29.000                     ms
[info] ArrayOfLongsBenchmark.writeJsoniterScala                                                                thrpt    5    601680.927 ±    31723.483   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                 thrpt    5       470.904 ±       24.764  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                            thrpt    5      1232.001 ±        0.001    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                           thrpt    5       471.153 ±      709.622  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                      thrpt    5      1236.215 ±     1904.654    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                               thrpt    5         0.352 ±        3.032    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count                                                      thrpt    5         7.000                 counts
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time                                                       thrpt    5        20.000                     ms
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc                                                        thrpt    5    630016.383 ±     8277.431   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                         thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                    thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                              thrpt    5           ≈ 0                 counts
[info] ArrayOfLongsBenchmark.writePlayJson                                                                     thrpt    5     24282.233 ±      687.287   ops/s
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate                                                      thrpt    5      1467.039 ±       41.338  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                 thrpt    5     95094.112 ±       32.207    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                          thrpt    5         0.034 ±        0.280  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     thrpt    5         2.202 ±       18.209    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                thrpt    5      1493.579 ±      696.926  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                           thrpt    5     96855.007 ±    46734.791    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                         thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                    thrpt    5        52.374 ±      450.958    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.count                                                           thrpt    5        22.000                 counts
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.time                                                            thrpt    5        34.000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.readCirce                                                               thrpt    5      6512.969 ±      150.373   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate                                                thrpt    5      1002.415 ±       23.236  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                           thrpt    5    242272.066 ±        0.017    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.011 ±        0.075  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         2.663 ±       18.003    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                          thrpt    5      1015.076 ±       20.656  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                     thrpt    5    245333.360 ±     2259.937    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.799 ±        5.560  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                              thrpt    5       194.451 ±     1353.619    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count                                                     thrpt    5        15.000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time                                                      thrpt    5        34.000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala                                                        thrpt    5      6632.371 ±      342.808   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                         thrpt    5       956.034 ±       49.501  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    thrpt    5    226864.064 ±        0.011    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'             thrpt    5         0.019 ±        0.159  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm        thrpt    5         4.469 ±       38.202    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                   thrpt    5      1013.787 ±       25.932  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                              thrpt    5    240612.951 ±    16632.530    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                            thrpt    5         0.932 ±        6.687  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                       thrpt    5       223.188 ±     1607.378    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.count                                              thrpt    5        15.000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.time                                               thrpt    5        43.000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala                                                       thrpt    5     97531.790 ±     2665.031   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                        thrpt    5       944.815 ±       25.459  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   thrpt    5     15248.004 ±        0.001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'            thrpt    5         0.007 ±        0.063  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm       thrpt    5         0.119 ±        1.024    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                  thrpt    5       948.730 ±      588.222  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                             thrpt    5     15305.494 ±     9356.636    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                           thrpt    5         0.533 ±        4.587  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                      thrpt    5         8.537 ±       73.508    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count                                             thrpt    5        14.000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time                                              thrpt    5        28.000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson                                                            thrpt    5      6418.452 ±      211.349   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                             thrpt    5      1167.740 ±       37.207  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                        thrpt    5    286280.066 ±        0.011    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.017 ±        0.137  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         4.022 ±       33.434    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                       thrpt    5      1151.204 ±      707.198  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                  thrpt    5    282365.817 ±   177536.507    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                thrpt    5         0.798 ±        6.870  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                           thrpt    5       197.813 ±     1703.233    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count                                                  thrpt    5        17.000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time                                                   thrpt    5        38.000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce                                                              thrpt    5     17924.639 ±      251.871   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate                                               thrpt    5       813.400 ±       11.819  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                          thrpt    5     71414.828 ±       72.388    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                   thrpt    5         0.030 ±        0.255  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm              thrpt    5         2.593 ±       22.327    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                         thrpt    5       810.466 ±      706.207  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                    thrpt    5     71163.774 ±    62142.450    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                  thrpt    5         0.799 ±        5.561  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                             thrpt    5        70.146 ±      488.393    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count                                                    thrpt    5        12.000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time                                                     thrpt    5        36.000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala                                                       thrpt    5     19578.151 ±      924.602   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                        thrpt    5       829.620 ±       38.965  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   thrpt    5     66696.023 ±        0.008    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'            thrpt    5         0.026 ±        0.145  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm       thrpt    5         2.066 ±       11.577    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                  thrpt    5       809.674 ±      707.835  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                             thrpt    5     65064.814 ±    56150.780    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                           thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                      thrpt    5        63.685 ±      548.348    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.count                                             thrpt    5        12.000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.time                                              thrpt    5        42.000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala                                                      thrpt    5    603775.045 ±    14421.843   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                       thrpt    5      1368.938 ±       33.142  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  thrpt    5      3568.001 ±        0.001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'           thrpt    5         0.026 ±        0.211  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm      thrpt    5         0.068 ±        0.552    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                 thrpt    5      1358.161 ±       23.927  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                            thrpt    5      3539.968 ±       61.588    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                          thrpt    5         0.932 ±        6.688  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                     thrpt    5         2.435 ±       17.450    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count                                            thrpt    5        20.000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time                                             thrpt    5        27.000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc                                              thrpt    5    409842.816 ±     9945.094   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    thrpt    5           ≈ 0                 counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson                                                           thrpt    5     18540.457 ±      679.026   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                            thrpt    5       878.865 ±       32.097  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                       thrpt    5     74616.310 ±       28.755    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5         0.029 ±        0.155  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5         2.497 ±       13.215    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                      thrpt    5       877.676 ±      714.039  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                 thrpt    5     74493.457 ±    60100.325    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                               thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                          thrpt    5        68.718 ±      591.681    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count                                                 thrpt    5        13.000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time                                                  thrpt    5        40.000                     ms
[info] ArrayOfOffsetTimesBenchmark.readCirce                                                                   thrpt    5     11279.099 ±      544.192   ops/s
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate                                                    thrpt    5      1132.824 ±       54.783  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm                                               thrpt    5    158079.061 ±       31.931    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                        thrpt    5         0.019 ±        0.137  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   thrpt    5         2.595 ±       19.307    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                              thrpt    5      1084.504 ±      589.176  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                         thrpt    5    151406.120 ±    84621.010    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                       thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                  thrpt    5        93.514 ±      805.186    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.count                                                         thrpt    5        16.000                 counts
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.time                                                          thrpt    5        30.000                     ms
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala                                                            thrpt    5     11152.478 ±      333.637   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate                                             thrpt    5      1020.926 ±       30.665  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        thrpt    5    144068.452 ±       65.508    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.006 ±        0.042  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         0.799 ±        5.851    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                       thrpt    5      1014.659 ±       23.704  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                  thrpt    5    143185.793 ±     1291.880    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                thrpt    5         0.933 ±        6.688  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                           thrpt    5       132.009 ±      945.640    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count                                                  thrpt    5        15.000                 counts
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time                                                   thrpt    5        40.000                     ms
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala                                                           thrpt    5    175143.697 ±     7272.521   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                            thrpt    5      1013.064 ±       41.883  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       thrpt    5      9104.002 ±        0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5         0.023 ±        0.136  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5         0.206 ±        1.223    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                      thrpt    5      1015.803 ±       19.248  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                 thrpt    5      9129.085 ±      210.591    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                               thrpt    5         0.666 ±        5.736  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                          thrpt    5         5.982 ±       51.505    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count                                                 thrpt    5        15.000                 counts
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time                                                  thrpt    5        29.000                     ms
[info] ArrayOfOffsetTimesBenchmark.readPlayJson                                                                thrpt    5     10192.987 ±      568.118   ops/s
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate                                                 thrpt    5      1275.744 ±       70.717  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                            thrpt    5    197000.119 ±        0.679    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.005 ±        0.045  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         0.786 ±        6.772    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                           thrpt    5      1219.906 ±      723.213  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                      thrpt    5    188465.753 ±   113985.678    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                    thrpt    5         1.065 ±        7.820  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                               thrpt    5       164.133 ±     1204.053    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.count                                                      thrpt    5        18.000                 counts
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.time                                                       thrpt    5        39.000                     ms
[info] ArrayOfOffsetTimesBenchmark.writeCirce                                                                  thrpt    5     28051.825 ±     1685.077   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate                                                   thrpt    5       968.059 ±       58.419  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                              thrpt    5     54317.183 ±       40.659    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                       thrpt    5         0.017 ±        0.150  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  thrpt    5         0.979 ±        8.430    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                             thrpt    5       947.692 ±      589.325  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                        thrpt    5     53245.411 ±    34577.402    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                      thrpt    5         0.666 ±        5.734  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                 thrpt    5        37.793 ±      325.412    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count                                                        thrpt    5        14.000                 counts
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time                                                         thrpt    5        32.000                     ms
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala                                                           thrpt    5     85627.929 ±     3327.938   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                            thrpt    5      1363.085 ±       53.279  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       thrpt    5     25056.005 ±        0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5         0.044 ±        0.367  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5         0.826 ±        6.846    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                      thrpt    5      1357.438 ±       26.837  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                 thrpt    5     24953.733 ±      837.621    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                               thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                          thrpt    5        14.913 ±      128.406    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.count                                                 thrpt    5        20.000                 counts
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.time                                                  thrpt    5        35.000                     ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala                                                          thrpt    5    971884.652 ±    37707.752   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                           thrpt    5      1333.674 ±       52.046  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      thrpt    5      2160.000 ±        0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'               thrpt    5         0.028 ±        0.237  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm          thrpt    5         0.045 ±        0.383    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                     thrpt    5      1357.945 ±       22.662  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                thrpt    5      2199.418 ±       51.590    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                              thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                         thrpt    5         1.291 ±       11.116    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count                                                thrpt    5        20.000                 counts
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time                                                 thrpt    5        27.000                     ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc                                                  thrpt    5   1106668.350 ±   102557.148   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              thrpt    5        ≈ 10⁻³                   B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        thrpt    5           ≈ 0                 counts
[info] ArrayOfOffsetTimesBenchmark.writePlayJson                                                               thrpt    5     68520.934 ±     2911.251   ops/s
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate                                                thrpt    5      1477.866 ±       62.691  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                           thrpt    5     33944.006 ±        0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.004 ±        0.019  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         0.085 ±        0.433    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                          thrpt    5      1493.506 ±      695.798  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                     thrpt    5     34305.506 ±    15997.262    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                   thrpt    5         1.066 ±        9.175  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                              thrpt    5        24.725 ±      212.891    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.count                                                     thrpt    5        22.000                 counts
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.time                                                      thrpt    5        38.000                     ms
[info] ArrayOfPeriodsBenchmark.readCirce                                                                       thrpt    5     25731.321 ±     1166.739   ops/s
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate                                                        thrpt    5       927.264 ±       42.150  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm                                                   thrpt    5     56728.020 ±        0.021    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                            thrpt    5         0.023 ±        0.161  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       thrpt    5         1.445 ±        9.969    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                  thrpt    5       946.903 ±      587.760  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                             thrpt    5     57955.470 ±    36527.745    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                           thrpt    5         0.932 ±        5.318  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                      thrpt    5        56.684 ±      321.496    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.count                                                             thrpt    5        14.000                 counts
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.time                                                              thrpt    5        36.000                     ms
[info] ArrayOfPeriodsBenchmark.readJacksonScala                                                                thrpt    5     21561.547 ±     1102.279   ops/s
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate                                                 thrpt    5       591.054 ±       30.341  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                            thrpt    5     43144.412 ±        2.203    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                           thrpt    5       605.489 ±      579.303  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                      thrpt    5     44097.303 ±    40922.757    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count                                                      thrpt    5         9.000                 counts
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time                                                       thrpt    5        35.000                     ms
[info] ArrayOfPeriodsBenchmark.readJsoniterScala                                                               thrpt    5    168604.454 ±     9488.062   ops/s
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate                                                thrpt    5       438.768 ±       24.824  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                           thrpt    5      4096.002 ±        0.001    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                          thrpt    5       472.803 ±      712.413  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                     thrpt    5      4413.759 ±     6646.448    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count                                                     thrpt    5         7.000                 counts
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time                                                      thrpt    5        20.000                     ms
[info] ArrayOfPeriodsBenchmark.readPlayJson                                                                    thrpt    5     20556.570 ±      458.843   ops/s
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate                                                     thrpt    5      1285.872 ±       28.204  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                thrpt    5     98448.021 ±        0.008    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                         thrpt    5         0.070 ±        0.577  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    thrpt    5         5.399 ±       44.348    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                               thrpt    5      1287.543 ±      574.210  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                          thrpt    5     98592.565 ±    44488.249    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                        thrpt    5         0.932 ±        6.686  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                   thrpt    5        71.705 ±      514.066    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.count                                                          thrpt    5        19.000                 counts
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.time                                                           thrpt    5        39.000                     ms
[info] ArrayOfPeriodsBenchmark.writeCirce                                                                      thrpt    5     85713.624 ±     2928.733   ops/s
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate                                                       thrpt    5      1133.215 ±       38.729  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm                                                  thrpt    5     20808.005 ±        0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                           thrpt    5         0.020 ±        0.158  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      thrpt    5         0.372 ±        2.883    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                 thrpt    5      1152.677 ±      728.713  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                            thrpt    5     21142.512 ±    12630.411    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                          thrpt    5         0.666 ±        5.737  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                     thrpt    5        12.137 ±      104.506    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.count                                                            thrpt    5        17.000                 counts
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.time                                                             thrpt    5        32.000                     ms
[info] ArrayOfPeriodsBenchmark.writeJacksonScala                                                               thrpt    5    140695.654 ±    13318.813   ops/s
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate                                                thrpt    5      1190.614 ±      112.780  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                           thrpt    5     13320.003 ±        0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.041 ±        0.217  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         0.468 ±        2.472    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                          thrpt    5      1220.499 ±      722.807  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                     thrpt    5     13637.086 ±     7469.721    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.799 ±        6.883  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                              thrpt    5         9.152 ±       78.803    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count                                                     thrpt    5        18.000                 counts
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time                                                      thrpt    5        36.000                     ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala                                                              thrpt    5    447326.557 ±    54570.002   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate                                               thrpt    5       495.609 ±       60.475  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                          thrpt    5      1744.001 ±        0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                         thrpt    5       471.293 ±      711.586  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                    thrpt    5      1653.986 ±     2428.376    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                  thrpt    5         0.266 ±        1.405  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                             thrpt    5         0.922 ±        4.862    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count                                                    thrpt    5         7.000                 counts
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time                                                     thrpt    5        20.000                     ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc                                                      thrpt    5    527940.218 ±     2848.998   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                       thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                  thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                            thrpt    5           ≈ 0                 counts
[info] ArrayOfPeriodsBenchmark.writePlayJson                                                                   thrpt    5    122343.336 ±     3912.477   ops/s
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate                                                    thrpt    5      1253.667 ±       39.337  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm                                               thrpt    5     16128.003 ±        0.001    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                        thrpt    5         0.021 ±        0.129  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   thrpt    5         0.275 ±        1.670    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                              thrpt    5      1220.624 ±      723.409  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                         thrpt    5     15705.397 ±     9366.039    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                       thrpt    5         0.800 ±        6.884  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                  thrpt    5        10.360 ±       89.205    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.count                                                         thrpt    5        18.000                 counts
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.time                                                          thrpt    5        33.000                     ms
[info] ArrayOfShortsBenchmark.readCirce                                                                        thrpt    5    147523.718 ±     4689.411   ops/s
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate                                                         thrpt    5      2481.019 ±       78.854  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm                                                    thrpt    5     26472.003 ±        0.001    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                             thrpt    5         0.006 ±        0.022  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        thrpt    5         0.067 ±        0.232    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                   thrpt    5      2450.613 ±      586.259  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                              thrpt    5     26144.902 ±     5958.221    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.count                                                              thrpt    5        36.000                 counts
[info] ArrayOfShortsBenchmark.readCirce:·gc.time                                                               thrpt    5        28.000                     ms
[info] ArrayOfShortsBenchmark.readJacksonScala                                                                 thrpt    5    316530.765 ±    15835.343   ops/s
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate                                                  thrpt    5       329.779 ±       16.553  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                             thrpt    5      1640.001 ±        0.001    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                            thrpt    5       336.343 ±        0.120  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                       thrpt    5      1672.871 ±       83.542    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.count                                                       thrpt    5         5.000                 counts
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.time                                                        thrpt    5        20.000                     ms
[info] ArrayOfShortsBenchmark.readJsoniterScala                                                                thrpt    5    736183.664 ±    15397.526   ops/s
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate                                                 thrpt    5       254.419 ±        5.261  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                            thrpt    5       544.001 ±        0.001    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                           thrpt    5       269.622 ±      580.382  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                      thrpt    5       577.552 ±     1243.265    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.count                                                      thrpt    5         4.000                 counts
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.time                                                       thrpt    5        12.000                     ms
[info] ArrayOfShortsBenchmark.readPlayJson                                                                     thrpt    5     73256.496 ±     3530.841   ops/s
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate                                                      thrpt    5      3238.466 ±      157.117  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                 thrpt    5     69576.006 ±        0.001    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                          thrpt    5         0.012 ±        0.027  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     thrpt    5         0.257 ±        0.578    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                thrpt    5      3199.762 ±      718.127  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                           thrpt    5     68755.832 ±    15984.657    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.count                                                           thrpt    5        47.000                 counts
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.time                                                            thrpt    5        46.000                     ms
[info] ArrayOfShortsBenchmark.writeCirce                                                                       thrpt    5    266401.568 ±    13621.174   ops/s
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate                                                        thrpt    5      1599.098 ±       80.703  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm                                                   thrpt    5      9448.002 ±        0.001    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                            thrpt    5         0.027 ±        0.118  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       thrpt    5         0.159 ±        0.697    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                  thrpt    5      1563.676 ±      727.760  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                             thrpt    5      9232.583 ±     4033.017    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                           thrpt    5         0.666 ±        5.737  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                      thrpt    5         4.027 ±       34.672    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.count                                                             thrpt    5        23.000                 counts
[info] ArrayOfShortsBenchmark.writeCirce:·gc.time                                                              thrpt    5        26.000                     ms
[info] ArrayOfShortsBenchmark.writeJacksonScala                                                                thrpt    5   1230065.103 ±    41083.161   ops/s
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate                                                 thrpt    5       806.622 ±       27.124  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                            thrpt    5      1032.000 ±        0.001    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.026 ±        0.144  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         0.033 ±        0.184    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                           thrpt    5       809.661 ±      708.342  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                      thrpt    5      1035.464 ±      895.426    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.799 ±        6.880  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                               thrpt    5         1.021 ±        8.788    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.count                                                      thrpt    5        12.000                 counts
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.time                                                       thrpt    5        45.000                     ms
[info] ArrayOfShortsBenchmark.writeJsoniterScala                                                               thrpt    5   1483162.194 ±    61902.438   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                thrpt    5       610.566 ±       25.478  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                           thrpt    5       648.000 ±        0.001    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                          thrpt    5       606.101 ±      580.748  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                     thrpt    5       643.505 ±      619.462    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.400 ±        1.405  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                              thrpt    5         0.427 ±        1.501    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count                                                     thrpt    5         9.000                 counts
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time                                                      thrpt    5        27.000                     ms
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc                                                       thrpt    5   1537682.096 ±     8527.152   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                        thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                   thrpt    5        ≈ 10⁻⁴                   B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                             thrpt    5           ≈ 0                 counts
[info] ArrayOfShortsBenchmark.writePlayJson                                                                    thrpt    5     35517.141 ±      926.450   ops/s
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate                                                     thrpt    5      1737.056 ±       45.279  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                thrpt    5     76985.818 ±       15.548    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                         thrpt    5         0.040 ±        0.308  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    thrpt    5         1.783 ±       13.714    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                               thrpt    5      1699.307 ±       20.846  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                          thrpt    5     75315.110 ±     1845.964    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                        thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                   thrpt    5        35.582 ±      306.373    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.count                                                          thrpt    5        25.000                 counts
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.time                                                           thrpt    5        30.000                     ms
[info] ArrayOfUUIDsBenchmark.readCirce                                                                         thrpt    5     46709.136 ±      711.489   ops/s
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate                                                          thrpt    5       931.764 ±       13.896  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm                                                     thrpt    5     31400.009 ±        0.001    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                              thrpt    5         0.008 ±        0.051  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         thrpt    5         0.254 ±        1.734    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                    thrpt    5       946.979 ±      587.822  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                               thrpt    5     31927.659 ±    20151.177    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                             thrpt    5         0.666 ±        5.737  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                        thrpt    5        22.546 ±      194.129    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.count                                                               thrpt    5        14.000                 counts
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.time                                                                thrpt    5        32.000                     ms
[info] ArrayOfUUIDsBenchmark.readJacksonScala                                                                  thrpt    5     80122.573 ±     3902.897   ops/s
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate                                                   thrpt    5       844.600 ±       41.267  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                              thrpt    5     16592.005 ±        0.001    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                       thrpt    5         0.015 ±        0.078  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  thrpt    5         0.293 ±        1.544    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                             thrpt    5       877.765 ±      713.935  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                        thrpt    5     17259.940 ±    14360.358    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                      thrpt    5         0.799 ±        6.883  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                 thrpt    5        15.666 ±      134.892    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count                                                        thrpt    5        13.000                 counts
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time                                                         thrpt    5        42.000                     ms
[info] ArrayOfUUIDsBenchmark.readJsoniterScala                                                                 thrpt    5    256960.574 ±     9909.444   ops/s
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate                                                  thrpt    5       835.868 ±       32.526  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                             thrpt    5      5120.002 ±        0.001    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                      thrpt    5         0.015 ±        0.087  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 thrpt    5         0.093 ±        0.528    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                            thrpt    5       810.900 ±      709.996  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                       thrpt    5      4970.197 ±     4415.948    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                     thrpt    5         0.666 ±        5.737  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                thrpt    5         4.060 ±       34.962    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count                                                       thrpt    5        12.000                 counts
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time                                                        thrpt    5        28.000                     ms
[info] ArrayOfUUIDsBenchmark.readPlayJson                                                                      thrpt    5     23402.963 ±     1929.248   ops/s
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate                                                       thrpt    5      1099.719 ±       91.191  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                  thrpt    5     73960.019 ±        0.007    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                           thrpt    5         0.075 ±        0.554  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      thrpt    5         5.117 ±       38.045    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                 thrpt    5      1083.618 ±      599.277  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                            thrpt    5     72793.968 ±    36214.200    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                          thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                     thrpt    5        54.839 ±      472.184    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.count                                                            thrpt    5        16.000                 counts
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.time                                                             thrpt    5        38.000                     ms
[info] ArrayOfUUIDsBenchmark.writeCirce                                                                        thrpt    5     58616.979 ±     1726.075   ops/s
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate                                                         thrpt    5       869.762 ±       25.263  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm                                                    thrpt    5     23352.007 ±        0.001    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                             thrpt    5         0.011 ±        0.057  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        thrpt    5         0.283 ±        1.526    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                   thrpt    5       879.074 ±      714.627  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                              thrpt    5     23629.071 ±    19741.260    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                            thrpt    5         0.666 ±        5.737  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                       thrpt    5        17.791 ±      153.190    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.count                                                              thrpt    5        13.000                 counts
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.time                                                               thrpt    5        32.000                     ms
[info] ArrayOfUUIDsBenchmark.writeJacksonScala                                                                 thrpt    5     95539.263 ±     2679.934   ops/s
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate                                                  thrpt    5      1308.759 ±       37.389  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                             thrpt    5     21560.004 ±        0.081    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                      thrpt    5         0.034 ±        0.275  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 thrpt    5         0.560 ±        4.527    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                            thrpt    5      1289.469 ±      586.747  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                       thrpt    5     21244.408 ±     9722.805    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                     thrpt    5         0.799 ±        6.883  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                thrpt    5        13.147 ±      113.195    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count                                                       thrpt    5        19.000                 counts
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time                                                        thrpt    5        34.000                     ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala                                                                thrpt    5    284308.977 ±    10030.562   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                 thrpt    5       906.052 ±       31.821  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                            thrpt    5      5016.001 ±        0.001    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.026 ±        0.191  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         0.146 ±        1.056    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                           thrpt    5       946.254 ±      571.616  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                      thrpt    5      5238.978 ±     3172.452    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.932 ±        6.688  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                               thrpt    5         5.122 ±       36.741    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count                                                      thrpt    5        14.000                 counts
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time                                                       thrpt    5        31.000                     ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc                                                        thrpt    5    322548.929 ±     1377.355   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                         thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                    thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                              thrpt    5           ≈ 0                 counts
[info] ArrayOfUUIDsBenchmark.writePlayJson                                                                     thrpt    5     76973.225 ±     4029.543   ops/s
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate                                                      thrpt    5      1140.804 ±       59.424  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                 thrpt    5     23328.005 ±        0.070    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                          thrpt    5         0.028 ±        0.230  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     thrpt    5         0.575 ±        4.712    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                thrpt    5      1151.634 ±      710.192  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                           thrpt    5     23552.745 ±    14573.819    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                         thrpt    5         0.799 ±        6.883  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                    thrpt    5        16.590 ±      142.846    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.count                                                           thrpt    5        17.000                 counts
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.time                                                            thrpt    5        37.000                     ms
[info] ArrayOfZoneIdsBenchmark.readCirce                                                                       thrpt    5     70048.821 ±     4543.389   ops/s
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate                                                        thrpt    5      1419.873 ±       92.444  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm                                                   thrpt    5     31904.006 ±        0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                            thrpt    5         0.032 ±        0.239  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       thrpt    5         0.706 ±        5.358    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                  thrpt    5      1424.769 ±      552.866  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                             thrpt    5     32063.924 ±    14739.978    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                           thrpt    5         0.799 ±        6.884  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                      thrpt    5        17.907 ±      154.185    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.count                                                             thrpt    5        21.000                 counts
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.time                                                              thrpt    5        33.000                     ms
[info] ArrayOfZoneIdsBenchmark.readJacksonScala                                                                thrpt    5     76597.051 ±     3826.068   ops/s
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate                                                 thrpt    5       882.870 ±       44.315  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                            thrpt    5     18144.005 ±        0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.021 ±        0.173  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         0.433 ±        3.528    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                           thrpt    5       876.459 ±      704.801  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                      thrpt    5     18027.809 ±    14786.909    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.932 ±        8.028  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                               thrpt    5        19.056 ±      164.075    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count                                                      thrpt    5        13.000                 counts
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time                                                       thrpt    5        43.000                     ms
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala                                                               thrpt    5     99676.297 ±     2209.230   ops/s
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate                                                thrpt    5      1049.789 ±       23.476  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                           thrpt    5     16576.004 ±        0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.021 ±        0.144  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         0.335 ±        2.272    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                          thrpt    5      1082.868 ±      566.308  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                     thrpt    5     17090.041 ±     8579.405    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                              thrpt    5        12.575 ±      108.276    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count                                                     thrpt    5        16.000                 counts
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time                                                      thrpt    5        32.000                     ms
[info] ArrayOfZoneIdsBenchmark.readPlayJson                                                                    thrpt    5     36622.251 ±     1995.745   ops/s
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate                                                     thrpt    5      1828.932 ±      100.830  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                thrpt    5     78600.012 ±        0.005    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                         thrpt    5         0.023 ±        0.163  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    thrpt    5         1.025 ±        7.161    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                               thrpt    5      1836.261 ±      725.058  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                          thrpt    5     78871.067 ±    28582.014    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                        thrpt    5         0.932 ±        8.028  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                   thrpt    5        40.804 ±      351.335    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count                                                          thrpt    5        27.000                 counts
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time                                                           thrpt    5        39.000                     ms
[info] ArrayOfZoneIdsBenchmark.writeCirce                                                                      thrpt    5    126969.747 ±     4646.902   ops/s
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate                                                       thrpt    5       563.364 ±       20.510  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm                                                  thrpt    5      6984.003 ±        0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                 thrpt    5       605.328 ±      579.035  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                            thrpt    5      7512.256 ±     7280.322    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                          thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                     thrpt    5         1.635 ±       14.077    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.count                                                            thrpt    5         9.000                 counts
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.time                                                             thrpt    5        32.000                     ms
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala                                                               thrpt    5    162446.459 ±     3580.090   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate                                                thrpt    5       241.067 ±        5.317  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                           thrpt    5      2336.003 ±        0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                          thrpt    5       268.537 ±      578.046  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                     thrpt    5      2608.263 ±     5614.569    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count                                                     thrpt    5         4.000                 counts
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time                                                      thrpt    5        17.000                     ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala                                                              thrpt    5    725064.016 ±    41777.297   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate                                               thrpt    5       899.126 ±       51.739  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                          thrpt    5      1952.001 ±        0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                   thrpt    5         0.019 ±        0.121  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm              thrpt    5         0.043 ±        0.265    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                         thrpt    5       945.755 ±      588.111  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                    thrpt    5      2056.901 ±     1356.733    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                  thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                             thrpt    5         1.747 ±       15.043    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count                                                    thrpt    5        14.000                 counts
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time                                                     thrpt    5        33.000                     ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc                                                      thrpt    5    731592.352 ±    67661.822   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                       thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                  thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                            thrpt    5           ≈ 0                 counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson                                                                   thrpt    5    191864.796 ±     4454.598   ops/s
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate                                                    thrpt    5       625.068 ±       14.360  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm                                               thrpt    5      5128.002 ±        0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                              thrpt    5       604.250 ±      578.170  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                         thrpt    5      4962.543 ±     4810.749    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count                                                         thrpt    5         9.000                 counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time                                                          thrpt    5        37.000                     ms
[info] ArrayOfZoneOffsetsBenchmark.readCirce                                                                   thrpt    5    123148.034 ±     4232.896   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate                                                    thrpt    5      1513.506 ±       52.919  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate.norm                                               thrpt    5     19344.003 ±        0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                        thrpt    5         0.011 ±        0.058  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   thrpt    5         0.145 ±        0.748    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                              thrpt    5      1494.981 ±      727.186  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                         thrpt    5     19111.306 ±     9432.702    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                       thrpt    5         0.666 ±        5.734  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                  thrpt    5         8.603 ±       74.074    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.count                                                         thrpt    5        22.000                 counts
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.time                                                          thrpt    5        33.000                     ms
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala                                                            thrpt    5    160455.048 ±    10238.242   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate                                             thrpt    5       856.223 ±       54.674  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        thrpt    5      8400.003 ±        0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.018 ±        0.098  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         0.179 ±        0.957    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                       thrpt    5       877.684 ±      713.864  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                  thrpt    5      8622.331 ±     7233.296    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                           thrpt    5         7.786 ±       67.043    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count                                                  thrpt    5        13.000                 counts
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time                                                   thrpt    5        40.000                     ms
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala                                                           thrpt    5    312508.260 ±    24741.154   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate                                            thrpt    5       606.781 ±       47.732  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       thrpt    5      3056.001 ±        0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                      thrpt    5       606.674 ±      580.214  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                 thrpt    5      3043.889 ±     2760.347    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count                                                 thrpt    5         9.000                 counts
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time                                                  thrpt    5        26.000                     ms
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson                                                                thrpt    5     62539.497 ±      873.901   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate                                                 thrpt    5      2639.613 ±       36.086  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            thrpt    5     66432.007 ±        0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.009 ±        0.014  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         0.230 ±        0.364    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                           thrpt    5      2586.884 ±      719.449  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                      thrpt    5     65102.888 ±    17953.203    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.count                                                      thrpt    5        38.000                 counts
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.time                                                       thrpt    5        32.000                     ms
[info] ArrayOfZoneOffsetsBenchmark.writeCirce                                                                  thrpt    5    184843.226 ±     1688.355   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate                                                   thrpt    5       633.182 ±        5.857  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate.norm                                              thrpt    5      5392.002 ±        0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                             thrpt    5       606.636 ±      580.380  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                        thrpt    5      5168.012 ±     4968.804    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.count                                                        thrpt    5         9.000                 counts
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.time                                                         thrpt    5        29.000                     ms
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala                                                           thrpt    5    287076.567 ±    21532.998   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate                                            thrpt    5       283.071 ±       21.373  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       thrpt    5      1552.001 ±        0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                      thrpt    5       269.086 ±      579.228  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                 thrpt    5      1481.612 ±     3191.816    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count                                                 thrpt    5         4.000                 counts
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time                                                  thrpt    5        16.000                     ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala                                                          thrpt    5   1605913.174 ±   121192.320   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           thrpt    5      1191.771 ±       90.664  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      thrpt    5      1168.000 ±        0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'               thrpt    5         0.028 ±        0.149  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm          thrpt    5         0.028 ±        0.148    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                     thrpt    5      1152.808 ±      714.453  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                thrpt    5      1130.334 ±      711.272    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                              thrpt    5         1.066 ±        7.820  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                         thrpt    5         1.067 ±        7.832    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count                                                thrpt    5        17.000                 counts
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time                                                 thrpt    5        28.000                     ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc                                                  thrpt    5   1599411.164 ±    11894.147   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              thrpt    5        ≈ 10⁻⁴                   B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        thrpt    5           ≈ 0                 counts
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson                                                               thrpt    5    299116.777 ±    16763.166   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate                                                thrpt    5       813.408 ±       45.641  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate.norm                                           thrpt    5      4280.001 ±        0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.012 ±        0.106  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         0.065 ±        0.556    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                          thrpt    5       809.479 ±      722.170  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                     thrpt    5      4254.994 ±     3690.556    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                   thrpt    5         1.066 ±        6.437  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                              thrpt    5         5.697 ±       34.754    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.count                                                     thrpt    5        12.000                 counts
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.time                                                      thrpt    5        43.000                     ms
[info] ArrayOfZonedDateTimesBenchmark.readCirce                                                                thrpt    5      4393.555 ±      120.239   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate                                                 thrpt    5       867.092 ±       23.761  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                            thrpt    5    310616.099 ±        0.022    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.044 ±        0.378  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5        15.675 ±      134.963    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                           thrpt    5       876.531 ±      717.116  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                      thrpt    5    313820.522 ±   252999.193    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.932 ±        6.688  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                               thrpt    5       337.602 ±     2426.525    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count                                                      thrpt    5        13.000                 counts
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time                                                       thrpt    5        38.000                     ms
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala                                                         thrpt    5      4270.741 ±       27.401   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                          thrpt    5       802.761 ±        5.532  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     thrpt    5    295816.099 ±        0.016    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'              thrpt    5         0.016 ±        0.135  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm         thrpt    5         5.751 ±       49.518    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                    thrpt    5       806.892 ±      700.231  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                               thrpt    5    297410.838 ±   259701.641    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                             thrpt    5         1.332 ±        8.697  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                        thrpt    5       491.886 ±     3214.770    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.count                                               thrpt    5        12.000                 counts
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.time                                                thrpt    5        47.000                     ms
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala                                                        thrpt    5     31237.549 ±     1421.336   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                         thrpt    5       530.736 ±       24.137  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    thrpt    5     26744.014 ±        0.005    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                   thrpt    5       470.898 ±      709.443  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                              thrpt    5     23719.018 ±    35587.910    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count                                              thrpt    5         7.000                 counts
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time                                               thrpt    5        22.000                     ms
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson                                                             thrpt    5      3714.925 ±      160.688   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                              thrpt    5       943.485 ±       40.716  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                         thrpt    5    399728.167 ±        0.478    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                  thrpt    5         0.016 ±        0.135  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm             thrpt    5         6.627 ±       57.059    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                        thrpt    5       944.071 ±      589.289  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                   thrpt    5    400125.777 ±   252738.911    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                 thrpt    5         1.065 ±        7.820  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                            thrpt    5       450.395 ±     3306.588    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count                                                   thrpt    5        14.000                 counts
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time                                                    thrpt    5        46.000                     ms
[info] ArrayOfZonedDateTimesBenchmark.writeCirce                                                               thrpt    5     14161.605 ±      146.170   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate                                                thrpt    5       788.446 ±        6.881  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                           thrpt    5     87626.055 ±      118.471    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.007 ±        0.061  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         0.786 ±        6.766    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                          thrpt    5       740.332 ±      577.775  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                     thrpt    5     82290.318 ±    64552.231    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                   thrpt    5         1.332 ±        7.255  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                              thrpt    5       148.258 ±      807.905    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count                                                     thrpt    5        11.000                 counts
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time                                                      thrpt    5        38.000                     ms
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala                                                        thrpt    5     16419.427 ±      134.616   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                         thrpt    5       850.543 ±        7.238  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                    thrpt    5     81536.051 ±        0.174    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'             thrpt    5         0.022 ±        0.118  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm        thrpt    5         2.130 ±       11.357    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                   thrpt    5       876.377 ±      713.615  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                              thrpt    5     84022.677 ±    68617.571    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                            thrpt    5         1.066 ±        7.821  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                       thrpt    5       102.222 ±      750.576    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.count                                              thrpt    5        13.000                 counts
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.time                                               thrpt    5        44.000                     ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala                                                       thrpt    5    263312.174 ±    14169.202   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                        thrpt    5       928.744 ±       49.509  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                   thrpt    5      5552.002 ±        0.001    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'            thrpt    5         0.027 ±        0.179  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm       thrpt    5         0.162 ±        1.093    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                  thrpt    5       945.797 ±      570.643  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                             thrpt    5      5646.147 ±     3206.895    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                           thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                      thrpt    5         4.735 ±       40.766    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count                                             thrpt    5        14.000                 counts
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time                                              thrpt    5        34.000                     ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc                                               thrpt    5    282244.034 ±     4381.269   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                           thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                     thrpt    5           ≈ 0                 counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson                                                            thrpt    5     15333.480 ±      462.300   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                             thrpt    5       851.488 ±       26.057  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                        thrpt    5     87410.043 ±       25.763    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.057 ±        0.308  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         5.794 ±       31.464    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                       thrpt    5       875.544 ±      701.438  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                  thrpt    5     89951.014 ±    73485.449    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                thrpt    5         0.932 ±        8.029  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                           thrpt    5        95.885 ±      825.603    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count                                                  thrpt    5        13.000                 counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time                                                   thrpt    5        46.000                     ms
[info] ArraysBenchmark.readCirce                                                                               thrpt    5    846670.866 ±    17961.050   ops/s
[info] ArraysBenchmark.readCirce:·gc.alloc.rate                                                                thrpt    5      2728.292 ±       58.085  MB/sec
[info] ArraysBenchmark.readCirce:·gc.alloc.rate.norm                                                           thrpt    5      5072.000 ±        0.001    B/op
[info] ArraysBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                    thrpt    5         0.002 ±        0.003  MB/sec
[info] ArraysBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                               thrpt    5         0.004 ±        0.006    B/op
[info] ArraysBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                          thrpt    5      2722.998 ±        2.537  MB/sec
[info] ArraysBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                     thrpt    5      5062.284 ±      108.045    B/op
[info] ArraysBenchmark.readCirce:·gc.count                                                                     thrpt    5        40.000                 counts
[info] ArraysBenchmark.readCirce:·gc.time                                                                      thrpt    5        37.000                     ms
[info] ArraysBenchmark.readJacksonScala                                                                        thrpt    5   1359656.528 ±    56718.719   ops/s
[info] ArraysBenchmark.readJacksonScala:·gc.alloc.rate                                                         thrpt    5      1278.455 ±       53.428  MB/sec
[info] ArraysBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                    thrpt    5      1480.000 ±        0.001    B/op
[info] ArraysBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                             thrpt    5         0.021 ±        0.103  MB/sec
[info] ArraysBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        thrpt    5         0.025 ±        0.120    B/op
[info] ArraysBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                   thrpt    5      1220.530 ±      722.872  MB/sec
[info] ArraysBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                              thrpt    5      1414.322 ±      874.743    B/op
[info] ArraysBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                            thrpt    5         0.799 ±        6.882  MB/sec
[info] ArraysBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                       thrpt    5         0.942 ±        8.113    B/op
[info] ArraysBenchmark.readJacksonScala:·gc.count                                                              thrpt    5        18.000                 counts
[info] ArraysBenchmark.readJacksonScala:·gc.time                                                               thrpt    5        37.000                     ms
[info] ArraysBenchmark.readJsoniterScala                                                                       thrpt    5   7696721.773 ±   355526.180   ops/s
[info] ArraysBenchmark.readJsoniterScala:·gc.alloc.rate                                                        thrpt    5      1916.831 ±       89.034  MB/sec
[info] ArraysBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                   thrpt    5       392.000 ±        0.001    B/op
[info] ArraysBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                            thrpt    5         0.028 ±        0.227  MB/sec
[info] ArraysBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       thrpt    5         0.006 ±        0.047    B/op
[info] ArraysBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                  thrpt    5      1974.111 ±      586.397  MB/sec
[info] ArraysBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                             thrpt    5       403.794 ±      123.296    B/op
[info] ArraysBenchmark.readJsoniterScala:·gc.count                                                             thrpt    5        29.000                 counts
[info] ArraysBenchmark.readJsoniterScala:·gc.time                                                              thrpt    5        24.000                     ms
[info] ArraysBenchmark.readPlayJson                                                                            thrpt    5    296705.980 ±    11925.958   ops/s
[info] ArraysBenchmark.readPlayJson:·gc.alloc.rate                                                             thrpt    5      1775.072 ±       71.165  MB/sec
[info] ArraysBenchmark.readPlayJson:·gc.alloc.rate.norm                                                        thrpt    5      9416.001 ±        0.001    B/op
[info] ArraysBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                 thrpt    5         0.015 ±        0.118  MB/sec
[info] ArraysBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                            thrpt    5         0.081 ±        0.621    B/op
[info] ArraysBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                       thrpt    5      1766.417 ±      595.564  MB/sec
[info] ArraysBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                  thrpt    5      9375.418 ±     3450.276    B/op
[info] ArraysBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                thrpt    5         1.066 ±        9.175  MB/sec
[info] ArraysBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                           thrpt    5         5.708 ±       49.144    B/op
[info] ArraysBenchmark.readPlayJson:·gc.count                                                                  thrpt    5        26.000                 counts
[info] ArraysBenchmark.readPlayJson:·gc.time                                                                   thrpt    5        44.000                     ms
[info] ArraysBenchmark.writeCirce                                                                              thrpt    5    987969.670 ±    28884.508   ops/s
[info] ArraysBenchmark.writeCirce:·gc.alloc.rate                                                               thrpt    5      2124.342 ±       62.805  MB/sec
[info] ArraysBenchmark.writeCirce:·gc.alloc.rate.norm                                                          thrpt    5      3384.000 ±        0.001    B/op
[info] ArraysBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   thrpt    5         0.029 ±        0.227  MB/sec
[info] ArraysBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              thrpt    5         0.046 ±        0.361    B/op
[info] ArraysBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                         thrpt    5      2178.025 ±      713.239  MB/sec
[info] ArraysBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                    thrpt    5      3470.970 ±     1214.166    B/op
[info] ArraysBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                  thrpt    5         0.666 ±        5.735  MB/sec
[info] ArraysBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                             thrpt    5         1.060 ±        9.123    B/op
[info] ArraysBenchmark.writeCirce:·gc.count                                                                    thrpt    5        32.000                 counts
[info] ArraysBenchmark.writeCirce:·gc.time                                                                     thrpt    5        30.000                     ms
[info] ArraysBenchmark.writeJacksonScala                                                                       thrpt    5   2888344.497 ±    89169.912   ops/s
[info] ArraysBenchmark.writeJacksonScala:·gc.alloc.rate                                                        thrpt    5      1644.195 ±       51.270  MB/sec
[info] ArraysBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                   thrpt    5       896.000 ±        0.001    B/op
[info] ArraysBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                            thrpt    5         0.010 ±        0.070  MB/sec
[info] ArraysBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       thrpt    5         0.005 ±        0.038    B/op
[info] ArraysBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                  thrpt    5      1630.055 ±      617.314  MB/sec
[info] ArraysBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                             thrpt    5       887.873 ±      316.929    B/op
[info] ArraysBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                           thrpt    5         1.066 ±        7.820  MB/sec
[info] ArraysBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                      thrpt    5         0.587 ±        4.314    B/op
[info] ArraysBenchmark.writeJacksonScala:·gc.count                                                             thrpt    5        24.000                 counts
[info] ArraysBenchmark.writeJacksonScala:·gc.time                                                              thrpt    5        38.000                     ms
[info] ArraysBenchmark.writeJsoniterScala                                                                      thrpt    5  13855697.829 ±  1301525.225   ops/s
[info] ArraysBenchmark.writeJsoniterScala:·gc.alloc.rate                                                       thrpt    5       845.112 ±       79.518  MB/sec
[info] ArraysBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                  thrpt    5        96.000 ±        0.001    B/op
[info] ArraysBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                           thrpt    5         0.030 ±        0.186  MB/sec
[info] ArraysBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      thrpt    5         0.003 ±        0.022    B/op
[info] ArraysBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                 thrpt    5       810.290 ±      710.207  MB/sec
[info] ArraysBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                            thrpt    5        91.947 ±       77.723    B/op
[info] ArraysBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                          thrpt    5         1.066 ±        6.438  MB/sec
[info] ArraysBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                     thrpt    5         0.121 ±        0.729    B/op
[info] ArraysBenchmark.writeJsoniterScala:·gc.count                                                            thrpt    5        12.000                 counts
[info] ArraysBenchmark.writeJsoniterScala:·gc.time                                                             thrpt    5        29.000                     ms
[info] ArraysBenchmark.writePlayJson                                                                           thrpt    5    482063.616 ±    24797.491   ops/s
[info] ArraysBenchmark.writePlayJson:·gc.alloc.rate                                                            thrpt    5      1641.449 ±       84.460  MB/sec
[info] ArraysBenchmark.writePlayJson:·gc.alloc.rate.norm                                                       thrpt    5      5360.001 ±        0.001    B/op
[info] ArraysBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                thrpt    5         0.036 ±        0.300  MB/sec
[info] ArraysBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           thrpt    5         0.120 ±        0.993    B/op
[info] ArraysBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                      thrpt    5      1629.124 ±      577.528  MB/sec
[info] ArraysBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                 thrpt    5      5324.062 ±     2058.352    B/op
[info] ArraysBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                               thrpt    5         0.932 ±        6.687  MB/sec
[info] ArraysBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                          thrpt    5         3.080 ±       22.079    B/op
[info] ArraysBenchmark.writePlayJson:·gc.count                                                                 thrpt    5        24.000                 counts
[info] ArraysBenchmark.writePlayJson:·gc.time                                                                  thrpt    5        40.000                     ms
[info] BitSetsBenchmark.readJacksonScala                                                                       thrpt    5   1858207.595 ±    23853.634   ops/s
[info] BitSetsBenchmark.readJacksonScala:·gc.alloc.rate                                                        thrpt    5      1180.406 ±       15.331  MB/sec
[info] BitSetsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                   thrpt    5      1000.000 ±        0.001    B/op
[info] BitSetsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                            thrpt    5         0.012 ±        0.103  MB/sec
[info] BitSetsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       thrpt    5         0.010 ±        0.087    B/op
[info] BitSetsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                  thrpt    5      1218.782 ±      719.779  MB/sec
[info] BitSetsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                             thrpt    5      1032.508 ±      609.492    B/op
[info] BitSetsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                           thrpt    5         1.066 ±        9.174  MB/sec
[info] BitSetsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                      thrpt    5         0.905 ±        7.794    B/op
[info] BitSetsBenchmark.readJacksonScala:·gc.count                                                             thrpt    5        18.000                 counts
[info] BitSetsBenchmark.readJacksonScala:·gc.time                                                              thrpt    5        41.000                     ms
[info] BitSetsBenchmark.readJsoniterScala                                                                      thrpt    5   8493104.513 ±   140509.327   ops/s
[info] BitSetsBenchmark.readJsoniterScala:·gc.alloc.rate                                                       thrpt    5      1122.287 ±       18.448  MB/sec
[info] BitSetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                  thrpt    5       208.000 ±        0.001    B/op
[info] BitSetsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                           thrpt    5         0.024 ±        0.204  MB/sec
[info] BitSetsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      thrpt    5         0.004 ±        0.038    B/op
[info] BitSetsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                 thrpt    5      1152.521 ±      710.849  MB/sec
[info] BitSetsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                            thrpt    5       213.650 ±      133.160    B/op
[info] BitSetsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                          thrpt    5         0.666 ±        5.734  MB/sec
[info] BitSetsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                     thrpt    5         0.124 ±        1.070    B/op
[info] BitSetsBenchmark.readJsoniterScala:·gc.count                                                            thrpt    5        17.000                 counts
[info] BitSetsBenchmark.readJsoniterScala:·gc.time                                                             thrpt    5        29.000                     ms
[info] BitSetsBenchmark.readPlayJson                                                                           thrpt    5    316258.266 ±     7102.030   ops/s
[info] BitSetsBenchmark.readPlayJson:·gc.alloc.rate                                                            thrpt    5      1516.000 ±       33.635  MB/sec
[info] BitSetsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                       thrpt    5      7544.001 ±        0.001    B/op
[info] BitSetsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                thrpt    5         0.014 ±        0.117  MB/sec
[info] BitSetsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           thrpt    5         0.071 ±        0.579    B/op
[info] BitSetsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                      thrpt    5      1493.582 ±      733.301  MB/sec
[info] BitSetsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                 thrpt    5      7433.384 ±     3682.889    B/op
[info] BitSetsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                               thrpt    5         1.066 ±        6.690  MB/sec
[info] BitSetsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                          thrpt    5         5.306 ±       33.226    B/op
[info] BitSetsBenchmark.readPlayJson:·gc.count                                                                 thrpt    5        22.000                 counts
[info] BitSetsBenchmark.readPlayJson:·gc.time                                                                  thrpt    5        43.000                     ms
[info] BitSetsBenchmark.writeJacksonScala                                                                      thrpt    5   2246938.517 ±   179445.330   ops/s
[info] BitSetsBenchmark.writeJacksonScala:·gc.alloc.rate                                                       thrpt    5      1187.799 ±       94.283  MB/sec
[info] BitSetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                  thrpt    5       832.000 ±        0.001    B/op
[info] BitSetsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                           thrpt    5         0.016 ±        0.125  MB/sec
[info] BitSetsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      thrpt    5         0.011 ±        0.089    B/op
[info] BitSetsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                 thrpt    5      1151.584 ±      712.367  MB/sec
[info] BitSetsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                            thrpt    5       806.722 ±      496.587    B/op
[info] BitSetsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                          thrpt    5         0.932 ±        8.028  MB/sec
[info] BitSetsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                     thrpt    5         0.644 ±        5.542    B/op
[info] BitSetsBenchmark.writeJacksonScala:·gc.count                                                            thrpt    5        17.000                 counts
[info] BitSetsBenchmark.writeJacksonScala:·gc.time                                                             thrpt    5        36.000                     ms
[info] BitSetsBenchmark.writeJsoniterScala                                                                     thrpt    5   6182656.622 ±   323041.177   ops/s
[info] BitSetsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                      thrpt    5       942.770 ±       48.803  MB/sec
[info] BitSetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                 thrpt    5       240.000 ±        0.001    B/op
[info] BitSetsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                          thrpt    5         0.025 ±        0.216  MB/sec
[info] BitSetsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     thrpt    5         0.006 ±        0.054    B/op
[info] BitSetsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                thrpt    5       879.140 ±      710.424  MB/sec
[info] BitSetsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                           thrpt    5       223.887 ±      182.385    B/op
[info] BitSetsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                         thrpt    5         0.933 ±        6.689  MB/sec
[info] BitSetsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                    thrpt    5         0.237 ±        1.692    B/op
[info] BitSetsBenchmark.writeJsoniterScala:·gc.count                                                           thrpt    5        13.000                 counts
[info] BitSetsBenchmark.writeJsoniterScala:·gc.time                                                            thrpt    5        29.000                     ms
[info] BitSetsBenchmark.writePlayJson                                                                          thrpt    5    571072.908 ±    30847.117   ops/s
[info] BitSetsBenchmark.writePlayJson:·gc.alloc.rate                                                           thrpt    5      1654.316 ±       89.564  MB/sec
[info] BitSetsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                      thrpt    5      4560.001 ±        0.001    B/op
[info] BitSetsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                               thrpt    5         0.017 ±        0.141  MB/sec
[info] BitSetsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          thrpt    5         0.047 ±        0.385    B/op
[info] BitSetsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                     thrpt    5      1630.296 ±      579.632  MB/sec
[info] BitSetsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                thrpt    5      4495.582 ±     1663.206    B/op
[info] BitSetsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                              thrpt    5         0.799 ±        6.881  MB/sec
[info] BitSetsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                         thrpt    5         2.259 ±       19.452    B/op
[info] BitSetsBenchmark.writePlayJson:·gc.count                                                                thrpt    5        24.000                 counts
[info] BitSetsBenchmark.writePlayJson:·gc.time                                                                 thrpt    5        34.000                     ms
[info] ExtractFieldsBenchmark.readCirce                                                                        thrpt    5    741008.247 ±    13855.870   ops/s
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate                                                         thrpt    5      2410.969 ±       44.272  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm                                                    thrpt    5      5120.001 ±        0.001    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                             thrpt    5         0.004 ±        0.015  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        thrpt    5         0.009 ±        0.033    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                   thrpt    5      2383.180 ±        1.256  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                              thrpt    5      5061.082 ±       94.821    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.count                                                              thrpt    5        35.000                 counts
[info] ExtractFieldsBenchmark.readCirce:·gc.time                                                               thrpt    5        28.000                     ms
[info] ExtractFieldsBenchmark.readJacksonScala                                                                 thrpt    5    774762.448 ±    19590.413   ops/s
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate                                                  thrpt    5       960.889 ±       24.910  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                             thrpt    5      1952.001 ±        0.001    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                      thrpt    5         0.042 ±        0.309  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 thrpt    5         0.085 ±        0.623    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                            thrpt    5       945.350 ±      588.290  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                       thrpt    5      1920.915 ±     1205.291    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                     thrpt    5         1.199 ±        6.125  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                thrpt    5         2.428 ±       12.346    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.count                                                       thrpt    5        14.000                 counts
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.time                                                        thrpt    5        45.000                     ms
[info] ExtractFieldsBenchmark.readJsoniterScala                                                                thrpt    5   7008624.671 ±   299960.826   ops/s
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate                                                 thrpt    5       320.578 ±       13.696  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                            thrpt    5        72.000 ±        0.001    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                           thrpt    5       337.288 ±        1.380  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                      thrpt    5        75.761 ±        3.402    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.133 ±        1.147  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                               thrpt    5         0.030 ±        0.254    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.count                                                      thrpt    5         5.000                 counts
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.time                                                       thrpt    5        12.000                     ms
[info] ExtractFieldsBenchmark.readPlayJson                                                                     thrpt    5    262724.417 ±     6253.300   ops/s
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate                                                      thrpt    5      1460.804 ±       34.655  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                 thrpt    5      8752.002 ±        0.001    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                          thrpt    5         0.036 ±        0.241  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     thrpt    5         0.215 ±        1.446    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                thrpt    5      1491.709 ±      702.718  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                           thrpt    5      8939.914 ±     4315.961    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                         thrpt    5         1.066 ±        7.822  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                    thrpt    5         6.392 ±       46.841    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.count                                                           thrpt    5        22.000                 counts
[info] ExtractFieldsBenchmark.readPlayJson:·gc.time                                                            thrpt    5        45.000                     ms
[info] GoogleMapsAPIBenchmark.readCirce                                                                        thrpt    5      7655.442 ±      253.167   ops/s
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate                                                         thrpt    5      1842.198 ±       61.125  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm                                                    thrpt    5    378784.057 ±        0.017    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                             thrpt    5         0.090 ±        0.052  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        thrpt    5        18.563 ±       10.352    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                   thrpt    5      1836.334 ±      710.808  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                              thrpt    5    377353.087 ±   133919.009    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                            thrpt    5         0.666 ±        5.734  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                       thrpt    5       136.073 ±     1171.627    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.count                                                              thrpt    5        27.000                 counts
[info] GoogleMapsAPIBenchmark.readCirce:·gc.time                                                               thrpt    5        30.000                     ms
[info] GoogleMapsAPIBenchmark.readJacksonScala                                                                 thrpt    5     13100.542 ±       60.960   ops/s
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate                                                  thrpt    5       331.867 ±        1.655  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                                             thrpt    5     39872.032 ±        0.008    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                            thrpt    5       335.678 ±        0.166  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                       thrpt    5     40329.895 ±      191.592    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.count                                                       thrpt    5         5.000                 counts
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.time                                                        thrpt    5        23.000                     ms
[info] GoogleMapsAPIBenchmark.readJsoniterScala                                                                thrpt    5     22723.811 ±      238.025   ops/s
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                                 thrpt    5       388.294 ±        4.114  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                            thrpt    5     26896.019 ±        0.008    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                           thrpt    5       404.432 ±      580.294  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                      thrpt    5     28036.124 ±    40623.777    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count                                                      thrpt    5         6.000                 counts
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time                                                       thrpt    5        18.000                     ms
[info] GoogleMapsAPIBenchmark.readPlayJson                                                                     thrpt    5      2080.259 ±       88.071   ops/s
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate                                                      thrpt    5      1321.951 ±       55.832  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                                 thrpt    5   1000113.220 ±        8.752    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                          thrpt    5         0.027 ±        0.161  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     thrpt    5        20.336 ±      121.141    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                thrpt    5      1287.472 ±      603.610  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                           thrpt    5    973636.181 ±   442222.201    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                         thrpt    5         1.065 ±        7.819  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                    thrpt    5       808.107 ±     5924.866    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.count                                                           thrpt    5        19.000                 counts
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.time                                                            thrpt    5        42.000                     ms
[info] GoogleMapsAPIBenchmark.writeCirce                                                                       thrpt    5      7135.342 ±      280.897   ops/s
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate                                                        thrpt    5      1460.606 ±       58.285  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm                                                   thrpt    5    322160.059 ±        0.010    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                            thrpt    5         0.022 ±        0.175  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       thrpt    5         4.806 ±       38.593    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                  thrpt    5      1494.293 ±      700.119  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                             thrpt    5    329795.204 ±   162052.905    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                           thrpt    5         0.666 ±        5.734  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                      thrpt    5       148.146 ±     1275.580    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.count                                                             thrpt    5        22.000                 counts
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.time                                                              thrpt    5        32.000                     ms
[info] GoogleMapsAPIBenchmark.writeJacksonScala                                                                thrpt    5     36893.420 ±     2264.302   ops/s
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                                 thrpt    5       534.584 ±       32.568  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                            thrpt    5     22807.833 ±        0.129    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                           thrpt    5       537.116 ±      708.079  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                      thrpt    5     22948.860 ±    30598.527    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count                                                      thrpt    5         8.000                 counts
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time                                                       thrpt    5        36.000                     ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScala                                                               thrpt    5     54902.740 ±     1734.095   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                                thrpt    5       414.659 ±       13.076  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                           thrpt    5     11888.008 ±        0.001    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                          thrpt    5       403.771 ±      578.966  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                     thrpt    5     11567.794 ±    16434.044    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.133 ±        1.147  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                              thrpt    5         3.802 ±       32.738    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count                                                     thrpt    5         6.000                 counts
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time                                                      thrpt    5        18.000                     ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc                                                       thrpt    5     67946.223 ±      143.967   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                        thrpt    5         1.036 ±        0.002  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                   thrpt    5        24.006 ±        0.001    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                                             thrpt    5           ≈ 0                 counts
[info] GoogleMapsAPIBenchmark.writePlayJson                                                                    thrpt    5      5567.691 ±      247.877   ops/s
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate                                                     thrpt    5      1582.325 ±       70.047  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm                                                thrpt    5    447287.981 ±        1.680    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                         thrpt    5         0.056 ±        0.176  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    thrpt    5        15.737 ±       49.946    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                               thrpt    5      1628.999 ±      577.736  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                          thrpt    5    460601.694 ±   167672.644    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                        thrpt    5         0.933 ±        6.688  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                   thrpt    5       267.834 ±     1924.881    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.count                                                          thrpt    5        24.000                 counts
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.time                                                           thrpt    5        42.000                     ms
[info] IntAndLongMapsBenchmark.readJsoniterScala                                                               thrpt    5   5050340.716 ±    40285.274   ops/s
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.alloc.rate                                                thrpt    5      1514.485 ±       11.809  MB/sec
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                           thrpt    5       472.000 ±        0.001    B/op
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.021 ±        0.106  MB/sec
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         0.007 ±        0.033    B/op
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                          thrpt    5      1563.072 ±      709.267  MB/sec
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                     thrpt    5       487.170 ±      222.126    B/op
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.666 ±        5.735  MB/sec
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                              thrpt    5         0.207 ±        1.783    B/op
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.count                                                     thrpt    5        23.000                 counts
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.time                                                      thrpt    5        27.000                     ms
[info] IntAndLongMapsBenchmark.readPlayJson                                                                    thrpt    5    311011.365 ±    17932.128   ops/s
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.alloc.rate                                                     thrpt    5      1794.448 ±      103.248  MB/sec
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                thrpt    5      9080.001 ±        0.001    B/op
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                         thrpt    5         0.013 ±        0.067  MB/sec
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    thrpt    5         0.065 ±        0.336    B/op
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                               thrpt    5      1767.554 ±      592.112  MB/sec
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                          thrpt    5      8942.109 ±     2824.369    B/op
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                        thrpt    5         1.066 ±        9.178  MB/sec
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                   thrpt    5         5.428 ±       46.738    B/op
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.count                                                          thrpt    5        26.000                 counts
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.time                                                           thrpt    5        33.000                     ms
[info] IntAndLongMapsBenchmark.writeJsoniterScala                                                              thrpt    5   3094782.374 ±   148342.282   ops/s
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.alloc.rate                                               thrpt    5       503.392 ±       23.922  MB/sec
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                          thrpt    5       256.000 ±        0.001    B/op
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                         thrpt    5       471.093 ±      708.976  MB/sec
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                    thrpt    5       239.319 ±      356.677    B/op
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.count                                                    thrpt    5         7.000                 counts
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.time                                                     thrpt    5        21.000                     ms
[info] IntAndLongMapsBenchmark.writePlayJson                                                                   thrpt    5    351394.857 ±    23035.592   ops/s
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.alloc.rate                                                    thrpt    5      1357.335 ±       89.304  MB/sec
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.alloc.rate.norm                                               thrpt    5      6080.001 ±        0.001    B/op
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                        thrpt    5         0.032 ±        0.277  MB/sec
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   thrpt    5         0.143 ±        1.225    B/op
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                              thrpt    5      1355.174 ±       33.698  MB/sec
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                         thrpt    5      6071.262 ±      273.566    B/op
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                       thrpt    5         1.332 ±        8.884  MB/sec
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                  thrpt    5         6.102 ±       40.811    B/op
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.count                                                         thrpt    5        20.000                 counts
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.time                                                          thrpt    5        43.000                     ms
[info] IntBenchmark.readCirce                                                                                  thrpt    5   6496560.481 ±   240803.392   ops/s
[info] IntBenchmark.readCirce:·gc.alloc.rate                                                                   thrpt    5      3929.310 ±      147.020  MB/sec
[info] IntBenchmark.readCirce:·gc.alloc.rate.norm                                                              thrpt    5       952.000 ±        0.001    B/op
[info] IntBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                       thrpt    5         0.001 ±        0.003  MB/sec
[info] IntBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                  thrpt    5        ≈ 10⁻⁴                   B/op
[info] IntBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                             thrpt    5      3948.206 ±      716.898  MB/sec
[info] IntBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                        thrpt    5       956.816 ±      193.092    B/op
[info] IntBenchmark.readCirce:·gc.count                                                                        thrpt    5        58.000                 counts
[info] IntBenchmark.readCirce:·gc.time                                                                         thrpt    5        53.000                     ms
[info] IntBenchmark.readJacksonScala                                                                           thrpt    5   7076278.660 ±   561764.348   ops/s
[info] IntBenchmark.readJacksonScala:·gc.alloc.rate                                                            thrpt    5      2661.262 ±      210.975  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                       thrpt    5       592.000 ±        0.001    B/op
[info] IntBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                thrpt    5         0.003 ±        0.008  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           thrpt    5         0.001 ±        0.002    B/op
[info] IntBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                      thrpt    5      2654.624 ±      585.737  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                 thrpt    5       590.679 ±      135.596    B/op
[info] IntBenchmark.readJacksonScala:·gc.count                                                                 thrpt    5        39.000                 counts
[info] IntBenchmark.readJacksonScala:·gc.time                                                                  thrpt    5        32.000                     ms
[info] IntBenchmark.readJsoniterScala                                                                          thrpt    5  34775513.013 ±   271693.927   ops/s
[info] IntBenchmark.readJsoniterScala:·gc.alloc.rate                                                           thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] IntBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                      thrpt    5        ≈ 10⁻⁵                   B/op
[info] IntBenchmark.readJsoniterScala:·gc.count                                                                thrpt    5           ≈ 0                 counts
[info] IntBenchmark.readNaiveScala                                                                             thrpt    5  26563884.485 ±  6833243.994   ops/s
[info] IntBenchmark.readNaiveScala:·gc.alloc.rate                                                              thrpt    5       945.044 ±      242.590  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.alloc.rate.norm                                                         thrpt    5        56.000 ±        0.001    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  thrpt    5         0.015 ±        0.125  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             thrpt    5         0.001 ±        0.008    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.G1_Old_Gen                                                        thrpt    5       947.656 ±      589.436  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.G1_Old_Gen.norm                                                   thrpt    5        56.448 ±       40.411    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.G1_Survivor_Space                                                 thrpt    5         0.666 ±        5.734  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.G1_Survivor_Space.norm                                            thrpt    5         0.039 ±        0.335    B/op
[info] IntBenchmark.readNaiveScala:·gc.count                                                                   thrpt    5        14.000                 counts
[info] IntBenchmark.readNaiveScala:·gc.time                                                                    thrpt    5        28.000                     ms
[info] IntBenchmark.readPlayJson                                                                               thrpt    5   5930751.266 ±   188177.697   ops/s
[info] IntBenchmark.readPlayJson:·gc.alloc.rate                                                                thrpt    5      2863.446 ±       90.447  MB/sec
[info] IntBenchmark.readPlayJson:·gc.alloc.rate.norm                                                           thrpt    5       760.000 ±        0.001    B/op
[info] IntBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                    thrpt    5         0.001 ±        0.004  MB/sec
[info] IntBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                               thrpt    5        ≈ 10⁻³                   B/op
[info] IntBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                          thrpt    5      2926.942 ±      717.104  MB/sec
[info] IntBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                     thrpt    5       776.987 ±      198.529    B/op
[info] IntBenchmark.readPlayJson:·gc.count                                                                     thrpt    5        43.000                 counts
[info] IntBenchmark.readPlayJson:·gc.time                                                                      thrpt    5        34.000                     ms
[info] IntBenchmark.writeCirce                                                                                 thrpt    5  20240327.438 ±  1172303.295   ops/s
[info] IntBenchmark.writeCirce:·gc.alloc.rate                                                                  thrpt    5      2263.410 ±      130.774  MB/sec
[info] IntBenchmark.writeCirce:·gc.alloc.rate.norm                                                             thrpt    5       176.000 ±        0.001    B/op
[info] IntBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                      thrpt    5         0.007 ±        0.051  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                 thrpt    5         0.001 ±        0.004    B/op
[info] IntBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                            thrpt    5      2246.658 ±      718.795  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                       thrpt    5       174.643 ±       51.894    B/op
[info] IntBenchmark.writeCirce:·gc.count                                                                       thrpt    5        33.000                 counts
[info] IntBenchmark.writeCirce:·gc.time                                                                        thrpt    5        26.000                     ms
[info] IntBenchmark.writeJacksonScala                                                                          thrpt    5  11229828.020 ±   422237.195   ops/s
[info] IntBenchmark.writeJacksonScala:·gc.alloc.rate                                                           thrpt    5      2226.039 ±       84.342  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                      thrpt    5       312.000 ±        0.001    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                               thrpt    5         0.024 ±        0.198  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          thrpt    5         0.003 ±        0.028    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                     thrpt    5      2245.679 ±      715.554  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                thrpt    5       314.888 ±      107.035    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                              thrpt    5         0.799 ±        6.882  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                         thrpt    5         0.114 ±        0.981    B/op
[info] IntBenchmark.writeJacksonScala:·gc.count                                                                thrpt    5        33.000                 counts
[info] IntBenchmark.writeJacksonScala:·gc.time                                                                 thrpt    5        30.000                     ms
[info] IntBenchmark.writeJsoniterScala                                                                         thrpt    5  41351328.002 ± 14456024.144   ops/s
[info] IntBenchmark.writeJsoniterScala:·gc.alloc.rate                                                          thrpt    5       840.770 ±      294.012  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                     thrpt    5        32.000 ±        0.001    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                              thrpt    5         0.030 ±        0.173  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         thrpt    5         0.001 ±        0.007    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                    thrpt    5       810.165 ±      701.995  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                               thrpt    5        30.747 ±       21.389    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                             thrpt    5         1.066 ±        6.439  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                        thrpt    5         0.042 ±        0.265    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.count                                                               thrpt    5        12.000                 counts
[info] IntBenchmark.writeJsoniterScala:·gc.time                                                                thrpt    5        30.000                     ms
[info] IntBenchmark.writeJsoniterScalaPrealloc                                                                 thrpt    5  46124610.203 ±  3817722.231   ops/s
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                             thrpt    5        ≈ 10⁻⁵                   B/op
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                       thrpt    5           ≈ 0                 counts
[info] IntBenchmark.writeNaiveScala                                                                            thrpt    5  39792853.442 ±   636678.847   ops/s
[info] IntBenchmark.writeNaiveScala:·gc.alloc.rate                                                             thrpt    5      2022.497 ±       31.857  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.alloc.rate.norm                                                        thrpt    5        80.000 ±        0.001    B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                 thrpt    5         0.002 ±        0.007  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                            thrpt    5        ≈ 10⁻⁴                   B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.G1_Old_Gen                                                       thrpt    5      1974.119 ±      585.214  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.G1_Old_Gen.norm                                                  thrpt    5        78.077 ±       22.600    B/op
[info] IntBenchmark.writeNaiveScala:·gc.count                                                                  thrpt    5        29.000                 counts
[info] IntBenchmark.writeNaiveScala:·gc.time                                                                   thrpt    5        22.000                     ms
[info] IntBenchmark.writePlayJson                                                                              thrpt    5   2142428.465 ±    25493.971   ops/s
[info] IntBenchmark.writePlayJson:·gc.alloc.rate                                                               thrpt    5      1720.556 ±       21.337  MB/sec
[info] IntBenchmark.writePlayJson:·gc.alloc.rate.norm                                                          thrpt    5      1264.000 ±        0.001    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   thrpt    5         0.035 ±        0.268  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              thrpt    5         0.026 ±        0.198    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                         thrpt    5      1699.518 ±       21.467  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                    thrpt    5      1248.546 ±        9.017    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                  thrpt    5         0.799 ±        6.881  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                             thrpt    5         0.590 ±        5.079    B/op
[info] IntBenchmark.writePlayJson:·gc.count                                                                    thrpt    5        25.000                 counts
[info] IntBenchmark.writePlayJson:·gc.time                                                                     thrpt    5        28.000                     ms
[info] IterablesBenchmark.readCirce                                                                            thrpt    5    569827.192 ±    23595.024   ops/s
[info] IterablesBenchmark.readCirce:·gc.alloc.rate                                                             thrpt    5      2050.507 ±       85.301  MB/sec
[info] IterablesBenchmark.readCirce:·gc.alloc.rate.norm                                                        thrpt    5      5664.001 ±        0.001    B/op
[info] IterablesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                 thrpt    5         0.034 ±        0.275  MB/sec
[info] IterablesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                            thrpt    5         0.097 ±        0.772    B/op
[info] IterablesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                       thrpt    5      2042.198 ±        1.535  MB/sec
[info] IterablesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                  thrpt    5      5641.577 ±      235.629    B/op
[info] IterablesBenchmark.readCirce:·gc.count                                                                  thrpt    5        30.000                 counts
[info] IterablesBenchmark.readCirce:·gc.time                                                                   thrpt    5        24.000                     ms
[info] IterablesBenchmark.readJacksonScala                                                                     thrpt    5    569931.753 ±    18076.740   ops/s
[info] IterablesBenchmark.readJacksonScala:·gc.alloc.rate                                                      thrpt    5       680.731 ±       21.486  MB/sec
[info] IterablesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                 thrpt    5      1880.001 ±        0.001    B/op
[info] IterablesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                thrpt    5       671.421 ±        0.266  MB/sec
[info] IterablesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                           thrpt    5      1854.388 ±       58.952    B/op
[info] IterablesBenchmark.readJacksonScala:·gc.count                                                           thrpt    5        10.000                 counts
[info] IterablesBenchmark.readJacksonScala:·gc.time                                                            thrpt    5        47.000                     ms
[info] IterablesBenchmark.readJsoniterScala                                                                    thrpt    5   3151643.013 ±    73088.626   ops/s
[info] IterablesBenchmark.readJsoniterScala:·gc.alloc.rate                                                     thrpt    5      1313.518 ±       30.587  MB/sec
[info] IterablesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                thrpt    5       656.000 ±        0.001    B/op
[info] IterablesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                         thrpt    5         0.023 ±        0.191  MB/sec
[info] IterablesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    thrpt    5         0.011 ±        0.095    B/op
[info] IterablesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                               thrpt    5      1290.066 ±      579.321  MB/sec
[info] IterablesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                          thrpt    5       644.241 ±      287.533    B/op
[info] IterablesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                        thrpt    5         0.666 ±        5.736  MB/sec
[info] IterablesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                   thrpt    5         0.332 ±        2.856    B/op
[info] IterablesBenchmark.readJsoniterScala:·gc.count                                                          thrpt    5        19.000                 counts
[info] IterablesBenchmark.readJsoniterScala:·gc.time                                                           thrpt    5        26.000                     ms
[info] IterablesBenchmark.readPlayJson                                                                         thrpt    5    216016.147 ±     7292.489   ops/s
[info] IterablesBenchmark.readPlayJson:·gc.alloc.rate                                                          thrpt    5      1511.864 ±       51.169  MB/sec
[info] IterablesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                     thrpt    5     11016.002 ±        0.001    B/op
[info] IterablesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                              thrpt    5         0.010 ±        0.084  MB/sec
[info] IterablesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         thrpt    5         0.075 ±        0.616    B/op
[info] IterablesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                    thrpt    5      1492.539 ±      699.350  MB/sec
[info] IterablesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                               thrpt    5     10880.253 ±     5285.773    B/op
[info] IterablesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                             thrpt    5         1.066 ±        7.822  MB/sec
[info] IterablesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                        thrpt    5         7.828 ±       57.445    B/op
[info] IterablesBenchmark.readPlayJson:·gc.count                                                               thrpt    5        22.000                 counts
[info] IterablesBenchmark.readPlayJson:·gc.time                                                                thrpt    5        42.000                     ms
[info] IterablesBenchmark.writeCirce                                                                           thrpt    5    812548.654 ±    15758.642   ops/s
[info] IterablesBenchmark.writeCirce:·gc.alloc.rate                                                            thrpt    5      1821.259 ±       35.349  MB/sec
[info] IterablesBenchmark.writeCirce:·gc.alloc.rate.norm                                                       thrpt    5      3528.001 ±        0.001    B/op
[info] IterablesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                thrpt    5         0.018 ±        0.139  MB/sec
[info] IterablesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           thrpt    5         0.035 ±        0.270    B/op
[info] IterablesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                      thrpt    5      1768.575 ±      588.762  MB/sec
[info] IterablesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                 thrpt    5      3426.665 ±     1182.372    B/op
[info] IterablesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                               thrpt    5         0.666 ±        5.735  MB/sec
[info] IterablesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                          thrpt    5         1.296 ±       11.157    B/op
[info] IterablesBenchmark.writeCirce:·gc.count                                                                 thrpt    5        26.000                 counts
[info] IterablesBenchmark.writeCirce:·gc.time                                                                  thrpt    5        27.000                     ms
[info] IterablesBenchmark.writeJacksonScala                                                                    thrpt    5   1362677.983 ±    45159.086   ops/s
[info] IterablesBenchmark.writeJacksonScala:·gc.alloc.rate                                                     thrpt    5       817.366 ±       27.201  MB/sec
[info] IterablesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                thrpt    5       944.000 ±        0.001    B/op
[info] IterablesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                         thrpt    5         0.051 ±        0.440  MB/sec
[info] IterablesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    thrpt    5         0.059 ±        0.505    B/op
[info] IterablesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                               thrpt    5       875.438 ±      717.695  MB/sec
[info] IterablesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                          thrpt    5      1011.038 ±      827.775    B/op
[info] IterablesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                        thrpt    5         0.932 ±        6.688  MB/sec
[info] IterablesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                   thrpt    5         1.075 ±        7.717    B/op
[info] IterablesBenchmark.writeJacksonScala:·gc.count                                                          thrpt    5        13.000                 counts
[info] IterablesBenchmark.writeJacksonScala:·gc.time                                                           thrpt    5        50.000                     ms
[info] IterablesBenchmark.writeJsoniterScala                                                                   thrpt    5   6752985.250 ±   685047.535   ops/s
[info] IterablesBenchmark.writeJsoniterScala:·gc.alloc.rate                                                    thrpt    5       755.026 ±       76.493  MB/sec
[info] IterablesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                               thrpt    5       176.000 ±        0.001    B/op
[info] IterablesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                        thrpt    5         0.006 ±        0.056  MB/sec
[info] IterablesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   thrpt    5         0.002 ±        0.014    B/op
[info] IterablesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                              thrpt    5       741.146 ±      578.064  MB/sec
[info] IterablesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                         thrpt    5       172.709 ±      131.083    B/op
[info] IterablesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                       thrpt    5         1.066 ±        6.437  MB/sec
[info] IterablesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                  thrpt    5         0.255 ±        1.568    B/op
[info] IterablesBenchmark.writeJsoniterScala:·gc.count                                                         thrpt    5        11.000                 counts
[info] IterablesBenchmark.writeJsoniterScala:·gc.time                                                          thrpt    5        32.000                     ms
[info] IterablesBenchmark.writePlayJson                                                                        thrpt    5    468683.180 ±    33666.018   ops/s
[info] IterablesBenchmark.writePlayJson:·gc.alloc.rate                                                         thrpt    5      1603.451 ±      115.264  MB/sec
[info] IterablesBenchmark.writePlayJson:·gc.alloc.rate.norm                                                    thrpt    5      5384.001 ±        0.001    B/op
[info] IterablesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                             thrpt    5         0.015 ±        0.122  MB/sec
[info] IterablesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        thrpt    5         0.050 ±        0.405    B/op
[info] IterablesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                   thrpt    5      1629.671 ±      577.717  MB/sec
[info] IterablesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                              thrpt    5      5473.821 ±     1991.392    B/op
[info] IterablesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                            thrpt    5         1.066 ±        9.177  MB/sec
[info] IterablesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                       thrpt    5         3.656 ±       31.476    B/op
[info] IterablesBenchmark.writePlayJson:·gc.count                                                              thrpt    5        24.000                 counts
[info] IterablesBenchmark.writePlayJson:·gc.time                                                               thrpt    5        39.000                     ms
[info] MapsBenchmark.readCirce                                                                                 thrpt    5    593784.574 ±     8384.880   ops/s
[info] MapsBenchmark.readCirce:·gc.alloc.rate                                                                  thrpt    5      2055.182 ±       28.168  MB/sec
[info] MapsBenchmark.readCirce:·gc.alloc.rate.norm                                                             thrpt    5      5448.001 ±        0.001    B/op
[info] MapsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                      thrpt    5         0.025 ±        0.190  MB/sec
[info] MapsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                 thrpt    5         0.066 ±        0.505    B/op
[info] MapsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                            thrpt    5      2041.468 ±        6.129  MB/sec
[info] MapsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                       thrpt    5      5411.699 ±       73.409    B/op
[info] MapsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                     thrpt    5         0.666 ±        5.735  MB/sec
[info] MapsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                                thrpt    5         1.769 ±       15.234    B/op
[info] MapsBenchmark.readCirce:·gc.count                                                                       thrpt    5        30.000                 counts
[info] MapsBenchmark.readCirce:·gc.time                                                                        thrpt    5        26.000                     ms
[info] MapsBenchmark.readJacksonScala                                                                          thrpt    5    591405.682 ±    15174.570   ops/s
[info] MapsBenchmark.readJacksonScala:·gc.alloc.rate                                                           thrpt    5       913.835 ±       23.508  MB/sec
[info] MapsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                      thrpt    5      2432.001 ±        0.001    B/op
[info] MapsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                               thrpt    5         0.050 ±        0.435  MB/sec
[info] MapsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          thrpt    5         0.134 ±        1.150    B/op
[info] MapsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                     thrpt    5       943.623 ±      586.441  MB/sec
[info] MapsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                thrpt    5      2512.027 ±     1576.922    B/op
[info] MapsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                              thrpt    5         0.932 ±        8.029  MB/sec
[info] MapsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                         thrpt    5         2.470 ±       21.263    B/op
[info] MapsBenchmark.readJacksonScala:·gc.count                                                                thrpt    5        14.000                 counts
[info] MapsBenchmark.readJacksonScala:·gc.time                                                                 thrpt    5        52.000                     ms
[info] MapsBenchmark.readJsoniterScala                                                                         thrpt    5   5093305.766 ±    72422.382   ops/s
[info] MapsBenchmark.readJsoniterScala:·gc.alloc.rate                                                          thrpt    5      1268.493 ±       17.792  MB/sec
[info] MapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                     thrpt    5       392.000 ±        0.001    B/op
[info] MapsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                              thrpt    5         0.026 ±        0.181  MB/sec
[info] MapsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         thrpt    5         0.008 ±        0.056    B/op
[info] MapsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                    thrpt    5      1289.410 ±      577.973  MB/sec
[info] MapsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                               thrpt    5       398.438 ±      177.695    B/op
[info] MapsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                             thrpt    5         0.666 ±        5.736  MB/sec
[info] MapsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                        thrpt    5         0.206 ±        1.774    B/op
[info] MapsBenchmark.readJsoniterScala:·gc.count                                                               thrpt    5        19.000                 counts
[info] MapsBenchmark.readJsoniterScala:·gc.time                                                                thrpt    5        28.000                     ms
[info] MapsBenchmark.readPlayJson                                                                              thrpt    5    326061.981 ±    16356.850   ops/s
[info] MapsBenchmark.readPlayJson:·gc.alloc.rate                                                               thrpt    5      1702.177 ±       85.968  MB/sec
[info] MapsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                          thrpt    5      8216.001 ±        0.001    B/op
[info] MapsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   thrpt    5         0.014 ±        0.113  MB/sec
[info] MapsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              thrpt    5         0.067 ±        0.549    B/op
[info] MapsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                         thrpt    5      1698.399 ±       31.684  MB/sec
[info] MapsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                    thrpt    5      8198.544 ±      294.590    B/op
[info] MapsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                  thrpt    5         1.066 ±        9.175  MB/sec
[info] MapsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                             thrpt    5         5.249 ±       45.199    B/op
[info] MapsBenchmark.readPlayJson:·gc.count                                                                    thrpt    5        25.000                 counts
[info] MapsBenchmark.readPlayJson:·gc.time                                                                     thrpt    5        37.000                     ms
[info] MapsBenchmark.writeCirce                                                                                thrpt    5    427511.995 ±     6032.532   ops/s
[info] MapsBenchmark.writeCirce:·gc.alloc.rate                                                                 thrpt    5      1095.097 ±       15.086  MB/sec
[info] MapsBenchmark.writeCirce:·gc.alloc.rate.norm                                                            thrpt    5      4032.001 ±        0.001    B/op
[info] MapsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                     thrpt    5         0.037 ±        0.207  MB/sec
[info] MapsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                thrpt    5         0.135 ±        0.763    B/op
[info] MapsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                           thrpt    5      1083.830 ±      597.772  MB/sec
[info] MapsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                      thrpt    5      3990.817 ±     2211.725    B/op
[info] MapsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                    thrpt    5         0.666 ±        5.736  MB/sec
[info] MapsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                               thrpt    5         2.466 ±       21.234    B/op
[info] MapsBenchmark.writeCirce:·gc.count                                                                      thrpt    5        16.000                 counts
[info] MapsBenchmark.writeCirce:·gc.time                                                                       thrpt    5        34.000                     ms
[info] MapsBenchmark.writeJsoniterScala                                                                        thrpt    5   3095913.492 ±   169545.487   ops/s
[info] MapsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                         thrpt    5       598.096 ±       33.924  MB/sec
[info] MapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                    thrpt    5       304.000 ±        0.001    B/op
[info] MapsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                   thrpt    5       605.420 ±      578.922  MB/sec
[info] MapsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                              thrpt    5       307.672 ±      293.585    B/op
[info] MapsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                            thrpt    5         0.133 ±        1.145  MB/sec
[info] MapsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                       thrpt    5         0.066 ±        0.567    B/op
[info] MapsBenchmark.writeJsoniterScala:·gc.count                                                              thrpt    5         9.000                 counts
[info] MapsBenchmark.writeJsoniterScala:·gc.time                                                               thrpt    5        28.000                     ms
[info] MapsBenchmark.writePlayJson                                                                             thrpt    5    341625.434 ±    16904.777   ops/s
[info] MapsBenchmark.writePlayJson:·gc.alloc.rate                                                              thrpt    5      1245.021 ±       62.089  MB/sec
[info] MapsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                         thrpt    5      5736.001 ±        0.001    B/op
[info] MapsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  thrpt    5         0.045 ±        0.383  MB/sec
[info] MapsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             thrpt    5         0.205 ±        1.750    B/op
[info] MapsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                        thrpt    5      1219.490 ±      719.081  MB/sec
[info] MapsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                   thrpt    5      5621.845 ±     3404.415    B/op
[info] MapsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                 thrpt    5         0.932 ±        5.318  MB/sec
[info] MapsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                            thrpt    5         4.360 ±       25.099    B/op
[info] MapsBenchmark.writePlayJson:·gc.count                                                                   thrpt    5        18.000                 counts
[info] MapsBenchmark.writePlayJson:·gc.time                                                                    thrpt    5        43.000                     ms
[info] MissingReqFieldBenchmark.readCirce                                                                      thrpt    5   1965310.819 ±    53494.944   ops/s
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate                                                       thrpt    5      2777.282 ±       75.155  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm                                                  thrpt    5      2224.000 ±        0.001    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                           thrpt    5         0.001 ±        0.006  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      thrpt    5         0.001 ±        0.005    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                 thrpt    5      2791.390 ±      585.305  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                            thrpt    5      2234.974 ±      432.187    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.count                                                            thrpt    5        41.000                 counts
[info] MissingReqFieldBenchmark.readCirce:·gc.time                                                             thrpt    5        32.000                     ms
[info] MissingReqFieldBenchmark.readJacksonScala                                                               thrpt    5    296884.954 ±     5930.412   ops/s
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate                                                thrpt    5       561.320 ±       11.152  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm                                           thrpt    5      2976.001 ±        0.001    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                          thrpt    5       537.939 ±      708.500  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                     thrpt    5      2855.102 ±     3793.674    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.133 ±        1.147  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                              thrpt    5         0.706 ±        6.080    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.count                                                     thrpt    5         8.000                 counts
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.time                                                      thrpt    5        35.000                     ms
[info] MissingReqFieldBenchmark.readJsoniterScala                                                              thrpt    5    727118.265 ±    27477.056   ops/s
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate                                               thrpt    5       546.928 ±       20.710  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                          thrpt    5      1184.001 ±        0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                         thrpt    5       539.514 ±      710.736  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                    thrpt    5      1167.089 ±     1527.586    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                  thrpt    5         0.266 ±        1.405  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                             thrpt    5         0.576 ±        3.038    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.count                                                    thrpt    5         8.000                 counts
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.time                                                     thrpt    5        21.000                     ms
[info] MissingReqFieldBenchmark.readJsoniterStackless                                                          thrpt    5   4006482.545 ±   263645.864   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate                                           thrpt    5      1282.940 ±       84.508  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm                                      thrpt    5       504.000 ±        0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.CodeHeap_'non-profiled_nmethods'               thrpt    5         0.020 ±        0.149  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm          thrpt    5         0.008 ±        0.060    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Old_Gen                                     thrpt    5      1290.113 ±      600.966  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Old_Gen.norm                                thrpt    5       507.276 ±      249.400    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Survivor_Space                              thrpt    5         0.666 ±        5.735  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Survivor_Space.norm                         thrpt    5         0.270 ±        2.323    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.count                                                thrpt    5        19.000                 counts
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.time                                                 thrpt    5        26.000                     ms
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump                                                    thrpt    5   8033063.105 ±   278608.291   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate                                     thrpt    5       653.229 ±       22.642  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm                                thrpt    5       128.000 ±        0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.G1_Old_Gen                               thrpt    5       674.457 ±        1.518  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.G1_Old_Gen.norm                          thrpt    5       132.168 ±        4.451    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.G1_Survivor_Space                        thrpt    5         0.266 ±        1.405  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.G1_Survivor_Space.norm                   thrpt    5         0.052 ±        0.273    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count                                          thrpt    5        10.000                 counts
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time                                           thrpt    5        26.000                     ms
[info] MissingReqFieldBenchmark.readPlayJson                                                                   thrpt    5    182967.574 ±     6756.129   ops/s
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate                                                    thrpt    5      1245.137 ±       45.563  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm                                               thrpt    5     10712.002 ±        0.001    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                        thrpt    5         0.032 ±        0.268  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   thrpt    5         0.275 ±        2.322    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                              thrpt    5      1218.191 ±      716.624  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                         thrpt    5     10475.953 ±     6030.039    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                       thrpt    5         1.199 ±        7.564  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                  thrpt    5        10.365 ±       65.479    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.count                                                         thrpt    5        18.000                 counts
[info] MissingReqFieldBenchmark.readPlayJson:·gc.time                                                          thrpt    5        45.000                     ms
[info] MutableIterablesBenchmark.readCirce                                                                     thrpt    5    670547.740 ±    22657.091   ops/s
[info] MutableIterablesBenchmark.readCirce:·gc.alloc.rate                                                      thrpt    5      2552.772 ±       87.450  MB/sec
[info] MutableIterablesBenchmark.readCirce:·gc.alloc.rate.norm                                                 thrpt    5      5992.001 ±        0.001    B/op
[info] MutableIterablesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                          thrpt    5         0.004 ±        0.007  MB/sec
[info] MutableIterablesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     thrpt    5         0.009 ±        0.015    B/op
[info] MutableIterablesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                thrpt    5      2586.847 ±      717.971  MB/sec
[info] MutableIterablesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                           thrpt    5      6073.157 ±     1749.062    B/op
[info] MutableIterablesBenchmark.readCirce:·gc.count                                                           thrpt    5        38.000                 counts
[info] MutableIterablesBenchmark.readCirce:·gc.time                                                            thrpt    5        45.000                     ms
[info] MutableIterablesBenchmark.readJsoniterScala                                                             thrpt    5   3189458.178 ±   119574.817   ops/s
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.alloc.rate                                              thrpt    5      2058.871 ±       76.605  MB/sec
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         thrpt    5      1016.000 ±        0.001    B/op
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                  thrpt    5         0.016 ±        0.127  MB/sec
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm             thrpt    5         0.008 ±        0.063    B/op
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                        thrpt    5      2042.324 ±        1.562  MB/sec
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                   thrpt    5      1007.910 ±       37.678    B/op
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.count                                                   thrpt    5        30.000                 counts
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.time                                                    thrpt    5        24.000                     ms
[info] MutableIterablesBenchmark.readPlayJson                                                                  thrpt    5    231133.242 ±     9837.945   ops/s
[info] MutableIterablesBenchmark.readPlayJson:·gc.alloc.rate                                                   thrpt    5      1654.249 ±       71.611  MB/sec
[info] MutableIterablesBenchmark.readPlayJson:·gc.alloc.rate.norm                                              thrpt    5     11264.002 ±        0.001    B/op
[info] MutableIterablesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                       thrpt    5         0.011 ±        0.086  MB/sec
[info] MutableIterablesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  thrpt    5         0.076 ±        0.586    B/op
[info] MutableIterablesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                             thrpt    5      1697.767 ±       37.901  MB/sec
[info] MutableIterablesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                        thrpt    5     11560.954 ±      297.583    B/op
[info] MutableIterablesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                      thrpt    5         1.066 ±        9.174  MB/sec
[info] MutableIterablesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                 thrpt    5         7.386 ±       63.592    B/op
[info] MutableIterablesBenchmark.readPlayJson:·gc.count                                                        thrpt    5        25.000                 counts
[info] MutableIterablesBenchmark.readPlayJson:·gc.time                                                         thrpt    5        40.000                     ms
[info] MutableIterablesBenchmark.writeCirce                                                                    thrpt    5    761558.083 ±    38410.969   ops/s
[info] MutableIterablesBenchmark.writeCirce:·gc.alloc.rate                                                     thrpt    5      1618.056 ±       81.322  MB/sec
[info] MutableIterablesBenchmark.writeCirce:·gc.alloc.rate.norm                                                thrpt    5      3344.001 ±        0.001    B/op
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                         thrpt    5         0.031 ±        0.153  MB/sec
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    thrpt    5         0.063 ±        0.315    B/op
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                               thrpt    5      1631.236 ±      581.158  MB/sec
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                          thrpt    5      3371.752 ±     1216.496    B/op
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                        thrpt    5         0.666 ±        5.736  MB/sec
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                   thrpt    5         1.380 ±       11.883    B/op
[info] MutableIterablesBenchmark.writeCirce:·gc.count                                                          thrpt    5        24.000                 counts
[info] MutableIterablesBenchmark.writeCirce:·gc.time                                                           thrpt    5        30.000                     ms
[info] MutableIterablesBenchmark.writeJacksonScala                                                             thrpt    5   1340509.592 ±    10752.698   ops/s
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.alloc.rate                                              thrpt    5       667.787 ±        5.346  MB/sec
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         thrpt    5       784.000 ±        0.001    B/op
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                        thrpt    5       670.954 ±        1.190  MB/sec
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                   thrpt    5       787.722 ±        7.254    B/op
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                 thrpt    5         0.533 ±        1.147  MB/sec
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                            thrpt    5         0.625 ±        1.346    B/op
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.count                                                   thrpt    5        10.000                 counts
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.time                                                    thrpt    5        45.000                     ms
[info] MutableIterablesBenchmark.writeJsoniterScala                                                            thrpt    5   4658910.443 ±   122365.629   ops/s
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.alloc.rate                                             thrpt    5       355.195 ±        9.492  MB/sec
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        thrpt    5       120.000 ±        0.001    B/op
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                       thrpt    5       403.783 ±      580.418  MB/sec
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                  thrpt    5       136.297 ±      193.732    B/op
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.count                                                  thrpt    5         6.000                 counts
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.time                                                   thrpt    5        18.000                     ms
[info] MutableIterablesBenchmark.writePlayJson                                                                 thrpt    5    473999.267 ±    19267.096   ops/s
[info] MutableIterablesBenchmark.writePlayJson:·gc.alloc.rate                                                  thrpt    5      1587.758 ±       65.341  MB/sec
[info] MutableIterablesBenchmark.writePlayJson:·gc.alloc.rate.norm                                             thrpt    5      5272.001 ±        0.001    B/op
[info] MutableIterablesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                      thrpt    5         0.017 ±        0.144  MB/sec
[info] MutableIterablesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 thrpt    5         0.056 ±        0.476    B/op
[info] MutableIterablesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                            thrpt    5      1561.270 ±      703.468  MB/sec
[info] MutableIterablesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                       thrpt    5      5187.012 ±     2440.505    B/op
[info] MutableIterablesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                     thrpt    5         1.066 ±        7.820  MB/sec
[info] MutableIterablesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                thrpt    5         3.595 ±       26.469    B/op
[info] MutableIterablesBenchmark.writePlayJson:·gc.count                                                       thrpt    5        23.000                 counts
[info] MutableIterablesBenchmark.writePlayJson:·gc.time                                                        thrpt    5        38.000                     ms
[info] MutableMapsBenchmark.readJacksonScala                                                                   thrpt    5    586973.007 ±    12466.075   ops/s
[info] MutableMapsBenchmark.readJacksonScala:·gc.alloc.rate                                                    thrpt    5       975.610 ±       20.434  MB/sec
[info] MutableMapsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                               thrpt    5      2616.001 ±        0.001    B/op
[info] MutableMapsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                        thrpt    5         0.051 ±        0.348  MB/sec
[info] MutableMapsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   thrpt    5         0.137 ±        0.928    B/op
[info] MutableMapsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                              thrpt    5       944.565 ±      588.706  MB/sec
[info] MutableMapsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                         thrpt    5      2533.296 ±     1591.007    B/op
[info] MutableMapsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                       thrpt    5         0.933 ±        8.031  MB/sec
[info] MutableMapsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                  thrpt    5         2.488 ±       21.421    B/op
[info] MutableMapsBenchmark.readJacksonScala:·gc.count                                                         thrpt    5        14.000                 counts
[info] MutableMapsBenchmark.readJacksonScala:·gc.time                                                          thrpt    5        47.000                     ms
[info] MutableMapsBenchmark.readJsoniterScala                                                                  thrpt    5   3036643.475 ±   142319.088   ops/s
[info] MutableMapsBenchmark.readJsoniterScala:·gc.alloc.rate                                                   thrpt    5      1435.553 ±       66.380  MB/sec
[info] MutableMapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                              thrpt    5       744.000 ±        0.001    B/op
[info] MutableMapsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                       thrpt    5         0.020 ±        0.171  MB/sec
[info] MutableMapsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  thrpt    5         0.011 ±        0.090    B/op
[info] MutableMapsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                             thrpt    5      1427.052 ±      591.783  MB/sec
[info] MutableMapsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                        thrpt    5       739.156 ±      280.925    B/op
[info] MutableMapsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                      thrpt    5         0.666 ±        5.737  MB/sec
[info] MutableMapsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                 thrpt    5         0.345 ±        2.972    B/op
[info] MutableMapsBenchmark.readJsoniterScala:·gc.count                                                        thrpt    5        21.000                 counts
[info] MutableMapsBenchmark.readJsoniterScala:·gc.time                                                         thrpt    5        26.000                     ms
[info] MutableMapsBenchmark.readPlayJson                                                                       thrpt    5    266824.675 ±     6786.494   ops/s
[info] MutableMapsBenchmark.readPlayJson:·gc.alloc.rate                                                        thrpt    5      1497.183 ±       38.064  MB/sec
[info] MutableMapsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                   thrpt    5      8832.002 ±        0.001    B/op
[info] MutableMapsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                            thrpt    5         0.009 ±        0.075  MB/sec
[info] MutableMapsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       thrpt    5         0.055 ±        0.438    B/op
[info] MutableMapsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                  thrpt    5      1493.177 ±      725.269  MB/sec
[info] MutableMapsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                             thrpt    5      8809.223 ±     4305.857    B/op
[info] MutableMapsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                           thrpt    5         1.066 ±        6.687  MB/sec
[info] MutableMapsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                      thrpt    5         6.263 ±       39.285    B/op
[info] MutableMapsBenchmark.readPlayJson:·gc.count                                                             thrpt    5        22.000                 counts
[info] MutableMapsBenchmark.readPlayJson:·gc.time                                                              thrpt    5        38.000                     ms
[info] MutableMapsBenchmark.writeCirce                                                                         thrpt    5    420834.351 ±    24099.226   ops/s
[info] MutableMapsBenchmark.writeCirce:·gc.alloc.rate                                                          thrpt    5      1037.581 ±       60.540  MB/sec
[info] MutableMapsBenchmark.writeCirce:·gc.alloc.rate.norm                                                     thrpt    5      3880.001 ±        0.001    B/op
[info] MutableMapsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                              thrpt    5         0.031 ±        0.191  MB/sec
[info] MutableMapsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         thrpt    5         0.116 ±        0.720    B/op
[info] MutableMapsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                    thrpt    5      1082.578 ±      565.423  MB/sec
[info] MutableMapsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                               thrpt    5      4047.070 ±     2045.820    B/op
[info] MutableMapsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                             thrpt    5         0.666 ±        5.734  MB/sec
[info] MutableMapsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                        thrpt    5         2.527 ±       21.758    B/op
[info] MutableMapsBenchmark.writeCirce:·gc.count                                                               thrpt    5        16.000                 counts
[info] MutableMapsBenchmark.writeCirce:·gc.time                                                                thrpt    5        37.000                     ms
[info] MutableMapsBenchmark.writeJsoniterScala                                                                 thrpt    5   2698178.652 ±    42247.986   ops/s
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                  thrpt    5       548.578 ±        8.538  MB/sec
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                             thrpt    5       320.000 ±        0.001    B/op
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                            thrpt    5       538.623 ±      709.622  MB/sec
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                       thrpt    5       314.451 ±      417.092    B/op
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                     thrpt    5         0.400 ±        1.405  MB/sec
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                thrpt    5         0.234 ±        0.821    B/op
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.count                                                       thrpt    5         8.000                 counts
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.time                                                        thrpt    5        24.000                     ms
[info] MutableMapsBenchmark.writePlayJson                                                                      thrpt    5    358582.052 ±    15627.675   ops/s
[info] MutableMapsBenchmark.writePlayJson:·gc.alloc.rate                                                       thrpt    5      1361.403 ±       59.437  MB/sec
[info] MutableMapsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                  thrpt    5      5976.001 ±        0.001    B/op
[info] MutableMapsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                           thrpt    5         0.041 ±        0.346  MB/sec
[info] MutableMapsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      thrpt    5         0.178 ±        1.519    B/op
[info] MutableMapsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                 thrpt    5      1423.123 ±      600.759  MB/sec
[info] MutableMapsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                            thrpt    5      6242.632 ±     2395.419    B/op
[info] MutableMapsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                          thrpt    5         1.066 ±        7.821  MB/sec
[info] MutableMapsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                     thrpt    5         4.688 ±       34.326    B/op
[info] MutableMapsBenchmark.writePlayJson:·gc.count                                                            thrpt    5        21.000                 counts
[info] MutableMapsBenchmark.writePlayJson:·gc.time                                                             thrpt    5        45.000                     ms
[info] PrimitivesBenchmark.readCirce                                                                           thrpt    5    622679.201 ±    21434.523   ops/s
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate                                                            thrpt    5      1917.852 ±       66.724  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm                                                       thrpt    5      4848.001 ±        0.001    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                thrpt    5         0.020 ±        0.157  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           thrpt    5         0.050 ±        0.398    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                      thrpt    5      1972.099 ±      581.188  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                 thrpt    5      4987.329 ±     1580.612    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                               thrpt    5         0.666 ±        5.735  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                          thrpt    5         1.690 ±       14.550    B/op
[info] PrimitivesBenchmark.readCirce:·gc.count                                                                 thrpt    5        29.000                 counts
[info] PrimitivesBenchmark.readCirce:·gc.time                                                                  thrpt    5        30.000                     ms
[info] PrimitivesBenchmark.readJacksonScala                                                                    thrpt    5   1339642.898 ±    49083.510   ops/s
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate                                                     thrpt    5      1014.616 ±       37.561  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                thrpt    5      1192.000 ±        0.001    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                         thrpt    5         0.044 ±        0.373  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    thrpt    5         0.052 ±        0.444    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                               thrpt    5      1013.728 ±       26.498  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                          thrpt    5      1191.046 ±       54.817    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                        thrpt    5         1.066 ±        7.823  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                   thrpt    5         1.250 ±        9.169    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.count                                                          thrpt    5        15.000                 counts
[info] PrimitivesBenchmark.readJacksonScala:·gc.time                                                           thrpt    5        45.000                     ms
[info] PrimitivesBenchmark.readJsoniterScala                                                                   thrpt    5   6382248.293 ±   128280.453   ops/s
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate                                                    thrpt    5       194.635 ±        3.871  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                               thrpt    5        48.000 ±        0.001    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                              thrpt    5       202.508 ±      711.844  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                         thrpt    5        50.066 ±      175.994    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                       thrpt    5         0.133 ±        1.147  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                  thrpt    5         0.033 ±        0.283    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.count                                                         thrpt    5         3.000                 counts
[info] PrimitivesBenchmark.readJsoniterScala:·gc.time                                                          thrpt    5         8.000                     ms
[info] PrimitivesBenchmark.readPlayJson                                                                        thrpt    5    185831.695 ±     3955.089   ops/s
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate                                                         thrpt    5      1339.306 ±       28.725  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                    thrpt    5     11344.002 ±        0.001    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                             thrpt    5         0.033 ±        0.282  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        thrpt    5         0.276 ±        2.379    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                   thrpt    5      1355.470 ±       32.204  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                              thrpt    5     11480.887 ±       75.407    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                            thrpt    5         0.933 ±        8.029  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                       thrpt    5         7.954 ±       68.490    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.count                                                              thrpt    5        20.000                 counts
[info] PrimitivesBenchmark.readPlayJson:·gc.time                                                               thrpt    5        43.000                     ms
[info] PrimitivesBenchmark.writeCirce                                                                          thrpt    5    847304.544 ±    38929.292   ops/s
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate                                                           thrpt    5      1300.557 ±       60.520  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm                                                      thrpt    5      2416.000 ±        0.001    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                               thrpt    5         0.033 ±        0.180  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          thrpt    5         0.062 ±        0.339    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                     thrpt    5      1288.697 ±      575.801  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                thrpt    5      2395.884 ±     1130.710    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                              thrpt    5         0.666 ±        5.734  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                         thrpt    5         1.247 ±       10.735    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.count                                                                thrpt    5        19.000                 counts
[info] PrimitivesBenchmark.writeCirce:·gc.time                                                                 thrpt    5        32.000                     ms
[info] PrimitivesBenchmark.writeJacksonScala                                                                   thrpt    5   2091298.314 ±    95212.637   ops/s
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate                                                    thrpt    5       861.117 ±       37.882  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                               thrpt    5       648.000 ±        0.001    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                        thrpt    5         0.024 ±        0.208  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   thrpt    5         0.018 ±        0.157    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                              thrpt    5       875.376 ±      700.818  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                         thrpt    5       659.039 ±      533.402    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                       thrpt    5         1.066 ±        7.821  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                  thrpt    5         0.799 ±        5.869    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.count                                                         thrpt    5        13.000                 counts
[info] PrimitivesBenchmark.writeJacksonScala:·gc.time                                                          thrpt    5        47.000                     ms
[info] PrimitivesBenchmark.writeJsoniterScala                                                                  thrpt    5   5691645.045 ±    46674.158   ops/s
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate                                                   thrpt    5       636.403 ±        5.198  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                              thrpt    5       176.000 ±        0.001    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                             thrpt    5       605.984 ±      580.487  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                        thrpt    5       167.652 ±      161.364    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                      thrpt    5         0.266 ±        1.405  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                 thrpt    5         0.074 ±        0.388    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.count                                                        thrpt    5         9.000                 counts
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.time                                                         thrpt    5        27.000                     ms
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc                                                          thrpt    5   5500075.055 ±    52949.792   ops/s
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                           thrpt    5       335.442 ±        3.078  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                      thrpt    5        96.000 ±        0.001    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                                     thrpt    5       336.628 ±        1.284  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                                thrpt    5        96.340 ±        0.977    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space                              thrpt    5         0.133 ±        1.147  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm                         thrpt    5         0.038 ±        0.327    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                thrpt    5         5.000                 counts
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                                 thrpt    5        15.000                     ms
[info] PrimitivesBenchmark.writePlayJson                                                                       thrpt    5    319859.391 ±    17895.343   ops/s
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate                                                        thrpt    5      1593.238 ±       89.628  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm                                                   thrpt    5      7840.001 ±        0.001    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                            thrpt    5         0.039 ±        0.323  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       thrpt    5         0.195 ±        1.621    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                  thrpt    5      1628.858 ±      575.634  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                             thrpt    5      8016.410 ±     2858.827    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                           thrpt    5         0.932 ±        6.688  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                      thrpt    5         4.675 ±       33.611    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.count                                                             thrpt    5        24.000                 counts
[info] PrimitivesBenchmark.writePlayJson:·gc.time                                                              thrpt    5        43.000                     ms
[info] StringOfAsciiCharsBenchmark.readCirce                                                                   thrpt    5   4897249.140 ±    93296.171   ops/s
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                                    thrpt    5      3434.830 ±       65.574  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                                               thrpt    5      1104.000 ±        0.001    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                        thrpt    5         0.003 ±        0.003  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   thrpt    5         0.001 ±        0.001    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                              thrpt    5      3403.639 ±        1.231  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                         thrpt    5      1093.996 ±       20.915    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.count                                                         thrpt    5        50.000                 counts
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.time                                                          thrpt    5        42.000                     ms
[info] StringOfAsciiCharsBenchmark.readJacksonScala                                                            thrpt    5   3942048.084 ±    17527.831   ops/s
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                                             thrpt    5      2043.481 ±        9.268  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        thrpt    5       816.000 ±        0.001    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.008 ±        0.054  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         0.003 ±        0.022    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                       thrpt    5      2041.106 ±        8.071  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                  thrpt    5       815.052 ±        3.663    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                thrpt    5         0.932 ±        8.028  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                           thrpt    5         0.373 ±        3.209    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count                                                  thrpt    5        30.000                 counts
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time                                                   thrpt    5        28.000                     ms
[info] StringOfAsciiCharsBenchmark.readJsoniterScala                                                           thrpt    5   7540604.160 ±   532322.173   ops/s
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                            thrpt    5       804.839 ±       56.915  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       thrpt    5       168.000 ±        0.001    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5         0.006 ±        0.054  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5         0.001 ±        0.012    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                      thrpt    5       742.935 ±      577.201  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                 thrpt    5       155.064 ±      119.168    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                               thrpt    5         0.799 ±        5.560  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                          thrpt    5         0.168 ±        1.173    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count                                                 thrpt    5        11.000                 counts
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time                                                  thrpt    5        25.000                     ms
[info] StringOfAsciiCharsBenchmark.readPlayJson                                                                thrpt    5   4625189.169 ±    65509.708   ops/s
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate                                                 thrpt    5      2491.619 ±       34.825  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            thrpt    5       848.000 ±        0.001    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.003 ±        0.012  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         0.001 ±        0.004    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                           thrpt    5      2518.500 ±      717.899  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                      thrpt    5       857.221 ±      248.836    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.count                                                      thrpt    5        37.000                 counts
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.time                                                       thrpt    5        28.000                     ms
[info] StringOfAsciiCharsBenchmark.writeCirce                                                                  thrpt    5   3348098.754 ±    41995.385   ops/s
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                                   thrpt    5       799.777 ±       10.156  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                              thrpt    5       376.000 ±        0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                       thrpt    5         0.035 ±        0.301  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  thrpt    5         0.016 ±        0.142    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                             thrpt    5       810.189 ±      717.674  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                        thrpt    5       381.064 ±      341.153    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                      thrpt    5         0.666 ±        5.734  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                 thrpt    5         0.313 ±        2.694    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.count                                                        thrpt    5        12.000                 counts
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.time                                                         thrpt    5        34.000                     ms
[info] StringOfAsciiCharsBenchmark.writeJacksonScala                                                           thrpt    5   3216889.267 ±   104227.384   ops/s
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                            thrpt    5       997.312 ±       32.074  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       thrpt    5       488.000 ±        0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5         0.021 ±        0.113  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5         0.010 ±        0.055    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                      thrpt    5      1014.650 ±       23.037  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                 thrpt    5       496.519 ±       22.725    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                               thrpt    5         0.799 ±        6.882  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                          thrpt    5         0.391 ±        3.368    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count                                                 thrpt    5        15.000                 counts
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time                                                  thrpt    5        41.000                     ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala                                                          thrpt    5   9505183.038 ±   947994.901   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           thrpt    5       917.882 ±       91.539  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      thrpt    5       152.000 ±        0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'               thrpt    5         0.030 ±        0.238  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm          thrpt    5         0.005 ±        0.040    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                     thrpt    5       878.278 ±      708.693  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                thrpt    5       145.256 ±      112.695    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                              thrpt    5         1.066 ±        6.437  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                         thrpt    5         0.178 ±        1.090    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count                                                thrpt    5        13.000                 counts
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                                 thrpt    5        30.000                     ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                                  thrpt    5   7701179.723 ±     2282.907   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              thrpt    5        ≈ 10⁻⁴                   B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        thrpt    5           ≈ 0                 counts
[info] StringOfAsciiCharsBenchmark.writePlayJson                                                               thrpt    5   3141266.847 ±    71459.837   ops/s
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                                                thrpt    5      1005.836 ±       22.988  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                           thrpt    5       504.000 ±        0.001    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.029 ±        0.152  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         0.014 ±        0.076    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                          thrpt    5       946.623 ±      572.801  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                     thrpt    5       474.432 ±      289.461    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.799 ±        6.882  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                              thrpt    5         0.403 ±        3.472    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.count                                                     thrpt    5        14.000                 counts
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.time                                                      thrpt    5        35.000                     ms
[info] StringOfNonAsciiCharsBenchmark.readCirce                                                                thrpt    5    862369.935 ±    33380.478   ops/s
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                                 thrpt    5      1415.753 ±       54.304  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                                            thrpt    5      2584.000 ±        0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.015 ±        0.113  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         0.027 ±        0.209    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                           thrpt    5      1358.146 ±       22.464  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                      thrpt    5      2479.054 ±      103.266    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.666 ±        5.736  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                               thrpt    5         1.235 ±       10.631    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.count                                                      thrpt    5        20.000                 counts
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.time                                                       thrpt    5        28.000                     ms
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala                                                         thrpt    5   1093799.922 ±    28210.336   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                                          thrpt    5       756.056 ±       19.544  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     thrpt    5      1088.000 ±        0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'              thrpt    5         0.007 ±        0.059  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm         thrpt    5         0.010 ±        0.084    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                    thrpt    5       740.667 ±      577.680  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                               thrpt    5      1066.374 ±      846.227    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                             thrpt    5         0.933 ±        8.030  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                        thrpt    5         1.331 ±       11.464    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count                                               thrpt    5        11.000                 counts
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time                                                thrpt    5        42.000                     ms
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala                                                        thrpt    5   1893369.632 ±    10742.646   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                         thrpt    5       529.313 ±        3.351  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    thrpt    5       440.000 ±        0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                   thrpt    5       539.405 ±      709.941  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                              thrpt    5       448.576 ±      592.435    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                            thrpt    5         0.133 ±        1.147  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                       thrpt    5         0.111 ±        0.955    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count                                              thrpt    5         8.000                 counts
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time                                               thrpt    5        20.000                     ms
[info] StringOfNonAsciiCharsBenchmark.readPlayJson                                                             thrpt    5   1220527.679 ±   102808.725   ops/s
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate                                              thrpt    5       868.543 ±       72.884  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                         thrpt    5      1120.000 ±        0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                  thrpt    5         0.035 ±        0.236  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm             thrpt    5         0.047 ±        0.316    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                        thrpt    5       876.994 ±      703.324  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                   thrpt    5      1129.850 ±      878.395    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                 thrpt    5         0.799 ±        6.882  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                            thrpt    5         1.037 ±        8.930    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.count                                                   thrpt    5        13.000                 counts
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.time                                                    thrpt    5        40.000                     ms
[info] StringOfNonAsciiCharsBenchmark.writeCirce                                                               thrpt    5   1759890.220 ±    49405.220   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                                thrpt    5      1413.495 ±       38.209  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                           thrpt    5      1264.000 ±        0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.018 ±        0.155  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         0.017 ±        0.139    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                          thrpt    5      1425.070 ±      554.466  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                     thrpt    5      1275.041 ±      530.695    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.666 ±        5.737  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                              thrpt    5         0.595 ±        5.127    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count                                                     thrpt    5        21.000                 counts
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time                                                      thrpt    5        31.000                     ms
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala                                                        thrpt    5   1982534.935 ±    34454.707   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                         thrpt    5       886.666 ±       15.292  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                    thrpt    5       704.000 ±        0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'             thrpt    5         0.018 ±        0.113  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm        thrpt    5         0.014 ±        0.090    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                   thrpt    5       877.706 ±      706.788  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                              thrpt    5       696.971 ±      562.789    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                            thrpt    5         0.799 ±        6.882  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                       thrpt    5         0.635 ±        5.471    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count                                              thrpt    5        13.000                 counts
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time                                               thrpt    5        40.000                     ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala                                                       thrpt    5   2430441.167 ±    76723.721   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                        thrpt    5       568.303 ±       17.548  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                   thrpt    5       368.000 ±        0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                  thrpt    5       605.595 ±      578.051  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                             thrpt    5       392.529 ±      379.162    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                           thrpt    5         0.266 ±        1.404  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                      thrpt    5         0.174 ±        0.916    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count                                             thrpt    5         9.000                 counts
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                              thrpt    5        27.000                     ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                               thrpt    5   2601839.754 ±   175830.442   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                           thrpt    5        ≈ 10⁻⁴                   B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                     thrpt    5           ≈ 0                 counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson                                                            thrpt    5   2133834.378 ±    72579.719   ops/s
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                                             thrpt    5       976.120 ±       33.451  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                        thrpt    5       720.000 ±        0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.022 ±        0.193  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         0.017 ±        0.143    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                       thrpt    5      1013.944 ±       25.053  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                  thrpt    5       747.965 ±       38.645    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                thrpt    5         0.799 ±        6.881  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                           thrpt    5         0.584 ±        5.032    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count                                                  thrpt    5        15.000                 counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time                                                   thrpt    5        38.000                     ms
[info] TwitterAPIBenchmark.readCirce                                                                           thrpt    5     10715.783 ±     2212.840   ops/s
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate                                                            thrpt    5      1569.772 ±      317.853  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm                                                       thrpt    5    230560.387 ±      930.483    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                thrpt    5         0.018 ±        0.121  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           thrpt    5         2.671 ±       17.905    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                      thrpt    5      1561.766 ±      725.941  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                 thrpt    5    229318.042 ±    92366.244    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                               thrpt    5         0.666 ±        5.734  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                          thrpt    5        98.960 ±      852.072    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.count                                                                 thrpt    5        23.000                 counts
[info] TwitterAPIBenchmark.readCirce:·gc.time                                                                  thrpt    5        43.000                     ms
[info] TwitterAPIBenchmark.readJacksonScala                                                                    thrpt    5     14336.186 ±      956.535   ops/s
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate                                                     thrpt    5       202.646 ±       13.648  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                thrpt    5     22249.469 ±       33.203    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                               thrpt    5       201.397 ±      707.938  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                          thrpt    5     21973.308 ±    77239.300    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.count                                                          thrpt    5         3.000                 counts
[info] TwitterAPIBenchmark.readJacksonScala:·gc.time                                                           thrpt    5        15.000                     ms
[info] TwitterAPIBenchmark.readJsoniterScala                                                                   thrpt    5     36992.546 ±     2573.305   ops/s
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                                    thrpt    5       342.570 ±       23.871  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                               thrpt    5     14576.012 ±        0.006    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                              thrpt    5       337.032 ±        0.156  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                         thrpt    5     14344.210 ±     1022.115    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.count                                                         thrpt    5         5.000                 counts
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.time                                                          thrpt    5        15.000                     ms
[info] TwitterAPIBenchmark.readPlayJson                                                                        thrpt    5      2798.772 ±      995.076   ops/s
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate                                                         thrpt    5       915.032 ±      324.876  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                                    thrpt    5    514383.102 ±      305.178    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                             thrpt    5         0.001 ±        0.007  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        thrpt    5         0.410 ±        3.528    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                   thrpt    5       876.030 ±      717.683  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                              thrpt    5    491166.829 ±   324851.117    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                            thrpt    5         1.199 ±        6.125  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                       thrpt    5       661.390 ±     3257.032    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.count                                                              thrpt    5        13.000                 counts
[info] TwitterAPIBenchmark.readPlayJson:·gc.time                                                               thrpt    5       111.000                     ms
[info] TwitterAPIBenchmark.writeJacksonScala                                                                   thrpt    5     54488.750 ±     3442.050   ops/s
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                                    thrpt    5       695.866 ±       43.693  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                               thrpt    5     20100.004 ±        0.233    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                              thrpt    5       670.507 ±        2.633  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                         thrpt    5     19371.799 ±     1268.303    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                       thrpt    5         0.933 ±        5.321  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                  thrpt    5        27.365 ±      157.036    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.count                                                         thrpt    5        10.000                 counts
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.time                                                          thrpt    5        53.000                     ms
[info] TwitterAPIBenchmark.writeJsoniterScala                                                                  thrpt    5     75358.626 ±     2507.757   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                                   thrpt    5       494.140 ±       16.239  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                              thrpt    5     10320.005 ±        0.001    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                             thrpt    5       470.981 ±      709.788  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                        thrpt    5      9846.069 ±    14955.430    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.count                                                        thrpt    5         7.000                 counts
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.time                                                         thrpt    5        22.000                     ms
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc                                                          thrpt    5     90583.885 ±      341.978   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                           thrpt    5        12.891 ±        0.050  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                      thrpt    5       224.005 ±        0.001    B/op
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                thrpt    5           ≈ 0                 counts
[info] Benchmark result is saved to jdk10.json
[success] Total time: 4381 s, completed Apr 1, 2018 9:43:05 AM
