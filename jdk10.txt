[info] Loading settings from idea.sbt,build.sbt ...
[info] Loading global plugins from /home/andriy/.sbt/1.0/plugins
[info] Loading settings from plugins.sbt ...
[info] Loading project definition from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/project
[info] Loading settings from release.sbt,build.sbt,version.sbt ...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[info] Setting Scala version to 2.12.5 on 4 projects.
[info] Reapplying settings...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[success] Total time: 0 s, completed Apr 9, 2018 3:31:02 PM
[info] Updating core...
[info] Done updating.
[info] Updating macros...
[info] Done updating.
[info] Updating benchmark...
[info] Done updating.
[info] Compiling 5 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/classes ...
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1026:69: constructor String in class String is deprecated: see corresponding Javadoc for more information.
[warn]   private[this] def toDouble: Double = java.lang.Double.parseDouble(new String(buf, 0, mark, head - mark))
[warn]                                                                     ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:444:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:452:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos + 1)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:941:14: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]       zoneId.getBytes(0, len, buf, pos)
[warn]              ^
[warn] four warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/core_2.12-0.22.3-SNAPSHOT.jar ...
[info] Compiling 1 Scala source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/classes ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/macros_2.12-0.22.3-SNAPSHOT.jar ...
[info] Done packaging.
[info] Compiling 49 Scala sources and 1 Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:14:48: Generated JSON codec for type 'Int':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Int] {
[info]       def nullValue: Int = 0;
[info]       def decodeValue(in: JsonReader, default: Int): Int = in.readInt();
[info]       def encodeValue(x: Int, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val intCodec: JsonValueCodec[Int] = make[Int](CodecMakerConfig()) // don't define implicit for supported types
[info]                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:15:57: Generated JSON codec for type 'String':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[String] {
[info]       def nullValue: String = null;
[info]       def decodeValue(in: JsonReader, default: String): String = in.readString(default);
[info]       def encodeValue(x: String, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val stringCodec: JsonValueCodec[String] = make[String](CodecMakerConfig()) // don't define implicit for supported types
[info]                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:16:69: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("s", "bd");
[info]       private[this] def d1(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(in.readString(null))
[info]         };
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _bd: scala.math.BigDecimal = null;
[info]           var _os: Option[String] = None;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readString(_s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3138 => if (in.isCharBufEqualsTo(l, "bd"))
[info]                       {
[info]                         _bd = in.readBigDecimal(_bd);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556 => if (in.isCharBufEqualsTo(l, "os"))
[info]                       _os = d1(in, _os)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs(s = _s, bd = _bd, os = _os)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bd");
[info]           out.writeVal(x.bd)
[info]         };
[info]         {
[info]           val v = x.os;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("os");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val anyRefsCodec: JsonValueCodec[AnyRefs] = make[AnyRefs](CodecMakerConfig())
[info]                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:17:66: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Arrays':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Arrays] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays): com.github.plokhotnyuk.jsoniter_scala.macros.Arrays = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Array[Int]] = new Array[Array[Int]](0);
[info]       private[this] val v1: Array[BigInt] = new Array[scala.math.BigInt](0);
[info]       private[this] val v2: Array[Int] = new Array[Int](0);
[info]       private[this] def d1(in: JsonReader, default: Array[Array[Int]]): Array[Array[Int]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Array[Int]](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, JsoniterCodecs.this.intArrayCodec.decodeValue(in, v2));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays): com.github.plokhotnyuk.jsoniter_scala.macros.Arrays = if (in.isNextToken('{'))
[info]         {
[info]           var _aa: Array[Array[Int]] = v0;
[info]           var _a: Array[BigInt] = v1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3104 => if (in.isCharBufEqualsTo(l, "aa"))
[info]                       _aa = d1(in, _aa)
[info]                     else
[info]                       in.skip()
[info]                     case 97 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       _a = JsoniterCodecs.this.bigIntArrayCodec.decodeValue(in, _a)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Arrays(aa = _aa, a = _a)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: Array[Array[Int]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             JsoniterCodecs.this.intArrayCodec.encodeValue(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.aa;
[info]           if (v.length.>(0))
[info]             {
[info]               out.writeNonEscapedAsciiKey("aa");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.a;
[info]           if (v.length.>(0))
[info]             {
[info]               out.writeNonEscapedAsciiKey("a");
[info]               JsoniterCodecs.this.bigIntArrayCodec.encodeValue(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val arraysCodec: JsonValueCodec[Arrays] = make[Arrays](CodecMakerConfig())
[info]                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:18:97: Generated JSON codec for type 'Array[BigDecimal]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigDecimal]] {
[info]       def nullValue: Array[BigDecimal] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = d0(in, default);
[info]       def encodeValue(x: Array[BigDecimal], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[BigDecimal] = new Array[scala.math.BigDecimal](0);
[info]       private[this] def d0(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigDecimal](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigDecimal(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[BigDecimal], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigDecimalArrayCodec: JsonValueCodec[Array[BigDecimal]] = make[Array[BigDecimal]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:19:85: Generated JSON codec for type 'Array[BigInt]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigInt]] {
[info]       def nullValue: Array[BigInt] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[BigInt]): Array[BigInt] = d0(in, default);
[info]       def encodeValue(x: Array[BigInt], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[BigInt] = new Array[scala.math.BigInt](0);
[info]       private[this] def d0(in: JsonReader, default: Array[BigInt]): Array[BigInt] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigInt](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigInt(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[BigInt], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigIntArrayCodec: JsonValueCodec[Array[BigInt]] = make[Array[BigInt]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:20:69: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.BitSets':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.BitSets] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets): com.github.plokhotnyuk.jsoniter_scala.macros.BitSets = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = BitSet.newBuilder;
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d2(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               BitSet.empty;
[info]             do 
[info]               x.add(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets): com.github.plokhotnyuk.jsoniter_scala.macros.BitSets = if (in.isNextToken('{'))
[info]         {
[info]           var _bs: scala.collection.immutable.BitSet = BitSet.empty;
[info]           var _mbs: scala.collection.mutable.BitSet = BitSet.empty;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3153 => if (in.isCharBufEqualsTo(l, "bs"))
[info]                       _bs = d1(in, _bs)
[info]                     else
[info]                       in.skip()
[info]                     case 107902 => if (in.isCharBufEqualsTo(l, "mbs"))
[info]                       _mbs = d2(in, _mbs)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.BitSets(bs = _bs, mbs = _mbs)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e2(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.bs;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("bs");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.mbs;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("mbs");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bitSetsCodec: JsonValueCodec[BitSets] = make[BitSets](CodecMakerConfig())
[info]                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:21:88: Generated JSON codec for type 'Array[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Boolean]] {
[info]       def nullValue: Array[Boolean] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Boolean]): Array[Boolean] = d0(in, default);
[info]       def encodeValue(x: Array[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Boolean] = new Array[Boolean](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Boolean]): Array[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Boolean](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBoolean());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanArrayCodec: JsonValueCodec[Array[Boolean]] = make[Array[Boolean]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:22:79: Generated JSON codec for type 'Array[Byte]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Byte]] {
[info]       def nullValue: Array[Byte] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Byte]): Array[Byte] = d0(in, default);
[info]       def encodeValue(x: Array[Byte], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Byte] = new Array[Byte](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Byte]): Array[Byte] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Byte](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readByte());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Byte], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val byteArrayCodec: JsonValueCodec[Array[Byte]] = make[Array[Byte]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:23:79: Generated JSON codec for type 'Array[Char]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Char]] {
[info]       def nullValue: Array[Char] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Char]): Array[Char] = d0(in, default);
[info]       def encodeValue(x: Array[Char], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Char] = new Array[Char](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Char]): Array[Char] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Char](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readChar());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Char], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val charArrayCodec: JsonValueCodec[Array[Char]] = make[Array[Char]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:24:85: Generated JSON codec for type 'Array[Double]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Double]] {
[info]       def nullValue: Array[Double] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Double]): Array[Double] = d0(in, default);
[info]       def encodeValue(x: Array[Double], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Double] = new Array[Double](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Double]): Array[Double] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Double](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDouble());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Double], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val doubleArrayCodec: JsonValueCodec[Array[Double]] = make[Array[Double]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:25:91: Generated JSON codec for type 'Array[java.time.Duration]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Duration]] {
[info]       def nullValue: Array[java.time.Duration] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Duration], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Duration] = new Array[java.time.Duration](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Duration](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDuration(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Duration], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val durationArrayCodec: JsonValueCodec[Array[Duration]] = make[Array[Duration]](CodecMakerConfig())
[info]                                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:26:82: Generated JSON codec for type 'Array[Float]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Float]] {
[info]       def nullValue: Array[Float] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Float]): Array[Float] = d0(in, default);
[info]       def encodeValue(x: Array[Float], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Float] = new Array[Float](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Float]): Array[Float] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Float](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readFloat());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Float], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val floatArrayCodec: JsonValueCodec[Array[Float]] = make[Array[Float]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:27:88: Generated JSON codec for type 'Array[java.time.Instant]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Instant]] {
[info]       def nullValue: Array[java.time.Instant] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Instant], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Instant] = new Array[java.time.Instant](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Instant](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInstant(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Instant], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val instantArrayCodec: JsonValueCodec[Array[Instant]] = make[Array[Instant]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:28:94: Generated JSON codec for type 'Array[java.time.LocalDate]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDate]] {
[info]       def nullValue: Array[java.time.LocalDate] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDate], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.LocalDate] = new Array[java.time.LocalDate](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDate](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDate(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalDate], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateArrayCodec: JsonValueCodec[Array[LocalDate]] = make[Array[LocalDate]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:29:106: Generated JSON codec for type 'Array[java.time.LocalDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDateTime]] {
[info]       def nullValue: Array[java.time.LocalDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.LocalDateTime] = new Array[java.time.LocalDateTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateTimeArrayCodec: JsonValueCodec[Array[LocalDateTime]] = make[Array[LocalDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:30:109: Generated JSON codec for type 'Array[java.time.OffsetDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetDateTime]] {
[info]       def nullValue: Array[java.time.OffsetDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.OffsetDateTime] = new Array[java.time.OffsetDateTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetDateTimeArrayCodec: JsonValueCodec[Array[OffsetDateTime]] = make[Array[OffsetDateTime]](CodecMakerConfig())
[info]                                                                                                             ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:31:97: Generated JSON codec for type 'Array[java.time.OffsetTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetTime]] {
[info]       def nullValue: Array[java.time.OffsetTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.OffsetTime] = new Array[java.time.OffsetTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetTimeArrayCodec: JsonValueCodec[Array[OffsetTime]] = make[Array[OffsetTime]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:32:94: Generated JSON codec for type 'Array[java.time.LocalTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalTime]] {
[info]       def nullValue: Array[java.time.LocalTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.LocalTime] = new Array[java.time.LocalTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localTimeArrayCodec: JsonValueCodec[Array[LocalTime]] = make[Array[LocalTime]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:33:85: Generated JSON codec for type 'Array[java.time.Period]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Period]] {
[info]       def nullValue: Array[java.time.Period] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Period], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Period] = new Array[java.time.Period](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Period](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readPeriod(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Period], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val periodArrayCodec: JsonValueCodec[Array[Period]] = make[Array[Period]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:34:106: Generated JSON codec for type 'Array[java.time.ZonedDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZonedDateTime]] {
[info]       def nullValue: Array[java.time.ZonedDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.ZonedDateTime] = new Array[java.time.ZonedDateTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZonedDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZonedDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zonedDateTimeArrayCodec: JsonValueCodec[Array[ZonedDateTime]] = make[Array[ZonedDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:35:97: Generated JSON codec for type 'Array[java.time.ZoneOffset]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneOffset]] {
[info]       def nullValue: Array[java.time.ZoneOffset] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.ZoneOffset] = new Array[java.time.ZoneOffset](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneOffset](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneOffset(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneOffsetArrayCodec: JsonValueCodec[Array[ZoneOffset]] = make[Array[ZoneOffset]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:36:85: Generated JSON codec for type 'Array[java.time.ZoneId]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneId]] {
[info]       def nullValue: Array[java.time.ZoneId] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneId], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.ZoneId] = new Array[java.time.ZoneId](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneId](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneId(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZoneId], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneIdArrayCodec: JsonValueCodec[Array[ZoneId]] = make[Array[ZoneId]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:37:83: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](0);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Suit): com.github.plokhotnyuk.jsoniter_scala.macros.Suit = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val v = in.readString(null);
[info]           try {
[info]             Suit.valueOf(v)
[info]           } catch {
[info]             case ((_): IllegalArgumentException) => in.enumValueError(v)
[info]           }
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private[this] def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Suit, out: JsonWriter): Unit = out.writeVal(x.name);
[info]       private[this] def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val javaEnumArrayCodec: JsonValueCodec[Array[Suit]] = make[Array[Suit]](CodecMakerConfig())
[info]                                                                                   ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:38:87: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](0);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value): com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val len = in.readStringAsCharBuf();
[info]           SuitEnum.values.iterator.find(((e) => in.isCharBufEqualsTo(len, e.toString))).getOrElse(in.enumValueError(len))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private[this] def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value, out: JsonWriter): Unit = out.writeVal(x.toString);
[info]       private[this] def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val enumArrayCodec: JsonValueCodec[Array[SuitEnum]] = make[Array[SuitEnum]](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:39:76: Generated JSON codec for type 'Array[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Int]] {
[info]       def nullValue: Array[Int] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Int]): Array[Int] = d0(in, default);
[info]       def encodeValue(x: Array[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Int] = new Array[Int](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Int]): Array[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Int](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInt());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intArrayCodec: JsonValueCodec[Array[Int]] = make[Array[Int]](CodecMakerConfig())
[info]                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:40:82: Generated JSON codec for type 'Array[Short]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Short]] {
[info]       def nullValue: Array[Short] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Short]): Array[Short] = d0(in, default);
[info]       def encodeValue(x: Array[Short], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Short] = new Array[Short](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Short]): Array[Short] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Short](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readShort());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Short], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val shortArrayCodec: JsonValueCodec[Array[Short]] = make[Array[Short]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:41:79: Generated JSON codec for type 'Array[Long]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Long]] {
[info]       def nullValue: Array[Long] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Long]): Array[Long] = d0(in, default);
[info]       def encodeValue(x: Array[Long], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Long] = new Array[Long](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Long]): Array[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLong());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Long], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val longArrayCodec: JsonValueCodec[Array[Long]] = make[Array[Long]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:42:79: Generated JSON codec for type 'Array[java.util.UUID]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.util.UUID]] {
[info]       def nullValue: Array[java.util.UUID] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = d0(in, default);
[info]       def encodeValue(x: Array[java.util.UUID], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.util.UUID] = new Array[java.util.UUID](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.util.UUID](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readUUID(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.util.UUID], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val uuidArrayCodec: JsonValueCodec[Array[UUID]] = make[Array[UUID]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:43:75: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Iterables':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Iterables] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables): com.github.plokhotnyuk.jsoniter_scala.macros.Iterables = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: scala.collection.immutable.Vector[String]): scala.collection.immutable.Vector[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Vector.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d2(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Set.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d4(in: JsonReader, default: scala.collection.immutable.HashSet[Long]): scala.collection.immutable.HashSet[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = HashSet.newBuilder[Long];
[info]             do 
[info]               x.+=(in.readLong())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d3(in: JsonReader, default: List[scala.collection.immutable.HashSet[Long]]): List[scala.collection.immutable.HashSet[Long]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = List.newBuilder[scala.collection.immutable.HashSet[Long]];
[info]             do 
[info]               x.+=(d4(in, HashSet.empty[Long]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables): com.github.plokhotnyuk.jsoniter_scala.macros.Iterables = if (in.isNextToken('{'))
[info]         {
[info]           var _l: scala.collection.immutable.Vector[String] = Vector.empty[String];
[info]           var _s: scala.collection.immutable.Set[Int] = Set.empty[Int];
[info]           var _ls: List[scala.collection.immutable.HashSet[Long]] = List.empty[scala.collection.immutable.HashSet[Long]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       _l = d1(in, _l)
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       _s = d2(in, _s)
[info]                     else
[info]                       in.skip()
[info]                     case 3463 => if (in.isCharBufEqualsTo(l, "ls"))
[info]                       _ls = d3(in, _ls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Iterables(l = _l, s = _s, ls = _ls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: scala.collection.immutable.Vector[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e2(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e4(x: scala.collection.immutable.HashSet[Long], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e3(x: List[scala.collection.immutable.HashSet[Long]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e4(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.l;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("l");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.s;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("s");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.ls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("ls");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val iterablesCodec: JsonValueCodec[Iterables] = make[Iterables](CodecMakerConfig())
[info]                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:44:60: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Maps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Maps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Maps = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Maps): com.github.plokhotnyuk.jsoniter_scala.macros.Maps = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.Maps, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: scala.collection.immutable.HashMap[String,Double]): scala.collection.immutable.HashMap[String,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = HashMap.empty[String, Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsString(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: scala.collection.immutable.HashMap[Long,Double]): scala.collection.immutable.HashMap[Long,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = HashMap.empty[Long, Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsLong(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]]): scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[Int, scala.collection.immutable.HashMap[Long,Double]];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), d3(in, HashMap.empty[Long, Double]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Maps): com.github.plokhotnyuk.jsoniter_scala.macros.Maps = if (in.isNextToken('{'))
[info]         {
[info]           var _m: scala.collection.immutable.HashMap[String,Double] = HashMap.empty[String, Double];
[info]           var _mm: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]] = Map.empty[Int, scala.collection.immutable.HashMap[Long,Double]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 109 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case 3488 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Maps(m = _m, mm = _mm)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: scala.collection.immutable.HashMap[String,Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: scala.collection.immutable.HashMap[Long,Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           e3(kv._2, out)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Maps, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.m;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("m");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.mm;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("mm");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mapsCodec: JsonValueCodec[Maps] = make[Maps](CodecMakerConfig())
[info]                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:45:95: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("s", "i");
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _i: Int = 0;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readString(_s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         _i = in.readInt();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields(s = _s, i = _i)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val missingReqFieldCodec: JsonValueCodec[MissingReqFields] = make[MissingReqFields](CodecMakerConfig())
[info]                                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:46:96: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables): com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[String]): scala.collection.mutable.ArrayBuffer[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               ArrayBuffer.empty[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d2(in: JsonReader, default: scala.collection.mutable.TreeSet[Int]): scala.collection.mutable.TreeSet[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               TreeSet.empty[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d4(in: JsonReader, default: scala.collection.mutable.Set[Long]): scala.collection.mutable.Set[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               Set.empty[Long];
[info]             do 
[info]               x.+=(in.readLong())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d3(in: JsonReader, default: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]]): scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = ResizableArray.newBuilder[scala.collection.mutable.Set[Long]];
[info]             do 
[info]               x.+=(d4(in, Set.empty[Long]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables): com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables = if (in.isNextToken('{'))
[info]         {
[info]           var _l: scala.collection.mutable.ArrayBuffer[String] = ArrayBuffer.empty[String];
[info]           var _s: scala.collection.mutable.TreeSet[Int] = TreeSet.empty[Int];
[info]           var _ls: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]] = ResizableArray.empty[scala.collection.mutable.Set[Long]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       _l = d1(in, _l)
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       _s = d2(in, _s)
[info]                     else
[info]                       in.skip()
[info]                     case 3463 => if (in.isCharBufEqualsTo(l, "ls"))
[info]                       _ls = d3(in, _ls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables(l = _l, s = _s, ls = _ls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: scala.collection.mutable.ArrayBuffer[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e2(x: scala.collection.mutable.TreeSet[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e4(x: scala.collection.mutable.Set[Long], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e3(x: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e4(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.l;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("l");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.s;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("s");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.ls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("ls");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableIterablesCodec: JsonValueCodec[MutableIterables] = make[MutableIterables](CodecMakerConfig())
[info]                                                                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:47:81: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps): com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: scala.collection.mutable.HashMap[String,Double]): scala.collection.mutable.HashMap[String,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               HashMap.empty[String, Double];
[info]             do 
[info]               x.update(in.readKeyAsString(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: scala.collection.mutable.OpenHashMap[Long,Double]): scala.collection.mutable.OpenHashMap[Long,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               OpenHashMap.empty[Long, Double];
[info]             do 
[info]               x.update(in.readKeyAsLong(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]]): scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               Map.empty[Int, scala.collection.mutable.OpenHashMap[Long,Double]];
[info]             do 
[info]               x.update(in.readKeyAsInt(), d3(in, OpenHashMap.empty[Long, Double]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps): com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps = if (in.isNextToken('{'))
[info]         {
[info]           var _m: scala.collection.mutable.HashMap[String,Double] = HashMap.empty[String, Double];
[info]           var _mm: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]] = Map.empty[Int, scala.collection.mutable.OpenHashMap[Long,Double]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 109 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case 3488 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps(m = _m, mm = _mm)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: scala.collection.mutable.HashMap[String,Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: scala.collection.mutable.OpenHashMap[Long,Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           e3(kv._2, out)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.m;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("m");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.mm;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("mm");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableMapsCodec: JsonValueCodec[MutableMaps] = make[MutableMaps](CodecMakerConfig())
[info]                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:48:90: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps): com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: scala.collection.immutable.IntMap[Double]): scala.collection.immutable.IntMap[Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = IntMap.empty[Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: scala.collection.immutable.LongMap[Double]): scala.collection.immutable.LongMap[Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = LongMap.empty[Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsLong(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]]): scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               LongMap.empty[scala.collection.immutable.LongMap[Double]];
[info]             do 
[info]               x.update(in.readKeyAsLong(), d3(in, LongMap.empty[Double]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps): com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps = if (in.isNextToken('{'))
[info]         {
[info]           var _m: scala.collection.immutable.IntMap[Double] = IntMap.empty[Double];
[info]           var _mm: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]] = LongMap.empty[scala.collection.immutable.LongMap[Double]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 109 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case 3488 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps(m = _m, mm = _mm)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: scala.collection.immutable.IntMap[Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: scala.collection.immutable.LongMap[Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           e3(kv._2, out)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.m;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("m");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.mm;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("mm");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intAndLongMapsCodec: JsonValueCodec[IntAndLongMaps] = make[IntAndLongMaps](CodecMakerConfig())
[info]                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:49:78: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Primitives':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Primitives] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("b", "s", "i", "l", "bl", "ch", "dbl", "f");
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = if (in.isNextToken('{'))
[info]         {
[info]           var _b: Byte = ((0): Byte);
[info]           var _s: Short = ((0): Short);
[info]           var _i: Int = 0;
[info]           var _l: Long = 0L;
[info]           var _bl: Boolean = false;
[info]           var _ch: Char = '\u0000';
[info]           var _dbl: Double = 0.0;
[info]           var _f: Float = 0.0F;
[info]           var req0 = 255;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         _b = in.readByte();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readShort();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         _i = in.readInt();
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = in.readLong();
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3146 => if (in.isCharBufEqualsTo(l, "bl"))
[info]                       {
[info]                         _bl = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3173 => if (in.isCharBufEqualsTo(l, "ch"))
[info]                       {
[info]                         _ch = in.readChar();
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 99246 => if (in.isCharBufEqualsTo(l, "dbl"))
[info]                       {
[info]                         _dbl = in.readDouble();
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102 => if (in.isCharBufEqualsTo(l, "f"))
[info]                       {
[info]                         _f = in.readFloat();
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Primitives(b = _b, s = _s, i = _i, l = _l, bl = _bl, ch = _ch, dbl = _dbl, f = _f)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           out.writeVal(x.b)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           out.writeVal(x.l)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bl");
[info]           out.writeVal(x.bl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("ch");
[info]           out.writeVal(x.ch)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("dbl");
[info]           out.writeVal(x.dbl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("f");
[info]           out.writeVal(x.f)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val primitivesCodec: JsonValueCodec[Primitives] = make[Primitives](CodecMakerConfig())
[info]                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:50:87: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("s", "l");
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _l: Long = 0L;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readString(_s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields(s = _s, l = _l)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           out.writeVal(x.l)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val extractFieldsCodec: JsonValueCodec[ExtractFields] = make[ExtractFields](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:51:65: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("a");
[info]       private[this] val r1: Array[String] = Array("b");
[info]       private[this] val r2: Array[String] = Array("l", "r");
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.A): com.github.plokhotnyuk.jsoniter_scala.macros.A = if (in.isNextToken('{'))
[info]         {
[info]           var _a: Int = 0;
[info]           var req0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 97 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       {
[info]                         _a = in.readInt();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.A(a = _a)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.B): com.github.plokhotnyuk.jsoniter_scala.macros.B = if (in.isNextToken('{'))
[info]         {
[info]           var _b: String = null;
[info]           var req0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         _b = in.readString(_b);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r1(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.B(b = _b)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.C): com.github.plokhotnyuk.jsoniter_scala.macros.C = if (in.isNextToken('{'))
[info]         {
[info]           var _l: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var _r: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = JsoniterCodecs.this.adtCodec.decodeValue(in, _l);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 114 => if (in.isCharBufEqualsTo(l, "r"))
[info]                       {
[info]                         _r = JsoniterCodecs.this.adtCodec.decodeValue(in, _r);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r2(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.C(l = _l, r = _r)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 65 => if (in.isCharBufEqualsTo(l, "A"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d1(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 66 => if (in.isCharBufEqualsTo(l, "B"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d2(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 67 => if (in.isCharBufEqualsTo(l, "C"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d3(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.A, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("A")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("a");
[info]           out.writeVal(x.a)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.B, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("B")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           out.writeVal(x.b)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.C, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("C")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           JsoniterCodecs.this.adtCodec.encodeValue(x.l, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("r");
[info]           JsoniterCodecs.this.adtCodec.encodeValue(x.r, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.A)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.B)) => e2(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.C)) => e3(x, out)
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val adtCodec: JsonValueCodec[AdtBase] = make[AdtBase](CodecMakerConfig())
[info]                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:52:89: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("status");
[info]       private[this] val r1: Array[String] = Array("distance", "duration", "status");
[info]       private[this] val r2: Array[String] = Array("text", "value");
[info]       private[this] def d1(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Value): com.github.plokhotnyuk.jsoniter_scala.macros.Value = if (in.isNextToken('{'))
[info]         {
[info]           var _text: String = null;
[info]           var _value: Int = 0;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = in.readString(_text);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 111972721 => if (in.isCharBufEqualsTo(l, "value"))
[info]                       {
[info]                         _value = in.readInt();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r2(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Value(text = _text, value = _value)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Elements): com.github.plokhotnyuk.jsoniter_scala.macros.Elements = if (in.isNextToken('{'))
[info]         {
[info]           var _distance: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _duration: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _status: String = null;
[info]           var req0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 288459765 => if (in.isCharBufEqualsTo(l, "distance"))
[info]                       {
[info]                         _distance = d6(in, _distance);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1992012396 => if (in.isCharBufEqualsTo(l, "duration"))
[info]                       {
[info]                         _duration = d6(in, _duration);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         _status = in.readString(_status);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r1(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Elements(distance = _distance, duration = _duration, status = _status)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Rows): com.github.plokhotnyuk.jsoniter_scala.macros.Rows = if (in.isNextToken('{'))
[info]         {
[info]           var _elements: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -8339209 => if (in.isCharBufEqualsTo(l, "elements"))
[info]                       _elements = d4(in, _elements)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Rows(elements = _elements)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = if (in.isNextToken('{'))
[info]         {
[info]           var _destination_addresses: Seq[String] = Seq.empty[String];
[info]           var _origin_addresses: Seq[String] = Seq.empty[String];
[info]           var _rows: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]           var _status: String = null;
[info]           var req0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 715423921 => if (in.isCharBufEqualsTo(l, "destination_addresses"))
[info]                       _destination_addresses = d1(in, _destination_addresses)
[info]                     else
[info]                       in.skip()
[info]                     case 1780936137 => if (in.isCharBufEqualsTo(l, "origin_addresses"))
[info]                       _origin_addresses = d1(in, _origin_addresses)
[info]                     else
[info]                       in.skip()
[info]                     case 3506649 => if (in.isCharBufEqualsTo(l, "rows"))
[info]                       _rows = d2(in, _rows)
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         _status = in.readString(_status);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix(destination_addresses = _destination_addresses, origin_addresses = _origin_addresses, rows = _rows, status = _status)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: Seq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: com.github.plokhotnyuk.jsoniter_scala.macros.Value, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("value");
[info]           out.writeVal(x.value)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.Elements, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("distance");
[info]           e6(x.distance, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("duration");
[info]           e6(x.duration, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           out.writeVal(x.status)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e5(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Rows, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.elements;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("elements");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e3(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.destination_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("destination_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.origin_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("origin_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.rows;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("rows");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           out.writeVal(x.status)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val googleMapsAPICodec: JsonValueCodec[DistanceMatrix] = make[DistanceMatrix](CodecMakerConfig())
[info]                                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:53:78: Generated JSON codec for type 'Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]] {
[info]       def nullValue: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]       def decodeValue(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = d0(in, default);
[info]       def encodeValue(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "user", "retweeted_status", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private[this] val r1: Array[String] = Array("screen_name", "name", "id", "id_str");
[info]       private[this] val r2: Array[String] = Array("url", "expanded_url", "display_url");
[info]       private[this] val r3: Array[String] = Array("id", "id_str", "name", "screen_name", "location", "description", "url", "entities", "protected", "followers_count", "friends_count", "listed_count", "created_at", "favourites_count", "utc_offset", "time_zone", "geo_enabled", "verified", "statuses_count", "lang", "contributors_enabled", "is_translator", "is_translation_enabled", "profile_background_color", "profile_background_image_url", "profile_background_image_url_https", "profile_background_tile", "profile_image_url", "profile_image_url_https", "profile_banner_url", "profile_link_color", "profile_sidebar_border_color", "profile_sidebar_fill_color", "profile_text_color", "profile_use_background_image", "has_extended_profile", "default_profile", "default_profile_image", "following", "follow_request_sent", "notifications", "translator_type");
[info]       private[this] val r4: Array[String] = Array("url", "description");
[info]       private[this] val r5: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "user", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private[this] def d3(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: Seq[Int]): Seq[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions): com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions = if (in.isNextToken('{'))
[info]         {
[info]           var _screen_name: String = null;
[info]           var _name: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var req0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         _screen_name = in.readString(_screen_name);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         _name = in.readString(_name);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       _indices = d6(in, _indices)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r1(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions(screen_name = _screen_name, name = _name, id = _id, id_str = _id_str, indices = _indices)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d8(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Urls): com.github.plokhotnyuk.jsoniter_scala.macros.Urls = if (in.isNextToken('{'))
[info]         {
[info]           var _url: String = null;
[info]           var _expanded_url: String = null;
[info]           var _display_url: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var req0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = in.readString(_url);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -518939415 => if (in.isCharBufEqualsTo(l, "expanded_url"))
[info]                       {
[info]                         _expanded_url = in.readString(_expanded_url);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1714674802 => if (in.isCharBufEqualsTo(l, "display_url"))
[info]                       {
[info]                         _display_url = in.readString(_display_url);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       _indices = d6(in, _indices)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r2(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Urls(url = _url, expanded_url = _expanded_url, display_url = _display_url, indices = _indices)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d7(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]             do 
[info]               x.+=(d8(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Entities): com.github.plokhotnyuk.jsoniter_scala.macros.Entities = if (in.isNextToken('{'))
[info]         {
[info]           var _hashtags: Seq[String] = Seq.empty[String];
[info]           var _symbols: Seq[String] = Seq.empty[String];
[info]           var _user_mentions: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 149143079 => if (in.isCharBufEqualsTo(l, "hashtags"))
[info]                       _hashtags = d3(in, _hashtags)
[info]                     else
[info]                       in.skip()
[info]                     case -1743438373 => if (in.isCharBufEqualsTo(l, "symbols"))
[info]                       _symbols = d3(in, _symbols)
[info]                     else
[info]                       in.skip()
[info]                     case -553518659 => if (in.isCharBufEqualsTo(l, "user_mentions"))
[info]                       _user_mentions = d4(in, _user_mentions)
[info]                     else
[info]                       in.skip()
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       _urls = d7(in, _urls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Entities(hashtags = _hashtags, symbols = _symbols, user_mentions = _user_mentions, urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d9(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(in.readString(null))
[info]         };
[info]       private[this] def d12(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Url): com.github.plokhotnyuk.jsoniter_scala.macros.Url = if (in.isNextToken('{'))
[info]         {
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       _urls = d7(in, _urls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Url(urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d11(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities): com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = if (in.isNextToken('{'))
[info]         {
[info]           var _url: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var _description: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = d12(in, _url);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         _description = d12(in, _description);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r4(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities(url = _url, description = _description)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d10(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.User): com.github.plokhotnyuk.jsoniter_scala.macros.User = if (in.isNextToken('{'))
[info]         {
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _name: String = null;
[info]           var _screen_name: String = null;
[info]           var _location: String = null;
[info]           var _description: String = null;
[info]           var _url: String = null;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = null;
[info]           var _protected: Boolean = false;
[info]           var _followers_count: Int = 0;
[info]           var _friends_count: Int = 0;
[info]           var _listed_count: Int = 0;
[info]           var _created_at: String = null;
[info]           var _favourites_count: Int = 0;
[info]           var _utc_offset: Int = 0;
[info]           var _time_zone: String = null;
[info]           var _geo_enabled: Boolean = false;
[info]           var _verified: Boolean = false;
[info]           var _statuses_count: Int = 0;
[info]           var _lang: String = null;
[info]           var _contributors_enabled: Boolean = false;
[info]           var _is_translator: Boolean = false;
[info]           var _is_translation_enabled: Boolean = false;
[info]           var _profile_background_color: String = null;
[info]           var _profile_background_image_url: String = null;
[info]           var _profile_background_image_url_https: String = null;
[info]           var _profile_background_tile: Boolean = false;
[info]           var _profile_image_url: String = null;
[info]           var _profile_image_url_https: String = null;
[info]           var _profile_banner_url: String = null;
[info]           var _profile_link_color: String = null;
[info]           var _profile_sidebar_border_color: String = null;
[info]           var _profile_sidebar_fill_color: String = null;
[info]           var _profile_text_color: String = null;
[info]           var _profile_use_background_image: Boolean = false;
[info]           var _has_extended_profile: Boolean = false;
[info]           var _default_profile: Boolean = false;
[info]           var _default_profile_image: Boolean = false;
[info]           var _following: Boolean = false;
[info]           var _follow_request_sent: Boolean = false;
[info]           var _notifications: Boolean = false;
[info]           var _translator_type: String = null;
[info]           var req0 = -1;
[info]           var req1 = 1023;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         _name = in.readString(_name);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         _screen_name = in.readString(_screen_name);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1901043637 => if (in.isCharBufEqualsTo(l, "location"))
[info]                       {
[info]                         _location = in.readString(_location);
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         _description = in.readString(_description);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = in.readString(_url);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d11(in, _entities);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -608539730 => if (in.isCharBufEqualsTo(l, "protected"))
[info]                       {
[info]                         _protected = in.readBoolean();
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -460163995 => if (in.isCharBufEqualsTo(l, "followers_count"))
[info]                       {
[info]                         _followers_count = in.readInt();
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1666926107 => if (in.isCharBufEqualsTo(l, "friends_count"))
[info]                       {
[info]                         _friends_count = in.readInt();
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1974943731 => if (in.isCharBufEqualsTo(l, "listed_count"))
[info]                       {
[info]                         _listed_count = in.readInt();
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = in.readString(_created_at);
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 226316666 => if (in.isCharBufEqualsTo(l, "favourites_count"))
[info]                       {
[info]                         _favourites_count = in.readInt();
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1699658638 => if (in.isCharBufEqualsTo(l, "utc_offset"))
[info]                       {
[info]                         _utc_offset = in.readInt();
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 36848094 => if (in.isCharBufEqualsTo(l, "time_zone"))
[info]                       {
[info]                         _time_zone = in.readString(_time_zone);
[info]                         req0.&=(-32769)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1085743021 => if (in.isCharBufEqualsTo(l, "geo_enabled"))
[info]                       {
[info]                         _geo_enabled = in.readBoolean();
[info]                         req0.&=(-65537)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1994383672 => if (in.isCharBufEqualsTo(l, "verified"))
[info]                       {
[info]                         _verified = in.readBoolean();
[info]                         req0.&=(-131073)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1824078800 => if (in.isCharBufEqualsTo(l, "statuses_count"))
[info]                       {
[info]                         _statuses_count = in.readInt();
[info]                         req0.&=(-262145)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = in.readString(_lang);
[info]                         req0.&=(-524289)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 647263482 => if (in.isCharBufEqualsTo(l, "contributors_enabled"))
[info]                       {
[info]                         _contributors_enabled = in.readBoolean();
[info]                         req0.&=(-1048577)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 583435343 => if (in.isCharBufEqualsTo(l, "is_translator"))
[info]                       {
[info]                         _is_translator = in.readBoolean();
[info]                         req0.&=(-2097153)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1690715422 => if (in.isCharBufEqualsTo(l, "is_translation_enabled"))
[info]                       {
[info]                         _is_translation_enabled = in.readBoolean();
[info]                         req0.&=(-4194305)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1592986856 => if (in.isCharBufEqualsTo(l, "profile_background_color"))
[info]                       {
[info]                         _profile_background_color = in.readString(_profile_background_color);
[info]                         req0.&=(-8388609)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1189803120 => if (in.isCharBufEqualsTo(l, "profile_background_image_url"))
[info]                       {
[info]                         _profile_background_image_url = in.readString(_profile_background_image_url);
[info]                         req0.&=(-16777217)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 594447228 => if (in.isCharBufEqualsTo(l, "profile_background_image_url_https"))
[info]                       {
[info]                         _profile_background_image_url_https = in.readString(_profile_background_image_url_https);
[info]                         req0.&=(-33554433)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1021718665 => if (in.isCharBufEqualsTo(l, "profile_background_tile"))
[info]                       {
[info]                         _profile_background_tile = in.readBoolean();
[info]                         req0.&=(-67108865)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -174080651 => if (in.isCharBufEqualsTo(l, "profile_image_url"))
[info]                       {
[info]                         _profile_image_url = in.readString(_profile_image_url);
[info]                         req0.&=(-134217729)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -782008927 => if (in.isCharBufEqualsTo(l, "profile_image_url_https"))
[info]                       {
[info]                         _profile_image_url_https = in.readString(_profile_image_url_https);
[info]                         req0.&=(-268435457)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -690137550 => if (in.isCharBufEqualsTo(l, "profile_banner_url"))
[info]                       {
[info]                         _profile_banner_url = in.readString(_profile_banner_url);
[info]                         req0.&=(-536870913)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1512257332 => if (in.isCharBufEqualsTo(l, "profile_link_color"))
[info]                       {
[info]                         _profile_link_color = in.readString(_profile_link_color);
[info]                         req0.&=(-1073741825)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1412739479 => if (in.isCharBufEqualsTo(l, "profile_sidebar_border_color"))
[info]                       {
[info]                         _profile_sidebar_border_color = in.readString(_profile_sidebar_border_color);
[info]                         req0.&=(2147483647)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 486184128 => if (in.isCharBufEqualsTo(l, "profile_sidebar_fill_color"))
[info]                       {
[info]                         _profile_sidebar_fill_color = in.readString(_profile_sidebar_fill_color);
[info]                         req1.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1774134745 => if (in.isCharBufEqualsTo(l, "profile_text_color"))
[info]                       {
[info]                         _profile_text_color = in.readString(_profile_text_color);
[info]                         req1.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -101767272 => if (in.isCharBufEqualsTo(l, "profile_use_background_image"))
[info]                       {
[info]                         _profile_use_background_image = in.readBoolean();
[info]                         req1.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 284519336 => if (in.isCharBufEqualsTo(l, "has_extended_profile"))
[info]                       {
[info]                         _has_extended_profile = in.readBoolean();
[info]                         req1.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -312724053 => if (in.isCharBufEqualsTo(l, "default_profile"))
[info]                       {
[info]                         _default_profile = in.readBoolean();
[info]                         req1.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 545330631 => if (in.isCharBufEqualsTo(l, "default_profile_image"))
[info]                       {
[info]                         _default_profile_image = in.readBoolean();
[info]                         req1.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 765915793 => if (in.isCharBufEqualsTo(l, "following"))
[info]                       {
[info]                         _following = in.readBoolean();
[info]                         req1.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 585125142 => if (in.isCharBufEqualsTo(l, "follow_request_sent"))
[info]                       {
[info]                         _follow_request_sent = in.readBoolean();
[info]                         req1.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1272354024 => if (in.isCharBufEqualsTo(l, "notifications"))
[info]                       {
[info]                         _notifications = in.readBoolean();
[info]                         req1.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -475640257 => if (in.isCharBufEqualsTo(l, "translator_type"))
[info]                       {
[info]                         _translator_type = in.readString(_translator_type);
[info]                         req1.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r3(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           if (req1.!=(0))
[info]             in.requiredFieldError(r3(Integer.numberOfTrailingZeros(req1).+(32)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.User(id = _id, id_str = _id_str, name = _name, screen_name = _screen_name, location = _location, description = _description, url = _url, entities = _entities, `protected` = _protected, followers_count = _followers_count, friends_count = _friends_count, listed_count = _listed_count, created_at = _created_at, favourites_count = _favourites_count, utc_offset = _utc_offset, time_zone = _time_zone, geo_enabled = _geo_enabled, verified = _verified, statuses_count = _statuses_count, lang = _lang, contributors_enabled = _contributors_enabled, is_translator = _is_translator, is_translation_enabled = _is_translation_enabled, profile_background_color = _profile_background_color, profile_background_image_url = _profile_background_image_url, profile_background_image_url_https = _profile_background_image_url_https, profile_background_tile = _profile_background_tile, profile_image_url = _profile_image_url, profile_image_url_https = _profile_image_url_https, profile_banner_url = _profile_banner_url, profile_link_color = _profile_link_color, profile_sidebar_border_color = _profile_sidebar_border_color, profile_sidebar_fill_color = _profile_sidebar_fill_color, profile_text_color = _profile_text_color, profile_use_background_image = _profile_use_background_image, has_extended_profile = _has_extended_profile, default_profile = _default_profile, default_profile_image = _default_profile_image, following = _following, follow_request_sent = _follow_request_sent, notifications = _notifications, translator_type = _translator_type)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d13(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus): com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var req0 = 32767;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = in.readString(_created_at);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = in.readString(_text);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         _truncated = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d2(in, _entities);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         _source = in.readString(_source);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         _user = d10(in, _user);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       _geo = d9(in, _geo)
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       _coordinates = d9(in, _coordinates)
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       _place = d9(in, _place)
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       _contributors = d9(in, _contributors)
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         _is_quote_status = in.readBoolean();
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         _retweet_count = in.readInt();
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         _favorite_count = in.readInt();
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         _favorited = in.readBoolean();
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         _retweeted = in.readBoolean();
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         _possibly_sensitive = in.readBoolean();
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = in.readString(_lang);
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r5(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet): com.github.plokhotnyuk.jsoniter_scala.macros.Tweet = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _retweeted_status: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = null;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var req0 = 65535;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = in.readString(_created_at);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = in.readString(_text);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         _truncated = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d2(in, _entities);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         _source = in.readString(_source);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         _user = d10(in, _user);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       _geo = d9(in, _geo)
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       _coordinates = d9(in, _coordinates)
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       _place = d9(in, _place)
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       _contributors = d9(in, _contributors)
[info]                     else
[info]                       in.skip()
[info]                     case 364396852 => if (in.isCharBufEqualsTo(l, "retweeted_status"))
[info]                       {
[info]                         _retweeted_status = d13(in, _retweeted_status);
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         _is_quote_status = in.readBoolean();
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         _retweet_count = in.readInt();
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         _favorite_count = in.readInt();
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         _favorited = in.readBoolean();
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         _retweeted = in.readBoolean();
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         _possibly_sensitive = in.readBoolean();
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = in.readString(_lang);
[info]                         req0.&=(-32769)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Tweet(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, retweeted_status = _retweeted_status, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]             do 
[info]               x.+=(d1(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e3(x: Seq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: Seq[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           out.writeVal(x.screen_name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           out.writeVal(x.name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e5(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e8(x: com.github.plokhotnyuk.jsoniter_scala.macros.Urls, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           out.writeVal(x.url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("expanded_url");
[info]           out.writeVal(x.expanded_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("display_url");
[info]           out.writeVal(x.display_url)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e7(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e8(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.Entities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.hashtags;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("hashtags");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.symbols;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("symbols");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.user_mentions;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("user_mentions");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e11(x: com.github.plokhotnyuk.jsoniter_scala.macros.Url, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e10(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           e11(x.url, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           e11(x.description, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e9(x: com.github.plokhotnyuk.jsoniter_scala.macros.User, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           out.writeVal(x.name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           out.writeVal(x.screen_name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("location");
[info]           out.writeVal(x.location)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           out.writeVal(x.description)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           out.writeVal(x.url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e10(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("protected");
[info]           out.writeVal(x.`protected`)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("followers_count");
[info]           out.writeVal(x.followers_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("friends_count");
[info]           out.writeVal(x.friends_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("listed_count");
[info]           out.writeVal(x.listed_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favourites_count");
[info]           out.writeVal(x.favourites_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("utc_offset");
[info]           out.writeVal(x.utc_offset)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("time_zone");
[info]           out.writeVal(x.time_zone)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("geo_enabled");
[info]           out.writeVal(x.geo_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("verified");
[info]           out.writeVal(x.verified)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("statuses_count");
[info]           out.writeVal(x.statuses_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("contributors_enabled");
[info]           out.writeVal(x.contributors_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translator");
[info]           out.writeVal(x.is_translator)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translation_enabled");
[info]           out.writeVal(x.is_translation_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_color");
[info]           out.writeVal(x.profile_background_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url");
[info]           out.writeVal(x.profile_background_image_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url_https");
[info]           out.writeVal(x.profile_background_image_url_https)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_tile");
[info]           out.writeVal(x.profile_background_tile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url");
[info]           out.writeVal(x.profile_image_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url_https");
[info]           out.writeVal(x.profile_image_url_https)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_banner_url");
[info]           out.writeVal(x.profile_banner_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_link_color");
[info]           out.writeVal(x.profile_link_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_border_color");
[info]           out.writeVal(x.profile_sidebar_border_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_fill_color");
[info]           out.writeVal(x.profile_sidebar_fill_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_text_color");
[info]           out.writeVal(x.profile_text_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_use_background_image");
[info]           out.writeVal(x.profile_use_background_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("has_extended_profile");
[info]           out.writeVal(x.has_extended_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile");
[info]           out.writeVal(x.default_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile_image");
[info]           out.writeVal(x.default_profile_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("following");
[info]           out.writeVal(x.following)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("follow_request_sent");
[info]           out.writeVal(x.follow_request_sent)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("notifications");
[info]           out.writeVal(x.notifications)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("translator_type");
[info]           out.writeVal(x.translator_type)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e12(x: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           out.writeVal(x.source)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           out.writeVal(x.retweet_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           out.writeVal(x.favorite_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           out.writeVal(x.source)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted_status");
[info]           e12(x.retweeted_status, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           out.writeVal(x.retweet_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           out.writeVal(x.favorite_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e1(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val twitterAPICodec: JsonValueCodec[Seq[Tweet]] = make[Seq[Tweet]](CodecMakerConfig())
[info]                                                                              ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:17:18: local val v1 in value arraysFormat is never used
[warn]     implicit val v1: Format[Array[BigInt]] = Format(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:23:18: local val v1 in value bitSetsFormat is never used
[warn]     implicit val v1: Reads[BitSet] = Reads[BitSet](js => JsSuccess(BitSet(js.as[Array[Int]]: _*)))
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:24:18: local val v2 in value bitSetsFormat is never used
[warn]     implicit val v2: Reads[mutable.BitSet] =
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:31:18: local val v1 in value mapsFormat is never used
[warn]     implicit val v1: OFormat[HashMap[String, Double]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:34:18: local val v2 in value mapsFormat is never used
[warn]     implicit val v2: OFormat[Map[Int, HashMap[Long, Double]]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:46:18: local val v1 in value mutableMapsFormat is never used
[warn]     implicit val v1: OFormat[mutable.HashMap[String, Double]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:49:18: local val v2 in value mutableMapsFormat is never used
[warn]     implicit val v2: OFormat[mutable.Map[Int, mutable.OpenHashMap[Long, Double]]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:66:18: local val v1 in value intAndLongMapsFormat is never used
[warn]     implicit val v1: OFormat[IntMap[Double]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:71:18: local val v2 in value intAndLongMapsFormat is never used
[warn]     implicit val v2: OFormat[mutable.LongMap[LongMap[Double]]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:83:18: local val v1 in value primitivesFormat is never used
[warn]     implicit val v1: Format[Char] = Format(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:90:23: local val v1 in value adtFormat is never used
[warn]     implicit lazy val v1: OFormat[A] = Json.format[A]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:91:23: local val v2 in value adtFormat is never used
[warn]     implicit lazy val v2: OFormat[B] = Json.format[B]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:92:23: local val v3 in value adtFormat is never used
[warn]     implicit lazy val v3: OFormat[C] = Json.format[C]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:97:18: local val v1 in value googleMapsAPIFormat is never used
[warn]     implicit val v1: OFormat[Value] = Json.format[Value]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:98:18: local val v2 in value googleMapsAPIFormat is never used
[warn]     implicit val v2: OFormat[Elements] = Json.format[Elements]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:99:18: local val v3 in value googleMapsAPIFormat is never used
[warn]     implicit val v3: OFormat[Rows] = Json.format[Rows]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:103:18: local val v1 in value twitterAPIFormat is never used
[warn]     implicit val v1: OFormat[Urls] = Json.format[Urls]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:104:18: local val v2 in value twitterAPIFormat is never used
[warn]     implicit val v2: OFormat[Url] = Json.format[Url]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:105:18: local val v3 in value twitterAPIFormat is never used
[warn]     implicit val v3: OFormat[UserEntities] = Json.format[UserEntities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:106:18: local val v4 in value twitterAPIFormat is never used
[warn]     implicit val v4: OFormat[UserMentions] = Json.format[UserMentions]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:107:18: local val v5 in value twitterAPIFormat is never used
[warn]     implicit val v5: OFormat[Entities] = Json.format[Entities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:108:18: local val v6 in value twitterAPIFormat is never used
[warn]     implicit val v6: Format[User] = Jsonx.formatCaseClass[User]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:109:18: local val v7 in value twitterAPIFormat is never used
[warn]     implicit val v7: Format[RetweetedStatus] = Jsonx.formatCaseClass[RetweetedStatus]
[warn]                  ^
[warn] 23 warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.22.3-SNAPSHOT.jar ...
Processing 345 classes from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes with "reflection" generator
Writing out Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/src_managed/jmh and resources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/resource_managed/jmh
[info] Compiling 42 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/test-classes ...
[info] Done packaging.
[info] Compiling 534 Java sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.22.3-SNAPSHOT-tests.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.22.3-SNAPSHOT-jmh.jar ...
[info] Done packaging.
[info] Running (fork) org.openjdk.jmh.Main -jvm /usr/lib/jvm/jdk-10/bin/java -prof gc -rf json -rff jdk10.json .*Benchmark.*
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce
[info] # Run progress: 0.00% complete, ETA 00:49:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 296636.375 ops/s
[info] # Warmup Iteration   2: 714364.869 ops/s
[info] # Warmup Iteration   3: 715741.613 ops/s
[info] Iteration   1: 697744.895 ops/s
[info]                  ·gc.alloc.rate:                                  1833.889 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4136.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.114 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.257 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2032.711 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4584.407 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                7.513 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        13.000 ms
[info] Iteration   2: 721578.243 ops/s
[info]                  ·gc.alloc.rate:            1895.712 MB/sec
[info]                  ·gc.alloc.rate.norm:       4136.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.478 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3712.229 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 728834.293 ops/s
[info]                  ·gc.alloc.rate:                                  1914.932 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4136.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.937 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4410.314 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 726677.773 ops/s
[info]                  ·gc.alloc.rate:            1909.522 MB/sec
[info]                  ·gc.alloc.rate.norm:       4136.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.810 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3686.098 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 725595.984 ops/s
[info]                  ·gc.alloc.rate:                                  1906.459 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4136.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.031 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4430.120 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce":
[info]   720086.237 ±(99.9%) 49150.261 ops/s [Average]
[info]   (min, avg, max) = (697744.895, 720086.237, 728834.293), stdev = 12764.167
[info]   CI (99.9%): [670935.976, 769236.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate":
[info]   1892.103 ±(99.9%) 128.183 MB/sec [Average]
[info]   (min, avg, max) = (1833.889, 1892.103, 1914.932), stdev = 33.289
[info]   CI (99.9%): [1763.920, 2020.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4136.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4136.001, 4136.001, 4136.001), stdev = 0.001
[info]   CI (99.9%): [4136.000, 4136.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.023 ±(99.9%) 0.195 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.114), stdev = 0.051
[info]   CI (99.9%): [≈ 0, 0.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.053 ±(99.9%) 0.440 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.053, 0.257), stdev = 0.114
[info]   CI (99.9%): [≈ 0, 0.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1903.994 ±(99.9%) 711.436 MB/sec [Average]
[info]   (min, avg, max) = (1701.478, 1903.994, 2042.031), stdev = 184.758
[info]   CI (99.9%): [1192.557, 2615.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   4164.634 ±(99.9%) 1657.028 B/op [Average]
[info]   (min, avg, max) = (3686.098, 4164.634, 4584.407), stdev = 430.325
[info]   CI (99.9%): [2507.606, 5821.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.737 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   1.503 ±(99.9%) 12.938 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.503, 7.513), stdev = 3.360
[info]   CI (99.9%): [≈ 0, 14.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 13.000), stdev = 3.834
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala
[info] # Run progress: 0.27% complete, ETA 01:18:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 273405.807 ops/s
[info] # Warmup Iteration   2: 1388382.250 ops/s
[info] # Warmup Iteration   3: 1380455.247 ops/s
[info] Iteration   1: 1390390.378 ops/s
[info]                  ·gc.alloc.rate:                   989.191 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.276 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1141.609 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.754 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 1394134.545 ops/s
[info]                  ·gc.alloc.rate:            991.924 MB/sec
[info]                  ·gc.alloc.rate.norm:       1120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.681 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1137.792 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   3: 1398723.168 ops/s
[info]                  ·gc.alloc.rate:                   995.193 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.348 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1134.805 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 5.247 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   4: 1404991.094 ops/s
[info]                  ·gc.alloc.rate:                                  999.749 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1120.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.220 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.247 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.102 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1143.921 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 1387081.754 ops/s
[info]                  ·gc.alloc.rate:                                  986.972 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1120.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.075 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1158.700 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala":
[info]   1395064.188 ±(99.9%) 27116.272 ops/s [Average]
[info]   (min, avg, max) = (1387081.754, 1395064.188, 1404991.094), stdev = 7042.010
[info]   CI (99.9%): [1367947.916, 1422180.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   992.606 ±(99.9%) 19.406 MB/sec [Average]
[info]   (min, avg, max) = (986.972, 992.606, 999.749), stdev = 5.040
[info]   CI (99.9%): [973.200, 1012.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1120.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1120.000, 1120.000, 1120.000), stdev = 0.001
[info]   CI (99.9%): [1120.000, 1120.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.044 ±(99.9%) 0.379 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.044, 0.220), stdev = 0.098
[info]   CI (99.9%): [≈ 0, 0.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.050 ±(99.9%) 0.425 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.247), stdev = 0.110
[info]   CI (99.9%): [≈ 0, 0.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1013.297 ±(99.9%) 27.409 MB/sec [Average]
[info]   (min, avg, max) = (1007.681, 1013.297, 1021.102), stdev = 7.118
[info]   CI (99.9%): [985.888, 1040.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1143.366 ±(99.9%) 35.651 B/op [Average]
[info]   (min, avg, max) = (1134.805, 1143.366, 1158.700), stdev = 9.259
[info]   CI (99.9%): [1107.714, 1179.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.821 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.662), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.200 ±(99.9%) 8.801 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.200, 5.247), stdev = 2.286
[info]   CI (99.9%): [≈ 0, 10.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.400, 14.000), stdev = 5.857
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala
[info] # Run progress: 0.54% complete, ETA 01:18:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2541313.407 ops/s
[info] # Warmup Iteration   2: 3181188.242 ops/s
[info] # Warmup Iteration   3: 3368315.530 ops/s
[info] Iteration   1: 3360594.206 ops/s
[info]                  ·gc.alloc.rate:            222.028 MB/sec
[info]                  ·gc.alloc.rate.norm:       104.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.680 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 158.173 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 3352748.892 ops/s
[info]                  ·gc.alloc.rate:            221.501 MB/sec
[info]                  ·gc.alloc.rate.norm:       104.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.658 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 158.539 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   3: 3351990.003 ops/s
[info]                  ·gc.alloc.rate:      221.452 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3350588.376 ops/s
[info]                  ·gc.alloc.rate:            221.378 MB/sec
[info]                  ·gc.alloc.rate.norm:       104.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.695 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 158.644 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 3352125.651 ops/s
[info]                  ·gc.alloc.rate:            221.474 MB/sec
[info]                  ·gc.alloc.rate.norm:       104.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.006 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 158.252 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala":
[info]   3353609.426 ±(99.9%) 15339.698 ops/s [Average]
[info]   (min, avg, max) = (3350588.376, 3353609.426, 3360594.206), stdev = 3983.671
[info]   CI (99.9%): [3338269.728, 3368949.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   221.566 ±(99.9%) 1.008 MB/sec [Average]
[info]   (min, avg, max) = (221.378, 221.566, 222.028), stdev = 0.262
[info]   CI (99.9%): [220.558, 222.575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   104.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (104.000, 104.000, 104.000), stdev = 0.001
[info]   CI (99.9%): [104.000, 104.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   270.008 ±(99.9%) 581.213 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 270.008, 337.695), stdev = 150.939
[info]   CI (99.9%): [≈ 0, 851.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   126.722 ±(99.9%) 272.779 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 126.722, 158.644), stdev = 70.840
[info]   CI (99.9%): [≈ 0, 399.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson
[info] # Run progress: 0.81% complete, ETA 01:17:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14241.109 ops/s
[info] # Warmup Iteration   2: 141536.814 ops/s
[info] # Warmup Iteration   3: 144521.720 ops/s
[info] Iteration   1: 148037.370 ops/s
[info]                  ·gc.alloc.rate:                   1177.569 MB/sec
[info]                  ·gc.alloc.rate.norm:              12520.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1007.800 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        10715.003 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 14.164 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   2: 147179.778 ops/s
[info]                  ·gc.alloc.rate:                   1170.678 MB/sec
[info]                  ·gc.alloc.rate.norm:              12520.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1344.109 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        14374.789 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 7.123 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   3: 148014.424 ops/s
[info]                  ·gc.alloc.rate:                                  1177.296 MB/sec
[info]                  ·gc.alloc.rate.norm:                             12520.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.028 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.301 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.054 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10815.904 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                42.499 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 149780.478 ops/s
[info]                  ·gc.alloc.rate:                                  1191.270 MB/sec
[info]                  ·gc.alloc.rate.norm:                             12520.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.026 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.272 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.357 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       14307.577 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 145166.744 ops/s
[info]                  ·gc.alloc.rate:            1154.954 MB/sec
[info]                  ·gc.alloc.rate.norm:       12520.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.350 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11071.701 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson":
[info]   147635.759 ±(99.9%) 6445.791 ops/s [Average]
[info]   (min, avg, max) = (145166.744, 147635.759, 149780.478), stdev = 1673.951
[info]   CI (99.9%): [141189.968, 154081.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1174.353 ±(99.9%) 50.758 MB/sec [Average]
[info]   (min, avg, max) = (1154.954, 1174.353, 1191.270), stdev = 13.182
[info]   CI (99.9%): [1123.595, 1225.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   12520.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (12520.003, 12520.003, 12520.003), stdev = 0.001
[info]   CI (99.9%): [12520.002, 12520.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.011 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.028), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.115 ±(99.9%) 0.606 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.115, 0.301), stdev = 0.157
[info]   CI (99.9%): [≈ 0, 0.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1150.334 ±(99.9%) 712.098 MB/sec [Average]
[info]   (min, avg, max) = (1007.800, 1150.334, 1361.357), stdev = 184.930
[info]   CI (99.9%): [438.236, 1862.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   12256.995 ±(99.9%) 7343.871 B/op [Average]
[info]   (min, avg, max) = (10715.003, 12256.995, 14374.789), stdev = 1907.180
[info]   CI (99.9%): [4913.123, 19600.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.199 ±(99.9%) 6.386 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.199, 3.996), stdev = 1.658
[info]   CI (99.9%): [≈ 0, 7.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   12.757 ±(99.9%) 67.900 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12.757, 42.499), stdev = 17.634
[info]   CI (99.9%): [≈ 0, 80.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.time":
[info]   52.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 10.400, 19.000), stdev = 6.465
[info]   CI (99.9%): [52.000, 52.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce
[info] # Run progress: 1.08% complete, ETA 01:17:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 180681.460 ops/s
[info] # Warmup Iteration   2: 523796.749 ops/s
[info] # Warmup Iteration   3: 537471.408 ops/s
[info] Iteration   1: 523993.141 ops/s
[info]                  ·gc.alloc.rate:                   1661.724 MB/sec
[info]                  ·gc.alloc.rate.norm:              4992.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1685.099 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5062.221 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 10.004 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   2: 533947.438 ops/s
[info]                  ·gc.alloc.rate:                                  1693.223 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4992.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.116 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.342 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.603 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5016.706 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   3: 543222.882 ops/s
[info]                  ·gc.alloc.rate:                                  1722.784 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4992.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.733 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4931.001 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 542688.934 ops/s
[info]                  ·gc.alloc.rate:                                  1721.114 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4992.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.775 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4935.907 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 534895.383 ops/s
[info]                  ·gc.alloc.rate:                                  1696.363 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4992.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.788 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5007.966 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce":
[info]   535749.556 ±(99.9%) 30209.529 ops/s [Average]
[info]   (min, avg, max) = (523993.141, 535749.556, 543222.882), stdev = 7845.319
[info]   CI (99.9%): [505540.027, 565959.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.alloc.rate":
[info]   1699.042 ±(99.9%) 95.968 MB/sec [Average]
[info]   (min, avg, max) = (1661.724, 1699.042, 1722.784), stdev = 24.923
[info]   CI (99.9%): [1603.073, 1795.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   4992.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4992.001, 4992.001, 4992.001), stdev = 0.001
[info]   CI (99.9%): [4992.001, 4992.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.025 ±(99.9%) 0.196 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.116), stdev = 0.051
[info]   CI (99.9%): [≈ 0, 0.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.073 ±(99.9%) 0.578 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.073, 0.342), stdev = 0.150
[info]   CI (99.9%): [≈ 0, 0.652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1698.399 ±(99.9%) 28.632 MB/sec [Average]
[info]   (min, avg, max) = (1685.099, 1698.399, 1701.788), stdev = 7.436
[info]   CI (99.9%): [1669.767, 1727.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   4990.760 ±(99.9%) 216.595 B/op [Average]
[info]   (min, avg, max) = (4931.001, 4990.760, 5062.221), stdev = 56.249
[info]   CI (99.9%): [4774.165, 5207.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   2.001 ±(99.9%) 17.228 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.001, 10.004), stdev = 4.474
[info]   CI (99.9%): [≈ 0, 19.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.600, 17.000), stdev = 5.683
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala
[info] # Run progress: 1.35% complete, ETA 01:17:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_8263f884/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 492553.496 ops/s
[info] # Warmup Iteration   2: 1831436.259 ops/s
[info] # Warmup Iteration   3: 1870921.418 ops/s
[info] Iteration   1: 1860992.016 ops/s
[info]                  ·gc.alloc.rate:            605.316 MB/sec
[info]                  ·gc.alloc.rate.norm:       512.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.684 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 283.935 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 1809991.180 ops/s
[info]                  ·gc.alloc.rate:            588.734 MB/sec
[info]                  ·gc.alloc.rate.norm:       512.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.378 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 583.873 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 1862311.812 ops/s
[info]                  ·gc.alloc.rate:            605.738 MB/sec
[info]                  ·gc.alloc.rate.norm:       512.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.336 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 567.447 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 1803555.654 ops/s
[info]                  ·gc.alloc.rate:            586.619 MB/sec
[info]                  ·gc.alloc.rate.norm:       512.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.364 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 585.965 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 1842904.047 ops/s
[info]                  ·gc.alloc.rate:            599.435 MB/sec
[info]                  ·gc.alloc.rate.norm:       512.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.369 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 573.442 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala":
[info]   1835950.942 ±(99.9%) 107087.724 ops/s [Average]
[info]   (min, avg, max) = (1803555.654, 1835950.942, 1862311.812), stdev = 27810.342
[info]   CI (99.9%): [1728863.218, 1943038.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   597.168 ±(99.9%) 34.835 MB/sec [Average]
[info]   (min, avg, max) = (586.619, 597.168, 605.738), stdev = 9.047
[info]   CI (99.9%): [562.333, 632.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   512.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (512.000, 512.000, 512.000), stdev = 0.001
[info]   CI (99.9%): [512.000, 512.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   604.226 ±(99.9%) 578.057 MB/sec [Average]
[info]   (min, avg, max) = (335.684, 604.226, 671.378), stdev = 150.119
[info]   CI (99.9%): [26.169, 1182.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   518.932 ±(99.9%) 506.690 B/op [Average]
[info]   (min, avg, max) = (283.935, 518.932, 585.965), stdev = 131.586
[info]   CI (99.9%): [12.243, 1025.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 8.000, 9.000), stdev = 1.732
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala
[info] # Run progress: 1.62% complete, ETA 01:16:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7705542.040 ops/s
[info] # Warmup Iteration   2: 7173296.503 ops/s
[info] # Warmup Iteration   3: 7277917.824 ops/s
[info] Iteration   1: 7103417.838 ops/s
[info]                  ·gc.alloc.rate:            361.146 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.472 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 74.534 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 6873255.712 ops/s
[info]                  ·gc.alloc.rate:            349.289 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.327 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 77.031 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 6872673.482 ops/s
[info]                  ·gc.alloc.rate:                   349.278 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             336.327 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        77.034 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.153 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 6863402.746 ops/s
[info]                  ·gc.alloc.rate:            348.802 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.000 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 77.293 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 6856950.431 ops/s
[info]                  ·gc.alloc.rate:            348.486 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.003 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 77.364 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala":
[info]   6913940.042 ±(99.9%) 408702.878 ops/s [Average]
[info]   (min, avg, max) = (6856950.431, 6913940.042, 7103417.838), stdev = 106138.840
[info]   CI (99.9%): [6505237.164, 7322642.920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   351.400 ±(99.9%) 21.019 MB/sec [Average]
[info]   (min, avg, max) = (348.486, 351.400, 361.146), stdev = 5.459
[info]   CI (99.9%): [330.381, 372.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   80.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (80.000, 80.000, 80.000), stdev = 0.001
[info]   CI (99.9%): [80.000, 80.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   336.626 ±(99.9%) 1.341 MB/sec [Average]
[info]   (min, avg, max) = (336.327, 336.626, 337.003), stdev = 0.348
[info]   CI (99.9%): [335.285, 337.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   76.651 ±(99.9%) 4.593 B/op [Average]
[info]   (min, avg, max) = (74.534, 76.651, 77.364), stdev = 1.193
[info]   CI (99.9%): [72.058, 81.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.031 ±(99.9%) 0.263 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.031, 0.153), stdev = 0.068
[info]   CI (99.9%): [≈ 0, 0.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 1.89% complete, ETA 01:16:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8569243.532 ops/s
[info] # Warmup Iteration   2: 7108588.967 ops/s
[info] # Warmup Iteration   3: 7126247.093 ops/s
[info] Iteration   1: 7127119.025 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 7123137.063 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 7395314.326 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 7441831.659 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 7563427.669 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc":
[info]   7330165.948 ±(99.9%) 758522.084 ops/s [Average]
[info]   (min, avg, max) = (7123137.063, 7330165.948, 7563427.669), stdev = 196985.777
[info]   CI (99.9%): [6571643.864, 8088688.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson
[info] # Run progress: 2.16% complete, ETA 01:16:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 59191.931 ops/s
[info] # Warmup Iteration   2: 292074.224 ops/s
[info] # Warmup Iteration   3: 294869.680 ops/s
[info] Iteration   1: 294575.511 ops/s
[info]                  ·gc.alloc.rate:                   946.373 MB/sec
[info]                  ·gc.alloc.rate.norm:              5056.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1007.929 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5384.869 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.559 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 297931.624 ops/s
[info]                  ·gc.alloc.rate:                   956.966 MB/sec
[info]                  ·gc.alloc.rate.norm:              5056.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.037 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3550.618 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.519 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 295513.617 ops/s
[info]                  ·gc.alloc.rate:            949.481 MB/sec
[info]                  ·gc.alloc.rate.norm:       5056.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.371 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5364.268 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   4: 298571.058 ops/s
[info]                  ·gc.alloc.rate:                                  959.006 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5056.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.193 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1015.710 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5354.948 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                24.580 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   5: 303905.408 ops/s
[info]                  ·gc.alloc.rate:                                  976.143 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5056.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.042 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.216 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.038 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5288.538 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson":
[info]   298099.444 ±(99.9%) 14025.070 ops/s [Average]
[info]   (min, avg, max) = (294575.511, 298099.444, 303905.408), stdev = 3642.266
[info]   CI (99.9%): [284074.374, 312124.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate":
[info]   957.594 ±(99.9%) 44.666 MB/sec [Average]
[info]   (min, avg, max) = (946.373, 957.594, 976.143), stdev = 11.600
[info]   CI (99.9%): [912.928, 1002.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5056.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5056.001, 5056.001, 5056.001), stdev = 0.001
[info]   CI (99.9%): [5056.001, 5056.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.047 ±(99.9%) 0.321 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.047, 0.193), stdev = 0.083
[info]   CI (99.9%): [≈ 0, 0.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.246 ±(99.9%) 1.695 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.246, 1.016), stdev = 0.440
[info]   CI (99.9%): [≈ 0, 1.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   944.817 ±(99.9%) 587.588 MB/sec [Average]
[info]   (min, avg, max) = (672.037, 944.817, 1021.038), stdev = 152.595
[info]   CI (99.9%): [357.229, 1532.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   4988.648 ±(99.9%) 3098.585 B/op [Average]
[info]   (min, avg, max) = (3550.618, 4988.648, 5384.869), stdev = 804.693
[info]   CI (99.9%): [1890.063, 8087.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.199 ±(99.9%) 7.565 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.199, 4.662), stdev = 1.965
[info]   CI (99.9%): [≈ 0, 8.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   6.332 ±(99.9%) 39.868 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.332, 24.580), stdev = 10.354
[info]   CI (99.9%): [≈ 0, 46.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 9.000, 13.000), stdev = 4.528
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce
[info] # Run progress: 2.43% complete, ETA 01:16:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 831405.611 ops/s
[info] # Warmup Iteration   2: 1359444.868 ops/s
[info] # Warmup Iteration   3: 1399431.606 ops/s
[info] Iteration   1: 1432568.545 ops/s
[info]                  ·gc.alloc.rate:                                  2227.644 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2448.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.086 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.095 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.156 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2617.797 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 1393772.800 ops/s
[info]                  ·gc.alloc.rate:            2167.311 MB/sec
[info]                  ·gc.alloc.rate.norm:       2448.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2041.836 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2306.275 B/op
[info]                  ·gc.count:                 6.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 1384150.431 ops/s
[info]                  ·gc.alloc.rate:                                  2152.430 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2448.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.879 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2322.268 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 1419096.162 ops/s
[info]                  ·gc.alloc.rate:                                  2206.998 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2448.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.522 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2642.692 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 1436013.735 ops/s
[info]                  ·gc.alloc.rate:                                  2234.057 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2448.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2383.254 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2611.485 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce":
[info]   1413120.335 ±(99.9%) 89307.416 ops/s [Average]
[info]   (min, avg, max) = (1384150.431, 1413120.335, 1436013.735), stdev = 23192.852
[info]   CI (99.9%): [1323812.919, 1502427.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate":
[info]   2197.688 ±(99.9%) 139.871 MB/sec [Average]
[info]   (min, avg, max) = (2152.430, 2197.688, 2234.057), stdev = 36.324
[info]   CI (99.9%): [2057.817, 2337.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2448.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2448.000, 2448.000, 2448.000), stdev = 0.001
[info]   CI (99.9%): [2448.000, 2448.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.019 ±(99.9%) 0.145 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.086), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.021 ±(99.9%) 0.159 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.095), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2246.330 ±(99.9%) 718.750 MB/sec [Average]
[info]   (min, avg, max) = (2041.836, 2246.330, 2383.254), stdev = 186.657
[info]   CI (99.9%): [1527.580, 2965.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2500.104 ±(99.9%) 655.130 B/op [Average]
[info]   (min, avg, max) = (2306.275, 2500.104, 2642.692), stdev = 170.135
[info]   CI (99.9%): [1844.974, 3155.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.count":
[info]   33.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava
[info] # Run progress: 2.70% complete, ETA 01:16:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.864 ops/s
[info] # Warmup Iteration   2: 8187631.253 ops/s
[info] # Warmup Iteration   3: 9159721.276 ops/s
[info] Iteration   1: 9378221.033 ops/s
[info]                  ·gc.alloc.rate:                   1143.951 MB/sec
[info]                  ·gc.alloc.rate.norm:              192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1000.419 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        167.910 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.112 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 9259077.298 ops/s
[info]                  ·gc.alloc.rate:            1129.899 MB/sec
[info]                  ·gc.alloc.rate.norm:       192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1335.362 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 226.914 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   3: 9152136.717 ops/s
[info]                  ·gc.alloc.rate:                   1116.335 MB/sec
[info]                  ·gc.alloc.rate.norm:              192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1005.073 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        172.864 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      6.661 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.146 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   4: 8957438.282 ops/s
[info]                  ·gc.alloc.rate:                                  1092.547 MB/sec
[info]                  ·gc.alloc.rate.norm:                             192.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.606 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.106 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.972 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       179.422 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 8925300.960 ops/s
[info]                  ·gc.alloc.rate:                                  1089.178 MB/sec
[info]                  ·gc.alloc.rate.norm:                             192.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.518 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       180.073 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava":
[info]   9134434.858 ±(99.9%) 746532.433 ops/s [Average]
[info]   (min, avg, max) = (8925300.960, 9134434.858, 9378221.033), stdev = 193872.102
[info]   CI (99.9%): [8387902.425, 9880967.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   1114.382 ±(99.9%) 90.939 MB/sec [Average]
[info]   (min, avg, max) = (1089.178, 1114.382, 1143.951), stdev = 23.617
[info]   CI (99.9%): [1023.443, 1205.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   192.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (192.000, 192.000, 192.000), stdev = 0.001
[info]   CI (99.9%): [192.000, 192.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.121 ±(99.9%) 1.043 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.121, 0.606), stdev = 0.271
[info]   CI (99.9%): [≈ 0, 1.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.021 ±(99.9%) 0.183 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.106), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   1076.669 ±(99.9%) 558.030 MB/sec [Average]
[info]   (min, avg, max) = (1000.419, 1076.669, 1335.362), stdev = 144.919
[info]   CI (99.9%): [518.639, 1634.699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   185.436 ±(99.9%) 91.337 B/op [Average]
[info]   (min, avg, max) = (167.910, 185.436, 226.914), stdev = 23.720
[info]   CI (99.9%): [94.099, 276.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   1.465 ±(99.9%) 11.238 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.465, 6.661), stdev = 2.918
[info]   CI (99.9%): [≈ 0, 12.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.251 ±(99.9%) 1.934 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.251, 1.146), stdev = 0.502
[info]   CI (99.9%): [≈ 0, 2.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.time":
[info]   51.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 10.200, 19.000), stdev = 7.396
[info]   CI (99.9%): [51.000, 51.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala
[info] # Run progress: 2.97% complete, ETA 01:15:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 669015.639 ops/s
[info] # Warmup Iteration   2: 2052774.753 ops/s
[info] # Warmup Iteration   3: 2066633.900 ops/s
[info] Iteration   1: 2081590.880 ops/s
[info]                  ·gc.alloc.rate:                   1459.804 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1344.601 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1016.876 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.504 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 2097737.897 ops/s
[info]                  ·gc.alloc.rate:                                  1471.184 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1104.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.074 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.055 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1357.317 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1018.553 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                2.999 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 2143540.872 ops/s
[info]                  ·gc.alloc.rate:                                  1503.402 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1104.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.720 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1249.632 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 2151457.200 ops/s
[info]                  ·gc.alloc.rate:                                  1509.645 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1104.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.050 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       996.064 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 2148539.397 ops/s
[info]                  ·gc.alloc.rate:                                  1507.437 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1104.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.378 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1246.769 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala":
[info]   2124573.249 ±(99.9%) 125138.730 ops/s [Average]
[info]   (min, avg, max) = (2081590.880, 2124573.249, 2151457.200), stdev = 32498.131
[info]   CI (99.9%): [1999434.519, 2249711.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1490.294 ±(99.9%) 88.962 MB/sec [Average]
[info]   (min, avg, max) = (1459.804, 1490.294, 1509.645), stdev = 23.103
[info]   CI (99.9%): [1401.333, 1579.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1104.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1104.000, 1104.000, 1104.000), stdev = 0.001
[info]   CI (99.9%): [1104.000, 1104.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.015 ±(99.9%) 0.126 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.074), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.011 ±(99.9%) 0.094 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.055), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1493.613 ±(99.9%) 733.093 MB/sec [Average]
[info]   (min, avg, max) = (1344.601, 1493.613, 1702.378), stdev = 190.382
[info]   CI (99.9%): [760.520, 2226.707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1105.579 ±(99.9%) 502.510 B/op [Average]
[info]   (min, avg, max) = (996.064, 1105.579, 1249.632), stdev = 130.500
[info]   CI (99.9%): [603.069, 1608.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.700 ±(99.9%) 5.018 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.700, 2.999), stdev = 1.303
[info]   CI (99.9%): [≈ 0, 5.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.400, 18.000), stdev = 6.107
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala
[info] # Run progress: 3.24% complete, ETA 01:15:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8429267.741 ops/s
[info] # Warmup Iteration   2: 9442111.941 ops/s
[info] # Warmup Iteration   3: 9775792.980 ops/s
[info] Iteration   1: 9768530.542 ops/s
[info]                  ·gc.alloc.rate:            1241.697 MB/sec
[info]                  ·gc.alloc.rate.norm:       200.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.593 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 217.218 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 9392420.590 ops/s
[info]                  ·gc.alloc.rate:                                  1193.208 MB/sec
[info]                  ·gc.alloc.rate.norm:                             200.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.052 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1014.231 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       170.001 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                0.558 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 9191689.555 ops/s
[info]                  ·gc.alloc.rate:                                  1167.902 MB/sec
[info]                  ·gc.alloc.rate.norm:                             200.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.052 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.434 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       233.142 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 9137592.014 ops/s
[info]                  ·gc.alloc.rate:            1161.039 MB/sec
[info]                  ·gc.alloc.rate.norm:       200.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.091 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 175.893 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 9201565.575 ops/s
[info]                  ·gc.alloc.rate:            1169.578 MB/sec
[info]                  ·gc.alloc.rate.norm:       200.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1360.529 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 232.653 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala":
[info]   9338359.655 ±(99.9%) 997647.448 ops/s [Average]
[info]   (min, avg, max) = (9137592.014, 9338359.655, 9768530.542), stdev = 259085.874
[info]   CI (99.9%): [8340712.207, 10336007.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1186.685 ±(99.9%) 127.305 MB/sec [Average]
[info]   (min, avg, max) = (1161.039, 1186.685, 1241.697), stdev = 33.061
[info]   CI (99.9%): [1059.380, 1313.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   200.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (200.000, 200.000, 200.000), stdev = 0.001
[info]   CI (99.9%): [200.000, 200.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.021 ±(99.9%) 0.110 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.052), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.004 ±(99.9%) 0.019 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.009), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1221.176 ±(99.9%) 715.709 MB/sec [Average]
[info]   (min, avg, max) = (1014.231, 1221.176, 1361.434), stdev = 185.867
[info]   CI (99.9%): [505.467, 1936.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   205.781 ±(99.9%) 118.295 B/op [Average]
[info]   (min, avg, max) = (170.001, 205.781, 233.142), stdev = 30.721
[info]   CI (99.9%): [87.487, 324.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.112 ±(99.9%) 0.961 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.112, 0.558), stdev = 0.250
[info]   CI (99.9%): [≈ 0, 1.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 11.000), stdev = 3.578
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson
[info] # Run progress: 3.51% complete, ETA 01:15:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 111790.368 ops/s
[info] # Warmup Iteration   2: 591702.453 ops/s
[info] # Warmup Iteration   3: 594171.853 ops/s
[info] Iteration   1: 590419.927 ops/s
[info]                  ·gc.alloc.rate:                   1590.354 MB/sec
[info]                  ·gc.alloc.rate.norm:              4240.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1679.124 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4476.670 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      5.328 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 14.206 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         23.000 ms
[info] Iteration   2: 606309.591 ops/s
[info]                  ·gc.alloc.rate:                                  1633.037 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4240.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.155 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.401 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.634 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4418.104 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 611227.952 ops/s
[info]                  ·gc.alloc.rate:            1646.414 MB/sec
[info]                  ·gc.alloc.rate.norm:       4240.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.365 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3505.916 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 604521.729 ops/s
[info]                  ·gc.alloc.rate:                                  1628.875 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4240.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.226 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4430.935 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 605999.508 ops/s
[info]                  ·gc.alloc.rate:                                  1633.052 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4240.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.474 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4420.247 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson":
[info]   603695.741 ±(99.9%) 30185.418 ops/s [Average]
[info]   (min, avg, max) = (590419.927, 603695.741, 611227.952), stdev = 7839.057
[info]   CI (99.9%): [573510.324, 633881.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1626.346 ±(99.9%) 81.555 MB/sec [Average]
[info]   (min, avg, max) = (1590.354, 1626.346, 1646.414), stdev = 21.180
[info]   CI (99.9%): [1544.791, 1707.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   4240.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4240.001, 4240.001, 4240.001), stdev = 0.001
[info]   CI (99.9%): [4240.001, 4240.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.032 ±(99.9%) 0.264 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.032, 0.155), stdev = 0.069
[info]   CI (99.9%): [≈ 0, 0.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.083 ±(99.9%) 0.686 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.083, 0.401), stdev = 0.178
[info]   CI (99.9%): [≈ 0, 0.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1629.365 ±(99.9%) 578.162 MB/sec [Average]
[info]   (min, avg, max) = (1361.365, 1629.365, 1702.474), stdev = 150.147
[info]   CI (99.9%): [1051.203, 2207.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   4250.374 ±(99.9%) 1605.099 B/op [Average]
[info]   (min, avg, max) = (3505.916, 4250.374, 4476.670), stdev = 416.839
[info]   CI (99.9%): [2645.275, 5855.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 9.176 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 5.328), stdev = 2.383
[info]   CI (99.9%): [≈ 0, 10.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   2.841 ±(99.9%) 24.464 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.841, 14.206), stdev = 6.353
[info]   CI (99.9%): [≈ 0, 27.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.800, 23.000), stdev = 8.526
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce
[info] # Run progress: 3.78% complete, ETA 01:15:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1002161.620 ops/s
[info] # Warmup Iteration   2: 1710563.361 ops/s
[info] # Warmup Iteration   3: 1732217.541 ops/s
[info] Iteration   1: 1712233.448 ops/s
[info]                  ·gc.alloc.rate:                   1557.582 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.014 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1239.329 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.062 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 1719345.699 ops/s
[info]                  ·gc.alloc.rate:                                  1564.056 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1432.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.127 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.116 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.681 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1558.005 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   3: 1760896.836 ops/s
[info]                  ·gc.alloc.rate:                                  1602.173 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1432.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.980 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1521.207 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 1748855.059 ops/s
[info]                  ·gc.alloc.rate:                                  1591.710 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1432.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.989 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1225.329 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 1762693.046 ops/s
[info]                  ·gc.alloc.rate:                                  1604.239 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1432.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.438 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1519.656 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce":
[info]   1740804.818 ±(99.9%) 90805.153 ops/s [Average]
[info]   (min, avg, max) = (1712233.448, 1740804.818, 1762693.046), stdev = 23581.810
[info]   CI (99.9%): [1649999.664, 1831609.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1583.952 ±(99.9%) 83.812 MB/sec [Average]
[info]   (min, avg, max) = (1557.582, 1583.952, 1604.239), stdev = 21.766
[info]   CI (99.9%): [1500.140, 1667.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1432.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1432.000, 1432.000, 1432.000), stdev = 0.001
[info]   CI (99.9%): [1432.000, 1432.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.027 ±(99.9%) 0.216 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.127), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.025 ±(99.9%) 0.198 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.116), stdev = 0.051
[info]   CI (99.9%): [≈ 0, 0.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1563.221 ±(99.9%) 732.167 MB/sec [Average]
[info]   (min, avg, max) = (1348.014, 1563.221, 1702.438), stdev = 190.141
[info]   CI (99.9%): [831.053, 2295.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   1412.705 ±(99.9%) 637.081 B/op [Average]
[info]   (min, avg, max) = (1225.329, 1412.705, 1558.005), stdev = 165.448
[info]   CI (99.9%): [775.624, 2049.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   0.612 ±(99.9%) 5.272 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.612, 3.062), stdev = 1.369
[info]   CI (99.9%): [≈ 0, 5.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 13.000), stdev = 4.450
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava
[info] # Run progress: 4.05% complete, ETA 01:15:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.925 ops/s
[info] # Warmup Iteration   2: 16163470.724 ops/s
[info] # Warmup Iteration   3: 16232509.924 ops/s
[info] Iteration   1: 17323018.097 ops/s
[info]                  ·gc.alloc.rate:            528.404 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.781 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 30.321 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 16657928.840 ops/s
[info]                  ·gc.alloc.rate:            507.934 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.339 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 63.064 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 16524131.799 ops/s
[info]                  ·gc.alloc.rate:            503.883 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.695 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 31.788 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 17059829.888 ops/s
[info]                  ·gc.alloc.rate:            520.248 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.431 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 61.580 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 16508098.505 ops/s
[info]                  ·gc.alloc.rate:            503.396 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.700 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 31.819 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava":
[info]   16814601.426 ±(99.9%) 1390353.702 ops/s [Average]
[info]   (min, avg, max) = (16508098.505, 16814601.426, 17323018.097), stdev = 361070.441
[info]   CI (99.9%): [15424247.724, 18204955.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   512.773 ±(99.9%) 42.644 MB/sec [Average]
[info]   (min, avg, max) = (503.396, 512.773, 528.404), stdev = 11.075
[info]   CI (99.9%): [470.129, 555.417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   467.189 ±(99.9%) 703.716 MB/sec [Average]
[info]   (min, avg, max) = (333.695, 467.189, 667.431), stdev = 182.753
[info]   CI (99.9%): [≈ 0, 1170.906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   43.714 ±(99.9%) 65.481 B/op [Average]
[info]   (min, avg, max) = (30.321, 43.714, 63.064), stdev = 17.005
[info]   CI (99.9%): [≈ 0, 109.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.600, 9.000), stdev = 2.191
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala
[info] # Run progress: 4.32% complete, ETA 01:14:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_8263f884/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 1294347.586 ops/s
[info] # Warmup Iteration   2: 4779900.895 ops/s
[info] # Warmup Iteration   3: 4847627.865 ops/s
[info] Iteration   1: 4827198.844 ops/s
[info]                  ·gc.alloc.rate:            1324.699 MB/sec
[info]                  ·gc.alloc.rate.norm:       432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1006.984 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 328.389 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 4855293.265 ops/s
[info]                  ·gc.alloc.rate:                   1332.655 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.905 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        436.620 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.512 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   3: 4875532.062 ops/s
[info]                  ·gc.alloc.rate:                                  1338.046 MB/sec
[info]                  ·gc.alloc.rate.norm:                             432.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.076 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.025 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.405 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       439.542 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 4910729.735 ops/s
[info]                  ·gc.alloc.rate:                                  1347.740 MB/sec
[info]                  ·gc.alloc.rate.norm:                             432.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.441 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       436.392 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 4884944.427 ops/s
[info]                  ·gc.alloc.rate:            1340.625 MB/sec
[info]                  ·gc.alloc.rate.norm:       432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.327 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 438.671 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala":
[info]   4870739.667 ±(99.9%) 121132.321 ops/s [Average]
[info]   (min, avg, max) = (4827198.844, 4870739.667, 4910729.735), stdev = 31457.679
[info]   CI (99.9%): [4749607.346, 4991871.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1336.753 ±(99.9%) 33.317 MB/sec [Average]
[info]   (min, avg, max) = (1324.699, 1336.753, 1347.740), stdev = 8.652
[info]   CI (99.9%): [1303.436, 1370.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   432.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (432.000, 432.000, 432.000), stdev = 0.001
[info]   CI (99.9%): [432.000, 432.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.016 ±(99.9%) 0.130 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.076), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.005 ±(99.9%) 0.042 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.025), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1287.612 ±(99.9%) 604.557 MB/sec [Average]
[info]   (min, avg, max) = (1006.984, 1287.612, 1361.441), stdev = 157.002
[info]   CI (99.9%): [683.055, 1892.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   415.923 ±(99.9%) 188.493 B/op [Average]
[info]   (min, avg, max) = (328.389, 415.923, 439.542), stdev = 48.951
[info]   CI (99.9%): [227.430, 604.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.030 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.663), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.302 ±(99.9%) 2.603 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.302, 1.512), stdev = 0.676
[info]   CI (99.9%): [≈ 0, 2.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.400, 15.000), stdev = 6.066
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala
[info] # Run progress: 4.59% complete, ETA 01:14:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13109986.206 ops/s
[info] # Warmup Iteration   2: 19693636.185 ops/s
[info] # Warmup Iteration   3: 20685915.650 ops/s
[info] Iteration   1: 20729502.979 ops/s
[info]                  ·gc.alloc.rate:            632.095 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.311 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 51.130 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 20908517.022 ops/s
[info]                  ·gc.alloc.rate:            637.510 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.625 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 50.644 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 21396822.986 ops/s
[info]                  ·gc.alloc.rate:                   652.456 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.350 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        49.537 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.049 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 20891108.604 ops/s
[info]                  ·gc.alloc.rate:            637.264 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.928 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 50.686 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 20632721.225 ops/s
[info]                  ·gc.alloc.rate:            629.300 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.840 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 51.321 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala":
[info]   20911734.563 ±(99.9%) 1133822.339 ops/s [Average]
[info]   (min, avg, max) = (20632721.225, 20911734.563, 21396822.986), stdev = 294450.061
[info]   CI (99.9%): [19777912.224, 22045556.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   637.725 ±(99.9%) 34.439 MB/sec [Average]
[info]   (min, avg, max) = (629.300, 637.725, 652.456), stdev = 8.944
[info]   CI (99.9%): [603.287, 672.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   673.011 ±(99.9%) 1.203 MB/sec [Average]
[info]   (min, avg, max) = (672.625, 673.011, 673.350), stdev = 0.313
[info]   CI (99.9%): [671.807, 674.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   50.664 ±(99.9%) 2.667 B/op [Average]
[info]   (min, avg, max) = (49.537, 50.664, 51.321), stdev = 0.693
[info]   CI (99.9%): [47.996, 53.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.010 ±(99.9%) 0.084 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.049), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.000, 12.000), stdev = 2.828
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 4.86% complete, ETA 01:14:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11389906.676 ops/s
[info] # Warmup Iteration   2: 19558807.824 ops/s
[info] # Warmup Iteration   3: 19433543.157 ops/s
[info] Iteration   1: 19507201.483 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 19483623.747 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 19427790.451 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 20106008.093 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 20615124.329 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc":
[info]   19827949.621 ±(99.9%) 1999488.872 ops/s [Average]
[info]   (min, avg, max) = (19427790.451, 19827949.621, 20615124.329), stdev = 519260.910
[info]   CI (99.9%): [17828460.749, 21827438.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson
[info] # Run progress: 5.14% complete, ETA 01:14:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 179495.603 ops/s
[info] # Warmup Iteration   2: 1250243.998 ops/s
[info] # Warmup Iteration   3: 1259959.616 ops/s
[info] Iteration   1: 1256770.591 ops/s
[info]                  ·gc.alloc.rate:                                  1833.022 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2296.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.155 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.194 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2024.714 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2536.109 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     5.328 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                6.674 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        21.000 ms
[info] Iteration   2: 1279913.654 ops/s
[info]                  ·gc.alloc.rate:                                  1866.966 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2296.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.034 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.042 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.859 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2092.951 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 1280116.587 ops/s
[info]                  ·gc.alloc.rate:                                  1867.931 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2296.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.947 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2511.124 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 1250827.163 ops/s
[info]                  ·gc.alloc.rate:            1824.305 MB/sec
[info]                  ·gc.alloc.rate.norm:       2296.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.604 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2141.573 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 1247283.785 ops/s
[info]                  ·gc.alloc.rate:                                  1819.522 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2296.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.876 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2147.547 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson":
[info]   1262982.356 ±(99.9%) 61279.420 ops/s [Average]
[info]   (min, avg, max) = (1247283.785, 1262982.356, 1280116.587), stdev = 15914.071
[info]   CI (99.9%): [1201702.936, 1324261.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1842.349 ±(99.9%) 90.184 MB/sec [Average]
[info]   (min, avg, max) = (1819.522, 1842.349, 1867.931), stdev = 23.420
[info]   CI (99.9%): [1752.165, 1932.533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2296.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2296.000, 2296.000, 2296.000), stdev = 0.001
[info]   CI (99.9%): [2296.000, 2296.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.038 ±(99.9%) 0.258 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.038, 0.155), stdev = 0.067
[info]   CI (99.9%): [≈ 0, 0.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.048 ±(99.9%) 0.323 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.048, 0.194), stdev = 0.084
[info]   CI (99.9%): [≈ 0, 0.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1834.600 ±(99.9%) 700.763 MB/sec [Average]
[info]   (min, avg, max) = (1701.604, 1834.600, 2042.947), stdev = 181.986
[info]   CI (99.9%): [1133.837, 2535.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   2285.861 ±(99.9%) 840.401 B/op [Average]
[info]   (min, avg, max) = (2092.951, 2285.861, 2536.109), stdev = 218.250
[info]   CI (99.9%): [1445.459, 3126.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 9.175 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 5.328), stdev = 2.383
[info]   CI (99.9%): [≈ 0, 10.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   1.335 ±(99.9%) 11.493 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.335, 6.674), stdev = 2.985
[info]   CI (99.9%): [≈ 0, 12.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.400, 21.000), stdev = 7.603
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce
[info] # Run progress: 5.41% complete, ETA 01:14:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15987.852 ops/s
[info] # Warmup Iteration   2: 20044.480 ops/s
[info] # Warmup Iteration   3: 19813.623 ops/s
[info] Iteration   1: 20110.249 ops/s
[info]                  ·gc.alloc.rate:            1231.727 MB/sec
[info]                  ·gc.alloc.rate.norm:       96408.051 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.004 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 79131.910 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 19783.843 ops/s
[info]                  ·gc.alloc.rate:                                  1212.215 MB/sec
[info]                  ·gc.alloc.rate.norm:                             96408.021 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.034 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.724 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1351.906 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       107517.723 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                264.952 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   3: 19738.830 ops/s
[info]                  ·gc.alloc.rate:                                  1209.007 MB/sec
[info]                  ·gc.alloc.rate.norm:                             96408.026 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.059 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.722 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.461 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       108564.955 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 20398.490 ops/s
[info]                  ·gc.alloc.rate:                                  1249.556 MB/sec
[info]                  ·gc.alloc.rate.norm:                             96408.020 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.018 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.356 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.152 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       78785.816 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 20334.214 ops/s
[info]                  ·gc.alloc.rate:                                  1245.344 MB/sec
[info]                  ·gc.alloc.rate.norm:                             96408.020 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.081 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.284 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       105383.486 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce":
[info]   20073.125 ±(99.9%) 1172.464 ops/s [Average]
[info]   (min, avg, max) = (19738.830, 20073.125, 20398.490), stdev = 304.485
[info]   CI (99.9%): [18900.661, 21245.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate":
[info]   1229.570 ±(99.9%) 71.443 MB/sec [Average]
[info]   (min, avg, max) = (1209.007, 1229.570, 1249.556), stdev = 18.554
[info]   CI (99.9%): [1158.127, 1301.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   96408.028 ±(99.9%) 0.052 B/op [Average]
[info]   (min, avg, max) = (96408.020, 96408.028, 96408.051), stdev = 0.013
[info]   CI (99.9%): [96407.976, 96408.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.022 ±(99.9%) 0.096 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.059), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.777 ±(99.9%) 7.648 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.777, 4.722), stdev = 1.986
[info]   CI (99.9%): [≈ 0, 9.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1221.362 ±(99.9%) 721.886 MB/sec [Average]
[info]   (min, avg, max) = (1011.004, 1221.362, 1361.461), stdev = 187.472
[info]   CI (99.9%): [499.475, 1943.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   95876.778 ±(99.9%) 59634.358 B/op [Average]
[info]   (min, avg, max) = (78785.816, 95876.778, 108564.955), stdev = 15486.853
[info]   CI (99.9%): [36242.420, 155511.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.737 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   52.990 ±(99.9%) 456.264 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 52.990, 264.952), stdev = 118.490
[info]   CI (99.9%): [≈ 0, 509.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.800, 11.000), stdev = 3.962
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala
[info] # Run progress: 5.68% complete, ETA 01:13:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18960.656 ops/s
[info] # Warmup Iteration   2: 32965.127 ops/s
[info] # Warmup Iteration   3: 32796.877 ops/s
[info] Iteration   1: 32880.725 ops/s
[info]                  ·gc.alloc.rate:            824.102 MB/sec
[info]                  ·gc.alloc.rate.norm:       39455.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.629 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 32203.052 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 33142.370 ops/s
[info]                  ·gc.alloc.rate:            830.807 MB/sec
[info]                  ·gc.alloc.rate.norm:       39456.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.089 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 47922.792 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   3: 34195.352 ops/s
[info]                  ·gc.alloc.rate:            857.151 MB/sec
[info]                  ·gc.alloc.rate.norm:       39456.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.708 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 30965.813 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 33943.135 ops/s
[info]                  ·gc.alloc.rate:                                  850.912 MB/sec
[info]                  ·gc.alloc.rate.norm:                             39456.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.091 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.230 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.150 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       46978.824 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                185.321 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   5: 33250.472 ops/s
[info]                  ·gc.alloc.rate:                                  833.566 MB/sec
[info]                  ·gc.alloc.rate.norm:                             39456.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.046 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.163 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.781 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       32224.100 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala":
[info]   33482.411 ±(99.9%) 2154.298 ops/s [Average]
[info]   (min, avg, max) = (32880.725, 33482.411, 34195.352), stdev = 559.464
[info]   CI (99.9%): [31328.113, 35636.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   839.308 ±(99.9%) 54.097 MB/sec [Average]
[info]   (min, avg, max) = (824.102, 839.308, 857.151), stdev = 14.049
[info]   CI (99.9%): [785.211, 893.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   39455.814 ±(99.9%) 1.707 B/op [Average]
[info]   (min, avg, max) = (39455.021, 39455.814, 39456.014), stdev = 0.443
[info]   CI (99.9%): [39454.107, 39457.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.027 ±(99.9%) 0.157 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.091), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.279 ±(99.9%) 7.306 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.279, 4.230), stdev = 1.897
[info]   CI (99.9%): [≈ 0, 8.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   809.671 ±(99.9%) 708.254 MB/sec [Average]
[info]   (min, avg, max) = (672.629, 809.671, 1013.150), stdev = 183.931
[info]   CI (99.9%): [101.417, 1517.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   38058.916 ±(99.9%) 33097.015 B/op [Average]
[info]   (min, avg, max) = (30965.813, 38058.916, 47922.792), stdev = 8595.190
[info]   CI (99.9%): [4961.901, 71155.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   37.064 ±(99.9%) 319.134 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 37.064, 185.321), stdev = 82.878
[info]   CI (99.9%): [≈ 0, 356.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.200, 13.000), stdev = 4.025
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala
[info] # Run progress: 5.95% complete, ETA 01:13:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27844.497 ops/s
[info] # Warmup Iteration   2: 31876.996 ops/s
[info] # Warmup Iteration   3: 32192.020 ops/s
[info] Iteration   1: 32086.238 ops/s
[info]                  ·gc.alloc.rate:            431.159 MB/sec
[info]                  ·gc.alloc.rate.norm:       21144.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.242 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 33015.740 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 31411.568 ops/s
[info]                  ·gc.alloc.rate:            421.928 MB/sec
[info]                  ·gc.alloc.rate.norm:       21144.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.027 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16889.367 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 32276.435 ops/s
[info]                  ·gc.alloc.rate:            433.554 MB/sec
[info]                  ·gc.alloc.rate.norm:       21144.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.022 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16436.277 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 32297.928 ops/s
[info]                  ·gc.alloc.rate:            434.042 MB/sec
[info]                  ·gc.alloc.rate.norm:       21144.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.183 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16425.591 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 32024.792 ops/s
[info]                  ·gc.alloc.rate:            430.225 MB/sec
[info]                  ·gc.alloc.rate.norm:       21144.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.112 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 33130.156 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala":
[info]   32019.392 ±(99.9%) 1385.164 ops/s [Average]
[info]   (min, avg, max) = (31411.568, 32019.392, 32297.928), stdev = 359.723
[info]   CI (99.9%): [30634.228, 33404.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   430.182 ±(99.9%) 18.800 MB/sec [Average]
[info]   (min, avg, max) = (421.928, 430.182, 434.042), stdev = 4.882
[info]   CI (99.9%): [411.381, 448.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   21144.014 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (21144.013, 21144.014, 21144.017), stdev = 0.002
[info]   CI (99.9%): [21144.007, 21144.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   471.717 ±(99.9%) 709.918 MB/sec [Average]
[info]   (min, avg, max) = (337.022, 471.717, 674.112), stdev = 184.364
[info]   CI (99.9%): [≈ 0, 1181.635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   23179.426 ±(99.9%) 34784.942 B/op [Average]
[info]   (min, avg, max) = (16425.591, 23179.426, 33130.156), stdev = 9033.539
[info]   CI (99.9%): [≈ 0, 57964.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 6.000), stdev = 1.643
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson
[info] # Run progress: 6.22% complete, ETA 01:13:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13453.056 ops/s
[info] # Warmup Iteration   2: 24516.607 ops/s
[info] # Warmup Iteration   3: 24534.694 ops/s
[info] Iteration   1: 24425.280 ops/s
[info]                  ·gc.alloc.rate:            1294.085 MB/sec
[info]                  ·gc.alloc.rate.norm:       83400.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.316 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 86701.740 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 24723.115 ops/s
[info]                  ·gc.alloc.rate:                                  1310.434 MB/sec
[info]                  ·gc.alloc.rate.norm:                             83400.021 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.098 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 6.237 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1353.891 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       86165.741 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                254.426 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   3: 25112.855 ops/s
[info]                  ·gc.alloc.rate:                                  1330.576 MB/sec
[info]                  ·gc.alloc.rate.norm:                             83400.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.021 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.345 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.403 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       85332.219 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 24078.212 ops/s
[info]                  ·gc.alloc.rate:                                  1275.728 MB/sec
[info]                  ·gc.alloc.rate.norm:                             83400.017 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.249 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.383 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       88999.641 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 24918.139 ops/s
[info]                  ·gc.alloc.rate:                                  1320.876 MB/sec
[info]                  ·gc.alloc.rate.norm:                             83400.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.029 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.052 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       85999.893 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson":
[info]   24651.520 ±(99.9%) 1574.660 ops/s [Average]
[info]   (min, avg, max) = (24078.212, 24651.520, 25112.855), stdev = 408.934
[info]   CI (99.9%): [23076.860, 26226.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1306.340 ±(99.9%) 83.983 MB/sec [Average]
[info]   (min, avg, max) = (1275.728, 1306.340, 1330.576), stdev = 21.810
[info]   CI (99.9%): [1222.357, 1390.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   83400.018 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (83400.016, 83400.018, 83400.021), stdev = 0.002
[info]   CI (99.9%): [83400.011, 83400.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.025 ±(99.9%) 0.161 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.098), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.572 ±(99.9%) 10.264 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.572, 6.237), stdev = 2.665
[info]   CI (99.9%): [≈ 0, 11.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1356.809 ±(99.9%) 27.908 MB/sec [Average]
[info]   (min, avg, max) = (1345.316, 1356.809, 1362.052), stdev = 7.248
[info]   CI (99.9%): [1328.901, 1384.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   86639.847 ±(99.9%) 5417.195 B/op [Average]
[info]   (min, avg, max) = (85332.219, 86639.847, 88999.641), stdev = 1406.828
[info]   CI (99.9%): [81222.651, 92057.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.800 ±(99.9%) 6.884 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.800, 3.998), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   50.885 ±(99.9%) 438.138 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 50.885, 254.426), stdev = 113.783
[info]   CI (99.9%): [≈ 0, 489.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.200, 16.000), stdev = 5.718
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce
[info] # Run progress: 6.49% complete, ETA 01:13:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17585.330 ops/s
[info] # Warmup Iteration   2: 27585.062 ops/s
[info] # Warmup Iteration   3: 27565.696 ops/s
[info] Iteration   1: 27012.962 ops/s
[info]                  ·gc.alloc.rate:                   1535.064 MB/sec
[info]                  ·gc.alloc.rate.norm:              89408.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.725 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        78554.903 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 194.059 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 27420.681 ops/s
[info]                  ·gc.alloc.rate:                                  1557.421 MB/sec
[info]                  ·gc.alloc.rate.norm:                             89408.072 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.129 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 7.428 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.662 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       97688.667 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 27684.758 ops/s
[info]                  ·gc.alloc.rate:            1572.786 MB/sec
[info]                  ·gc.alloc.rate.norm:       89408.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1702.006 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 96753.762 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 27973.762 ops/s
[info]                  ·gc.alloc.rate:                                  1588.908 MB/sec
[info]                  ·gc.alloc.rate.norm:                             89408.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.074 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.353 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       76603.501 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 27163.998 ops/s
[info]                  ·gc.alloc.rate:                                  1542.874 MB/sec
[info]                  ·gc.alloc.rate.norm:                             89408.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.010 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.571 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.528 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       98601.880 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce":
[info]   27451.232 ±(99.9%) 1495.182 ops/s [Average]
[info]   (min, avg, max) = (27012.962, 27451.232, 27973.762), stdev = 388.294
[info]   CI (99.9%): [25956.050, 28946.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1559.411 ±(99.9%) 84.345 MB/sec [Average]
[info]   (min, avg, max) = (1535.064, 1559.411, 1588.908), stdev = 21.904
[info]   CI (99.9%): [1475.066, 1643.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   89408.027 ±(99.9%) 0.098 B/op [Average]
[info]   (min, avg, max) = (89408.015, 89408.027, 89408.072), stdev = 0.025
[info]   CI (99.9%): [89407.929, 89408.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.028 ±(99.9%) 0.219 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.129), stdev = 0.057
[info]   CI (99.9%): [≈ 0, 0.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.615 ±(99.9%) 12.547 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.615, 7.428), stdev = 3.259
[info]   CI (99.9%): [≈ 0, 14.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1563.055 ±(99.9%) 731.407 MB/sec [Average]
[info]   (min, avg, max) = (1348.725, 1563.055, 1702.006), stdev = 189.944
[info]   CI (99.9%): [831.648, 2294.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   89640.543 ±(99.9%) 42554.913 B/op [Average]
[info]   (min, avg, max) = (76603.501, 89640.543, 98601.880), stdev = 11051.376
[info]   CI (99.9%): [47085.630, 132195.455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.738 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.332), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   38.812 ±(99.9%) 334.181 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 38.812, 194.059), stdev = 86.786
[info]   CI (99.9%): [≈ 0, 372.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 13.000), stdev = 4.243
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala
[info] # Run progress: 6.76% complete, ETA 01:13:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12497.796 ops/s
[info] # Warmup Iteration   2: 27996.441 ops/s
[info] # Warmup Iteration   3: 28222.920 ops/s
[info] Iteration   1: 28177.020 ops/s
[info]                  ·gc.alloc.rate:                   1516.940 MB/sec
[info]                  ·gc.alloc.rate.norm:              84720.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.076 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        75121.529 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 260.451 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 28240.457 ops/s
[info]                  ·gc.alloc.rate:                                  1519.976 MB/sec
[info]                  ·gc.alloc.rate.norm:                             84720.070 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.069 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.834 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.825 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       94855.958 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 28348.012 ops/s
[info]                  ·gc.alloc.rate:                                  1526.050 MB/sec
[info]                  ·gc.alloc.rate.norm:                             84720.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.116 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.647 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       75593.036 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 29014.210 ops/s
[info]                  ·gc.alloc.rate:                                  1561.670 MB/sec
[info]                  ·gc.alloc.rate.norm:                             84720.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.071 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.812 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       92322.674 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 28848.021 ops/s
[info]                  ·gc.alloc.rate:            1553.146 MB/sec
[info]                  ·gc.alloc.rate.norm:       84720.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.762 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 74280.493 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala":
[info]   28525.544 ±(99.9%) 1462.544 ops/s [Average]
[info]   (min, avg, max) = (28177.020, 28525.544, 29014.210), stdev = 379.818
[info]   CI (99.9%): [27063.000, 29988.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1535.557 ±(99.9%) 78.703 MB/sec [Average]
[info]   (min, avg, max) = (1516.940, 1535.557, 1561.670), stdev = 20.439
[info]   CI (99.9%): [1456.853, 1614.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   84720.026 ±(99.9%) 0.095 B/op [Average]
[info]   (min, avg, max) = (84720.014, 84720.026, 84720.070), stdev = 0.025
[info]   CI (99.9%): [84719.931, 84720.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.014 ±(99.9%) 0.117 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.069), stdev = 0.030
[info]   CI (99.9%): [≈ 0, 0.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.804 ±(99.9%) 6.525 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.804, 3.834), stdev = 1.694
[info]   CI (99.9%): [≈ 0, 7.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1494.425 ±(99.9%) 729.488 MB/sec [Average]
[info]   (min, avg, max) = (1345.076, 1494.425, 1701.825), stdev = 189.446
[info]   CI (99.9%): [764.936, 2223.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   82434.738 ±(99.9%) 39402.908 B/op [Average]
[info]   (min, avg, max) = (74280.493, 82434.738, 94855.958), stdev = 10232.810
[info]   CI (99.9%): [43031.830, 121837.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.031 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.663), stdev = 2.086
[info]   CI (99.9%): [≈ 0, 8.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   52.090 ±(99.9%) 448.512 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 52.090, 260.451), stdev = 116.477
[info]   CI (99.9%): [≈ 0, 500.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.800, 18.000), stdev = 6.340
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala
[info] # Run progress: 7.03% complete, ETA 01:13:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23120.265 ops/s
[info] # Warmup Iteration   2: 29778.618 ops/s
[info] # Warmup Iteration   3: 30150.452 ops/s
[info] Iteration   1: 28967.391 ops/s
[info]                  ·gc.alloc.rate:                                  1494.650 MB/sec
[info]                  ·gc.alloc.rate.norm:                             81224.019 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.085 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.597 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1685.597 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       91600.658 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                217.149 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        14.000 ms
[info] Iteration   2: 30506.400 ops/s
[info]                  ·gc.alloc.rate:                                  1574.121 MB/sec
[info]                  ·gc.alloc.rate.norm:                             81224.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.072 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.696 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.331 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       70244.145 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   3: 30482.493 ops/s
[info]                  ·gc.alloc.rate:                                  1572.907 MB/sec
[info]                  ·gc.alloc.rate.norm:                             81224.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.114 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.690 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       87874.301 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 29779.905 ops/s
[info]                  ·gc.alloc.rate:                                  1536.860 MB/sec
[info]                  ·gc.alloc.rate.norm:                             81224.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.330 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.936 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       89948.353 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 30578.451 ops/s
[info]                  ·gc.alloc.rate:                                  1577.977 MB/sec
[info]                  ·gc.alloc.rate.norm:                             81224.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.067 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.453 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       70078.778 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala":
[info]   30062.928 ±(99.9%) 2666.949 ops/s [Average]
[info]   (min, avg, max) = (28967.391, 30062.928, 30578.451), stdev = 692.598
[info]   CI (99.9%): [27395.979, 32729.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1551.303 ±(99.9%) 137.725 MB/sec [Average]
[info]   (min, avg, max) = (1494.650, 1551.303, 1577.977), stdev = 35.767
[info]   CI (99.9%): [1413.578, 1689.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   81224.015 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (81224.013, 81224.015, 81224.019), stdev = 0.002
[info]   CI (99.9%): [81224.006, 81224.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.033 ±(99.9%) 0.159 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.033, 0.085), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.761 ±(99.9%) 8.483 B/op [Average]
[info]   (min, avg, max) = (0.067, 1.761, 4.597), stdev = 2.203
[info]   CI (99.9%): [≈ 0, 10.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1562.401 ±(99.9%) 707.035 MB/sec [Average]
[info]   (min, avg, max) = (1361.331, 1562.401, 1701.936), stdev = 183.615
[info]   CI (99.9%): [855.366, 2269.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   81949.247 ±(99.9%) 41747.051 B/op [Average]
[info]   (min, avg, max) = (70078.778, 81949.247, 91600.658), stdev = 10841.577
[info]   CI (99.9%): [40202.196, 123696.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   43.430 ±(99.9%) 373.944 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 43.430, 217.149), stdev = 97.112
[info]   CI (99.9%): [≈ 0, 417.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 14.000), stdev = 4.722
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 7.30% complete, ETA 01:12:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22723.879 ops/s
[info] # Warmup Iteration   2: 30434.176 ops/s
[info] # Warmup Iteration   3: 29711.820 ops/s
[info] Iteration   1: 29262.684 ops/s
[info]                  ·gc.alloc.rate:                   1453.720 MB/sec
[info]                  ·gc.alloc.rate.norm:              78168.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.512 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        72403.297 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 250.778 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 29666.645 ops/s
[info]                  ·gc.alloc.rate:                                  1473.169 MB/sec
[info]                  ·gc.alloc.rate.norm:                             78168.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.065 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.475 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.311 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       72232.723 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 29638.126 ops/s
[info]                  ·gc.alloc.rate:                                  1471.784 MB/sec
[info]                  ·gc.alloc.rate.norm:                             78168.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.247 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.646 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       90376.187 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 29758.553 ops/s
[info]                  ·gc.alloc.rate:                                  1477.824 MB/sec
[info]                  ·gc.alloc.rate.norm:                             78168.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.113 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.484 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       72014.292 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 29793.701 ops/s
[info]                  ·gc.alloc.rate:                                  1479.541 MB/sec
[info]                  ·gc.alloc.rate.norm:                             78168.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.295 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.327 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       71922.461 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc":
[info]   29623.942 ±(99.9%) 815.642 ops/s [Average]
[info]   (min, avg, max) = (29262.684, 29623.942, 29793.701), stdev = 211.820
[info]   CI (99.9%): [28808.300, 30439.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1471.208 ±(99.9%) 39.608 MB/sec [Average]
[info]   (min, avg, max) = (1453.720, 1471.208, 1479.541), stdev = 10.286
[info]   CI (99.9%): [1431.600, 1510.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   78168.015 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (78168.014, 78168.015, 78168.017), stdev = 0.002
[info]   CI (99.9%): [78168.008, 78168.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.016 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.065), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.826 ±(99.9%) 5.720 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.826, 3.475), stdev = 1.485
[info]   CI (99.9%): [≈ 0, 6.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   1426.456 ±(99.9%) 592.885 MB/sec [Average]
[info]   (min, avg, max) = (1346.512, 1426.456, 1701.646), stdev = 153.970
[info]   CI (99.9%): [833.571, 2019.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   75789.792 ±(99.9%) 31406.637 B/op [Average]
[info]   (min, avg, max) = (71922.461, 75789.792, 90376.187), stdev = 8156.204
[info]   CI (99.9%): [44383.154, 107196.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.031 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.664), stdev = 2.086
[info]   CI (99.9%): [≈ 0, 8.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm":
[info]   50.156 ±(99.9%) 431.855 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 50.156, 250.778), stdev = 112.151
[info]   CI (99.9%): [≈ 0, 482.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 13.000), stdev = 4.159
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson
[info] # Run progress: 7.57% complete, ETA 01:12:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4447.983 ops/s
[info] # Warmup Iteration   2: 7810.688 ops/s
[info] # Warmup Iteration   3: 8085.542 ops/s
[info] Iteration   1: 7938.956 ops/s
[info]                  ·gc.alloc.rate:            1032.900 MB/sec
[info]                  ·gc.alloc.rate.norm:       204776.055 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.243 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 266699.008 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   2: 7824.409 ops/s
[info]                  ·gc.alloc.rate:            1017.872 MB/sec
[info]                  ·gc.alloc.rate.norm:       204776.052 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.861 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 202963.158 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 7797.176 ops/s
[info]                  ·gc.alloc.rate:                                  1014.348 MB/sec
[info]                  ·gc.alloc.rate.norm:                             204776.056 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.110 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 22.272 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1012.974 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       204498.538 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                806.700 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   4: 7855.010 ops/s
[info]                  ·gc.alloc.rate:                                  1021.843 MB/sec
[info]                  ·gc.alloc.rate.norm:                             204776.052 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.040 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 7.966 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.917 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       204590.430 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 7910.377 ops/s
[info]                  ·gc.alloc.rate:            1029.057 MB/sec
[info]                  ·gc.alloc.rate.norm:       204776.052 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.977 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 203168.226 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson":
[info]   7865.186 ±(99.9%) 226.795 ops/s [Average]
[info]   (min, avg, max) = (7797.176, 7865.186, 7938.956), stdev = 58.898
[info]   CI (99.9%): [7638.391, 8091.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1023.204 ±(99.9%) 29.639 MB/sec [Average]
[info]   (min, avg, max) = (1014.348, 1023.204, 1032.900), stdev = 7.697
[info]   CI (99.9%): [993.565, 1052.843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   204776.053 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (204776.052, 204776.053, 204776.056), stdev = 0.002
[info]   CI (99.9%): [204776.045, 204776.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.030 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.110), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   6.048 ±(99.9%) 37.364 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.048, 22.272), stdev = 9.703
[info]   CI (99.9%): [≈ 0, 43.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1081.794 ±(99.9%) 567.449 MB/sec [Average]
[info]   (min, avg, max) = (1008.861, 1081.794, 1345.243), stdev = 147.365
[info]   CI (99.9%): [514.345, 1649.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   216383.872 ±(99.9%) 108344.971 B/op [Average]
[info]   (min, avg, max) = (202963.158, 216383.872, 266699.008), stdev = 28136.845
[info]   CI (99.9%): [108038.901, 324728.843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   161.340 ±(99.9%) 1389.187 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 161.340, 806.700), stdev = 360.767
[info]   CI (99.9%): [≈ 0, 1550.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.400, 15.000), stdev = 5.683
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce
[info] # Run progress: 7.84% complete, ETA 01:12:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13641.438 ops/s
[info] # Warmup Iteration   2: 18500.214 ops/s
[info] # Warmup Iteration   3: 18818.242 ops/s
[info] Iteration   1: 18907.975 ops/s
[info]                  ·gc.alloc.rate:                   1468.572 MB/sec
[info]                  ·gc.alloc.rate.norm:              122264.057 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1685.010 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        140283.289 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 277.240 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   2: 19358.950 ops/s
[info]                  ·gc.alloc.rate:                                  1504.078 MB/sec
[info]                  ·gc.alloc.rate.norm:                             122264.023 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.075 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 6.059 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.695 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       110689.942 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 18845.992 ops/s
[info]                  ·gc.alloc.rate:            1463.871 MB/sec
[info]                  ·gc.alloc.rate.norm:       122264.029 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.362 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 113702.352 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 19222.497 ops/s
[info]                  ·gc.alloc.rate:                                  1493.198 MB/sec
[info]                  ·gc.alloc.rate.norm:                             122264.021 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.015 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.251 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.848 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       139348.366 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 19392.102 ops/s
[info]                  ·gc.alloc.rate:                                  1506.794 MB/sec
[info]                  ·gc.alloc.rate.norm:                             122264.021 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.013 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.050 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.903 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       110507.313 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce":
[info]   19145.503 ±(99.9%) 978.748 ops/s [Average]
[info]   (min, avg, max) = (18845.992, 19145.503, 19392.102), stdev = 254.178
[info]   CI (99.9%): [18166.755, 20124.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1487.303 ±(99.9%) 76.915 MB/sec [Average]
[info]   (min, avg, max) = (1463.871, 1487.303, 1506.794), stdev = 19.975
[info]   CI (99.9%): [1410.388, 1564.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   122264.030 ±(99.9%) 0.059 B/op [Average]
[info]   (min, avg, max) = (122264.021, 122264.030, 122264.057), stdev = 0.015
[info]   CI (99.9%): [122263.971, 122264.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.021 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.075), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.672 ±(99.9%) 9.704 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.672, 6.059), stdev = 2.520
[info]   CI (99.9%): [≈ 0, 11.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1494.363 ±(99.9%) 700.119 MB/sec [Average]
[info]   (min, avg, max) = (1361.362, 1494.363, 1701.848), stdev = 181.819
[info]   CI (99.9%): [794.245, 2194.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   122906.253 ±(99.9%) 59653.553 B/op [Average]
[info]   (min, avg, max) = (110507.313, 122906.253, 140283.289), stdev = 15491.838
[info]   CI (99.9%): [63252.700, 182559.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   55.448 ±(99.9%) 477.423 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 55.448, 277.240), stdev = 123.985
[info]   CI (99.9%): [≈ 0, 532.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 16.000), stdev = 5.495
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala
[info] # Run progress: 8.11% complete, ETA 01:12:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24053.200 ops/s
[info] # Warmup Iteration   2: 38106.310 ops/s
[info] # Warmup Iteration   3: 38930.961 ops/s
[info] Iteration   1: 39313.289 ops/s
[info]                  ·gc.alloc.rate:            969.488 MB/sec
[info]                  ·gc.alloc.rate.norm:       38823.180 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.905 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 40401.644 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 39225.809 ops/s
[info]                  ·gc.alloc.rate:            967.822 MB/sec
[info]                  ·gc.alloc.rate.norm:       38824.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.383 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 40491.235 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 38532.982 ops/s
[info]                  ·gc.alloc.rate:                                  950.482 MB/sec
[info]                  ·gc.alloc.rate.norm:                             38824.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.108 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.429 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.146 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       41383.640 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                163.249 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   4: 38063.198 ops/s
[info]                  ·gc.alloc.rate:                                  938.807 MB/sec
[info]                  ·gc.alloc.rate.norm:                             38824.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.047 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.933 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.681 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       28149.322 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 38221.227 ops/s
[info]                  ·gc.alloc.rate:                                  942.915 MB/sec
[info]                  ·gc.alloc.rate.norm:                             38824.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.037 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.224 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       42048.367 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala":
[info]   38671.301 ±(99.9%) 2204.571 ops/s [Average]
[info]   (min, avg, max) = (38063.198, 38671.301, 39313.289), stdev = 572.520
[info]   CI (99.9%): [36466.730, 40875.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   953.903 ±(99.9%) 54.353 MB/sec [Average]
[info]   (min, avg, max) = (938.807, 953.903, 969.488), stdev = 14.115
[info]   CI (99.9%): [899.550, 1008.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   38823.845 ±(99.9%) 1.430 B/op [Average]
[info]   (min, avg, max) = (38823.180, 38823.845, 38824.011), stdev = 0.371
[info]   CI (99.9%): [38822.415, 38825.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.031 ±(99.9%) 0.183 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.031, 0.108), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.280 ±(99.9%) 7.497 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.280, 4.429), stdev = 1.947
[info]   CI (99.9%): [≈ 0, 8.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   946.668 ±(99.9%) 572.872 MB/sec [Average]
[info]   (min, avg, max) = (680.681, 946.668, 1021.224), stdev = 148.773
[info]   CI (99.9%): [373.796, 1519.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   38494.841 ±(99.9%) 22421.857 B/op [Average]
[info]   (min, avg, max) = (28149.322, 38494.841, 42048.367), stdev = 5822.885
[info]   CI (99.9%): [16072.984, 60916.699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   32.650 ±(99.9%) 281.125 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 32.650, 163.249), stdev = 73.007
[info]   CI (99.9%): [≈ 0, 313.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.600, 12.000), stdev = 4.827
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala
[info] # Run progress: 8.38% complete, ETA 01:12:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 47590.546 ops/s
[info] # Warmup Iteration   2: 53109.502 ops/s
[info] # Warmup Iteration   3: 53576.207 ops/s
[info] Iteration   1: 52739.071 ops/s
[info]                  ·gc.alloc.rate:            681.544 MB/sec
[info]                  ·gc.alloc.rate.norm:       20336.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.222 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 20117.519 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 52787.524 ops/s
[info]                  ·gc.alloc.rate:            682.196 MB/sec
[info]                  ·gc.alloc.rate.norm:       20336.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.379 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 30148.844 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 54053.999 ops/s
[info]                  ·gc.alloc.rate:            698.540 MB/sec
[info]                  ·gc.alloc.rate.norm:       20336.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.226 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19628.191 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 52106.368 ops/s
[info]                  ·gc.alloc.rate:            673.304 MB/sec
[info]                  ·gc.alloc.rate.norm:       20336.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.147 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 20361.480 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 51675.804 ops/s
[info]                  ·gc.alloc.rate:                   667.631 MB/sec
[info]                  ·gc.alloc.rate.norm:              20336.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.055 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        20531.672 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 101.441 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala":
[info]   52672.553 ±(99.9%) 3465.639 ops/s [Average]
[info]   (min, avg, max) = (51675.804, 52672.553, 54053.999), stdev = 900.015
[info]   CI (99.9%): [49206.915, 56138.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   680.643 ±(99.9%) 45.017 MB/sec [Average]
[info]   (min, avg, max) = (667.631, 680.643, 698.540), stdev = 11.691
[info]   CI (99.9%): [635.626, 725.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   20336.008 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (20336.008, 20336.008, 20336.008), stdev = 0.001
[info]   CI (99.9%): [20336.006, 20336.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   741.606 ±(99.9%) 580.707 MB/sec [Average]
[info]   (min, avg, max) = (674.055, 741.606, 1011.379), stdev = 150.808
[info]   CI (99.9%): [160.898, 1322.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   22157.541 ±(99.9%) 17251.734 B/op [Average]
[info]   (min, avg, max) = (19628.191, 22157.541, 30148.844), stdev = 4480.221
[info]   CI (99.9%): [4905.807, 39409.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   20.288 ±(99.9%) 174.688 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 20.288, 101.441), stdev = 45.366
[info]   CI (99.9%): [≈ 0, 194.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 9.000), stdev = 1.643
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson
[info] # Run progress: 8.65% complete, ETA 01:11:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11481.572 ops/s
[info] # Warmup Iteration   2: 28858.687 ops/s
[info] # Warmup Iteration   3: 29072.942 ops/s
[info] Iteration   1: 29299.996 ops/s
[info]                  ·gc.alloc.rate:                                  1957.013 MB/sec
[info]                  ·gc.alloc.rate.norm:                             105128.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.027 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.430 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2033.575 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       109240.830 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                250.470 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        14.000 ms
[info] Iteration   2: 29197.516 ops/s
[info]                  ·gc.alloc.rate:                                  1950.046 MB/sec
[info]                  ·gc.alloc.rate.norm:                             105128.019 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.010 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.528 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.071 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       110089.169 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 29587.292 ops/s
[info]                  ·gc.alloc.rate:                                  1976.218 MB/sec
[info]                  ·gc.alloc.rate.norm:                             105128.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.094 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.205 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       108638.327 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 29001.265 ops/s
[info]                  ·gc.alloc.rate:                                  1937.531 MB/sec
[info]                  ·gc.alloc.rate.norm:                             105128.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.142 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.230 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       92360.867 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 29325.394 ops/s
[info]                  ·gc.alloc.rate:                                  1959.180 MB/sec
[info]                  ·gc.alloc.rate.norm:                             105128.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.422 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.753 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       109612.479 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson":
[info]   29282.292 ±(99.9%) 819.923 ops/s [Average]
[info]   (min, avg, max) = (29001.265, 29282.292, 29587.292), stdev = 212.931
[info]   CI (99.9%): [28462.369, 30102.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1955.997 ±(99.9%) 54.335 MB/sec [Average]
[info]   (min, avg, max) = (1937.531, 1955.997, 1976.218), stdev = 14.111
[info]   CI (99.9%): [1901.662, 2010.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   105128.015 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (105128.014, 105128.015, 105128.019), stdev = 0.002
[info]   CI (99.9%): [105128.007, 105128.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.010 ±(99.9%) 0.039 MB/sec [Average]
[info]   (min, avg, max) = (0.002, 0.010, 0.027), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.523 ±(99.9%) 2.075 B/op [Average]
[info]   (min, avg, max) = (0.094, 0.523, 1.430), stdev = 0.539
[info]   CI (99.9%): [≈ 0, 2.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1972.567 ±(99.9%) 582.105 MB/sec [Average]
[info]   (min, avg, max) = (1702.230, 1972.567, 2042.753), stdev = 151.171
[info]   CI (99.9%): [1390.461, 2554.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   105988.335 ±(99.9%) 29405.177 B/op [Average]
[info]   (min, avg, max) = (92360.867, 105988.335, 110089.169), stdev = 7636.431
[info]   CI (99.9%): [76583.157, 135393.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.663), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   50.094 ±(99.9%) 431.325 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 50.094, 250.470), stdev = 112.014
[info]   CI (99.9%): [≈ 0, 481.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.600, 14.000), stdev = 4.159
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala
[info] # Run progress: 8.92% complete, ETA 01:11:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16750.012 ops/s
[info] # Warmup Iteration   2: 32639.398 ops/s
[info] # Warmup Iteration   3: 31891.374 ops/s
[info] Iteration   1: 32369.987 ops/s
[info]                  ·gc.alloc.rate:                                  1770.429 MB/sec
[info]                  ·gc.alloc.rate.norm:                             86072.017 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.059 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.848 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1693.436 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       82328.892 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                226.712 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   2: 33172.726 ops/s
[info]                  ·gc.alloc.rate:                                  1814.274 MB/sec
[info]                  ·gc.alloc.rate.norm:                             86072.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.135 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.035 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       80747.210 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 32470.256 ops/s
[info]                  ·gc.alloc.rate:                                  1776.121 MB/sec
[info]                  ·gc.alloc.rate.norm:                             86072.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.086 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.773 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       98994.150 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 33435.175 ops/s
[info]                  ·gc.alloc.rate:                                  1828.297 MB/sec
[info]                  ·gc.alloc.rate.norm:                             86072.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.072 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.702 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       80112.185 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 33228.903 ops/s
[info]                  ·gc.alloc.rate:                                  1816.857 MB/sec
[info]                  ·gc.alloc.rate.norm:                             86072.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.032 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.586 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       80611.153 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala":
[info]   32935.410 ±(99.9%) 1855.009 ops/s [Average]
[info]   (min, avg, max) = (32369.987, 32935.410, 33435.175), stdev = 481.740
[info]   CI (99.9%): [31080.400, 34790.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1801.196 ±(99.9%) 100.527 MB/sec [Average]
[info]   (min, avg, max) = (1770.429, 1801.196, 1828.297), stdev = 26.107
[info]   CI (99.9%): [1700.669, 1901.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   86072.013 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (86072.012, 86072.013, 86072.017), stdev = 0.002
[info]   CI (99.9%): [86072.006, 86072.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.013 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.013, 0.059), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.634 ±(99.9%) 4.767 B/op [Average]
[info]   (min, avg, max) = (0.032, 0.634, 2.848), stdev = 1.238
[info]   CI (99.9%): [≈ 0, 5.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1768.306 ±(99.9%) 590.974 MB/sec [Average]
[info]   (min, avg, max) = (1693.436, 1768.306, 2042.773), stdev = 153.474
[info]   CI (99.9%): [1177.333, 2359.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   84558.718 ±(99.9%) 31237.501 B/op [Average]
[info]   (min, avg, max) = (80112.185, 84558.718, 98994.150), stdev = 8112.280
[info]   CI (99.9%): [53321.216, 115796.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.030 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.663), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   45.342 ±(99.9%) 390.412 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 45.342, 226.712), stdev = 101.389
[info]   CI (99.9%): [≈ 0, 435.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 12.000), stdev = 3.493
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala
[info] # Run progress: 9.19% complete, ETA 01:11:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37545.318 ops/s
[info] # Warmup Iteration   2: 44105.827 ops/s
[info] # Warmup Iteration   3: 44532.065 ops/s
[info] Iteration   1: 44423.017 ops/s
[info]                  ·gc.alloc.rate:                                  1707.002 MB/sec
[info]                  ·gc.alloc.rate.norm:                             60480.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.047 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.667 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1693.917 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       60016.403 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                141.604 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   2: 45125.988 ops/s
[info]                  ·gc.alloc.rate:                                  1733.989 MB/sec
[info]                  ·gc.alloc.rate.norm:                             60480.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.071 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.850 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       59359.057 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 45221.943 ops/s
[info]                  ·gc.alloc.rate:            1738.005 MB/sec
[info]                  ·gc.alloc.rate.norm:       60480.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1702.172 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 59233.068 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 45015.624 ops/s
[info]                  ·gc.alloc.rate:                                  1729.665 MB/sec
[info]                  ·gc.alloc.rate.norm:                             60480.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.868 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       59508.045 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 45181.269 ops/s
[info]                  ·gc.alloc.rate:                                  1736.273 MB/sec
[info]                  ·gc.alloc.rate.norm:                             60480.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.091 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.056 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       59288.123 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala":
[info]   44993.568 ±(99.9%) 1263.893 ops/s [Average]
[info]   (min, avg, max) = (44423.017, 44993.568, 45221.943), stdev = 328.229
[info]   CI (99.9%): [43729.676, 46257.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1728.987 ±(99.9%) 48.830 MB/sec [Average]
[info]   (min, avg, max) = (1707.002, 1728.987, 1738.005), stdev = 12.681
[info]   CI (99.9%): [1680.157, 1777.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   60480.009 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (60480.009, 60480.009, 60480.010), stdev = 0.001
[info]   CI (99.9%): [60480.008, 60480.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.010 ±(99.9%) 0.079 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.047), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.370 ±(99.9%) 2.795 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.370, 1.667), stdev = 0.726
[info]   CI (99.9%): [≈ 0, 3.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1700.373 ±(99.9%) 13.906 MB/sec [Average]
[info]   (min, avg, max) = (1693.917, 1700.373, 1702.172), stdev = 3.611
[info]   CI (99.9%): [1686.467, 1714.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   59480.939 ±(99.9%) 1219.094 B/op [Average]
[info]   (min, avg, max) = (59233.068, 59480.939, 60016.403), stdev = 316.595
[info]   CI (99.9%): [58261.845, 60700.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   28.321 ±(99.9%) 243.850 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 28.321, 141.604), stdev = 63.327
[info]   CI (99.9%): [≈ 0, 272.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 9.000), stdev = 2.387
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 9.46% complete, ETA 01:11:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37716.955 ops/s
[info] # Warmup Iteration   2: 44595.064 ops/s
[info] # Warmup Iteration   3: 45037.095 ops/s
[info] Iteration   1: 45178.986 ops/s
[info]                  ·gc.alloc.rate:                                  1657.033 MB/sec
[info]                  ·gc.alloc.rate.norm:                             57736.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.156 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.433 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1690.257 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       58893.642 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                139.228 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   2: 45492.516 ops/s
[info]                  ·gc.alloc.rate:                                  1669.080 MB/sec
[info]                  ·gc.alloc.rate.norm:                             57736.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.194 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.160 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       58880.281 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 45364.332 ops/s
[info]                  ·gc.alloc.rate:            1663.906 MB/sec
[info]                  ·gc.alloc.rate.norm:       57736.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.708 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 59047.688 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 45387.050 ops/s
[info]                  ·gc.alloc.rate:            1664.688 MB/sec
[info]                  ·gc.alloc.rate.norm:       57736.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.570 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 59015.170 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 45525.223 ops/s
[info]                  ·gc.alloc.rate:                                  1669.771 MB/sec
[info]                  ·gc.alloc.rate.norm:                             57736.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.045 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.630 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       58837.609 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   45389.621 ±(99.9%) 523.704 ops/s [Average]
[info]   (min, avg, max) = (45178.986, 45389.621, 45525.223), stdev = 136.004
[info]   CI (99.9%): [44865.917, 45913.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1664.896 ±(99.9%) 19.646 MB/sec [Average]
[info]   (min, avg, max) = (1657.033, 1664.896, 1669.771), stdev = 5.102
[info]   CI (99.9%): [1645.249, 1684.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   57736.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (57736.009, 57736.009, 57736.009), stdev = 0.001
[info]   CI (99.9%): [57736.009, 57736.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.033 ±(99.9%) 0.266 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.156), stdev = 0.069
[info]   CI (99.9%): [≈ 0, 0.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.134 ±(99.9%) 9.257 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.134, 5.433), stdev = 2.404
[info]   CI (99.9%): [≈ 0, 10.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   1699.465 ±(99.9%) 19.841 MB/sec [Average]
[info]   (min, avg, max) = (1690.257, 1699.465, 1702.160), stdev = 5.153
[info]   CI (99.9%): [1679.624, 1719.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   58934.878 ±(99.9%) 351.419 B/op [Average]
[info]   (min, avg, max) = (58837.609, 58934.878, 59047.688), stdev = 91.262
[info]   CI (99.9%): [58583.459, 59286.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm":
[info]   27.846 ±(99.9%) 239.760 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 27.846, 139.228), stdev = 62.265
[info]   CI (99.9%): [≈ 0, 267.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 10.000), stdev = 2.683
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce
[info] # Run progress: 9.73% complete, ETA 01:11:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 304074.021 ops/s
[info] # Warmup Iteration   2: 376123.164 ops/s
[info] # Warmup Iteration   3: 376932.843 ops/s
[info] Iteration   1: 376042.948 ops/s
[info]                  ·gc.alloc.rate:                                  1892.050 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7920.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.096 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.404 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2038.722 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8533.961 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                13.940 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   2: 382287.100 ops/s
[info]                  ·gc.alloc.rate:            1923.606 MB/sec
[info]                  ·gc.alloc.rate.norm:       7920.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2042.243 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8408.464 B/op
[info]                  ·gc.count:                 6.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 385159.087 ops/s
[info]                  ·gc.alloc.rate:                                  1937.887 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7920.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.647 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6954.505 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 383258.397 ops/s
[info]                  ·gc.alloc.rate:                                  1929.019 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7920.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.023 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.824 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8387.251 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 384157.261 ops/s
[info]                  ·gc.alloc.rate:                                  1933.467 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7920.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.738 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8367.604 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce":
[info]   382180.959 ±(99.9%) 13833.185 ops/s [Average]
[info]   (min, avg, max) = (376042.948, 382180.959, 385159.087), stdev = 3592.434
[info]   CI (99.9%): [368347.774, 396014.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1923.206 ±(99.9%) 70.096 MB/sec [Average]
[info]   (min, avg, max) = (1892.050, 1923.206, 1937.887), stdev = 18.204
[info]   CI (99.9%): [1853.110, 1993.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   7920.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7920.001, 7920.001, 7920.001), stdev = 0.001
[info]   CI (99.9%): [7920.001, 7920.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.021 ±(99.9%) 0.163 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.096), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.088 ±(99.9%) 0.681 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.088, 0.404), stdev = 0.177
[info]   CI (99.9%): [≈ 0, 0.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1973.635 ±(99.9%) 585.511 MB/sec [Average]
[info]   (min, avg, max) = (1701.647, 1973.635, 2042.824), stdev = 152.055
[info]   CI (99.9%): [1388.124, 2559.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   8130.357 ±(99.9%) 2543.429 B/op [Average]
[info]   (min, avg, max) = (6954.505, 8130.357, 8533.961), stdev = 660.520
[info]   CI (99.9%): [5586.928, 10673.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   2.788 ±(99.9%) 24.005 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.788, 13.940), stdev = 6.234
[info]   CI (99.9%): [≈ 0, 26.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 7.000), stdev = 1.225
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava
[info] # Run progress: 10.00% complete, ETA 01:10:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 88488.530 ops/s
[info] # Warmup Iteration   2: 1548566.651 ops/s
[info] # Warmup Iteration   3: 1539529.606 ops/s
[info] Iteration   1: 1553866.394 ops/s
[info]                  ·gc.alloc.rate:            489.701 MB/sec
[info]                  ·gc.alloc.rate.norm:       496.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.727 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 338.020 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 1545654.982 ops/s
[info]                  ·gc.alloc.rate:            487.102 MB/sec
[info]                  ·gc.alloc.rate.norm:       496.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.463 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 679.655 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 1551632.269 ops/s
[info]                  ·gc.alloc.rate:                   488.931 MB/sec
[info]                  ·gc.alloc.rate.norm:              496.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             333.021 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        337.836 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.676 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 1553947.377 ops/s
[info]                  ·gc.alloc.rate:            489.673 MB/sec
[info]                  ·gc.alloc.rate.norm:       496.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.696 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 338.007 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 1535045.292 ops/s
[info]                  ·gc.alloc.rate:            483.730 MB/sec
[info]                  ·gc.alloc.rate.norm:       496.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.411 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 684.342 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava":
[info]   1548029.263 ±(99.9%) 30823.109 ops/s [Average]
[info]   (min, avg, max) = (1535045.292, 1548029.263, 1553947.377), stdev = 8004.663
[info]   CI (99.9%): [1517206.154, 1578852.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   487.827 ±(99.9%) 9.713 MB/sec [Average]
[info]   (min, avg, max) = (483.730, 487.827, 489.701), stdev = 2.522
[info]   CI (99.9%): [478.114, 497.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   496.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (496.000, 496.000, 496.000), stdev = 0.001
[info]   CI (99.9%): [496.000, 496.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   467.064 ±(99.9%) 704.342 MB/sec [Average]
[info]   (min, avg, max) = (333.021, 467.064, 667.463), stdev = 182.915
[info]   CI (99.9%): [≈ 0, 1171.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   475.572 ±(99.9%) 725.646 B/op [Average]
[info]   (min, avg, max) = (337.836, 475.572, 684.342), stdev = 188.448
[info]   CI (99.9%): [≈ 0, 1201.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.135 ±(99.9%) 1.164 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.135, 0.676), stdev = 0.302
[info]   CI (99.9%): [≈ 0, 1.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.600, 10.000), stdev = 2.702
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala
[info] # Run progress: 10.27% complete, ETA 01:10:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 352216.848 ops/s
[info] # Warmup Iteration   2: 587243.453 ops/s
[info] # Warmup Iteration   3: 591405.034 ops/s
[info] Iteration   1: 585968.059 ops/s
[info]                  ·gc.alloc.rate:            497.351 MB/sec
[info]                  ·gc.alloc.rate.norm:       1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.704 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1807.038 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 596029.624 ops/s
[info]                  ·gc.alloc.rate:            505.904 MB/sec
[info]                  ·gc.alloc.rate.norm:       1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.367 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 888.285 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 592660.984 ops/s
[info]                  ·gc.alloc.rate:            503.171 MB/sec
[info]                  ·gc.alloc.rate.norm:       1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.913 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1786.695 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 595943.799 ops/s
[info]                  ·gc.alloc.rate:            505.860 MB/sec
[info]                  ·gc.alloc.rate.norm:       1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.390 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 888.424 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 588550.787 ops/s
[info]                  ·gc.alloc.rate:            499.494 MB/sec
[info]                  ·gc.alloc.rate.norm:       1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.670 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1799.195 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala":
[info]   591830.650 ±(99.9%) 17259.983 ops/s [Average]
[info]   (min, avg, max) = (585968.059, 591830.650, 596029.624), stdev = 4482.363
[info]   CI (99.9%): [574570.668, 609090.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   502.356 ±(99.9%) 14.759 MB/sec [Average]
[info]   (min, avg, max) = (497.351, 502.356, 505.904), stdev = 3.833
[info]   CI (99.9%): [487.597, 517.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1336.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1336.001, 1336.001, 1336.001), stdev = 0.001
[info]   CI (99.9%): [1336.001, 1336.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   538.209 ±(99.9%) 709.461 MB/sec [Average]
[info]   (min, avg, max) = (336.367, 538.209, 672.913), stdev = 184.245
[info]   CI (99.9%): [≈ 0, 1247.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1433.927 ±(99.9%) 1917.969 B/op [Average]
[info]   (min, avg, max) = (888.285, 1433.927, 1807.038), stdev = 498.090
[info]   CI (99.9%): [≈ 0, 3351.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 8.000), stdev = 2.191
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala
[info] # Run progress: 10.54% complete, ETA 01:10:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1646205.194 ops/s
[info] # Warmup Iteration   2: 1699114.605 ops/s
[info] # Warmup Iteration   3: 1645334.620 ops/s
[info] Iteration   1: 1734247.553 ops/s
[info]                  ·gc.alloc.rate:            334.963 MB/sec
[info]                  ·gc.alloc.rate.norm:       304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.064 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 305.907 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 1728439.793 ops/s
[info]                  ·gc.alloc.rate:            333.781 MB/sec
[info]                  ·gc.alloc.rate.norm:       304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.994 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 306.927 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 1721689.979 ops/s
[info]                  ·gc.alloc.rate:            332.482 MB/sec
[info]                  ·gc.alloc.rate.norm:       304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.976 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 308.109 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 1728098.032 ops/s
[info]                  ·gc.alloc.rate:            333.881 MB/sec
[info]                  ·gc.alloc.rate.norm:       304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.148 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 306.975 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 1723425.482 ops/s
[info]                  ·gc.alloc.rate:            332.941 MB/sec
[info]                  ·gc.alloc.rate.norm:       304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.113 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 307.810 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala":
[info]   1727180.168 ±(99.9%) 18924.740 ops/s [Average]
[info]   (min, avg, max) = (1721689.979, 1727180.168, 1734247.553), stdev = 4914.695
[info]   CI (99.9%): [1708255.428, 1746104.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   333.610 ±(99.9%) 3.680 MB/sec [Average]
[info]   (min, avg, max) = (332.482, 333.610, 334.963), stdev = 0.956
[info]   CI (99.9%): [329.930, 337.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   304.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (304.000, 304.000, 304.000), stdev = 0.001
[info]   CI (99.9%): [304.000, 304.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   337.059 ±(99.9%) 0.285 MB/sec [Average]
[info]   (min, avg, max) = (336.976, 337.059, 337.148), stdev = 0.074
[info]   CI (99.9%): [336.774, 337.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   307.145 ±(99.9%) 3.324 B/op [Average]
[info]   (min, avg, max) = (305.907, 307.145, 308.109), stdev = 0.863
[info]   CI (99.9%): [303.821, 310.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson
[info] # Run progress: 10.81% complete, ETA 01:10:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 51259.249 ops/s
[info] # Warmup Iteration   2: 87645.925 ops/s
[info] # Warmup Iteration   3: 90738.702 ops/s
[info] Iteration   1: 90371.719 ops/s
[info]                  ·gc.alloc.rate:                                  3283.527 MB/sec
[info]                  ·gc.alloc.rate.norm:                             57176.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.039 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3404.296 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       59278.940 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   2: 92016.461 ops/s
[info]                  ·gc.alloc.rate:                                  3342.143 MB/sec
[info]                  ·gc.alloc.rate.norm:                             57176.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.132 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.244 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       58221.307 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 91365.251 ops/s
[info]                  ·gc.alloc.rate:                                  3319.294 MB/sec
[info]                  ·gc.alloc.rate.norm:                             57176.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.023 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3404.094 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       58636.719 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   4: 89807.269 ops/s
[info]                  ·gc.alloc.rate:                                  3263.118 MB/sec
[info]                  ·gc.alloc.rate.norm:                             57176.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.069 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3064.042 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       53687.820 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 90995.298 ops/s
[info]                  ·gc.alloc.rate:                                  3305.215 MB/sec
[info]                  ·gc.alloc.rate.norm:                             57176.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.023 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.436 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       58875.106 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson":
[info]   90911.199 ±(99.9%) 3303.787 ops/s [Average]
[info]   (min, avg, max) = (89807.269, 90911.199, 92016.461), stdev = 857.983
[info]   CI (99.9%): [87607.412, 94214.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3302.659 ±(99.9%) 118.242 MB/sec [Average]
[info]   (min, avg, max) = (3263.118, 3302.659, 3342.143), stdev = 30.707
[info]   CI (99.9%): [3184.417, 3420.901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   57176.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (57176.004, 57176.005, 57176.005), stdev = 0.001
[info]   CI (99.9%): [57176.004, 57176.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.003 ±(99.9%) 0.010 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.003, 0.008), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.057 ±(99.9%) 0.176 B/op [Average]
[info]   (min, avg, max) = (0.023, 0.057, 0.132), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   3335.822 ±(99.9%) 585.030 MB/sec [Average]
[info]   (min, avg, max) = (3064.042, 3335.822, 3404.296), stdev = 151.930
[info]   CI (99.9%): [2750.793, 3920.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   57739.978 ±(99.9%) 8846.583 B/op [Average]
[info]   (min, avg, max) = (53687.820, 57739.978, 59278.940), stdev = 2297.429
[info]   CI (99.9%): [48893.396, 66586.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   49.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.800, 10.000), stdev = 0.447
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.400, 8.000), stdev = 0.548
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce
[info] # Run progress: 11.08% complete, ETA 01:10:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 237948.459 ops/s
[info] # Warmup Iteration   2: 303001.164 ops/s
[info] # Warmup Iteration   3: 306803.329 ops/s
[info] Iteration   1: 307856.459 ops/s
[info]                  ·gc.alloc.rate:            474.168 MB/sec
[info]                  ·gc.alloc.rate.norm:       2424.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.160 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3446.384 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 308427.353 ops/s
[info]                  ·gc.alloc.rate:            475.001 MB/sec
[info]                  ·gc.alloc.rate.norm:       2424.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.046 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1719.997 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 308163.498 ops/s
[info]                  ·gc.alloc.rate:            474.564 MB/sec
[info]                  ·gc.alloc.rate.norm:       2424.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.052 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3442.951 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 309828.110 ops/s
[info]                  ·gc.alloc.rate:            477.318 MB/sec
[info]                  ·gc.alloc.rate.norm:       2424.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.151 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1712.182 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 310507.074 ops/s
[info]                  ·gc.alloc.rate:            478.161 MB/sec
[info]                  ·gc.alloc.rate.norm:       2424.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.032 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3416.954 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce":
[info]   308956.499 ±(99.9%) 4425.277 ops/s [Average]
[info]   (min, avg, max) = (307856.459, 308956.499, 310507.074), stdev = 1149.230
[info]   CI (99.9%): [304531.221, 313381.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   475.843 ±(99.9%) 6.861 MB/sec [Average]
[info]   (min, avg, max) = (474.168, 475.843, 478.161), stdev = 1.782
[info]   CI (99.9%): [468.981, 482.704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2424.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2424.001, 2424.001, 2424.001), stdev = 0.001
[info]   CI (99.9%): [2424.001, 2424.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   539.288 ±(99.9%) 710.725 MB/sec [Average]
[info]   (min, avg, max) = (337.046, 539.288, 674.160), stdev = 184.573
[info]   CI (99.9%): [≈ 0, 1250.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2747.694 ±(99.9%) 3626.515 B/op [Average]
[info]   (min, avg, max) = (1712.182, 2747.694, 3446.384), stdev = 941.794
[info]   CI (99.9%): [≈ 0, 6374.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 1.643
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava
[info] # Run progress: 11.35% complete, ETA 01:09:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30739.979 ops/s
[info] # Warmup Iteration   2: 1168225.726 ops/s
[info] # Warmup Iteration   3: 1178157.700 ops/s
[info] Iteration   1: 1210995.907 ops/s
[info]                  ·gc.alloc.rate:            560.266 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.624 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 867.500 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 1233335.542 ops/s
[info]                  ·gc.alloc.rate:            570.362 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.670 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 425.891 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 1232587.408 ops/s
[info]                  ·gc.alloc.rate:            570.173 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.507 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 852.277 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 1198389.203 ops/s
[info]                  ·gc.alloc.rate:            554.271 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.409 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 876.600 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 1223770.539 ops/s
[info]                  ·gc.alloc.rate:                   565.993 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             333.037 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        428.364 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.857 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava":
[info]   1219815.720 ±(99.9%) 57709.159 ops/s [Average]
[info]   (min, avg, max) = (1198389.203, 1219815.720, 1233335.542), stdev = 14986.885
[info]   CI (99.9%): [1162106.561, 1277524.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   564.213 ±(99.9%) 26.602 MB/sec [Average]
[info]   (min, avg, max) = (554.271, 564.213, 570.362), stdev = 6.909
[info]   CI (99.9%): [537.611, 590.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   728.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (728.000, 728.000, 728.000), stdev = 0.001
[info]   CI (99.9%): [728.000, 728.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   533.849 ±(99.9%) 704.772 MB/sec [Average]
[info]   (min, avg, max) = (333.037, 533.849, 667.624), stdev = 183.027
[info]   CI (99.9%): [≈ 0, 1238.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   690.126 ±(99.9%) 925.090 B/op [Average]
[info]   (min, avg, max) = (425.891, 690.126, 876.600), stdev = 240.243
[info]   CI (99.9%): [≈ 0, 1615.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.171 ±(99.9%) 1.475 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.171, 0.857), stdev = 0.383
[info]   CI (99.9%): [≈ 0, 1.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.400, 9.000), stdev = 2.191
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala
[info] # Run progress: 11.62% complete, ETA 01:09:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 623368.339 ops/s
[info] # Warmup Iteration   2: 934128.407 ops/s
[info] # Warmup Iteration   3: 969607.934 ops/s
[info] Iteration   1: 977841.717 ops/s
[info]                  ·gc.alloc.rate:            690.766 MB/sec
[info]                  ·gc.alloc.rate.norm:       1112.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.706 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1082.927 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 968965.221 ops/s
[info]                  ·gc.alloc.rate:                   684.698 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             671.580 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1090.695 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.082 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 987413.881 ops/s
[info]                  ·gc.alloc.rate:            697.527 MB/sec
[info]                  ·gc.alloc.rate.norm:       1112.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.670 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1072.374 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 986969.865 ops/s
[info]                  ·gc.alloc.rate:            697.182 MB/sec
[info]                  ·gc.alloc.rate.norm:       1112.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.641 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1072.858 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 982217.612 ops/s
[info]                  ·gc.alloc.rate:                   693.862 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.682 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1078.056 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 6.404 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala":
[info]   980681.659 ±(99.9%) 29361.235 ops/s [Average]
[info]   (min, avg, max) = (968965.221, 980681.659, 987413.881), stdev = 7625.020
[info]   CI (99.9%): [951320.424, 1010042.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   692.807 ±(99.9%) 20.417 MB/sec [Average]
[info]   (min, avg, max) = (684.698, 692.807, 697.527), stdev = 5.302
[info]   CI (99.9%): [672.390, 713.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1112.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1112.000, 1112.000, 1112.000), stdev = 0.001
[info]   CI (99.9%): [1112.000, 1112.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   672.456 ±(99.9%) 1.888 MB/sec [Average]
[info]   (min, avg, max) = (671.580, 672.456, 672.706), stdev = 0.490
[info]   CI (99.9%): [670.568, 674.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1079.382 ±(99.9%) 29.452 B/op [Average]
[info]   (min, avg, max) = (1072.374, 1079.382, 1090.695), stdev = 7.648
[info]   CI (99.9%): [1049.930, 1108.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.497 ±(99.9%) 10.716 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.497, 6.404), stdev = 2.783
[info]   CI (99.9%): [≈ 0, 12.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.200, 9.000), stdev = 0.447
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala
[info] # Run progress: 11.89% complete, ETA 01:09:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2185418.216 ops/s
[info] # Warmup Iteration   2: 2434527.636 ops/s
[info] # Warmup Iteration   3: 2453071.497 ops/s
[info] Iteration   1: 2458975.987 ops/s
[info]                  ·gc.alloc.rate:                   1137.237 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1347.298 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        862.470 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.426 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 2460403.134 ops/s
[info]                  ·gc.alloc.rate:                   1138.221 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1011.324 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        646.837 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.131 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 2442594.886 ops/s
[info]                  ·gc.alloc.rate:                                  1129.668 MB/sec
[info]                  ·gc.alloc.rate.norm:                             728.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.160 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.103 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.065 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       658.012 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 2463685.974 ops/s
[info]                  ·gc.alloc.rate:                                  1139.374 MB/sec
[info]                  ·gc.alloc.rate.norm:                             728.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.329 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       869.818 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 2448214.552 ops/s
[info]                  ·gc.alloc.rate:            1132.212 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.981 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 656.480 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala":
[info]   2454774.907 ±(99.9%) 34447.894 ops/s [Average]
[info]   (min, avg, max) = (2442594.886, 2454774.907, 2463685.974), stdev = 8946.009
[info]   CI (99.9%): [2420327.012, 2489222.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1135.343 ±(99.9%) 16.123 MB/sec [Average]
[info]   (min, avg, max) = (1129.668, 1135.343, 1139.374), stdev = 4.187
[info]   CI (99.9%): [1119.219, 1151.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   728.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (728.000, 728.000, 728.000), stdev = 0.001
[info]   CI (99.9%): [728.000, 728.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.033 ±(99.9%) 0.274 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.160), stdev = 0.071
[info]   CI (99.9%): [≈ 0, 0.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.021 ±(99.9%) 0.177 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.103), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1152.399 ±(99.9%) 710.177 MB/sec [Average]
[info]   (min, avg, max) = (1011.324, 1152.399, 1361.329), stdev = 184.431
[info]   CI (99.9%): [442.222, 1862.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   738.723 ±(99.9%) 448.316 B/op [Average]
[info]   (min, avg, max) = (646.837, 738.723, 869.818), stdev = 116.426
[info]   CI (99.9%): [290.407, 1187.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.562 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.331), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.511 ±(99.9%) 3.557 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.511, 2.131), stdev = 0.924
[info]   CI (99.9%): [≈ 0, 4.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.800, 12.000), stdev = 4.438
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 12.16% complete, ETA 01:09:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1811892.146 ops/s
[info] # Warmup Iteration   2: 1973609.966 ops/s
[info] # Warmup Iteration   3: 1985150.074 ops/s
[info] Iteration   1: 1980464.498 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1986706.219 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1983778.013 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1937384.863 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1939663.857 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   1965599.490 ±(99.9%) 95602.335 ops/s [Average]
[info]   (min, avg, max) = (1937384.863, 1965599.490, 1986706.219), stdev = 24827.623
[info]   CI (99.9%): [1869997.155, 2061201.825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson
[info] # Run progress: 12.43% complete, ETA 01:09:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 299735.673 ops/s
[info] # Warmup Iteration   2: 406053.254 ops/s
[info] # Warmup Iteration   3: 410202.149 ops/s
[info] Iteration   1: 413761.322 ops/s
[info]                  ·gc.alloc.rate:            483.654 MB/sec
[info]                  ·gc.alloc.rate.norm:       1840.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.671 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2559.091 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 415311.407 ops/s
[info]                  ·gc.alloc.rate:            485.454 MB/sec
[info]                  ·gc.alloc.rate.norm:       1840.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.353 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1274.866 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 412264.261 ops/s
[info]                  ·gc.alloc.rate:            481.960 MB/sec
[info]                  ·gc.alloc.rate.norm:       1840.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.775 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2568.487 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 397261.868 ops/s
[info]                  ·gc.alloc.rate:            464.373 MB/sec
[info]                  ·gc.alloc.rate.norm:       1840.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.345 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1332.710 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 395419.582 ops/s
[info]                  ·gc.alloc.rate:            462.208 MB/sec
[info]                  ·gc.alloc.rate.norm:       1840.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.673 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2677.840 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson":
[info]   406803.688 ±(99.9%) 37096.912 ops/s [Average]
[info]   (min, avg, max) = (395419.582, 406803.688, 415311.407), stdev = 9633.950
[info]   CI (99.9%): [369706.776, 443900.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   475.530 ±(99.9%) 43.385 MB/sec [Average]
[info]   (min, avg, max) = (462.208, 475.530, 485.454), stdev = 11.267
[info]   CI (99.9%): [432.145, 518.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1840.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1840.001, 1840.001, 1840.001), stdev = 0.001
[info]   CI (99.9%): [1840.001, 1840.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   538.163 ±(99.9%) 709.407 MB/sec [Average]
[info]   (min, avg, max) = (336.345, 538.163, 672.775), stdev = 184.231
[info]   CI (99.9%): [≈ 0, 1247.570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   2082.599 ±(99.9%) 2744.655 B/op [Average]
[info]   (min, avg, max) = (1274.866, 2082.599, 2677.840), stdev = 712.778
[info]   CI (99.9%): [≈ 0, 4827.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 8.000), stdev = 2.049
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce
[info] # Run progress: 12.70% complete, ETA 01:08:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 138439.872 ops/s
[info] # Warmup Iteration   2: 164389.491 ops/s
[info] # Warmup Iteration   3: 165470.582 ops/s
[info] Iteration   1: 165181.491 ops/s
[info]                  ·gc.alloc.rate:                                  1982.650 MB/sec
[info]                  ·gc.alloc.rate.norm:                             18896.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.180 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.715 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.904 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       19460.742 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 165549.074 ops/s
[info]                  ·gc.alloc.rate:                                  1988.002 MB/sec
[info]                  ·gc.alloc.rate.norm:                             18896.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.047 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.768 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       19416.549 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 168668.728 ops/s
[info]                  ·gc.alloc.rate:                                  2025.669 MB/sec
[info]                  ·gc.alloc.rate.norm:                             18896.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.029 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.964 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       19057.333 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 168084.497 ops/s
[info]                  ·gc.alloc.rate:                                  2017.792 MB/sec
[info]                  ·gc.alloc.rate.norm:                             18896.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.053 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.173 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       19124.332 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 166788.995 ops/s
[info]                  ·gc.alloc.rate:                                  2001.988 MB/sec
[info]                  ·gc.alloc.rate.norm:                             18896.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.025 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.798 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       19271.758 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce":
[info]   166854.557 ±(99.9%) 5875.136 ops/s [Average]
[info]   (min, avg, max) = (165181.491, 166854.557, 168668.728), stdev = 1525.754
[info]   CI (99.9%): [160979.421, 172729.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate":
[info]   2003.220 ±(99.9%) 71.328 MB/sec [Average]
[info]   (min, avg, max) = (1982.650, 2003.220, 2025.669), stdev = 18.524
[info]   CI (99.9%): [1931.892, 2074.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   18896.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (18896.002, 18896.002, 18896.003), stdev = 0.001
[info]   CI (99.9%): [18896.002, 18896.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.039 ±(99.9%) 0.303 MB/sec [Average]
[info]   (min, avg, max) = (0.003, 0.039, 0.180), stdev = 0.079
[info]   CI (99.9%): [≈ 0, 0.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.374 ±(99.9%) 2.886 B/op [Average]
[info]   (min, avg, max) = (0.025, 0.374, 1.715), stdev = 0.750
[info]   CI (99.9%): [≈ 0, 3.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2042.321 ±(99.9%) 2.002 MB/sec [Average]
[info]   (min, avg, max) = (2041.798, 2042.321, 2042.964), stdev = 0.520
[info]   CI (99.9%): [2040.319, 2044.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   19266.143 ±(99.9%) 678.616 B/op [Average]
[info]   (min, avg, max) = (19057.333, 19266.143, 19460.742), stdev = 176.234
[info]   CI (99.9%): [18587.527, 19944.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala
[info] # Run progress: 12.97% complete, ETA 01:08:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 243594.403 ops/s
[info] # Warmup Iteration   2: 370629.932 ops/s
[info] # Warmup Iteration   3: 356423.692 ops/s
[info] Iteration   1: 370300.764 ops/s
[info]                  ·gc.alloc.rate:            314.289 MB/sec
[info]                  ·gc.alloc.rate.norm:       1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.338 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1429.731 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 371257.126 ops/s
[info]                  ·gc.alloc.rate:            315.091 MB/sec
[info]                  ·gc.alloc.rate.norm:       1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.346 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1426.123 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 369954.083 ops/s
[info]                  ·gc.alloc.rate:            313.974 MB/sec
[info]                  ·gc.alloc.rate.norm:       1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.333 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1431.141 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 370593.740 ops/s
[info]                  ·gc.alloc.rate:            314.511 MB/sec
[info]                  ·gc.alloc.rate.norm:       1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.327 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1428.674 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 370234.959 ops/s
[info]                  ·gc.alloc.rate:            314.332 MB/sec
[info]                  ·gc.alloc.rate.norm:       1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.461 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1430.059 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala":
[info]   370468.134 ±(99.9%) 1910.747 ops/s [Average]
[info]   (min, avg, max) = (369954.083, 370468.134, 371257.126), stdev = 496.215
[info]   CI (99.9%): [368557.388, 372378.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   314.439 ±(99.9%) 1.589 MB/sec [Average]
[info]   (min, avg, max) = (313.974, 314.439, 315.091), stdev = 0.413
[info]   CI (99.9%): [312.850, 316.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1336.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1336.001, 1336.001, 1336.001), stdev = 0.001
[info]   CI (99.9%): [1336.001, 1336.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   336.361 ±(99.9%) 0.218 MB/sec [Average]
[info]   (min, avg, max) = (336.327, 336.361, 336.461), stdev = 0.057
[info]   CI (99.9%): [336.143, 336.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1429.146 ±(99.9%) 7.336 B/op [Average]
[info]   (min, avg, max) = (1426.123, 1429.146, 1431.141), stdev = 1.905
[info]   CI (99.9%): [1421.810, 1436.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala
[info] # Run progress: 13.24% complete, ETA 01:08:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 804797.110 ops/s
[info] # Warmup Iteration   2: 842000.088 ops/s
[info] # Warmup Iteration   3: 832642.728 ops/s
[info] Iteration   1: 840312.942 ops/s
[info]                  ·gc.alloc.rate:      162.346 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 843192.018 ops/s
[info]                  ·gc.alloc.rate:            162.832 MB/sec
[info]                  ·gc.alloc.rate.norm:       304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.992 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 629.150 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 846515.481 ops/s
[info]                  ·gc.alloc.rate:      163.472 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 816868.844 ops/s
[info]                  ·gc.alloc.rate:            157.763 MB/sec
[info]                  ·gc.alloc.rate.norm:       304.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.013 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 649.404 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 813437.002 ops/s
[info]                  ·gc.alloc.rate:      157.122 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala":
[info]   832065.257 ±(99.9%) 60228.458 ops/s [Average]
[info]   (min, avg, max) = (813437.002, 832065.257, 846515.481), stdev = 15641.139
[info]   CI (99.9%): [771836.800, 892293.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   160.707 ±(99.9%) 11.611 MB/sec [Average]
[info]   (min, avg, max) = (157.122, 160.707, 163.472), stdev = 3.015
[info]   CI (99.9%): [149.096, 172.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   304.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (304.000, 304.001, 304.001), stdev = 0.001
[info]   CI (99.9%): [304.000, 304.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   134.801 ±(99.9%) 710.766 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 134.801, 337.013), stdev = 184.584
[info]   CI (99.9%): [≈ 0, 845.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   255.711 ±(99.9%) 1348.572 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 255.711, 649.404), stdev = 350.220
[info]   CI (99.9%): [≈ 0, 1604.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.643
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson
[info] # Run progress: 13.51% complete, ETA 01:08:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 41118.146 ops/s
[info] # Warmup Iteration   2: 73370.147 ops/s
[info] # Warmup Iteration   3: 76658.556 ops/s
[info] Iteration   1: 78353.535 ops/s
[info]                  ·gc.alloc.rate:                                  3335.813 MB/sec
[info]                  ·gc.alloc.rate.norm:                             67016.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.010 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.196 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.005 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       61535.334 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   2: 76686.439 ops/s
[info]                  ·gc.alloc.rate:                                  3265.305 MB/sec
[info]                  ·gc.alloc.rate.norm:                             67016.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.185 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.808 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       69858.585 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   3: 75775.265 ops/s
[info]                  ·gc.alloc.rate:                                  3226.524 MB/sec
[info]                  ·gc.alloc.rate.norm:                             67016.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.083 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.810 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       70698.289 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   4: 75997.007 ops/s
[info]                  ·gc.alloc.rate:                                  3236.683 MB/sec
[info]                  ·gc.alloc.rate.norm:                             67016.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.109 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3064.180 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       63444.297 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   5: 75612.054 ops/s
[info]                  ·gc.alloc.rate:                                  3220.178 MB/sec
[info]                  ·gc.alloc.rate.norm:                             67016.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.187 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3404.571 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       70853.477 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson":
[info]   76484.860 ±(99.9%) 4320.576 ops/s [Average]
[info]   (min, avg, max) = (75612.054, 76484.860, 78353.535), stdev = 1122.040
[info]   CI (99.9%): [72164.284, 80805.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3256.901 ±(99.9%) 182.428 MB/sec [Average]
[info]   (min, avg, max) = (3220.178, 3256.901, 3335.813), stdev = 47.376
[info]   CI (99.9%): [3074.473, 3439.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   67016.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (67016.005, 67016.005, 67016.006), stdev = 0.001
[info]   CI (99.9%): [67016.005, 67016.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.007 ±(99.9%) 0.010 MB/sec [Average]
[info]   (min, avg, max) = (0.004, 0.007, 0.010), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.152 ±(99.9%) 0.201 B/op [Average]
[info]   (min, avg, max) = (0.083, 0.152, 0.196), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   3267.875 ±(99.9%) 718.083 MB/sec [Average]
[info]   (min, avg, max) = (3063.005, 3267.875, 3404.571), stdev = 186.484
[info]   CI (99.9%): [2549.791, 3985.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   67277.997 ±(99.9%) 17092.840 B/op [Average]
[info]   (min, avg, max) = (61535.334, 67277.997, 70853.477), stdev = 4438.956
[info]   CI (99.9%): [50185.156, 84370.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.count":
[info]   48.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.600, 10.000), stdev = 0.548
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 8.000, 9.000), stdev = 0.707
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce
[info] # Run progress: 13.78% complete, ETA 01:08:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 235561.867 ops/s
[info] # Warmup Iteration   2: 321994.389 ops/s
[info] # Warmup Iteration   3: 321282.399 ops/s
[info] Iteration   1: 323508.960 ops/s
[info]                  ·gc.alloc.rate:            1432.074 MB/sec
[info]                  ·gc.alloc.rate.norm:       6968.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.063 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6559.231 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 322893.371 ops/s
[info]                  ·gc.alloc.rate:                                  1429.694 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6968.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.088 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.428 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1698.822 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8279.667 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                16.235 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 321557.072 ops/s
[info]                  ·gc.alloc.rate:                                  1423.906 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6968.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.835 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6664.250 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 321045.806 ops/s
[info]                  ·gc.alloc.rate:            1421.250 MB/sec
[info]                  ·gc.alloc.rate.norm:       6968.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.440 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6674.772 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 324161.258 ops/s
[info]                  ·gc.alloc.rate:            1435.113 MB/sec
[info]                  ·gc.alloc.rate.norm:       6968.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.513 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6610.643 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce":
[info]   322633.294 ±(99.9%) 5038.121 ops/s [Average]
[info]   (min, avg, max) = (321045.806, 322633.294, 324161.258), stdev = 1308.384
[info]   CI (99.9%): [317595.172, 327671.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1428.407 ±(99.9%) 22.084 MB/sec [Average]
[info]   (min, avg, max) = (1421.250, 1428.407, 1435.113), stdev = 5.735
[info]   CI (99.9%): [1406.324, 1450.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   6968.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6968.001, 6968.001, 6968.001), stdev = 0.001
[info]   CI (99.9%): [6968.001, 6968.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.018 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.088), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.089 ±(99.9%) 0.731 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.089, 0.428), stdev = 0.190
[info]   CI (99.9%): [≈ 0, 0.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1426.334 ±(99.9%) 586.984 MB/sec [Average]
[info]   (min, avg, max) = (1348.063, 1426.334, 1698.822), stdev = 152.438
[info]   CI (99.9%): [839.350, 2013.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   6957.712 ±(99.9%) 2851.157 B/op [Average]
[info]   (min, avg, max) = (6559.231, 6957.712, 8279.667), stdev = 740.436
[info]   CI (99.9%): [4106.555, 9808.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   3.247 ±(99.9%) 27.957 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.247, 16.235), stdev = 7.260
[info]   CI (99.9%): [≈ 0, 31.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 12.000), stdev = 4.087
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala
[info] # Run progress: 14.05% complete, ETA 01:07:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1067249.799 ops/s
[info] # Warmup Iteration   2: 1666862.302 ops/s
[info] # Warmup Iteration   3: 1678495.422 ops/s
[info] Iteration   1: 1672543.972 ops/s
[info]                  ·gc.alloc.rate:            858.448 MB/sec
[info]                  ·gc.alloc.rate.norm:       808.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.941 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 949.649 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 1680798.581 ops/s
[info]                  ·gc.alloc.rate:            862.898 MB/sec
[info]                  ·gc.alloc.rate.norm:       808.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.796 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 629.992 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 1615011.390 ops/s
[info]                  ·gc.alloc.rate:            828.927 MB/sec
[info]                  ·gc.alloc.rate.norm:       808.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.955 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 983.483 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   4: 1625900.110 ops/s
[info]                  ·gc.alloc.rate:                                  834.592 MB/sec
[info]                  ·gc.alloc.rate.norm:                             808.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.083 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.081 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            676.694 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       655.133 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                3.869 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 1629816.199 ops/s
[info]                  ·gc.alloc.rate:                                  836.560 MB/sec
[info]                  ·gc.alloc.rate.norm:                             808.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.047 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.045 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.981 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       986.125 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala":
[info]   1644814.050 ±(99.9%) 114466.928 ops/s [Average]
[info]   (min, avg, max) = (1615011.390, 1644814.050, 1680798.581), stdev = 29726.698
[info]   CI (99.9%): [1530347.123, 1759280.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   844.285 ±(99.9%) 58.920 MB/sec [Average]
[info]   (min, avg, max) = (828.927, 844.285, 862.898), stdev = 15.301
[info]   CI (99.9%): [785.365, 903.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   808.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (808.000, 808.000, 808.000), stdev = 0.001
[info]   CI (99.9%): [808.000, 808.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.026 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.083), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.025 ±(99.9%) 0.141 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.081), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   877.673 ±(99.9%) 713.592 MB/sec [Average]
[info]   (min, avg, max) = (672.796, 877.673, 1020.981), stdev = 185.318
[info]   CI (99.9%): [164.081, 1591.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   840.876 ±(99.9%) 700.135 B/op [Average]
[info]   (min, avg, max) = (629.992, 840.876, 986.125), stdev = 181.823
[info]   CI (99.9%): [140.742, 1541.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.774 ±(99.9%) 6.662 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.774, 3.869), stdev = 1.730
[info]   CI (99.9%): [≈ 0, 7.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.000, 12.000), stdev = 4.243
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala
[info] # Run progress: 14.32% complete, ETA 01:07:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1890120.012 ops/s
[info] # Warmup Iteration   2: 2166091.151 ops/s
[info] # Warmup Iteration   3: 2185656.639 ops/s
[info] Iteration   1: 2195088.893 ops/s
[info]                  ·gc.alloc.rate:            591.315 MB/sec
[info]                  ·gc.alloc.rate.norm:       424.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.357 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 241.183 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 2186518.270 ops/s
[info]                  ·gc.alloc.rate:                   589.000 MB/sec
[info]                  ·gc.alloc.rate.norm:              424.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.732 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        484.276 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.479 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 2175930.523 ops/s
[info]                  ·gc.alloc.rate:            586.126 MB/sec
[info]                  ·gc.alloc.rate.norm:       424.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.045 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 487.600 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 2179561.315 ops/s
[info]                  ·gc.alloc.rate:                   587.119 MB/sec
[info]                  ·gc.alloc.rate.norm:              424.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.402 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        486.311 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.481 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 2090251.156 ops/s
[info]                  ·gc.alloc.rate:            563.074 MB/sec
[info]                  ·gc.alloc.rate.norm:       424.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.030 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 253.787 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala":
[info]   2165470.032 ±(99.9%) 164343.691 ops/s [Average]
[info]   (min, avg, max) = (2090251.156, 2165470.032, 2195088.893), stdev = 42679.535
[info]   CI (99.9%): [2001126.341, 2329813.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   583.327 ±(99.9%) 44.256 MB/sec [Average]
[info]   (min, avg, max) = (563.074, 583.327, 591.315), stdev = 11.493
[info]   CI (99.9%): [539.071, 627.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   424.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (424.000, 424.000, 424.000), stdev = 0.001
[info]   CI (99.9%): [424.000, 424.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   538.713 ±(99.9%) 710.130 MB/sec [Average]
[info]   (min, avg, max) = (336.357, 538.713, 674.045), stdev = 184.419
[info]   CI (99.9%): [≈ 0, 1248.843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   390.632 ±(99.9%) 503.493 B/op [Average]
[info]   (min, avg, max) = (241.183, 390.632, 487.600), stdev = 130.755
[info]   CI (99.9%): [≈ 0, 894.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.192 ±(99.9%) 1.013 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.192, 0.481), stdev = 0.263
[info]   CI (99.9%): [≈ 0, 1.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 6.000), stdev = 1.643
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 14.59% complete, ETA 01:07:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2243129.625 ops/s
[info] # Warmup Iteration   2: 2521897.243 ops/s
[info] # Warmup Iteration   3: 2385621.001 ops/s
[info] Iteration   1: 2519888.830 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2517847.193 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2518641.511 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2516386.847 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2518011.729 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc":
[info]   2518155.222 ±(99.9%) 4902.771 ops/s [Average]
[info]   (min, avg, max) = (2516386.847, 2518155.222, 2519888.830), stdev = 1273.234
[info]   CI (99.9%): [2513252.451, 2523057.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson
[info] # Run progress: 14.86% complete, ETA 01:07:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25218.598 ops/s
[info] # Warmup Iteration   2: 37923.728 ops/s
[info] # Warmup Iteration   3: 38354.060 ops/s
[info] Iteration   1: 38491.519 ops/s
[info]                  ·gc.alloc.rate:                                  1621.732 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66323.783 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.085 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.469 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1685.592 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       68935.449 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                163.419 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        17.000 ms
[info] Iteration   2: 38606.017 ops/s
[info]                  ·gc.alloc.rate:                                  1627.102 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66320.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.077 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.127 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.266 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       69383.671 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 38483.396 ops/s
[info]                  ·gc.alloc.rate:                                  1621.444 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66320.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.811 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       69607.204 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 38812.603 ops/s
[info]                  ·gc.alloc.rate:                                  1635.509 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66320.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.167 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.937 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       69013.696 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 38980.117 ops/s
[info]                  ·gc.alloc.rate:                                  1642.394 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66320.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.166 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.391 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       54973.052 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson":
[info]   38674.730 ±(99.9%) 832.946 ops/s [Average]
[info]   (min, avg, max) = (38483.396, 38674.730, 38980.117), stdev = 216.314
[info]   CI (99.9%): [37841.784, 39507.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1629.636 ±(99.9%) 35.149 MB/sec [Average]
[info]   (min, avg, max) = (1621.444, 1629.636, 1642.394), stdev = 9.128
[info]   CI (99.9%): [1594.487, 1664.785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   66320.765 ±(99.9%) 6.496 B/op [Average]
[info]   (min, avg, max) = (66320.010, 66320.765, 66323.783), stdev = 1.687
[info]   CI (99.9%): [66314.270, 66327.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.034 ±(99.9%) 0.165 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0.034, 0.085), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.389 ±(99.9%) 6.732 B/op [Average]
[info]   (min, avg, max) = (0.015, 1.389, 3.469), stdev = 1.748
[info]   CI (99.9%): [≈ 0, 8.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1630.599 ±(99.9%) 580.138 MB/sec [Average]
[info]   (min, avg, max) = (1361.391, 1630.599, 1702.266), stdev = 150.660
[info]   CI (99.9%): [1050.461, 2210.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   66382.614 ±(99.9%) 24582.524 B/op [Average]
[info]   (min, avg, max) = (54973.052, 66382.614, 69607.204), stdev = 6384.003
[info]   CI (99.9%): [41800.091, 90965.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   32.684 ±(99.9%) 281.417 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 32.684, 163.419), stdev = 73.083
[info]   CI (99.9%): [≈ 0, 314.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 17.000), stdev = 5.941
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce
[info] # Run progress: 15.14% complete, ETA 01:07:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 195201.041 ops/s
[info] # Warmup Iteration   2: 232450.030 ops/s
[info] # Warmup Iteration   3: 235050.503 ops/s
[info] Iteration   1: 237797.761 ops/s
[info]                  ·gc.alloc.rate:                                  2443.395 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16176.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.056 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.150 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       15770.546 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 231999.972 ops/s
[info]                  ·gc.alloc.rate:                                  2384.031 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16176.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.050 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.434 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       16165.172 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 234496.526 ops/s
[info]                  ·gc.alloc.rate:                                  2410.560 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16176.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.044 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2383.257 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       15992.787 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 236546.934 ops/s
[info]                  ·gc.alloc.rate:                                  2432.128 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16176.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.050 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2383.614 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       15853.335 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 237391.589 ops/s
[info]                  ·gc.alloc.rate:                                  2439.528 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16176.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.050 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.257 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       15796.250 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce":
[info]   235646.556 ±(99.9%) 9254.302 ops/s [Average]
[info]   (min, avg, max) = (231999.972, 235646.556, 237797.761), stdev = 2403.313
[info]   CI (99.9%): [226392.255, 244900.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   2421.928 ±(99.9%) 95.105 MB/sec [Average]
[info]   (min, avg, max) = (2384.031, 2421.928, 2443.395), stdev = 24.699
[info]   CI (99.9%): [2326.823, 2517.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   16176.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16176.002, 16176.002, 16176.002), stdev = 0.001
[info]   CI (99.9%): [16176.001, 16176.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.008 ±(99.9%) 0.003 MB/sec [Average]
[info]   (min, avg, max) = (0.007, 0.008, 0.008), stdev = 0.001
[info]   CI (99.9%): [0.005, 0.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.050 ±(99.9%) 0.016 B/op [Average]
[info]   (min, avg, max) = (0.044, 0.050, 0.056), stdev = 0.004
[info]   CI (99.9%): [0.034, 0.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2382.743 ±(99.9%) 2.515 MB/sec [Average]
[info]   (min, avg, max) = (2382.150, 2382.743, 2383.614), stdev = 0.653
[info]   CI (99.9%): [2380.228, 2385.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   15915.618 ±(99.9%) 630.983 B/op [Average]
[info]   (min, avg, max) = (15770.546, 15915.618, 16165.172), stdev = 163.864
[info]   CI (99.9%): [15284.635, 16546.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.count":
[info]   35.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.000, 7.000), stdev = 0.001
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala
[info] # Run progress: 15.41% complete, ETA 01:06:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 193963.758 ops/s
[info] # Warmup Iteration   2: 290058.978 ops/s
[info] # Warmup Iteration   3: 285762.204 ops/s
[info] Iteration   1: 296581.302 ops/s
[info]                  ·gc.alloc.rate:                   1434.976 MB/sec
[info]                  ·gc.alloc.rate.norm:              7616.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1344.705 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        7136.897 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 24.744 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   2: 299092.697 ops/s
[info]                  ·gc.alloc.rate:                                  1447.141 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7616.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.187 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.987 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.386 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7164.693 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 302658.749 ops/s
[info]                  ·gc.alloc.rate:            1464.310 MB/sec
[info]                  ·gc.alloc.rate.norm:       7616.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.297 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7080.222 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 302541.174 ops/s
[info]                  ·gc.alloc.rate:            1463.770 MB/sec
[info]                  ·gc.alloc.rate.norm:       7616.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.702 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8853.963 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 302280.449 ops/s
[info]                  ·gc.alloc.rate:                                  1462.516 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7616.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.351 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7089.191 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala":
[info]   300630.874 ±(99.9%) 10412.352 ops/s [Average]
[info]   (min, avg, max) = (296581.302, 300630.874, 302658.749), stdev = 2704.055
[info]   CI (99.9%): [290218.523, 311043.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1454.542 ±(99.9%) 50.271 MB/sec [Average]
[info]   (min, avg, max) = (1434.976, 1454.542, 1464.310), stdev = 13.055
[info]   CI (99.9%): [1404.272, 1504.813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   7616.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7616.001, 7616.001, 7616.001), stdev = 0.001
[info]   CI (99.9%): [7616.001, 7616.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.038 ±(99.9%) 0.322 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.038, 0.187), stdev = 0.084
[info]   CI (99.9%): [≈ 0, 0.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.199 ±(99.9%) 1.695 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.199, 0.987), stdev = 0.440
[info]   CI (99.9%): [≈ 0, 1.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1426.088 ±(99.9%) 593.927 MB/sec [Average]
[info]   (min, avg, max) = (1344.705, 1426.088, 1701.702), stdev = 154.241
[info]   CI (99.9%): [832.161, 2020.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   7464.993 ±(99.9%) 2992.832 B/op [Average]
[info]   (min, avg, max) = (7080.222, 7464.993, 8853.963), stdev = 777.229
[info]   CI (99.9%): [4472.161, 10457.825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   4.949 ±(99.9%) 42.611 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.949, 24.744), stdev = 11.066
[info]   CI (99.9%): [≈ 0, 47.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 16.000), stdev = 5.612
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala
[info] # Run progress: 15.68% complete, ETA 01:06:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1125071.226 ops/s
[info] # Warmup Iteration   2: 1176169.978 ops/s
[info] # Warmup Iteration   3: 1236815.727 ops/s
[info] Iteration   1: 1271447.125 ops/s
[info]                  ·gc.alloc.rate:            439.423 MB/sec
[info]                  ·gc.alloc.rate.norm:       544.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.002 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 417.205 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 1255943.917 ops/s
[info]                  ·gc.alloc.rate:            434.178 MB/sec
[info]                  ·gc.alloc.rate.norm:       544.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.214 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 844.752 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 1199145.976 ops/s
[info]                  ·gc.alloc.rate:            414.434 MB/sec
[info]                  ·gc.alloc.rate.norm:       544.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.023 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 442.388 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 1236232.737 ops/s
[info]                  ·gc.alloc.rate:            427.236 MB/sec
[info]                  ·gc.alloc.rate.norm:       544.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.015 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 429.122 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   5: 1238624.196 ops/s
[info]                  ·gc.alloc.rate:            428.045 MB/sec
[info]                  ·gc.alloc.rate.norm:       544.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.011 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 856.598 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala":
[info]   1240278.790 ±(99.9%) 104178.920 ops/s [Average]
[info]   (min, avg, max) = (1199145.976, 1240278.790, 1271447.125), stdev = 27054.935
[info]   CI (99.9%): [1136099.870, 1344457.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   428.663 ±(99.9%) 36.074 MB/sec [Average]
[info]   (min, avg, max) = (414.434, 428.663, 439.423), stdev = 9.368
[info]   CI (99.9%): [392.589, 464.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   544.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (544.000, 544.000, 544.000), stdev = 0.001
[info]   CI (99.9%): [544.000, 544.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   471.853 ±(99.9%) 710.971 MB/sec [Average]
[info]   (min, avg, max) = (337.002, 471.853, 674.214), stdev = 184.637
[info]   CI (99.9%): [≈ 0, 1182.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   598.013 ±(99.9%) 888.952 B/op [Average]
[info]   (min, avg, max) = (417.205, 598.013, 856.598), stdev = 230.858
[info]   CI (99.9%): [≈ 0, 1486.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.000, 6.000), stdev = 1.871
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson
[info] # Run progress: 15.95% complete, ETA 01:06:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28378.420 ops/s
[info] # Warmup Iteration   2: 71713.469 ops/s
[info] # Warmup Iteration   3: 72145.316 ops/s
[info] Iteration   1: 72652.785 ops/s
[info]                  ·gc.alloc.rate:                                  3052.311 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66128.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.204 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.243 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       66364.839 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   2: 71147.162 ops/s
[info]                  ·gc.alloc.rate:                                  2988.841 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66128.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.087 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.028 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       67769.376 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 71270.854 ops/s
[info]                  ·gc.alloc.rate:                                  2994.042 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66128.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.145 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.062 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       67652.437 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   4: 70911.026 ops/s
[info]                  ·gc.alloc.rate:                                  2980.003 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66128.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.116 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.673 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       60439.895 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 73945.640 ops/s
[info]                  ·gc.alloc.rate:                                  3106.807 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66128.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.010 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.219 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.804 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       72449.544 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson":
[info]   71985.493 ±(99.9%) 4966.972 ops/s [Average]
[info]   (min, avg, max) = (70911.026, 71985.493, 73945.640), stdev = 1289.907
[info]   CI (99.9%): [67018.521, 76952.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3024.401 ±(99.9%) 208.496 MB/sec [Average]
[info]   (min, avg, max) = (2980.003, 3024.401, 3106.807), stdev = 54.146
[info]   CI (99.9%): [2815.904, 3232.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   66128.006 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (66128.006, 66128.006, 66128.006), stdev = 0.001
[info]   CI (99.9%): [66128.004, 66128.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.007 ±(99.9%) 0.010 MB/sec [Average]
[info]   (min, avg, max) = (0.004, 0.007, 0.010), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.154 ±(99.9%) 0.217 B/op [Average]
[info]   (min, avg, max) = (0.087, 0.154, 0.219), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   3063.362 ±(99.9%) 925.936 MB/sec [Average]
[info]   (min, avg, max) = (2723.673, 3063.362, 3403.804), stdev = 240.463
[info]   CI (99.9%): [2137.426, 3989.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   66935.218 ±(99.9%) 16577.074 B/op [Average]
[info]   (min, avg, max) = (60439.895, 66935.218, 72449.544), stdev = 4305.013
[info]   CI (99.9%): [50358.144, 83512.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.count":
[info]   45.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 9.000, 10.000), stdev = 0.707
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.400, 8.000), stdev = 0.548
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce
[info] # Run progress: 16.22% complete, ETA 01:06:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 159756.298 ops/s
[info] # Warmup Iteration   2: 211210.030 ops/s
[info] # Warmup Iteration   3: 213538.723 ops/s
[info] Iteration   1: 213691.905 ops/s
[info]                  ·gc.alloc.rate:                                  1810.508 MB/sec
[info]                  ·gc.alloc.rate.norm:                             13336.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.137 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2035.537 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       14993.535 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                24.531 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        13.000 ms
[info] Iteration   2: 209365.191 ops/s
[info]                  ·gc.alloc.rate:            1773.740 MB/sec
[info]                  ·gc.alloc.rate.norm:       13336.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.674 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12794.169 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 209825.909 ops/s
[info]                  ·gc.alloc.rate:                                  1777.491 MB/sec
[info]                  ·gc.alloc.rate.norm:                             13336.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.030 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.559 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12766.307 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 209820.502 ops/s
[info]                  ·gc.alloc.rate:                                  1778.224 MB/sec
[info]                  ·gc.alloc.rate.norm:                             13336.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.334 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12766.855 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 216169.682 ops/s
[info]                  ·gc.alloc.rate:                                  1831.366 MB/sec
[info]                  ·gc.alloc.rate.norm:                             13336.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.943 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       14869.429 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce":
[info]   211774.638 ±(99.9%) 11618.158 ops/s [Average]
[info]   (min, avg, max) = (209365.191, 211774.638, 216169.682), stdev = 3017.199
[info]   CI (99.9%): [200156.480, 223392.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1794.266 ±(99.9%) 98.178 MB/sec [Average]
[info]   (min, avg, max) = (1773.740, 1794.266, 1831.366), stdev = 25.496
[info]   CI (99.9%): [1696.088, 1892.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   13336.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13336.002, 13336.002, 13336.002), stdev = 0.001
[info]   CI (99.9%): [13336.002, 13336.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.029 ±(99.9%) 0.233 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.137), stdev = 0.061
[info]   CI (99.9%): [≈ 0, 0.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.213 ±(99.9%) 1.717 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.213, 1.010), stdev = 0.446
[info]   CI (99.9%): [≈ 0, 1.930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1836.609 ±(99.9%) 710.572 MB/sec [Average]
[info]   (min, avg, max) = (1701.559, 1836.609, 2041.943), stdev = 184.533
[info]   CI (99.9%): [1126.037, 2547.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   13638.059 ±(99.9%) 4549.909 B/op [Average]
[info]   (min, avg, max) = (12766.307, 13638.059, 14993.535), stdev = 1181.597
[info]   CI (99.9%): [9088.150, 18187.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   4.906 ±(99.9%) 42.244 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.906, 24.531), stdev = 10.971
[info]   CI (99.9%): [≈ 0, 47.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 13.000), stdev = 3.937
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala
[info] # Run progress: 16.49% complete, ETA 01:06:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 704680.561 ops/s
[info] # Warmup Iteration   2: 1159828.896 ops/s
[info] # Warmup Iteration   3: 1170790.263 ops/s
[info] Iteration   1: 1176092.363 ops/s
[info]                  ·gc.alloc.rate:            687.347 MB/sec
[info]                  ·gc.alloc.rate.norm:       920.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.650 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 900.329 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 1181651.811 ops/s
[info]                  ·gc.alloc.rate:            690.557 MB/sec
[info]                  ·gc.alloc.rate.norm:       920.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.618 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 896.101 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 1170651.947 ops/s
[info]                  ·gc.alloc.rate:            684.177 MB/sec
[info]                  ·gc.alloc.rate.norm:       920.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.637 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 904.483 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 1112452.822 ops/s
[info]                  ·gc.alloc.rate:            650.144 MB/sec
[info]                  ·gc.alloc.rate.norm:       920.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.646 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 951.842 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 1114005.903 ops/s
[info]                  ·gc.alloc.rate:                   651.082 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.666 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        950.500 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 5.647 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala":
[info]   1150970.969 ±(99.9%) 133526.362 ops/s [Average]
[info]   (min, avg, max) = (1112452.822, 1150970.969, 1181651.811), stdev = 34676.372
[info]   CI (99.9%): [1017444.607, 1284497.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   672.661 ±(99.9%) 77.999 MB/sec [Average]
[info]   (min, avg, max) = (650.144, 672.661, 690.557), stdev = 20.256
[info]   CI (99.9%): [594.663, 750.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   920.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (920.000, 920.000, 920.000), stdev = 0.001
[info]   CI (99.9%): [920.000, 920.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   672.644 ±(99.9%) 0.068 MB/sec [Average]
[info]   (min, avg, max) = (672.618, 672.644, 672.666), stdev = 0.018
[info]   CI (99.9%): [672.576, 672.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   920.651 ±(99.9%) 107.903 B/op [Average]
[info]   (min, avg, max) = (896.101, 920.651, 951.842), stdev = 28.022
[info]   CI (99.9%): [812.748, 1028.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.129 ±(99.9%) 9.724 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.129, 5.647), stdev = 2.525
[info]   CI (99.9%): [≈ 0, 10.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 8.000, 9.000), stdev = 0.707
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala
[info] # Run progress: 16.76% complete, ETA 01:05:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2528601.454 ops/s
[info] # Warmup Iteration   2: 2875489.497 ops/s
[info] # Warmup Iteration   3: 3053021.782 ops/s
[info] Iteration   1: 3020042.721 ops/s
[info]                  ·gc.alloc.rate:            1028.671 MB/sec
[info]                  ·gc.alloc.rate.norm:       536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.342 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 526.971 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 3036627.272 ops/s
[info]                  ·gc.alloc.rate:                   1033.982 MB/sec
[info]                  ·gc.alloc.rate.norm:              536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1010.392 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        523.771 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.345 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 3006727.889 ops/s
[info]                  ·gc.alloc.rate:                                  1023.783 MB/sec
[info]                  ·gc.alloc.rate.norm:                             536.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.035 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.679 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       530.710 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                2.092 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   4: 2987562.698 ops/s
[info]                  ·gc.alloc.rate:                                  1017.328 MB/sec
[info]                  ·gc.alloc.rate.norm:                             536.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.037 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.074 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       537.974 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 2910799.121 ops/s
[info]                  ·gc.alloc.rate:            991.434 MB/sec
[info]                  ·gc.alloc.rate.norm:       536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.307 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 552.150 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala":
[info]   2992351.940 ±(99.9%) 188716.435 ops/s [Average]
[info]   (min, avg, max) = (2910799.121, 2992351.940, 3036627.272), stdev = 49009.059
[info]   CI (99.9%): [2803635.505, 3181068.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1019.040 ±(99.9%) 63.958 MB/sec [Average]
[info]   (min, avg, max) = (991.434, 1019.040, 1033.982), stdev = 16.610
[info]   CI (99.9%): [955.082, 1082.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   536.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (536.000, 536.000, 536.000), stdev = 0.001
[info]   CI (99.9%): [536.000, 536.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.014 ±(99.9%) 0.075 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.037), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.008 ±(99.9%) 0.040 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.019), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1015.559 ±(99.9%) 20.328 MB/sec [Average]
[info]   (min, avg, max) = (1010.392, 1015.559, 1021.307), stdev = 5.279
[info]   CI (99.9%): [995.231, 1035.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   534.315 ±(99.9%) 43.462 B/op [Average]
[info]   (min, avg, max) = (523.771, 534.315, 552.150), stdev = 11.287
[info]   CI (99.9%): [490.853, 577.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.487 ±(99.9%) 3.502 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.487, 2.092), stdev = 0.909
[info]   CI (99.9%): [≈ 0, 3.989] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.000, 9.000), stdev = 3.674
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 17.03% complete, ETA 01:05:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2958828.351 ops/s
[info] # Warmup Iteration   2: 3300341.325 ops/s
[info] # Warmup Iteration   3: 3106447.230 ops/s
[info] Iteration   1: 3108582.307 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3109149.079 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3107774.030 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3106179.230 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3102558.481 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   3106848.625 ±(99.9%) 10189.218 ops/s [Average]
[info]   (min, avg, max) = (3102558.481, 3106848.625, 3109149.079), stdev = 2646.108
[info]   CI (99.9%): [3096659.407, 3117037.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson
[info] # Run progress: 17.30% complete, ETA 01:05:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 143595.133 ops/s
[info] # Warmup Iteration   2: 255775.173 ops/s
[info] # Warmup Iteration   3: 265641.406 ops/s
[info] Iteration   1: 282435.970 ops/s
[info]                  ·gc.alloc.rate:                                  2304.472 MB/sec
[info]                  ·gc.alloc.rate.norm:                             12840.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.036 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.200 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.664 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11381.264 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 280368.638 ops/s
[info]                  ·gc.alloc.rate:                                  2287.049 MB/sec
[info]                  ·gc.alloc.rate.norm:                             12840.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.465 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       13375.686 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 277320.676 ops/s
[info]                  ·gc.alloc.rate:                                  2262.091 MB/sec
[info]                  ·gc.alloc.rate.norm:                             12840.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.025 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.394 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       13522.867 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 278888.043 ops/s
[info]                  ·gc.alloc.rate:                                  2274.966 MB/sec
[info]                  ·gc.alloc.rate.norm:                             12840.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.460 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       13446.704 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 280621.718 ops/s
[info]                  ·gc.alloc.rate:                                  2289.104 MB/sec
[info]                  ·gc.alloc.rate.norm:                             12840.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.105 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11454.539 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson":
[info]   279927.009 ±(99.9%) 7418.104 ops/s [Average]
[info]   (min, avg, max) = (277320.676, 279927.009, 282435.970), stdev = 1926.458
[info]   CI (99.9%): [272508.905, 287345.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2283.536 ±(99.9%) 61.339 MB/sec [Average]
[info]   (min, avg, max) = (2262.091, 2283.536, 2304.472), stdev = 15.930
[info]   CI (99.9%): [2222.197, 2344.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   12840.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (12840.001, 12840.001, 12840.002), stdev = 0.001
[info]   CI (99.9%): [12840.001, 12840.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.009 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.009, 0.036), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.053 ±(99.9%) 0.318 B/op [Average]
[info]   (min, avg, max) = (0.003, 0.053, 0.200), stdev = 0.083
[info]   CI (99.9%): [≈ 0, 0.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   2246.418 ±(99.9%) 717.206 MB/sec [Average]
[info]   (min, avg, max) = (2042.105, 2246.418, 2382.465), stdev = 186.256
[info]   CI (99.9%): [1529.212, 2963.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   12636.212 ±(99.9%) 4288.380 B/op [Average]
[info]   (min, avg, max) = (11381.264, 12636.212, 13522.867), stdev = 1113.679
[info]   CI (99.9%): [8347.832, 16924.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.count":
[info]   33.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce
[info] # Run progress: 17.57% complete, ETA 01:05:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17676.950 ops/s
[info] # Warmup Iteration   2: 25527.823 ops/s
[info] # Warmup Iteration   3: 25489.968 ops/s
[info] Iteration   1: 25499.262 ops/s
[info]                  ·gc.alloc.rate:                   1493.574 MB/sec
[info]                  ·gc.alloc.rate.norm:              92168.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.546 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        83218.360 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 205.579 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 25483.529 ops/s
[info]                  ·gc.alloc.rate:                                  1492.331 MB/sec
[info]                  ·gc.alloc.rate.norm:                             92168.021 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.139 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 8.579 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.592 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       84093.434 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 25912.544 ops/s
[info]                  ·gc.alloc.rate:                                  1517.287 MB/sec
[info]                  ·gc.alloc.rate.norm:                             92168.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.423 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.741 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       103372.755 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 25597.737 ops/s
[info]                  ·gc.alloc.rate:                                  1498.904 MB/sec
[info]                  ·gc.alloc.rate.norm:                             92168.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.363 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.393 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       83712.430 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 25505.351 ops/s
[info]                  ·gc.alloc.rate:                                  1493.401 MB/sec
[info]                  ·gc.alloc.rate.norm:                             92168.017 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.336 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.608 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       105017.901 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce":
[info]   25599.685 ±(99.9%) 695.147 ops/s [Average]
[info]   (min, avg, max) = (25483.529, 25599.685, 25912.544), stdev = 180.527
[info]   CI (99.9%): [24904.538, 26294.831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate":
[info]   1499.099 ±(99.9%) 40.369 MB/sec [Average]
[info]   (min, avg, max) = (1492.331, 1499.099, 1517.287), stdev = 10.484
[info]   CI (99.9%): [1458.730, 1539.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   92168.017 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (92168.016, 92168.017, 92168.021), stdev = 0.002
[info]   CI (99.9%): [92168.008, 92168.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.031 ±(99.9%) 0.232 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.031, 0.139), stdev = 0.060
[info]   CI (99.9%): [≈ 0, 0.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.940 ±(99.9%) 14.305 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.940, 8.579), stdev = 3.715
[info]   CI (99.9%): [≈ 0, 16.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1494.976 ±(99.9%) 726.860 MB/sec [Average]
[info]   (min, avg, max) = (1348.546, 1494.976, 1701.741), stdev = 188.763
[info]   CI (99.9%): [768.116, 2221.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   91882.976 ±(99.9%) 43354.029 B/op [Average]
[info]   (min, avg, max) = (83218.360, 91882.976, 105017.901), stdev = 11258.904
[info]   CI (99.9%): [48528.947, 135237.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.737 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   41.116 ±(99.9%) 354.019 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 41.116, 205.579), stdev = 91.938
[info]   CI (99.9%): [≈ 0, 395.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 12.000), stdev = 3.647
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava
[info] # Run progress: 17.84% complete, ETA 01:04:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2263.832 ops/s
[info] # Warmup Iteration   2: 90855.587 ops/s
[info] # Warmup Iteration   3: 93148.584 ops/s
[info] Iteration   1: 91880.523 ops/s
[info]                  ·gc.alloc.rate:            827.507 MB/sec
[info]                  ·gc.alloc.rate.norm:       14176.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.426 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11433.658 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 92991.555 ops/s
[info]                  ·gc.alloc.rate:                   837.717 MB/sec
[info]                  ·gc.alloc.rate.norm:              14176.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1000.696 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        16933.974 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 11.274 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   3: 93382.168 ops/s
[info]                  ·gc.alloc.rate:                   841.283 MB/sec
[info]                  ·gc.alloc.rate.norm:              14176.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             666.930 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        11238.071 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 11.227 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 91595.877 ops/s
[info]                  ·gc.alloc.rate:                   824.927 MB/sec
[info]                  ·gc.alloc.rate.norm:              14176.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1001.089 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        17203.280 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 68.676 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   5: 93874.075 ops/s
[info]                  ·gc.alloc.rate:                                  845.492 MB/sec
[info]                  ·gc.alloc.rate.norm:                             14176.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.468 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 7.842 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            678.056 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11368.675 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     2.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                44.671 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava":
[info]   92744.839 ±(99.9%) 3757.775 ops/s [Average]
[info]   (min, avg, max) = (91595.877, 92744.839, 93874.075), stdev = 975.882
[info]   CI (99.9%): [88987.064, 96502.615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   835.385 ±(99.9%) 34.106 MB/sec [Average]
[info]   (min, avg, max) = (824.927, 835.385, 845.492), stdev = 8.857
[info]   CI (99.9%): [801.279, 869.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   14176.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (14176.004, 14176.004, 14176.005), stdev = 0.001
[info]   CI (99.9%): [14176.004, 14176.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.094 ±(99.9%) 0.805 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.094, 0.468), stdev = 0.209
[info]   CI (99.9%): [≈ 0, 0.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.568 ±(99.9%) 13.504 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.568, 7.842), stdev = 3.507
[info]   CI (99.9%): [≈ 0, 15.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   802.839 ±(99.9%) 696.396 MB/sec [Average]
[info]   (min, avg, max) = (666.930, 802.839, 1001.089), stdev = 180.852
[info]   CI (99.9%): [106.443, 1499.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   13635.532 ±(99.9%) 12076.428 B/op [Average]
[info]   (min, avg, max) = (11238.071, 13635.532, 17203.280), stdev = 3136.210
[info]   CI (99.9%): [1559.103, 25711.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   1.599 ±(99.9%) 6.437 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.599, 3.996), stdev = 1.672
[info]   CI (99.9%): [≈ 0, 8.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   27.170 ±(99.9%) 110.166 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 27.170, 68.676), stdev = 28.610
[info]   CI (99.9%): [≈ 0, 137.335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.time":
[info]   53.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 10.600, 15.000), stdev = 3.782
[info]   CI (99.9%): [53.000, 53.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala
[info] # Run progress: 18.11% complete, ETA 01:04:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38361.029 ops/s
[info] # Warmup Iteration   2: 57362.604 ops/s
[info] # Warmup Iteration   3: 59071.223 ops/s
[info] Iteration   1: 59873.710 ops/s
[info]                  ·gc.alloc.rate:            989.118 MB/sec
[info]                  ·gc.alloc.rate.norm:       26008.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.904 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26528.274 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 59644.503 ops/s
[info]                  ·gc.alloc.rate:            985.495 MB/sec
[info]                  ·gc.alloc.rate.norm:       26008.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.034 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26629.218 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   3: 57483.684 ops/s
[info]                  ·gc.alloc.rate:                                  949.721 MB/sec
[info]                  ·gc.alloc.rate.norm:                             26008.008 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.058 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.576 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1012.968 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       27740.009 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                109.428 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   4: 60533.422 ops/s
[info]                  ·gc.alloc.rate:                                  1000.139 MB/sec
[info]                  ·gc.alloc.rate.norm:                             26008.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.057 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.472 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.996 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       26550.393 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 60555.056 ops/s
[info]                  ·gc.alloc.rate:            1000.758 MB/sec
[info]                  ·gc.alloc.rate.norm:       26008.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.241 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26540.311 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala":
[info]   59618.075 ±(99.9%) 4846.868 ops/s [Average]
[info]   (min, avg, max) = (57483.684, 59618.075, 60555.056), stdev = 1258.716
[info]   CI (99.9%): [54771.207, 64464.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   985.046 ±(99.9%) 80.295 MB/sec [Average]
[info]   (min, avg, max) = (949.721, 985.046, 1000.758), stdev = 20.852
[info]   CI (99.9%): [904.752, 1065.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   26008.007 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (26008.007, 26008.007, 26008.008), stdev = 0.001
[info]   CI (99.9%): [26008.005, 26008.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.023 ±(99.9%) 0.120 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.058), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.610 ±(99.9%) 3.218 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.610, 1.576), stdev = 0.836
[info]   CI (99.9%): [≈ 0, 3.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1014.629 ±(99.9%) 23.666 MB/sec [Average]
[info]   (min, avg, max) = (1008.904, 1014.629, 1021.241), stdev = 6.146
[info]   CI (99.9%): [990.963, 1038.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   26797.641 ±(99.9%) 2034.231 B/op [Average]
[info]   (min, avg, max) = (26528.274, 26797.641, 27740.009), stdev = 528.283
[info]   CI (99.9%): [24763.410, 28831.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   21.886 ±(99.9%) 188.442 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21.886, 109.428), stdev = 48.938
[info]   CI (99.9%): [≈ 0, 210.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.800, 13.000), stdev = 5.070
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala
[info] # Run progress: 18.38% complete, ETA 01:04:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 65111.425 ops/s
[info] # Warmup Iteration   2: 69258.120 ops/s
[info] # Warmup Iteration   3: 67618.334 ops/s
[info] Iteration   1: 68130.853 ops/s
[info]                  ·gc.alloc.rate:            439.188 MB/sec
[info]                  ·gc.alloc.rate.norm:       10144.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.208 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 15572.301 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 68657.227 ops/s
[info]                  ·gc.alloc.rate:            442.391 MB/sec
[info]                  ·gc.alloc.rate.norm:       10144.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.976 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7726.848 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 68726.417 ops/s
[info]                  ·gc.alloc.rate:            442.901 MB/sec
[info]                  ·gc.alloc.rate.norm:       10144.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.011 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7718.754 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   4: 68521.350 ops/s
[info]                  ·gc.alloc.rate:            441.581 MB/sec
[info]                  ·gc.alloc.rate.norm:       10144.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.033 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 15483.912 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 68730.234 ops/s
[info]                  ·gc.alloc.rate:            443.072 MB/sec
[info]                  ·gc.alloc.rate.norm:       10144.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.122 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7718.305 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala":
[info]   68553.216 ±(99.9%) 965.657 ops/s [Average]
[info]   (min, avg, max) = (68130.853, 68553.216, 68730.234), stdev = 250.778
[info]   CI (99.9%): [67587.559, 69518.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   441.826 ±(99.9%) 6.103 MB/sec [Average]
[info]   (min, avg, max) = (439.188, 441.826, 443.072), stdev = 1.585
[info]   CI (99.9%): [435.724, 447.929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10144.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10144.006, 10144.006, 10144.006), stdev = 0.001
[info]   CI (99.9%): [10144.005, 10144.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   471.870 ±(99.9%) 710.939 MB/sec [Average]
[info]   (min, avg, max) = (336.976, 471.870, 674.208), stdev = 184.629
[info]   CI (99.9%): [≈ 0, 1182.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   10844.024 ±(99.9%) 16465.655 B/op [Average]
[info]   (min, avg, max) = (7718.305, 10844.024, 15572.301), stdev = 4276.078
[info]   CI (99.9%): [≈ 0, 27309.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.000, 6.000), stdev = 1.871
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson
[info] # Run progress: 18.65% complete, ETA 01:04:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14686.691 ops/s
[info] # Warmup Iteration   2: 31664.336 ops/s
[info] # Warmup Iteration   3: 32694.049 ops/s
[info] Iteration   1: 32280.488 ops/s
[info]                  ·gc.alloc.rate:                                  1686.857 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82232.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.096 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.678 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1690.221 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       82396.002 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                194.866 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        15.000 ms
[info] Iteration   2: 32079.493 ops/s
[info]                  ·gc.alloc.rate:                                  1675.773 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82232.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.016 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.761 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.569 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       83497.840 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 32304.402 ops/s
[info]                  ·gc.alloc.rate:                                  1687.624 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82232.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.297 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.722 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       82918.963 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 33438.107 ops/s
[info]                  ·gc.alloc.rate:                                  1747.430 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82232.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.392 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.282 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       80107.394 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 33458.386 ops/s
[info]                  ·gc.alloc.rate:                                  1747.936 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82232.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.123 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.808 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       80061.910 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson":
[info]   32712.175 ±(99.9%) 2609.310 ops/s [Average]
[info]   (min, avg, max) = (32079.493, 32712.175, 33458.386), stdev = 677.630
[info]   CI (99.9%): [30102.865, 35321.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1709.124 ±(99.9%) 136.739 MB/sec [Average]
[info]   (min, avg, max) = (1675.773, 1709.124, 1747.936), stdev = 35.511
[info]   CI (99.9%): [1572.385, 1845.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   82232.014 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (82232.012, 82232.014, 82232.016), stdev = 0.001
[info]   CI (99.9%): [82232.008, 82232.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.026 ±(99.9%) 0.152 MB/sec [Average]
[info]   (min, avg, max) = (0.003, 0.026, 0.096), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.250 ±(99.9%) 7.433 B/op [Average]
[info]   (min, avg, max) = (0.123, 1.250, 4.678), stdev = 1.930
[info]   CI (99.9%): [≈ 0, 8.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1699.520 ±(99.9%) 20.044 MB/sec [Average]
[info]   (min, avg, max) = (1690.221, 1699.520, 1702.282), stdev = 5.205
[info]   CI (99.9%): [1679.476, 1719.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   81796.421 ±(99.9%) 6201.738 B/op [Average]
[info]   (min, avg, max) = (80061.910, 81796.421, 83497.840), stdev = 1610.572
[info]   CI (99.9%): [75594.683, 87998.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.884 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   38.973 ±(99.9%) 335.572 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 38.973, 194.866), stdev = 87.147
[info]   CI (99.9%): [≈ 0, 374.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 15.000), stdev = 4.827
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce
[info] # Run progress: 18.92% complete, ETA 01:04:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26635.449 ops/s
[info] # Warmup Iteration   2: 36341.571 ops/s
[info] # Warmup Iteration   3: 38034.052 ops/s
[info] Iteration   1: 37855.718 ops/s
[info]                  ·gc.alloc.rate:            424.010 MB/sec
[info]                  ·gc.alloc.rate.norm:       17630.933 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.023 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14013.879 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 38222.365 ops/s
[info]                  ·gc.alloc.rate:            428.149 MB/sec
[info]                  ·gc.alloc.rate.norm:       17632.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.025 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13879.341 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 37973.973 ops/s
[info]                  ·gc.alloc.rate:            425.382 MB/sec
[info]                  ·gc.alloc.rate.norm:       17632.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.066 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 27939.940 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 38104.529 ops/s
[info]                  ·gc.alloc.rate:            426.788 MB/sec
[info]                  ·gc.alloc.rate.norm:       17632.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.985 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13921.951 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 38157.455 ops/s
[info]                  ·gc.alloc.rate:            427.423 MB/sec
[info]                  ·gc.alloc.rate.norm:       17632.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.018 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13902.616 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce":
[info]   38062.808 ±(99.9%) 567.677 ops/s [Average]
[info]   (min, avg, max) = (37855.718, 38062.808, 38222.365), stdev = 147.424
[info]   CI (99.9%): [37495.131, 38630.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate":
[info]   426.350 ±(99.9%) 6.384 MB/sec [Average]
[info]   (min, avg, max) = (424.010, 426.350, 428.149), stdev = 1.658
[info]   CI (99.9%): [419.967, 432.734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   17631.795 ±(99.9%) 1.857 B/op [Average]
[info]   (min, avg, max) = (17630.933, 17631.795, 17632.012), stdev = 0.482
[info]   CI (99.9%): [17629.939, 17633.652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   404.423 ±(99.9%) 580.427 MB/sec [Average]
[info]   (min, avg, max) = (336.985, 404.423, 674.066), stdev = 150.735
[info]   CI (99.9%): [≈ 0, 984.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   16731.545 ±(99.9%) 24127.714 B/op [Average]
[info]   (min, avg, max) = (13879.341, 16731.545, 27939.940), stdev = 6265.891
[info]   CI (99.9%): [≈ 0, 40859.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 6.000), stdev = 1.225
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala
[info] # Run progress: 19.19% complete, ETA 01:03:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24435.133 ops/s
[info] # Warmup Iteration   2: 40960.262 ops/s
[info] # Warmup Iteration   3: 39348.915 ops/s
[info] Iteration   1: 40911.576 ops/s
[info]                  ·gc.alloc.rate:            369.470 MB/sec
[info]                  ·gc.alloc.rate.norm:       14216.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.332 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12940.954 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 40841.299 ops/s
[info]                  ·gc.alloc.rate:            368.826 MB/sec
[info]                  ·gc.alloc.rate.norm:       14216.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.657 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 25926.894 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 40999.121 ops/s
[info]                  ·gc.alloc.rate:            370.276 MB/sec
[info]                  ·gc.alloc.rate.norm:       14216.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.334 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12912.868 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 41004.104 ops/s
[info]                  ·gc.alloc.rate:            370.302 MB/sec
[info]                  ·gc.alloc.rate.norm:       14216.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.317 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12911.293 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 41006.761 ops/s
[info]                  ·gc.alloc.rate:            370.355 MB/sec
[info]                  ·gc.alloc.rate.norm:       14216.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.348 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12910.664 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala":
[info]   40952.572 ±(99.9%) 284.409 ops/s [Average]
[info]   (min, avg, max) = (40841.299, 40952.572, 41006.761), stdev = 73.860
[info]   CI (99.9%): [40668.163, 41236.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   369.846 ±(99.9%) 2.608 MB/sec [Average]
[info]   (min, avg, max) = (368.826, 369.846, 370.355), stdev = 0.677
[info]   CI (99.9%): [367.238, 372.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   14216.010 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (14216.010, 14216.010, 14216.011), stdev = 0.001
[info]   CI (99.9%): [14216.009, 14216.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   403.598 ±(99.9%) 579.171 MB/sec [Average]
[info]   (min, avg, max) = (336.317, 403.598, 672.657), stdev = 150.409
[info]   CI (99.9%): [≈ 0, 982.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   15520.535 ±(99.9%) 22400.527 B/op [Average]
[info]   (min, avg, max) = (12910.664, 15520.535, 25926.894), stdev = 5817.346
[info]   CI (99.9%): [≈ 0, 37921.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 7.000), stdev = 1.342
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala
[info] # Run progress: 19.46% complete, ETA 01:03:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36110.375 ops/s
[info] # Warmup Iteration   2: 43436.224 ops/s
[info] # Warmup Iteration   3: 44498.788 ops/s
[info] Iteration   1: 44596.069 ops/s
[info]                  ·gc.alloc.rate:            391.869 MB/sec
[info]                  ·gc.alloc.rate.norm:       13832.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.328 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11871.559 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 44390.871 ops/s
[info]                  ·gc.alloc.rate:            390.200 MB/sec
[info]                  ·gc.alloc.rate.norm:       13832.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.450 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11926.640 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 44533.065 ops/s
[info]                  ·gc.alloc.rate:                   391.407 MB/sec
[info]                  ·gc.alloc.rate.norm:              13832.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:             336.414 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        11888.617 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 23.542 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 44569.907 ops/s
[info]                  ·gc.alloc.rate:            391.632 MB/sec
[info]                  ·gc.alloc.rate.norm:       13832.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.994 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11902.271 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 44412.914 ops/s
[info]                  ·gc.alloc.rate:            390.245 MB/sec
[info]                  ·gc.alloc.rate.norm:       13832.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.339 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23866.146 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala":
[info]   44500.565 ±(99.9%) 358.653 ops/s [Average]
[info]   (min, avg, max) = (44390.871, 44500.565, 44596.069), stdev = 93.141
[info]   CI (99.9%): [44141.912, 44859.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   391.070 ±(99.9%) 3.047 MB/sec [Average]
[info]   (min, avg, max) = (390.200, 391.070, 391.869), stdev = 0.791
[info]   CI (99.9%): [388.023, 394.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   13832.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13832.009, 13832.009, 13832.010), stdev = 0.001
[info]   CI (99.9%): [13832.008, 13832.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   403.905 ±(99.9%) 579.978 MB/sec [Average]
[info]   (min, avg, max) = (336.328, 403.905, 673.339), stdev = 150.619
[info]   CI (99.9%): [≈ 0, 983.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   14291.047 ±(99.9%) 20611.269 B/op [Average]
[info]   (min, avg, max) = (11871.559, 14291.047, 23866.146), stdev = 5352.681
[info]   CI (99.9%): [≈ 0, 34902.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   4.708 ±(99.9%) 40.540 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.708, 23.542), stdev = 10.528
[info]   CI (99.9%): [≈ 0, 45.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 6.000), stdev = 1.342
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 19.73% complete, ETA 01:03:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36079.358 ops/s
[info] # Warmup Iteration   2: 41513.161 ops/s
[info] # Warmup Iteration   3: 43563.830 ops/s
[info] Iteration   1: 43762.382 ops/s
[info]                  ·gc.alloc.rate:                   334.611 MB/sec
[info]                  ·gc.alloc.rate.norm:              12032.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:             336.432 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        12097.480 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 23.955 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 44109.858 ops/s
[info]                  ·gc.alloc.rate:            337.173 MB/sec
[info]                  ·gc.alloc.rate.norm:       12032.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.000 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12025.826 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 44158.242 ops/s
[info]                  ·gc.alloc.rate:            337.663 MB/sec
[info]                  ·gc.alloc.rate.norm:       12032.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.472 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11989.559 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 43863.301 ops/s
[info]                  ·gc.alloc.rate:            335.263 MB/sec
[info]                  ·gc.alloc.rate.norm:       12032.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.319 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12069.905 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   5: 44061.312 ops/s
[info]                  ·gc.alloc.rate:            336.789 MB/sec
[info]                  ·gc.alloc.rate.norm:       12032.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.339 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12015.950 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc":
[info]   43991.019 ±(99.9%) 654.650 ops/s [Average]
[info]   (min, avg, max) = (43762.382, 43991.019, 44158.242), stdev = 170.010
[info]   CI (99.9%): [43336.369, 44645.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   336.300 ±(99.9%) 5.016 MB/sec [Average]
[info]   (min, avg, max) = (334.611, 336.300, 337.663), stdev = 1.303
[info]   CI (99.9%): [331.284, 341.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   12032.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (12032.009, 12032.009, 12032.009), stdev = 0.001
[info]   CI (99.9%): [12032.009, 12032.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   336.512 ±(99.9%) 1.078 MB/sec [Average]
[info]   (min, avg, max) = (336.319, 336.512, 337.000), stdev = 0.280
[info]   CI (99.9%): [335.434, 337.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   12039.744 ±(99.9%) 166.976 B/op [Average]
[info]   (min, avg, max) = (11989.559, 12039.744, 12097.480), stdev = 43.363
[info]   CI (99.9%): [11872.768, 12206.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm":
[info]   4.791 ±(99.9%) 41.253 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.791, 23.955), stdev = 10.713
[info]   CI (99.9%): [≈ 0, 46.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce
[info] # Run progress: 20.00% complete, ETA 01:03:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14134.530 ops/s
[info] # Warmup Iteration   2: 18549.428 ops/s
[info] # Warmup Iteration   3: 19036.930 ops/s
[info] Iteration   1: 18980.392 ops/s
[info]                  ·gc.alloc.rate:                   711.551 MB/sec
[info]                  ·gc.alloc.rate.norm:              59016.042 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.582 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        55949.828 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 55.232 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 18667.763 ops/s
[info]                  ·gc.alloc.rate:                   699.852 MB/sec
[info]                  ·gc.alloc.rate.norm:              59016.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1012.307 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        85364.229 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 56.161 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 18792.660 ops/s
[info]                  ·gc.alloc.rate:                   704.715 MB/sec
[info]                  ·gc.alloc.rate.norm:              59016.029 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.154 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        56456.635 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 55.787 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 18779.318 ops/s
[info]                  ·gc.alloc.rate:            704.118 MB/sec
[info]                  ·gc.alloc.rate.norm:       59016.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.714 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 56551.535 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 18889.514 ops/s
[info]                  ·gc.alloc.rate:                   708.314 MB/sec
[info]                  ·gc.alloc.rate.norm:              59016.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.117 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        56166.777 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 277.504 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce":
[info]   18821.930 ±(99.9%) 456.093 ops/s [Average]
[info]   (min, avg, max) = (18667.763, 18821.930, 18980.392), stdev = 118.446
[info]   CI (99.9%): [18365.836, 19278.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate":
[info]   705.710 ±(99.9%) 17.085 MB/sec [Average]
[info]   (min, avg, max) = (699.852, 705.710, 711.551), stdev = 4.437
[info]   CI (99.9%): [688.626, 722.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   59016.027 ±(99.9%) 0.034 B/op [Average]
[info]   (min, avg, max) = (59016.022, 59016.027, 59016.042), stdev = 0.009
[info]   CI (99.9%): [59015.994, 59016.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   741.975 ±(99.9%) 581.911 MB/sec [Average]
[info]   (min, avg, max) = (674.117, 741.975, 1012.307), stdev = 151.120
[info]   CI (99.9%): [160.064, 1323.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   62097.801 ±(99.9%) 50091.132 B/op [Average]
[info]   (min, avg, max) = (55949.828, 62097.801, 85364.229), stdev = 13008.508
[info]   CI (99.9%): [12006.669, 112188.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 5.000 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 3.331), stdev = 1.299
[info]   CI (99.9%): [≈ 0, 6.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   88.937 ±(99.9%) 416.406 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 88.937, 277.504), stdev = 108.139
[info]   CI (99.9%): [≈ 0, 505.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 9.000), stdev = 1.304
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala
[info] # Run progress: 20.27% complete, ETA 01:03:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11392.857 ops/s
[info] # Warmup Iteration   2: 18166.661 ops/s
[info] # Warmup Iteration   3: 18100.482 ops/s
[info] Iteration   1: 18672.062 ops/s
[info]                  ·gc.alloc.rate:            529.794 MB/sec
[info]                  ·gc.alloc.rate.norm:       44656.487 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.344 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 28350.513 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 18692.120 ops/s
[info]                  ·gc.alloc.rate:            530.511 MB/sec
[info]                  ·gc.alloc.rate.norm:       44680.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.595 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 56646.436 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 18798.370 ops/s
[info]                  ·gc.alloc.rate:            533.758 MB/sec
[info]                  ·gc.alloc.rate.norm:       44680.027 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.466 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 28165.038 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 18621.859 ops/s
[info]                  ·gc.alloc.rate:            528.588 MB/sec
[info]                  ·gc.alloc.rate.norm:       44678.266 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.738 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 56862.376 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 18742.496 ops/s
[info]                  ·gc.alloc.rate:            531.993 MB/sec
[info]                  ·gc.alloc.rate.norm:       44680.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.356 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 28249.180 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala":
[info]   18705.381 ±(99.9%) 260.355 ops/s [Average]
[info]   (min, avg, max) = (18621.859, 18705.381, 18798.370), stdev = 67.613
[info]   CI (99.9%): [18445.027, 18965.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   530.929 ±(99.9%) 7.721 MB/sec [Average]
[info]   (min, avg, max) = (528.588, 530.929, 533.758), stdev = 2.005
[info]   CI (99.9%): [523.208, 538.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   44674.965 ±(99.9%) 39.883 B/op [Average]
[info]   (min, avg, max) = (44656.487, 44674.965, 44680.027), stdev = 10.357
[info]   CI (99.9%): [44635.082, 44714.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   470.900 ±(99.9%) 709.239 MB/sec [Average]
[info]   (min, avg, max) = (336.344, 470.900, 672.738), stdev = 184.187
[info]   CI (99.9%): [≈ 0, 1180.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   39654.709 ±(99.9%) 60109.097 B/op [Average]
[info]   (min, avg, max) = (28165.038, 39654.709, 56862.376), stdev = 15610.141
[info]   CI (99.9%): [≈ 0, 99763.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 8.000), stdev = 1.949
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala
[info] # Run progress: 20.54% complete, ETA 01:02:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 74297.283 ops/s
[info] # Warmup Iteration   2: 77584.064 ops/s
[info] # Warmup Iteration   3: 78972.980 ops/s
[info] Iteration   1: 77864.513 ops/s
[info]                  ·gc.alloc.rate:            202.656 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      338.418 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6839.973 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   2: 78283.254 ops/s
[info]                  ·gc.alloc.rate:            203.690 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.650 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6789.803 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 79054.798 ops/s
[info]                  ·gc.alloc.rate:      205.700 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 78932.553 ops/s
[info]                  ·gc.alloc.rate:            205.391 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.674 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6734.072 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 79299.758 ops/s
[info]                  ·gc.alloc.rate:      206.331 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala":
[info]   78686.975 ±(99.9%) 2286.631 ops/s [Average]
[info]   (min, avg, max) = (77864.513, 78686.975, 79299.758), stdev = 593.831
[info]   CI (99.9%): [76400.345, 80973.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   204.754 ±(99.9%) 5.877 MB/sec [Average]
[info]   (min, avg, max) = (202.656, 204.754, 206.331), stdev = 1.526
[info]   CI (99.9%): [198.876, 210.631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.005, 4096.005, 4096.006), stdev = 0.001
[info]   CI (99.9%): [4096.004, 4096.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   202.748 ±(99.9%) 712.690 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 202.748, 338.418), stdev = 185.083
[info]   CI (99.9%): [≈ 0, 915.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   4072.770 ±(99.9%) 14317.086 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4072.770, 6839.973), stdev = 3718.102
[info]   CI (99.9%): [≈ 0, 18389.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson
[info] # Run progress: 20.81% complete, ETA 01:02:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8795.403 ops/s
[info] # Warmup Iteration   2: 15618.925 ops/s
[info] # Warmup Iteration   3: 15716.531 ops/s
[info] Iteration   1: 15861.967 ops/s
[info]                  ·gc.alloc.rate:                   1028.397 MB/sec
[info]                  ·gc.alloc.rate.norm:              102048.028 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.357 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        100059.502 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 66.089 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 15760.031 ops/s
[info]                  ·gc.alloc.rate:            1022.204 MB/sec
[info]                  ·gc.alloc.rate.norm:       102048.427 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.497 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 100779.841 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 15975.112 ops/s
[info]                  ·gc.alloc.rate:                                  1035.885 MB/sec
[info]                  ·gc.alloc.rate.norm:                             102048.026 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.083 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 8.183 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.244 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       99817.505 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                393.757 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   4: 16106.989 ops/s
[info]                  ·gc.alloc.rate:                                  1044.154 MB/sec
[info]                  ·gc.alloc.rate.norm:                             102048.032 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.029 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.805 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.954 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       99780.696 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 16105.683 ops/s
[info]                  ·gc.alloc.rate:                                  1044.030 MB/sec
[info]                  ·gc.alloc.rate.norm:                             102048.029 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.354 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.897 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       99786.890 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson":
[info]   15961.956 ±(99.9%) 585.996 ops/s [Average]
[info]   (min, avg, max) = (15760.031, 15961.956, 16106.989), stdev = 152.181
[info]   CI (99.9%): [15375.961, 16547.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1034.934 ±(99.9%) 37.206 MB/sec [Average]
[info]   (min, avg, max) = (1022.204, 1034.934, 1044.154), stdev = 9.662
[info]   CI (99.9%): [997.728, 1072.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   102048.108 ±(99.9%) 0.687 B/op [Average]
[info]   (min, avg, max) = (102048.026, 102048.108, 102048.427), stdev = 0.178
[info]   CI (99.9%): [102047.422, 102048.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.023 ±(99.9%) 0.137 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.083), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.268 ±(99.9%) 13.509 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.268, 8.183), stdev = 3.508
[info]   CI (99.9%): [≈ 0, 15.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1014.590 ±(99.9%) 23.334 MB/sec [Average]
[info]   (min, avg, max) = (1008.357, 1014.590, 1020.954), stdev = 6.060
[info]   CI (99.9%): [991.256, 1037.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   100044.887 ±(99.9%) 1643.230 B/op [Average]
[info]   (min, avg, max) = (99780.696, 100044.887, 100779.841), stdev = 426.742
[info]   CI (99.9%): [98401.657, 101688.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.689 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.997), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   91.969 ±(99.9%) 658.902 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 91.969, 393.757), stdev = 171.115
[info]   CI (99.9%): [≈ 0, 750.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.600, 12.000), stdev = 4.827
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce
[info] # Run progress: 21.08% complete, ETA 01:02:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42654.334 ops/s
[info] # Warmup Iteration   2: 57212.567 ops/s
[info] # Warmup Iteration   3: 58279.645 ops/s
[info] Iteration   1: 58729.589 ops/s
[info]                  ·gc.alloc.rate:            889.739 MB/sec
[info]                  ·gc.alloc.rate.norm:       23848.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.030 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18066.277 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 58305.768 ops/s
[info]                  ·gc.alloc.rate:                   883.532 MB/sec
[info]                  ·gc.alloc.rate.norm:              23848.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1011.958 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        27314.440 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 17.982 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 58675.841 ops/s
[info]                  ·gc.alloc.rate:            888.929 MB/sec
[info]                  ·gc.alloc.rate.norm:       23848.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.054 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 27124.352 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 58751.234 ops/s
[info]                  ·gc.alloc.rate:                                  890.428 MB/sec
[info]                  ·gc.alloc.rate.norm:                             23848.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.016 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.426 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            677.643 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       18149.049 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                89.228 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 58984.372 ops/s
[info]                  ·gc.alloc.rate:                                  893.983 MB/sec
[info]                  ·gc.alloc.rate.norm:                             23848.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.099 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.631 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.488 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       27249.360 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce":
[info]   58689.360 ±(99.9%) 942.827 ops/s [Average]
[info]   (min, avg, max) = (58305.768, 58689.360, 58984.372), stdev = 244.849
[info]   CI (99.9%): [57746.533, 59632.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate":
[info]   889.322 ±(99.9%) 14.510 MB/sec [Average]
[info]   (min, avg, max) = (883.532, 889.322, 893.983), stdev = 3.768
[info]   CI (99.9%): [874.812, 903.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   23848.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (23848.007, 23848.007, 23848.008), stdev = 0.001
[info]   CI (99.9%): [23848.006, 23848.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.023 ±(99.9%) 0.165 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.099), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.611 ±(99.9%) 4.405 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.611, 2.631), stdev = 1.144
[info]   CI (99.9%): [≈ 0, 5.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   879.234 ±(99.9%) 715.163 MB/sec [Average]
[info]   (min, avg, max) = (674.030, 879.234, 1021.488), stdev = 185.726
[info]   CI (99.9%): [164.071, 1594.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   23580.696 ±(99.9%) 19240.610 B/op [Average]
[info]   (min, avg, max) = (18066.277, 23580.696, 27314.440), stdev = 4996.725
[info]   CI (99.9%): [4340.086, 42821.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.800 ±(99.9%) 5.562 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.800, 3.332), stdev = 1.445
[info]   CI (99.9%): [≈ 0, 6.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   21.442 ±(99.9%) 148.964 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21.442, 89.228), stdev = 38.685
[info]   CI (99.9%): [≈ 0, 170.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.800, 10.000), stdev = 2.864
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala
[info] # Run progress: 21.35% complete, ETA 01:02:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 51732.676 ops/s
[info] # Warmup Iteration   2: 85469.312 ops/s
[info] # Warmup Iteration   3: 89984.786 ops/s
[info] Iteration   1: 90324.647 ops/s
[info]                  ·gc.alloc.rate:                   1071.226 MB/sec
[info]                  ·gc.alloc.rate.norm:              18664.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.630 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        17573.381 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 11.607 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 89982.616 ops/s
[info]                  ·gc.alloc.rate:                   1066.900 MB/sec
[info]                  ·gc.alloc.rate.norm:              18664.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.373 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        17640.162 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 11.651 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 90755.332 ops/s
[info]                  ·gc.alloc.rate:                                  1076.509 MB/sec
[info]                  ·gc.alloc.rate.norm:                             18664.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.089 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.546 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.430 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       17639.726 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                69.311 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 88754.357 ops/s
[info]                  ·gc.alloc.rate:                                  1052.333 MB/sec
[info]                  ·gc.alloc.rate.norm:                             18664.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.026 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.465 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.973 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       18107.816 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 91009.681 ops/s
[info]                  ·gc.alloc.rate:            1079.106 MB/sec
[info]                  ·gc.alloc.rate.norm:       18664.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.023 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 17659.427 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala":
[info]   90165.327 ±(99.9%) 3395.693 ops/s [Average]
[info]   (min, avg, max) = (88754.357, 90165.327, 91009.681), stdev = 881.851
[info]   CI (99.9%): [86769.634, 93561.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1069.215 ±(99.9%) 40.635 MB/sec [Average]
[info]   (min, avg, max) = (1052.333, 1069.215, 1079.106), stdev = 10.553
[info]   CI (99.9%): [1028.580, 1109.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   18664.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (18664.004, 18664.005, 18664.005), stdev = 0.001
[info]   CI (99.9%): [18664.004, 18664.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.023 ±(99.9%) 0.149 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.089), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.402 ±(99.9%) 2.580 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.402, 1.546), stdev = 0.670
[info]   CI (99.9%): [≈ 0, 2.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1015.286 ±(99.9%) 24.502 MB/sec [Average]
[info]   (min, avg, max) = (1008.373, 1015.286, 1021.023), stdev = 6.363
[info]   CI (99.9%): [990.784, 1039.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   17724.102 ±(99.9%) 835.468 B/op [Average]
[info]   (min, avg, max) = (17573.381, 17724.102, 18107.816), stdev = 216.968
[info]   CI (99.9%): [16888.634, 18559.570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 6.440 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 3.998), stdev = 1.672
[info]   CI (99.9%): [≈ 0, 7.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   18.514 ±(99.9%) 111.614 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18.514, 69.311), stdev = 28.986
[info]   CI (99.9%): [≈ 0, 130.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.000, 12.000), stdev = 4.528
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala
[info] # Run progress: 21.62% complete, ETA 01:01:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 249762.845 ops/s
[info] # Warmup Iteration   2: 277114.463 ops/s
[info] # Warmup Iteration   3: 286362.570 ops/s
[info] Iteration   1: 284523.433 ops/s
[info]                  ·gc.alloc.rate:                   451.137 MB/sec
[info]                  ·gc.alloc.rate.norm:              2496.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.288 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3725.097 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.685 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 283172.858 ops/s
[info]                  ·gc.alloc.rate:                   449.005 MB/sec
[info]                  ·gc.alloc.rate.norm:              2496.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             336.337 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1869.687 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.702 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 286445.569 ops/s
[info]                  ·gc.alloc.rate:            454.274 MB/sec
[info]                  ·gc.alloc.rate.norm:       2496.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.054 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1851.935 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 285441.106 ops/s
[info]                  ·gc.alloc.rate:            452.632 MB/sec
[info]                  ·gc.alloc.rate.norm:       2496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.387 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3713.340 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 286364.675 ops/s
[info]                  ·gc.alloc.rate:            454.069 MB/sec
[info]                  ·gc.alloc.rate.norm:       2496.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.339 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1848.843 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala":
[info]   285189.528 ±(99.9%) 5284.138 ops/s [Average]
[info]   (min, avg, max) = (283172.858, 285189.528, 286445.569), stdev = 1372.274
[info]   CI (99.9%): [279905.391, 290473.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   452.223 ±(99.9%) 8.462 MB/sec [Average]
[info]   (min, avg, max) = (449.005, 452.223, 454.274), stdev = 2.198
[info]   CI (99.9%): [443.761, 460.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2496.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2496.001, 2496.001, 2496.002), stdev = 0.001
[info]   CI (99.9%): [2496.001, 2496.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   471.281 ±(99.9%) 710.259 MB/sec [Average]
[info]   (min, avg, max) = (336.337, 471.281, 673.387), stdev = 184.452
[info]   CI (99.9%): [≈ 0, 1181.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   2601.780 ±(99.9%) 3928.104 B/op [Average]
[info]   (min, avg, max) = (1848.843, 2601.780, 3725.097), stdev = 1020.116
[info]   CI (99.9%): [≈ 0, 6529.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.477 ±(99.9%) 7.790 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.477, 3.702), stdev = 2.023
[info]   CI (99.9%): [≈ 0, 9.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 6.000), stdev = 1.643
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 21.89% complete, ETA 01:01:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 291309.273 ops/s
[info] # Warmup Iteration   2: 329478.889 ops/s
[info] # Warmup Iteration   3: 315709.354 ops/s
[info] Iteration   1: 331235.761 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 331276.171 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 331313.960 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 331273.665 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 330837.031 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc":
[info]   331187.318 ±(99.9%) 761.505 ops/s [Average]
[info]   (min, avg, max) = (330837.031, 331187.318, 331313.960), stdev = 197.760
[info]   CI (99.9%): [330425.813, 331948.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson
[info] # Run progress: 22.16% complete, ETA 01:01:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 52167.593 ops/s
[info] # Warmup Iteration   2: 76614.791 ops/s
[info] # Warmup Iteration   3: 77459.663 ops/s
[info] Iteration   1: 78490.511 ops/s
[info]                  ·gc.alloc.rate:            1070.907 MB/sec
[info]                  ·gc.alloc.rate.norm:       21472.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.266 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 20236.076 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 76434.268 ops/s
[info]                  ·gc.alloc.rate:            1042.753 MB/sec
[info]                  ·gc.alloc.rate.norm:       21472.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.149 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 20780.042 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 77777.898 ops/s
[info]                  ·gc.alloc.rate:                                  1060.944 MB/sec
[info]                  ·gc.alloc.rate.norm:                             21472.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.097 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.955 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.024 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       20502.167 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                80.876 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   4: 79123.943 ops/s
[info]                  ·gc.alloc.rate:                                  1079.396 MB/sec
[info]                  ·gc.alloc.rate.norm:                             21472.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.053 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.062 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.509 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       27083.962 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 77582.525 ops/s
[info]                  ·gc.alloc.rate:            1058.312 MB/sec
[info]                  ·gc.alloc.rate.norm:       21472.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.951 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 20713.980 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson":
[info]   77881.829 ±(99.9%) 3902.831 ops/s [Average]
[info]   (min, avg, max) = (76434.268, 77881.829, 79123.943), stdev = 1013.553
[info]   CI (99.9%): [73978.997, 81784.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1062.463 ±(99.9%) 53.288 MB/sec [Average]
[info]   (min, avg, max) = (1042.753, 1062.463, 1079.396), stdev = 13.839
[info]   CI (99.9%): [1009.174, 1115.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   21472.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (21472.005, 21472.005, 21472.006), stdev = 0.001
[info]   CI (99.9%): [21472.004, 21472.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.030 ±(99.9%) 0.169 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.097), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.603 ±(99.9%) 3.405 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.603, 1.955), stdev = 0.884
[info]   CI (99.9%): [≈ 0, 4.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1082.780 ±(99.9%) 600.270 MB/sec [Average]
[info]   (min, avg, max) = (1009.149, 1082.780, 1361.509), stdev = 155.888
[info]   CI (99.9%): [482.510, 1683.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   21863.245 ±(99.9%) 11267.697 B/op [Average]
[info]   (min, avg, max) = (20236.076, 21863.245, 27083.962), stdev = 2926.185
[info]   CI (99.9%): [10595.548, 33130.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   16.175 ±(99.9%) 139.274 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16.175, 80.876), stdev = 36.169
[info]   CI (99.9%): [≈ 0, 155.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.400, 11.000), stdev = 4.099
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce
[info] # Run progress: 22.43% complete, ETA 01:01:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20326.204 ops/s
[info] # Warmup Iteration   2: 27024.345 ops/s
[info] # Warmup Iteration   3: 27935.744 ops/s
[info] Iteration   1: 27268.616 ops/s
[info]                  ·gc.alloc.rate:            566.655 MB/sec
[info]                  ·gc.alloc.rate.norm:       32712.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.999 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 38908.771 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 27770.328 ops/s
[info]                  ·gc.alloc.rate:            576.860 MB/sec
[info]                  ·gc.alloc.rate.norm:       32700.044 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.982 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 38205.541 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 27880.218 ops/s
[info]                  ·gc.alloc.rate:            579.226 MB/sec
[info]                  ·gc.alloc.rate.norm:       32696.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.068 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19026.732 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 27961.423 ops/s
[info]                  ·gc.alloc.rate:            580.827 MB/sec
[info]                  ·gc.alloc.rate.norm:       32696.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.065 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 37944.608 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 27016.964 ops/s
[info]                  ·gc.alloc.rate:            561.198 MB/sec
[info]                  ·gc.alloc.rate.norm:       32696.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.038 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 39270.184 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce":
[info]   27579.510 ±(99.9%) 1594.426 ops/s [Average]
[info]   (min, avg, max) = (27016.964, 27579.510, 27961.423), stdev = 414.067
[info]   CI (99.9%): [25985.084, 29173.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   572.953 ±(99.9%) 33.037 MB/sec [Average]
[info]   (min, avg, max) = (561.198, 572.953, 580.827), stdev = 8.580
[info]   CI (99.9%): [539.916, 605.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   32700.022 ±(99.9%) 26.684 B/op [Average]
[info]   (min, avg, max) = (32696.015, 32700.022, 32712.019), stdev = 6.930
[info]   CI (99.9%): [32673.338, 32726.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   606.630 ±(99.9%) 580.254 MB/sec [Average]
[info]   (min, avg, max) = (337.068, 606.630, 674.065), stdev = 150.690
[info]   CI (99.9%): [26.377, 1186.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   34671.167 ±(99.9%) 33737.871 B/op [Average]
[info]   (min, avg, max) = (19026.732, 34671.167, 39270.184), stdev = 8761.618
[info]   CI (99.9%): [933.296, 68409.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 7.000), stdev = 1.225
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala
[info] # Run progress: 22.70% complete, ETA 01:01:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16971.877 ops/s
[info] # Warmup Iteration   2: 28305.854 ops/s
[info] # Warmup Iteration   3: 27982.946 ops/s
[info] Iteration   1: 28169.232 ops/s
[info]                  ·gc.alloc.rate:            370.230 MB/sec
[info]                  ·gc.alloc.rate.norm:       20688.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.342 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18794.352 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 28107.309 ops/s
[info]                  ·gc.alloc.rate:            369.366 MB/sec
[info]                  ·gc.alloc.rate.norm:       20686.850 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.654 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 37672.943 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 28318.390 ops/s
[info]                  ·gc.alloc.rate:            372.201 MB/sec
[info]                  ·gc.alloc.rate.norm:       20688.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.353 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18695.484 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 28142.345 ops/s
[info]                  ·gc.alloc.rate:            369.884 MB/sec
[info]                  ·gc.alloc.rate.norm:       20688.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.349 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18812.380 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 28116.567 ops/s
[info]                  ·gc.alloc.rate:                   369.617 MB/sec
[info]                  ·gc.alloc.rate.norm:              20688.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:             335.751 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        18792.486 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 37.287 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala":
[info]   28170.769 ±(99.9%) 331.062 ops/s [Average]
[info]   (min, avg, max) = (28107.309, 28170.769, 28318.390), stdev = 85.976
[info]   CI (99.9%): [27839.707, 28501.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   370.260 ±(99.9%) 4.358 MB/sec [Average]
[info]   (min, avg, max) = (369.366, 370.260, 372.201), stdev = 1.132
[info]   CI (99.9%): [365.901, 374.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   20687.783 ±(99.9%) 2.007 B/op [Average]
[info]   (min, avg, max) = (20686.850, 20687.783, 20688.018), stdev = 0.521
[info]   CI (99.9%): [20685.775, 20689.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   403.490 ±(99.9%) 579.397 MB/sec [Average]
[info]   (min, avg, max) = (335.751, 403.490, 672.654), stdev = 150.468
[info]   CI (99.9%): [≈ 0, 982.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   22553.529 ±(99.9%) 32546.155 B/op [Average]
[info]   (min, avg, max) = (18695.484, 22553.529, 37672.943), stdev = 8452.133
[info]   CI (99.9%): [≈ 0, 55099.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   7.457 ±(99.9%) 64.210 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.457, 37.287), stdev = 16.675
[info]   CI (99.9%): [≈ 0, 71.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 8.000), stdev = 1.789
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala
[info] # Run progress: 22.97% complete, ETA 01:00:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 102397.932 ops/s
[info] # Warmup Iteration   2: 118511.939 ops/s
[info] # Warmup Iteration   3: 108338.132 ops/s
[info] Iteration   1: 117603.711 ops/s
[info]                  ·gc.alloc.rate:            459.061 MB/sec
[info]                  ·gc.alloc.rate.norm:       6144.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.068 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9021.619 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 120510.594 ops/s
[info]                  ·gc.alloc.rate:            470.338 MB/sec
[info]                  ·gc.alloc.rate.norm:       6144.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.996 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4402.163 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 119545.979 ops/s
[info]                  ·gc.alloc.rate:            466.573 MB/sec
[info]                  ·gc.alloc.rate.norm:       6144.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.959 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8874.941 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 120860.826 ops/s
[info]                  ·gc.alloc.rate:            471.772 MB/sec
[info]                  ·gc.alloc.rate.norm:       6144.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.028 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4389.198 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 120910.556 ops/s
[info]                  ·gc.alloc.rate:            471.928 MB/sec
[info]                  ·gc.alloc.rate.norm:       6144.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.997 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4387.347 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala":
[info]   119886.333 ±(99.9%) 5347.605 ops/s [Average]
[info]   (min, avg, max) = (117603.711, 119886.333, 120910.556), stdev = 1388.756
[info]   CI (99.9%): [114538.728, 125233.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   467.934 ±(99.9%) 20.829 MB/sec [Average]
[info]   (min, avg, max) = (459.061, 467.934, 471.928), stdev = 5.409
[info]   CI (99.9%): [447.105, 488.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6144.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6144.003, 6144.004, 6144.004), stdev = 0.001
[info]   CI (99.9%): [6144.003, 6144.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   471.810 ±(99.9%) 710.775 MB/sec [Average]
[info]   (min, avg, max) = (336.996, 471.810, 674.068), stdev = 184.586
[info]   CI (99.9%): [≈ 0, 1182.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   6215.054 ±(99.9%) 9609.776 B/op [Average]
[info]   (min, avg, max) = (4387.347, 6215.054, 9021.619), stdev = 2495.628
[info]   CI (99.9%): [≈ 0, 15824.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 6.000), stdev = 1.414
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson
[info] # Run progress: 23.24% complete, ETA 01:00:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9287.252 ops/s
[info] # Warmup Iteration   2: 21358.425 ops/s
[info] # Warmup Iteration   3: 21177.400 ops/s
[info] Iteration   1: 21314.494 ops/s
[info]                  ·gc.alloc.rate:            1176.983 MB/sec
[info]                  ·gc.alloc.rate.norm:       86904.029 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1342.932 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 99157.053 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   2: 21517.353 ops/s
[info]                  ·gc.alloc.rate:                   1187.934 MB/sec
[info]                  ·gc.alloc.rate.norm:              86904.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1007.647 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        73715.058 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 341.048 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   3: 21735.169 ops/s
[info]                  ·gc.alloc.rate:                                  1200.035 MB/sec
[info]                  ·gc.alloc.rate.norm:                             86904.024 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.070 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.063 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.430 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       98591.901 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 21815.075 ops/s
[info]                  ·gc.alloc.rate:            1204.383 MB/sec
[info]                  ·gc.alloc.rate.norm:       86904.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.015 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 73672.808 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   5: 21794.091 ops/s
[info]                  ·gc.alloc.rate:            1203.196 MB/sec
[info]                  ·gc.alloc.rate.norm:       86904.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.321 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 98325.046 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson":
[info]   21635.236 ±(99.9%) 826.624 ops/s [Average]
[info]   (min, avg, max) = (21314.494, 21635.236, 21815.075), stdev = 214.672
[info]   CI (99.9%): [20808.612, 22461.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1194.506 ±(99.9%) 45.312 MB/sec [Average]
[info]   (min, avg, max) = (1176.983, 1194.506, 1204.383), stdev = 11.767
[info]   CI (99.9%): [1149.195, 1239.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   86904.022 ±(99.9%) 0.016 B/op [Average]
[info]   (min, avg, max) = (86904.019, 86904.022, 86904.029), stdev = 0.004
[info]   CI (99.9%): [86904.006, 86904.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.014 ±(99.9%) 0.120 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.070), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.013 ±(99.9%) 8.719 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.013, 5.063), stdev = 2.264
[info]   CI (99.9%): [≈ 0, 9.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1218.869 ±(99.9%) 719.795 MB/sec [Average]
[info]   (min, avg, max) = (1007.647, 1218.869, 1361.430), stdev = 186.928
[info]   CI (99.9%): [499.074, 1938.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   88692.373 ±(99.9%) 52734.349 B/op [Average]
[info]   (min, avg, max) = (73672.808, 88692.373, 99157.053), stdev = 13694.943
[info]   CI (99.9%): [35958.025, 141426.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   68.210 ±(99.9%) 587.305 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 68.210, 341.048), stdev = 152.521
[info]   CI (99.9%): [≈ 0, 655.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.600, 19.000), stdev = 7.503
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce
[info] # Run progress: 23.51% complete, ETA 01:00:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 142478.711 ops/s
[info] # Warmup Iteration   2: 175240.135 ops/s
[info] # Warmup Iteration   3: 179851.945 ops/s
[info] Iteration   1: 177386.974 ops/s
[info]                  ·gc.alloc.rate:            619.283 MB/sec
[info]                  ·gc.alloc.rate.norm:       5496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.938 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5981.056 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 180002.531 ops/s
[info]                  ·gc.alloc.rate:            628.494 MB/sec
[info]                  ·gc.alloc.rate.norm:       5496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.012 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2947.074 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 179334.441 ops/s
[info]                  ·gc.alloc.rate:            626.158 MB/sec
[info]                  ·gc.alloc.rate.norm:       5496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.009 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5916.000 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 178795.299 ops/s
[info]                  ·gc.alloc.rate:            624.415 MB/sec
[info]                  ·gc.alloc.rate.norm:       5496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.170 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5933.931 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 176606.024 ops/s
[info]                  ·gc.alloc.rate:            616.587 MB/sec
[info]                  ·gc.alloc.rate.norm:       5496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.949 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6007.297 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce":
[info]   178425.054 ±(99.9%) 5390.551 ops/s [Average]
[info]   (min, avg, max) = (176606.024, 178425.054, 180002.531), stdev = 1399.909
[info]   CI (99.9%): [173034.503, 183815.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   622.988 ±(99.9%) 18.972 MB/sec [Average]
[info]   (min, avg, max) = (616.587, 622.988, 628.494), stdev = 4.927
[info]   CI (99.9%): [604.015, 641.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5496.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5496.002, 5496.002, 5496.002), stdev = 0.001
[info]   CI (99.9%): [5496.002, 5496.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   606.615 ±(99.9%) 580.342 MB/sec [Average]
[info]   (min, avg, max) = (337.012, 606.615, 674.170), stdev = 150.713
[info]   CI (99.9%): [26.274, 1186.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   5357.072 ±(99.9%) 5189.592 B/op [Average]
[info]   (min, avg, max) = (2947.074, 5357.072, 6007.297), stdev = 1347.721
[info]   CI (99.9%): [167.479, 10546.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 7.000), stdev = 1.643
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala
[info] # Run progress: 23.78% complete, ETA 01:00:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 191426.307 ops/s
[info] # Warmup Iteration   2: 296588.616 ops/s
[info] # Warmup Iteration   3: 298931.386 ops/s
[info] Iteration   1: 295071.859 ops/s
[info]                  ·gc.alloc.rate:            298.511 MB/sec
[info]                  ·gc.alloc.rate.norm:       1592.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.426 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1794.211 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 300518.476 ops/s
[info]                  ·gc.alloc.rate:            303.912 MB/sec
[info]                  ·gc.alloc.rate.norm:       1592.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.316 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1761.744 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 299008.260 ops/s
[info]                  ·gc.alloc.rate:            302.415 MB/sec
[info]                  ·gc.alloc.rate.norm:       1592.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.344 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1770.615 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 301868.473 ops/s
[info]                  ·gc.alloc.rate:      305.301 MB/sec
[info]                  ·gc.alloc.rate.norm: 1592.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 300896.669 ops/s
[info]                  ·gc.alloc.rate:            304.338 MB/sec
[info]                  ·gc.alloc.rate.norm:       1592.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.352 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1759.467 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala":
[info]   299472.748 ±(99.9%) 10268.334 ops/s [Average]
[info]   (min, avg, max) = (295071.859, 299472.748, 301868.473), stdev = 2666.654
[info]   CI (99.9%): [289204.413, 309741.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   302.895 ±(99.9%) 10.253 MB/sec [Average]
[info]   (min, avg, max) = (298.511, 302.895, 305.301), stdev = 2.663
[info]   CI (99.9%): [292.642, 313.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1592.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1592.001, 1592.001, 1592.001), stdev = 0.001
[info]   CI (99.9%): [1592.001, 1592.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   269.088 ±(99.9%) 579.232 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.088, 336.426), stdev = 150.425
[info]   CI (99.9%): [≈ 0, 848.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1417.207 ±(99.9%) 3051.105 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1417.207, 1794.211), stdev = 792.362
[info]   CI (99.9%): [≈ 0, 4468.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.400, 5.000), stdev = 2.074
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala
[info] # Run progress: 24.05% complete, ETA 01:00:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 412676.581 ops/s
[info] # Warmup Iteration   2: 458489.155 ops/s
[info] # Warmup Iteration   3: 478403.359 ops/s
[info] Iteration   1: 468773.879 ops/s
[info]                  ·gc.alloc.rate:                   359.728 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             336.329 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1129.425 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.236 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 478977.150 ops/s
[info]                  ·gc.alloc.rate:            367.549 MB/sec
[info]                  ·gc.alloc.rate.norm:       1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.968 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1107.494 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 477433.194 ops/s
[info]                  ·gc.alloc.rate:                   366.442 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             336.388 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1108.926 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.196 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 458732.644 ops/s
[info]                  ·gc.alloc.rate:            352.096 MB/sec
[info]                  ·gc.alloc.rate.norm:       1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.055 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1156.395 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 458394.298 ops/s
[info]                  ·gc.alloc.rate:            351.789 MB/sec
[info]                  ·gc.alloc.rate.norm:       1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.334 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1154.933 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala":
[info]   468462.233 ±(99.9%) 37883.710 ops/s [Average]
[info]   (min, avg, max) = (458394.298, 468462.233, 478977.150), stdev = 9838.279
[info]   CI (99.9%): [430578.523, 506345.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   359.521 ±(99.9%) 29.027 MB/sec [Average]
[info]   (min, avg, max) = (351.789, 359.521, 367.549), stdev = 7.538
[info]   CI (99.9%): [330.493, 388.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1208.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1208.001, 1208.001, 1208.001), stdev = 0.001
[info]   CI (99.9%): [1208.001, 1208.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   336.615 ±(99.9%) 1.403 MB/sec [Average]
[info]   (min, avg, max) = (336.329, 336.615, 337.055), stdev = 0.364
[info]   CI (99.9%): [335.212, 338.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1131.435 ±(99.9%) 91.509 B/op [Average]
[info]   (min, avg, max) = (1107.494, 1131.435, 1156.395), stdev = 23.765
[info]   CI (99.9%): [1039.926, 1222.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.886 ±(99.9%) 4.674 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.886, 2.236), stdev = 1.214
[info]   CI (99.9%): [≈ 0, 5.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 24.32% complete, ETA 00:59:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 457174.124 ops/s
[info] # Warmup Iteration   2: 508905.504 ops/s
[info] # Warmup Iteration   3: 507937.705 ops/s
[info] Iteration   1: 508179.096 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 509393.703 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 489137.808 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 509606.865 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 510046.494 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   505272.793 ±(99.9%) 34833.892 ops/s [Average]
[info]   (min, avg, max) = (489137.808, 505272.793, 510046.494), stdev = 9046.251
[info]   CI (99.9%): [470438.901, 540106.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson
[info] # Run progress: 24.59% complete, ETA 00:59:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 158453.468 ops/s
[info] # Warmup Iteration   2: 284080.131 ops/s
[info] # Warmup Iteration   3: 283745.569 ops/s
[info] Iteration   1: 285364.153 ops/s
[info]                  ·gc.alloc.rate:            785.984 MB/sec
[info]                  ·gc.alloc.rate.norm:       4336.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.623 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3710.629 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 278126.281 ops/s
[info]                  ·gc.alloc.rate:                   766.319 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.194 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3803.422 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.769 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 274515.279 ops/s
[info]                  ·gc.alloc.rate:            756.156 MB/sec
[info]                  ·gc.alloc.rate.norm:       4336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.654 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3857.179 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 284073.647 ops/s
[info]                  ·gc.alloc.rate:                   782.418 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1007.596 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5583.892 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      5.328 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 29.525 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   5: 279155.911 ops/s
[info]                  ·gc.alloc.rate:                                  769.057 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4336.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.032 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.181 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.760 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3838.173 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson":
[info]   280247.054 ±(99.9%) 17152.559 ops/s [Average]
[info]   (min, avg, max) = (274515.279, 280247.054, 285364.153), stdev = 4454.465
[info]   CI (99.9%): [263094.495, 297399.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   771.987 ±(99.9%) 47.004 MB/sec [Average]
[info]   (min, avg, max) = (756.156, 771.987, 785.984), stdev = 12.207
[info]   CI (99.9%): [724.982, 818.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4336.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4336.001, 4336.002, 4336.002), stdev = 0.001
[info]   CI (99.9%): [4336.001, 4336.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.006 ±(99.9%) 0.055 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.032), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.036 ±(99.9%) 0.311 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.036, 0.181), stdev = 0.081
[info]   CI (99.9%): [≈ 0, 0.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   741.165 ±(99.9%) 573.678 MB/sec [Average]
[info]   (min, avg, max) = (672.194, 741.165, 1007.596), stdev = 148.982
[info]   CI (99.9%): [167.487, 1314.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   4158.659 ±(99.9%) 3075.587 B/op [Average]
[info]   (min, avg, max) = (3710.629, 4158.659, 5583.892), stdev = 798.720
[info]   CI (99.9%): [1083.072, 7234.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.199 ±(99.9%) 8.957 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.199, 5.328), stdev = 2.326
[info]   CI (99.9%): [≈ 0, 10.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   6.659 ±(99.9%) 49.620 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.659, 29.525), stdev = 12.886
[info]   CI (99.9%): [≈ 0, 56.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.400, 13.000), stdev = 3.578
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce
[info] # Run progress: 24.86% complete, ETA 00:59:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27837.725 ops/s
[info] # Warmup Iteration   2: 35557.159 ops/s
[info] # Warmup Iteration   3: 35691.899 ops/s
[info] Iteration   1: 35136.182 ops/s
[info]                  ·gc.alloc.rate:                                  1566.697 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70176.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.027 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.201 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1351.572 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       60540.099 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                149.187 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   2: 35269.188 ops/s
[info]                  ·gc.alloc.rate:                                  1572.549 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70176.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.080 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.548 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.969 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       75951.457 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 36379.024 ops/s
[info]                  ·gc.alloc.rate:                                  1621.937 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70176.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.193 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.821 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       73632.312 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 35863.751 ops/s
[info]                  ·gc.alloc.rate:                                  1599.604 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70176.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.173 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.988 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       59751.585 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 36323.397 ops/s
[info]                  ·gc.alloc.rate:                                  1619.695 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70176.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.326 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.041 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       73743.784 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce":
[info]   35794.309 ±(99.9%) 2225.001 ops/s [Average]
[info]   (min, avg, max) = (35136.182, 35794.309, 36379.024), stdev = 577.826
[info]   CI (99.9%): [33569.307, 38019.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate":
[info]   1596.096 ±(99.9%) 99.220 MB/sec [Average]
[info]   (min, avg, max) = (1566.697, 1596.096, 1621.937), stdev = 25.767
[info]   CI (99.9%): [1496.876, 1695.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   70176.012 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (70176.011, 70176.012, 70176.015), stdev = 0.002
[info]   CI (99.9%): [70176.005, 70176.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.024 ±(99.9%) 0.124 MB/sec [Average]
[info]   (min, avg, max) = (0.004, 0.024, 0.080), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.088 ±(99.9%) 5.542 B/op [Average]
[info]   (min, avg, max) = (0.173, 1.088, 3.548), stdev = 1.439
[info]   CI (99.9%): [≈ 0, 6.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1563.878 ±(99.9%) 728.117 MB/sec [Average]
[info]   (min, avg, max) = (1351.572, 1563.878, 1702.041), stdev = 189.090
[info]   CI (99.9%): [835.761, 2291.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   68723.847 ±(99.9%) 30381.456 B/op [Average]
[info]   (min, avg, max) = (59751.585, 68723.847, 75951.457), stdev = 7889.968
[info]   CI (99.9%): [38342.391, 99105.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   29.837 ±(99.9%) 256.909 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 29.837, 149.187), stdev = 66.718
[info]   CI (99.9%): [≈ 0, 286.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 10.000), stdev = 2.828
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava
[info] # Run progress: 25.14% complete, ETA 00:59:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10041.639 ops/s
[info] # Warmup Iteration   2: 293982.100 ops/s
[info] # Warmup Iteration   3: 295869.750 ops/s
[info] Iteration   1: 279542.143 ops/s
[info]                  ·gc.alloc.rate:            289.930 MB/sec
[info]                  ·gc.alloc.rate.norm:       1632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.809 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1878.994 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 295118.890 ops/s
[info]                  ·gc.alloc.rate:            305.961 MB/sec
[info]                  ·gc.alloc.rate.norm:       1632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.656 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1779.722 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 294433.130 ops/s
[info]                  ·gc.alloc.rate:            305.288 MB/sec
[info]                  ·gc.alloc.rate.norm:       1632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.702 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1783.892 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 295156.149 ops/s
[info]                  ·gc.alloc.rate:            306.036 MB/sec
[info]                  ·gc.alloc.rate.norm:       1632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.684 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1779.439 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 295521.296 ops/s
[info]                  ·gc.alloc.rate:            306.488 MB/sec
[info]                  ·gc.alloc.rate.norm:       1632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.772 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1777.284 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava":
[info]   291954.322 ±(99.9%) 26761.018 ops/s [Average]
[info]   (min, avg, max) = (279542.143, 291954.322, 295521.296), stdev = 6949.751
[info]   CI (99.9%): [265193.304, 318715.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   302.741 ±(99.9%) 27.625 MB/sec [Average]
[info]   (min, avg, max) = (289.930, 302.741, 306.488), stdev = 7.174
[info]   CI (99.9%): [275.116, 330.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1632.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1632.001, 1632.001, 1632.001), stdev = 0.001
[info]   CI (99.9%): [1632.001, 1632.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   333.724 ±(99.9%) 0.247 MB/sec [Average]
[info]   (min, avg, max) = (333.656, 333.724, 333.809), stdev = 0.064
[info]   CI (99.9%): [333.478, 333.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   1799.866 ±(99.9%) 170.577 B/op [Average]
[info]   (min, avg, max) = (1777.284, 1799.866, 1878.994), stdev = 44.298
[info]   CI (99.9%): [1629.289, 1970.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala
[info] # Run progress: 25.41% complete, ETA 00:59:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 57503.693 ops/s
[info] # Warmup Iteration   2: 92814.182 ops/s
[info] # Warmup Iteration   3: 92528.992 ops/s
[info] Iteration   1: 93364.818 ops/s
[info]                  ·gc.alloc.rate:            1031.680 MB/sec
[info]                  ·gc.alloc.rate.norm:       17392.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.168 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 17012.494 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 95324.551 ops/s
[info]                  ·gc.alloc.rate:            1053.224 MB/sec
[info]                  ·gc.alloc.rate.norm:       17392.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.062 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16662.744 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   3: 98006.433 ops/s
[info]                  ·gc.alloc.rate:                                  1082.888 MB/sec
[info]                  ·gc.alloc.rate.norm:                             17392.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.086 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.385 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.035 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       16334.359 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                64.182 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 98277.072 ops/s
[info]                  ·gc.alloc.rate:                                  1085.853 MB/sec
[info]                  ·gc.alloc.rate.norm:                             17392.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.031 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.503 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.035 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       16353.830 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 98094.540 ops/s
[info]                  ·gc.alloc.rate:                                  1083.876 MB/sec
[info]                  ·gc.alloc.rate.norm:                             17392.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.068 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       16384.167 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala":
[info]   96613.483 ±(99.9%) 8417.983 ops/s [Average]
[info]   (min, avg, max) = (93364.818, 96613.483, 98277.072), stdev = 2186.123
[info]   CI (99.9%): [88195.500, 105031.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1067.504 ±(99.9%) 92.908 MB/sec [Average]
[info]   (min, avg, max) = (1031.680, 1067.504, 1085.853), stdev = 24.128
[info]   CI (99.9%): [974.596, 1160.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   17392.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (17392.004, 17392.004, 17392.005), stdev = 0.001
[info]   CI (99.9%): [17392.003, 17392.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.024 ±(99.9%) 0.144 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.086), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.382 ±(99.9%) 2.313 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.382, 1.385), stdev = 0.601
[info]   CI (99.9%): [≈ 0, 2.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1015.473 ±(99.9%) 23.227 MB/sec [Average]
[info]   (min, avg, max) = (1009.062, 1015.473, 1021.068), stdev = 6.032
[info]   CI (99.9%): [992.247, 1038.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   16549.519 ±(99.9%) 1121.150 B/op [Average]
[info]   (min, avg, max) = (16334.359, 16549.519, 17012.494), stdev = 291.159
[info]   CI (99.9%): [15428.368, 17670.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   12.836 ±(99.9%) 110.526 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12.836, 64.182), stdev = 28.703
[info]   CI (99.9%): [≈ 0, 123.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.400, 14.000), stdev = 5.367
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala
[info] # Run progress: 25.68% complete, ETA 00:58:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 143684.413 ops/s
[info] # Warmup Iteration   2: 149757.976 ops/s
[info] # Warmup Iteration   3: 150256.786 ops/s
[info] Iteration   1: 148840.141 ops/s
[info]                  ·gc.alloc.rate:            96.821 MB/sec
[info]                  ·gc.alloc.rate.norm:       1024.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      340.993 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3606.428 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   2: 150458.982 ops/s
[info]                  ·gc.alloc.rate:      97.889 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 150242.508 ops/s
[info]                  ·gc.alloc.rate:      97.739 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 149656.472 ops/s
[info]                  ·gc.alloc.rate:            97.357 MB/sec
[info]                  ·gc.alloc.rate.norm:       1024.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.014 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3544.735 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 150212.089 ops/s
[info]                  ·gc.alloc.rate:      97.715 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala":
[info]   149882.038 ±(99.9%) 2516.334 ops/s [Average]
[info]   (min, avg, max) = (148840.141, 149882.038, 150458.982), stdev = 653.484
[info]   CI (99.9%): [147365.704, 152398.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   97.504 ±(99.9%) 1.652 MB/sec [Average]
[info]   (min, avg, max) = (96.821, 97.504, 97.889), stdev = 0.429
[info]   CI (99.9%): [95.852, 99.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1024.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1024.003, 1024.003, 1024.003), stdev = 0.001
[info]   CI (99.9%): [1024.002, 1024.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   135.601 ±(99.9%) 715.008 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 135.601, 340.993), stdev = 185.685
[info]   CI (99.9%): [≈ 0, 850.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1430.233 ±(99.9%) 7541.671 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1430.233, 3606.428), stdev = 1958.548
[info]   CI (99.9%): [≈ 0, 8971.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 3.000), stdev = 1.414
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson
[info] # Run progress: 25.95% complete, ETA 00:58:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18677.369 ops/s
[info] # Warmup Iteration   2: 34946.350 ops/s
[info] # Warmup Iteration   3: 35400.791 ops/s
[info] Iteration   1: 36989.432 ops/s
[info]                  ·gc.alloc.rate:                                  1974.304 MB/sec
[info]                  ·gc.alloc.rate.norm:                             84016.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.018 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.774 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1697.677 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       72244.242 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                170.053 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   2: 37246.090 ops/s
[info]                  ·gc.alloc.rate:                                  1988.352 MB/sec
[info]                  ·gc.alloc.rate.norm:                             84016.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.275 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.461 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       86302.320 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 37196.566 ops/s
[info]                  ·gc.alloc.rate:                                  1985.249 MB/sec
[info]                  ·gc.alloc.rate.norm:                             84016.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.273 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.014 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       86418.311 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 37365.569 ops/s
[info]                  ·gc.alloc.rate:                                  1994.958 MB/sec
[info]                  ·gc.alloc.rate.norm:                             84016.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.331 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.612 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       86022.905 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 37002.072 ops/s
[info]                  ·gc.alloc.rate:                                  1974.935 MB/sec
[info]                  ·gc.alloc.rate.norm:                             84016.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.099 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.999 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       86868.978 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson":
[info]   37159.946 ±(99.9%) 624.000 ops/s [Average]
[info]   (min, avg, max) = (36989.432, 37159.946, 37365.569), stdev = 162.051
[info]   CI (99.9%): [36535.945, 37783.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1983.560 ±(99.9%) 34.214 MB/sec [Average]
[info]   (min, avg, max) = (1974.304, 1983.560, 1994.958), stdev = 8.885
[info]   CI (99.9%): [1949.345, 2017.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   84016.012 ±(99.9%) 0.005 B/op [Average]
[info]   (min, avg, max) = (84016.011, 84016.012, 84016.014), stdev = 0.001
[info]   CI (99.9%): [84016.007, 84016.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.008 ±(99.9%) 0.023 MB/sec [Average]
[info]   (min, avg, max) = (0.002, 0.008, 0.018), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.350 ±(99.9%) 0.971 B/op [Average]
[info]   (min, avg, max) = (0.099, 0.350, 0.774), stdev = 0.252
[info]   CI (99.9%): [≈ 0, 1.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1973.353 ±(99.9%) 593.413 MB/sec [Average]
[info]   (min, avg, max) = (1697.677, 1973.353, 2042.612), stdev = 154.107
[info]   CI (99.9%): [1379.940, 2566.765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   83571.351 ±(99.9%) 24410.716 B/op [Average]
[info]   (min, avg, max) = (72244.242, 83571.351, 86868.978), stdev = 6339.385
[info]   CI (99.9%): [59160.635, 107982.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   34.011 ±(99.9%) 292.842 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 34.011, 170.053), stdev = 76.050
[info]   CI (99.9%): [≈ 0, 326.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 10.000), stdev = 2.345
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce
[info] # Run progress: 26.22% complete, ETA 00:58:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 70096.461 ops/s
[info] # Warmup Iteration   2: 89238.347 ops/s
[info] # Warmup Iteration   3: 88632.119 ops/s
[info] Iteration   1: 89995.196 ops/s
[info]                  ·gc.alloc.rate:            434.520 MB/sec
[info]                  ·gc.alloc.rate.norm:       7600.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.020 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5894.672 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 87715.072 ops/s
[info]                  ·gc.alloc.rate:            423.526 MB/sec
[info]                  ·gc.alloc.rate.norm:       7600.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.059 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12095.736 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 88058.390 ops/s
[info]                  ·gc.alloc.rate:            425.170 MB/sec
[info]                  ·gc.alloc.rate.norm:       7600.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.021 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6024.315 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 88203.204 ops/s
[info]                  ·gc.alloc.rate:            426.054 MB/sec
[info]                  ·gc.alloc.rate.norm:       7600.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.166 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6014.413 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 87127.161 ops/s
[info]                  ·gc.alloc.rate:            420.740 MB/sec
[info]                  ·gc.alloc.rate.norm:       7600.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.068 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6088.607 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce":
[info]   88219.805 ±(99.9%) 4141.443 ops/s [Average]
[info]   (min, avg, max) = (87127.161, 88219.805, 89995.196), stdev = 1075.520
[info]   CI (99.9%): [84078.361, 92361.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate":
[info]   426.002 ±(99.9%) 19.922 MB/sec [Average]
[info]   (min, avg, max) = (420.740, 426.002, 434.520), stdev = 5.174
[info]   CI (99.9%): [406.080, 445.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   7600.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7600.005, 7600.005, 7600.005), stdev = 0.001
[info]   CI (99.9%): [7600.004, 7600.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   404.467 ±(99.9%) 580.319 MB/sec [Average]
[info]   (min, avg, max) = (337.020, 404.467, 674.059), stdev = 150.707
[info]   CI (99.9%): [≈ 0, 984.785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   7223.548 ±(99.9%) 10491.218 B/op [Average]
[info]   (min, avg, max) = (5894.672, 7223.548, 12095.736), stdev = 2724.536
[info]   CI (99.9%): [≈ 0, 17714.767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 6.000), stdev = 1.517
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava
[info] # Run progress: 26.49% complete, ETA 00:58:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5763.210 ops/s
[info] # Warmup Iteration   2: 113235.721 ops/s
[info] # Warmup Iteration   3: 112142.977 ops/s
[info] Iteration   1: 110140.627 ops/s
[info]                  ·gc.alloc.rate:            336.995 MB/sec
[info]                  ·gc.alloc.rate.norm:       4816.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.717 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4769.154 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 112768.650 ops/s
[info]                  ·gc.alloc.rate:            345.039 MB/sec
[info]                  ·gc.alloc.rate.norm:       4816.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.720 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4658.024 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 114508.253 ops/s
[info]                  ·gc.alloc.rate:            350.372 MB/sec
[info]                  ·gc.alloc.rate.norm:       4816.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.730 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4587.251 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 114285.056 ops/s
[info]                  ·gc.alloc.rate:            349.643 MB/sec
[info]                  ·gc.alloc.rate.norm:       4816.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.665 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4595.919 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 114203.471 ops/s
[info]                  ·gc.alloc.rate:            349.436 MB/sec
[info]                  ·gc.alloc.rate.norm:       4816.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.718 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4599.380 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava":
[info]   113181.211 ±(99.9%) 7058.317 ops/s [Average]
[info]   (min, avg, max) = (110140.627, 113181.211, 114508.253), stdev = 1833.023
[info]   CI (99.9%): [106122.894, 120239.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   346.297 ±(99.9%) 21.591 MB/sec [Average]
[info]   (min, avg, max) = (336.995, 346.297, 350.372), stdev = 5.607
[info]   CI (99.9%): [324.706, 367.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   4816.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4816.004, 4816.004, 4816.004), stdev = 0.001
[info]   CI (99.9%): [4816.003, 4816.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   333.710 ±(99.9%) 0.099 MB/sec [Average]
[info]   (min, avg, max) = (333.665, 333.710, 333.730), stdev = 0.026
[info]   CI (99.9%): [333.611, 333.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   4641.946 ±(99.9%) 294.279 B/op [Average]
[info]   (min, avg, max) = (4587.251, 4641.946, 4769.154), stdev = 76.423
[info]   CI (99.9%): [4347.666, 4936.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala
[info] # Run progress: 26.76% complete, ETA 00:57:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 65018.405 ops/s
[info] # Warmup Iteration   2: 100018.630 ops/s
[info] # Warmup Iteration   3: 97048.831 ops/s
[info] Iteration   1: 100069.035 ops/s
[info]                  ·gc.alloc.rate:            330.556 MB/sec
[info]                  ·gc.alloc.rate.norm:       5200.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.326 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5290.759 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 98669.710 ops/s
[info]                  ·gc.alloc.rate:            326.031 MB/sec
[info]                  ·gc.alloc.rate.norm:       5200.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.423 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5365.761 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 98956.836 ops/s
[info]                  ·gc.alloc.rate:            326.882 MB/sec
[info]                  ·gc.alloc.rate.norm:       5200.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.327 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5350.256 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 98856.857 ops/s
[info]                  ·gc.alloc.rate:            326.558 MB/sec
[info]                  ·gc.alloc.rate.norm:       5200.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.323 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5355.505 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 97833.782 ops/s
[info]                  ·gc.alloc.rate:            323.203 MB/sec
[info]                  ·gc.alloc.rate.norm:       5200.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.365 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5411.770 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala":
[info]   98877.244 ±(99.9%) 3079.913 ops/s [Average]
[info]   (min, avg, max) = (97833.782, 98877.244, 100069.035), stdev = 799.844
[info]   CI (99.9%): [95797.331, 101957.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   326.646 ±(99.9%) 10.112 MB/sec [Average]
[info]   (min, avg, max) = (323.203, 326.646, 330.556), stdev = 2.626
[info]   CI (99.9%): [316.534, 336.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   5200.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5200.004, 5200.004, 5200.004), stdev = 0.001
[info]   CI (99.9%): [5200.004, 5200.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   336.353 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (336.323, 336.353, 336.423), stdev = 0.043
[info]   CI (99.9%): [336.187, 336.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   5354.810 ±(99.9%) 166.606 B/op [Average]
[info]   (min, avg, max) = (5290.759, 5354.810, 5411.770), stdev = 43.267
[info]   CI (99.9%): [5188.204, 5521.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala
[info] # Run progress: 27.03% complete, ETA 00:57:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 102975.014 ops/s
[info] # Warmup Iteration   2: 110243.688 ops/s
[info] # Warmup Iteration   3: 115398.296 ops/s
[info] Iteration   1: 115845.327 ops/s
[info]                  ·gc.alloc.rate:                   354.393 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             336.314 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4570.319 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 9.050 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 115248.692 ops/s
[info]                  ·gc.alloc.rate:            352.647 MB/sec
[info]                  ·gc.alloc.rate.norm:       4816.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.057 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4603.087 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 116001.240 ops/s
[info]                  ·gc.alloc.rate:            354.897 MB/sec
[info]                  ·gc.alloc.rate.norm:       4816.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.005 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4573.212 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 114506.171 ops/s
[info]                  ·gc.alloc.rate:            350.327 MB/sec
[info]                  ·gc.alloc.rate.norm:       4816.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.346 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4623.795 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 115685.386 ops/s
[info]                  ·gc.alloc.rate:            354.013 MB/sec
[info]                  ·gc.alloc.rate.norm:       4816.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.412 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4576.560 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala":
[info]   115457.363 ±(99.9%) 2315.692 ops/s [Average]
[info]   (min, avg, max) = (114506.171, 115457.363, 116001.240), stdev = 601.378
[info]   CI (99.9%): [113141.671, 117773.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   353.255 ±(99.9%) 7.075 MB/sec [Average]
[info]   (min, avg, max) = (350.327, 353.255, 354.897), stdev = 1.837
[info]   CI (99.9%): [346.180, 360.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   4816.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4816.004, 4816.004, 4816.004), stdev = 0.001
[info]   CI (99.9%): [4816.003, 4816.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   336.627 ±(99.9%) 1.429 MB/sec [Average]
[info]   (min, avg, max) = (336.314, 336.627, 337.057), stdev = 0.371
[info]   CI (99.9%): [335.197, 338.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   4589.395 ±(99.9%) 89.509 B/op [Average]
[info]   (min, avg, max) = (4570.319, 4589.395, 4623.795), stdev = 23.245
[info]   CI (99.9%): [4499.885, 4678.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.810 ±(99.9%) 15.585 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.810, 9.050), stdev = 4.047
[info]   CI (99.9%): [≈ 0, 17.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 27.30% complete, ETA 00:57:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 103008.345 ops/s
[info] # Warmup Iteration   2: 108935.402 ops/s
[info] # Warmup Iteration   3: 109789.458 ops/s
[info] Iteration   1: 116114.356 ops/s
[info]                  ·gc.alloc.rate:            263.847 MB/sec
[info]                  ·gc.alloc.rate.norm:       3576.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.092 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4568.723 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   2: 116424.123 ops/s
[info]                  ·gc.alloc.rate:      264.527 MB/sec
[info]                  ·gc.alloc.rate.norm: 3576.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 116295.625 ops/s
[info]                  ·gc.alloc.rate:            264.260 MB/sec
[info]                  ·gc.alloc.rate.norm:       3576.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.425 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4552.559 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 115882.309 ops/s
[info]                  ·gc.alloc.rate:            263.393 MB/sec
[info]                  ·gc.alloc.rate.norm:       3576.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.528 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4568.939 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 115750.038 ops/s
[info]                  ·gc.alloc.rate:            262.954 MB/sec
[info]                  ·gc.alloc.rate.norm:       3576.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.345 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4574.070 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc":
[info]   116093.290 ±(99.9%) 1077.439 ops/s [Average]
[info]   (min, avg, max) = (115750.038, 116093.290, 116424.123), stdev = 279.807
[info]   CI (99.9%): [115015.851, 117170.729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   263.796 ±(99.9%) 2.453 MB/sec [Average]
[info]   (min, avg, max) = (262.954, 263.796, 264.527), stdev = 0.637
[info]   CI (99.9%): [261.343, 266.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   3576.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3576.004, 3576.004, 3576.004), stdev = 0.001
[info]   CI (99.9%): [3576.003, 3576.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   269.278 ±(99.9%) 579.642 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.278, 337.092), stdev = 150.531
[info]   CI (99.9%): [≈ 0, 848.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   3652.858 ±(99.9%) 7863.114 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3652.858, 4574.070), stdev = 2042.026
[info]   CI (99.9%): [≈ 0, 11515.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce
[info] # Run progress: 27.57% complete, ETA 00:57:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5324.218 ops/s
[info] # Warmup Iteration   2: 7907.492 ops/s
[info] # Warmup Iteration   3: 7960.465 ops/s
[info] Iteration   1: 7967.917 ops/s
[info]                  ·gc.alloc.rate:            1318.788 MB/sec
[info]                  ·gc.alloc.rate.norm:       260528.051 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1347.946 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 266288.309 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 8168.479 ops/s
[info]                  ·gc.alloc.rate:                                  1351.972 MB/sec
[info]                  ·gc.alloc.rate.norm:                             260528.050 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.064 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 12.370 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1355.362 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       261181.415 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                641.723 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   3: 8226.705 ops/s
[info]                  ·gc.alloc.rate:                                  1361.637 MB/sec
[info]                  ·gc.alloc.rate.norm:                             260528.053 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.010 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.844 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.258 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       260455.626 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 8296.586 ops/s
[info]                  ·gc.alloc.rate:                                  1373.759 MB/sec
[info]                  ·gc.alloc.rate.norm:                             260528.049 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.249 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.957 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       258289.870 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 8289.941 ops/s
[info]                  ·gc.alloc.rate:                                  1372.633 MB/sec
[info]                  ·gc.alloc.rate.norm:                             260528.049 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.091 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.825 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       258476.766 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce":
[info]   8189.926 ±(99.9%) 518.337 ops/s [Average]
[info]   (min, avg, max) = (7967.917, 8189.926, 8296.586), stdev = 134.610
[info]   CI (99.9%): [7671.589, 8708.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate":
[info]   1355.758 ±(99.9%) 86.628 MB/sec [Average]
[info]   (min, avg, max) = (1318.788, 1355.758, 1373.759), stdev = 22.497
[info]   CI (99.9%): [1269.130, 1442.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   260528.051 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (260528.049, 260528.051, 260528.053), stdev = 0.002
[info]   CI (99.9%): [260528.044, 260528.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.015 ±(99.9%) 0.107 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.064), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.911 ±(99.9%) 20.568 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.911, 12.370), stdev = 5.342
[info]   CI (99.9%): [≈ 0, 23.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1357.670 ±(99.9%) 23.454 MB/sec [Average]
[info]   (min, avg, max) = (1347.946, 1357.670, 1361.957), stdev = 6.091
[info]   CI (99.9%): [1334.216, 1381.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   260938.397 ±(99.9%) 12475.731 B/op [Average]
[info]   (min, avg, max) = (258289.870, 260938.397, 266288.309), stdev = 3239.908
[info]   CI (99.9%): [248462.666, 273414.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   128.345 ±(99.9%) 1105.086 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 128.345, 641.723), stdev = 286.987
[info]   CI (99.9%): [≈ 0, 1233.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 13.000), stdev = 4.604
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala
[info] # Run progress: 27.84% complete, ETA 00:57:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4229.681 ops/s
[info] # Warmup Iteration   2: 8203.753 ops/s
[info] # Warmup Iteration   3: 8402.885 ops/s
[info] Iteration   1: 8599.679 ops/s
[info]                  ·gc.alloc.rate:                   1340.372 MB/sec
[info]                  ·gc.alloc.rate.norm:              245216.051 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.126 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        246085.661 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 121.885 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   2: 8461.339 ops/s
[info]                  ·gc.alloc.rate:                                  1318.688 MB/sec
[info]                  ·gc.alloc.rate.norm:                             245216.048 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.101 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 18.838 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1353.918 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       251767.273 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                743.407 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   3: 8376.430 ops/s
[info]                  ·gc.alloc.rate:            1304.958 MB/sec
[info]                  ·gc.alloc.rate.norm:       245216.049 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.408 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 255823.507 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 8724.521 ops/s
[info]                  ·gc.alloc.rate:                                  1359.150 MB/sec
[info]                  ·gc.alloc.rate.norm:                             245216.047 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.946 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.395 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       245621.057 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 8709.058 ops/s
[info]                  ·gc.alloc.rate:            1357.300 MB/sec
[info]                  ·gc.alloc.rate.norm:       245216.051 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.882 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 246044.007 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala":
[info]   8574.205 ±(99.9%) 588.036 ops/s [Average]
[info]   (min, avg, max) = (8376.430, 8574.205, 8724.521), stdev = 152.711
[info]   CI (99.9%): [7986.169, 9162.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1336.094 ±(99.9%) 91.771 MB/sec [Average]
[info]   (min, avg, max) = (1304.958, 1336.094, 1359.150), stdev = 23.833
[info]   CI (99.9%): [1244.323, 1427.865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   245216.049 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (245216.047, 245216.049, 245216.051), stdev = 0.002
[info]   CI (99.9%): [245216.042, 245216.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.021 ±(99.9%) 0.172 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.101), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   3.957 ±(99.9%) 32.071 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.957, 18.838), stdev = 8.329
[info]   CI (99.9%): [≈ 0, 36.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1356.746 ±(99.9%) 28.083 MB/sec [Average]
[info]   (min, avg, max) = (1345.126, 1356.746, 1361.882), stdev = 7.293
[info]   CI (99.9%): [1328.663, 1384.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   249068.301 ±(99.9%) 17523.947 B/op [Average]
[info]   (min, avg, max) = (245621.057, 249068.301, 255823.507), stdev = 4550.913
[info]   CI (99.9%): [231544.354, 266592.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.690 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.998), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   173.058 ±(99.9%) 1244.426 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 173.058, 743.407), stdev = 323.173
[info]   CI (99.9%): [≈ 0, 1417.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.600, 17.000), stdev = 6.229
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala
[info] # Run progress: 28.11% complete, ETA 00:56:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 75980.173 ops/s
[info] # Warmup Iteration   2: 77095.041 ops/s
[info] # Warmup Iteration   3: 80199.954 ops/s
[info] Iteration   1: 79908.451 ops/s
[info]                  ·gc.alloc.rate:            208.011 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      338.469 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6664.873 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   2: 80205.673 ops/s
[info]                  ·gc.alloc.rate:            208.687 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.649 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6627.208 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 80568.763 ops/s
[info]                  ·gc.alloc.rate:      209.757 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 80234.936 ops/s
[info]                  ·gc.alloc.rate:            208.789 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.679 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6624.566 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 80570.816 ops/s
[info]                  ·gc.alloc.rate:      209.695 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala":
[info]   80297.728 ±(99.9%) 1075.410 ops/s [Average]
[info]   (min, avg, max) = (79908.451, 80297.728, 80570.816), stdev = 279.280
[info]   CI (99.9%): [79222.318, 81373.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   208.988 ±(99.9%) 2.840 MB/sec [Average]
[info]   (min, avg, max) = (208.011, 208.988, 209.757), stdev = 0.738
[info]   CI (99.9%): [206.148, 211.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.005, 4096.005, 4096.005), stdev = 0.001
[info]   CI (99.9%): [4096.005, 4096.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   202.759 ±(99.9%) 712.729 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 202.759, 338.469), stdev = 185.094
[info]   CI (99.9%): [≈ 0, 915.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   3983.329 ±(99.9%) 14002.099 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3983.329, 6664.873), stdev = 3636.301
[info]   CI (99.9%): [≈ 0, 17985.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson
[info] # Run progress: 28.38% complete, ETA 00:56:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2067.262 ops/s
[info] # Warmup Iteration   2: 4622.114 ops/s
[info] # Warmup Iteration   3: 4491.234 ops/s
[info] Iteration   1: 4801.616 ops/s
[info]                  ·gc.alloc.rate:            1274.022 MB/sec
[info]                  ·gc.alloc.rate.norm:       417680.085 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.153 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 441000.108 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 4820.878 ops/s
[info]                  ·gc.alloc.rate:                                  1279.352 MB/sec
[info]                  ·gc.alloc.rate.norm:                             417680.091 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.075 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 24.448 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1349.455 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       440567.187 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1304.740 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        14.000 ms
[info] Iteration   3: 4677.864 ops/s
[info]                  ·gc.alloc.rate:                                  1241.254 MB/sec
[info]                  ·gc.alloc.rate.norm:                             417680.087 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.032 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 10.799 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.271 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       458065.686 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 4693.555 ops/s
[info]                  ·gc.alloc.rate:            1245.498 MB/sec
[info]                  ·gc.alloc.rate.norm:       417680.087 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.953 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 342378.489 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 4773.515 ops/s
[info]                  ·gc.alloc.rate:                                  1266.748 MB/sec
[info]                  ·gc.alloc.rate.norm:                             417680.092 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.407 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.300 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       448856.407 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson":
[info]   4753.485 ±(99.9%) 247.835 ops/s [Average]
[info]   (min, avg, max) = (4677.864, 4753.485, 4820.878), stdev = 64.362
[info]   CI (99.9%): [4505.651, 5001.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1261.375 ±(99.9%) 65.825 MB/sec [Average]
[info]   (min, avg, max) = (1241.254, 1261.375, 1279.352), stdev = 17.095
[info]   CI (99.9%): [1195.549, 1327.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   417680.088 ±(99.9%) 0.012 B/op [Average]
[info]   (min, avg, max) = (417680.085, 417680.088, 417680.092), stdev = 0.003
[info]   CI (99.9%): [417680.077, 417680.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.022 ±(99.9%) 0.124 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.075), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   7.331 ±(99.9%) 40.733 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.331, 24.448), stdev = 10.578
[info]   CI (99.9%): [≈ 0, 48.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1287.627 ±(99.9%) 574.695 MB/sec [Average]
[info]   (min, avg, max) = (1020.953, 1287.627, 1361.300), stdev = 149.247
[info]   CI (99.9%): [712.931, 1862.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   426173.576 ±(99.9%) 182451.418 B/op [Average]
[info]   (min, avg, max) = (342378.489, 426173.576, 458065.686), stdev = 47382.054
[info]   CI (99.9%): [243722.157, 608624.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   260.948 ±(99.9%) 2246.841 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 260.948, 1304.740), stdev = 583.497
[info]   CI (99.9%): [≈ 0, 2507.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.800, 16.000), stdev = 6.611
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce
[info] # Run progress: 28.65% complete, ETA 00:56:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15853.947 ops/s
[info] # Warmup Iteration   2: 23625.553 ops/s
[info] # Warmup Iteration   3: 23367.050 ops/s
[info] Iteration   1: 23197.062 ops/s
[info]                  ·gc.alloc.rate:            1201.775 MB/sec
[info]                  ·gc.alloc.rate.norm:       81552.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.008 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 91475.274 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 23308.000 ops/s
[info]                  ·gc.alloc.rate:                   1207.821 MB/sec
[info]                  ·gc.alloc.rate.norm:              81552.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1011.254 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        68279.786 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 224.900 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 24223.020 ops/s
[info]                  ·gc.alloc.rate:                                  1254.761 MB/sec
[info]                  ·gc.alloc.rate.norm:                             81526.528 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.077 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.998 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.468 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       88459.670 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 24435.465 ops/s
[info]                  ·gc.alloc.rate:                                  1265.963 MB/sec
[info]                  ·gc.alloc.rate.norm:                             81528.017 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.253 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.738 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       87695.963 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 23682.907 ops/s
[info]                  ·gc.alloc.rate:                                  1226.709 MB/sec
[info]                  ·gc.alloc.rate.norm:                             81528.017 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.202 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.010 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       67857.107 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce":
[info]   23769.291 ±(99.9%) 2106.759 ops/s [Average]
[info]   (min, avg, max) = (23197.062, 23769.291, 24435.465), stdev = 547.119
[info]   CI (99.9%): [21662.531, 25876.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1231.406 ±(99.9%) 108.843 MB/sec [Average]
[info]   (min, avg, max) = (1201.775, 1231.406, 1265.963), stdev = 28.266
[info]   CI (99.9%): [1122.563, 1340.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   81537.321 ±(99.9%) 51.725 B/op [Average]
[info]   (min, avg, max) = (81526.528, 81537.321, 81552.022), stdev = 13.433
[info]   CI (99.9%): [81485.595, 81589.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.017 ±(99.9%) 0.130 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.077), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.091 ±(99.9%) 8.422 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.091, 4.998), stdev = 2.187
[info]   CI (99.9%): [≈ 0, 9.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1220.696 ±(99.9%) 719.510 MB/sec [Average]
[info]   (min, avg, max) = (1011.254, 1220.696, 1361.738), stdev = 186.855
[info]   CI (99.9%): [501.185, 1940.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   80753.560 ±(99.9%) 44924.399 B/op [Average]
[info]   (min, avg, max) = (67857.107, 80753.560, 91475.274), stdev = 11666.724
[info]   CI (99.9%): [35829.161, 125677.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   44.980 ±(99.9%) 387.292 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 44.980, 224.900), stdev = 100.579
[info]   CI (99.9%): [≈ 0, 432.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.600, 13.000), stdev = 4.615
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala
[info] # Run progress: 28.92% complete, ETA 00:56:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12900.418 ops/s
[info] # Warmup Iteration   2: 24391.221 ops/s
[info] # Warmup Iteration   3: 24135.003 ops/s
[info] Iteration   1: 24463.159 ops/s
[info]                  ·gc.alloc.rate:            1243.576 MB/sec
[info]                  ·gc.alloc.rate.norm:       79984.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.928 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 86567.088 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   2: 24728.466 ops/s
[info]                  ·gc.alloc.rate:                                  1256.601 MB/sec
[info]                  ·gc.alloc.rate.norm:                             79984.022 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.087 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.514 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1012.421 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       64441.658 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                296.771 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   3: 24469.874 ops/s
[info]                  ·gc.alloc.rate:                                  1243.347 MB/sec
[info]                  ·gc.alloc.rate.norm:                             79984.018 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.022 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.426 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.335 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       87574.134 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 23856.162 ops/s
[info]                  ·gc.alloc.rate:                                  1212.332 MB/sec
[info]                  ·gc.alloc.rate.norm:                             79984.017 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.087 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.535 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       89827.718 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 24824.512 ops/s
[info]                  ·gc.alloc.rate:            1261.442 MB/sec
[info]                  ·gc.alloc.rate.norm:       79984.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.009 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 64738.905 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala":
[info]   24468.435 ±(99.9%) 1452.712 ops/s [Average]
[info]   (min, avg, max) = (23856.162, 24468.435, 24824.512), stdev = 377.265
[info]   CI (99.9%): [23015.722, 25921.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1243.460 ±(99.9%) 73.693 MB/sec [Average]
[info]   (min, avg, max) = (1212.332, 1243.460, 1261.442), stdev = 19.138
[info]   CI (99.9%): [1169.767, 1317.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   79984.018 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (79984.016, 79984.018, 79984.022), stdev = 0.002
[info]   CI (99.9%): [79984.009, 79984.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.022 ±(99.9%) 0.144 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.087), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.405 ±(99.9%) 9.147 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.405, 5.514), stdev = 2.376
[info]   CI (99.9%): [≈ 0, 10.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1220.445 ±(99.9%) 716.652 MB/sec [Average]
[info]   (min, avg, max) = (1012.421, 1220.445, 1361.535), stdev = 186.112
[info]   CI (99.9%): [503.793, 1937.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   78629.900 ±(99.9%) 49561.817 B/op [Average]
[info]   (min, avg, max) = (64441.658, 78629.900, 89827.718), stdev = 12871.047
[info]   CI (99.9%): [29068.083, 128191.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   59.354 ±(99.9%) 511.057 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 59.354, 296.771), stdev = 132.720
[info]   CI (99.9%): [≈ 0, 570.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.200, 17.000), stdev = 6.301
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala
[info] # Run progress: 29.19% complete, ETA 00:56:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 288693.341 ops/s
[info] # Warmup Iteration   2: 317593.045 ops/s
[info] # Warmup Iteration   3: 337629.041 ops/s
[info] Iteration   1: 337188.730 ops/s
[info]                  ·gc.alloc.rate:            743.679 MB/sec
[info]                  ·gc.alloc.rate.norm:       3472.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.616 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3140.231 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 340206.870 ops/s
[info]                  ·gc.alloc.rate:            750.414 MB/sec
[info]                  ·gc.alloc.rate.norm:       3472.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.710 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3112.480 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 331652.273 ops/s
[info]                  ·gc.alloc.rate:                   731.553 MB/sec
[info]                  ·gc.alloc.rate.norm:              3472.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.367 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3195.847 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.161 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 337440.160 ops/s
[info]                  ·gc.alloc.rate:                   744.338 MB/sec
[info]                  ·gc.alloc.rate.norm:              3472.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.733 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4709.950 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.107 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 338250.965 ops/s
[info]                  ·gc.alloc.rate:                                  746.053 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3472.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.098 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.454 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            677.345 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3152.246 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                15.498 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala":
[info]   336947.799 ±(99.9%) 12277.283 ops/s [Average]
[info]   (min, avg, max) = (331652.273, 336947.799, 340206.870), stdev = 3188.371
[info]   CI (99.9%): [324670.516, 349225.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   743.207 ±(99.9%) 27.048 MB/sec [Average]
[info]   (min, avg, max) = (731.553, 743.207, 750.414), stdev = 7.024
[info]   CI (99.9%): [716.159, 770.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3472.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3472.001, 3472.001, 3472.001), stdev = 0.001
[info]   CI (99.9%): [3472.001, 3472.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.020 ±(99.9%) 0.168 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.098), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.091 ±(99.9%) 0.782 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.091, 0.454), stdev = 0.203
[info]   CI (99.9%): [≈ 0, 0.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   741.154 ±(99.9%) 578.185 MB/sec [Average]
[info]   (min, avg, max) = (672.616, 741.154, 1009.733), stdev = 150.153
[info]   CI (99.9%): [162.969, 1319.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   3462.151 ±(99.9%) 2688.472 B/op [Average]
[info]   (min, avg, max) = (3112.480, 3462.151, 4709.950), stdev = 698.188
[info]   CI (99.9%): [773.679, 6150.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 5.318 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.330), stdev = 1.381
[info]   CI (99.9%): [≈ 0, 6.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   4.353 ±(99.9%) 24.737 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.353, 15.498), stdev = 6.424
[info]   CI (99.9%): [≈ 0, 29.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 9.000), stdev = 1.789
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 29.46% complete, ETA 00:55:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 337341.214 ops/s
[info] # Warmup Iteration   2: 371620.270 ops/s
[info] # Warmup Iteration   3: 372467.050 ops/s
[info] Iteration   1: 372640.665 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 372681.986 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 371984.776 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 372634.912 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 372740.723 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc":
[info]   372536.612 ±(99.9%) 1198.980 ops/s [Average]
[info]   (min, avg, max) = (371984.776, 372536.612, 372740.723), stdev = 311.371
[info]   CI (99.9%): [371337.632, 373735.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson
[info] # Run progress: 29.73% complete, ETA 00:55:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16939.457 ops/s
[info] # Warmup Iteration   2: 25514.357 ops/s
[info] # Warmup Iteration   3: 25758.331 ops/s
[info] Iteration   1: 24974.373 ops/s
[info]                  ·gc.alloc.rate:            1313.552 MB/sec
[info]                  ·gc.alloc.rate.norm:       82792.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.350 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 84796.170 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 25691.597 ops/s
[info]                  ·gc.alloc.rate:                                  1351.125 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82792.021 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.101 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 6.209 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1353.210 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       82919.771 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                244.842 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   3: 26305.690 ops/s
[info]                  ·gc.alloc.rate:                                  1383.626 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82792.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.025 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.484 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.414 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       81462.917 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 26276.246 ops/s
[info]                  ·gc.alloc.rate:                                  1382.426 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82792.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.293 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.683 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       81549.705 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 25912.703 ops/s
[info]                  ·gc.alloc.rate:                                  1362.956 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82792.017 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.400 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.306 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       82691.822 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson":
[info]   25832.122 ±(99.9%) 2094.523 ops/s [Average]
[info]   (min, avg, max) = (24974.373, 25832.122, 26305.690), stdev = 543.941
[info]   CI (99.9%): [23737.598, 27926.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1358.737 ±(99.9%) 110.568 MB/sec [Average]
[info]   (min, avg, max) = (1313.552, 1358.737, 1383.626), stdev = 28.714
[info]   CI (99.9%): [1248.169, 1469.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   82792.017 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (82792.016, 82792.017, 82792.021), stdev = 0.002
[info]   CI (99.9%): [82792.008, 82792.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.028 ±(99.9%) 0.163 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.101), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.677 ±(99.9%) 9.992 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.677, 6.209), stdev = 2.595
[info]   CI (99.9%): [≈ 0, 11.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1356.592 ±(99.9%) 27.849 MB/sec [Average]
[info]   (min, avg, max) = (1345.350, 1356.592, 1361.683), stdev = 7.232
[info]   CI (99.9%): [1328.744, 1384.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   82684.077 ±(99.9%) 5200.002 B/op [Average]
[info]   (min, avg, max) = (81462.917, 82684.077, 84796.170), stdev = 1350.424
[info]   CI (99.9%): [77484.075, 87884.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   48.968 ±(99.9%) 421.632 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 48.968, 244.842), stdev = 109.497
[info]   CI (99.9%): [≈ 0, 470.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.200, 16.000), stdev = 5.718
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce
[info] # Run progress: 30.00% complete, ETA 00:55:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 102597.392 ops/s
[info] # Warmup Iteration   2: 130647.226 ops/s
[info] # Warmup Iteration   3: 130162.638 ops/s
[info] Iteration   1: 132701.620 ops/s
[info]                  ·gc.alloc.rate:                                  2159.314 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25616.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.066 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.786 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.834 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       24222.338 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 132477.504 ops/s
[info]                  ·gc.alloc.rate:                                  2156.329 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25616.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.093 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.976 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       28308.450 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 131776.420 ops/s
[info]                  ·gc.alloc.rate:                                  2144.774 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25616.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.059 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.396 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       24393.259 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 132031.073 ops/s
[info]                  ·gc.alloc.rate:                                  2149.102 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25616.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.026 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.566 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       24346.154 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 131847.471 ops/s
[info]                  ·gc.alloc.rate:                                  2146.437 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25616.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.047 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2383.378 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       28443.696 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce":
[info]   132166.818 ±(99.9%) 1558.630 ops/s [Average]
[info]   (min, avg, max) = (131776.420, 132166.818, 132701.620), stdev = 404.771
[info]   CI (99.9%): [130608.188, 133725.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   2151.191 ±(99.9%) 24.392 MB/sec [Average]
[info]   (min, avg, max) = (2144.774, 2151.191, 2159.314), stdev = 6.335
[info]   CI (99.9%): [2126.799, 2175.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   25616.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (25616.003, 25616.003, 25616.003), stdev = 0.001
[info]   CI (99.9%): [25616.003, 25616.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.017 ±(99.9%) 0.106 MB/sec [Average]
[info]   (min, avg, max) = (0.002, 0.017, 0.066), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.202 ±(99.9%) 1.260 B/op [Average]
[info]   (min, avg, max) = (0.026, 0.202, 0.786), stdev = 0.327
[info]   CI (99.9%): [≈ 0, 1.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2178.630 ±(99.9%) 719.012 MB/sec [Average]
[info]   (min, avg, max) = (2041.834, 2178.630, 2383.378), stdev = 186.725
[info]   CI (99.9%): [1459.618, 2897.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   25942.779 ±(99.9%) 8558.727 B/op [Average]
[info]   (min, avg, max) = (24222.338, 25942.779, 28443.696), stdev = 2222.674
[info]   CI (99.9%): [17384.053, 34501.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava
[info] # Run progress: 30.27% complete, ETA 00:55:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19117.770 ops/s
[info] # Warmup Iteration   2: 446712.745 ops/s
[info] # Warmup Iteration   3: 452081.488 ops/s
[info] Iteration   1: 448101.167 ops/s
[info]                  ·gc.alloc.rate:            464.559 MB/sec
[info]                  ·gc.alloc.rate.norm:       1632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.316 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2344.290 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 452605.606 ops/s
[info]                  ·gc.alloc.rate:            469.232 MB/sec
[info]                  ·gc.alloc.rate.norm:       1632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.669 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1160.511 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 451950.474 ops/s
[info]                  ·gc.alloc.rate:            468.586 MB/sec
[info]                  ·gc.alloc.rate.norm:       1632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.388 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2324.390 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 453160.261 ops/s
[info]                  ·gc.alloc.rate:            469.847 MB/sec
[info]                  ·gc.alloc.rate.norm:       1632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.687 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1159.054 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 453069.805 ops/s
[info]                  ·gc.alloc.rate:                   469.770 MB/sec
[info]                  ·gc.alloc.rate.norm:              1632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             333.039 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1156.993 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.314 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava":
[info]   451777.463 ±(99.9%) 8125.950 ops/s [Average]
[info]   (min, avg, max) = (448101.167, 451777.463, 453160.261), stdev = 2110.284
[info]   CI (99.9%): [443651.512, 459903.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   468.399 ±(99.9%) 8.491 MB/sec [Average]
[info]   (min, avg, max) = (464.559, 468.399, 469.847), stdev = 2.205
[info]   CI (99.9%): [459.908, 476.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1632.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1632.001, 1632.001, 1632.001), stdev = 0.001
[info]   CI (99.9%): [1632.001, 1632.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   467.020 ±(99.9%) 704.196 MB/sec [Average]
[info]   (min, avg, max) = (333.039, 467.020, 667.388), stdev = 182.878
[info]   CI (99.9%): [≈ 0, 1171.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   1629.048 ±(99.9%) 2479.355 B/op [Average]
[info]   (min, avg, max) = (1156.993, 1629.048, 2344.290), stdev = 643.881
[info]   CI (99.9%): [≈ 0, 4108.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.463 ±(99.9%) 3.985 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.463, 2.314), stdev = 1.035
[info]   CI (99.9%): [≈ 0, 4.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.600, 10.000), stdev = 2.702
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala
[info] # Run progress: 30.54% complete, ETA 00:54:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 168901.083 ops/s
[info] # Warmup Iteration   2: 265691.926 ops/s
[info] # Warmup Iteration   3: 266365.530 ops/s
[info] Iteration   1: 266209.363 ops/s
[info]                  ·gc.alloc.rate:            381.533 MB/sec
[info]                  ·gc.alloc.rate.norm:       2256.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.347 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1988.818 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 267816.126 ops/s
[info]                  ·gc.alloc.rate:            383.838 MB/sec
[info]                  ·gc.alloc.rate.norm:       2256.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.363 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1976.968 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 273039.004 ops/s
[info]                  ·gc.alloc.rate:            391.441 MB/sec
[info]                  ·gc.alloc.rate.norm:       2256.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.463 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1939.148 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 279064.451 ops/s
[info]                  ·gc.alloc.rate:            399.936 MB/sec
[info]                  ·gc.alloc.rate.norm:       2256.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.328 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1897.199 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 281353.664 ops/s
[info]                  ·gc.alloc.rate:            403.227 MB/sec
[info]                  ·gc.alloc.rate.norm:       2256.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.342 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1881.793 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala":
[info]   273496.521 ±(99.9%) 25709.748 ops/s [Average]
[info]   (min, avg, max) = (266209.363, 273496.521, 281353.664), stdev = 6676.740
[info]   CI (99.9%): [247786.773, 299206.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   391.995 ±(99.9%) 36.809 MB/sec [Average]
[info]   (min, avg, max) = (381.533, 391.995, 403.227), stdev = 9.559
[info]   CI (99.9%): [355.185, 428.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2256.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2256.001, 2256.002, 2256.002), stdev = 0.001
[info]   CI (99.9%): [2256.001, 2256.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   336.369 ±(99.9%) 0.209 MB/sec [Average]
[info]   (min, avg, max) = (336.328, 336.369, 336.463), stdev = 0.054
[info]   CI (99.9%): [336.160, 336.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1936.785 ±(99.9%) 181.828 B/op [Average]
[info]   (min, avg, max) = (1881.793, 1936.785, 1988.818), stdev = 47.220
[info]   CI (99.9%): [1754.957, 2118.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala
[info] # Run progress: 30.81% complete, ETA 00:54:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 550078.878 ops/s
[info] # Warmup Iteration   2: 596253.520 ops/s
[info] # Warmup Iteration   3: 600881.092 ops/s
[info] Iteration   1: 602297.961 ops/s
[info]                  ·gc.alloc.rate:            391.785 MB/sec
[info]                  ·gc.alloc.rate.norm:       1024.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.989 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 880.780 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 603657.998 ops/s
[info]                  ·gc.alloc.rate:            392.732 MB/sec
[info]                  ·gc.alloc.rate.norm:       1024.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.042 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 878.798 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 596487.159 ops/s
[info]                  ·gc.alloc.rate:            388.166 MB/sec
[info]                  ·gc.alloc.rate.norm:       1024.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.140 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 889.391 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 601140.139 ops/s
[info]                  ·gc.alloc.rate:            391.102 MB/sec
[info]                  ·gc.alloc.rate.norm:       1024.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.089 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1764.933 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 609130.850 ops/s
[info]                  ·gc.alloc.rate:            396.406 MB/sec
[info]                  ·gc.alloc.rate.norm:       1024.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.141 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 870.906 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala":
[info]   602542.821 ±(99.9%) 17576.857 ops/s [Average]
[info]   (min, avg, max) = (596487.159, 602542.821, 609130.850), stdev = 4564.654
[info]   CI (99.9%): [584965.964, 620119.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   392.038 ±(99.9%) 11.470 MB/sec [Average]
[info]   (min, avg, max) = (388.166, 392.038, 396.406), stdev = 2.979
[info]   CI (99.9%): [380.568, 403.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1024.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1024.001, 1024.001, 1024.001), stdev = 0.001
[info]   CI (99.9%): [1024.001, 1024.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   404.480 ±(99.9%) 580.354 MB/sec [Average]
[info]   (min, avg, max) = (336.989, 404.480, 674.089), stdev = 150.716
[info]   CI (99.9%): [≈ 0, 984.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1056.962 ±(99.9%) 1524.172 B/op [Average]
[info]   (min, avg, max) = (870.906, 1056.962, 1764.933), stdev = 395.823
[info]   CI (99.9%): [≈ 0, 2581.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 5.000), stdev = 0.894
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson
[info] # Run progress: 31.08% complete, ETA 00:54:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 35875.586 ops/s
[info] # Warmup Iteration   2: 66201.266 ops/s
[info] # Warmup Iteration   3: 67450.927 ops/s
[info] Iteration   1: 69038.192 ops/s
[info]                  ·gc.alloc.rate:                                  3022.393 MB/sec
[info]                  ·gc.alloc.rate.norm:                             68920.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.116 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3062.706 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       69839.262 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   2: 68297.222 ops/s
[info]                  ·gc.alloc.rate:                                  2990.125 MB/sec
[info]                  ·gc.alloc.rate.norm:                             68920.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.014 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.313 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3062.831 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       70595.828 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 66354.259 ops/s
[info]                  ·gc.alloc.rate:                                  2905.308 MB/sec
[info]                  ·gc.alloc.rate.norm:                             68920.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.160 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.032 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       72661.539 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 67384.048 ops/s
[info]                  ·gc.alloc.rate:                                  2950.794 MB/sec
[info]                  ·gc.alloc.rate.norm:                             68920.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.010 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.245 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.061 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       63600.978 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 68665.270 ops/s
[info]                  ·gc.alloc.rate:                                  3007.609 MB/sec
[info]                  ·gc.alloc.rate.norm:                             68920.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.128 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3064.412 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       70221.642 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson":
[info]   67947.798 ±(99.9%) 4166.444 ops/s [Average]
[info]   (min, avg, max) = (66354.259, 67947.798, 69038.192), stdev = 1082.012
[info]   CI (99.9%): [63781.354, 72114.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2975.246 ±(99.9%) 182.458 MB/sec [Average]
[info]   (min, avg, max) = (2905.308, 2975.246, 3022.393), stdev = 47.384
[info]   CI (99.9%): [2792.788, 3157.704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   68920.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (68920.006, 68920.006, 68920.007), stdev = 0.001
[info]   CI (99.9%): [68920.005, 68920.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.008 ±(99.9%) 0.014 MB/sec [Average]
[info]   (min, avg, max) = (0.005, 0.008, 0.014), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.192 ±(99.9%) 0.324 B/op [Average]
[info]   (min, avg, max) = (0.116, 0.192, 0.313), stdev = 0.084
[info]   CI (99.9%): [≈ 0, 0.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2995.208 ±(99.9%) 585.824 MB/sec [Average]
[info]   (min, avg, max) = (2723.061, 2995.208, 3064.412), stdev = 152.137
[info]   CI (99.9%): [2409.385, 3581.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   69383.850 ±(99.9%) 13137.842 B/op [Average]
[info]   (min, avg, max) = (63600.978, 69383.850, 72661.539), stdev = 3411.856
[info]   CI (99.9%): [56246.007, 82521.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.count":
[info]   44.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.800, 9.000), stdev = 0.447
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.200, 8.000), stdev = 0.447
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce
[info] # Run progress: 31.35% complete, ETA 00:54:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 186200.177 ops/s
[info] # Warmup Iteration   2: 238481.393 ops/s
[info] # Warmup Iteration   3: 243053.065 ops/s
[info] Iteration   1: 245092.334 ops/s
[info]                  ·gc.alloc.rate:                   1456.585 MB/sec
[info]                  ·gc.alloc.rate.norm:              9352.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1685.541 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        10822.012 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 21.387 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   2: 241984.645 ops/s
[info]                  ·gc.alloc.rate:                                  1437.664 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9352.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.127 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.825 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.333 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8855.470 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   3: 238605.624 ops/s
[info]                  ·gc.alloc.rate:                                  1417.794 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9352.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.521 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8980.815 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 246942.098 ops/s
[info]                  ·gc.alloc.rate:                                  1467.343 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9352.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.567 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8677.847 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 242883.571 ops/s
[info]                  ·gc.alloc.rate:                                  1443.187 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9352.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.826 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11028.010 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce":
[info]   243101.654 ±(99.9%) 12210.454 ops/s [Average]
[info]   (min, avg, max) = (238605.624, 243101.654, 246942.098), stdev = 3171.016
[info]   CI (99.9%): [230891.200, 255312.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1444.515 ±(99.9%) 72.794 MB/sec [Average]
[info]   (min, avg, max) = (1417.794, 1444.515, 1467.343), stdev = 18.904
[info]   CI (99.9%): [1371.721, 1517.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   9352.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9352.002, 9352.002, 9352.002), stdev = 0.001
[info]   CI (99.9%): [9352.002, 9352.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.026 ±(99.9%) 0.217 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.127), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.170 ±(99.9%) 1.412 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.170, 0.825), stdev = 0.367
[info]   CI (99.9%): [≈ 0, 1.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1494.358 ±(99.9%) 701.009 MB/sec [Average]
[info]   (min, avg, max) = (1361.333, 1494.358, 1701.826), stdev = 182.050
[info]   CI (99.9%): [793.349, 2195.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   9672.831 ±(99.9%) 4429.951 B/op [Average]
[info]   (min, avg, max) = (8677.847, 9672.831, 11028.010), stdev = 1150.444
[info]   CI (99.9%): [5242.880, 14102.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   4.277 ±(99.9%) 36.830 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.277, 21.387), stdev = 9.565
[info]   CI (99.9%): [≈ 0, 41.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 16.000), stdev = 5.718
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava
[info] # Run progress: 31.62% complete, ETA 00:54:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 76856.756 ops/s
[info] # Warmup Iteration   2: 935280.544 ops/s
[info] # Warmup Iteration   3: 910769.574 ops/s
[info] Iteration   1: 919752.968 ops/s
[info]                  ·gc.alloc.rate:            500.149 MB/sec
[info]                  ·gc.alloc.rate.norm:       856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.675 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 571.082 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 907643.984 ops/s
[info]                  ·gc.alloc.rate:            493.565 MB/sec
[info]                  ·gc.alloc.rate.norm:       856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.343 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1157.389 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 891060.276 ops/s
[info]                  ·gc.alloc.rate:            484.548 MB/sec
[info]                  ·gc.alloc.rate.norm:       856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.677 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 589.472 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 912075.460 ops/s
[info]                  ·gc.alloc.rate:            496.027 MB/sec
[info]                  ·gc.alloc.rate.norm:       856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.423 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1151.780 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 918513.769 ops/s
[info]                  ·gc.alloc.rate:            499.506 MB/sec
[info]                  ·gc.alloc.rate.norm:       856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.697 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 571.854 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava":
[info]   909809.291 ±(99.9%) 44574.189 ops/s [Average]
[info]   (min, avg, max) = (891060.276, 909809.291, 919752.968), stdev = 11575.775
[info]   CI (99.9%): [865235.103, 954383.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   494.759 ±(99.9%) 24.268 MB/sec [Average]
[info]   (min, avg, max) = (484.548, 494.759, 500.149), stdev = 6.302
[info]   CI (99.9%): [470.491, 519.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   856.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (856.000, 856.000, 856.000), stdev = 0.001
[info]   CI (99.9%): [856.000, 856.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   467.163 ±(99.9%) 703.802 MB/sec [Average]
[info]   (min, avg, max) = (333.675, 467.163, 667.423), stdev = 182.775
[info]   CI (99.9%): [≈ 0, 1170.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   808.315 ±(99.9%) 1217.538 B/op [Average]
[info]   (min, avg, max) = (571.082, 808.315, 1157.389), stdev = 316.191
[info]   CI (99.9%): [≈ 0, 2025.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 10.000), stdev = 2.881
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala
[info] # Run progress: 31.89% complete, ETA 00:53:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 559949.372 ops/s
[info] # Warmup Iteration   2: 816924.368 ops/s
[info] # Warmup Iteration   3: 824179.918 ops/s
[info] Iteration   1: 820638.373 ops/s
[info]                  ·gc.alloc.rate:            646.653 MB/sec
[info]                  ·gc.alloc.rate.norm:       1240.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.927 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1290.384 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 820229.699 ops/s
[info]                  ·gc.alloc.rate:            646.103 MB/sec
[info]                  ·gc.alloc.rate.norm:       1240.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.694 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1291.035 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 820609.149 ops/s
[info]                  ·gc.alloc.rate:            646.458 MB/sec
[info]                  ·gc.alloc.rate.norm:       1240.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.367 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 645.202 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 816046.694 ops/s
[info]                  ·gc.alloc.rate:            642.866 MB/sec
[info]                  ·gc.alloc.rate.norm:       1240.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.737 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1297.619 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 823308.896 ops/s
[info]                  ·gc.alloc.rate:            648.575 MB/sec
[info]                  ·gc.alloc.rate.norm:       1240.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.713 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1286.149 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala":
[info]   820166.562 ±(99.9%) 10054.173 ops/s [Average]
[info]   (min, avg, max) = (816046.694, 820166.562, 823308.896), stdev = 2611.037
[info]   CI (99.9%): [810112.389, 830220.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   646.131 ±(99.9%) 7.942 MB/sec [Average]
[info]   (min, avg, max) = (642.866, 646.131, 648.575), stdev = 2.062
[info]   CI (99.9%): [638.189, 654.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1240.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1240.000, 1240.001, 1240.001), stdev = 0.001
[info]   CI (99.9%): [1240.000, 1240.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   605.488 ±(99.9%) 579.302 MB/sec [Average]
[info]   (min, avg, max) = (336.367, 605.488, 672.927), stdev = 150.443
[info]   CI (99.9%): [26.186, 1184.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1162.078 ±(99.9%) 1112.726 B/op [Average]
[info]   (min, avg, max) = (645.202, 1162.078, 1297.619), stdev = 288.971
[info]   CI (99.9%): [49.352, 2274.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.400, 9.000), stdev = 1.949
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala
[info] # Run progress: 32.16% complete, ETA 00:53:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 891104.619 ops/s
[info] # Warmup Iteration   2: 1015294.510 ops/s
[info] # Warmup Iteration   3: 1027488.865 ops/s
[info] Iteration   1: 1024850.080 ops/s
[info]                  ·gc.alloc.rate:                   557.264 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.298 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1034.237 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.023 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 1031047.119 ops/s
[info]                  ·gc.alloc.rate:            560.842 MB/sec
[info]                  ·gc.alloc.rate.norm:       856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.216 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1029.041 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 1033432.815 ops/s
[info]                  ·gc.alloc.rate:            561.949 MB/sec
[info]                  ·gc.alloc.rate.norm:       856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.992 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 513.331 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 1033079.141 ops/s
[info]                  ·gc.alloc.rate:                   562.062 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.703 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1026.025 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.015 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 1032963.780 ops/s
[info]                  ·gc.alloc.rate:            561.859 MB/sec
[info]                  ·gc.alloc.rate.norm:       856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.199 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1027.152 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala":
[info]   1031074.587 ±(99.9%) 13869.505 ops/s [Average]
[info]   (min, avg, max) = (1024850.080, 1031074.587, 1033432.815), stdev = 3601.866
[info]   CI (99.9%): [1017205.081, 1044944.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   560.795 ±(99.9%) 7.830 MB/sec [Average]
[info]   (min, avg, max) = (557.264, 560.795, 562.062), stdev = 2.033
[info]   CI (99.9%): [552.966, 568.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   856.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (856.000, 856.000, 856.000), stdev = 0.001
[info]   CI (99.9%): [856.000, 856.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   606.482 ±(99.9%) 580.098 MB/sec [Average]
[info]   (min, avg, max) = (336.992, 606.482, 674.216), stdev = 150.650
[info]   CI (99.9%): [26.384, 1186.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   925.957 ±(99.9%) 888.293 B/op [Average]
[info]   (min, avg, max) = (513.331, 925.957, 1034.237), stdev = 230.687
[info]   CI (99.9%): [37.665, 1814.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.408 ±(99.9%) 2.149 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.408, 1.023), stdev = 0.558
[info]   CI (99.9%): [≈ 0, 2.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 7.000), stdev = 1.140
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 32.43% complete, ETA 00:53:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 936041.076 ops/s
[info] # Warmup Iteration   2: 1029590.529 ops/s
[info] # Warmup Iteration   3: 977638.690 ops/s
[info] Iteration   1: 1025962.628 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1028147.071 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1027699.901 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1026592.633 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1029008.854 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   1027482.217 ±(99.9%) 4684.728 ops/s [Average]
[info]   (min, avg, max) = (1025962.628, 1027482.217, 1029008.854), stdev = 1216.609
[info]   CI (99.9%): [1022797.489, 1032166.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson
[info] # Run progress: 32.70% complete, ETA 00:53:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18752.357 ops/s
[info] # Warmup Iteration   2: 28952.422 ops/s
[info] # Warmup Iteration   3: 29197.415 ops/s
[info] Iteration   1: 29098.199 ops/s
[info]                  ·gc.alloc.rate:                   1520.550 MB/sec
[info]                  ·gc.alloc.rate.norm:              82216.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.947 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        72775.245 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 216.164 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   2: 29929.872 ops/s
[info]                  ·gc.alloc.rate:                                  1563.326 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82202.455 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.205 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 10.765 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.066 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       89497.634 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 29962.724 ops/s
[info]                  ·gc.alloc.rate:            1564.651 MB/sec
[info]                  ·gc.alloc.rate.norm:       82200.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.347 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 71519.265 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 29592.655 ops/s
[info]                  ·gc.alloc.rate:                                  1545.260 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82200.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.164 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.603 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       90516.646 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 29895.789 ops/s
[info]                  ·gc.alloc.rate:                                  1561.253 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82200.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.138 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.433 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       71679.521 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson":
[info]   29695.848 ±(99.9%) 1406.671 ops/s [Average]
[info]   (min, avg, max) = (29098.199, 29695.848, 29962.724), stdev = 365.308
[info]   CI (99.9%): [28289.177, 31102.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1551.008 ±(99.9%) 72.130 MB/sec [Average]
[info]   (min, avg, max) = (1520.550, 1551.008, 1564.651), stdev = 18.732
[info]   CI (99.9%): [1478.878, 1623.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   82203.703 ±(99.9%) 26.823 B/op [Average]
[info]   (min, avg, max) = (82200.014, 82203.703, 82216.020), stdev = 6.966
[info]   CI (99.9%): [82176.881, 82230.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.042 ±(99.9%) 0.350 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.205), stdev = 0.091
[info]   CI (99.9%): [≈ 0, 0.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.213 ±(99.9%) 18.410 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.213, 10.765), stdev = 4.781
[info]   CI (99.9%): [≈ 0, 20.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1494.479 ±(99.9%) 729.287 MB/sec [Average]
[info]   (min, avg, max) = (1345.947, 1494.479, 1702.066), stdev = 189.394
[info]   CI (99.9%): [765.192, 2223.767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   79197.662 ±(99.9%) 38067.685 B/op [Average]
[info]   (min, avg, max) = (71519.265, 79197.662, 90516.646), stdev = 9886.057
[info]   CI (99.9%): [41129.977, 117265.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.800 ±(99.9%) 6.885 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.800, 3.998), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   43.233 ±(99.9%) 372.248 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 43.233, 216.164), stdev = 96.672
[info]   CI (99.9%): [≈ 0, 415.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 16.000), stdev = 5.495
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce
[info] # Run progress: 32.97% complete, ETA 00:53:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 86862.548 ops/s
[info] # Warmup Iteration   2: 122092.700 ops/s
[info] # Warmup Iteration   3: 121711.119 ops/s
[info] Iteration   1: 121479.868 ops/s
[info]                  ·gc.alloc.rate:                   1497.005 MB/sec
[info]                  ·gc.alloc.rate.norm:              19400.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1347.927 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        17468.068 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 43.152 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 124115.503 ops/s
[info]                  ·gc.alloc.rate:                                  1529.909 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19400.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.104 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.323 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.017 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       21582.416 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 124051.404 ops/s
[info]                  ·gc.alloc.rate:                                  1528.856 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19400.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.052 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.335 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       17274.283 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 124054.241 ops/s
[info]                  ·gc.alloc.rate:                                  1528.886 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19400.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.742 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       21593.375 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 122667.139 ops/s
[info]                  ·gc.alloc.rate:                                  1511.796 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19400.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.340 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       17469.287 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce":
[info]   123273.631 ±(99.9%) 4518.748 ops/s [Average]
[info]   (min, avg, max) = (121479.868, 123273.631, 124115.503), stdev = 1173.504
[info]   CI (99.9%): [118754.883, 127792.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   1519.290 ±(99.9%) 56.104 MB/sec [Average]
[info]   (min, avg, max) = (1497.005, 1519.290, 1529.909), stdev = 14.570
[info]   CI (99.9%): [1463.187, 1575.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   19400.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (19400.003, 19400.003, 19400.004), stdev = 0.001
[info]   CI (99.9%): [19400.003, 19400.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.022 ±(99.9%) 0.178 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.104), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.278 ±(99.9%) 2.252 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.278, 1.323), stdev = 0.585
[info]   CI (99.9%): [≈ 0, 2.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1494.872 ±(99.9%) 727.966 MB/sec [Average]
[info]   (min, avg, max) = (1347.927, 1494.872, 1702.017), stdev = 189.050
[info]   CI (99.9%): [766.906, 2222.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   19077.486 ±(99.9%) 8829.748 B/op [Average]
[info]   (min, avg, max) = (17274.283, 19077.486, 21593.375), stdev = 2293.057
[info]   CI (99.9%): [10247.738, 27907.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   8.630 ±(99.9%) 74.311 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.630, 43.152), stdev = 19.298
[info]   CI (99.9%): [≈ 0, 82.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 14.000), stdev = 4.722
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala
[info] # Run progress: 33.24% complete, ETA 00:52:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 96075.785 ops/s
[info] # Warmup Iteration   2: 163717.453 ops/s
[info] # Warmup Iteration   3: 165213.523 ops/s
[info] Iteration   1: 164330.984 ops/s
[info]                  ·gc.alloc.rate:            876.886 MB/sec
[info]                  ·gc.alloc.rate.norm:       8400.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.962 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9665.206 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 164369.886 ops/s
[info]                  ·gc.alloc.rate:            877.818 MB/sec
[info]                  ·gc.alloc.rate.norm:       8400.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.570 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9641.625 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   3: 157134.397 ops/s
[info]                  ·gc.alloc.rate:            838.520 MB/sec
[info]                  ·gc.alloc.rate.norm:       8400.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.688 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6738.749 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 156807.555 ops/s
[info]                  ·gc.alloc.rate:                                  836.798 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8400.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.098 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.986 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            676.702 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6792.915 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                40.116 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 160473.304 ops/s
[info]                  ·gc.alloc.rate:                                  856.645 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8400.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.055 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.541 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.382 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10015.371 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala":
[info]   160623.225 ±(99.9%) 14218.562 ops/s [Average]
[info]   (min, avg, max) = (156807.555, 160623.225, 164369.886), stdev = 3692.515
[info]   CI (99.9%): [146404.663, 174841.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   857.333 ±(99.9%) 76.482 MB/sec [Average]
[info]   (min, avg, max) = (836.798, 857.333, 877.818), stdev = 19.862
[info]   CI (99.9%): [780.851, 933.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   8400.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8400.002, 8400.003, 8400.003), stdev = 0.001
[info]   CI (99.9%): [8400.002, 8400.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.031 ±(99.9%) 0.172 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.031, 0.098), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.305 ±(99.9%) 1.720 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.305, 0.986), stdev = 0.447
[info]   CI (99.9%): [≈ 0, 2.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   877.461 ±(99.9%) 713.073 MB/sec [Average]
[info]   (min, avg, max) = (672.688, 877.461, 1021.382), stdev = 185.183
[info]   CI (99.9%): [164.388, 1590.533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   8570.773 ±(99.9%) 6370.594 B/op [Average]
[info]   (min, avg, max) = (6738.749, 8570.773, 10015.371), stdev = 1654.423
[info]   CI (99.9%): [2200.179, 14941.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   8.023 ±(99.9%) 69.082 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.023, 40.116), stdev = 17.940
[info]   CI (99.9%): [≈ 0, 77.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.200, 13.000), stdev = 4.494
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala
[info] # Run progress: 33.51% complete, ETA 00:52:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 227300.590 ops/s
[info] # Warmup Iteration   2: 256229.548 ops/s
[info] # Warmup Iteration   3: 251562.176 ops/s
[info] Iteration   1: 257002.562 ops/s
[info]                  ·gc.alloc.rate:            668.889 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.132 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4128.107 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 257349.960 ops/s
[info]                  ·gc.alloc.rate:            669.579 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.923 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4122.574 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 256680.357 ops/s
[info]                  ·gc.alloc.rate:            667.947 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.014 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4133.204 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 258168.919 ops/s
[info]                  ·gc.alloc.rate:            671.900 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.127 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4109.578 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 258088.383 ops/s
[info]                  ·gc.alloc.rate:            671.631 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.074 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4110.900 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala":
[info]   257458.036 ±(99.9%) 2529.885 ops/s [Average]
[info]   (min, avg, max) = (256680.357, 257458.036, 258168.919), stdev = 657.003
[info]   CI (99.9%): [254928.151, 259987.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   669.989 ±(99.9%) 6.640 MB/sec [Average]
[info]   (min, avg, max) = (667.947, 669.989, 671.900), stdev = 1.724
[info]   CI (99.9%): [663.349, 676.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.002, 4096.002, 4096.002), stdev = 0.001
[info]   CI (99.9%): [4096.001, 4096.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   674.054 ±(99.9%) 0.336 MB/sec [Average]
[info]   (min, avg, max) = (673.923, 674.054, 674.132), stdev = 0.087
[info]   CI (99.9%): [673.718, 674.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   4120.873 ±(99.9%) 40.125 B/op [Average]
[info]   (min, avg, max) = (4109.578, 4120.873, 4133.204), stdev = 10.420
[info]   CI (99.9%): [4080.748, 4160.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson
[info] # Run progress: 33.78% complete, ETA 00:52:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24098.139 ops/s
[info] # Warmup Iteration   2: 59861.472 ops/s
[info] # Warmup Iteration   3: 60847.315 ops/s
[info] Iteration   1: 61737.714 ops/s
[info]                  ·gc.alloc.rate:                                  2606.750 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66448.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.126 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.787 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       60739.026 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 61038.014 ops/s
[info]                  ·gc.alloc.rate:                                  2576.733 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66448.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.161 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.869 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       70216.529 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 60837.661 ops/s
[info]                  ·gc.alloc.rate:                                  2569.114 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66448.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.102 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.786 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       70448.480 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 62650.228 ops/s
[info]                  ·gc.alloc.rate:                                  2645.040 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66448.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.198 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.752 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       59858.863 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 62738.599 ops/s
[info]                  ·gc.alloc.rate:                                  2648.941 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66448.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.210 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.380 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       68315.277 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson":
[info]   61800.443 ±(99.9%) 3397.773 ops/s [Average]
[info]   (min, avg, max) = (60837.661, 61800.443, 62738.599), stdev = 882.391
[info]   CI (99.9%): [58402.670, 65198.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2609.316 ±(99.9%) 143.185 MB/sec [Average]
[info]   (min, avg, max) = (2569.114, 2609.316, 2648.941), stdev = 37.185
[info]   CI (99.9%): [2466.130, 2752.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   66448.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (66448.007, 66448.007, 66448.007), stdev = 0.001
[info]   CI (99.9%): [66448.005, 66448.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.006 ±(99.9%) 0.007 MB/sec [Average]
[info]   (min, avg, max) = (0.004, 0.006, 0.008), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.159 ±(99.9%) 0.178 B/op [Average]
[info]   (min, avg, max) = (0.102, 0.159, 0.210), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2587.115 ±(99.9%) 718.303 MB/sec [Average]
[info]   (min, avg, max) = (2382.752, 2587.115, 2723.786), stdev = 186.541
[info]   CI (99.9%): [1868.811, 3305.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   65915.635 ±(99.9%) 20034.863 B/op [Average]
[info]   (min, avg, max) = (59858.863, 65915.635, 70448.480), stdev = 5202.990
[info]   CI (99.9%): [45880.773, 85950.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count":
[info]   38.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.600, 8.000), stdev = 0.548
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 7.000), stdev = 1.095
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce
[info] # Run progress: 34.05% complete, ETA 00:52:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 134289.689 ops/s
[info] # Warmup Iteration   2: 171625.920 ops/s
[info] # Warmup Iteration   3: 171663.472 ops/s
[info] Iteration   1: 175912.751 ops/s
[info]                  ·gc.alloc.rate:            614.166 MB/sec
[info]                  ·gc.alloc.rate.norm:       5496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.983 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3015.564 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 178448.913 ops/s
[info]                  ·gc.alloc.rate:            623.009 MB/sec
[info]                  ·gc.alloc.rate.norm:       5496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.959 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5945.467 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 179622.247 ops/s
[info]                  ·gc.alloc.rate:            627.270 MB/sec
[info]                  ·gc.alloc.rate.norm:       5496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.123 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5906.517 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 175647.097 ops/s
[info]                  ·gc.alloc.rate:            613.410 MB/sec
[info]                  ·gc.alloc.rate.norm:       5496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.170 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6040.398 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 175221.975 ops/s
[info]                  ·gc.alloc.rate:            611.748 MB/sec
[info]                  ·gc.alloc.rate.norm:       5496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.978 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6055.080 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce":
[info]   176970.597 ±(99.9%) 7492.702 ops/s [Average]
[info]   (min, avg, max) = (175221.975, 176970.597, 179622.247), stdev = 1945.831
[info]   CI (99.9%): [169477.894, 184463.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   617.921 ±(99.9%) 26.247 MB/sec [Average]
[info]   (min, avg, max) = (611.748, 617.921, 627.270), stdev = 6.816
[info]   CI (99.9%): [591.674, 644.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5496.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5496.002, 5496.002, 5496.002), stdev = 0.001
[info]   CI (99.9%): [5496.002, 5496.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   606.643 ±(99.9%) 580.463 MB/sec [Average]
[info]   (min, avg, max) = (336.983, 606.643, 674.170), stdev = 150.744
[info]   CI (99.9%): [26.180, 1187.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   5392.605 ±(99.9%) 5122.440 B/op [Average]
[info]   (min, avg, max) = (3015.564, 5392.605, 6055.080), stdev = 1330.281
[info]   CI (99.9%): [270.165, 10515.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 7.000), stdev = 1.732
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala
[info] # Run progress: 34.32% complete, ETA 00:52:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 326864.042 ops/s
[info] # Warmup Iteration   2: 532732.067 ops/s
[info] # Warmup Iteration   3: 521461.986 ops/s
[info] Iteration   1: 541156.086 ops/s
[info]                  ·gc.alloc.rate:            547.314 MB/sec
[info]                  ·gc.alloc.rate.norm:       1592.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.348 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 978.352 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 535826.323 ops/s
[info]                  ·gc.alloc.rate:            541.927 MB/sec
[info]                  ·gc.alloc.rate.norm:       1592.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.704 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1976.179 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 543059.813 ops/s
[info]                  ·gc.alloc.rate:            549.253 MB/sec
[info]                  ·gc.alloc.rate.norm:       1592.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.730 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1949.898 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 546071.883 ops/s
[info]                  ·gc.alloc.rate:            552.368 MB/sec
[info]                  ·gc.alloc.rate.norm:       1592.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.407 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 969.572 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 541697.257 ops/s
[info]                  ·gc.alloc.rate:            547.790 MB/sec
[info]                  ·gc.alloc.rate.norm:       1592.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.588 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1954.692 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala":
[info]   541562.272 ±(99.9%) 14364.443 ops/s [Average]
[info]   (min, avg, max) = (535826.323, 541562.272, 546071.883), stdev = 3730.400
[info]   CI (99.9%): [527197.830, 555926.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   547.730 ±(99.9%) 14.622 MB/sec [Average]
[info]   (min, avg, max) = (541.927, 547.730, 552.368), stdev = 3.797
[info]   CI (99.9%): [533.108, 562.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1592.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1592.001, 1592.001, 1592.001), stdev = 0.001
[info]   CI (99.9%): [1592.001, 1592.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   538.155 ±(99.9%) 709.278 MB/sec [Average]
[info]   (min, avg, max) = (336.348, 538.155, 672.730), stdev = 184.197
[info]   CI (99.9%): [≈ 0, 1247.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1565.738 ±(99.9%) 2080.561 B/op [Average]
[info]   (min, avg, max) = (969.572, 1565.738, 1976.179), stdev = 540.315
[info]   CI (99.9%): [≈ 0, 3646.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.600, 9.000), stdev = 2.408
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala
[info] # Run progress: 34.59% complete, ETA 00:51:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 426457.123 ops/s
[info] # Warmup Iteration   2: 481262.275 ops/s
[info] # Warmup Iteration   3: 464145.467 ops/s
[info] Iteration   1: 477842.784 ops/s
[info]                  ·gc.alloc.rate:            366.799 MB/sec
[info]                  ·gc.alloc.rate.norm:       1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.437 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1108.007 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 467109.350 ops/s
[info]                  ·gc.alloc.rate:            358.447 MB/sec
[info]                  ·gc.alloc.rate.norm:       1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.316 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1133.416 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 459508.789 ops/s
[info]                  ·gc.alloc.rate:            352.647 MB/sec
[info]                  ·gc.alloc.rate.norm:       1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.346 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1152.161 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   4: 461032.378 ops/s
[info]                  ·gc.alloc.rate:            353.815 MB/sec
[info]                  ·gc.alloc.rate.norm:       1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.355 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1148.390 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 463465.190 ops/s
[info]                  ·gc.alloc.rate:                   355.676 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             336.321 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1142.264 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.262 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala":
[info]   465791.698 ±(99.9%) 28198.152 ops/s [Average]
[info]   (min, avg, max) = (459508.789, 465791.698, 477842.784), stdev = 7322.971
[info]   CI (99.9%): [437593.546, 493989.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   357.477 ±(99.9%) 21.768 MB/sec [Average]
[info]   (min, avg, max) = (352.647, 357.477, 366.799), stdev = 5.653
[info]   CI (99.9%): [335.709, 379.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1208.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1208.001, 1208.001, 1208.001), stdev = 0.001
[info]   CI (99.9%): [1208.001, 1208.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   336.355 ±(99.9%) 0.187 MB/sec [Average]
[info]   (min, avg, max) = (336.316, 336.355, 336.437), stdev = 0.049
[info]   CI (99.9%): [336.167, 336.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1136.848 ±(99.9%) 67.815 B/op [Average]
[info]   (min, avg, max) = (1108.007, 1136.848, 1152.161), stdev = 17.611
[info]   CI (99.9%): [1069.033, 1204.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.452 ±(99.9%) 3.895 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.452, 2.262), stdev = 1.012
[info]   CI (99.9%): [≈ 0, 4.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 34.86% complete, ETA 00:51:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 453609.786 ops/s
[info] # Warmup Iteration   2: 492344.365 ops/s
[info] # Warmup Iteration   3: 479846.773 ops/s
[info] Iteration   1: 493181.810 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 488950.577 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 493175.649 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 492842.650 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 493091.328 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   492248.403 ±(99.9%) 7118.575 ops/s [Average]
[info]   (min, avg, max) = (488950.577, 492248.403, 493181.810), stdev = 1848.671
[info]   CI (99.9%): [485129.827, 499366.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson
[info] # Run progress: 35.14% complete, ETA 00:51:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 149076.774 ops/s
[info] # Warmup Iteration   2: 276400.322 ops/s
[info] # Warmup Iteration   3: 273863.138 ops/s
[info] Iteration   1: 273391.924 ops/s
[info]                  ·gc.alloc.rate:            751.467 MB/sec
[info]                  ·gc.alloc.rate.norm:       4320.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1006.567 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5786.506 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 272957.210 ops/s
[info]                  ·gc.alloc.rate:            749.121 MB/sec
[info]                  ·gc.alloc.rate.norm:       4320.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.693 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3879.262 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 274294.749 ops/s
[info]                  ·gc.alloc.rate:            752.986 MB/sec
[info]                  ·gc.alloc.rate.norm:       4320.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.861 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3860.314 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 274718.495 ops/s
[info]                  ·gc.alloc.rate:            754.197 MB/sec
[info]                  ·gc.alloc.rate.norm:       4320.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.919 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3854.441 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 273718.337 ops/s
[info]                  ·gc.alloc.rate:                   751.212 MB/sec
[info]                  ·gc.alloc.rate.norm:              4320.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.699 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3891.502 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 22.981 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson":
[info]   273816.143 ±(99.9%) 2702.727 ops/s [Average]
[info]   (min, avg, max) = (272957.210, 273816.143, 274718.495), stdev = 701.890
[info]   CI (99.9%): [271113.416, 276518.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   751.797 ±(99.9%) 7.404 MB/sec [Average]
[info]   (min, avg, max) = (749.121, 751.797, 754.197), stdev = 1.923
[info]   CI (99.9%): [744.392, 759.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4320.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4320.001, 4320.002, 4320.002), stdev = 0.001
[info]   CI (99.9%): [4320.001, 4320.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   740.348 ±(99.9%) 573.093 MB/sec [Average]
[info]   (min, avg, max) = (672.693, 740.348, 1006.567), stdev = 148.830
[info]   CI (99.9%): [167.255, 1313.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   4254.405 ±(99.9%) 3298.455 B/op [Average]
[info]   (min, avg, max) = (3854.441, 4254.405, 5786.506), stdev = 856.598
[info]   CI (99.9%): [955.950, 7552.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   4.596 ±(99.9%) 39.575 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.596, 22.981), stdev = 10.278
[info]   CI (99.9%): [≈ 0, 44.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 9.200, 13.000), stdev = 2.490
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce
[info] # Run progress: 35.41% complete, ETA 00:51:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5957.685 ops/s
[info] # Warmup Iteration   2: 8509.912 ops/s
[info] # Warmup Iteration   3: 8781.673 ops/s
[info] Iteration   1: 8703.436 ops/s
[info]                  ·gc.alloc.rate:                   1112.661 MB/sec
[info]                  ·gc.alloc.rate.norm:              201256.051 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.559 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        243924.917 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 120.457 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 8497.525 ops/s
[info]                  ·gc.alloc.rate:            1086.345 MB/sec
[info]                  ·gc.alloc.rate.norm:       201256.048 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.933 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 187285.371 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 8789.356 ops/s
[info]                  ·gc.alloc.rate:                                  1123.709 MB/sec
[info]                  ·gc.alloc.rate.norm:                             201256.050 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.536 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.630 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       182257.323 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                596.392 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 8754.382 ops/s
[info]                  ·gc.alloc.rate:                                  1119.401 MB/sec
[info]                  ·gc.alloc.rate.norm:                             201256.047 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.651 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.482 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       244779.505 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 8826.450 ops/s
[info]                  ·gc.alloc.rate:                                  1128.787 MB/sec
[info]                  ·gc.alloc.rate.norm:                             201256.082 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.403 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.159 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       182066.713 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce":
[info]   8714.230 ±(99.9%) 498.085 ops/s [Average]
[info]   (min, avg, max) = (8497.525, 8714.230, 8826.450), stdev = 129.351
[info]   CI (99.9%): [8216.144, 9212.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1114.180 ±(99.9%) 64.103 MB/sec [Average]
[info]   (min, avg, max) = (1086.345, 1114.180, 1128.787), stdev = 16.647
[info]   CI (99.9%): [1050.078, 1178.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   201256.056 ±(99.9%) 0.058 B/op [Average]
[info]   (min, avg, max) = (201256.047, 201256.056, 201256.082), stdev = 0.015
[info]   CI (99.9%): [201255.997, 201256.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.004 ±(99.9%) 0.016 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.009), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.718 ±(99.9%) 2.838 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.718, 1.536), stdev = 0.737
[info]   CI (99.9%): [≈ 0, 3.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1151.953 ±(99.9%) 714.168 MB/sec [Average]
[info]   (min, avg, max) = (1010.933, 1151.953, 1361.482), stdev = 185.467
[info]   CI (99.9%): [437.784, 1866.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   208062.766 ±(99.9%) 127822.074 B/op [Average]
[info]   (min, avg, max) = (182066.713, 208062.766, 244779.505), stdev = 33194.987
[info]   CI (99.9%): [80240.692, 335884.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   143.370 ±(99.9%) 995.633 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 143.370, 596.392), stdev = 258.563
[info]   CI (99.9%): [≈ 0, 1139.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.600, 13.000), stdev = 4.393
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala
[info] # Run progress: 35.68% complete, ETA 00:50:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4449.166 ops/s
[info] # Warmup Iteration   2: 8416.586 ops/s
[info] # Warmup Iteration   3: 8822.249 ops/s
[info] Iteration   1: 8819.873 ops/s
[info]                  ·gc.alloc.rate:                   1045.274 MB/sec
[info]                  ·gc.alloc.rate.norm:              186544.050 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1007.675 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        179833.993 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 118.859 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 8792.247 ops/s
[info]                  ·gc.alloc.rate:            1041.942 MB/sec
[info]                  ·gc.alloc.rate.norm:       186544.046 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.993 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 180645.058 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 8600.154 ops/s
[info]                  ·gc.alloc.rate:                                  1019.414 MB/sec
[info]                  ·gc.alloc.rate.norm:                             186544.051 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.637 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1012.542 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       185286.622 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                853.294 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   4: 8701.462 ops/s
[info]                  ·gc.alloc.rate:                                  1031.224 MB/sec
[info]                  ·gc.alloc.rate.norm:                             186544.047 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.221 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.928 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       184681.412 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 8869.555 ops/s
[info]                  ·gc.alloc.rate:                                  1051.351 MB/sec
[info]                  ·gc.alloc.rate.norm:                             186560.876 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.642 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.403 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       241579.051 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala":
[info]   8756.658 ±(99.9%) 410.905 ops/s [Average]
[info]   (min, avg, max) = (8600.154, 8756.658, 8869.555), stdev = 106.711
[info]   CI (99.9%): [8345.754, 9167.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1037.841 ±(99.9%) 48.629 MB/sec [Average]
[info]   (min, avg, max) = (1019.414, 1037.841, 1051.351), stdev = 12.629
[info]   CI (99.9%): [989.213, 1086.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   186547.414 ±(99.9%) 28.979 B/op [Average]
[info]   (min, avg, max) = (186544.046, 186547.414, 186560.876), stdev = 7.526
[info]   CI (99.9%): [186518.436, 186576.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.004 ±(99.9%) 0.015 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.009), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.700 ±(99.9%) 2.811 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.700, 1.637), stdev = 0.730
[info]   CI (99.9%): [≈ 0, 3.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1082.308 ±(99.9%) 601.101 MB/sec [Average]
[info]   (min, avg, max) = (1007.675, 1082.308, 1361.403), stdev = 156.104
[info]   CI (99.9%): [481.207, 1683.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   194405.227 ±(99.9%) 101964.556 B/op [Average]
[info]   (min, avg, max) = (179833.993, 194405.227, 241579.051), stdev = 26479.871
[info]   CI (99.9%): [92440.671, 296369.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.823 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.663), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   194.431 ±(99.9%) 1432.032 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 194.431, 853.294), stdev = 371.894
[info]   CI (99.9%): [≈ 0, 1626.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.800, 12.000), stdev = 4.550
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala
[info] # Run progress: 35.95% complete, ETA 00:50:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 138072.122 ops/s
[info] # Warmup Iteration   2: 148073.410 ops/s
[info] # Warmup Iteration   3: 145471.407 ops/s
[info] Iteration   1: 149386.022 ops/s
[info]                  ·gc.alloc.rate:            971.719 MB/sec
[info]                  ·gc.alloc.rate.norm:       10240.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1012.935 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10674.333 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 143411.129 ops/s
[info]                  ·gc.alloc.rate:            933.352 MB/sec
[info]                  ·gc.alloc.rate.norm:       10240.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1013.539 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11119.754 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 144099.940 ops/s
[info]                  ·gc.alloc.rate:                   937.382 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             675.352 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        7377.575 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 29.103 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 142607.385 ops/s
[info]                  ·gc.alloc.rate:                                  927.736 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10240.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.041 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.450 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.048 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11269.952 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 141905.344 ops/s
[info]                  ·gc.alloc.rate:            923.143 MB/sec
[info]                  ·gc.alloc.rate.norm:       10240.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.055 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11326.093 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala":
[info]   144281.964 ±(99.9%) 11438.330 ops/s [Average]
[info]   (min, avg, max) = (141905.344, 144281.964, 149386.022), stdev = 2970.498
[info]   CI (99.9%): [132843.634, 155720.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   938.666 ±(99.9%) 74.139 MB/sec [Average]
[info]   (min, avg, max) = (923.143, 938.666, 971.719), stdev = 19.254
[info]   CI (99.9%): [864.527, 1012.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10240.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10240.003, 10240.003, 10240.003), stdev = 0.001
[info]   CI (99.9%): [10240.002, 10240.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.008 ±(99.9%) 0.070 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.041), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.090 ±(99.9%) 0.775 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.090, 0.450), stdev = 0.201
[info]   CI (99.9%): [≈ 0, 0.865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   948.786 ±(99.9%) 588.781 MB/sec [Average]
[info]   (min, avg, max) = (675.352, 948.786, 1021.055), stdev = 152.904
[info]   CI (99.9%): [360.005, 1537.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   10353.541 ±(99.9%) 6481.227 B/op [Average]
[info]   (min, avg, max) = (7377.575, 10353.541, 11326.093), stdev = 1683.154
[info]   CI (99.9%): [3872.314, 16834.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.533 ±(99.9%) 4.588 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.533, 2.664), stdev = 1.191
[info]   CI (99.9%): [≈ 0, 5.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   5.821 ±(99.9%) 50.117 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.821, 29.103), stdev = 13.015
[info]   CI (99.9%): [≈ 0, 55.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.600, 9.000), stdev = 3.050
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson
[info] # Run progress: 36.22% complete, ETA 00:50:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3518.791 ops/s
[info] # Warmup Iteration   2: 6623.107 ops/s
[info] # Warmup Iteration   3: 6727.932 ops/s
[info] Iteration   1: 6545.922 ops/s
[info]                  ·gc.alloc.rate:            1218.843 MB/sec
[info]                  ·gc.alloc.rate.norm:       293096.067 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.180 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 323476.408 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 6712.951 ops/s
[info]                  ·gc.alloc.rate:                                  1249.942 MB/sec
[info]                  ·gc.alloc.rate.norm:                             293096.066 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.083 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 19.567 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1012.892 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       237510.662 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                936.926 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   3: 6889.783 ops/s
[info]                  ·gc.alloc.rate:            1282.938 MB/sec
[info]                  ·gc.alloc.rate.norm:       293096.059 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.229 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 310982.203 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 6644.238 ops/s
[info]                  ·gc.alloc.rate:                                  1237.243 MB/sec
[info]                  ·gc.alloc.rate.norm:                             293096.061 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.311 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.337 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       322493.130 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 6646.244 ops/s
[info]                  ·gc.alloc.rate:            1237.924 MB/sec
[info]                  ·gc.alloc.rate.norm:       293096.066 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.257 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 241797.083 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson":
[info]   6687.828 ±(99.9%) 491.556 ops/s [Average]
[info]   (min, avg, max) = (6545.922, 6687.828, 6889.783), stdev = 127.655
[info]   CI (99.9%): [6196.272, 7179.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1245.378 ±(99.9%) 91.477 MB/sec [Average]
[info]   (min, avg, max) = (1218.843, 1245.378, 1282.938), stdev = 23.756
[info]   CI (99.9%): [1153.901, 1336.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   293096.064 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (293096.059, 293096.064, 293096.067), stdev = 0.003
[info]   CI (99.9%): [293096.051, 293096.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.017 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.083), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   3.976 ±(99.9%) 33.566 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.976, 19.567), stdev = 8.717
[info]   CI (99.9%): [≈ 0, 37.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1220.379 ±(99.9%) 715.183 MB/sec [Average]
[info]   (min, avg, max) = (1012.892, 1220.379, 1361.337), stdev = 185.731
[info]   CI (99.9%): [505.196, 1935.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   287251.897 ±(99.9%) 168480.719 B/op [Average]
[info]   (min, avg, max) = (237510.662, 287251.897, 323476.408), stdev = 43753.908
[info]   CI (99.9%): [118771.179, 455732.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   187.385 ±(99.9%) 1613.443 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 187.385, 936.926), stdev = 419.006
[info]   CI (99.9%): [≈ 0, 1800.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.000, 16.000), stdev = 5.916
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce
[info] # Run progress: 36.49% complete, ETA 00:50:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15733.376 ops/s
[info] # Warmup Iteration   2: 21612.996 ops/s
[info] # Warmup Iteration   3: 21526.371 ops/s
[info] Iteration   1: 21945.677 ops/s
[info]                  ·gc.alloc.rate:            921.517 MB/sec
[info]                  ·gc.alloc.rate.norm:       66096.570 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.024 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 72516.554 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 21280.684 ops/s
[info]                  ·gc.alloc.rate:            893.770 MB/sec
[info]                  ·gc.alloc.rate.norm:       66104.024 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.069 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 49854.776 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 21809.219 ops/s
[info]                  ·gc.alloc.rate:            915.617 MB/sec
[info]                  ·gc.alloc.rate.norm:       66086.338 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.017 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 72972.006 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 21884.309 ops/s
[info]                  ·gc.alloc.rate:                                  918.780 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66080.019 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.048 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.463 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.791 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       73201.029 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                239.532 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 21952.863 ops/s
[info]                  ·gc.alloc.rate:                                  922.013 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66080.019 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.020 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.399 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.996 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       48806.516 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce":
[info]   21774.550 ±(99.9%) 1086.116 ops/s [Average]
[info]   (min, avg, max) = (21280.684, 21774.550, 21952.863), stdev = 282.061
[info]   CI (99.9%): [20688.435, 22860.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   914.339 ±(99.9%) 45.352 MB/sec [Average]
[info]   (min, avg, max) = (893.770, 914.339, 922.013), stdev = 11.778
[info]   CI (99.9%): [868.988, 959.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   66089.394 ±(99.9%) 40.873 B/op [Average]
[info]   (min, avg, max) = (66080.019, 66089.394, 66104.024), stdev = 10.615
[info]   CI (99.9%): [66048.521, 66130.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.014 ±(99.9%) 0.081 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.048), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.973 ±(99.9%) 5.847 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.973, 3.463), stdev = 1.519
[info]   CI (99.9%): [≈ 0, 6.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   878.980 ±(99.9%) 708.256 MB/sec [Average]
[info]   (min, avg, max) = (674.069, 878.980, 1017.791), stdev = 183.932
[info]   CI (99.9%): [170.723, 1587.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   63470.176 ±(99.9%) 49731.975 B/op [Average]
[info]   (min, avg, max) = (48806.516, 63470.176, 73201.029), stdev = 12915.236
[info]   CI (99.9%): [13738.202, 113202.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   47.906 ±(99.9%) 412.489 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 47.906, 239.532), stdev = 107.122
[info]   CI (99.9%): [≈ 0, 460.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.600, 10.000), stdev = 3.209
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala
[info] # Run progress: 36.76% complete, ETA 00:50:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15218.832 ops/s
[info] # Warmup Iteration   2: 24406.144 ops/s
[info] # Warmup Iteration   3: 23578.579 ops/s
[info] Iteration   1: 23663.983 ops/s
[info]                  ·gc.alloc.rate:            910.569 MB/sec
[info]                  ·gc.alloc.rate.norm:       60552.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.861 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 44744.677 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 23591.321 ops/s
[info]                  ·gc.alloc.rate:            907.510 MB/sec
[info]                  ·gc.alloc.rate.norm:       60552.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.014 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 67324.658 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 23555.863 ops/s
[info]                  ·gc.alloc.rate:                   906.423 MB/sec
[info]                  ·gc.alloc.rate.norm:              60552.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.344 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        67427.531 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 267.040 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   4: 23642.093 ops/s
[info]                  ·gc.alloc.rate:                                  909.398 MB/sec
[info]                  ·gc.alloc.rate.norm:                             60552.017 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.189 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 12.589 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.919 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       67977.630 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   5: 24333.853 ops/s
[info]                  ·gc.alloc.rate:                                  936.286 MB/sec
[info]                  ·gc.alloc.rate.norm:                             60552.017 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.841 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       44031.748 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala":
[info]   23757.423 ±(99.9%) 1251.489 ops/s [Average]
[info]   (min, avg, max) = (23555.863, 23757.423, 24333.853), stdev = 325.008
[info]   CI (99.9%): [22505.934, 25008.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   914.037 ±(99.9%) 48.292 MB/sec [Average]
[info]   (min, avg, max) = (906.423, 914.037, 936.286), stdev = 12.541
[info]   CI (99.9%): [865.745, 962.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   60552.018 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (60552.017, 60552.018, 60552.022), stdev = 0.002
[info]   CI (99.9%): [60552.011, 60552.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.038 ±(99.9%) 0.325 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.038, 0.189), stdev = 0.085
[info]   CI (99.9%): [≈ 0, 0.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.522 ±(99.9%) 21.671 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.522, 12.589), stdev = 5.628
[info]   CI (99.9%): [≈ 0, 24.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   878.596 ±(99.9%) 709.484 MB/sec [Average]
[info]   (min, avg, max) = (672.861, 878.596, 1020.919), stdev = 184.251
[info]   CI (99.9%): [169.111, 1588.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   58301.249 ±(99.9%) 48925.254 B/op [Average]
[info]   (min, avg, max) = (44031.748, 58301.249, 67977.630), stdev = 12705.733
[info]   CI (99.9%): [9375.995, 107226.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.884 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   53.408 ±(99.9%) 459.859 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 53.408, 267.040), stdev = 119.424
[info]   CI (99.9%): [≈ 0, 513.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 9.200, 13.000), stdev = 4.438
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala
[info] # Run progress: 37.03% complete, ETA 00:49:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 709201.444 ops/s
[info] # Warmup Iteration   2: 861560.117 ops/s
[info] # Warmup Iteration   3: 855657.901 ops/s
[info] Iteration   1: 856908.967 ops/s
[info]                  ·gc.alloc.rate:                                  1545.938 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2840.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.072 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.133 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1349.316 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2478.790 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                7.341 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   2: 861024.481 ops/s
[info]                  ·gc.alloc.rate:                                  1553.356 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2840.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.072 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.131 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.602 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3111.039 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 862744.067 ops/s
[info]                  ·gc.alloc.rate:                                  1556.552 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2840.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.375 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2483.890 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 860483.004 ops/s
[info]                  ·gc.alloc.rate:            1552.759 MB/sec
[info]                  ·gc.alloc.rate.norm:       2840.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1702.071 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3113.092 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 846571.347 ops/s
[info]                  ·gc.alloc.rate:                                  1527.558 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2840.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.513 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2531.294 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala":
[info]   857546.373 ±(99.9%) 24999.143 ops/s [Average]
[info]   (min, avg, max) = (846571.347, 857546.373, 862744.067), stdev = 6492.198
[info]   CI (99.9%): [832547.231, 882545.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1547.233 ±(99.9%) 44.892 MB/sec [Average]
[info]   (min, avg, max) = (1527.558, 1547.233, 1556.552), stdev = 11.658
[info]   CI (99.9%): [1502.341, 1592.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2840.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2840.000, 2840.000, 2840.001), stdev = 0.001
[info]   CI (99.9%): [2840.000, 2840.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.029 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.072), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.054 ±(99.9%) 0.275 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.133), stdev = 0.071
[info]   CI (99.9%): [≈ 0, 0.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1495.175 ±(99.9%) 726.694 MB/sec [Average]
[info]   (min, avg, max) = (1349.316, 1495.175, 1702.071), stdev = 188.720
[info]   CI (99.9%): [768.482, 2221.869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   2743.621 ±(99.9%) 1297.535 B/op [Average]
[info]   (min, avg, max) = (2478.790, 2743.621, 3113.092), stdev = 336.966
[info]   CI (99.9%): [1446.087, 4041.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.468 ±(99.9%) 12.642 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.468, 7.341), stdev = 3.283
[info]   CI (99.9%): [≈ 0, 14.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 10.000), stdev = 2.915
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 37.30% complete, ETA 00:49:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 857705.292 ops/s
[info] # Warmup Iteration   2: 1004975.543 ops/s
[info] # Warmup Iteration   3: 991770.070 ops/s
[info] Iteration   1: 1011139.427 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1011229.012 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1011321.891 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1012817.552 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1038242.228 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   1016950.022 ±(99.9%) 45910.116 ops/s [Average]
[info]   (min, avg, max) = (1011139.427, 1016950.022, 1038242.228), stdev = 11922.711
[info]   CI (99.9%): [971039.905, 1062860.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson
[info] # Run progress: 37.57% complete, ETA 00:49:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16641.053 ops/s
[info] # Warmup Iteration   2: 22808.325 ops/s
[info] # Warmup Iteration   3: 23152.149 ops/s
[info] Iteration   1: 22659.050 ops/s
[info]                  ·gc.alloc.rate:            956.229 MB/sec
[info]                  ·gc.alloc.rate.norm:       66432.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.928 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 70093.216 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 22431.415 ops/s
[info]                  ·gc.alloc.rate:            946.626 MB/sec
[info]                  ·gc.alloc.rate.norm:       66432.024 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.947 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 70805.520 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 22320.332 ops/s
[info]                  ·gc.alloc.rate:                   941.770 MB/sec
[info]                  ·gc.alloc.rate.norm:              66417.271 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.031 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        71160.753 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 281.825 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   4: 22923.859 ops/s
[info]                  ·gc.alloc.rate:                                  967.535 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66416.018 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.129 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 8.825 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.339 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       70109.343 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 23299.910 ops/s
[info]                  ·gc.alloc.rate:                                  983.152 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66416.019 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.036 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.079 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       68978.159 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson":
[info]   22726.913 ±(99.9%) 1521.303 ops/s [Average]
[info]   (min, avg, max) = (22320.332, 22726.913, 23299.910), stdev = 395.078
[info]   CI (99.9%): [21205.610, 24248.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   959.062 ±(99.9%) 64.255 MB/sec [Average]
[info]   (min, avg, max) = (941.770, 959.062, 983.152), stdev = 16.687
[info]   CI (99.9%): [894.808, 1023.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   66422.670 ±(99.9%) 32.929 B/op [Average]
[info]   (min, avg, max) = (66416.018, 66422.670, 66432.024), stdev = 8.552
[info]   CI (99.9%): [66389.741, 66455.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.026 ±(99.9%) 0.221 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.129), stdev = 0.057
[info]   CI (99.9%): [≈ 0, 0.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.772 ±(99.9%) 15.182 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.772, 8.825), stdev = 3.943
[info]   CI (99.9%): [≈ 0, 16.954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1013.865 ±(99.9%) 25.819 MB/sec [Average]
[info]   (min, avg, max) = (1008.928, 1013.865, 1021.339), stdev = 6.705
[info]   CI (99.9%): [988.046, 1039.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   70229.398 ±(99.9%) 3220.469 B/op [Average]
[info]   (min, avg, max) = (68978.159, 70229.398, 71160.753), stdev = 836.346
[info]   CI (99.9%): [67008.928, 73449.867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   56.365 ±(99.9%) 485.319 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 56.365, 281.825), stdev = 126.036
[info]   CI (99.9%): [≈ 0, 541.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.800, 11.000), stdev = 4.382
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce
[info] # Run progress: 37.84% complete, ETA 00:49:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16171.558 ops/s
[info] # Warmup Iteration   2: 23841.979 ops/s
[info] # Warmup Iteration   3: 23778.699 ops/s
[info] Iteration   1: 24408.531 ops/s
[info]                  ·gc.alloc.rate:                   1324.636 MB/sec
[info]                  ·gc.alloc.rate.norm:              85416.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1349.508 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        87019.825 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 42.952 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 24010.480 ops/s
[info]                  ·gc.alloc.rate:                                  1302.994 MB/sec
[info]                  ·gc.alloc.rate.norm:                             85416.075 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.065 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.285 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1354.787 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       88811.309 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                218.317 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   3: 20097.785 ops/s
[info]                  ·gc.alloc.rate:                                  1090.814 MB/sec
[info]                  ·gc.alloc.rate.norm:                             85416.023 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.019 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.449 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.208 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       79965.526 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   4: 20270.174 ops/s
[info]                  ·gc.alloc.rate:                                  1100.361 MB/sec
[info]                  ·gc.alloc.rate.norm:                             85416.020 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.305 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.406 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       79287.117 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 20267.196 ops/s
[info]                  ·gc.alloc.rate:                                  1099.820 MB/sec
[info]                  ·gc.alloc.rate.norm:                             85416.020 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.045 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.055 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       79298.851 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce":
[info]   21810.833 ±(99.9%) 8453.339 ops/s [Average]
[info]   (min, avg, max) = (20097.785, 21810.833, 24408.531), stdev = 2195.305
[info]   CI (99.9%): [13357.494, 30264.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate":
[info]   1183.725 ±(99.9%) 458.466 MB/sec [Average]
[info]   (min, avg, max) = (1090.814, 1183.725, 1324.636), stdev = 119.062
[info]   CI (99.9%): [725.259, 1642.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   85416.031 ±(99.9%) 0.095 B/op [Average]
[info]   (min, avg, max) = (85416.017, 85416.031, 85416.075), stdev = 0.025
[info]   CI (99.9%): [85415.936, 85416.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.018 ±(99.9%) 0.107 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.065), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.217 ±(99.9%) 6.983 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.217, 4.285), stdev = 1.813
[info]   CI (99.9%): [≈ 0, 8.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1153.593 ±(99.9%) 697.985 MB/sec [Average]
[info]   (min, avg, max) = (1021.055, 1153.593, 1354.787), stdev = 181.265
[info]   CI (99.9%): [455.608, 1851.578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   82876.526 ±(99.9%) 17911.301 B/op [Average]
[info]   (min, avg, max) = (79287.117, 82876.526, 88811.309), stdev = 4651.508
[info]   CI (99.9%): [64965.224, 100787.827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   52.254 ±(99.9%) 364.567 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 52.254, 218.317), stdev = 94.677
[info]   CI (99.9%): [≈ 0, 416.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.600, 12.000), stdev = 4.615
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala
[info] # Run progress: 38.11% complete, ETA 00:49:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14345.662 ops/s
[info] # Warmup Iteration   2: 25063.205 ops/s
[info] # Warmup Iteration   3: 25539.649 ops/s
[info] Iteration   1: 25812.458 ops/s
[info]                  ·gc.alloc.rate:                   1178.727 MB/sec
[info]                  ·gc.alloc.rate.norm:              71888.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1344.581 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        82003.135 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 40.616 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   2: 25869.210 ops/s
[info]                  ·gc.alloc.rate:                   1181.538 MB/sec
[info]                  ·gc.alloc.rate.norm:              71888.557 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.106 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        61397.257 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 243.157 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   3: 25245.876 ops/s
[info]                  ·gc.alloc.rate:                                  1153.057 MB/sec
[info]                  ·gc.alloc.rate.norm:                             71888.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.144 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 8.955 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.487 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       84882.746 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 25298.458 ops/s
[info]                  ·gc.alloc.rate:            1155.392 MB/sec
[info]                  ·gc.alloc.rate.norm:       71888.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.081 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 63531.223 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   5: 25299.895 ops/s
[info]                  ·gc.alloc.rate:            1155.449 MB/sec
[info]                  ·gc.alloc.rate.norm:       71888.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.401 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 84701.602 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala":
[info]   25505.179 ±(99.9%) 1185.368 ops/s [Average]
[info]   (min, avg, max) = (25245.876, 25505.179, 25869.210), stdev = 307.836
[info]   CI (99.9%): [24319.812, 26690.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1164.832 ±(99.9%) 54.045 MB/sec [Average]
[info]   (min, avg, max) = (1153.057, 1164.832, 1181.538), stdev = 14.035
[info]   CI (99.9%): [1110.788, 1218.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   71888.125 ±(99.9%) 0.930 B/op [Average]
[info]   (min, avg, max) = (71888.016, 71888.125, 71888.557), stdev = 0.242
[info]   CI (99.9%): [71887.194, 71889.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.029 ±(99.9%) 0.247 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.144), stdev = 0.064
[info]   CI (99.9%): [≈ 0, 0.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.791 ±(99.9%) 15.421 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.791, 8.955), stdev = 4.005
[info]   CI (99.9%): [≈ 0, 17.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1219.531 ±(99.9%) 719.301 MB/sec [Average]
[info]   (min, avg, max) = (1009.106, 1219.531, 1361.487), stdev = 186.800
[info]   CI (99.9%): [500.230, 1938.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   75303.193 ±(99.9%) 45436.843 B/op [Average]
[info]   (min, avg, max) = (61397.257, 75303.193, 84882.746), stdev = 11799.804
[info]   CI (99.9%): [29866.350, 120740.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   56.755 ±(99.9%) 406.921 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 56.755, 243.157), stdev = 105.676
[info]   CI (99.9%): [≈ 0, 463.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.600, 15.000), stdev = 5.941
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala
[info] # Run progress: 38.38% complete, ETA 00:48:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 248860.466 ops/s
[info] # Warmup Iteration   2: 253501.556 ops/s
[info] # Warmup Iteration   3: 267102.991 ops/s
[info] Iteration   1: 266134.839 ops/s
[info]                  ·gc.alloc.rate:            692.446 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1012.941 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5991.818 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 265962.005 ops/s
[info]                  ·gc.alloc.rate:            692.043 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.356 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3997.233 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 261005.638 ops/s
[info]                  ·gc.alloc.rate:            679.341 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.528 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4073.013 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 267503.961 ops/s
[info]                  ·gc.alloc.rate:            696.089 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.366 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3974.061 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 267741.199 ops/s
[info]                  ·gc.alloc.rate:                   696.788 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             675.443 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3970.529 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 15.663 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala":
[info]   265669.529 ±(99.9%) 10494.486 ops/s [Average]
[info]   (min, avg, max) = (261005.638, 265669.529, 267741.199), stdev = 2725.385
[info]   CI (99.9%): [255175.042, 276164.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   691.341 ±(99.9%) 27.087 MB/sec [Average]
[info]   (min, avg, max) = (679.341, 691.341, 696.788), stdev = 7.034
[info]   CI (99.9%): [664.255, 718.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.002, 4096.002, 4096.002), stdev = 0.001
[info]   CI (99.9%): [4096.001, 4096.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   742.927 ±(99.9%) 581.227 MB/sec [Average]
[info]   (min, avg, max) = (675.356, 742.927, 1012.941), stdev = 150.943
[info]   CI (99.9%): [161.700, 1324.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   4401.331 ±(99.9%) 3427.336 B/op [Average]
[info]   (min, avg, max) = (3970.529, 4401.331, 5991.818), stdev = 890.068
[info]   CI (99.9%): [973.995, 7828.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.533 ±(99.9%) 4.588 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.533, 2.664), stdev = 1.192
[info]   CI (99.9%): [≈ 0, 5.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   3.133 ±(99.9%) 26.972 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.133, 15.663), stdev = 7.005
[info]   CI (99.9%): [≈ 0, 30.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 8.000), stdev = 1.095
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson
[info] # Run progress: 38.65% complete, ETA 00:48:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8010.171 ops/s
[info] # Warmup Iteration   2: 15112.146 ops/s
[info] # Warmup Iteration   3: 15830.671 ops/s
[info] Iteration   1: 15842.254 ops/s
[info]                  ·gc.alloc.rate:                                  1579.599 MB/sec
[info]                  ·gc.alloc.rate.norm:                             156904.026 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.066 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 6.560 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1686.214 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       167494.216 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                397.063 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        17.000 ms
[info] Iteration   2: 15846.198 ops/s
[info]                  ·gc.alloc.rate:                                  1579.359 MB/sec
[info]                  ·gc.alloc.rate.norm:                             156905.529 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.014 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.375 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.113 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       135223.302 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 15970.708 ops/s
[info]                  ·gc.alloc.rate:                                  1591.978 MB/sec
[info]                  ·gc.alloc.rate.norm:                             156904.026 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.388 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.689 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       167717.020 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 15430.364 ops/s
[info]                  ·gc.alloc.rate:                                  1538.431 MB/sec
[info]                  ·gc.alloc.rate.norm:                             156904.033 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.669 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.097 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       173596.299 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 15444.072 ops/s
[info]                  ·gc.alloc.rate:                                  1539.704 MB/sec
[info]                  ·gc.alloc.rate.norm:                             156904.026 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.180 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.570 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       138751.171 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson":
[info]   15706.719 ±(99.9%) 968.170 ops/s [Average]
[info]   (min, avg, max) = (15430.364, 15706.719, 15970.708), stdev = 251.431
[info]   CI (99.9%): [14738.549, 16674.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1565.814 ±(99.9%) 96.066 MB/sec [Average]
[info]   (min, avg, max) = (1538.431, 1565.814, 1591.978), stdev = 24.948
[info]   CI (99.9%): [1469.748, 1661.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   156904.328 ±(99.9%) 2.585 B/op [Average]
[info]   (min, avg, max) = (156904.026, 156904.328, 156905.529), stdev = 0.671
[info]   CI (99.9%): [156901.743, 156906.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.018 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (0.002, 0.018, 0.066), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.834 ±(99.9%) 10.319 B/op [Average]
[info]   (min, avg, max) = (0.180, 1.834, 6.560), stdev = 2.680
[info]   CI (99.9%): [≈ 0, 12.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1562.537 ±(99.9%) 707.660 MB/sec [Average]
[info]   (min, avg, max) = (1361.113, 1562.537, 1702.097), stdev = 183.777
[info]   CI (99.9%): [854.877, 2270.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   156556.402 ±(99.9%) 69596.611 B/op [Average]
[info]   (min, avg, max) = (135223.302, 156556.402, 173596.299), stdev = 18074.019
[info]   CI (99.9%): [86959.791, 226153.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.884 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   79.413 ±(99.9%) 683.766 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 79.413, 397.063), stdev = 177.572
[info]   CI (99.9%): [≈ 0, 763.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 17.000), stdev = 5.941
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce
[info] # Run progress: 38.92% complete, ETA 00:48:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37799.122 ops/s
[info] # Warmup Iteration   2: 48404.761 ops/s
[info] # Warmup Iteration   3: 48294.672 ops/s
[info] Iteration   1: 48899.721 ops/s
[info]                  ·gc.alloc.rate:                   1186.006 MB/sec
[info]                  ·gc.alloc.rate.norm:              38176.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.781 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        43415.523 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 21.440 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 49972.862 ops/s
[info]                  ·gc.alloc.rate:                   1211.957 MB/sec
[info]                  ·gc.alloc.rate.norm:              38176.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1011.049 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        31847.506 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 104.900 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 50634.982 ops/s
[info]                  ·gc.alloc.rate:                                  1228.131 MB/sec
[info]                  ·gc.alloc.rate.norm:                             38176.008 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.056 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.727 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.493 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       42321.532 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 50740.088 ops/s
[info]                  ·gc.alloc.rate:                                  1231.072 MB/sec
[info]                  ·gc.alloc.rate.norm:                             38176.008 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.984 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       42235.631 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 50452.835 ops/s
[info]                  ·gc.alloc.rate:                                  1223.610 MB/sec
[info]                  ·gc.alloc.rate.norm:                             38176.008 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.041 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.051 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       31856.263 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce":
[info]   50140.097 ±(99.9%) 2900.282 ops/s [Average]
[info]   (min, avg, max) = (48899.721, 50140.097, 50740.088), stdev = 753.194
[info]   CI (99.9%): [47239.815, 53040.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1216.155 ±(99.9%) 70.691 MB/sec [Average]
[info]   (min, avg, max) = (1186.006, 1216.155, 1231.072), stdev = 18.358
[info]   CI (99.9%): [1145.464, 1286.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   38176.008 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (38176.008, 38176.008, 38176.009), stdev = 0.001
[info]   CI (99.9%): [38176.007, 38176.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.011 ±(99.9%) 0.095 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.056), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.356 ±(99.9%) 2.951 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.356, 1.727), stdev = 0.766
[info]   CI (99.9%): [≈ 0, 3.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1220.872 ±(99.9%) 720.393 MB/sec [Average]
[info]   (min, avg, max) = (1011.049, 1220.872, 1361.984), stdev = 187.084
[info]   CI (99.9%): [500.478, 1941.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   38335.291 ±(99.9%) 22860.366 B/op [Average]
[info]   (min, avg, max) = (31847.506, 38335.291, 43415.523), stdev = 5936.764
[info]   CI (99.9%): [15474.925, 61195.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   25.268 ±(99.9%) 175.101 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 25.268, 104.900), stdev = 45.473
[info]   CI (99.9%): [≈ 0, 200.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.600, 13.000), stdev = 4.980
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala
[info] # Run progress: 39.19% complete, ETA 00:48:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 73170.888 ops/s
[info] # Warmup Iteration   2: 114258.998 ops/s
[info] # Warmup Iteration   3: 114702.312 ops/s
[info] Iteration   1: 114590.520 ops/s
[info]                  ·gc.alloc.rate:                   970.721 MB/sec
[info]                  ·gc.alloc.rate.norm:              13336.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.258 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        13851.706 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 9.149 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 114104.353 ops/s
[info]                  ·gc.alloc.rate:            966.687 MB/sec
[info]                  ·gc.alloc.rate.norm:       13336.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.037 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13920.248 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 114426.569 ops/s
[info]                  ·gc.alloc.rate:                                  969.404 MB/sec
[info]                  ·gc.alloc.rate.norm:                             13336.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.090 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.234 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.023 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       13936.056 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                54.975 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   4: 111284.204 ops/s
[info]                  ·gc.alloc.rate:                                  942.811 MB/sec
[info]                  ·gc.alloc.rate.norm:                             13336.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.045 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.634 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.019 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       14442.261 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 110924.023 ops/s
[info]                  ·gc.alloc.rate:            939.809 MB/sec
[info]                  ·gc.alloc.rate.norm:       13336.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.732 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9659.678 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala":
[info]   113065.934 ±(99.9%) 6946.211 ops/s [Average]
[info]   (min, avg, max) = (110924.023, 113065.934, 114590.520), stdev = 1803.909
[info]   CI (99.9%): [106119.723, 120012.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   957.886 ±(99.9%) 58.681 MB/sec [Average]
[info]   (min, avg, max) = (939.809, 957.886, 970.721), stdev = 15.239
[info]   CI (99.9%): [899.206, 1016.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   13336.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13336.004, 13336.004, 13336.004), stdev = 0.001
[info]   CI (99.9%): [13336.003, 13336.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.027 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.090), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.374 ±(99.9%) 2.133 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.374, 1.234), stdev = 0.554
[info]   CI (99.9%): [≈ 0, 2.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   946.414 ±(99.9%) 572.232 MB/sec [Average]
[info]   (min, avg, max) = (680.732, 946.414, 1021.019), stdev = 148.607
[info]   CI (99.9%): [374.182, 1518.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   13161.990 ±(99.9%) 7593.468 B/op [Average]
[info]   (min, avg, max) = (9659.678, 13161.990, 14442.261), stdev = 1971.999
[info]   CI (99.9%): [5568.522, 20755.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   12.825 ±(99.9%) 92.004 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12.825, 54.975), stdev = 23.893
[info]   CI (99.9%): [≈ 0, 104.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.400, 12.000), stdev = 4.980
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala
[info] # Run progress: 39.46% complete, ETA 00:47:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1212820.760 ops/s
[info] # Warmup Iteration   2: 1417531.978 ops/s
[info] # Warmup Iteration   3: 1419437.323 ops/s
[info] Iteration   1: 1415989.113 ops/s
[info]                  ·gc.alloc.rate:                                  1518.377 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1688.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.095 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.105 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1685.702 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1874.017 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                4.443 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        14.000 ms
[info] Iteration   2: 1454708.060 ops/s
[info]                  ·gc.alloc.rate:                                  1560.342 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1688.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.069 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.075 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.175 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1841.437 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 1448580.374 ops/s
[info]                  ·gc.alloc.rate:                                  1553.988 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1688.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.958 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1479.410 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 1452905.728 ops/s
[info]                  ·gc.alloc.rate:                                  1558.049 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1688.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.782 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1843.721 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 1432345.332 ops/s
[info]                  ·gc.alloc.rate:                                  1536.569 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1688.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.954 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1496.177 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala":
[info]   1440905.721 ±(99.9%) 63492.513 ops/s [Average]
[info]   (min, avg, max) = (1415989.113, 1440905.721, 1454708.060), stdev = 16488.804
[info]   CI (99.9%): [1377413.209, 1504398.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1545.465 ±(99.9%) 68.483 MB/sec [Average]
[info]   (min, avg, max) = (1518.377, 1545.465, 1560.342), stdev = 17.785
[info]   CI (99.9%): [1476.982, 1613.949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1688.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1688.000, 1688.000, 1688.000), stdev = 0.001
[info]   CI (99.9%): [1688.000, 1688.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.033 ±(99.9%) 0.175 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.033, 0.095), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.037 ±(99.9%) 0.193 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.037, 0.105), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1562.714 ±(99.9%) 706.157 MB/sec [Average]
[info]   (min, avg, max) = (1361.954, 1562.714, 1702.175), stdev = 183.387
[info]   CI (99.9%): [856.557, 2268.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1706.952 ±(99.9%) 772.302 B/op [Average]
[info]   (min, avg, max) = (1479.410, 1706.952, 1874.017), stdev = 200.565
[info]   CI (99.9%): [934.650, 2479.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.889 ±(99.9%) 7.650 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.889, 4.443), stdev = 1.987
[info]   CI (99.9%): [≈ 0, 8.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 14.000), stdev = 4.722
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 39.73% complete, ETA 00:47:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1356312.116 ops/s
[info] # Warmup Iteration   2: 1543640.212 ops/s
[info] # Warmup Iteration   3: 1549726.878 ops/s
[info] Iteration   1: 1552228.474 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1550323.741 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1547698.168 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1545686.266 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1553503.830 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc":
[info]   1549888.096 ±(99.9%) 12356.885 ops/s [Average]
[info]   (min, avg, max) = (1545686.266, 1549888.096, 1553503.830), stdev = 3209.044
[info]   CI (99.9%): [1537531.211, 1562244.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson
[info] # Run progress: 40.00% complete, ETA 00:47:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 43284.230 ops/s
[info] # Warmup Iteration   2: 58372.367 ops/s
[info] # Warmup Iteration   3: 57738.873 ops/s
[info] Iteration   1: 58401.035 ops/s
[info]                  ·gc.alloc.rate:            1358.075 MB/sec
[info]                  ·gc.alloc.rate.norm:       36608.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.277 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 36263.029 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   2: 58616.421 ops/s
[info]                  ·gc.alloc.rate:                                  1363.286 MB/sec
[info]                  ·gc.alloc.rate.norm:                             36608.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.193 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.180 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1357.429 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       36450.746 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                107.313 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 58209.224 ops/s
[info]                  ·gc.alloc.rate:                                  1353.814 MB/sec
[info]                  ·gc.alloc.rate.norm:                             36608.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.071 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.418 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       36813.627 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 56843.640 ops/s
[info]                  ·gc.alloc.rate:                                  1321.973 MB/sec
[info]                  ·gc.alloc.rate.norm:                             36608.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.073 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.339 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       37698.128 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 57903.856 ops/s
[info]                  ·gc.alloc.rate:                                  1346.741 MB/sec
[info]                  ·gc.alloc.rate.norm:                             36608.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.071 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.414 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       37006.861 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson":
[info]   57994.835 ±(99.9%) 2675.337 ops/s [Average]
[info]   (min, avg, max) = (56843.640, 57994.835, 58616.421), stdev = 694.777
[info]   CI (99.9%): [55319.498, 60670.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1348.778 ±(99.9%) 62.237 MB/sec [Average]
[info]   (min, avg, max) = (1321.973, 1348.778, 1363.286), stdev = 16.163
[info]   CI (99.9%): [1286.540, 1411.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   36608.007 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (36608.007, 36608.007, 36608.008), stdev = 0.001
[info]   CI (99.9%): [36608.005, 36608.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.040 ±(99.9%) 0.329 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.040, 0.193), stdev = 0.085
[info]   CI (99.9%): [≈ 0, 0.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.079 ±(99.9%) 8.828 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.079, 5.180), stdev = 2.293
[info]   CI (99.9%): [≈ 0, 9.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1357.375 ±(99.9%) 26.867 MB/sec [Average]
[info]   (min, avg, max) = (1345.277, 1357.375, 1361.418), stdev = 6.977
[info]   CI (99.9%): [1330.508, 1384.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   36846.478 ±(99.9%) 2151.822 B/op [Average]
[info]   (min, avg, max) = (36263.029, 36846.478, 37698.128), stdev = 558.821
[info]   CI (99.9%): [34694.656, 38998.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   21.463 ±(99.9%) 184.800 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21.463, 107.313), stdev = 47.992
[info]   CI (99.9%): [≈ 0, 206.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 15.000), stdev = 5.079
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce
[info] # Run progress: 40.27% complete, ETA 00:47:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9496.948 ops/s
[info] # Warmup Iteration   2: 13412.605 ops/s
[info] # Warmup Iteration   3: 13886.602 ops/s
[info] Iteration   1: 13746.042 ops/s
[info]                  ·gc.alloc.rate:                   1226.600 MB/sec
[info]                  ·gc.alloc.rate.norm:              140456.032 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1349.271 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        154502.907 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 76.260 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 13425.511 ops/s
[info]                  ·gc.alloc.rate:                                  1198.367 MB/sec
[info]                  ·gc.alloc.rate.norm:                             140456.030 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.030 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.536 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1353.157 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       158598.291 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                390.444 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   3: 13897.887 ops/s
[info]                  ·gc.alloc.rate:                                  1240.062 MB/sec
[info]                  ·gc.alloc.rate.norm:                             140456.029 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.027 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.057 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.937 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       115636.789 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 13783.229 ops/s
[info]                  ·gc.alloc.rate:                                  1229.969 MB/sec
[info]                  ·gc.alloc.rate.norm:                             140456.030 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.010 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.146 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.433 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       155468.544 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 13769.283 ops/s
[info]                  ·gc.alloc.rate:                                  1228.712 MB/sec
[info]                  ·gc.alloc.rate.norm:                             140456.040 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.264 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.068 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       116719.940 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce":
[info]   13724.390 ±(99.9%) 681.728 ops/s [Average]
[info]   (min, avg, max) = (13425.511, 13724.390, 13897.887), stdev = 177.043
[info]   CI (99.9%): [13042.662, 14406.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1224.742 ±(99.9%) 60.175 MB/sec [Average]
[info]   (min, avg, max) = (1198.367, 1224.742, 1240.062), stdev = 15.627
[info]   CI (99.9%): [1164.567, 1284.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   140456.032 ±(99.9%) 0.016 B/op [Average]
[info]   (min, avg, max) = (140456.029, 140456.032, 140456.040), stdev = 0.004
[info]   CI (99.9%): [140456.016, 140456.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.014 ±(99.9%) 0.054 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.030), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.601 ±(99.9%) 6.216 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.601, 3.536), stdev = 1.614
[info]   CI (99.9%): [≈ 0, 7.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1221.173 ±(99.9%) 703.832 MB/sec [Average]
[info]   (min, avg, max) = (1020.937, 1221.173, 1361.433), stdev = 182.783
[info]   CI (99.9%): [517.342, 1925.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   140185.294 ±(99.9%) 84601.683 B/op [Average]
[info]   (min, avg, max) = (115636.789, 140185.294, 158598.291), stdev = 21970.788
[info]   CI (99.9%): [55583.611, 224786.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.562 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.331), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   93.341 ±(99.9%) 652.055 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 93.341, 390.444), stdev = 169.337
[info]   CI (99.9%): [≈ 0, 745.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.200, 12.000), stdev = 4.868
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala
[info] # Run progress: 40.54% complete, ETA 00:47:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7600.660 ops/s
[info] # Warmup Iteration   2: 13115.608 ops/s
[info] # Warmup Iteration   3: 13481.276 ops/s
[info] Iteration   1: 13476.286 ops/s
[info]                  ·gc.alloc.rate:            1089.119 MB/sec
[info]                  ·gc.alloc.rate.norm:       127184.033 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.322 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 117865.606 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 13452.528 ops/s
[info]                  ·gc.alloc.rate:            1087.200 MB/sec
[info]                  ·gc.alloc.rate.norm:       127184.030 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.266 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 118067.086 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   3: 13438.962 ops/s
[info]                  ·gc.alloc.rate:                                  1086.244 MB/sec
[info]                  ·gc.alloc.rate.norm:                             127185.196 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.104 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 12.194 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.415 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       119126.222 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                468.079 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 13550.481 ops/s
[info]                  ·gc.alloc.rate:                                  1095.160 MB/sec
[info]                  ·gc.alloc.rate.norm:                             127184.030 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.305 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.727 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       158141.323 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 13567.075 ops/s
[info]                  ·gc.alloc.rate:                                  1096.205 MB/sec
[info]                  ·gc.alloc.rate.norm:                             127184.040 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.304 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.990 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       118457.407 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala":
[info]   13497.066 ±(99.9%) 224.083 ops/s [Average]
[info]   (min, avg, max) = (13438.962, 13497.066, 13567.075), stdev = 58.194
[info]   CI (99.9%): [13272.983, 13721.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1090.785 ±(99.9%) 17.726 MB/sec [Average]
[info]   (min, avg, max) = (1086.244, 1090.785, 1096.205), stdev = 4.603
[info]   CI (99.9%): [1073.059, 1108.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   127184.266 ±(99.9%) 2.003 B/op [Average]
[info]   (min, avg, max) = (127184.030, 127184.266, 127185.196), stdev = 0.520
[info]   CI (99.9%): [127182.263, 127186.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.022 ±(99.9%) 0.177 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.104), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.561 ±(99.9%) 20.746 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.561, 12.194), stdev = 5.388
[info]   CI (99.9%): [≈ 0, 23.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1083.744 ±(99.9%) 598.704 MB/sec [Average]
[info]   (min, avg, max) = (1009.266, 1083.744, 1361.727), stdev = 155.482
[info]   CI (99.9%): [485.040, 1682.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   126331.529 ±(99.9%) 68498.023 B/op [Average]
[info]   (min, avg, max) = (117865.606, 126331.529, 158141.323), stdev = 17788.719
[info]   CI (99.9%): [57833.506, 194829.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.800 ±(99.9%) 6.884 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.800, 3.998), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   93.616 ±(99.9%) 806.061 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 93.616, 468.079), stdev = 209.331
[info]   CI (99.9%): [≈ 0, 899.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.400, 13.000), stdev = 5.030
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala
[info] # Run progress: 40.81% complete, ETA 00:46:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 244191.467 ops/s
[info] # Warmup Iteration   2: 254653.990 ops/s
[info] # Warmup Iteration   3: 253344.400 ops/s
[info] Iteration   1: 244901.629 ops/s
[info]                  ·gc.alloc.rate:            637.216 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.307 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4340.848 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 268208.877 ops/s
[info]                  ·gc.alloc.rate:            697.967 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.411 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3963.632 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 266969.809 ops/s
[info]                  ·gc.alloc.rate:            694.629 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.295 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3981.994 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 266473.241 ops/s
[info]                  ·gc.alloc.rate:            693.442 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.398 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3989.419 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 257716.443 ops/s
[info]                  ·gc.alloc.rate:            670.624 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.372 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4125.001 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala":
[info]   260854.000 ±(99.9%) 37894.896 ops/s [Average]
[info]   (min, avg, max) = (244901.629, 260854.000, 268208.877), stdev = 9841.184
[info]   CI (99.9%): [222959.104, 298748.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   678.776 ±(99.9%) 98.707 MB/sec [Average]
[info]   (min, avg, max) = (637.216, 678.776, 697.967), stdev = 25.634
[info]   CI (99.9%): [580.069, 777.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.002, 4096.002, 4096.002), stdev = 0.001
[info]   CI (99.9%): [4096.001, 4096.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   675.357 ±(99.9%) 0.203 MB/sec [Average]
[info]   (min, avg, max) = (675.295, 675.357, 675.411), stdev = 0.053
[info]   CI (99.9%): [675.153, 675.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   4080.179 ±(99.9%) 613.143 B/op [Average]
[info]   (min, avg, max) = (3963.632, 4080.179, 4340.848), stdev = 159.231
[info]   CI (99.9%): [3467.036, 4693.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson
[info] # Run progress: 41.08% complete, ETA 00:46:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5558.847 ops/s
[info] # Warmup Iteration   2: 10060.521 ops/s
[info] # Warmup Iteration   3: 10314.021 ops/s
[info] Iteration   1: 10306.713 ops/s
[info]                  ·gc.alloc.rate:            1402.925 MB/sec
[info]                  ·gc.alloc.rate.norm:       214248.040 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.272 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 205443.600 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 10375.883 ops/s
[info]                  ·gc.alloc.rate:                                  1412.253 MB/sec
[info]                  ·gc.alloc.rate.norm:                             214248.039 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.097 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 14.749 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1357.332 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       205916.158 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                606.230 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 10320.079 ops/s
[info]                  ·gc.alloc.rate:            1404.752 MB/sec
[info]                  ·gc.alloc.rate.norm:       214248.043 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.805 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 259553.544 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 10230.337 ops/s
[info]                  ·gc.alloc.rate:            1393.036 MB/sec
[info]                  ·gc.alloc.rate.norm:       214248.124 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.964 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 209469.248 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 10247.738 ops/s
[info]                  ·gc.alloc.rate:            1394.932 MB/sec
[info]                  ·gc.alloc.rate.norm:       214248.040 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.423 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 209101.399 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson":
[info]   10296.150 ±(99.9%) 225.490 ops/s [Average]
[info]   (min, avg, max) = (10230.337, 10296.150, 10375.883), stdev = 58.559
[info]   CI (99.9%): [10070.661, 10521.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1401.579 ±(99.9%) 30.011 MB/sec [Average]
[info]   (min, avg, max) = (1393.036, 1401.579, 1412.253), stdev = 7.794
[info]   CI (99.9%): [1371.569, 1431.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   214248.057 ±(99.9%) 0.145 B/op [Average]
[info]   (min, avg, max) = (214248.039, 214248.057, 214248.124), stdev = 0.038
[info]   CI (99.9%): [214247.912, 214248.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.019 ±(99.9%) 0.167 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.097), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.950 ±(99.9%) 25.398 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.950, 14.749), stdev = 6.596
[info]   CI (99.9%): [≈ 0, 28.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1425.559 ±(99.9%) 595.204 MB/sec [Average]
[info]   (min, avg, max) = (1345.272, 1425.559, 1701.805), stdev = 154.572
[info]   CI (99.9%): [830.356, 2020.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   217896.790 ±(99.9%) 89941.287 B/op [Average]
[info]   (min, avg, max) = (205443.600, 217896.790, 259553.544), stdev = 23357.467
[info]   CI (99.9%): [127955.503, 307838.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   121.246 ±(99.9%) 1043.965 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 121.246, 606.230), stdev = 271.114
[info]   CI (99.9%): [≈ 0, 1165.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.800, 16.000), stdev = 5.404
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce
[info] # Run progress: 41.35% complete, ETA 00:46:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27125.176 ops/s
[info] # Warmup Iteration   2: 36164.091 ops/s
[info] # Warmup Iteration   3: 36181.523 ops/s
[info] Iteration   1: 37603.811 ops/s
[info]                  ·gc.alloc.rate:            1169.234 MB/sec
[info]                  ·gc.alloc.rate.norm:       48933.356 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.237 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 42321.086 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 37566.424 ops/s
[info]                  ·gc.alloc.rate:                   1167.492 MB/sec
[info]                  ·gc.alloc.rate.norm:              48928.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1347.817 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        56485.184 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 139.538 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   3: 37867.637 ops/s
[info]                  ·gc.alloc.rate:                                  1177.439 MB/sec
[info]                  ·gc.alloc.rate.norm:                             48928.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.039 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.612 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.394 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       42443.614 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 37895.127 ops/s
[info]                  ·gc.alloc.rate:                                  1177.912 MB/sec
[info]                  ·gc.alloc.rate.norm:                             48928.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.054 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.363 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       56548.186 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 38209.638 ops/s
[info]                  ·gc.alloc.rate:                                  1187.634 MB/sec
[info]                  ·gc.alloc.rate.norm:                             48928.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.101 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.965 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       42061.570 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce":
[info]   37828.527 ±(99.9%) 1001.179 ops/s [Average]
[info]   (min, avg, max) = (37566.424, 37828.527, 38209.638), stdev = 260.003
[info]   CI (99.9%): [36827.348, 38829.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1175.942 ±(99.9%) 31.000 MB/sec [Average]
[info]   (min, avg, max) = (1167.492, 1175.942, 1187.634), stdev = 8.051
[info]   CI (99.9%): [1144.942, 1206.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   48929.080 ±(99.9%) 9.205 B/op [Average]
[info]   (min, avg, max) = (48928.011, 48929.080, 48933.356), stdev = 2.390
[info]   CI (99.9%): [48919.875, 48938.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.009 ±(99.9%) 0.065 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.039), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.353 ±(99.9%) 2.714 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.353, 1.612), stdev = 0.705
[info]   CI (99.9%): [≈ 0, 3.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1152.555 ±(99.9%) 710.592 MB/sec [Average]
[info]   (min, avg, max) = (1011.237, 1152.555, 1361.363), stdev = 184.539
[info]   CI (99.9%): [441.963, 1863.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   47971.928 ±(99.9%) 30040.843 B/op [Average]
[info]   (min, avg, max) = (42061.570, 47971.928, 56548.186), stdev = 7801.512
[info]   CI (99.9%): [17931.085, 78012.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   27.908 ±(99.9%) 240.294 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 27.908, 139.538), stdev = 62.404
[info]   CI (99.9%): [≈ 0, 268.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 13.000), stdev = 4.775
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala
[info] # Run progress: 41.62% complete, ETA 00:46:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26751.007 ops/s
[info] # Warmup Iteration   2: 43452.397 ops/s
[info] # Warmup Iteration   3: 44113.083 ops/s
[info] Iteration   1: 43929.553 ops/s
[info]                  ·gc.alloc.rate:            1165.584 MB/sec
[info]                  ·gc.alloc.rate.norm:       41752.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.388 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 36156.970 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 44207.239 ops/s
[info]                  ·gc.alloc.rate:                                  1172.810 MB/sec
[info]                  ·gc.alloc.rate.norm:                             41752.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.072 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.556 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1349.402 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       48038.690 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                142.267 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        13.000 ms
[info] Iteration   3: 44692.941 ops/s
[info]                  ·gc.alloc.rate:                                  1185.445 MB/sec
[info]                  ·gc.alloc.rate.norm:                             41752.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.114 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.053 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       35962.035 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   4: 44731.776 ops/s
[info]                  ·gc.alloc.rate:            1186.385 MB/sec
[info]                  ·gc.alloc.rate.norm:       41752.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.972 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 35930.686 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 44386.536 ops/s
[info]                  ·gc.alloc.rate:            1177.767 MB/sec
[info]                  ·gc.alloc.rate.norm:       41752.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.879 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 48278.807 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala":
[info]   44389.609 ±(99.9%) 1297.285 ops/s [Average]
[info]   (min, avg, max) = (43929.553, 44389.609, 44731.776), stdev = 336.901
[info]   CI (99.9%): [43092.324, 45686.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1177.598 ±(99.9%) 33.684 MB/sec [Average]
[info]   (min, avg, max) = (1165.584, 1177.598, 1186.385), stdev = 8.748
[info]   CI (99.9%): [1143.914, 1211.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   41752.009 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (41752.009, 41752.009, 41752.010), stdev = 0.001
[info]   CI (99.9%): [41752.008, 41752.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.037 ±(99.9%) 0.204 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.114), stdev = 0.053
[info]   CI (99.9%): [≈ 0, 0.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.314 ±(99.9%) 7.205 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.314, 4.013), stdev = 1.871
[info]   CI (99.9%): [≈ 0, 8.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1152.539 ±(99.9%) 714.368 MB/sec [Average]
[info]   (min, avg, max) = (1009.388, 1152.539, 1361.879), stdev = 185.519
[info]   CI (99.9%): [438.171, 1866.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   40873.437 ±(99.9%) 25613.156 B/op [Average]
[info]   (min, avg, max) = (35930.686, 40873.437, 48278.807), stdev = 6651.655
[info]   CI (99.9%): [15260.282, 66486.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   28.453 ±(99.9%) 244.992 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 28.453, 142.267), stdev = 63.624
[info]   CI (99.9%): [≈ 0, 273.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.000, 13.000), stdev = 5.523
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala
[info] # Run progress: 41.89% complete, ETA 00:46:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1457013.511 ops/s
[info] # Warmup Iteration   2: 1678252.516 ops/s
[info] # Warmup Iteration   3: 1706273.366 ops/s
[info] Iteration   1: 1673951.207 ops/s
[info]                  ·gc.alloc.rate:                                  1522.819 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1432.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.068 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.064 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1349.994 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1269.482 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                3.758 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   2: 1676131.217 ops/s
[info]                  ·gc.alloc.rate:                                  1524.661 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1432.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.065 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.061 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.550 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1598.139 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 1675777.048 ops/s
[info]                  ·gc.alloc.rate:                                  1524.883 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1432.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.722 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1278.777 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 1675196.114 ops/s
[info]                  ·gc.alloc.rate:                                  1524.072 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1432.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.834 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1599.024 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 1660182.165 ops/s
[info]                  ·gc.alloc.rate:            1510.357 MB/sec
[info]                  ·gc.alloc.rate.norm:       1432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.413 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1290.784 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala":
[info]   1672247.550 ±(99.9%) 26166.693 ops/s [Average]
[info]   (min, avg, max) = (1660182.165, 1672247.550, 1676131.217), stdev = 6795.407
[info]   CI (99.9%): [1646080.857, 1698414.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1521.358 ±(99.9%) 23.882 MB/sec [Average]
[info]   (min, avg, max) = (1510.357, 1521.358, 1524.883), stdev = 6.202
[info]   CI (99.9%): [1497.476, 1545.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1432.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1432.000, 1432.000, 1432.000), stdev = 0.001
[info]   CI (99.9%): [1432.000, 1432.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.028 ±(99.9%) 0.136 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.068), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.026 ±(99.9%) 0.127 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.064), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1495.303 ±(99.9%) 725.717 MB/sec [Average]
[info]   (min, avg, max) = (1349.994, 1495.303, 1701.834), stdev = 188.466
[info]   CI (99.9%): [769.586, 2221.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1407.241 ±(99.9%) 673.217 B/op [Average]
[info]   (min, avg, max) = (1269.482, 1407.241, 1599.024), stdev = 174.832
[info]   CI (99.9%): [734.024, 2080.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.752 ±(99.9%) 6.471 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.752, 3.758), stdev = 1.681
[info]   CI (99.9%): [≈ 0, 7.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 10.000), stdev = 2.950
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 42.16% complete, ETA 00:45:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1630072.111 ops/s
[info] # Warmup Iteration   2: 1802147.547 ops/s
[info] # Warmup Iteration   3: 1831542.995 ops/s
[info] Iteration   1: 1831325.810 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1824162.083 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1835064.901 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1835050.759 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1830483.344 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   1831217.380 ±(99.9%) 17201.865 ops/s [Average]
[info]   (min, avg, max) = (1824162.083, 1831217.380, 1835064.901), stdev = 4467.270
[info]   CI (99.9%): [1814015.514, 1848419.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson
[info] # Run progress: 42.43% complete, ETA 00:45:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23259.152 ops/s
[info] # Warmup Iteration   2: 34420.032 ops/s
[info] # Warmup Iteration   3: 33948.036 ops/s
[info] Iteration   1: 32776.920 ops/s
[info]                  ·gc.alloc.rate:            991.649 MB/sec
[info]                  ·gc.alloc.rate.norm:       47624.690 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.027 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 48459.296 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 32857.168 ops/s
[info]                  ·gc.alloc.rate:            994.269 MB/sec
[info]                  ·gc.alloc.rate.norm:       47616.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.415 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 48341.326 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 33677.480 ops/s
[info]                  ·gc.alloc.rate:                                  1018.777 MB/sec
[info]                  ·gc.alloc.rate.norm:                             47616.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.070 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.280 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.082 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       47349.823 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                186.784 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   4: 34602.510 ops/s
[info]                  ·gc.alloc.rate:                                  1046.980 MB/sec
[info]                  ·gc.alloc.rate.norm:                             47616.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.039 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.772 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.265 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       46446.503 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 34006.190 ops/s
[info]                  ·gc.alloc.rate:                                  1028.744 MB/sec
[info]                  ·gc.alloc.rate.norm:                             47616.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.243 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.061 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       47260.371 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson":
[info]   33584.054 ±(99.9%) 2985.186 ops/s [Average]
[info]   (min, avg, max) = (32776.920, 33584.054, 34602.510), stdev = 775.243
[info]   CI (99.9%): [30598.868, 36569.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1016.084 ±(99.9%) 90.205 MB/sec [Average]
[info]   (min, avg, max) = (991.649, 1016.084, 1046.980), stdev = 23.426
[info]   CI (99.9%): [925.879, 1106.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   47617.748 ±(99.9%) 14.943 B/op [Average]
[info]   (min, avg, max) = (47616.012, 47617.748, 47624.690), stdev = 3.881
[info]   CI (99.9%): [47602.805, 47632.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.023 ±(99.9%) 0.120 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.070), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.059 ±(99.9%) 5.563 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.059, 3.280), stdev = 1.445
[info]   CI (99.9%): [≈ 0, 6.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1014.770 ±(99.9%) 23.285 MB/sec [Average]
[info]   (min, avg, max) = (1009.027, 1014.770, 1021.265), stdev = 6.047
[info]   CI (99.9%): [991.484, 1038.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   47571.464 ±(99.9%) 3217.290 B/op [Average]
[info]   (min, avg, max) = (46446.503, 47571.464, 48459.296), stdev = 835.520
[info]   CI (99.9%): [44354.174, 50788.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   37.357 ±(99.9%) 321.654 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 37.357, 186.784), stdev = 83.532
[info]   CI (99.9%): [≈ 0, 359.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.600, 12.000), stdev = 4.336
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce
[info] # Run progress: 42.70% complete, ETA 00:45:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 106105.476 ops/s
[info] # Warmup Iteration   2: 123916.659 ops/s
[info] # Warmup Iteration   3: 124629.392 ops/s
[info] Iteration   1: 128722.627 ops/s
[info]                  ·gc.alloc.rate:                                  2205.862 MB/sec
[info]                  ·gc.alloc.rate.norm:                             26976.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.023 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.286 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.953 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       24971.525 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 127988.055 ops/s
[info]                  ·gc.alloc.rate:                                  2193.689 MB/sec
[info]                  ·gc.alloc.rate.norm:                             26976.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.011 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.137 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.791 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       29301.410 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 129429.156 ops/s
[info]                  ·gc.alloc.rate:                                  2218.874 MB/sec
[info]                  ·gc.alloc.rate.norm:                             26976.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.093 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.859 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       24836.102 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 129281.856 ops/s
[info]                  ·gc.alloc.rate:                                  2216.446 MB/sec
[info]                  ·gc.alloc.rate.norm:                             26976.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.114 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2383.435 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       29008.394 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 128981.754 ops/s
[info]                  ·gc.alloc.rate:                                  2210.271 MB/sec
[info]                  ·gc.alloc.rate.norm:                             26976.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.040 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.911 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       24921.196 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce":
[info]   128880.690 ±(99.9%) 2189.916 ops/s [Average]
[info]   (min, avg, max) = (127988.055, 128880.690, 129429.156), stdev = 568.714
[info]   CI (99.9%): [126690.774, 131070.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate":
[info]   2209.028 ±(99.9%) 38.450 MB/sec [Average]
[info]   (min, avg, max) = (2193.689, 2209.028, 2218.874), stdev = 9.985
[info]   CI (99.9%): [2170.578, 2247.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   26976.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (26976.003, 26976.003, 26976.003), stdev = 0.001
[info]   CI (99.9%): [26976.003, 26976.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.011 ±(99.9%) 0.029 MB/sec [Average]
[info]   (min, avg, max) = (0.003, 0.011, 0.023), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.134 ±(99.9%) 0.355 B/op [Average]
[info]   (min, avg, max) = (0.040, 0.134, 0.286), stdev = 0.092
[info]   CI (99.9%): [≈ 0, 0.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2178.590 ±(99.9%) 718.929 MB/sec [Average]
[info]   (min, avg, max) = (2041.911, 2178.590, 2383.435), stdev = 186.704
[info]   CI (99.9%): [1459.661, 2897.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   26607.726 ±(99.9%) 8964.505 B/op [Average]
[info]   (min, avg, max) = (24836.102, 26607.726, 29301.410), stdev = 2328.053
[info]   CI (99.9%): [17643.220, 35572.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava
[info] # Run progress: 42.97% complete, ETA 00:45:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18274.930 ops/s
[info] # Warmup Iteration   2: 323271.506 ops/s
[info] # Warmup Iteration   3: 324680.289 ops/s
[info] Iteration   1: 324697.226 ops/s
[info]                  ·gc.alloc.rate:            650.169 MB/sec
[info]                  ·gc.alloc.rate.norm:       3152.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.345 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3235.269 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 325730.178 ops/s
[info]                  ·gc.alloc.rate:            652.427 MB/sec
[info]                  ·gc.alloc.rate.norm:       3152.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.770 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1612.511 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 328250.971 ops/s
[info]                  ·gc.alloc.rate:            657.529 MB/sec
[info]                  ·gc.alloc.rate.norm:       3152.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.592 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3200.237 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 335821.644 ops/s
[info]                  ·gc.alloc.rate:            672.486 MB/sec
[info]                  ·gc.alloc.rate.norm:       3152.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.387 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3128.102 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 334376.820 ops/s
[info]                  ·gc.alloc.rate:                   670.359 MB/sec
[info]                  ·gc.alloc.rate.norm:              3152.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             998.015 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4692.622 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.124 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava":
[info]   329775.368 ±(99.9%) 19464.395 ops/s [Average]
[info]   (min, avg, max) = (324697.226, 329775.368, 335821.644), stdev = 5054.841
[info]   CI (99.9%): [310310.973, 349239.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   660.594 ±(99.9%) 39.531 MB/sec [Average]
[info]   (min, avg, max) = (650.169, 660.594, 672.486), stdev = 10.266
[info]   CI (99.9%): [621.063, 700.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   3152.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3152.001, 3152.001, 3152.001), stdev = 0.001
[info]   CI (99.9%): [3152.001, 3152.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   666.822 ±(99.9%) 904.314 MB/sec [Average]
[info]   (min, avg, max) = (333.770, 666.822, 998.015), stdev = 234.847
[info]   CI (99.9%): [≈ 0, 1571.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   3173.748 ±(99.9%) 4196.588 B/op [Average]
[info]   (min, avg, max) = (1612.511, 3173.748, 4692.622), stdev = 1089.841
[info]   CI (99.9%): [≈ 0, 7370.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.144 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.664), stdev = 0.297
[info]   CI (99.9%): [≈ 0, 1.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.625 ±(99.9%) 5.380 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.625, 3.124), stdev = 1.397
[info]   CI (99.9%): [≈ 0, 6.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 9.400, 14.000), stdev = 3.209
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala
[info] # Run progress: 43.24% complete, ETA 00:44:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 150676.993 ops/s
[info] # Warmup Iteration   2: 232509.089 ops/s
[info] # Warmup Iteration   3: 230793.130 ops/s
[info] Iteration   1: 233732.105 ops/s
[info]                  ·gc.alloc.rate:            517.914 MB/sec
[info]                  ·gc.alloc.rate.norm:       3488.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.341 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2265.160 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 232694.298 ops/s
[info]                  ·gc.alloc.rate:            515.579 MB/sec
[info]                  ·gc.alloc.rate.norm:       3488.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.656 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4550.661 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 232545.751 ops/s
[info]                  ·gc.alloc.rate:            515.260 MB/sec
[info]                  ·gc.alloc.rate.norm:       3488.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.334 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2276.779 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 232969.853 ops/s
[info]                  ·gc.alloc.rate:            516.238 MB/sec
[info]                  ·gc.alloc.rate.norm:       3488.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.715 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4545.251 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 233556.186 ops/s
[info]                  ·gc.alloc.rate:            517.545 MB/sec
[info]                  ·gc.alloc.rate.norm:       3488.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.372 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2266.983 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala":
[info]   233099.639 ±(99.9%) 2015.974 ops/s [Average]
[info]   (min, avg, max) = (232545.751, 233099.639, 233732.105), stdev = 523.542
[info]   CI (99.9%): [231083.665, 235115.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   516.507 ±(99.9%) 4.534 MB/sec [Average]
[info]   (min, avg, max) = (515.260, 516.507, 517.914), stdev = 1.177
[info]   CI (99.9%): [511.973, 521.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3488.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3488.002, 3488.002, 3488.002), stdev = 0.001
[info]   CI (99.9%): [3488.002, 3488.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   470.884 ±(99.9%) 709.362 MB/sec [Average]
[info]   (min, avg, max) = (336.334, 470.884, 672.715), stdev = 184.219
[info]   CI (99.9%): [≈ 0, 1180.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   3180.967 ±(99.9%) 4805.197 B/op [Average]
[info]   (min, avg, max) = (2265.160, 3180.967, 4550.661), stdev = 1247.894
[info]   CI (99.9%): [≈ 0, 7986.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 8.000), stdev = 2.191
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala
[info] # Run progress: 43.51% complete, ETA 00:44:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 403456.409 ops/s
[info] # Warmup Iteration   2: 435515.263 ops/s
[info] # Warmup Iteration   3: 453902.480 ops/s
[info] Iteration   1: 452120.825 ops/s
[info]                  ·gc.alloc.rate:            570.027 MB/sec
[info]                  ·gc.alloc.rate.norm:       1984.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.216 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2346.632 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 444291.094 ops/s
[info]                  ·gc.alloc.rate:            560.019 MB/sec
[info]                  ·gc.alloc.rate.norm:       1984.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.072 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2388.061 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 454402.327 ops/s
[info]                  ·gc.alloc.rate:            572.697 MB/sec
[info]                  ·gc.alloc.rate.norm:       1984.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.002 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1167.479 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   4: 452783.031 ops/s
[info]                  ·gc.alloc.rate:            570.712 MB/sec
[info]                  ·gc.alloc.rate.norm:       1984.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.066 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2343.295 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 452068.094 ops/s
[info]                  ·gc.alloc.rate:            569.997 MB/sec
[info]                  ·gc.alloc.rate.norm:       1984.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.288 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2347.006 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala":
[info]   451133.074 ±(99.9%) 15168.920 ops/s [Average]
[info]   (min, avg, max) = (444291.094, 451133.074, 454402.327), stdev = 3939.320
[info]   CI (99.9%): [435964.154, 466301.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   568.691 ±(99.9%) 19.140 MB/sec [Average]
[info]   (min, avg, max) = (560.019, 568.691, 572.697), stdev = 4.971
[info]   CI (99.9%): [549.550, 587.831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1984.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1984.001, 1984.001, 1984.001), stdev = 0.001
[info]   CI (99.9%): [1984.001, 1984.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   606.729 ±(99.9%) 580.608 MB/sec [Average]
[info]   (min, avg, max) = (337.002, 606.729, 674.288), stdev = 150.782
[info]   CI (99.9%): [26.121, 1187.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   2118.495 ±(99.9%) 2048.362 B/op [Average]
[info]   (min, avg, max) = (1167.479, 2118.495, 2388.061), stdev = 531.953
[info]   CI (99.9%): [70.132, 4166.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.200, 6.000), stdev = 1.789
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson
[info] # Run progress: 43.78% complete, ETA 00:44:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37179.255 ops/s
[info] # Warmup Iteration   2: 61862.399 ops/s
[info] # Warmup Iteration   3: 63932.077 ops/s
[info] Iteration   1: 63875.146 ops/s
[info]                  ·gc.alloc.rate:                                  2849.576 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70232.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.013 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.326 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.390 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       67097.309 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 64695.724 ops/s
[info]                  ·gc.alloc.rate:                                  2886.623 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70232.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.128 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.188 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       74527.880 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 64668.783 ops/s
[info]                  ·gc.alloc.rate:                                  2885.436 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70232.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.155 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.766 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       66272.610 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 64101.378 ops/s
[info]                  ·gc.alloc.rate:                                  2859.833 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70232.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.014 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.354 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3062.925 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       75219.557 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   5: 64139.564 ops/s
[info]                  ·gc.alloc.rate:                                  2862.735 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70232.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.014 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.346 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.749 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       66822.222 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson":
[info]   64296.119 ±(99.9%) 1412.476 ops/s [Average]
[info]   (min, avg, max) = (63875.146, 64296.119, 64695.724), stdev = 366.816
[info]   CI (99.9%): [62883.643, 65708.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2868.841 ±(99.9%) 63.305 MB/sec [Average]
[info]   (min, avg, max) = (2849.576, 2868.841, 2886.623), stdev = 16.440
[info]   CI (99.9%): [2805.535, 2932.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   70232.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (70232.006, 70232.006, 70232.007), stdev = 0.001
[info]   CI (99.9%): [70232.006, 70232.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.011 ±(99.9%) 0.017 MB/sec [Average]
[info]   (min, avg, max) = (0.005, 0.011, 0.014), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.262 ±(99.9%) 0.427 B/op [Average]
[info]   (min, avg, max) = (0.128, 0.262, 0.354), stdev = 0.111
[info]   CI (99.9%): [≈ 0, 0.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2859.004 ±(99.9%) 717.278 MB/sec [Average]
[info]   (min, avg, max) = (2722.390, 2859.004, 3063.188), stdev = 186.275
[info]   CI (99.9%): [2141.726, 3576.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   69987.916 ±(99.9%) 17238.038 B/op [Average]
[info]   (min, avg, max) = (66272.610, 69987.916, 75219.557), stdev = 4476.664
[info]   CI (99.9%): [52749.878, 87225.954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.count":
[info]   42.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.400, 9.000), stdev = 0.548
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.000, 8.000), stdev = 1.000
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce
[info] # Run progress: 44.05% complete, ETA 00:44:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 167886.914 ops/s
[info] # Warmup Iteration   2: 212761.568 ops/s
[info] # Warmup Iteration   3: 218495.622 ops/s
[info] Iteration   1: 214204.582 ops/s
[info]                  ·gc.alloc.rate:                                  1511.518 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11104.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.067 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.492 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1688.975 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12407.648 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                24.473 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        14.000 ms
[info] Iteration   2: 218284.607 ops/s
[info]                  ·gc.alloc.rate:                                  1539.805 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11104.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.041 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.295 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.361 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9817.192 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 215602.043 ops/s
[info]                  ·gc.alloc.rate:                                  1520.839 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11104.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.048 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.661 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12424.232 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 219997.689 ops/s
[info]                  ·gc.alloc.rate:                                  1551.976 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11104.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.433 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9740.719 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 213305.803 ops/s
[info]                  ·gc.alloc.rate:                                  1505.352 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11104.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.436 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12557.767 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce":
[info]   216278.945 ±(99.9%) 10797.691 ops/s [Average]
[info]   (min, avg, max) = (213305.803, 216278.945, 219997.689), stdev = 2804.126
[info]   CI (99.9%): [205481.254, 227076.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1525.898 ±(99.9%) 75.260 MB/sec [Average]
[info]   (min, avg, max) = (1505.352, 1525.898, 1551.976), stdev = 19.545
[info]   CI (99.9%): [1450.638, 1601.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   11104.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11104.002, 11104.002, 11104.002), stdev = 0.001
[info]   CI (99.9%): [11104.002, 11104.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.024 ±(99.9%) 0.112 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.024, 0.067), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.173 ±(99.9%) 0.823 B/op [Average]
[info]   (min, avg, max) = (0.010, 0.173, 0.492), stdev = 0.214
[info]   CI (99.9%): [≈ 0, 0.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1563.173 ±(99.9%) 709.570 MB/sec [Average]
[info]   (min, avg, max) = (1361.361, 1563.173, 1702.436), stdev = 184.273
[info]   CI (99.9%): [853.604, 2272.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   11389.512 ±(99.9%) 5666.722 B/op [Average]
[info]   (min, avg, max) = (9740.719, 11389.512, 12557.767), stdev = 1471.630
[info]   CI (99.9%): [5722.790, 17056.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.737 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   4.895 ±(99.9%) 42.143 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.895, 24.473), stdev = 10.945
[info]   CI (99.9%): [≈ 0, 47.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 14.000), stdev = 4.722
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava
[info] # Run progress: 44.32% complete, ETA 00:44:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9109.881 ops/s
[info] # Warmup Iteration   2: 687571.769 ops/s
[info] # Warmup Iteration   3: 695334.897 ops/s
[info] Iteration   1: 662094.207 ops/s
[info]                  ·gc.alloc.rate:            518.201 MB/sec
[info]                  ·gc.alloc.rate.norm:       1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.700 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 793.356 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 660539.791 ops/s
[info]                  ·gc.alloc.rate:            516.932 MB/sec
[info]                  ·gc.alloc.rate.norm:       1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.293 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1590.353 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 660073.864 ops/s
[info]                  ·gc.alloc.rate:            516.647 MB/sec
[info]                  ·gc.alloc.rate.norm:       1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.419 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1591.534 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 663717.787 ops/s
[info]                  ·gc.alloc.rate:            519.572 MB/sec
[info]                  ·gc.alloc.rate.norm:       1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.745 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 791.371 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 679881.268 ops/s
[info]                  ·gc.alloc.rate:            532.136 MB/sec
[info]                  ·gc.alloc.rate.norm:       1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.385 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1545.128 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava":
[info]   665261.383 ±(99.9%) 31948.658 ops/s [Average]
[info]   (min, avg, max) = (660073.864, 665261.383, 679881.268), stdev = 8296.965
[info]   CI (99.9%): [633312.725, 697210.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   520.698 ±(99.9%) 25.024 MB/sec [Average]
[info]   (min, avg, max) = (516.647, 520.698, 532.136), stdev = 6.499
[info]   CI (99.9%): [495.674, 545.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   1232.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1232.001, 1232.001, 1232.001), stdev = 0.001
[info]   CI (99.9%): [1232.001, 1232.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   533.908 ±(99.9%) 703.681 MB/sec [Average]
[info]   (min, avg, max) = (333.700, 533.908, 667.419), stdev = 182.744
[info]   CI (99.9%): [≈ 0, 1237.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   1262.348 ±(99.9%) 1653.635 B/op [Average]
[info]   (min, avg, max) = (791.371, 1262.348, 1591.534), stdev = 429.444
[info]   CI (99.9%): [≈ 0, 2915.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.400, 10.000), stdev = 2.702
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala
[info] # Run progress: 44.59% complete, ETA 00:43:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 322912.136 ops/s
[info] # Warmup Iteration   2: 473851.177 ops/s
[info] # Warmup Iteration   3: 458979.477 ops/s
[info] Iteration   1: 483183.107 ops/s
[info]                  ·gc.alloc.rate:            496.103 MB/sec
[info]                  ·gc.alloc.rate.norm:       1616.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.740 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2191.377 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 478868.760 ops/s
[info]                  ·gc.alloc.rate:            491.600 MB/sec
[info]                  ·gc.alloc.rate.norm:       1616.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.342 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1105.633 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 465917.280 ops/s
[info]                  ·gc.alloc.rate:            478.315 MB/sec
[info]                  ·gc.alloc.rate.norm:       1616.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.716 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2272.792 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 477215.832 ops/s
[info]                  ·gc.alloc.rate:            489.946 MB/sec
[info]                  ·gc.alloc.rate.norm:       1616.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.380 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1109.490 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 474681.663 ops/s
[info]                  ·gc.alloc.rate:            487.299 MB/sec
[info]                  ·gc.alloc.rate.norm:       1616.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.697 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2230.825 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala":
[info]   475973.328 ±(99.9%) 24708.772 ops/s [Average]
[info]   (min, avg, max) = (465917.280, 475973.328, 483183.107), stdev = 6416.790
[info]   CI (99.9%): [451264.556, 500682.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   488.653 ±(99.9%) 25.439 MB/sec [Average]
[info]   (min, avg, max) = (478.315, 488.653, 496.103), stdev = 6.606
[info]   CI (99.9%): [463.214, 514.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1616.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1616.001, 1616.001, 1616.001), stdev = 0.001
[info]   CI (99.9%): [1616.001, 1616.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   538.175 ±(99.9%) 709.404 MB/sec [Average]
[info]   (min, avg, max) = (336.342, 538.175, 672.740), stdev = 184.230
[info]   CI (99.9%): [≈ 0, 1247.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1782.023 ±(99.9%) 2373.424 B/op [Average]
[info]   (min, avg, max) = (1105.633, 1782.023, 2272.792), stdev = 616.371
[info]   CI (99.9%): [≈ 0, 4155.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.600, 9.000), stdev = 2.408
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala
[info] # Run progress: 44.86% complete, ETA 00:43:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 536345.957 ops/s
[info] # Warmup Iteration   2: 600125.406 ops/s
[info] # Warmup Iteration   3: 613746.610 ops/s
[info] Iteration   1: 616192.083 ops/s
[info]                  ·gc.alloc.rate:                   482.397 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             336.420 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        859.189 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.701 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 614194.325 ops/s
[info]                  ·gc.alloc.rate:            481.101 MB/sec
[info]                  ·gc.alloc.rate.norm:       1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.517 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1724.738 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 618814.758 ops/s
[info]                  ·gc.alloc.rate:            484.304 MB/sec
[info]                  ·gc.alloc.rate.norm:       1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.005 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 857.293 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 615282.439 ops/s
[info]                  ·gc.alloc.rate:            481.575 MB/sec
[info]                  ·gc.alloc.rate.norm:       1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.364 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 860.512 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 615788.985 ops/s
[info]                  ·gc.alloc.rate:                   481.954 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.371 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1721.313 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.703 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala":
[info]   616054.518 ±(99.9%) 6603.820 ops/s [Average]
[info]   (min, avg, max) = (614194.325, 616054.518, 618814.758), stdev = 1714.991
[info]   CI (99.9%): [609450.698, 622658.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   482.266 ±(99.9%) 4.756 MB/sec [Average]
[info]   (min, avg, max) = (481.101, 482.266, 484.304), stdev = 1.235
[info]   CI (99.9%): [477.510, 487.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1232.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1232.001, 1232.001, 1232.001), stdev = 0.001
[info]   CI (99.9%): [1232.001, 1232.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   471.336 ±(99.9%) 710.440 MB/sec [Average]
[info]   (min, avg, max) = (336.364, 471.336, 673.517), stdev = 184.499
[info]   CI (99.9%): [≈ 0, 1181.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1204.609 ±(99.9%) 1822.319 B/op [Average]
[info]   (min, avg, max) = (857.293, 1204.609, 1724.738), stdev = 473.250
[info]   CI (99.9%): [≈ 0, 3026.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.681 ±(99.9%) 3.590 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.681, 1.703), stdev = 0.932
[info]   CI (99.9%): [≈ 0, 4.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 7.000), stdev = 1.949
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 45.14% complete, ETA 00:43:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 608641.922 ops/s
[info] # Warmup Iteration   2: 673388.317 ops/s
[info] # Warmup Iteration   3: 675637.568 ops/s
[info] Iteration   1: 675126.948 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 640636.546 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 673258.392 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 673555.505 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 673588.251 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc":
[info]   667233.128 ±(99.9%) 57320.117 ops/s [Average]
[info]   (min, avg, max) = (640636.546, 667233.128, 675126.948), stdev = 14885.852
[info]   CI (99.9%): [609913.011, 724553.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson
[info] # Run progress: 45.41% complete, ETA 00:43:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18330.093 ops/s
[info] # Warmup Iteration   2: 26725.203 ops/s
[info] # Warmup Iteration   3: 26598.646 ops/s
[info] Iteration   1: 26536.013 ops/s
[info]                  ·gc.alloc.rate:            1357.191 MB/sec
[info]                  ·gc.alloc.rate.norm:       80512.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.336 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 79808.723 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 26866.239 ops/s
[info]                  ·gc.alloc.rate:                                  1374.057 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80503.393 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.159 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 9.300 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1357.459 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       79530.997 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                234.144 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 26906.226 ops/s
[info]                  ·gc.alloc.rate:                                  1376.118 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80496.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.087 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.597 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       79646.575 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 26923.830 ops/s
[info]                  ·gc.alloc.rate:                                  1376.916 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80496.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.180 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.475 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       79593.336 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 27002.781 ops/s
[info]                  ·gc.alloc.rate:                                  1380.992 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80496.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.113 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.460 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       79357.573 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson":
[info]   26847.018 ±(99.9%) 696.215 ops/s [Average]
[info]   (min, avg, max) = (26536.013, 26847.018, 27002.781), stdev = 180.805
[info]   CI (99.9%): [26150.802, 27543.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1373.055 ±(99.9%) 35.498 MB/sec [Average]
[info]   (min, avg, max) = (1357.191, 1373.055, 1380.992), stdev = 9.219
[info]   CI (99.9%): [1337.556, 1408.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   80500.691 ±(99.9%) 27.307 B/op [Average]
[info]   (min, avg, max) = (80496.015, 80500.691, 80512.017), stdev = 7.092
[info]   CI (99.9%): [80473.384, 80527.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.033 ±(99.9%) 0.271 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.159), stdev = 0.070
[info]   CI (99.9%): [≈ 0, 0.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.936 ±(99.9%) 15.853 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.936, 9.300), stdev = 4.117
[info]   CI (99.9%): [≈ 0, 17.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1357.466 ±(99.9%) 26.971 MB/sec [Average]
[info]   (min, avg, max) = (1345.336, 1357.466, 1361.597), stdev = 7.004
[info]   CI (99.9%): [1330.495, 1384.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   79587.441 ±(99.9%) 634.254 B/op [Average]
[info]   (min, avg, max) = (79357.573, 79587.441, 79808.723), stdev = 164.714
[info]   CI (99.9%): [78953.187, 80221.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   46.829 ±(99.9%) 403.211 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 46.829, 234.144), stdev = 104.712
[info]   CI (99.9%): [≈ 0, 450.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 16.000), stdev = 5.639
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce
[info] # Run progress: 45.68% complete, ETA 00:43:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4177.612 ops/s
[info] # Warmup Iteration   2: 6317.868 ops/s
[info] # Warmup Iteration   3: 6435.898 ops/s
[info] Iteration   1: 6481.510 ops/s
[info]                  ·gc.alloc.rate:            997.653 MB/sec
[info]                  ·gc.alloc.rate.norm:       242272.068 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.048 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 245524.968 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 6431.272 ops/s
[info]                  ·gc.alloc.rate:                   990.115 MB/sec
[info]                  ·gc.alloc.rate.norm:              242272.063 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1011.875 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        247596.292 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 325.999 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 6299.184 ops/s
[info]                  ·gc.alloc.rate:                   969.491 MB/sec
[info]                  ·gc.alloc.rate.norm:              242272.065 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1011.553 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        252783.200 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 832.071 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 6494.078 ops/s
[info]                  ·gc.alloc.rate:                                  999.534 MB/sec
[info]                  ·gc.alloc.rate.norm:                             242272.068 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.035 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 8.440 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.917 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       247454.897 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 6457.341 ops/s
[info]                  ·gc.alloc.rate:                                  993.873 MB/sec
[info]                  ·gc.alloc.rate.norm:                             242272.063 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.959 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.949 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       248872.427 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce":
[info]   6432.677 ±(99.9%) 301.884 ops/s [Average]
[info]   (min, avg, max) = (6299.184, 6432.677, 6494.078), stdev = 78.398
[info]   CI (99.9%): [6130.793, 6734.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   990.133 ±(99.9%) 46.568 MB/sec [Average]
[info]   (min, avg, max) = (969.491, 990.133, 999.534), stdev = 12.094
[info]   CI (99.9%): [943.565, 1036.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   242272.065 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (242272.063, 242272.065, 242272.068), stdev = 0.002
[info]   CI (99.9%): [242272.057, 242272.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.008 ±(99.9%) 0.059 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.035), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.880 ±(99.9%) 14.211 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.880, 8.440), stdev = 3.691
[info]   CI (99.9%): [≈ 0, 16.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1015.268 ±(99.9%) 19.945 MB/sec [Average]
[info]   (min, avg, max) = (1011.048, 1015.268, 1020.949), stdev = 5.180
[info]   CI (99.9%): [995.323, 1035.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   248446.357 ±(99.9%) 10409.186 B/op [Average]
[info]   (min, avg, max) = (245524.968, 248446.357, 252783.200), stdev = 2703.232
[info]   CI (99.9%): [238037.171, 258855.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 5.618 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.330), stdev = 1.459
[info]   CI (99.9%): [≈ 0, 6.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   231.614 ±(99.9%) 1402.174 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 231.614, 832.071), stdev = 364.140
[info]   CI (99.9%): [≈ 0, 1633.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.800, 10.000), stdev = 3.493
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala
[info] # Run progress: 45.95% complete, ETA 00:42:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3160.398 ops/s
[info] # Warmup Iteration   2: 6052.313 ops/s
[info] # Warmup Iteration   3: 6461.107 ops/s
[info] Iteration   1: 6258.759 ops/s
[info]                  ·gc.alloc.rate:            902.123 MB/sec
[info]                  ·gc.alloc.rate.norm:       226864.065 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.948 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 253728.261 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 6483.389 ops/s
[info]                  ·gc.alloc.rate:                   934.352 MB/sec
[info]                  ·gc.alloc.rate.norm:              226864.068 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.232 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        244802.477 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 161.693 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 6496.958 ops/s
[info]                  ·gc.alloc.rate:            936.432 MB/sec
[info]                  ·gc.alloc.rate.norm:       226864.063 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.748 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 162982.727 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 6472.264 ops/s
[info]                  ·gc.alloc.rate:                                  933.123 MB/sec
[info]                  ·gc.alloc.rate.norm:                             226864.063 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.059 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 14.230 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.277 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       247323.996 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                971.804 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 6373.336 ops/s
[info]                  ·gc.alloc.rate:                                  918.923 MB/sec
[info]                  ·gc.alloc.rate.norm:                             226864.064 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.027 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 6.551 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.352 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       252151.688 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala":
[info]   6416.941 ±(99.9%) 388.904 ops/s [Average]
[info]   (min, avg, max) = (6258.759, 6416.941, 6496.958), stdev = 100.997
[info]   CI (99.9%): [6028.037, 6805.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   924.990 ±(99.9%) 55.948 MB/sec [Average]
[info]   (min, avg, max) = (902.123, 924.990, 936.432), stdev = 14.530
[info]   CI (99.9%): [869.042, 980.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   226864.065 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (226864.063, 226864.065, 226864.068), stdev = 0.002
[info]   CI (99.9%): [226864.057, 226864.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.017 ±(99.9%) 0.100 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.059), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   4.156 ±(99.9%) 24.281 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.156, 14.230), stdev = 6.306
[info]   CI (99.9%): [≈ 0, 28.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   945.711 ±(99.9%) 587.965 MB/sec [Average]
[info]   (min, avg, max) = (672.748, 945.711, 1021.352), stdev = 152.693
[info]   CI (99.9%): [357.747, 1533.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   232197.830 ±(99.9%) 149632.629 B/op [Average]
[info]   (min, avg, max) = (162982.727, 232197.830, 253728.261), stdev = 38859.119
[info]   CI (99.9%): [82565.201, 381830.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.689 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.997), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   226.699 ±(99.9%) 1626.394 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 226.699, 971.804), stdev = 422.369
[info]   CI (99.9%): [≈ 0, 1853.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.600, 13.000), stdev = 4.393
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala
[info] # Run progress: 46.22% complete, ETA 00:42:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 90960.845 ops/s
[info] # Warmup Iteration   2: 97915.088 ops/s
[info] # Warmup Iteration   3: 98497.966 ops/s
[info] Iteration   1: 97909.280 ops/s
[info]                  ·gc.alloc.rate:            948.356 MB/sec
[info]                  ·gc.alloc.rate.norm:       15248.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1012.964 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16286.792 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 98456.334 ops/s
[info]                  ·gc.alloc.rate:            953.627 MB/sec
[info]                  ·gc.alloc.rate.norm:       15248.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.298 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10797.657 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 97729.004 ops/s
[info]                  ·gc.alloc.rate:                   946.628 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1013.011 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        16317.285 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 42.912 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 99115.417 ops/s
[info]                  ·gc.alloc.rate:                                  960.450 MB/sec
[info]                  ·gc.alloc.rate.norm:                             15248.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.030 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.483 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.387 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       16215.420 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 99192.994 ops/s
[info]                  ·gc.alloc.rate:            960.869 MB/sec
[info]                  ·gc.alloc.rate.norm:       15248.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.008 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16202.345 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala":
[info]   98480.606 ±(99.9%) 2584.805 ops/s [Average]
[info]   (min, avg, max) = (97729.004, 98480.606, 99192.994), stdev = 671.266
[info]   CI (99.9%): [95895.801, 101065.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   953.986 ±(99.9%) 25.479 MB/sec [Average]
[info]   (min, avg, max) = (946.628, 953.986, 960.869), stdev = 6.617
[info]   CI (99.9%): [928.507, 979.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   15248.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (15248.004, 15248.004, 15248.004), stdev = 0.001
[info]   CI (99.9%): [15248.004, 15248.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.006 ±(99.9%) 0.052 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.030), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.097 ±(99.9%) 0.832 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.097, 0.483), stdev = 0.216
[info]   CI (99.9%): [≈ 0, 0.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   948.733 ±(99.9%) 588.804 MB/sec [Average]
[info]   (min, avg, max) = (675.298, 948.733, 1021.387), stdev = 152.910
[info]   CI (99.9%): [359.930, 1537.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   15163.900 ±(99.9%) 9400.487 B/op [Average]
[info]   (min, avg, max) = (10797.657, 15163.900, 16317.285), stdev = 2441.277
[info]   CI (99.9%): [5763.413, 24564.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.533 ±(99.9%) 4.588 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.533, 2.664), stdev = 1.191
[info]   CI (99.9%): [≈ 0, 5.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   8.582 ±(99.9%) 73.897 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.582, 42.912), stdev = 19.191
[info]   CI (99.9%): [≈ 0, 82.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.600, 9.000), stdev = 3.050
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson
[info] # Run progress: 46.49% complete, ETA 00:42:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2927.049 ops/s
[info] # Warmup Iteration   2: 6002.377 ops/s
[info] # Warmup Iteration   3: 6270.882 ops/s
[info] Iteration   1: 6299.654 ops/s
[info]                  ·gc.alloc.rate:            1145.658 MB/sec
[info]                  ·gc.alloc.rate.norm:       286296.065 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.888 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 252117.543 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 5990.345 ops/s
[info]                  ·gc.alloc.rate:            1089.500 MB/sec
[info]                  ·gc.alloc.rate.norm:       286296.068 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.910 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 265118.932 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 6001.110 ops/s
[info]                  ·gc.alloc.rate:                                  1091.799 MB/sec
[info]                  ·gc.alloc.rate.norm:                             286296.073 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.119 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 31.192 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1357.573 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       355988.321 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1048.052 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   4: 6268.679 ops/s
[info]                  ·gc.alloc.rate:            1140.187 MB/sec
[info]                  ·gc.alloc.rate.norm:       286296.065 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.022 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 256374.323 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   5: 6362.032 ops/s
[info]                  ·gc.alloc.rate:                                  1157.107 MB/sec
[info]                  ·gc.alloc.rate.norm:                             286296.069 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.010 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.517 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.029 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       252627.221 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson":
[info]   6184.364 ±(99.9%) 675.764 ops/s [Average]
[info]   (min, avg, max) = (5990.345, 6184.364, 6362.032), stdev = 175.494
[info]   CI (99.9%): [5508.600, 6860.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1124.850 ±(99.9%) 122.537 MB/sec [Average]
[info]   (min, avg, max) = (1089.500, 1124.850, 1157.107), stdev = 31.823
[info]   CI (99.9%): [1002.313, 1247.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   286296.068 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (286296.065, 286296.068, 286296.073), stdev = 0.003
[info]   CI (99.9%): [286296.055, 286296.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.026 ±(99.9%) 0.201 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.119), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   6.742 ±(99.9%) 52.799 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.742, 31.192), stdev = 13.712
[info]   CI (99.9%): [≈ 0, 59.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1083.484 ±(99.9%) 590.458 MB/sec [Average]
[info]   (min, avg, max) = (1008.888, 1083.484, 1357.573), stdev = 153.340
[info]   CI (99.9%): [493.027, 1673.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   276445.268 ±(99.9%) 172392.811 B/op [Average]
[info]   (min, avg, max) = (252117.543, 276445.268, 355988.321), stdev = 44769.866
[info]   CI (99.9%): [104052.457, 448838.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   209.610 ±(99.9%) 1804.809 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 209.610, 1048.052), stdev = 468.703
[info]   CI (99.9%): [≈ 0, 2014.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.600, 13.000), stdev = 5.030
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce
[info] # Run progress: 46.76% complete, ETA 00:42:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12873.755 ops/s
[info] # Warmup Iteration   2: 17669.251 ops/s
[info] # Warmup Iteration   3: 17424.448 ops/s
[info] Iteration   1: 17641.090 ops/s
[info]                  ·gc.alloc.rate:            800.225 MB/sec
[info]                  ·gc.alloc.rate.norm:       71383.188 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.179 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 60139.355 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 18098.604 ops/s
[info]                  ·gc.alloc.rate:            821.288 MB/sec
[info]                  ·gc.alloc.rate.norm:       71432.024 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.048 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 87936.488 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 17435.151 ops/s
[info]                  ·gc.alloc.rate:            791.212 MB/sec
[info]                  ·gc.alloc.rate.norm:       71432.023 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.037 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 60853.246 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 17711.584 ops/s
[info]                  ·gc.alloc.rate:                   803.736 MB/sec
[info]                  ·gc.alloc.rate.norm:              71417.112 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1011.211 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        89852.575 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 295.957 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 18206.036 ops/s
[info]                  ·gc.alloc.rate:                                  825.970 MB/sec
[info]                  ·gc.alloc.rate.norm:                             71408.022 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.108 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 9.375 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.741 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       58852.473 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce":
[info]   17818.493 ±(99.9%) 1245.528 ops/s [Average]
[info]   (min, avg, max) = (17435.151, 17818.493, 18206.036), stdev = 323.460
[info]   CI (99.9%): [16572.965, 19064.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   808.486 ±(99.9%) 56.421 MB/sec [Average]
[info]   (min, avg, max) = (791.212, 808.486, 825.970), stdev = 14.652
[info]   CI (99.9%): [752.065, 864.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   71414.474 ±(99.9%) 78.050 B/op [Average]
[info]   (min, avg, max) = (71383.188, 71414.474, 71432.024), stdev = 20.269
[info]   CI (99.9%): [71336.424, 71492.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.022 ±(99.9%) 0.187 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.108), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.875 ±(99.9%) 16.144 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.875, 9.375), stdev = 4.192
[info]   CI (99.9%): [≈ 0, 18.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   810.243 ±(99.9%) 706.220 MB/sec [Average]
[info]   (min, avg, max) = (674.037, 810.243, 1011.211), stdev = 183.403
[info]   CI (99.9%): [104.023, 1516.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   71526.827 ±(99.9%) 61167.970 B/op [Average]
[info]   (min, avg, max) = (58852.473, 71526.827, 89852.575), stdev = 15885.128
[info]   CI (99.9%): [10358.857, 132694.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   59.191 ±(99.9%) 509.656 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 59.191, 295.957), stdev = 132.356
[info]   CI (99.9%): [≈ 0, 568.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.200, 10.000), stdev = 3.271
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala
[info] # Run progress: 47.03% complete, ETA 00:41:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11474.952 ops/s
[info] # Warmup Iteration   2: 19478.710 ops/s
[info] # Warmup Iteration   3: 19908.459 ops/s
[info] Iteration   1: 19986.301 ops/s
[info]                  ·gc.alloc.rate:            846.801 MB/sec
[info]                  ·gc.alloc.rate.norm:       66696.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.584 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 52974.278 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 19041.435 ops/s
[info]                  ·gc.alloc.rate:            806.808 MB/sec
[info]                  ·gc.alloc.rate.norm:       66696.023 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.025 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 83412.583 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 19202.691 ops/s
[info]                  ·gc.alloc.rate:            813.672 MB/sec
[info]                  ·gc.alloc.rate.norm:       66696.027 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.719 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 55142.235 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 19949.174 ops/s
[info]                  ·gc.alloc.rate:                                  845.271 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66696.022 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.031 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.473 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1012.351 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       79879.493 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                367.866 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   5: 20220.298 ops/s
[info]                  ·gc.alloc.rate:                                  856.778 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66696.020 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.043 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.347 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.694 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       52988.759 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala":
[info]   19679.980 ±(99.9%) 2013.584 ops/s [Average]
[info]   (min, avg, max) = (19041.435, 19679.980, 20220.298), stdev = 522.921
[info]   CI (99.9%): [17666.396, 21693.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   833.866 ±(99.9%) 85.287 MB/sec [Average]
[info]   (min, avg, max) = (806.808, 833.866, 856.778), stdev = 22.149
[info]   CI (99.9%): [748.579, 919.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   66696.022 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (66696.020, 66696.022, 66696.027), stdev = 0.003
[info]   CI (99.9%): [66696.012, 66696.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.015 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.043), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.164 ±(99.9%) 6.252 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.164, 3.347), stdev = 1.624
[info]   CI (99.9%): [≈ 0, 7.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   809.475 ±(99.9%) 707.421 MB/sec [Average]
[info]   (min, avg, max) = (672.584, 809.475, 1012.351), stdev = 183.715
[info]   CI (99.9%): [102.054, 1516.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   64879.470 ±(99.9%) 59230.280 B/op [Average]
[info]   (min, avg, max) = (52974.278, 64879.470, 83412.583), stdev = 15381.916
[info]   CI (99.9%): [5649.190, 124109.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   73.573 ±(99.9%) 633.488 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 73.573, 367.866), stdev = 164.515
[info]   CI (99.9%): [≈ 0, 707.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.800, 12.000), stdev = 3.633
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala
[info] # Run progress: 47.30% complete, ETA 00:41:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 514371.555 ops/s
[info] # Warmup Iteration   2: 604634.350 ops/s
[info] # Warmup Iteration   3: 606788.160 ops/s
[info] Iteration   1: 606467.604 ops/s
[info]                  ·gc.alloc.rate:                   1374.693 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.036 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3493.623 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.729 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 601707.578 ops/s
[info]                  ·gc.alloc.rate:                                  1364.014 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3568.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.110 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.289 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1357.490 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3550.933 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                10.454 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 602348.773 ops/s
[info]                  ·gc.alloc.rate:                                  1365.385 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3568.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.427 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3557.657 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 591021.349 ops/s
[info]                  ·gc.alloc.rate:                                  1339.963 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3568.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.683 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3625.835 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 604680.691 ops/s
[info]                  ·gc.alloc.rate:                                  1371.119 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3568.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.902 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3544.015 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala":
[info]   601245.199 ±(99.9%) 23186.737 ops/s [Average]
[info]   (min, avg, max) = (591021.349, 601245.199, 606467.604), stdev = 6021.522
[info]   CI (99.9%): [578058.463, 624431.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1363.035 ±(99.9%) 52.376 MB/sec [Average]
[info]   (min, avg, max) = (1339.963, 1363.035, 1374.693), stdev = 13.602
[info]   CI (99.9%): [1310.659, 1415.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3568.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3568.001, 3568.001, 3568.001), stdev = 0.001
[info]   CI (99.9%): [3568.001, 3568.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.023 ±(99.9%) 0.188 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.110), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.061 ±(99.9%) 0.491 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.061, 0.289), stdev = 0.127
[info]   CI (99.9%): [≈ 0, 0.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1357.708 ±(99.9%) 26.081 MB/sec [Average]
[info]   (min, avg, max) = (1346.036, 1357.708, 1361.902), stdev = 6.773
[info]   CI (99.9%): [1331.627, 1383.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   3554.413 ±(99.9%) 181.914 B/op [Average]
[info]   (min, avg, max) = (3493.623, 3554.413, 3625.835), stdev = 47.242
[info]   CI (99.9%): [3372.499, 3736.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.997), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   2.437 ±(99.9%) 17.498 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.437, 10.454), stdev = 4.544
[info]   CI (99.9%): [≈ 0, 19.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 12.000), stdev = 3.782
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 47.57% complete, ETA 00:41:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 517117.973 ops/s
[info] # Warmup Iteration   2: 604510.679 ops/s
[info] # Warmup Iteration   3: 607754.674 ops/s
[info] Iteration   1: 603359.647 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 599208.722 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 604231.934 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 609693.812 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 593748.346 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   602048.492 ±(99.9%) 22934.309 ops/s [Average]
[info]   (min, avg, max) = (593748.346, 602048.492, 609693.812), stdev = 5955.967
[info]   CI (99.9%): [579114.184, 624982.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson
[info] # Run progress: 47.84% complete, ETA 00:41:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12413.352 ops/s
[info] # Warmup Iteration   2: 18281.807 ops/s
[info] # Warmup Iteration   3: 18575.447 ops/s
[info] Iteration   1: 18343.762 ops/s
[info]                  ·gc.alloc.rate:            845.571 MB/sec
[info]                  ·gc.alloc.rate.norm:       72565.484 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.890 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 86581.243 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 18460.846 ops/s
[info]                  ·gc.alloc.rate:            851.121 MB/sec
[info]                  ·gc.alloc.rate.norm:       72576.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.657 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 57358.198 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 18421.762 ops/s
[info]                  ·gc.alloc.rate:            849.408 MB/sec
[info]                  ·gc.alloc.rate.norm:       72576.028 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.086 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 86219.411 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   4: 18493.943 ops/s
[info]                  ·gc.alloc.rate:                   852.740 MB/sec
[info]                  ·gc.alloc.rate.norm:              72564.330 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.842 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        57255.866 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 340.134 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 18612.327 ops/s
[info]                  ·gc.alloc.rate:                                  857.973 MB/sec
[info]                  ·gc.alloc.rate.norm:                             72560.022 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.230 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 19.454 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.014 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       86348.679 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson":
[info]   18466.528 ±(99.9%) 380.788 ops/s [Average]
[info]   (min, avg, max) = (18343.762, 18466.528, 18612.327), stdev = 98.890
[info]   CI (99.9%): [18085.740, 18847.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   851.363 ±(99.9%) 17.542 MB/sec [Average]
[info]   (min, avg, max) = (845.571, 851.363, 857.973), stdev = 4.556
[info]   CI (99.9%): [833.821, 868.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   72568.377 ±(99.9%) 28.003 B/op [Average]
[info]   (min, avg, max) = (72560.022, 72568.377, 72576.028), stdev = 7.272
[info]   CI (99.9%): [72540.374, 72596.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.046 ±(99.9%) 0.396 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.230), stdev = 0.103
[info]   CI (99.9%): [≈ 0, 0.442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   3.891 ±(99.9%) 33.501 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.891, 19.454), stdev = 8.700
[info]   CI (99.9%): [≈ 0, 37.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   876.898 ±(99.9%) 717.859 MB/sec [Average]
[info]   (min, avg, max) = (672.657, 876.898, 1021.014), stdev = 186.426
[info]   CI (99.9%): [159.039, 1594.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   74752.679 ±(99.9%) 61326.099 B/op [Average]
[info]   (min, avg, max) = (57255.866, 74752.679, 86581.243), stdev = 15926.193
[info]   CI (99.9%): [13426.581, 136078.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   68.027 ±(99.9%) 585.731 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 68.027, 340.134), stdev = 152.112
[info]   CI (99.9%): [≈ 0, 653.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.600, 12.000), stdev = 3.782
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce
[info] # Run progress: 48.11% complete, ETA 00:41:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7643.082 ops/s
[info] # Warmup Iteration   2: 10961.941 ops/s
[info] # Warmup Iteration   3: 11085.632 ops/s
[info] Iteration   1: 10925.479 ops/s
[info]                  ·gc.alloc.rate:            1097.194 MB/sec
[info]                  ·gc.alloc.rate.norm:       158088.040 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1347.890 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 194209.171 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 11073.367 ops/s
[info]                  ·gc.alloc.rate:            1111.900 MB/sec
[info]                  ·gc.alloc.rate.norm:       158088.040 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.777 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 143710.579 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 11053.326 ops/s
[info]                  ·gc.alloc.rate:                                  1110.035 MB/sec
[info]                  ·gc.alloc.rate.norm:                             158088.037 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.059 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 8.336 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.659 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       144932.079 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                474.254 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 11113.471 ops/s
[info]                  ·gc.alloc.rate:                                  1116.380 MB/sec
[info]                  ·gc.alloc.rate.norm:                             158088.037 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.023 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.260 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.587 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       192811.204 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 11091.593 ops/s
[info]                  ·gc.alloc.rate:            1113.940 MB/sec
[info]                  ·gc.alloc.rate.norm:       158088.043 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.979 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 144895.169 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce":
[info]   11051.447 ±(99.9%) 284.340 ops/s [Average]
[info]   (min, avg, max) = (10925.479, 11051.447, 11113.471), stdev = 73.842
[info]   CI (99.9%): [10767.108, 11335.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1109.890 ±(99.9%) 28.800 MB/sec [Average]
[info]   (min, avg, max) = (1097.194, 1109.890, 1116.380), stdev = 7.479
[info]   CI (99.9%): [1081.090, 1138.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   158088.039 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (158088.037, 158088.039, 158088.043), stdev = 0.002
[info]   CI (99.9%): [158088.030, 158088.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.016 ±(99.9%) 0.099 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.059), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.319 ±(99.9%) 14.047 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.319, 8.336), stdev = 3.648
[info]   CI (99.9%): [≈ 0, 16.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1151.778 ±(99.9%) 713.817 MB/sec [Average]
[info]   (min, avg, max) = (1010.777, 1151.778, 1361.587), stdev = 185.376
[info]   CI (99.9%): [437.961, 1865.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   164111.640 ±(99.9%) 103374.873 B/op [Average]
[info]   (min, avg, max) = (143710.579, 164111.640, 194209.171), stdev = 26846.126
[info]   CI (99.9%): [60736.767, 267486.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   94.851 ±(99.9%) 816.694 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 94.851, 474.254), stdev = 212.093
[info]   CI (99.9%): [≈ 0, 911.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.800, 13.000), stdev = 4.266
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala
[info] # Run progress: 48.38% complete, ETA 00:40:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6119.210 ops/s
[info] # Warmup Iteration   2: 10542.413 ops/s
[info] # Warmup Iteration   3: 11244.670 ops/s
[info] Iteration   1: 11338.791 ops/s
[info]                  ·gc.alloc.rate:                   1037.674 MB/sec
[info]                  ·gc.alloc.rate.norm:              144056.039 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.333 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        139982.723 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 92.459 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 10963.256 ops/s
[info]                  ·gc.alloc.rate:            1003.295 MB/sec
[info]                  ·gc.alloc.rate.norm:       144056.037 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.931 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 144865.278 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 10860.711 ops/s
[info]                  ·gc.alloc.rate:                                  993.951 MB/sec
[info]                  ·gc.alloc.rate.norm:                             144056.041 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.050 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 7.223 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.008 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       146818.015 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                579.164 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   4: 10939.601 ops/s
[info]                  ·gc.alloc.rate:                                  1001.786 MB/sec
[info]                  ·gc.alloc.rate.norm:                             144089.229 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.023 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.269 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.383 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       146907.970 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 11452.923 ops/s
[info]                  ·gc.alloc.rate:                                  1048.649 MB/sec
[info]                  ·gc.alloc.rate.norm:                             144088.036 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.137 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.112 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       140304.356 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala":
[info]   11111.056 ±(99.9%) 1023.595 ops/s [Average]
[info]   (min, avg, max) = (10860.711, 11111.056, 11452.923), stdev = 265.824
[info]   CI (99.9%): [10087.461, 12134.652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1017.071 ±(99.9%) 93.919 MB/sec [Average]
[info]   (min, avg, max) = (993.951, 1017.071, 1048.649), stdev = 24.391
[info]   CI (99.9%): [923.152, 1110.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   144069.076 ±(99.9%) 68.762 B/op [Average]
[info]   (min, avg, max) = (144056.037, 144069.076, 144089.229), stdev = 17.857
[info]   CI (99.9%): [144000.315, 144137.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.015 ±(99.9%) 0.084 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.050), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.126 ±(99.9%) 12.220 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.126, 7.223), stdev = 3.173
[info]   CI (99.9%): [≈ 0, 14.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1014.553 ±(99.9%) 24.532 MB/sec [Average]
[info]   (min, avg, max) = (1008.333, 1014.553, 1021.383), stdev = 6.371
[info]   CI (99.9%): [990.021, 1039.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   143775.668 ±(99.9%) 13155.864 B/op [Average]
[info]   (min, avg, max) = (139982.723, 143775.668, 146907.970), stdev = 3416.536
[info]   CI (99.9%): [130619.804, 156931.533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   134.325 ±(99.9%) 969.881 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 134.325, 579.164), stdev = 251.875
[info]   CI (99.9%): [≈ 0, 1104.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.600, 12.000), stdev = 4.827
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala
[info] # Run progress: 48.65% complete, ETA 00:40:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 149434.124 ops/s
[info] # Warmup Iteration   2: 160323.471 ops/s
[info] # Warmup Iteration   3: 166657.232 ops/s
[info] Iteration   1: 166752.714 ops/s
[info]                  ·gc.alloc.rate:            964.321 MB/sec
[info]                  ·gc.alloc.rate.norm:       9104.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.951 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9544.226 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 166446.794 ops/s
[info]                  ·gc.alloc.rate:            962.890 MB/sec
[info]                  ·gc.alloc.rate.norm:       9104.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.184 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6374.322 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 165365.700 ops/s
[info]                  ·gc.alloc.rate:                   956.417 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1011.054 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        9624.093 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 31.700 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 165938.262 ops/s
[info]                  ·gc.alloc.rate:                                  959.672 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9104.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.061 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.582 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.014 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9685.929 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 166156.778 ops/s
[info]                  ·gc.alloc.rate:            961.147 MB/sec
[info]                  ·gc.alloc.rate.norm:       9104.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.199 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9672.815 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala":
[info]   166132.050 ±(99.9%) 2028.219 ops/s [Average]
[info]   (min, avg, max) = (165365.700, 166132.050, 166752.714), stdev = 526.722
[info]   CI (99.9%): [164103.830, 168160.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   960.890 ±(99.9%) 11.764 MB/sec [Average]
[info]   (min, avg, max) = (956.417, 960.890, 964.321), stdev = 3.055
[info]   CI (99.9%): [949.125, 972.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   9104.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9104.002, 9104.003, 9104.003), stdev = 0.001
[info]   CI (99.9%): [9104.002, 9104.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.012 ±(99.9%) 0.106 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.061), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.116 ±(99.9%) 1.002 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.116, 0.582), stdev = 0.260
[info]   CI (99.9%): [≈ 0, 1.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   947.681 ±(99.9%) 589.044 MB/sec [Average]
[info]   (min, avg, max) = (674.184, 947.681, 1021.199), stdev = 152.973
[info]   CI (99.9%): [358.637, 1536.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   8980.277 ±(99.9%) 5613.590 B/op [Average]
[info]   (min, avg, max) = (6374.322, 8980.277, 9685.929), stdev = 1457.832
[info]   CI (99.9%): [3366.687, 14593.867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   6.340 ±(99.9%) 54.589 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.340, 31.700), stdev = 14.177
[info]   CI (99.9%): [≈ 0, 60.929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.600, 9.000), stdev = 3.286
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson
[info] # Run progress: 48.92% complete, ETA 00:40:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3791.149 ops/s
[info] # Warmup Iteration   2: 10179.843 ops/s
[info] # Warmup Iteration   3: 10331.451 ops/s
[info] Iteration   1: 10241.802 ops/s
[info]                  ·gc.alloc.rate:                   1281.921 MB/sec
[info]                  ·gc.alloc.rate.norm:              197000.043 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.443 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        154973.064 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 102.360 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 10396.162 ops/s
[info]                  ·gc.alloc.rate:                   1301.095 MB/sec
[info]                  ·gc.alloc.rate.norm:              197000.039 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1347.375 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        204007.429 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 705.908 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   3: 10184.483 ops/s
[info]                  ·gc.alloc.rate:                                  1274.618 MB/sec
[info]                  ·gc.alloc.rate.norm:                             197000.040 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.057 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 8.757 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.417 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       210415.211 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 10584.262 ops/s
[info]                  ·gc.alloc.rate:                                  1324.982 MB/sec
[info]                  ·gc.alloc.rate.norm:                             197000.042 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.213 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.735 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       202464.514 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 10341.583 ops/s
[info]                  ·gc.alloc.rate:            1294.602 MB/sec
[info]                  ·gc.alloc.rate.norm:       197000.039 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.640 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 207201.213 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson":
[info]   10349.658 ±(99.9%) 597.105 ops/s [Average]
[info]   (min, avg, max) = (10184.483, 10349.658, 10584.262), stdev = 155.066
[info]   CI (99.9%): [9752.553, 10946.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1295.444 ±(99.9%) 75.104 MB/sec [Average]
[info]   (min, avg, max) = (1274.618, 1295.444, 1324.982), stdev = 19.504
[info]   CI (99.9%): [1220.339, 1370.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   197000.041 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (197000.039, 197000.041, 197000.043), stdev = 0.002
[info]   CI (99.9%): [197000.035, 197000.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.012 ±(99.9%) 0.097 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.057), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.794 ±(99.9%) 14.993 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.794, 8.757), stdev = 3.894
[info]   CI (99.9%): [≈ 0, 16.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1288.122 ±(99.9%) 602.497 MB/sec [Average]
[info]   (min, avg, max) = (1008.443, 1288.122, 1361.735), stdev = 156.467
[info]   CI (99.9%): [685.625, 1890.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   195812.286 ±(99.9%) 88694.626 B/op [Average]
[info]   (min, avg, max) = (154973.064, 195812.286, 210415.211), stdev = 23033.713
[info]   CI (99.9%): [107117.660, 284506.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.821 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.662), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   161.654 ±(99.9%) 1183.915 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 161.654, 705.908), stdev = 307.459
[info]   CI (99.9%): [≈ 0, 1345.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.800, 15.000), stdev = 5.718
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce
[info] # Run progress: 49.19% complete, ETA 00:40:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19831.618 ops/s
[info] # Warmup Iteration   2: 26933.573 ops/s
[info] # Warmup Iteration   3: 27045.943 ops/s
[info] Iteration   1: 27938.078 ops/s
[info]                  ·gc.alloc.rate:            964.320 MB/sec
[info]                  ·gc.alloc.rate.norm:       54336.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.956 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 56963.761 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 27800.132 ops/s
[info]                  ·gc.alloc.rate:            959.505 MB/sec
[info]                  ·gc.alloc.rate.norm:       54318.806 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.220 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 57246.480 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 27189.967 ops/s
[info]                  ·gc.alloc.rate:                   938.138 MB/sec
[info]                  ·gc.alloc.rate.norm:              54312.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1011.043 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        58532.705 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 192.795 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 27029.829 ops/s
[info]                  ·gc.alloc.rate:                                  932.678 MB/sec
[info]                  ·gc.alloc.rate.norm:                             54312.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.069 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.039 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.707 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       39639.159 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 27213.668 ops/s
[info]                  ·gc.alloc.rate:                                  938.955 MB/sec
[info]                  ·gc.alloc.rate.norm:                             54312.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.017 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.988 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.021 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       59058.969 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce":
[info]   27434.335 ±(99.9%) 1563.664 ops/s [Average]
[info]   (min, avg, max) = (27029.829, 27434.335, 27938.078), stdev = 406.079
[info]   CI (99.9%): [25870.670, 28997.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   946.719 ±(99.9%) 54.604 MB/sec [Average]
[info]   (min, avg, max) = (932.678, 946.719, 964.320), stdev = 14.181
[info]   CI (99.9%): [892.115, 1001.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   54318.174 ±(99.9%) 40.048 B/op [Average]
[info]   (min, avg, max) = (54312.015, 54318.174, 54336.019), stdev = 10.400
[info]   CI (99.9%): [54278.127, 54358.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.017 ±(99.9%) 0.116 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.069), stdev = 0.030
[info]   CI (99.9%): [≈ 0, 0.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.005 ±(99.9%) 6.734 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.005, 4.039), stdev = 1.749
[info]   CI (99.9%): [≈ 0, 7.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   946.989 ±(99.9%) 573.433 MB/sec [Average]
[info]   (min, avg, max) = (680.707, 946.989, 1021.021), stdev = 148.919
[info]   CI (99.9%): [373.556, 1520.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   54288.215 ±(99.9%) 31711.198 B/op [Average]
[info]   (min, avg, max) = (39639.159, 54288.215, 59058.969), stdev = 8235.297
[info]   CI (99.9%): [22577.017, 85999.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   38.559 ±(99.9%) 332.005 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 38.559, 192.795), stdev = 86.221
[info]   CI (99.9%): [≈ 0, 370.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.800, 10.000), stdev = 4.382
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala
[info] # Run progress: 49.46% complete, ETA 00:40:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 57407.641 ops/s
[info] # Warmup Iteration   2: 94997.799 ops/s
[info] # Warmup Iteration   3: 95651.308 ops/s
[info] Iteration   1: 94131.366 ops/s
[info]                  ·gc.alloc.rate:                                  1498.251 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25056.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.110 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.848 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1685.615 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       28189.383 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                66.826 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        18.000 ms
[info] Iteration   2: 95807.326 ops/s
[info]                  ·gc.alloc.rate:                                  1525.117 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25056.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.120 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.970 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.438 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       22366.937 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   3: 95946.746 ops/s
[info]                  ·gc.alloc.rate:                                  1527.332 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25056.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.024 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.747 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       27917.301 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 96101.660 ops/s
[info]                  ·gc.alloc.rate:                                  1529.666 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25056.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.043 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.308 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       22298.290 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 96439.545 ops/s
[info]                  ·gc.alloc.rate:                                  1535.109 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25056.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.040 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.706 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       27775.192 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala":
[info]   95685.329 ±(99.9%) 3465.684 ops/s [Average]
[info]   (min, avg, max) = (94131.366, 95685.329, 96439.545), stdev = 900.027
[info]   CI (99.9%): [92219.644, 99151.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1523.095 ±(99.9%) 55.359 MB/sec [Average]
[info]   (min, avg, max) = (1498.251, 1523.095, 1535.109), stdev = 14.377
[info]   CI (99.9%): [1467.736, 1578.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   25056.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (25056.004, 25056.004, 25056.005), stdev = 0.001
[info]   CI (99.9%): [25056.004, 25056.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.047 ±(99.9%) 0.239 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.047, 0.120), stdev = 0.062
[info]   CI (99.9%): [≈ 0, 0.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.785 ±(99.9%) 3.954 B/op [Average]
[info]   (min, avg, max) = (0.024, 0.785, 1.970), stdev = 1.027
[info]   CI (99.9%): [≈ 0, 4.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1562.363 ±(99.9%) 706.962 MB/sec [Average]
[info]   (min, avg, max) = (1361.308, 1562.363, 1701.747), stdev = 183.596
[info]   CI (99.9%): [855.401, 2269.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   25709.421 ±(99.9%) 11884.145 B/op [Average]
[info]   (min, avg, max) = (22298.290, 25709.421, 28189.383), stdev = 3086.275
[info]   CI (99.9%): [13825.275, 37593.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   13.365 ±(99.9%) 115.078 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13.365, 66.826), stdev = 29.885
[info]   CI (99.9%): [≈ 0, 128.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.600, 18.000), stdev = 6.427
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala
[info] # Run progress: 49.73% complete, ETA 00:39:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 858579.404 ops/s
[info] # Warmup Iteration   2: 904678.548 ops/s
[info] # Warmup Iteration   3: 941873.845 ops/s
[info] Iteration   1: 940498.327 ops/s
[info]                  ·gc.alloc.rate:                   1290.559 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1010.332 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1690.986 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.115 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 937176.222 ops/s
[info]                  ·gc.alloc.rate:                                  1286.035 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2160.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.173 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.290 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1354.772 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2275.449 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                5.594 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   3: 928691.365 ops/s
[info]                  ·gc.alloc.rate:                                  1274.287 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2160.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.297 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2307.488 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 917835.748 ops/s
[info]                  ·gc.alloc.rate:                                  1259.533 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2160.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.452 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2334.784 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 939635.300 ops/s
[info]                  ·gc.alloc.rate:                                  1289.984 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2160.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.041 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2280.656 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala":
[info]   932767.392 ±(99.9%) 36830.623 ops/s [Average]
[info]   (min, avg, max) = (917835.748, 932767.392, 940498.327), stdev = 9564.796
[info]   CI (99.9%): [895936.769, 969598.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1280.080 ±(99.9%) 50.907 MB/sec [Average]
[info]   (min, avg, max) = (1259.533, 1280.080, 1290.559), stdev = 13.220
[info]   CI (99.9%): [1229.173, 1330.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2160.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2160.000, 2160.000, 2160.000), stdev = 0.001
[info]   CI (99.9%): [2160.000, 2160.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.036 ±(99.9%) 0.294 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.036, 0.173), stdev = 0.076
[info]   CI (99.9%): [≈ 0, 0.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.061 ±(99.9%) 0.494 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.061, 0.290), stdev = 0.128
[info]   CI (99.9%): [≈ 0, 0.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1289.979 ±(99.9%) 602.070 MB/sec [Average]
[info]   (min, avg, max) = (1010.332, 1289.979, 1362.041), stdev = 156.356
[info]   CI (99.9%): [687.909, 1892.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   2177.872 ±(99.9%) 1052.018 B/op [Average]
[info]   (min, avg, max) = (1690.986, 2177.872, 2334.784), stdev = 273.206
[info]   CI (99.9%): [1125.854, 3229.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.342 ±(99.9%) 9.339 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.342, 5.594), stdev = 2.425
[info]   CI (99.9%): [≈ 0, 10.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 9.000), stdev = 3.286
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 50.00% complete, ETA 00:39:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 972684.573 ops/s
[info] # Warmup Iteration   2: 1059527.828 ops/s
[info] # Warmup Iteration   3: 1073484.836 ops/s
[info] Iteration   1: 1080578.542 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1083218.510 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1082517.939 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1039962.379 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1097694.420 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   1076794.358 ±(99.9%) 83518.958 ops/s [Average]
[info]   (min, avg, max) = (1039962.379, 1076794.358, 1097694.420), stdev = 21689.608
[info]   CI (99.9%): [993275.400, 1160313.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson
[info] # Run progress: 50.27% complete, ETA 00:39:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 34260.581 ops/s
[info] # Warmup Iteration   2: 68831.706 ops/s
[info] # Warmup Iteration   3: 69069.515 ops/s
[info] Iteration   1: 68973.882 ops/s
[info]                  ·gc.alloc.rate:                   1351.965 MB/sec
[info]                  ·gc.alloc.rate.norm:              30856.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1343.958 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        30673.272 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 30.400 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 68401.670 ops/s
[info]                  ·gc.alloc.rate:                                  1341.338 MB/sec
[info]                  ·gc.alloc.rate.norm:                             30856.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.067 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.537 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1357.888 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       31236.722 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                91.963 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 68952.172 ops/s
[info]                  ·gc.alloc.rate:                                  1351.670 MB/sec
[info]                  ·gc.alloc.rate.norm:                             30856.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.093 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.450 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       31079.281 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 69433.991 ops/s
[info]                  ·gc.alloc.rate:                                  1361.117 MB/sec
[info]                  ·gc.alloc.rate.norm:                             30856.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.127 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.431 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       30863.120 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 69933.736 ops/s
[info]                  ·gc.alloc.rate:            1370.962 MB/sec
[info]                  ·gc.alloc.rate.norm:       30856.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.456 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 30642.057 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson":
[info]   69139.090 ±(99.9%) 2215.751 ops/s [Average]
[info]   (min, avg, max) = (68401.670, 69139.090, 69933.736), stdev = 575.424
[info]   CI (99.9%): [66923.339, 71354.842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1355.410 ±(99.9%) 42.979 MB/sec [Average]
[info]   (min, avg, max) = (1341.338, 1355.410, 1370.962), stdev = 11.161
[info]   CI (99.9%): [1312.432, 1398.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   30856.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (30856.006, 30856.006, 30856.006), stdev = 0.001
[info]   CI (99.9%): [30856.005, 30856.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.015 ±(99.9%) 0.111 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.067), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.351 ±(99.9%) 2.561 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.351, 1.537), stdev = 0.665
[info]   CI (99.9%): [≈ 0, 2.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1357.237 ±(99.9%) 29.192 MB/sec [Average]
[info]   (min, avg, max) = (1343.958, 1357.237, 1361.456), stdev = 7.581
[info]   CI (99.9%): [1328.044, 1386.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   30898.890 ±(99.9%) 990.778 B/op [Average]
[info]   (min, avg, max) = (30642.057, 30898.890, 31236.722), stdev = 257.302
[info]   CI (99.9%): [29908.112, 31889.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 6.690 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 3.998), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   24.473 ±(99.9%) 153.867 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 24.473, 91.963), stdev = 39.959
[info]   CI (99.9%): [≈ 0, 178.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.400, 18.000), stdev = 6.229
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce
[info] # Run progress: 50.54% complete, ETA 00:39:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10932.190 ops/s
[info] # Warmup Iteration   2: 23741.458 ops/s
[info] # Warmup Iteration   3: 24023.307 ops/s
[info] Iteration   1: 24581.205 ops/s
[info]                  ·gc.alloc.rate:                   885.854 MB/sec
[info]                  ·gc.alloc.rate.norm:              56728.030 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.662 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        43203.754 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 42.649 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 25566.604 ops/s
[info]                  ·gc.alloc.rate:                   921.461 MB/sec
[info]                  ·gc.alloc.rate.norm:              56728.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1011.748 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        62286.366 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 41.005 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 25166.923 ops/s
[info]                  ·gc.alloc.rate:                   907.143 MB/sec
[info]                  ·gc.alloc.rate.norm:              56728.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1012.521 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        63317.794 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 41.656 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 25631.153 ops/s
[info]                  ·gc.alloc.rate:                                  923.774 MB/sec
[info]                  ·gc.alloc.rate.norm:                             56728.017 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.055 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.388 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1014.459 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       62296.908 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                204.520 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   5: 25309.531 ops/s
[info]                  ·gc.alloc.rate:                                  912.256 MB/sec
[info]                  ·gc.alloc.rate.norm:                             56728.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.099 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 6.166 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.757 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       42332.399 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce":
[info]   25251.083 ±(99.9%) 1614.565 ops/s [Average]
[info]   (min, avg, max) = (24581.205, 25251.083, 25631.153), stdev = 419.298
[info]   CI (99.9%): [23636.518, 26865.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate":
[info]   910.098 ±(99.9%) 58.312 MB/sec [Average]
[info]   (min, avg, max) = (885.854, 910.098, 923.774), stdev = 15.144
[info]   CI (99.9%): [851.785, 968.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   56728.020 ±(99.9%) 0.022 B/op [Average]
[info]   (min, avg, max) = (56728.016, 56728.020, 56728.030), stdev = 0.006
[info]   CI (99.9%): [56727.998, 56728.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.031 ±(99.9%) 0.173 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.031, 0.099), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.911 ±(99.9%) 10.761 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.911, 6.166), stdev = 2.795
[info]   CI (99.9%): [≈ 0, 12.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   878.829 ±(99.9%) 707.024 MB/sec [Average]
[info]   (min, avg, max) = (674.662, 878.829, 1014.459), stdev = 183.612
[info]   CI (99.9%): [171.805, 1585.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   54687.444 ±(99.9%) 41946.081 B/op [Average]
[info]   (min, avg, max) = (42332.399, 54687.444, 63317.794), stdev = 10893.264
[info]   CI (99.9%): [12741.364, 96633.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 5.000 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 3.330), stdev = 1.298
[info]   CI (99.9%): [≈ 0, 6.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   65.966 ±(99.9%) 306.281 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 65.966, 204.520), stdev = 79.540
[info]   CI (99.9%): [≈ 0, 372.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.000, 9.000), stdev = 2.915
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala
[info] # Run progress: 50.81% complete, ETA 00:38:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6280.417 ops/s
[info] # Warmup Iteration   2: 20398.193 ops/s
[info] # Warmup Iteration   3: 21351.384 ops/s
[info] Iteration   1: 21225.929 ops/s
[info]                  ·gc.alloc.rate:            581.868 MB/sec
[info]                  ·gc.alloc.rate.norm:       43144.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.783 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 49885.151 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 21242.004 ops/s
[info]                  ·gc.alloc.rate:            582.296 MB/sec
[info]                  ·gc.alloc.rate.norm:       43144.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.803 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 49849.930 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 20824.075 ops/s
[info]                  ·gc.alloc.rate:            571.042 MB/sec
[info]                  ·gc.alloc.rate.norm:       43144.687 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.031 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 50850.423 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 21550.084 ops/s
[info]                  ·gc.alloc.rate:            590.645 MB/sec
[info]                  ·gc.alloc.rate.norm:       43144.025 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.333 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 24567.638 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 21358.822 ops/s
[info]                  ·gc.alloc.rate:            585.395 MB/sec
[info]                  ·gc.alloc.rate.norm:       43144.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.647 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 49574.580 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala":
[info]   21240.183 ±(99.9%) 1025.070 ops/s [Average]
[info]   (min, avg, max) = (20824.075, 21240.183, 21550.084), stdev = 266.208
[info]   CI (99.9%): [20215.112, 22265.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   582.249 ±(99.9%) 27.643 MB/sec [Average]
[info]   (min, avg, max) = (571.042, 582.249, 590.645), stdev = 7.179
[info]   CI (99.9%): [554.606, 609.892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   43144.154 ±(99.9%) 1.147 B/op [Average]
[info]   (min, avg, max) = (43144.019, 43144.154, 43144.687), stdev = 0.298
[info]   CI (99.9%): [43143.007, 43145.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   605.520 ±(99.9%) 579.444 MB/sec [Average]
[info]   (min, avg, max) = (336.333, 605.520, 673.031), stdev = 150.480
[info]   CI (99.9%): [26.075, 1184.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   44945.545 ±(99.9%) 43904.405 B/op [Average]
[info]   (min, avg, max) = (24567.638, 44945.545, 50850.423), stdev = 11401.835
[info]   CI (99.9%): [1041.140, 88849.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.200, 8.000), stdev = 1.789
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala
[info] # Run progress: 51.08% complete, ETA 00:38:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 153928.349 ops/s
[info] # Warmup Iteration   2: 167143.125 ops/s
[info] # Warmup Iteration   3: 170193.593 ops/s
[info] Iteration   1: 168984.449 ops/s
[info]                  ·gc.alloc.rate:            439.698 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.356 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6291.270 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 169518.020 ops/s
[info]                  ·gc.alloc.rate:            441.273 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.820 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3135.727 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 169935.525 ops/s
[info]                  ·gc.alloc.rate:            442.202 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.693 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3127.960 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   4: 168679.607 ops/s
[info]                  ·gc.alloc.rate:            439.117 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.691 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6302.719 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 169947.617 ops/s
[info]                  ·gc.alloc.rate:            442.381 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.813 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3127.812 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala":
[info]   169413.044 ±(99.9%) 2187.930 ops/s [Average]
[info]   (min, avg, max) = (168679.607, 169413.044, 169947.617), stdev = 568.199
[info]   CI (99.9%): [167225.113, 171600.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   440.934 ±(99.9%) 5.660 MB/sec [Average]
[info]   (min, avg, max) = (439.117, 440.934, 442.381), stdev = 1.470
[info]   CI (99.9%): [435.274, 446.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.002, 4096.002, 4096.003), stdev = 0.001
[info]   CI (99.9%): [4096.002, 4096.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   472.875 ±(99.9%) 712.340 MB/sec [Average]
[info]   (min, avg, max) = (337.693, 472.875, 675.691), stdev = 184.992
[info]   CI (99.9%): [≈ 0, 1185.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   4397.098 ±(99.9%) 6678.434 B/op [Average]
[info]   (min, avg, max) = (3127.812, 4397.098, 6302.719), stdev = 1734.368
[info]   CI (99.9%): [≈ 0, 11075.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.000, 6.000), stdev = 1.871
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson
[info] # Run progress: 51.35% complete, ETA 00:38:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4599.683 ops/s
[info] # Warmup Iteration   2: 19365.678 ops/s
[info] # Warmup Iteration   3: 20429.878 ops/s
[info] Iteration   1: 20404.580 ops/s
[info]                  ·gc.alloc.rate:            1276.323 MB/sec
[info]                  ·gc.alloc.rate.norm:       98448.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.564 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 103788.883 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   2: 19669.618 ops/s
[info]                  ·gc.alloc.rate:                   1230.376 MB/sec
[info]                  ·gc.alloc.rate.norm:              98448.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.190 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        80749.893 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 319.802 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 19708.976 ops/s
[info]                  ·gc.alloc.rate:                                  1232.689 MB/sec
[info]                  ·gc.alloc.rate.norm:                             98448.028 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.383 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 30.610 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.365 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       108724.666 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 20415.684 ops/s
[info]                  ·gc.alloc.rate:                                  1276.990 MB/sec
[info]                  ·gc.alloc.rate.norm:                             98448.020 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.115 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.529 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       104965.441 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 20332.817 ops/s
[info]                  ·gc.alloc.rate:                                  1271.652 MB/sec
[info]                  ·gc.alloc.rate.norm:                             98448.020 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.092 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.238 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       105383.486 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson":
[info]   20106.335 ±(99.9%) 1472.029 ops/s [Average]
[info]   (min, avg, max) = (19669.618, 20106.335, 20415.684), stdev = 382.281
[info]   CI (99.9%): [18634.305, 21578.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1257.606 ±(99.9%) 92.048 MB/sec [Average]
[info]   (min, avg, max) = (1230.376, 1257.606, 1276.990), stdev = 23.904
[info]   CI (99.9%): [1165.558, 1349.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   98448.022 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (98448.020, 98448.022, 98448.028), stdev = 0.003
[info]   CI (99.9%): [98448.009, 98448.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.077 ±(99.9%) 0.659 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.077, 0.383), stdev = 0.171
[info]   CI (99.9%): [≈ 0, 0.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   6.163 ±(99.9%) 52.624 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.163, 30.610), stdev = 13.666
[info]   CI (99.9%): [≈ 0, 58.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1287.777 ±(99.9%) 600.260 MB/sec [Average]
[info]   (min, avg, max) = (1009.190, 1287.777, 1361.529), stdev = 155.886
[info]   CI (99.9%): [687.517, 1888.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   100722.474 ±(99.9%) 43568.030 B/op [Average]
[info]   (min, avg, max) = (80749.893, 100722.474, 108724.666), stdev = 11314.479
[info]   CI (99.9%): [57154.444, 144290.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   63.960 ±(99.9%) 550.718 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 63.960, 319.802), stdev = 143.020
[info]   CI (99.9%): [≈ 0, 614.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.200, 17.000), stdev = 6.140
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce
[info] # Run progress: 51.62% complete, ETA 00:38:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 63715.146 ops/s
[info] # Warmup Iteration   2: 81285.757 ops/s
[info] # Warmup Iteration   3: 80803.185 ops/s
[info] Iteration   1: 83254.490 ops/s
[info]                  ·gc.alloc.rate:            1100.444 MB/sec
[info]                  ·gc.alloc.rate.norm:       20808.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1347.954 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 25488.102 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 83850.498 ops/s
[info]                  ·gc.alloc.rate:            1108.324 MB/sec
[info]                  ·gc.alloc.rate.norm:       20808.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.968 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18980.222 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 81222.160 ops/s
[info]                  ·gc.alloc.rate:                                  1074.023 MB/sec
[info]                  ·gc.alloc.rate.norm:                             20808.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.055 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.072 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1018.036 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       19723.323 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                64.540 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 81593.123 ops/s
[info]                  ·gc.alloc.rate:                                  1078.646 MB/sec
[info]                  ·gc.alloc.rate.norm:                             20808.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.100 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       19697.902 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 80217.584 ops/s
[info]                  ·gc.alloc.rate:            1060.337 MB/sec
[info]                  ·gc.alloc.rate.norm:       20808.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.984 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 20035.735 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce":
[info]   82027.571 ±(99.9%) 5757.286 ops/s [Average]
[info]   (min, avg, max) = (80217.584, 82027.571, 83850.498), stdev = 1495.149
[info]   CI (99.9%): [76270.285, 87784.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1084.355 ±(99.9%) 75.790 MB/sec [Average]
[info]   (min, avg, max) = (1060.337, 1084.355, 1108.324), stdev = 19.682
[info]   CI (99.9%): [1008.565, 1160.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   20808.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (20808.005, 20808.005, 20808.005), stdev = 0.001
[info]   CI (99.9%): [20808.005, 20808.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.011 ±(99.9%) 0.095 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.055), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.216 ±(99.9%) 1.843 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.216, 1.072), stdev = 0.479
[info]   CI (99.9%): [≈ 0, 2.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1083.809 ±(99.9%) 568.815 MB/sec [Average]
[info]   (min, avg, max) = (1010.968, 1083.809, 1347.954), stdev = 147.719
[info]   CI (99.9%): [514.994, 1652.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   20785.057 ±(99.9%) 10232.635 B/op [Average]
[info]   (min, avg, max) = (18980.222, 20785.057, 25488.102), stdev = 2657.383
[info]   CI (99.9%): [10552.422, 31017.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.737 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   12.908 ±(99.9%) 111.141 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12.908, 64.540), stdev = 28.863
[info]   CI (99.9%): [≈ 0, 124.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.600, 13.000), stdev = 4.722
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala
[info] # Run progress: 51.89% complete, ETA 00:38:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 88142.086 ops/s
[info] # Warmup Iteration   2: 137169.246 ops/s
[info] # Warmup Iteration   3: 137392.719 ops/s
[info] Iteration   1: 138144.617 ops/s
[info]                  ·gc.alloc.rate:            1169.084 MB/sec
[info]                  ·gc.alloc.rate.norm:       13320.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.135 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11497.627 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 137935.692 ops/s
[info]                  ·gc.alloc.rate:                                  1167.437 MB/sec
[info]                  ·gc.alloc.rate.norm:                             13320.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.086 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.984 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1349.015 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       15391.732 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                53.206 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        14.000 ms
[info] Iteration   3: 140477.583 ops/s
[info]                  ·gc.alloc.rate:                                  1189.296 MB/sec
[info]                  ·gc.alloc.rate.norm:                             13320.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.107 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.193 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.509 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11440.802 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   4: 136841.897 ops/s
[info]                  ·gc.alloc.rate:                                  1157.918 MB/sec
[info]                  ·gc.alloc.rate.norm:                             13320.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.366 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       15660.337 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 140384.818 ops/s
[info]                  ·gc.alloc.rate:            1187.949 MB/sec
[info]                  ·gc.alloc.rate.norm:       13320.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.020 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11448.298 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala":
[info]   138756.921 ±(99.9%) 6187.261 ops/s [Average]
[info]   (min, avg, max) = (136841.897, 138756.921, 140477.583), stdev = 1606.812
[info]   CI (99.9%): [132569.660, 144944.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1174.337 ±(99.9%) 52.862 MB/sec [Average]
[info]   (min, avg, max) = (1157.918, 1174.337, 1189.296), stdev = 13.728
[info]   CI (99.9%): [1121.475, 1227.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   13320.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13320.003, 13320.003, 13320.003), stdev = 0.001
[info]   CI (99.9%): [13320.002, 13320.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.039 ±(99.9%) 0.204 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.039, 0.107), stdev = 0.053
[info]   CI (99.9%): [≈ 0, 0.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.438 ±(99.9%) 2.303 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.438, 1.193), stdev = 0.598
[info]   CI (99.9%): [≈ 0, 2.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1152.409 ±(99.9%) 713.258 MB/sec [Average]
[info]   (min, avg, max) = (1009.135, 1152.409, 1361.366), stdev = 185.231
[info]   CI (99.9%): [439.151, 1865.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   13087.759 ±(99.9%) 8579.090 B/op [Average]
[info]   (min, avg, max) = (11440.802, 13087.759, 15660.337), stdev = 2227.962
[info]   CI (99.9%): [4508.669, 21666.849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.030 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.663), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   10.641 ±(99.9%) 91.624 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.641, 53.206), stdev = 23.794
[info]   CI (99.9%): [≈ 0, 102.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.800, 14.000), stdev = 5.718
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala
[info] # Run progress: 52.16% complete, ETA 00:37:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 382420.329 ops/s
[info] # Warmup Iteration   2: 441630.010 ops/s
[info] # Warmup Iteration   3: 461572.716 ops/s
[info] Iteration   1: 434024.422 ops/s
[info]                  ·gc.alloc.rate:            480.906 MB/sec
[info]                  ·gc.alloc.rate.norm:       1744.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.365 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1219.825 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 409154.598 ops/s
[info]                  ·gc.alloc.rate:            453.285 MB/sec
[info]                  ·gc.alloc.rate.norm:       1744.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.649 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2587.995 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 441354.813 ops/s
[info]                  ·gc.alloc.rate:            488.943 MB/sec
[info]                  ·gc.alloc.rate.norm:       1744.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.306 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1199.564 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 441317.360 ops/s
[info]                  ·gc.alloc.rate:            488.997 MB/sec
[info]                  ·gc.alloc.rate.norm:       1744.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.377 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1199.684 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 441457.598 ops/s
[info]                  ·gc.alloc.rate:                   489.082 MB/sec
[info]                  ·gc.alloc.rate.norm:              1744.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.330 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2401.004 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.375 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala":
[info]   433461.758 ±(99.9%) 53740.246 ops/s [Average]
[info]   (min, avg, max) = (409154.598, 433461.758, 441457.598), stdev = 13956.171
[info]   CI (99.9%): [379721.512, 487202.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   480.243 ±(99.9%) 59.580 MB/sec [Average]
[info]   (min, avg, max) = (453.285, 480.243, 489.082), stdev = 15.473
[info]   CI (99.9%): [420.663, 539.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1744.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1744.001, 1744.001, 1744.001), stdev = 0.001
[info]   CI (99.9%): [1744.001, 1744.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   471.005 ±(99.9%) 710.002 MB/sec [Average]
[info]   (min, avg, max) = (336.306, 471.005, 673.330), stdev = 184.385
[info]   CI (99.9%): [≈ 0, 1181.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1721.614 ±(99.9%) 2728.885 B/op [Average]
[info]   (min, avg, max) = (1199.564, 1721.614, 2587.995), stdev = 708.683
[info]   CI (99.9%): [≈ 0, 4450.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.475 ±(99.9%) 4.090 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.475, 2.375), stdev = 1.062
[info]   CI (99.9%): [≈ 0, 4.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 6.000), stdev = 1.643
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 52.43% complete, ETA 00:37:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 468136.597 ops/s
[info] # Warmup Iteration   2: 494380.776 ops/s
[info] # Warmup Iteration   3: 506716.051 ops/s
[info] Iteration   1: 507997.555 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 506653.377 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 507875.037 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 509648.539 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 509528.405 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc":
[info]   508340.583 ±(99.9%) 4833.570 ops/s [Average]
[info]   (min, avg, max) = (506653.377, 508340.583, 509648.539), stdev = 1255.263
[info]   CI (99.9%): [503507.013, 513174.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson
[info] # Run progress: 52.70% complete, ETA 00:37:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 76155.547 ops/s
[info] # Warmup Iteration   2: 95947.901 ops/s
[info] # Warmup Iteration   3: 97334.619 ops/s
[info] Iteration   1: 99875.609 ops/s
[info]                  ·gc.alloc.rate:            1218.120 MB/sec
[info]                  ·gc.alloc.rate.norm:       19200.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.256 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 21203.923 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   2: 99762.891 ops/s
[info]                  ·gc.alloc.rate:                                  1217.197 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19200.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.108 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.697 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1349.756 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       21290.990 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                63.053 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        14.000 ms
[info] Iteration   3: 102286.730 ops/s
[info]                  ·gc.alloc.rate:                                  1247.629 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19200.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.050 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.769 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.009 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       15712.497 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   4: 102797.083 ops/s
[info]                  ·gc.alloc.rate:                                  1253.912 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19200.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.040 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.414 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       20846.076 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 102623.491 ops/s
[info]                  ·gc.alloc.rate:                                  1252.164 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19200.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.820 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       20881.415 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson":
[info]   101469.161 ±(99.9%) 5844.561 ops/s [Average]
[info]   (min, avg, max) = (99762.891, 101469.161, 102797.083), stdev = 1517.814
[info]   CI (99.9%): [95624.599, 107313.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1237.804 ±(99.9%) 71.375 MB/sec [Average]
[info]   (min, avg, max) = (1217.197, 1237.804, 1253.912), stdev = 18.536
[info]   CI (99.9%): [1166.429, 1309.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   19200.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (19200.004, 19200.004, 19200.004), stdev = 0.001
[info]   CI (99.9%): [19200.003, 19200.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.032 ±(99.9%) 0.181 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.032, 0.108), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.504 ±(99.9%) 2.856 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.504, 1.697), stdev = 0.742
[info]   CI (99.9%): [≈ 0, 3.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1287.851 ±(99.9%) 575.074 MB/sec [Average]
[info]   (min, avg, max) = (1021.009, 1287.851, 1361.820), stdev = 149.345
[info]   CI (99.9%): [712.778, 1862.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   19986.980 ±(99.9%) 9231.645 B/op [Average]
[info]   (min, avg, max) = (15712.497, 19986.980, 21290.990), stdev = 2397.429
[info]   CI (99.9%): [10755.336, 29218.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.884 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   12.611 ±(99.9%) 108.582 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12.611, 63.053), stdev = 28.198
[info]   CI (99.9%): [≈ 0, 121.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.600, 15.000), stdev = 6.348
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce
[info] # Run progress: 52.97% complete, ETA 00:37:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 117301.145 ops/s
[info] # Warmup Iteration   2: 145531.218 ops/s
[info] # Warmup Iteration   3: 147373.181 ops/s
[info] Iteration   1: 149362.606 ops/s
[info]                  ·gc.alloc.rate:                                  2508.543 MB/sec
[info]                  ·gc.alloc.rate.norm:                             26440.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.048 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.054 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       25106.809 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 146217.352 ops/s
[info]                  ·gc.alloc.rate:                                  2455.834 MB/sec
[info]                  ·gc.alloc.rate.norm:                             26440.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.023 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.571 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       29311.744 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 144119.218 ops/s
[info]                  ·gc.alloc.rate:                                  2420.907 MB/sec
[info]                  ·gc.alloc.rate.norm:                             26440.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.011 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.117 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.500 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       26020.537 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 145722.763 ops/s
[info]                  ·gc.alloc.rate:                                  2447.680 MB/sec
[info]                  ·gc.alloc.rate.norm:                             26440.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.072 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.452 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       25735.413 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 147412.250 ops/s
[info]                  ·gc.alloc.rate:                                  2476.074 MB/sec
[info]                  ·gc.alloc.rate.norm:                             26440.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.010 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.111 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.431 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       25440.068 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce":
[info]   146566.838 ±(99.9%) 7544.827 ops/s [Average]
[info]   (min, avg, max) = (144119.218, 146566.838, 149362.606), stdev = 1959.368
[info]   CI (99.9%): [139022.011, 154111.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate":
[info]   2461.808 ±(99.9%) 126.191 MB/sec [Average]
[info]   (min, avg, max) = (2420.907, 2461.808, 2508.543), stdev = 32.771
[info]   CI (99.9%): [2335.617, 2587.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   26440.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (26440.003, 26440.003, 26440.003), stdev = 0.001
[info]   CI (99.9%): [26440.003, 26440.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.007 ±(99.9%) 0.014 MB/sec [Average]
[info]   (min, avg, max) = (0.002, 0.007, 0.011), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.074 ±(99.9%) 0.154 B/op [Average]
[info]   (min, avg, max) = (0.023, 0.074, 0.117), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2450.402 ±(99.9%) 585.865 MB/sec [Average]
[info]   (min, avg, max) = (2382.054, 2450.402, 2722.571), stdev = 152.147
[info]   CI (99.9%): [1864.536, 3036.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   26322.914 ±(99.9%) 6565.326 B/op [Average]
[info]   (min, avg, max) = (25106.809, 26322.914, 29311.744), stdev = 1704.994
[info]   CI (99.9%): [19757.588, 32888.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.count":
[info]   36.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.200, 8.000), stdev = 0.447
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava
[info] # Run progress: 53.24% complete, ETA 00:37:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28075.895 ops/s
[info] # Warmup Iteration   2: 556772.789 ops/s
[info] # Warmup Iteration   3: 560964.329 ops/s
[info] Iteration   1: 534727.232 ops/s
[info]                  ·gc.alloc.rate:            296.259 MB/sec
[info]                  ·gc.alloc.rate.norm:       872.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.730 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 982.292 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 560879.194 ops/s
[info]                  ·gc.alloc.rate:            310.830 MB/sec
[info]                  ·gc.alloc.rate.norm:       872.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.827 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 936.516 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 556746.207 ops/s
[info]                  ·gc.alloc.rate:            308.449 MB/sec
[info]                  ·gc.alloc.rate.norm:       872.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.729 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 943.469 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 563417.892 ops/s
[info]                  ·gc.alloc.rate:            312.179 MB/sec
[info]                  ·gc.alloc.rate.norm:       872.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.763 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 932.291 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 563385.483 ops/s
[info]                  ·gc.alloc.rate:            312.132 MB/sec
[info]                  ·gc.alloc.rate.norm:       872.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.736 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 932.355 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava":
[info]   555831.201 ±(99.9%) 46619.915 ops/s [Average]
[info]   (min, avg, max) = (534727.232, 555831.201, 563417.892), stdev = 12107.044
[info]   CI (99.9%): [509211.286, 602451.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   307.970 ±(99.9%) 25.874 MB/sec [Average]
[info]   (min, avg, max) = (296.259, 307.970, 312.179), stdev = 6.719
[info]   CI (99.9%): [282.096, 333.843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   872.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (872.001, 872.001, 872.001), stdev = 0.001
[info]   CI (99.9%): [872.001, 872.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   333.757 ±(99.9%) 0.160 MB/sec [Average]
[info]   (min, avg, max) = (333.729, 333.757, 333.827), stdev = 0.042
[info]   CI (99.9%): [333.597, 333.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   945.384 ±(99.9%) 81.359 B/op [Average]
[info]   (min, avg, max) = (932.291, 945.384, 982.292), stdev = 21.129
[info]   CI (99.9%): [864.025, 1026.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala
[info] # Run progress: 53.51% complete, ETA 00:36:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 193868.289 ops/s
[info] # Warmup Iteration   2: 309908.663 ops/s
[info] # Warmup Iteration   3: 319895.401 ops/s
[info] Iteration   1: 311264.873 ops/s
[info]                  ·gc.alloc.rate:            324.293 MB/sec
[info]                  ·gc.alloc.rate.norm:       1640.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.324 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1700.845 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 305131.798 ops/s
[info]                  ·gc.alloc.rate:            317.928 MB/sec
[info]                  ·gc.alloc.rate.norm:       1640.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.362 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1735.092 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 314611.539 ops/s
[info]                  ·gc.alloc.rate:            327.867 MB/sec
[info]                  ·gc.alloc.rate.norm:       1640.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.434 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1682.856 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 320626.146 ops/s
[info]                  ·gc.alloc.rate:            334.045 MB/sec
[info]                  ·gc.alloc.rate.norm:       1640.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.344 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1651.290 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 320149.901 ops/s
[info]                  ·gc.alloc.rate:            333.530 MB/sec
[info]                  ·gc.alloc.rate.norm:       1640.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.324 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1653.740 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala":
[info]   314356.852 ±(99.9%) 24924.576 ops/s [Average]
[info]   (min, avg, max) = (305131.798, 314356.852, 320626.146), stdev = 6472.833
[info]   CI (99.9%): [289432.275, 339281.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   327.533 ±(99.9%) 25.920 MB/sec [Average]
[info]   (min, avg, max) = (317.928, 327.533, 334.045), stdev = 6.731
[info]   CI (99.9%): [301.613, 353.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1640.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1640.001, 1640.001, 1640.001), stdev = 0.001
[info]   CI (99.9%): [1640.001, 1640.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   336.358 ±(99.9%) 0.176 MB/sec [Average]
[info]   (min, avg, max) = (336.324, 336.358, 336.434), stdev = 0.046
[info]   CI (99.9%): [336.182, 336.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1684.765 ±(99.9%) 134.471 B/op [Average]
[info]   (min, avg, max) = (1651.290, 1684.765, 1735.092), stdev = 34.922
[info]   CI (99.9%): [1550.294, 1819.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala
[info] # Run progress: 53.78% complete, ETA 00:36:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 691488.803 ops/s
[info] # Warmup Iteration   2: 715020.671 ops/s
[info] # Warmup Iteration   3: 735727.627 ops/s
[info] Iteration   1: 737104.822 ops/s
[info]                  ·gc.alloc.rate:            254.727 MB/sec
[info]                  ·gc.alloc.rate.norm:       544.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.996 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 719.695 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 739792.503 ops/s
[info]                  ·gc.alloc.rate:      255.713 MB/sec
[info]                  ·gc.alloc.rate.norm: 544.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 736030.255 ops/s
[info]                  ·gc.alloc.rate:            254.365 MB/sec
[info]                  ·gc.alloc.rate.norm:       544.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.011 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 720.752 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 738626.496 ops/s
[info]                  ·gc.alloc.rate:            255.280 MB/sec
[info]                  ·gc.alloc.rate.norm:       544.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.033 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 718.217 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 739324.812 ops/s
[info]                  ·gc.alloc.rate:            255.563 MB/sec
[info]                  ·gc.alloc.rate.norm:       544.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.091 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 717.542 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala":
[info]   738175.778 ±(99.9%) 6054.040 ops/s [Average]
[info]   (min, avg, max) = (736030.255, 738175.778, 739792.503), stdev = 1572.215
[info]   CI (99.9%): [732121.738, 744229.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   255.130 ±(99.9%) 2.193 MB/sec [Average]
[info]   (min, avg, max) = (254.365, 255.130, 255.713), stdev = 0.569
[info]   CI (99.9%): [252.937, 257.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   544.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (544.001, 544.001, 544.001), stdev = 0.001
[info]   CI (99.9%): [544.000, 544.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   269.626 ±(99.9%) 580.391 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.626, 337.091), stdev = 150.726
[info]   CI (99.9%): [≈ 0, 850.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   575.241 ±(99.9%) 1238.260 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 575.241, 720.752), stdev = 321.572
[info]   CI (99.9%): [≈ 0, 1813.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson
[info] # Run progress: 54.05% complete, ETA 00:36:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37819.709 ops/s
[info] # Warmup Iteration   2: 71341.107 ops/s
[info] # Warmup Iteration   3: 72614.554 ops/s
[info] Iteration   1: 71774.512 ops/s
[info]                  ·gc.alloc.rate:                                  3172.336 MB/sec
[info]                  ·gc.alloc.rate.norm:                             69576.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.019 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.425 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.209 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       74639.541 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   2: 72349.119 ops/s
[info]                  ·gc.alloc.rate:                                  3197.625 MB/sec
[info]                  ·gc.alloc.rate.norm:                             69576.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.019 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.420 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3062.773 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       66641.806 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 71402.542 ops/s
[info]                  ·gc.alloc.rate:                                  3157.104 MB/sec
[info]                  ·gc.alloc.rate.norm:                             69576.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.016 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.349 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3064.102 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       67526.444 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   4: 73556.644 ops/s
[info]                  ·gc.alloc.rate:                                  3252.216 MB/sec
[info]                  ·gc.alloc.rate.norm:                             69576.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.015 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.330 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3404.441 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       72832.625 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 73756.529 ops/s
[info]                  ·gc.alloc.rate:                                  3260.079 MB/sec
[info]                  ·gc.alloc.rate.norm:                             69576.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.196 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.036 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       65370.761 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson":
[info]   72567.869 ±(99.9%) 4050.432 ops/s [Average]
[info]   (min, avg, max) = (71402.542, 72567.869, 73756.529), stdev = 1051.884
[info]   CI (99.9%): [68517.437, 76618.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3207.872 ±(99.9%) 178.932 MB/sec [Average]
[info]   (min, avg, max) = (3157.104, 3207.872, 3260.079), stdev = 46.468
[info]   CI (99.9%): [3028.939, 3386.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   69576.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (69576.006, 69576.006, 69576.006), stdev = 0.001
[info]   CI (99.9%): [69576.005, 69576.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.016 ±(99.9%) 0.016 MB/sec [Average]
[info]   (min, avg, max) = (0.009, 0.016, 0.019), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.344 ±(99.9%) 0.357 B/op [Average]
[info]   (min, avg, max) = (0.196, 0.344, 0.425), stdev = 0.093
[info]   CI (99.9%): [≈ 0, 0.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   3199.512 ±(99.9%) 718.193 MB/sec [Average]
[info]   (min, avg, max) = (3062.773, 3199.512, 3404.441), stdev = 186.513
[info]   CI (99.9%): [2481.319, 3917.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   69402.235 ±(99.9%) 15710.944 B/op [Average]
[info]   (min, avg, max) = (65370.761, 69402.235, 74639.541), stdev = 4080.082
[info]   CI (99.9%): [53691.291, 85113.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.count":
[info]   47.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.400, 10.000), stdev = 0.548
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.600, 8.000), stdev = 0.548
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce
[info] # Run progress: 54.32% complete, ETA 00:36:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 201158.967 ops/s
[info] # Warmup Iteration   2: 257350.681 ops/s
[info] # Warmup Iteration   3: 260399.555 ops/s
[info] Iteration   1: 257779.095 ops/s
[info]                  ·gc.alloc.rate:                                  1547.651 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9448.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.055 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.338 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1688.803 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10309.702 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                20.335 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        14.000 ms
[info] Iteration   2: 269489.104 ops/s
[info]                  ·gc.alloc.rate:                                  1618.044 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9448.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.061 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.354 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.317 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9940.086 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 271531.404 ops/s
[info]                  ·gc.alloc.rate:                                  1629.853 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9448.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.841 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9865.307 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 272187.740 ops/s
[info]                  ·gc.alloc.rate:                                  1633.682 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9448.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.026 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.378 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7873.199 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 272926.245 ops/s
[info]                  ·gc.alloc.rate:                                  1638.635 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9448.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.026 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.211 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9814.567 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce":
[info]   268782.717 ±(99.9%) 24193.030 ops/s [Average]
[info]   (min, avg, max) = (257779.095, 268782.717, 272926.245), stdev = 6282.853
[info]   CI (99.9%): [244589.687, 292975.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1613.573 ±(99.9%) 144.889 MB/sec [Average]
[info]   (min, avg, max) = (1547.651, 1613.573, 1638.635), stdev = 37.627
[info]   CI (99.9%): [1468.684, 1758.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   9448.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9448.001, 9448.002, 9448.002), stdev = 0.001
[info]   CI (99.9%): [9448.001, 9448.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.025 ±(99.9%) 0.115 MB/sec [Average]
[info]   (min, avg, max) = (0.002, 0.025, 0.061), stdev = 0.030
[info]   CI (99.9%): [≈ 0, 0.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.151 ±(99.9%) 0.687 B/op [Average]
[info]   (min, avg, max) = (0.010, 0.151, 0.354), stdev = 0.178
[info]   CI (99.9%): [≈ 0, 0.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1631.310 ±(99.9%) 581.473 MB/sec [Average]
[info]   (min, avg, max) = (1361.378, 1631.310, 1702.317), stdev = 151.007
[info]   CI (99.9%): [1049.837, 2212.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   9560.572 ±(99.9%) 3708.349 B/op [Average]
[info]   (min, avg, max) = (7873.199, 9560.572, 10309.702), stdev = 963.046
[info]   CI (99.9%): [5852.224, 13268.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   4.067 ±(99.9%) 35.018 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.067, 20.335), stdev = 9.094
[info]   CI (99.9%): [≈ 0, 39.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 14.000), stdev = 4.604
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava
[info] # Run progress: 54.59% complete, ETA 00:35:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 64890.925 ops/s
[info] # Warmup Iteration   2: 1167680.963 ops/s
[info] # Warmup Iteration   3: 1177553.395 ops/s
[info] Iteration   1: 1200004.977 ops/s
[info]                  ·gc.alloc.rate:            493.966 MB/sec
[info]                  ·gc.alloc.rate.norm:       648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.668 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 437.717 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 1208790.106 ops/s
[info]                  ·gc.alloc.rate:            497.582 MB/sec
[info]                  ·gc.alloc.rate.norm:       648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.344 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 869.082 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 1213967.559 ops/s
[info]                  ·gc.alloc.rate:            499.840 MB/sec
[info]                  ·gc.alloc.rate.norm:       648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.752 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 432.681 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 1187318.982 ops/s
[info]                  ·gc.alloc.rate:            488.800 MB/sec
[info]                  ·gc.alloc.rate.norm:       648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.705 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 442.391 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 1201906.838 ops/s
[info]                  ·gc.alloc.rate:            494.844 MB/sec
[info]                  ·gc.alloc.rate.norm:       648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.446 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 874.024 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava":
[info]   1202397.692 ±(99.9%) 38892.375 ops/s [Average]
[info]   (min, avg, max) = (1187318.982, 1202397.692, 1213967.559), stdev = 10100.226
[info]   CI (99.9%): [1163505.317, 1241290.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   495.006 ±(99.9%) 16.065 MB/sec [Average]
[info]   (min, avg, max) = (488.800, 495.006, 499.840), stdev = 4.172
[info]   CI (99.9%): [478.941, 511.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   648.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (648.000, 648.000, 648.000), stdev = 0.001
[info]   CI (99.9%): [648.000, 648.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   467.183 ±(99.9%) 703.774 MB/sec [Average]
[info]   (min, avg, max) = (333.668, 467.183, 667.446), stdev = 182.768
[info]   CI (99.9%): [≈ 0, 1170.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   611.179 ±(99.9%) 915.372 B/op [Average]
[info]   (min, avg, max) = (432.681, 611.179, 874.024), stdev = 237.719
[info]   CI (99.9%): [≈ 0, 1526.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.600, 10.000), stdev = 2.408
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala
[info] # Run progress: 54.86% complete, ETA 00:35:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 818015.136 ops/s
[info] # Warmup Iteration   2: 1213140.719 ops/s
[info] # Warmup Iteration   3: 1181372.239 ops/s
[info] Iteration   1: 1183676.787 ops/s
[info]                  ·gc.alloc.rate:            776.341 MB/sec
[info]                  ·gc.alloc.rate.norm:       1032.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.937 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 894.545 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 1185546.663 ops/s
[info]                  ·gc.alloc.rate:            777.347 MB/sec
[info]                  ·gc.alloc.rate.norm:       1032.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.768 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 893.161 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 1225838.007 ops/s
[info]                  ·gc.alloc.rate:                   803.646 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.339 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1294.856 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.855 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   4: 1231976.566 ops/s
[info]                  ·gc.alloc.rate:                   807.687 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.699 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        859.523 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 5.106 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 1239876.593 ops/s
[info]                  ·gc.alloc.rate:                                  812.897 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1032.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.155 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.197 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.063 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1296.274 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala":
[info]   1213382.923 ±(99.9%) 102965.656 ops/s [Average]
[info]   (min, avg, max) = (1183676.787, 1213382.923, 1239876.593), stdev = 26739.854
[info]   CI (99.9%): [1110417.267, 1316348.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   795.584 ±(99.9%) 67.086 MB/sec [Average]
[info]   (min, avg, max) = (776.341, 795.584, 812.897), stdev = 17.422
[info]   CI (99.9%): [728.498, 862.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1032.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1032.000, 1032.000, 1032.000), stdev = 0.001
[info]   CI (99.9%): [1032.000, 1032.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.031 ±(99.9%) 0.267 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.031, 0.155), stdev = 0.069
[info]   CI (99.9%): [≈ 0, 0.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.039 ±(99.9%) 0.338 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.039, 0.197), stdev = 0.088
[info]   CI (99.9%): [≈ 0, 0.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   809.561 ±(99.9%) 721.303 MB/sec [Average]
[info]   (min, avg, max) = (672.699, 809.561, 1021.063), stdev = 187.320
[info]   CI (99.9%): [88.258, 1530.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1047.672 ±(99.9%) 873.054 B/op [Average]
[info]   (min, avg, max) = (859.523, 1047.672, 1296.274), stdev = 226.729
[info]   CI (99.9%): [174.618, 1920.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.192 ±(99.9%) 8.545 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.192, 5.106), stdev = 2.219
[info]   CI (99.9%): [≈ 0, 9.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.800, 12.000), stdev = 3.194
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala
[info] # Run progress: 55.14% complete, ETA 00:35:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1320090.324 ops/s
[info] # Warmup Iteration   2: 1530832.954 ops/s
[info] # Warmup Iteration   3: 1467083.852 ops/s
[info] Iteration   1: 1534374.720 ops/s
[info]                  ·gc.alloc.rate:            631.723 MB/sec
[info]                  ·gc.alloc.rate.norm:       648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.427 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 690.779 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 1529334.983 ops/s
[info]                  ·gc.alloc.rate:                   629.709 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.846 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        692.390 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.686 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 1538479.897 ops/s
[info]                  ·gc.alloc.rate:            633.319 MB/sec
[info]                  ·gc.alloc.rate.norm:       648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.998 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 344.810 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   4: 1532919.975 ops/s
[info]                  ·gc.alloc.rate:                   631.090 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.718 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        690.744 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.684 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 1530464.313 ops/s
[info]                  ·gc.alloc.rate:            630.044 MB/sec
[info]                  ·gc.alloc.rate.norm:       648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.371 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 692.562 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala":
[info]   1533114.778 ±(99.9%) 13846.494 ops/s [Average]
[info]   (min, avg, max) = (1529334.983, 1533114.778, 1538479.897), stdev = 3595.890
[info]   CI (99.9%): [1519268.284, 1546961.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   631.177 ±(99.9%) 5.558 MB/sec [Average]
[info]   (min, avg, max) = (629.709, 631.177, 633.319), stdev = 1.443
[info]   CI (99.9%): [625.620, 636.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   648.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (648.000, 648.000, 648.000), stdev = 0.001
[info]   CI (99.9%): [648.000, 648.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   605.872 ±(99.9%) 578.773 MB/sec [Average]
[info]   (min, avg, max) = (336.998, 605.872, 673.427), stdev = 150.305
[info]   CI (99.9%): [27.100, 1184.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   622.257 ±(99.9%) 597.234 B/op [Average]
[info]   (min, avg, max) = (344.810, 622.257, 692.562), stdev = 155.100
[info]   CI (99.9%): [25.023, 1219.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.274 ±(99.9%) 1.444 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.274, 0.686), stdev = 0.375
[info]   CI (99.9%): [≈ 0, 1.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.200, 7.000), stdev = 1.924
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 55.41% complete, ETA 00:35:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1502662.126 ops/s
[info] # Warmup Iteration   2: 1647567.609 ops/s
[info] # Warmup Iteration   3: 1657226.730 ops/s
[info] Iteration   1: 1656269.694 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1656520.139 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1654797.139 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1590595.369 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1656964.411 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc":
[info]   1643029.351 ±(99.9%) 112911.512 ops/s [Average]
[info]   (min, avg, max) = (1590595.369, 1643029.351, 1656964.411), stdev = 29322.761
[info]   CI (99.9%): [1530117.839, 1755940.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson
[info] # Run progress: 55.68% complete, ETA 00:35:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22234.576 ops/s
[info] # Warmup Iteration   2: 34786.448 ops/s
[info] # Warmup Iteration   3: 35181.221 ops/s
[info] Iteration   1: 34165.346 ops/s
[info]                  ·gc.alloc.rate:                                  1671.236 MB/sec
[info]                  ·gc.alloc.rate.norm:                             76992.618 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.213 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 9.822 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1689.863 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       77850.731 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                184.117 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        14.000 ms
[info] Iteration   2: 34678.820 ops/s
[info]                  ·gc.alloc.rate:                                  1696.013 MB/sec
[info]                  ·gc.alloc.rate.norm:                             76984.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.206 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.778 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       77245.673 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 35918.402 ops/s
[info]                  ·gc.alloc.rate:                                  1756.727 MB/sec
[info]                  ·gc.alloc.rate.norm:                             76984.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.037 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.852 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       74579.286 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 35838.628 ops/s
[info]                  ·gc.alloc.rate:                                  1753.301 MB/sec
[info]                  ·gc.alloc.rate.norm:                             76984.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.115 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.278 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       74743.658 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 35959.431 ops/s
[info]                  ·gc.alloc.rate:                                  1758.980 MB/sec
[info]                  ·gc.alloc.rate.norm:                             76984.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.192 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.951 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       74488.050 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson":
[info]   35312.125 ±(99.9%) 3210.130 ops/s [Average]
[info]   (min, avg, max) = (34165.346, 35312.125, 35959.431), stdev = 833.661
[info]   CI (99.9%): [32101.995, 38522.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1727.251 ±(99.9%) 157.213 MB/sec [Average]
[info]   (min, avg, max) = (1671.236, 1727.251, 1758.980), stdev = 40.828
[info]   CI (99.9%): [1570.038, 1884.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   76985.733 ±(99.9%) 14.821 B/op [Average]
[info]   (min, avg, max) = (76984.011, 76985.733, 76992.618), stdev = 3.849
[info]   CI (99.9%): [76970.912, 77000.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.045 ±(99.9%) 0.362 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.045, 0.213), stdev = 0.094
[info]   CI (99.9%): [≈ 0, 0.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.074 ±(99.9%) 16.679 B/op [Average]
[info]   (min, avg, max) = (0.037, 2.074, 9.822), stdev = 4.331
[info]   CI (99.9%): [≈ 0, 18.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1699.544 ±(99.9%) 20.853 MB/sec [Average]
[info]   (min, avg, max) = (1689.863, 1699.544, 1702.278), stdev = 5.415
[info]   CI (99.9%): [1678.691, 1720.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   75781.479 ±(99.9%) 6274.591 B/op [Average]
[info]   (min, avg, max) = (74488.050, 75781.479, 77850.731), stdev = 1629.491
[info]   CI (99.9%): [69506.889, 82056.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   36.823 ±(99.9%) 317.060 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 36.823, 184.117), stdev = 82.340
[info]   CI (99.9%): [≈ 0, 353.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 14.000), stdev = 4.472
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce
[info] # Run progress: 55.95% complete, ETA 00:34:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 34025.926 ops/s
[info] # Warmup Iteration   2: 43971.751 ops/s
[info] # Warmup Iteration   3: 45548.427 ops/s
[info] Iteration   1: 46410.231 ops/s
[info]                  ·gc.alloc.rate:            925.929 MB/sec
[info]                  ·gc.alloc.rate.norm:       31400.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.213 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 34292.142 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 46788.187 ops/s
[info]                  ·gc.alloc.rate:            933.720 MB/sec
[info]                  ·gc.alloc.rate.norm:       31400.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.294 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 22675.789 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 46191.598 ops/s
[info]                  ·gc.alloc.rate:            921.423 MB/sec
[info]                  ·gc.alloc.rate.norm:       31400.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.040 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 34453.957 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 45333.431 ops/s
[info]                  ·gc.alloc.rate:                                  904.364 MB/sec
[info]                  ·gc.alloc.rate.norm:                             31400.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.059 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.065 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.783 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       35337.983 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                115.635 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 46980.068 ops/s
[info]                  ·gc.alloc.rate:            937.230 MB/sec
[info]                  ·gc.alloc.rate.norm:       31400.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.130 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 34210.888 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce":
[info]   46340.703 ±(99.9%) 2473.640 ops/s [Average]
[info]   (min, avg, max) = (45333.431, 46340.703, 46980.068), stdev = 642.396
[info]   CI (99.9%): [43867.063, 48814.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate":
[info]   924.533 ±(99.9%) 49.614 MB/sec [Average]
[info]   (min, avg, max) = (904.364, 924.533, 937.230), stdev = 12.885
[info]   CI (99.9%): [874.920, 974.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   31400.009 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (31400.009, 31400.009, 31400.010), stdev = 0.001
[info]   CI (99.9%): [31400.008, 31400.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.012 ±(99.9%) 0.102 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.059), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.413 ±(99.9%) 3.556 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.413, 2.065), stdev = 0.924
[info]   CI (99.9%): [≈ 0, 3.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   947.092 ±(99.9%) 587.455 MB/sec [Average]
[info]   (min, avg, max) = (674.294, 947.092, 1021.130), stdev = 152.560
[info]   CI (99.9%): [359.637, 1534.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   32194.152 ±(99.9%) 20562.079 B/op [Average]
[info]   (min, avg, max) = (22675.789, 32194.152, 35337.983), stdev = 5339.907
[info]   CI (99.9%): [11632.073, 52756.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   23.127 ±(99.9%) 199.130 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 23.127, 115.635), stdev = 51.713
[info]   CI (99.9%): [≈ 0, 222.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 9.000), stdev = 2.608
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala
[info] # Run progress: 56.22% complete, ETA 00:34:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 47984.577 ops/s
[info] # Warmup Iteration   2: 79465.061 ops/s
[info] # Warmup Iteration   3: 80030.372 ops/s
[info] Iteration   1: 79949.853 ops/s
[info]                  ·gc.alloc.rate:            842.676 MB/sec
[info]                  ·gc.alloc.rate.norm:       16592.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.011 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19867.093 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 79636.971 ops/s
[info]                  ·gc.alloc.rate:            839.462 MB/sec
[info]                  ·gc.alloc.rate.norm:       16592.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.717 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13296.277 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 78405.557 ops/s
[info]                  ·gc.alloc.rate:            826.439 MB/sec
[info]                  ·gc.alloc.rate.norm:       16592.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.659 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13504.651 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 79428.189 ops/s
[info]                  ·gc.alloc.rate:                                  837.272 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16592.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.106 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.107 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.099 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       20076.335 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                79.197 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   5: 76689.192 ops/s
[info]                  ·gc.alloc.rate:                                  808.392 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16592.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.057 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.160 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.718 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       13971.535 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala":
[info]   78821.952 ±(99.9%) 5103.370 ops/s [Average]
[info]   (min, avg, max) = (76689.192, 78821.952, 79949.853), stdev = 1325.329
[info]   CI (99.9%): [73718.582, 83925.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   830.848 ±(99.9%) 53.740 MB/sec [Average]
[info]   (min, avg, max) = (808.392, 830.848, 842.676), stdev = 13.956
[info]   CI (99.9%): [777.109, 884.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   16592.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16592.005, 16592.005, 16592.006), stdev = 0.001
[info]   CI (99.9%): [16592.005, 16592.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.033 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.106), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.653 ±(99.9%) 3.678 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.653, 2.107), stdev = 0.955
[info]   CI (99.9%): [≈ 0, 4.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   809.641 ±(99.9%) 708.134 MB/sec [Average]
[info]   (min, avg, max) = (672.659, 809.641, 1013.099), stdev = 183.900
[info]   CI (99.9%): [101.507, 1517.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   16143.178 ±(99.9%) 13493.742 B/op [Average]
[info]   (min, avg, max) = (13296.277, 16143.178, 20076.335), stdev = 3504.282
[info]   CI (99.9%): [2649.436, 29636.920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   15.839 ±(99.9%) 136.381 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15.839, 79.197), stdev = 35.418
[info]   CI (99.9%): [≈ 0, 152.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.200, 12.000), stdev = 3.768
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala
[info] # Run progress: 56.49% complete, ETA 00:34:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 237612.067 ops/s
[info] # Warmup Iteration   2: 256628.350 ops/s
[info] # Warmup Iteration   3: 251794.881 ops/s
[info] Iteration   1: 261977.154 ops/s
[info]                  ·gc.alloc.rate:            852.109 MB/sec
[info]                  ·gc.alloc.rate.norm:       5120.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.989 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4049.746 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 260665.528 ops/s
[info]                  ·gc.alloc.rate:            847.797 MB/sec
[info]                  ·gc.alloc.rate.norm:       5120.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.984 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6105.515 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 262158.239 ops/s
[info]                  ·gc.alloc.rate:            852.743 MB/sec
[info]                  ·gc.alloc.rate.norm:       5120.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.071 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4047.228 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 261343.161 ops/s
[info]                  ·gc.alloc.rate:                                  850.136 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5120.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.054 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.326 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1014.504 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6109.923 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                20.059 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 262708.488 ops/s
[info]                  ·gc.alloc.rate:                                  854.822 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5120.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.027 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.162 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.971 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4078.711 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala":
[info]   261770.514 ±(99.9%) 3029.830 ops/s [Average]
[info]   (min, avg, max) = (260665.528, 261770.514, 262708.488), stdev = 786.837
[info]   CI (99.9%): [258740.684, 264800.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   851.521 ±(99.9%) 10.282 MB/sec [Average]
[info]   (min, avg, max) = (847.797, 851.521, 854.822), stdev = 2.670
[info]   CI (99.9%): [841.239, 861.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5120.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5120.002, 5120.002, 5120.002), stdev = 0.001
[info]   CI (99.9%): [5120.001, 5120.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.016 ±(99.9%) 0.093 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.054), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.098 ±(99.9%) 0.561 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.098, 0.326), stdev = 0.146
[info]   CI (99.9%): [≈ 0, 0.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   810.904 ±(99.9%) 709.597 MB/sec [Average]
[info]   (min, avg, max) = (673.989, 810.904, 1014.504), stdev = 184.280
[info]   CI (99.9%): [101.307, 1520.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   4878.225 ±(99.9%) 4322.114 B/op [Average]
[info]   (min, avg, max) = (4047.228, 4878.225, 6109.923), stdev = 1122.439
[info]   CI (99.9%): [556.111, 9200.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   4.012 ±(99.9%) 34.543 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.012, 20.059), stdev = 8.971
[info]   CI (99.9%): [≈ 0, 38.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.800, 8.000), stdev = 2.280
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson
[info] # Run progress: 56.76% complete, ETA 00:34:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12811.854 ops/s
[info] # Warmup Iteration   2: 23429.459 ops/s
[info] # Warmup Iteration   3: 23515.071 ops/s
[info] Iteration   1: 23212.836 ops/s
[info]                  ·gc.alloc.rate:            1090.917 MB/sec
[info]                  ·gc.alloc.rate.norm:       73960.055 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.255 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 68423.683 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 23214.812 ops/s
[info]                  ·gc.alloc.rate:            1090.765 MB/sec
[info]                  ·gc.alloc.rate.norm:       73960.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.028 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 68417.789 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 23353.815 ops/s
[info]                  ·gc.alloc.rate:                                  1097.354 MB/sec
[info]                  ·gc.alloc.rate.norm:                             73960.019 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.136 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 9.192 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1357.491 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       91492.824 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                269.361 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 22657.266 ops/s
[info]                  ·gc.alloc.rate:                                  1064.589 MB/sec
[info]                  ·gc.alloc.rate.norm:                             73960.018 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.007 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       70932.266 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 22807.681 ops/s
[info]                  ·gc.alloc.rate:            1071.607 MB/sec
[info]                  ·gc.alloc.rate.norm:       73960.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.980 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 70465.852 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson":
[info]   23049.282 ±(99.9%) 1153.489 ops/s [Average]
[info]   (min, avg, max) = (22657.266, 23049.282, 23353.815), stdev = 299.557
[info]   CI (99.9%): [21895.793, 24202.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1083.046 ±(99.9%) 54.381 MB/sec [Average]
[info]   (min, avg, max) = (1064.589, 1083.046, 1097.354), stdev = 14.122
[info]   CI (99.9%): [1028.666, 1137.427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   73960.026 ±(99.9%) 0.062 B/op [Average]
[info]   (min, avg, max) = (73960.018, 73960.026, 73960.055), stdev = 0.016
[info]   CI (99.9%): [73959.965, 73960.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.027 ±(99.9%) 0.235 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.136), stdev = 0.061
[info]   CI (99.9%): [≈ 0, 0.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.841 ±(99.9%) 15.824 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.841, 9.192), stdev = 4.110
[info]   CI (99.9%): [≈ 0, 17.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1083.552 ±(99.9%) 590.115 MB/sec [Average]
[info]   (min, avg, max) = (1009.028, 1083.552, 1357.491), stdev = 153.251
[info]   CI (99.9%): [493.437, 1673.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   73946.483 ±(99.9%) 38028.991 B/op [Average]
[info]   (min, avg, max) = (68417.789, 73946.483, 91492.824), stdev = 9876.008
[info]   CI (99.9%): [35917.491, 111975.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   53.872 ±(99.9%) 463.855 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 53.872, 269.361), stdev = 120.462
[info]   CI (99.9%): [≈ 0, 517.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.400, 13.000), stdev = 5.030
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce
[info] # Run progress: 57.03% complete, ETA 00:34:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 45637.491 ops/s
[info] # Warmup Iteration   2: 58152.207 ops/s
[info] # Warmup Iteration   3: 58271.980 ops/s
[info] Iteration   1: 57900.549 ops/s
[info]                  ·gc.alloc.rate:            859.111 MB/sec
[info]                  ·gc.alloc.rate.norm:       23352.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.131 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18323.961 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 58018.051 ops/s
[info]                  ·gc.alloc.rate:            860.652 MB/sec
[info]                  ·gc.alloc.rate.norm:       23352.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.968 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 27430.523 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 58419.980 ops/s
[info]                  ·gc.alloc.rate:            866.673 MB/sec
[info]                  ·gc.alloc.rate.norm:       23352.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.990 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18160.268 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 58405.854 ops/s
[info]                  ·gc.alloc.rate:                                  866.546 MB/sec
[info]                  ·gc.alloc.rate.norm:                             23352.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.068 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.820 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1014.479 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       27338.547 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                89.752 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 58707.885 ops/s
[info]                  ·gc.alloc.rate:                                  870.930 MB/sec
[info]                  ·gc.alloc.rate.norm:                             23352.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.032 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.850 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.079 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       27377.917 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce":
[info]   58290.464 ±(99.9%) 1263.357 ops/s [Average]
[info]   (min, avg, max) = (57900.549, 58290.464, 58707.885), stdev = 328.090
[info]   CI (99.9%): [57027.107, 59553.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate":
[info]   864.782 ±(99.9%) 18.637 MB/sec [Average]
[info]   (min, avg, max) = (859.111, 864.782, 870.930), stdev = 4.840
[info]   CI (99.9%): [846.146, 883.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   23352.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (23352.007, 23352.007, 23352.007), stdev = 0.001
[info]   CI (99.9%): [23352.006, 23352.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.020 ±(99.9%) 0.115 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.068), stdev = 0.030
[info]   CI (99.9%): [≈ 0, 0.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.534 ±(99.9%) 3.110 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.534, 1.820), stdev = 0.808
[info]   CI (99.9%): [≈ 0, 3.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   878.929 ±(99.9%) 720.279 MB/sec [Average]
[info]   (min, avg, max) = (673.990, 878.929, 1021.079), stdev = 187.054
[info]   CI (99.9%): [158.651, 1599.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   23726.243 ±(99.9%) 19279.183 B/op [Average]
[info]   (min, avg, max) = (18160.268, 23726.243, 27430.523), stdev = 5006.743
[info]   CI (99.9%): [4447.060, 43005.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   17.950 ±(99.9%) 154.559 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17.950, 89.752), stdev = 40.138
[info]   CI (99.9%): [≈ 0, 172.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 10.000), stdev = 2.510
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala
[info] # Run progress: 57.30% complete, ETA 00:33:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 54939.028 ops/s
[info] # Warmup Iteration   2: 86996.528 ops/s
[info] # Warmup Iteration   3: 88508.194 ops/s
[info] Iteration   1: 86944.568 ops/s
[info]                  ·gc.alloc.rate:                   1191.664 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1342.807 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        24294.542 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.665 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 12.033 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   2: 88775.403 ops/s
[info]                  ·gc.alloc.rate:                                  1215.929 MB/sec
[info]                  ·gc.alloc.rate.norm:                             21560.027 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.043 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.769 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1012.356 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       17950.417 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                82.666 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   3: 88247.310 ops/s
[info]                  ·gc.alloc.rate:                                  1208.662 MB/sec
[info]                  ·gc.alloc.rate.norm:                             21560.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.115 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.044 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.298 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       24282.713 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 89864.342 ops/s
[info]                  ·gc.alloc.rate:            1230.868 MB/sec
[info]                  ·gc.alloc.rate.norm:       21559.982 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.027 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 17884.392 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   5: 90124.403 ops/s
[info]                  ·gc.alloc.rate:            1234.417 MB/sec
[info]                  ·gc.alloc.rate.norm:       21560.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.370 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23777.339 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala":
[info]   88791.205 ±(99.9%) 4959.405 ops/s [Average]
[info]   (min, avg, max) = (86944.568, 88791.205, 90124.403), stdev = 1287.942
[info]   CI (99.9%): [83831.800, 93750.611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1216.308 ±(99.9%) 66.857 MB/sec [Average]
[info]   (min, avg, max) = (1191.664, 1216.308, 1234.417), stdev = 17.363
[info]   CI (99.9%): [1149.451, 1283.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   21560.005 ±(99.9%) 0.061 B/op [Average]
[info]   (min, avg, max) = (21559.982, 21560.005, 21560.027), stdev = 0.016
[info]   CI (99.9%): [21559.944, 21560.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.032 ±(99.9%) 0.193 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.032, 0.115), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.563 ±(99.9%) 3.437 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.563, 2.044), stdev = 0.893
[info]   CI (99.9%): [≈ 0, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1219.772 ±(99.9%) 714.547 MB/sec [Average]
[info]   (min, avg, max) = (1012.356, 1219.772, 1361.370), stdev = 185.566
[info]   CI (99.9%): [505.225, 1934.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   21637.880 ±(99.9%) 13102.991 B/op [Average]
[info]   (min, avg, max) = (17884.392, 21637.880, 24294.542), stdev = 3402.805
[info]   CI (99.9%): [8534.890, 34740.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.065 ±(99.9%) 7.821 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.065, 4.662), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   18.940 ±(99.9%) 138.636 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18.940, 82.666), stdev = 36.003
[info]   CI (99.9%): [≈ 0, 157.576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.200, 16.000), stdev = 5.762
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala
[info] # Run progress: 57.57% complete, ETA 00:33:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 258904.701 ops/s
[info] # Warmup Iteration   2: 285078.722 ops/s
[info] # Warmup Iteration   3: 287977.178 ops/s
[info] Iteration   1: 279998.694 ops/s
[info]                  ·gc.alloc.rate:                   892.166 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.623 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5676.378 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.744 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 289307.147 ops/s
[info]                  ·gc.alloc.rate:                   921.967 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.115 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5490.135 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.624 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 285539.342 ops/s
[info]                  ·gc.alloc.rate:                   909.834 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.644 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5566.263 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 22.030 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 289372.358 ops/s
[info]                  ·gc.alloc.rate:                                  922.144 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5016.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.062 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.336 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.693 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3702.630 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 288184.996 ops/s
[info]                  ·gc.alloc.rate:                                  918.382 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5016.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.019 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.103 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.051 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5576.758 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala":
[info]   286480.507 ±(99.9%) 15179.264 ops/s [Average]
[info]   (min, avg, max) = (279998.694, 286480.507, 289372.358), stdev = 3942.007
[info]   CI (99.9%): [271301.243, 301659.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   912.899 ±(99.9%) 48.593 MB/sec [Average]
[info]   (min, avg, max) = (892.166, 912.899, 922.144), stdev = 12.620
[info]   CI (99.9%): [864.305, 961.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5016.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5016.001, 5016.001, 5016.002), stdev = 0.001
[info]   CI (99.9%): [5016.001, 5016.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.016 ±(99.9%) 0.103 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.088 ±(99.9%) 0.561 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.088, 0.336), stdev = 0.146
[info]   CI (99.9%): [≈ 0, 0.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   946.025 ±(99.9%) 571.475 MB/sec [Average]
[info]   (min, avg, max) = (680.693, 946.025, 1021.051), stdev = 148.410
[info]   CI (99.9%): [374.550, 1517.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   5202.433 ±(99.9%) 3238.491 B/op [Average]
[info]   (min, avg, max) = (3702.630, 5202.433, 5676.378), stdev = 841.026
[info]   CI (99.9%): [1963.942, 8440.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 6.437 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 3.996), stdev = 1.672
[info]   CI (99.9%): [≈ 0, 7.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   5.880 ±(99.9%) 35.482 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.880, 22.030), stdev = 9.214
[info]   CI (99.9%): [≈ 0, 41.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.400, 10.000), stdev = 4.037
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 57.84% complete, ETA 00:33:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 297821.128 ops/s
[info] # Warmup Iteration   2: 323158.662 ops/s
[info] # Warmup Iteration   3: 321712.069 ops/s
[info] Iteration   1: 323305.675 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 314259.869 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 322612.634 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 323073.727 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 315239.080 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc":
[info]   319698.197 ±(99.9%) 17472.887 ops/s [Average]
[info]   (min, avg, max) = (314259.869, 319698.197, 323305.675), stdev = 4537.653
[info]   CI (99.9%): [302225.310, 337171.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson
[info] # Run progress: 58.11% complete, ETA 00:33:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 56914.200 ops/s
[info] # Warmup Iteration   2: 75947.080 ops/s
[info] # Warmup Iteration   3: 77035.757 ops/s
[info] Iteration   1: 77841.953 ops/s
[info]                  ·gc.alloc.rate:            1153.745 MB/sec
[info]                  ·gc.alloc.rate.norm:       23328.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.143 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 20404.242 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 76315.156 ops/s
[info]                  ·gc.alloc.rate:                   1130.760 MB/sec
[info]                  ·gc.alloc.rate.norm:              23328.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.118 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        27750.282 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.995 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 82.427 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   3: 75594.888 ops/s
[info]                  ·gc.alloc.rate:                                  1120.416 MB/sec
[info]                  ·gc.alloc.rate.norm:                             23328.032 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.129 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.691 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.103 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       21260.260 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 77422.333 ops/s
[info]                  ·gc.alloc.rate:            1147.341 MB/sec
[info]                  ·gc.alloc.rate.norm:       23327.979 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.987 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 20758.920 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 77988.084 ops/s
[info]                  ·gc.alloc.rate:                                  1155.773 MB/sec
[info]                  ·gc.alloc.rate.norm:                             23328.031 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.110 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.366 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       27477.716 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson":
[info]   77032.483 ±(99.9%) 3993.192 ops/s [Average]
[info]   (min, avg, max) = (75594.888, 77032.483, 77988.084), stdev = 1037.019
[info]   CI (99.9%): [73039.291, 81025.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1141.607 ±(99.9%) 59.267 MB/sec [Average]
[info]   (min, avg, max) = (1120.416, 1141.607, 1155.773), stdev = 15.391
[info]   CI (99.9%): [1082.340, 1200.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   23328.011 ±(99.9%) 0.084 B/op [Average]
[info]   (min, avg, max) = (23327.979, 23328.011, 23328.032), stdev = 0.022
[info]   CI (99.9%): [23327.927, 23328.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.027 ±(99.9%) 0.220 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.129), stdev = 0.057
[info]   CI (99.9%): [≈ 0, 0.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.560 ±(99.9%) 4.590 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.560, 2.691), stdev = 1.192
[info]   CI (99.9%): [≈ 0, 5.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1151.544 ±(99.9%) 709.591 MB/sec [Average]
[info]   (min, avg, max) = (1009.143, 1151.544, 1361.366), stdev = 184.279
[info]   CI (99.9%): [441.953, 1861.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   23530.284 ±(99.9%) 14407.303 B/op [Average]
[info]   (min, avg, max) = (20404.242, 23530.284, 27750.282), stdev = 3741.531
[info]   CI (99.9%): [9122.982, 37937.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.880 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.995), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   16.485 ±(99.9%) 141.944 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16.485, 82.427), stdev = 36.862
[info]   CI (99.9%): [≈ 0, 158.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.000, 15.000), stdev = 5.657
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce
[info] # Run progress: 58.38% complete, ETA 00:32:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 45411.090 ops/s
[info] # Warmup Iteration   2: 69203.224 ops/s
[info] # Warmup Iteration   3: 70571.517 ops/s
[info] Iteration   1: 70764.118 ops/s
[info]                  ·gc.alloc.rate:            1434.052 MB/sec
[info]                  ·gc.alloc.rate.norm:       31904.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.194 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 29927.144 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   2: 69692.622 ops/s
[info]                  ·gc.alloc.rate:                                  1412.582 MB/sec
[info]                  ·gc.alloc.rate.norm:                             31904.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.136 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.068 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1357.422 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       30658.182 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                90.260 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 69624.499 ops/s
[info]                  ·gc.alloc.rate:                                  1411.105 MB/sec
[info]                  ·gc.alloc.rate.norm:                             31904.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.198 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.342 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       30778.909 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 71422.910 ops/s
[info]                  ·gc.alloc.rate:                                  1447.760 MB/sec
[info]                  ·gc.alloc.rate.norm:                             31904.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.116 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.889 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       37504.188 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 71475.437 ops/s
[info]                  ·gc.alloc.rate:                                  1448.911 MB/sec
[info]                  ·gc.alloc.rate.norm:                             31904.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.058 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.583 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       29981.107 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce":
[info]   70595.917 ±(99.9%) 3468.444 ops/s [Average]
[info]   (min, avg, max) = (69624.499, 70595.917, 71475.437), stdev = 900.744
[info]   CI (99.9%): [67127.473, 74064.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate":
[info]   1430.882 ±(99.9%) 70.636 MB/sec [Average]
[info]   (min, avg, max) = (1411.105, 1430.882, 1448.911), stdev = 18.344
[info]   CI (99.9%): [1360.246, 1501.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   31904.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (31904.006, 31904.006, 31904.006), stdev = 0.001
[info]   CI (99.9%): [31904.005, 31904.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.030 ±(99.9%) 0.227 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.136), stdev = 0.059
[info]   CI (99.9%): [≈ 0, 0.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.688 ±(99.9%) 5.131 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.688, 3.068), stdev = 1.333
[info]   CI (99.9%): [≈ 0, 5.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1425.486 ±(99.9%) 595.532 MB/sec [Average]
[info]   (min, avg, max) = (1345.194, 1425.486, 1701.889), stdev = 154.658
[info]   CI (99.9%): [829.955, 2021.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   31769.906 ±(99.9%) 12432.210 B/op [Average]
[info]   (min, avg, max) = (29927.144, 31769.906, 37504.188), stdev = 3228.606
[info]   CI (99.9%): [19337.696, 44202.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   18.052 ±(99.9%) 155.432 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18.052, 90.260), stdev = 40.365
[info]   CI (99.9%): [≈ 0, 173.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 14.000), stdev = 4.637
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala
[info] # Run progress: 58.65% complete, ETA 00:32:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 40118.058 ops/s
[info] # Warmup Iteration   2: 77271.391 ops/s
[info] # Warmup Iteration   3: 75423.446 ops/s
[info] Iteration   1: 75069.419 ops/s
[info]                  ·gc.alloc.rate:            865.196 MB/sec
[info]                  ·gc.alloc.rate.norm:       18144.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1006.952 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 21116.768 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 75475.776 ops/s
[info]                  ·gc.alloc.rate:            869.947 MB/sec
[info]                  ·gc.alloc.rate.norm:       18144.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.357 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14002.128 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 77634.080 ops/s
[info]                  ·gc.alloc.rate:                   894.842 MB/sec
[info]                  ·gc.alloc.rate.norm:              18144.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1005.732 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        20392.429 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 13.505 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   4: 77660.280 ops/s
[info]                  ·gc.alloc.rate:                                  895.237 MB/sec
[info]                  ·gc.alloc.rate.norm:                             18144.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.084 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.707 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1016.509 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       20601.874 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                94.504 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 78172.988 ops/s
[info]                  ·gc.alloc.rate:            901.042 MB/sec
[info]                  ·gc.alloc.rate.norm:       18144.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.665 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13706.350 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala":
[info]   76802.509 ±(99.9%) 5469.173 ops/s [Average]
[info]   (min, avg, max) = (75069.419, 76802.509, 78172.988), stdev = 1420.327
[info]   CI (99.9%): [71333.335, 82271.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   885.253 ±(99.9%) 63.198 MB/sec [Average]
[info]   (min, avg, max) = (865.196, 885.253, 901.042), stdev = 16.412
[info]   CI (99.9%): [822.054, 948.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   18144.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (18144.005, 18144.005, 18144.006), stdev = 0.001
[info]   CI (99.9%): [18144.004, 18144.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.017 ±(99.9%) 0.145 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.084), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.341 ±(99.9%) 2.940 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.341, 1.707), stdev = 0.764
[info]   CI (99.9%): [≈ 0, 3.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   876.243 ±(99.9%) 704.140 MB/sec [Average]
[info]   (min, avg, max) = (671.357, 876.243, 1016.509), stdev = 182.863
[info]   CI (99.9%): [172.103, 1580.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   17963.910 ±(99.9%) 14487.278 B/op [Average]
[info]   (min, avg, max) = (13706.350, 17963.910, 21116.768), stdev = 3762.300
[info]   CI (99.9%): [3476.632, 32451.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.822 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.663), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   21.602 ±(99.9%) 158.535 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21.602, 94.504), stdev = 41.171
[info]   CI (99.9%): [≈ 0, 180.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.600, 13.000), stdev = 4.722
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala
[info] # Run progress: 58.92% complete, ETA 00:32:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 81816.239 ops/s
[info] # Warmup Iteration   2: 100197.015 ops/s
[info] # Warmup Iteration   3: 98867.962 ops/s
[info] Iteration   1: 99928.629 ops/s
[info]                  ·gc.alloc.rate:            1052.318 MB/sec
[info]                  ·gc.alloc.rate.norm:       16576.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.391 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 21192.467 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 97907.099 ops/s
[info]                  ·gc.alloc.rate:            1030.936 MB/sec
[info]                  ·gc.alloc.rate.norm:       16576.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.953 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16222.544 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 95863.508 ops/s
[info]                  ·gc.alloc.rate:                                  1009.524 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16576.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.119 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.956 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.073 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       16699.961 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                65.619 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 95862.820 ops/s
[info]                  ·gc.alloc.rate:                                  1009.571 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16576.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.021 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.339 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.149 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       16766.104 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 96071.146 ops/s
[info]                  ·gc.alloc.rate:                                  1011.706 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16576.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.029 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.115 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       16730.158 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala":
[info]   97126.640 ±(99.9%) 6879.374 ops/s [Average]
[info]   (min, avg, max) = (95862.820, 97126.640, 99928.629), stdev = 1786.552
[info]   CI (99.9%): [90247.266, 104006.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1022.811 ±(99.9%) 72.343 MB/sec [Average]
[info]   (min, avg, max) = (1009.524, 1022.811, 1052.318), stdev = 18.787
[info]   CI (99.9%): [950.468, 1095.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   16576.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16576.004, 16576.004, 16576.004), stdev = 0.001
[info]   CI (99.9%): [16576.004, 16576.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.028 ±(99.9%) 0.198 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.119), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.465 ±(99.9%) 3.257 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.465, 1.956), stdev = 0.846
[info]   CI (99.9%): [≈ 0, 3.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1082.736 ±(99.9%) 565.708 MB/sec [Average]
[info]   (min, avg, max) = (1008.953, 1082.736, 1345.391), stdev = 146.913
[info]   CI (99.9%): [517.028, 1648.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   17522.247 ±(99.9%) 7946.486 B/op [Average]
[info]   (min, avg, max) = (16222.544, 17522.247, 21192.467), stdev = 2063.677
[info]   CI (99.9%): [9575.760, 25468.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   13.124 ±(99.9%) 112.999 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13.124, 65.619), stdev = 29.346
[info]   CI (99.9%): [≈ 0, 126.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.400, 13.000), stdev = 4.722
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson
[info] # Run progress: 59.19% complete, ETA 00:32:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19791.018 ops/s
[info] # Warmup Iteration   2: 40605.355 ops/s
[info] # Warmup Iteration   3: 40932.561 ops/s
[info] Iteration   1: 41499.454 ops/s
[info]                  ·gc.alloc.rate:                                  1990.608 MB/sec
[info]                  ·gc.alloc.rate.norm:                             75512.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.120 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.566 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2037.172 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       77278.386 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                176.838 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   2: 41774.637 ops/s
[info]                  ·gc.alloc.rate:                                  2004.006 MB/sec
[info]                  ·gc.alloc.rate.norm:                             75512.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.105 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.048 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       76945.431 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 41681.696 ops/s
[info]                  ·gc.alloc.rate:                                  2000.296 MB/sec
[info]                  ·gc.alloc.rate.norm:                             75512.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.265 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.814 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       77117.082 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 41593.276 ops/s
[info]                  ·gc.alloc.rate:                                  1995.256 MB/sec
[info]                  ·gc.alloc.rate.norm:                             75512.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.056 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.026 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       77282.068 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 41679.071 ops/s
[info]                  ·gc.alloc.rate:                                  2000.400 MB/sec
[info]                  ·gc.alloc.rate.norm:                             75512.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.010 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.389 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.597 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       64270.401 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson":
[info]   41645.627 ±(99.9%) 400.033 ops/s [Average]
[info]   (min, avg, max) = (41499.454, 41645.627, 41774.637), stdev = 103.887
[info]   CI (99.9%): [41245.594, 42045.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1998.113 ±(99.9%) 20.121 MB/sec [Average]
[info]   (min, avg, max) = (1990.608, 1998.113, 2004.006), stdev = 5.225
[info]   CI (99.9%): [1977.993, 2018.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   75512.010 ±(99.9%) 0.004 B/op [Average]
[info]   (min, avg, max) = (75512.010, 75512.010, 75512.012), stdev = 0.001
[info]   CI (99.9%): [75512.006, 75512.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.028 ±(99.9%) 0.198 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.028, 0.120), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.076 ±(99.9%) 7.529 B/op [Average]
[info]   (min, avg, max) = (0.056, 1.076, 4.566), stdev = 1.955
[info]   CI (99.9%): [≈ 0, 8.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1973.332 ±(99.9%) 582.840 MB/sec [Average]
[info]   (min, avg, max) = (1702.597, 1973.332, 2042.814), stdev = 151.362
[info]   CI (99.9%): [1390.491, 2556.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   74578.674 ±(99.9%) 22195.741 B/op [Average]
[info]   (min, avg, max) = (64270.401, 74578.674, 77282.068), stdev = 5764.164
[info]   CI (99.9%): [52382.932, 96774.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   35.368 ±(99.9%) 304.526 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 35.368, 176.838), stdev = 79.085
[info]   CI (99.9%): [≈ 0, 339.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 10.000), stdev = 2.510
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce
[info] # Run progress: 59.46% complete, ETA 00:32:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 99518.359 ops/s
[info] # Warmup Iteration   2: 127919.519 ops/s
[info] # Warmup Iteration   3: 127561.751 ops/s
[info] Iteration   1: 129984.177 ops/s
[info]                  ·gc.alloc.rate:            576.938 MB/sec
[info]                  ·gc.alloc.rate.norm:       6984.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.950 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8146.253 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 125985.653 ops/s
[info]                  ·gc.alloc.rate:            559.063 MB/sec
[info]                  ·gc.alloc.rate.norm:       6984.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.801 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8404.852 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 128827.614 ops/s
[info]                  ·gc.alloc.rate:            571.735 MB/sec
[info]                  ·gc.alloc.rate.norm:       6984.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.442 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4109.797 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 128284.067 ops/s
[info]                  ·gc.alloc.rate:            569.149 MB/sec
[info]                  ·gc.alloc.rate.norm:       6984.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.613 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8253.608 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 125535.210 ops/s
[info]                  ·gc.alloc.rate:            557.184 MB/sec
[info]                  ·gc.alloc.rate.norm:       6984.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.942 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8434.975 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce":
[info]   127723.344 ±(99.9%) 7319.438 ops/s [Average]
[info]   (min, avg, max) = (125535.210, 127723.344, 129984.177), stdev = 1900.835
[info]   CI (99.9%): [120403.907, 135042.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate":
[info]   566.814 ±(99.9%) 32.502 MB/sec [Average]
[info]   (min, avg, max) = (557.184, 566.814, 576.938), stdev = 8.441
[info]   CI (99.9%): [534.311, 599.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   6984.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6984.003, 6984.003, 6984.004), stdev = 0.001
[info]   CI (99.9%): [6984.003, 6984.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   605.550 ±(99.9%) 579.274 MB/sec [Average]
[info]   (min, avg, max) = (336.442, 605.550, 672.950), stdev = 150.436
[info]   CI (99.9%): [26.276, 1184.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   7469.897 ±(99.9%) 7246.849 B/op [Average]
[info]   (min, avg, max) = (4109.797, 7469.897, 8434.975), stdev = 1881.984
[info]   CI (99.9%): [223.048, 14716.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.600, 8.000), stdev = 2.074
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala
[info] # Run progress: 59.73% complete, ETA 00:31:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 114986.809 ops/s
[info] # Warmup Iteration   2: 165092.506 ops/s
[info] # Warmup Iteration   3: 158323.879 ops/s
[info] Iteration   1: 162125.555 ops/s
[info]                  ·gc.alloc.rate:            240.608 MB/sec
[info]                  ·gc.alloc.rate.norm:       2336.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.682 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3259.058 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 161797.628 ops/s
[info]                  ·gc.alloc.rate:            240.141 MB/sec
[info]                  ·gc.alloc.rate.norm:       2336.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.710 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3265.663 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 161643.750 ops/s
[info]                  ·gc.alloc.rate:            239.897 MB/sec
[info]                  ·gc.alloc.rate.norm:       2336.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.696 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3268.855 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 162683.651 ops/s
[info]                  ·gc.alloc.rate:      241.459 MB/sec
[info]                  ·gc.alloc.rate.norm: 2336.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 162109.151 ops/s
[info]                  ·gc.alloc.rate:            240.581 MB/sec
[info]                  ·gc.alloc.rate.norm:       2336.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.679 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3259.379 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala":
[info]   162071.947 ±(99.9%) 1536.696 ops/s [Average]
[info]   (min, avg, max) = (161643.750, 162071.947, 162683.651), stdev = 399.075
[info]   CI (99.9%): [160535.251, 163608.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   240.537 ±(99.9%) 2.298 MB/sec [Average]
[info]   (min, avg, max) = (239.897, 240.537, 241.459), stdev = 0.597
[info]   CI (99.9%): [238.239, 242.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   2336.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2336.003, 2336.003, 2336.003), stdev = 0.001
[info]   CI (99.9%): [2336.002, 2336.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   268.553 ±(99.9%) 578.082 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 268.553, 335.710), stdev = 150.126
[info]   CI (99.9%): [≈ 0, 846.635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   2610.591 ±(99.9%) 5619.517 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2610.591, 3268.855), stdev = 1459.371
[info]   CI (99.9%): [≈ 0, 8230.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.600, 5.000), stdev = 2.074
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala
[info] # Run progress: 60.00% complete, ETA 00:31:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 661391.477 ops/s
[info] # Warmup Iteration   2: 738293.334 ops/s
[info] # Warmup Iteration   3: 750839.972 ops/s
[info] Iteration   1: 742103.702 ops/s
[info]                  ·gc.alloc.rate:            920.286 MB/sec
[info]                  ·gc.alloc.rate.norm:       1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.694 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1426.838 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 730711.528 ops/s
[info]                  ·gc.alloc.rate:            906.360 MB/sec
[info]                  ·gc.alloc.rate.norm:       1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.284 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2173.665 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 742750.578 ops/s
[info]                  ·gc.alloc.rate:                   921.015 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.991 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2138.456 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 8.469 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 748517.771 ops/s
[info]                  ·gc.alloc.rate:                                  928.280 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1952.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.042 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.089 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.718 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1431.425 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 748546.587 ops/s
[info]                  ·gc.alloc.rate:                                  928.271 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1952.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.023 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.049 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.053 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2147.105 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala":
[info]   742526.033 ±(99.9%) 28030.420 ops/s [Average]
[info]   (min, avg, max) = (730711.528, 742526.033, 748546.587), stdev = 7279.411
[info]   CI (99.9%): [714495.614, 770556.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   920.843 ±(99.9%) 34.473 MB/sec [Average]
[info]   (min, avg, max) = (906.360, 920.843, 928.280), stdev = 8.952
[info]   CI (99.9%): [886.370, 955.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1952.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1952.001, 1952.001, 1952.001), stdev = 0.001
[info]   CI (99.9%): [1952.000, 1952.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.013 ±(99.9%) 0.074 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.027 ±(99.9%) 0.155 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.089), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   878.548 ±(99.9%) 709.834 MB/sec [Average]
[info]   (min, avg, max) = (672.694, 878.548, 1021.053), stdev = 184.342
[info]   CI (99.9%): [168.714, 1588.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1863.498 ±(99.9%) 1527.690 B/op [Average]
[info]   (min, avg, max) = (1426.838, 1863.498, 2173.665), stdev = 396.736
[info]   CI (99.9%): [335.808, 3391.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.694 ±(99.9%) 14.584 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.694, 8.469), stdev = 3.788
[info]   CI (99.9%): [≈ 0, 16.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.000, 10.000), stdev = 3.536
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 60.27% complete, ETA 00:31:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 700644.018 ops/s
[info] # Warmup Iteration   2: 754617.208 ops/s
[info] # Warmup Iteration   3: 759562.761 ops/s
[info] Iteration   1: 724512.261 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 757288.142 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 763638.588 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 762014.002 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 757767.957 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc":
[info]   753044.190 ±(99.9%) 62301.195 ops/s [Average]
[info]   (min, avg, max) = (724512.261, 753044.190, 763638.588), stdev = 16179.423
[info]   CI (99.9%): [690742.995, 815345.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 10⁻³, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson
[info] # Run progress: 60.54% complete, ETA 00:31:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 134143.038 ops/s
[info] # Warmup Iteration   2: 181765.253 ops/s
[info] # Warmup Iteration   3: 183512.116 ops/s
[info] Iteration   1: 182481.106 ops/s
[info]                  ·gc.alloc.rate:            594.496 MB/sec
[info]                  ·gc.alloc.rate.norm:       5128.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.382 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5791.206 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 181357.710 ops/s
[info]                  ·gc.alloc.rate:                   590.764 MB/sec
[info]                  ·gc.alloc.rate.norm:              5128.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             670.632 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5821.279 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 5.781 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 182621.591 ops/s
[info]                  ·gc.alloc.rate:            594.938 MB/sec
[info]                  ·gc.alloc.rate.norm:       5128.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.367 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5786.767 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 181953.236 ops/s
[info]                  ·gc.alloc.rate:            592.728 MB/sec
[info]                  ·gc.alloc.rate.norm:       5128.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.328 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5808.008 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 183925.684 ops/s
[info]                  ·gc.alloc.rate:            599.188 MB/sec
[info]                  ·gc.alloc.rate.norm:       5128.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.677 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2872.811 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson":
[info]   182467.865 ±(99.9%) 3676.472 ops/s [Average]
[info]   (min, avg, max) = (181357.710, 182467.865, 183925.684), stdev = 954.768
[info]   CI (99.9%): [178791.393, 186144.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   594.423 ±(99.9%) 12.060 MB/sec [Average]
[info]   (min, avg, max) = (590.764, 594.423, 599.188), stdev = 3.132
[info]   CI (99.9%): [582.363, 606.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5128.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5128.002, 5128.002, 5128.002), stdev = 0.001
[info]   CI (99.9%): [5128.002, 5128.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   604.077 ±(99.9%) 577.752 MB/sec [Average]
[info]   (min, avg, max) = (335.677, 604.077, 671.382), stdev = 150.040
[info]   CI (99.9%): [26.325, 1181.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   5216.014 ±(99.9%) 5044.200 B/op [Average]
[info]   (min, avg, max) = (2872.811, 5216.014, 5821.279), stdev = 1309.963
[info]   CI (99.9%): [171.814, 10260.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   1.156 ±(99.9%) 9.955 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.156, 5.781), stdev = 2.585
[info]   CI (99.9%): [≈ 0, 11.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.600, 9.000), stdev = 2.074
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce
[info] # Run progress: 60.81% complete, ETA 00:31:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 96266.892 ops/s
[info] # Warmup Iteration   2: 126493.486 ops/s
[info] # Warmup Iteration   3: 130657.814 ops/s
[info] Iteration   1: 131014.104 ops/s
[info]                  ·gc.alloc.rate:                                  1609.896 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19344.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.069 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.827 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1351.262 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       16236.336 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                40.011 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   2: 131002.253 ops/s
[info]                  ·gc.alloc.rate:                                  1609.773 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19344.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.074 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.887 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.642 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       20447.956 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 130501.958 ops/s
[info]                  ·gc.alloc.rate:                                  1603.661 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19344.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.095 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.701 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       20526.603 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 129680.276 ops/s
[info]                  ·gc.alloc.rate:                                  1593.741 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19344.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.074 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.493 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       16525.103 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 131468.324 ops/s
[info]                  ·gc.alloc.rate:                                  1615.599 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19344.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.072 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.722 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       20375.177 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce":
[info]   130733.383 ±(99.9%) 2621.428 ops/s [Average]
[info]   (min, avg, max) = (129680.276, 130733.383, 131468.324), stdev = 680.777
[info]   CI (99.9%): [128111.955, 133354.811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate":
[info]   1606.534 ±(99.9%) 31.979 MB/sec [Average]
[info]   (min, avg, max) = (1593.741, 1606.534, 1615.599), stdev = 8.305
[info]   CI (99.9%): [1574.555, 1638.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   19344.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (19344.003, 19344.003, 19344.003), stdev = 0.001
[info]   CI (99.9%): [19344.003, 19344.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.033 ±(99.9%) 0.137 MB/sec [Average]
[info]   (min, avg, max) = (0.006, 0.033, 0.074), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.391 ±(99.9%) 1.641 B/op [Average]
[info]   (min, avg, max) = (0.072, 0.391, 0.887), stdev = 0.426
[info]   CI (99.9%): [≈ 0, 2.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1563.564 ±(99.9%) 728.423 MB/sec [Average]
[info]   (min, avg, max) = (1351.262, 1563.564, 1701.722), stdev = 189.169
[info]   CI (99.9%): [835.141, 2291.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   18822.235 ±(99.9%) 8593.745 B/op [Average]
[info]   (min, avg, max) = (16236.336, 18822.235, 20526.603), stdev = 2231.768
[info]   CI (99.9%): [10228.490, 27415.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   8.002 ±(99.9%) 68.901 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.002, 40.011), stdev = 17.893
[info]   CI (99.9%): [≈ 0, 76.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 11.000), stdev = 3.271
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala
[info] # Run progress: 61.08% complete, ETA 00:30:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 99623.186 ops/s
[info] # Warmup Iteration   2: 156960.622 ops/s
[info] # Warmup Iteration   3: 156951.310 ops/s
[info] Iteration   1: 156497.484 ops/s
[info]                  ·gc.alloc.rate:            835.245 MB/sec
[info]                  ·gc.alloc.rate.norm:       8400.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.206 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10149.519 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 160560.010 ops/s
[info]                  ·gc.alloc.rate:                   856.810 MB/sec
[info]                  ·gc.alloc.rate.norm:              8400.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.042 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        6588.575 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 6.530 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 157959.093 ops/s
[info]                  ·gc.alloc.rate:            842.915 MB/sec
[info]                  ·gc.alloc.rate.norm:       8400.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.029 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10055.402 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   4: 163457.335 ops/s
[info]                  ·gc.alloc.rate:                                  872.262 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8400.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.041 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.397 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            676.680 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6516.520 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                38.483 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 164197.493 ops/s
[info]                  ·gc.alloc.rate:                                  876.257 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8400.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.048 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.457 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.081 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9788.318 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala":
[info]   160534.283 ±(99.9%) 12899.850 ops/s [Average]
[info]   (min, avg, max) = (156497.484, 160534.283, 164197.493), stdev = 3350.050
[info]   CI (99.9%): [147634.433, 173434.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   856.698 ±(99.9%) 68.748 MB/sec [Average]
[info]   (min, avg, max) = (835.245, 856.698, 876.257), stdev = 17.854
[info]   CI (99.9%): [787.950, 925.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   8400.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8400.002, 8400.003, 8400.003), stdev = 0.001
[info]   CI (99.9%): [8400.002, 8400.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.018 ±(99.9%) 0.094 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.048), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.171 ±(99.9%) 0.904 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.171, 0.457), stdev = 0.235
[info]   CI (99.9%): [≈ 0, 1.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   877.608 ±(99.9%) 714.716 MB/sec [Average]
[info]   (min, avg, max) = (672.042, 877.608, 1021.081), stdev = 185.609
[info]   CI (99.9%): [162.892, 1592.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   8619.667 ±(99.9%) 7284.766 B/op [Average]
[info]   (min, avg, max) = (6516.520, 8619.667, 10149.519), stdev = 1891.831
[info]   CI (99.9%): [1334.901, 15904.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   9.003 ±(99.9%) 64.387 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.003, 38.483), stdev = 16.721
[info]   CI (99.9%): [≈ 0, 73.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.000, 12.000), stdev = 4.062
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala
[info] # Run progress: 61.35% complete, ETA 00:30:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 295889.567 ops/s
[info] # Warmup Iteration   2: 312378.949 ops/s
[info] # Warmup Iteration   3: 315750.365 ops/s
[info] Iteration   1: 315780.668 ops/s
[info]                  ·gc.alloc.rate:            613.180 MB/sec
[info]                  ·gc.alloc.rate.norm:       3056.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.183 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3360.033 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 315827.175 ops/s
[info]                  ·gc.alloc.rate:            613.157 MB/sec
[info]                  ·gc.alloc.rate.norm:       3056.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.066 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3359.576 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 316951.218 ops/s
[info]                  ·gc.alloc.rate:            615.361 MB/sec
[info]                  ·gc.alloc.rate.norm:       3056.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.042 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1673.816 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 315995.078 ops/s
[info]                  ·gc.alloc.rate:            613.540 MB/sec
[info]                  ·gc.alloc.rate.norm:       3056.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.103 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3357.662 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 315836.675 ops/s
[info]                  ·gc.alloc.rate:            613.138 MB/sec
[info]                  ·gc.alloc.rate.norm:       3056.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.015 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3359.427 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala":
[info]   316078.163 ±(99.9%) 1904.943 ops/s [Average]
[info]   (min, avg, max) = (315780.668, 316078.163, 316951.218), stdev = 494.708
[info]   CI (99.9%): [314173.220, 317983.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   613.675 ±(99.9%) 3.684 MB/sec [Average]
[info]   (min, avg, max) = (613.138, 613.675, 615.361), stdev = 0.957
[info]   CI (99.9%): [609.991, 617.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3056.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3056.001, 3056.001, 3056.001), stdev = 0.001
[info]   CI (99.9%): [3056.001, 3056.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   606.682 ±(99.9%) 580.421 MB/sec [Average]
[info]   (min, avg, max) = (337.042, 606.682, 674.183), stdev = 150.733
[info]   CI (99.9%): [26.261, 1187.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   3022.103 ±(99.9%) 2902.292 B/op [Average]
[info]   (min, avg, max) = (1673.816, 3022.103, 3360.033), stdev = 753.716
[info]   CI (99.9%): [119.811, 5924.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 6.000), stdev = 1.304
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson
[info] # Run progress: 61.62% complete, ETA 00:30:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26826.764 ops/s
[info] # Warmup Iteration   2: 59710.416 ops/s
[info] # Warmup Iteration   3: 59881.251 ops/s
[info] Iteration   1: 61354.568 ops/s
[info]                  ·gc.alloc.rate:                                  2589.209 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66432.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.118 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.574 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       69853.804 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 61302.294 ops/s
[info]                  ·gc.alloc.rate:                                  2587.228 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66432.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.093 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.449 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       61173.917 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 60768.796 ops/s
[info]                  ·gc.alloc.rate:                                  2564.726 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66432.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.011 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.280 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.876 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       70528.459 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 61026.006 ops/s
[info]                  ·gc.alloc.rate:                                  2575.390 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66432.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.094 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.311 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       61451.543 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 59571.758 ops/s
[info]                  ·gc.alloc.rate:                                  2515.033 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66432.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.010 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.251 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.672 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       71942.982 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson":
[info]   60804.684 ±(99.9%) 2803.552 ops/s [Average]
[info]   (min, avg, max) = (59571.758, 60804.684, 61354.568), stdev = 728.074
[info]   CI (99.9%): [58001.132, 63608.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2566.317 ±(99.9%) 116.735 MB/sec [Average]
[info]   (min, avg, max) = (2515.033, 2566.317, 2589.209), stdev = 30.316
[info]   CI (99.9%): [2449.582, 2683.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   66432.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (66432.007, 66432.007, 66432.007), stdev = 0.001
[info]   CI (99.9%): [66432.006, 66432.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.006 ±(99.9%) 0.013 MB/sec [Average]
[info]   (min, avg, max) = (0.004, 0.006, 0.011), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.167 ±(99.9%) 0.351 B/op [Average]
[info]   (min, avg, max) = (0.093, 0.167, 0.280), stdev = 0.091
[info]   CI (99.9%): [≈ 0, 0.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2586.777 ±(99.9%) 718.484 MB/sec [Average]
[info]   (min, avg, max) = (2382.311, 2586.777, 2723.672), stdev = 186.588
[info]   CI (99.9%): [1868.292, 3305.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   66990.141 ±(99.9%) 20170.487 B/op [Average]
[info]   (min, avg, max) = (61173.917, 66990.141, 71942.982), stdev = 5238.211
[info]   CI (99.9%): [46819.654, 87160.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.count":
[info]   38.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.600, 8.000), stdev = 0.548
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce
[info] # Run progress: 61.89% complete, ETA 00:30:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 138835.212 ops/s
[info] # Warmup Iteration   2: 180090.689 ops/s
[info] # Warmup Iteration   3: 182334.888 ops/s
[info] Iteration   1: 179338.912 ops/s
[info]                  ·gc.alloc.rate:            616.997 MB/sec
[info]                  ·gc.alloc.rate.norm:       5416.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.972 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5916.132 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 177650.678 ops/s
[info]                  ·gc.alloc.rate:            611.196 MB/sec
[info]                  ·gc.alloc.rate.norm:       5416.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.987 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2986.152 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 175497.460 ops/s
[info]                  ·gc.alloc.rate:            603.988 MB/sec
[info]                  ·gc.alloc.rate.norm:       5416.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.214 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6045.732 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 182290.154 ops/s
[info]                  ·gc.alloc.rate:            627.389 MB/sec
[info]                  ·gc.alloc.rate.norm:       5416.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.243 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5820.470 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 181702.360 ops/s
[info]                  ·gc.alloc.rate:            625.236 MB/sec
[info]                  ·gc.alloc.rate.norm:       5416.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.102 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5839.302 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce":
[info]   179295.913 ±(99.9%) 10873.103 ops/s [Average]
[info]   (min, avg, max) = (175497.460, 179295.913, 182290.154), stdev = 2823.710
[info]   CI (99.9%): [168422.810, 190169.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate":
[info]   616.961 ±(99.9%) 37.470 MB/sec [Average]
[info]   (min, avg, max) = (603.988, 616.961, 627.389), stdev = 9.731
[info]   CI (99.9%): [579.491, 654.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5416.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5416.002, 5416.002, 5416.002), stdev = 0.001
[info]   CI (99.9%): [5416.002, 5416.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   606.704 ±(99.9%) 580.585 MB/sec [Average]
[info]   (min, avg, max) = (336.987, 606.704, 674.243), stdev = 150.776
[info]   CI (99.9%): [26.119, 1187.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   5321.558 ±(99.9%) 5038.697 B/op [Average]
[info]   (min, avg, max) = (2986.152, 5321.558, 6045.732), stdev = 1308.534
[info]   CI (99.9%): [282.861, 10360.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 7.000), stdev = 1.643
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala
[info] # Run progress: 62.16% complete, ETA 00:29:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 195756.825 ops/s
[info] # Warmup Iteration   2: 277360.605 ops/s
[info] # Warmup Iteration   3: 280718.351 ops/s
[info] Iteration   1: 280783.236 ops/s
[info]                  ·gc.alloc.rate:            276.835 MB/sec
[info]                  ·gc.alloc.rate.norm:       1552.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.330 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1885.539 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 280797.687 ops/s
[info]                  ·gc.alloc.rate:      276.832 MB/sec
[info]                  ·gc.alloc.rate.norm: 1552.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 280359.913 ops/s
[info]                  ·gc.alloc.rate:            276.548 MB/sec
[info]                  ·gc.alloc.rate.norm:       1552.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.507 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1888.491 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 290725.663 ops/s
[info]                  ·gc.alloc.rate:            286.627 MB/sec
[info]                  ·gc.alloc.rate.norm:       1552.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.325 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1821.102 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 286337.904 ops/s
[info]                  ·gc.alloc.rate:            282.334 MB/sec
[info]                  ·gc.alloc.rate.norm:       1552.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.365 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1849.011 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala":
[info]   283800.881 ±(99.9%) 17683.085 ops/s [Average]
[info]   (min, avg, max) = (280359.913, 283800.881, 290725.663), stdev = 4592.241
[info]   CI (99.9%): [266117.796, 301483.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   279.836 ±(99.9%) 17.349 MB/sec [Average]
[info]   (min, avg, max) = (276.548, 279.836, 286.627), stdev = 4.505
[info]   CI (99.9%): [262.487, 297.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1552.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1552.001, 1552.001, 1552.002), stdev = 0.001
[info]   CI (99.9%): [1552.001, 1552.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   269.105 ±(99.9%) 579.270 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.105, 336.507), stdev = 150.434
[info]   CI (99.9%): [≈ 0, 848.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1488.828 ±(99.9%) 3206.604 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1488.828, 1888.491), stdev = 832.745
[info]   CI (99.9%): [≈ 0, 4695.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.400, 5.000), stdev = 1.949
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala
[info] # Run progress: 62.43% complete, ETA 00:29:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1311566.217 ops/s
[info] # Warmup Iteration   2: 1506725.326 ops/s
[info] # Warmup Iteration   3: 1504866.163 ops/s
[info] Iteration   1: 1519499.072 ops/s
[info]                  ·gc.alloc.rate:                   1127.855 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1010.028 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1045.979 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.690 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 1508949.506 ops/s
[info]                  ·gc.alloc.rate:                   1119.540 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1347.243 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1405.560 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 4.169 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 1479719.224 ops/s
[info]                  ·gc.alloc.rate:                                  1097.896 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1168.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.151 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.161 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.987 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1086.180 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 1478625.990 ops/s
[info]                  ·gc.alloc.rate:                                  1097.187 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1168.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.083 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1086.985 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 1475735.397 ops/s
[info]                  ·gc.alloc.rate:            1095.136 MB/sec
[info]                  ·gc.alloc.rate.norm:       1168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.127 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1451.690 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala":
[info]   1492505.838 ±(99.9%) 77884.551 ops/s [Average]
[info]   (min, avg, max) = (1475735.397, 1492505.838, 1519499.072), stdev = 20226.371
[info]   CI (99.9%): [1414621.286, 1570390.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1107.523 ±(99.9%) 58.104 MB/sec [Average]
[info]   (min, avg, max) = (1095.136, 1107.523, 1127.855), stdev = 15.090
[info]   CI (99.9%): [1049.418, 1165.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1168.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1168.000, 1168.000, 1168.000), stdev = 0.001
[info]   CI (99.9%): [1168.000, 1168.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.030 ±(99.9%) 0.260 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.151), stdev = 0.067
[info]   CI (99.9%): [≈ 0, 0.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.032 ±(99.9%) 0.276 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.032, 0.161), stdev = 0.072
[info]   CI (99.9%): [≈ 0, 0.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1152.094 ±(99.9%) 710.843 MB/sec [Average]
[info]   (min, avg, max) = (1010.028, 1152.094, 1361.127), stdev = 184.604
[info]   CI (99.9%): [441.251, 1862.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1215.279 ±(99.9%) 755.269 B/op [Average]
[info]   (min, avg, max) = (1045.979, 1215.279, 1451.690), stdev = 196.141
[info]   CI (99.9%): [460.009, 1970.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.687 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.972 ±(99.9%) 6.977 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.972, 4.169), stdev = 1.812
[info]   CI (99.9%): [≈ 0, 7.949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.200, 12.000), stdev = 4.207
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 62.70% complete, ETA 00:29:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1421643.367 ops/s
[info] # Warmup Iteration   2: 1565515.389 ops/s
[info] # Warmup Iteration   3: 1579380.911 ops/s
[info] Iteration   1: 1575570.191 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1579512.721 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1583915.856 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1583672.271 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1580100.393 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc":
[info]   1580554.286 ±(99.9%) 13220.959 ops/s [Average]
[info]   (min, avg, max) = (1575570.191, 1580554.286, 1583915.856), stdev = 3433.441
[info]   CI (99.9%): [1567333.328, 1593775.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson
[info] # Run progress: 62.97% complete, ETA 00:29:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 158164.705 ops/s
[info] # Warmup Iteration   2: 289817.345 ops/s
[info] # Warmup Iteration   3: 291066.551 ops/s
[info] Iteration   1: 291071.893 ops/s
[info]                  ·gc.alloc.rate:            791.727 MB/sec
[info]                  ·gc.alloc.rate.norm:       4280.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.610 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3630.659 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 291700.839 ops/s
[info]                  ·gc.alloc.rate:                   793.302 MB/sec
[info]                  ·gc.alloc.rate.norm:              4280.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.157 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3626.400 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.594 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 288956.809 ops/s
[info]                  ·gc.alloc.rate:            785.684 MB/sec
[info]                  ·gc.alloc.rate.norm:       4280.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.700 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5489.433 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   4: 287239.154 ops/s
[info]                  ·gc.alloc.rate:                   781.380 MB/sec
[info]                  ·gc.alloc.rate.norm:              4280.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             671.676 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3679.099 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 25.549 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 291946.670 ops/s
[info]                  ·gc.alloc.rate:                                  793.833 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4280.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.024 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.127 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.703 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3670.054 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson":
[info]   290183.073 ±(99.9%) 7790.841 ops/s [Average]
[info]   (min, avg, max) = (287239.154, 290183.073, 291946.670), stdev = 2023.257
[info]   CI (99.9%): [282392.232, 297973.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   789.185 ±(99.9%) 20.931 MB/sec [Average]
[info]   (min, avg, max) = (781.380, 789.185, 793.833), stdev = 5.436
[info]   CI (99.9%): [768.254, 810.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4280.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4280.001, 4280.001, 4280.002), stdev = 0.001
[info]   CI (99.9%): [4280.001, 4280.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.005 ±(99.9%) 0.041 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.024), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.025 ±(99.9%) 0.219 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.127), stdev = 0.057
[info]   CI (99.9%): [≈ 0, 0.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   740.769 ±(99.9%) 574.781 MB/sec [Average]
[info]   (min, avg, max) = (671.610, 740.769, 1007.700), stdev = 149.269
[info]   CI (99.9%): [165.989, 1315.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   4019.129 ±(99.9%) 3166.211 B/op [Average]
[info]   (min, avg, max) = (3626.400, 4019.129, 5489.433), stdev = 822.255
[info]   CI (99.9%): [852.918, 7185.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.825 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.664), stdev = 2.032
[info]   CI (99.9%): [≈ 0, 8.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   5.829 ±(99.9%) 42.871 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.829, 25.549), stdev = 11.133
[info]   CI (99.9%): [≈ 0, 48.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 8.600, 12.000), stdev = 2.510
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce
[info] # Run progress: 63.24% complete, ETA 00:29:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2347.445 ops/s
[info] # Warmup Iteration   2: 4374.891 ops/s
[info] # Warmup Iteration   3: 4405.273 ops/s
[info] Iteration   1: 4417.935 ops/s
[info]                  ·gc.alloc.rate:            870.472 MB/sec
[info]                  ·gc.alloc.rate.norm:       310120.100 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.824 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 359410.100 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 4489.021 ops/s
[info]                  ·gc.alloc.rate:            884.353 MB/sec
[info]                  ·gc.alloc.rate.norm:       310120.091 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.622 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 235871.216 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 4467.632 ops/s
[info]                  ·gc.alloc.rate:                   880.223 MB/sec
[info]                  ·gc.alloc.rate.norm:              310120.091 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1007.607 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        355000.109 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 234.633 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   4: 4312.670 ops/s
[info]                  ·gc.alloc.rate:                   849.712 MB/sec
[info]                  ·gc.alloc.rate.norm:              310120.095 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.640 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        245494.149 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1458.381 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 4490.984 ops/s
[info]                  ·gc.alloc.rate:                                  884.958 MB/sec
[info]                  ·gc.alloc.rate.norm:                             310120.105 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.185 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 64.693 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.163 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       357851.070 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce":
[info]   4435.648 ±(99.9%) 287.969 ops/s [Average]
[info]   (min, avg, max) = (4312.670, 4435.648, 4490.984), stdev = 74.785
[info]   CI (99.9%): [4147.679, 4723.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   873.943 ±(99.9%) 56.734 MB/sec [Average]
[info]   (min, avg, max) = (849.712, 873.943, 884.958), stdev = 14.734
[info]   CI (99.9%): [817.209, 930.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   310120.096 ±(99.9%) 0.023 B/op [Average]
[info]   (min, avg, max) = (310120.091, 310120.096, 310120.105), stdev = 0.006
[info]   CI (99.9%): [310120.073, 310120.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.037 ±(99.9%) 0.318 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.185), stdev = 0.083
[info]   CI (99.9%): [≈ 0, 0.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   12.939 ±(99.9%) 111.405 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12.939, 64.693), stdev = 28.931
[info]   CI (99.9%): [≈ 0, 124.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   876.571 ±(99.9%) 717.169 MB/sec [Average]
[info]   (min, avg, max) = (672.622, 876.571, 1021.163), stdev = 186.246
[info]   CI (99.9%): [159.402, 1593.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   310725.329 ±(99.9%) 246633.244 B/op [Average]
[info]   (min, avg, max) = (235871.216, 310725.329, 359410.100), stdev = 64049.870
[info]   CI (99.9%): [64092.084, 557358.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.687 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   338.603 ±(99.9%) 2441.949 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 338.603, 1458.381), stdev = 634.167
[info]   CI (99.9%): [≈ 0, 2780.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.400, 11.000), stdev = 3.507
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala
[info] # Run progress: 63.51% complete, ETA 00:28:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1666.599 ops/s
[info] # Warmup Iteration   2: 4093.103 ops/s
[info] # Warmup Iteration   3: 4120.821 ops/s
[info] Iteration   1: 4260.798 ops/s
[info]                  ·gc.alloc.rate:            800.780 MB/sec
[info]                  ·gc.alloc.rate.norm:       295816.096 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.334 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 247997.327 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 4183.404 ops/s
[info]                  ·gc.alloc.rate:                   786.193 MB/sec
[info]                  ·gc.alloc.rate.norm:              295816.105 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1006.181 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        378589.805 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 250.556 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   3: 4233.982 ops/s
[info]                  ·gc.alloc.rate:            795.641 MB/sec
[info]                  ·gc.alloc.rate.norm:       295816.096 B/op
[info]                  ·gc.churn.G1_Old_Gen:      669.946 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 249083.225 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 4197.373 ops/s
[info]                  ·gc.alloc.rate:                   788.897 MB/sec
[info]                  ·gc.alloc.rate.norm:              295816.097 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1005.610 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        377077.819 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      5.328 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1997.763 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   5: 4180.962 ops/s
[info]                  ·gc.alloc.rate:                                  785.993 MB/sec
[info]                  ·gc.alloc.rate.norm:                             295816.098 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.069 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 25.787 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.203 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       256000.979 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                250.736 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala":
[info]   4211.304 ±(99.9%) 134.181 ops/s [Average]
[info]   (min, avg, max) = (4180.962, 4211.304, 4260.798), stdev = 34.846
[info]   CI (99.9%): [4077.122, 4345.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   791.501 ±(99.9%) 24.996 MB/sec [Average]
[info]   (min, avg, max) = (785.993, 791.501, 800.780), stdev = 6.491
[info]   CI (99.9%): [766.505, 816.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   295816.098 ±(99.9%) 0.015 B/op [Average]
[info]   (min, avg, max) = (295816.096, 295816.098, 295816.105), stdev = 0.004
[info]   CI (99.9%): [295816.084, 295816.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.014 ±(99.9%) 0.118 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.069), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   5.157 ±(99.9%) 44.406 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.157, 25.787), stdev = 11.532
[info]   CI (99.9%): [≈ 0, 49.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   806.655 ±(99.9%) 700.524 MB/sec [Average]
[info]   (min, avg, max) = (669.946, 806.655, 1006.181), stdev = 181.924
[info]   CI (99.9%): [106.131, 1507.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   301749.831 ±(99.9%) 267714.949 B/op [Average]
[info]   (min, avg, max) = (247997.327, 301749.831, 378589.805), stdev = 69524.722
[info]   CI (99.9%): [34034.882, 569464.780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.332 ±(99.9%) 8.696 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.332, 5.328), stdev = 2.258
[info]   CI (99.9%): [≈ 0, 10.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   499.811 ±(99.9%) 3260.367 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 499.811, 1997.763), stdev = 846.707
[info]   CI (99.9%): [≈ 0, 3760.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   49.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.800, 14.000), stdev = 4.550
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala
[info] # Run progress: 63.78% complete, ETA 00:28:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17511.942 ops/s
[info] # Warmup Iteration   2: 28352.000 ops/s
[info] # Warmup Iteration   3: 29469.661 ops/s
[info] Iteration   1: 29207.960 ops/s
[info]                  ·gc.alloc.rate:            496.220 MB/sec
[info]                  ·gc.alloc.rate.norm:       26744.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.633 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 36251.857 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 28610.947 ops/s
[info]                  ·gc.alloc.rate:            486.260 MB/sec
[info]                  ·gc.alloc.rate.norm:       26744.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.453 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18504.713 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 29337.912 ops/s
[info]                  ·gc.alloc.rate:            498.436 MB/sec
[info]                  ·gc.alloc.rate.norm:       26744.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.666 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 36092.484 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 29770.877 ops/s
[info]                  ·gc.alloc.rate:            505.886 MB/sec
[info]                  ·gc.alloc.rate.norm:       26744.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.408 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 17784.412 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 29576.101 ops/s
[info]                  ·gc.alloc.rate:            502.625 MB/sec
[info]                  ·gc.alloc.rate.norm:       26744.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.862 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 35802.095 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala":
[info]   29300.760 ±(99.9%) 1703.292 ops/s [Average]
[info]   (min, avg, max) = (28610.947, 29300.760, 29770.877), stdev = 442.340
[info]   CI (99.9%): [27597.468, 31004.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   497.886 ±(99.9%) 28.861 MB/sec [Average]
[info]   (min, avg, max) = (486.260, 497.886, 505.886), stdev = 7.495
[info]   CI (99.9%): [469.024, 526.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   26744.015 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (26744.014, 26744.015, 26744.019), stdev = 0.002
[info]   CI (99.9%): [26744.007, 26744.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   538.204 ±(99.9%) 709.264 MB/sec [Average]
[info]   (min, avg, max) = (336.408, 538.204, 672.862), stdev = 184.194
[info]   CI (99.9%): [≈ 0, 1247.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   28887.112 ±(99.9%) 37779.408 B/op [Average]
[info]   (min, avg, max) = (17784.412, 28887.112, 36251.857), stdev = 9811.192
[info]   CI (99.9%): [≈ 0, 66666.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.871
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson
[info] # Run progress: 64.05% complete, ETA 00:28:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1221.967 ops/s
[info] # Warmup Iteration   2: 3513.939 ops/s
[info] # Warmup Iteration   3: 3539.480 ops/s
[info] Iteration   1: 3567.369 ops/s
[info]                  ·gc.alloc.rate:            905.939 MB/sec
[info]                  ·gc.alloc.rate.norm:       399732.044 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1004.784 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 443345.807 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 3588.016 ops/s
[info]                  ·gc.alloc.rate:            911.118 MB/sec
[info]                  ·gc.alloc.rate.norm:       399728.114 B/op
[info]                  ·gc.churn.G1_Old_Gen:      669.938 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 293916.817 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 3573.457 ops/s
[info]                  ·gc.alloc.rate:                   907.435 MB/sec
[info]                  ·gc.alloc.rate.norm:              399728.114 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1005.711 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        443018.959 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 293.390 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   4: 3576.461 ops/s
[info]                  ·gc.alloc.rate:                                  908.212 MB/sec
[info]                  ·gc.alloc.rate.norm:                             399728.114 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.159 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 69.815 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1016.384 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       447337.706 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                2052.008 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 3641.684 ops/s
[info]                  ·gc.alloc.rate:                                  924.874 MB/sec
[info]                  ·gc.alloc.rate.norm:                             399728.121 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.323 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.628 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       294165.433 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson":
[info]   3589.397 ±(99.9%) 116.199 ops/s [Average]
[info]   (min, avg, max) = (3567.369, 3589.397, 3641.684), stdev = 30.177
[info]   CI (99.9%): [3473.198, 3705.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   911.516 ±(99.9%) 29.657 MB/sec [Average]
[info]   (min, avg, max) = (905.939, 911.516, 924.874), stdev = 7.702
[info]   CI (99.9%): [881.858, 941.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   399728.901 ±(99.9%) 6.764 B/op [Average]
[info]   (min, avg, max) = (399728.114, 399728.901, 399732.044), stdev = 1.757
[info]   CI (99.9%): [399722.137, 399735.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.032 ±(99.9%) 0.273 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.032, 0.159), stdev = 0.071
[info]   CI (99.9%): [≈ 0, 0.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   14.028 ±(99.9%) 120.088 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14.028, 69.815), stdev = 31.186
[info]   CI (99.9%): [≈ 0, 134.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   875.489 ±(99.9%) 704.122 MB/sec [Average]
[info]   (min, avg, max) = (669.938, 875.489, 1016.384), stdev = 182.858
[info]   CI (99.9%): [171.367, 1579.611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   384356.944 ±(99.9%) 317540.519 B/op [Average]
[info]   (min, avg, max) = (293916.817, 384356.944, 447337.706), stdev = 82464.264
[info]   CI (99.9%): [66816.425, 701897.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.821 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.662), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   469.080 ±(99.9%) 3442.310 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 469.080, 2052.008), stdev = 893.957
[info]   CI (99.9%): [≈ 0, 3911.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.600, 13.000), stdev = 4.722
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce
[info] # Run progress: 64.32% complete, ETA 00:28:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10720.162 ops/s
[info] # Warmup Iteration   2: 14053.437 ops/s
[info] # Warmup Iteration   3: 14382.456 ops/s
[info] Iteration   1: 14424.826 ops/s
[info]                  ·gc.alloc.rate:                   802.574 MB/sec
[info]                  ·gc.alloc.rate.norm:              87584.030 B/op
[info]                  ·gc.churn.G1_Old_Gen:             671.962 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        73330.551 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 72.676 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 14150.555 ops/s
[info]                  ·gc.alloc.rate:                   787.670 MB/sec
[info]                  ·gc.alloc.rate.norm:              87612.540 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.452 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        112170.145 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 74.089 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 14450.758 ops/s
[info]                  ·gc.alloc.rate:            804.972 MB/sec
[info]                  ·gc.alloc.rate.norm:       87648.030 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.313 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 73203.707 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 14362.510 ops/s
[info]                  ·gc.alloc.rate:                   799.910 MB/sec
[info]                  ·gc.alloc.rate.norm:              87648.028 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.531 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        110507.035 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 510.931 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   5: 14085.629 ops/s
[info]                  ·gc.alloc.rate:                                  784.313 MB/sec
[info]                  ·gc.alloc.rate.norm:                             87643.284 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.215 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 24.066 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.678 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       76062.508 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce":
[info]   14294.856 ±(99.9%) 639.640 ops/s [Average]
[info]   (min, avg, max) = (14085.629, 14294.856, 14450.758), stdev = 166.112
[info]   CI (99.9%): [13655.216, 14934.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   795.888 ±(99.9%) 35.757 MB/sec [Average]
[info]   (min, avg, max) = (784.313, 795.888, 804.972), stdev = 9.286
[info]   CI (99.9%): [760.131, 831.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   87627.183 ±(99.9%) 108.997 B/op [Average]
[info]   (min, avg, max) = (87584.030, 87627.183, 87648.030), stdev = 28.306
[info]   CI (99.9%): [87518.186, 87736.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.043 ±(99.9%) 0.371 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.043, 0.215), stdev = 0.096
[info]   CI (99.9%): [≈ 0, 0.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   4.813 ±(99.9%) 41.444 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.813, 24.066), stdev = 10.763
[info]   CI (99.9%): [≈ 0, 46.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   808.387 ±(99.9%) 703.522 MB/sec [Average]
[info]   (min, avg, max) = (671.962, 808.387, 1008.531), stdev = 182.702
[info]   CI (99.9%): [104.865, 1511.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   89054.789 ±(99.9%) 78486.722 B/op [Average]
[info]   (min, avg, max) = (73203.707, 89054.789, 112170.145), stdev = 20382.752
[info]   CI (99.9%): [10568.068, 167541.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   1.199 ±(99.9%) 7.566 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.199, 4.663), stdev = 1.965
[info]   CI (99.9%): [≈ 0, 8.765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   131.539 ±(99.9%) 828.802 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 131.539, 510.931), stdev = 215.237
[info]   CI (99.9%): [≈ 0, 960.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.000, 12.000), stdev = 3.937
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala
[info] # Run progress: 64.59% complete, ETA 00:28:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9266.924 ops/s
[info] # Warmup Iteration   2: 15825.045 ops/s
[info] # Warmup Iteration   3: 15986.812 ops/s
[info] Iteration   1: 15976.839 ops/s
[info]                  ·gc.alloc.rate:                   827.568 MB/sec
[info]                  ·gc.alloc.rate.norm:              81536.150 B/op
[info]                  ·gc.churn.G1_Old_Gen:             670.666 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        66077.349 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 65.618 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 15605.867 ops/s
[info]                  ·gc.alloc.rate:            808.404 MB/sec
[info]                  ·gc.alloc.rate.norm:       81536.026 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.060 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 101572.613 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   3: 16094.125 ops/s
[info]                  ·gc.alloc.rate:                   833.650 MB/sec
[info]                  ·gc.alloc.rate.norm:              81536.027 B/op
[info]                  ·gc.churn.G1_Old_Gen:             670.643 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        65592.995 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 65.137 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 16122.594 ops/s
[info]                  ·gc.alloc.rate:                                  835.482 MB/sec
[info]                  ·gc.alloc.rate.norm:                             81535.913 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.046 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.532 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1012.090 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       98771.360 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                455.168 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   5: 16295.200 ops/s
[info]                  ·gc.alloc.rate:                                  844.207 MB/sec
[info]                  ·gc.alloc.rate.norm:                             81536.027 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.060 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.785 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.753 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       65749.106 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala":
[info]   16018.925 ±(99.9%) 991.341 ops/s [Average]
[info]   (min, avg, max) = (15605.867, 16018.925, 16295.200), stdev = 257.448
[info]   CI (99.9%): [15027.584, 17010.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   829.862 ±(99.9%) 51.570 MB/sec [Average]
[info]   (min, avg, max) = (808.404, 829.862, 844.207), stdev = 13.393
[info]   CI (99.9%): [778.292, 881.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   81536.029 ±(99.9%) 0.323 B/op [Average]
[info]   (min, avg, max) = (81535.913, 81536.029, 81536.150), stdev = 0.084
[info]   CI (99.9%): [81535.706, 81536.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.021 ±(99.9%) 0.114 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.060), stdev = 0.030
[info]   CI (99.9%): [≈ 0, 0.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.064 ±(99.9%) 11.013 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.064, 5.785), stdev = 2.860
[info]   CI (99.9%): [≈ 0, 13.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   808.242 ±(99.9%) 707.924 MB/sec [Average]
[info]   (min, avg, max) = (670.643, 808.242, 1012.090), stdev = 183.846
[info]   CI (99.9%): [100.319, 1516.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   79552.684 ±(99.9%) 72583.134 B/op [Average]
[info]   (min, avg, max) = (65592.995, 79552.684, 101572.613), stdev = 18849.609
[info]   CI (99.9%): [6969.550, 152135.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.199 ±(99.9%) 7.568 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.199, 4.664), stdev = 1.965
[info]   CI (99.9%): [≈ 0, 8.767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   117.185 ±(99.9%) 738.343 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 117.185, 455.168), stdev = 191.745
[info]   CI (99.9%): [≈ 0, 855.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.600, 13.000), stdev = 4.037
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala
[info] # Run progress: 64.86% complete, ETA 00:27:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 226891.440 ops/s
[info] # Warmup Iteration   2: 255333.735 ops/s
[info] # Warmup Iteration   3: 268752.969 ops/s
[info] Iteration   1: 268295.857 ops/s
[info]                  ·gc.alloc.rate:            946.550 MB/sec
[info]                  ·gc.alloc.rate.norm:       5552.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.275 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5919.920 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 266931.540 ops/s
[info]                  ·gc.alloc.rate:            941.741 MB/sec
[info]                  ·gc.alloc.rate.norm:       5552.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.293 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5950.253 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 264898.671 ops/s
[info]                  ·gc.alloc.rate:                   934.251 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.956 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5995.956 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 23.746 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 262761.772 ops/s
[info]                  ·gc.alloc.rate:                                  926.804 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5552.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.141 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.844 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.058 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6116.624 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 260976.739 ops/s
[info]                  ·gc.alloc.rate:                                  920.544 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5552.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.725 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4105.604 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala":
[info]   264772.916 ±(99.9%) 11478.253 ops/s [Average]
[info]   (min, avg, max) = (260976.739, 264772.916, 268295.857), stdev = 2980.866
[info]   CI (99.9%): [253294.663, 276251.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   933.978 ±(99.9%) 40.857 MB/sec [Average]
[info]   (min, avg, max) = (920.544, 933.978, 946.550), stdev = 10.610
[info]   CI (99.9%): [893.121, 974.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5552.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5552.002, 5552.002, 5552.002), stdev = 0.001
[info]   CI (99.9%): [5552.001, 5552.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.028 ±(99.9%) 0.242 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.141), stdev = 0.063
[info]   CI (99.9%): [≈ 0, 0.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.169 ±(99.9%) 1.452 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.169, 0.844), stdev = 0.377
[info]   CI (99.9%): [≈ 0, 1.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   945.861 ±(99.9%) 571.070 MB/sec [Average]
[info]   (min, avg, max) = (680.725, 945.861, 1021.058), stdev = 148.305
[info]   CI (99.9%): [374.792, 1516.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   5617.671 ±(99.9%) 3267.587 B/op [Average]
[info]   (min, avg, max) = (4105.604, 5617.671, 6116.624), stdev = 848.582
[info]   CI (99.9%): [2350.084, 8885.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   4.749 ±(99.9%) 40.893 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.749, 23.746), stdev = 10.620
[info]   CI (99.9%): [≈ 0, 45.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 6.600, 10.000), stdev = 4.278
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 65.14% complete, ETA 00:27:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 258913.131 ops/s
[info] # Warmup Iteration   2: 285827.811 ops/s
[info] # Warmup Iteration   3: 275541.014 ops/s
[info] Iteration   1: 279279.882 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 285244.437 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 288763.898 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 288575.170 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 288673.254 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   286107.328 ±(99.9%) 15770.042 ops/s [Average]
[info]   (min, avg, max) = (279279.882, 286107.328, 288763.898), stdev = 4095.430
[info]   CI (99.9%): [270337.286, 301877.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson
[info] # Run progress: 65.41% complete, ETA 00:27:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10005.550 ops/s
[info] # Warmup Iteration   2: 14777.761 ops/s
[info] # Warmup Iteration   3: 14995.506 ops/s
[info] Iteration   1: 14901.018 ops/s
[info]                  ·gc.alloc.rate:            827.479 MB/sec
[info]                  ·gc.alloc.rate.norm:       87416.030 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1006.966 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 106377.275 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 14637.394 ops/s
[info]                  ·gc.alloc.rate:            812.821 MB/sec
[info]                  ·gc.alloc.rate.norm:       87416.028 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.310 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 72197.036 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 14739.542 ops/s
[info]                  ·gc.alloc.rate:            818.599 MB/sec
[info]                  ·gc.alloc.rate.norm:       87415.897 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.040 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 107538.962 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   4: 14811.268 ops/s
[info]                  ·gc.alloc.rate:                   822.814 MB/sec
[info]                  ·gc.alloc.rate.norm:              87416.028 B/op
[info]                  ·gc.churn.G1_Old_Gen:             671.582 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        71349.035 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 495.479 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 15001.221 ops/s
[info]                  ·gc.alloc.rate:                                  833.093 MB/sec
[info]                  ·gc.alloc.rate.norm:                             87412.644 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.203 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 21.313 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.666 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       71419.172 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson":
[info]   14818.089 ±(99.9%) 542.112 ops/s [Average]
[info]   (min, avg, max) = (14637.394, 14818.089, 15001.221), stdev = 140.785
[info]   CI (99.9%): [14275.977, 15360.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   822.961 ±(99.9%) 30.133 MB/sec [Average]
[info]   (min, avg, max) = (812.821, 822.961, 833.093), stdev = 7.825
[info]   CI (99.9%): [792.828, 853.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   87415.325 ±(99.9%) 5.775 B/op [Average]
[info]   (min, avg, max) = (87412.644, 87415.325, 87416.030), stdev = 1.500
[info]   CI (99.9%): [87409.550, 87421.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.041 ±(99.9%) 0.350 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.041, 0.203), stdev = 0.091
[info]   CI (99.9%): [≈ 0, 0.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   4.263 ±(99.9%) 36.703 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.263, 21.313), stdev = 9.532
[info]   CI (99.9%): [≈ 0, 40.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   807.513 ±(99.9%) 701.386 MB/sec [Average]
[info]   (min, avg, max) = (671.310, 807.513, 1007.040), stdev = 182.148
[info]   CI (99.9%): [106.127, 1508.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   85776.296 ±(99.9%) 74484.910 B/op [Average]
[info]   (min, avg, max) = (71349.035, 85776.296, 107538.962), stdev = 19343.495
[info]   CI (99.9%): [11291.386, 160261.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.031 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.664), stdev = 2.086
[info]   CI (99.9%): [≈ 0, 8.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   99.096 ±(99.9%) 853.245 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 99.096, 495.479), stdev = 221.585
[info]   CI (99.9%): [≈ 0, 952.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 9.000, 13.000), stdev = 4.528
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce
[info] # Run progress: 65.68% complete, ETA 00:27:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 524594.258 ops/s
[info] # Warmup Iteration   2: 808728.024 ops/s
[info] # Warmup Iteration   3: 814189.558 ops/s
[info] Iteration   1: 827338.383 ops/s
[info]                  ·gc.alloc.rate:            2665.854 MB/sec
[info]                  ·gc.alloc.rate.norm:       5072.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2722.795 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5180.337 B/op
[info]                  ·gc.count:                 8.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 829560.642 ops/s
[info]                  ·gc.alloc.rate:                                  2672.520 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5072.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.290 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5166.457 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 817970.278 ops/s
[info]                  ·gc.alloc.rate:                                  2636.077 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5072.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.220 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5239.669 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   4: 819848.106 ops/s
[info]                  ·gc.alloc.rate:                                  2641.589 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5072.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.369 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4574.283 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 828414.967 ops/s
[info]                  ·gc.alloc.rate:                                  2670.159 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5072.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.618 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5173.547 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce":
[info]   824626.475 ±(99.9%) 20483.734 ops/s [Average]
[info]   (min, avg, max) = (817970.278, 824626.475, 829560.642), stdev = 5319.561
[info]   CI (99.9%): [804142.741, 845110.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.alloc.rate":
[info]   2657.240 ±(99.9%) 65.782 MB/sec [Average]
[info]   (min, avg, max) = (2636.077, 2657.240, 2672.520), stdev = 17.083
[info]   CI (99.9%): [2591.458, 2723.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5072.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5072.000, 5072.001, 5072.001), stdev = 0.001
[info]   CI (99.9%): [5072.000, 5072.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.006 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.004 ±(99.9%) 0.012 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.008), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2654.859 ±(99.9%) 586.558 MB/sec [Average]
[info]   (min, avg, max) = (2382.369, 2654.859, 2723.618), stdev = 152.327
[info]   CI (99.9%): [2068.301, 3241.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   5066.859 ±(99.9%) 1066.208 B/op [Average]
[info]   (min, avg, max) = (4574.283, 5066.859, 5239.669), stdev = 276.891
[info]   CI (99.9%): [4000.651, 6133.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.count":
[info]   39.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.800, 8.000), stdev = 0.447
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.200, 11.000), stdev = 2.280
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala
[info] # Run progress: 65.95% complete, ETA 00:26:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 592261.046 ops/s
[info] # Warmup Iteration   2: 1344984.340 ops/s
[info] # Warmup Iteration   3: 1374109.023 ops/s
[info] Iteration   1: 1368170.821 ops/s
[info]                  ·gc.alloc.rate:                   1286.641 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1344.970 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1547.094 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.766 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   2: 1377697.958 ops/s
[info]                  ·gc.alloc.rate:                                  1295.248 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1480.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.042 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.048 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1012.971 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1157.460 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                4.566 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   3: 1374154.624 ops/s
[info]                  ·gc.alloc.rate:                                  1292.185 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1480.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.074 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.085 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.594 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1559.498 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 1391320.000 ops/s
[info]                  ·gc.alloc.rate:                                  1308.598 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1480.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.880 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1540.262 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 1379366.366 ops/s
[info]                  ·gc.alloc.rate:            1297.071 MB/sec
[info]                  ·gc.alloc.rate.norm:       1480.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.554 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1553.577 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala":
[info]   1378141.954 ±(99.9%) 32825.442 ops/s [Average]
[info]   (min, avg, max) = (1368170.821, 1378141.954, 1391320.000), stdev = 8524.663
[info]   CI (99.9%): [1345316.512, 1410967.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1295.949 ±(99.9%) 31.197 MB/sec [Average]
[info]   (min, avg, max) = (1286.641, 1295.949, 1308.598), stdev = 8.102
[info]   CI (99.9%): [1264.752, 1327.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1480.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1480.000, 1480.000, 1480.000), stdev = 0.001
[info]   CI (99.9%): [1480.000, 1480.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.023 ±(99.9%) 0.130 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.074), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.027 ±(99.9%) 0.149 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.085), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1288.594 ±(99.9%) 593.951 MB/sec [Average]
[info]   (min, avg, max) = (1012.971, 1288.594, 1361.880), stdev = 154.247
[info]   CI (99.9%): [694.642, 1882.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1471.578 ±(99.9%) 676.727 B/op [Average]
[info]   (min, avg, max) = (1157.460, 1471.578, 1559.498), stdev = 175.744
[info]   CI (99.9%): [794.851, 2148.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.687 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.066 ±(99.9%) 7.640 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.566), stdev = 1.984
[info]   CI (99.9%): [≈ 0, 8.707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.600, 17.000), stdev = 6.229
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala
[info] # Run progress: 66.22% complete, ETA 00:26:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7074741.570 ops/s
[info] # Warmup Iteration   2: 7643882.943 ops/s
[info] # Warmup Iteration   3: 7920358.967 ops/s
[info] Iteration   1: 7875680.888 ops/s
[info]                  ·gc.alloc.rate:                                  1961.271 MB/sec
[info]                  ·gc.alloc.rate.norm:                             392.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.107 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.044 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       408.144 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 7871390.346 ops/s
[info]                  ·gc.alloc.rate:                                  1960.046 MB/sec
[info]                  ·gc.alloc.rate.norm:                             392.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.808 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       408.352 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 7542525.615 ops/s
[info]                  ·gc.alloc.rate:                                  1878.326 MB/sec
[info]                  ·gc.alloc.rate.norm:                             392.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.696 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       355.138 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 7545473.474 ops/s
[info]                  ·gc.alloc.rate:            1879.143 MB/sec
[info]                  ·gc.alloc.rate.norm:       392.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2042.176 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 426.010 B/op
[info]                  ·gc.count:                 6.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 7831466.198 ops/s
[info]                  ·gc.alloc.rate:                                  1950.894 MB/sec
[info]                  ·gc.alloc.rate.norm:                             392.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.711 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       410.449 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala":
[info]   7733307.304 ±(99.9%) 668759.227 ops/s [Average]
[info]   (min, avg, max) = (7542525.615, 7733307.304, 7875680.888), stdev = 173674.648
[info]   CI (99.9%): [7064548.077, 8402066.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1925.936 ±(99.9%) 166.640 MB/sec [Average]
[info]   (min, avg, max) = (1878.326, 1925.936, 1961.271), stdev = 43.276
[info]   CI (99.9%): [1759.296, 2092.576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   392.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (392.000, 392.000, 392.000), stdev = 0.001
[info]   CI (99.9%): [392.000, 392.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.023 ±(99.9%) 0.182 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.107), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.005 ±(99.9%) 0.036 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1974.087 ±(99.9%) 586.343 MB/sec [Average]
[info]   (min, avg, max) = (1701.696, 1974.087, 2042.711), stdev = 152.271
[info]   CI (99.9%): [1387.744, 2560.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   401.619 ±(99.9%) 104.061 B/op [Average]
[info]   (min, avg, max) = (355.138, 401.619, 426.010), stdev = 27.024
[info]   CI (99.9%): [297.557, 505.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson
[info] # Run progress: 66.49% complete, ETA 00:26:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 50476.502 ops/s
[info] # Warmup Iteration   2: 280240.874 ops/s
[info] # Warmup Iteration   3: 278764.160 ops/s
[info] Iteration   1: 288951.155 ops/s
[info]                  ·gc.alloc.rate:                   1795.955 MB/sec
[info]                  ·gc.alloc.rate.norm:              9784.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1683.704 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        9172.477 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 25.398 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         20.000 ms
[info] Iteration   2: 290810.171 ops/s
[info]                  ·gc.alloc.rate:                                  1807.706 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9784.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.199 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.079 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.931 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9211.507 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 290892.924 ops/s
[info]                  ·gc.alloc.rate:                                  1808.227 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9784.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.337 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11050.731 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        13.000 ms
[info] Iteration   4: 293493.303 ops/s
[info]                  ·gc.alloc.rate:                                  1824.528 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9784.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.027 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9127.092 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 293642.106 ops/s
[info]                  ·gc.alloc.rate:                                  1825.317 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9784.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.328 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10947.214 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson":
[info]   291557.932 ±(99.9%) 7673.830 ops/s [Average]
[info]   (min, avg, max) = (288951.155, 291557.932, 293642.106), stdev = 1992.869
[info]   CI (99.9%): [283884.101, 299231.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1812.347 ±(99.9%) 48.088 MB/sec [Average]
[info]   (min, avg, max) = (1795.955, 1812.347, 1825.317), stdev = 12.488
[info]   CI (99.9%): [1764.259, 1860.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   9784.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9784.001, 9784.001, 9784.002), stdev = 0.001
[info]   CI (99.9%): [9784.001, 9784.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.041 ±(99.9%) 0.340 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.041, 0.199), stdev = 0.088
[info]   CI (99.9%): [≈ 0, 0.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.224 ±(99.9%) 1.841 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.224, 1.079), stdev = 0.478
[info]   CI (99.9%): [≈ 0, 2.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1834.465 ±(99.9%) 731.247 MB/sec [Average]
[info]   (min, avg, max) = (1683.704, 1834.465, 2042.337), stdev = 189.903
[info]   CI (99.9%): [1103.218, 2565.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   9901.804 ±(99.9%) 3860.989 B/op [Average]
[info]   (min, avg, max) = (9127.092, 9901.804, 11050.731), stdev = 1002.687
[info]   CI (99.9%): [6040.815, 13762.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   5.080 ±(99.9%) 43.738 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.080, 25.398), stdev = 11.359
[info]   CI (99.9%): [≈ 0, 48.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 9.000, 20.000), stdev = 7.280
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce
[info] # Run progress: 66.76% complete, ETA 00:26:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 554082.539 ops/s
[info] # Warmup Iteration   2: 970057.891 ops/s
[info] # Warmup Iteration   3: 964393.811 ops/s
[info] Iteration   1: 1011920.315 ops/s
[info]                  ·gc.alloc.rate:                                  2165.096 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3368.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.142 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.220 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2379.020 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3700.778 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                5.180 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   2: 1007897.869 ops/s
[info]                  ·gc.alloc.rate:                                  2156.352 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3368.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.943 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3189.305 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 1009490.061 ops/s
[info]                  ·gc.alloc.rate:            2159.978 MB/sec
[info]                  ·gc.alloc.rate.norm:       3368.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2382.463 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3714.915 B/op
[info]                  ·gc.count:                 7.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 1009794.496 ops/s
[info]                  ·gc.alloc.rate:                                  2160.656 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3368.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.132 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3183.248 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 1001699.093 ops/s
[info]                  ·gc.alloc.rate:                                  2143.183 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3368.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.985 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3208.969 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce":
[info]   1008160.367 ±(99.9%) 14962.197 ops/s [Average]
[info]   (min, avg, max) = (1001699.093, 1008160.367, 1011920.315), stdev = 3885.635
[info]   CI (99.9%): [993198.169, 1023122.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.alloc.rate":
[info]   2157.053 ±(99.9%) 32.164 MB/sec [Average]
[info]   (min, avg, max) = (2143.183, 2157.053, 2165.096), stdev = 8.353
[info]   CI (99.9%): [2124.889, 2189.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3368.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3368.000, 3368.000, 3368.000), stdev = 0.001
[info]   CI (99.9%): [3368.000, 3368.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.029 ±(99.9%) 0.241 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.142), stdev = 0.063
[info]   CI (99.9%): [≈ 0, 0.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.046 ±(99.9%) 0.376 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.220), stdev = 0.098
[info]   CI (99.9%): [≈ 0, 0.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   2177.509 ±(99.9%) 714.407 MB/sec [Average]
[info]   (min, avg, max) = (2041.943, 2177.509, 2382.463), stdev = 185.529
[info]   CI (99.9%): [1463.102, 2891.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   3399.443 ±(99.9%) 1084.871 B/op [Average]
[info]   (min, avg, max) = (3183.248, 3399.443, 3714.915), stdev = 281.738
[info]   CI (99.9%): [2314.571, 4484.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   1.036 ±(99.9%) 8.921 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.036, 5.180), stdev = 2.317
[info]   CI (99.9%): [≈ 0, 9.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 9.000), stdev = 1.924
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala
[info] # Run progress: 67.03% complete, ETA 00:26:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_8263f884/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 996548.509 ops/s
[info] # Warmup Iteration   2: 2739329.840 ops/s
[info] # Warmup Iteration   3: 2751144.465 ops/s
[info] Iteration   1: 2732080.955 ops/s
[info]                  ·gc.alloc.rate:                   1555.057 MB/sec
[info]                  ·gc.alloc.rate.norm:              896.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1342.588 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        773.578 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.302 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 2815959.702 ops/s
[info]                  ·gc.alloc.rate:                                  1602.921 MB/sec
[info]                  ·gc.alloc.rate.norm:                             896.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.056 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.031 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.097 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       950.879 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                0.372 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 2808860.436 ops/s
[info]                  ·gc.alloc.rate:                                  1599.456 MB/sec
[info]                  ·gc.alloc.rate.norm:                             896.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.376 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       953.655 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 2825451.176 ops/s
[info]                  ·gc.alloc.rate:            1608.551 MB/sec
[info]                  ·gc.alloc.rate.norm:       896.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.595 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 758.440 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 2769261.860 ops/s
[info]                  ·gc.alloc.rate:                                  1576.568 MB/sec
[info]                  ·gc.alloc.rate.norm:                             896.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.004 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       967.288 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala":
[info]   2790322.826 ±(99.9%) 150009.311 ops/s [Average]
[info]   (min, avg, max) = (2732080.955, 2790322.826, 2825451.176), stdev = 38956.942
[info]   CI (99.9%): [2640313.515, 2940332.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1588.511 ±(99.9%) 85.905 MB/sec [Average]
[info]   (min, avg, max) = (1555.057, 1588.511, 1608.551), stdev = 22.309
[info]   CI (99.9%): [1502.605, 1674.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   896.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (896.000, 896.000, 896.000), stdev = 0.001
[info]   CI (99.9%): [896.000, 896.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.012 ±(99.9%) 0.094 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.056), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.007 ±(99.9%) 0.053 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.031), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1561.932 ±(99.9%) 738.075 MB/sec [Average]
[info]   (min, avg, max) = (1342.588, 1561.932, 1702.376), stdev = 191.676
[info]   CI (99.9%): [823.857, 2300.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   880.768 ±(99.9%) 404.627 B/op [Average]
[info]   (min, avg, max) = (758.440, 880.768, 967.288), stdev = 105.080
[info]   CI (99.9%): [476.141, 1285.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.687 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.535 ±(99.9%) 3.855 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.535, 2.302), stdev = 1.001
[info]   CI (99.9%): [≈ 0, 4.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.600, 18.000), stdev = 6.387
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala
[info] # Run progress: 67.30% complete, ETA 00:25:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12645382.877 ops/s
[info] # Warmup Iteration   2: 13875292.378 ops/s
[info] # Warmup Iteration   3: 13857156.591 ops/s
[info] Iteration   1: 14175401.692 ops/s
[info]                  ·gc.alloc.rate:                   864.477 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.970 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        112.046 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.074 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 14295425.550 ops/s
[info]                  ·gc.alloc.rate:            871.901 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.415 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 74.146 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 14039530.837 ops/s
[info]                  ·gc.alloc.rate:                   856.204 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.694 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        113.210 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.075 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 13796992.688 ops/s
[info]                  ·gc.alloc.rate:                                  841.486 MB/sec
[info]                  ·gc.alloc.rate.norm:                             96.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.091 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.766 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       115.654 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                0.456 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 13601565.464 ops/s
[info]                  ·gc.alloc.rate:                                  829.732 MB/sec
[info]                  ·gc.alloc.rate.norm:                             96.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.117 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.858 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       78.775 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala":
[info]   13981783.246 ±(99.9%) 1085559.789 ops/s [Average]
[info]   (min, avg, max) = (13601565.464, 13981783.246, 14295425.550), stdev = 281916.430
[info]   CI (99.9%): [12896223.458, 15067343.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   852.760 ±(99.9%) 65.938 MB/sec [Average]
[info]   (min, avg, max) = (829.732, 852.760, 871.901), stdev = 17.124
[info]   CI (99.9%): [786.822, 918.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   96.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (96.000, 96.000, 96.000), stdev = 0.001
[info]   CI (99.9%): [96.000, 96.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.042 ±(99.9%) 0.223 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.117), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.005 ±(99.9%) 0.026 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.014), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   877.341 ±(99.9%) 703.853 MB/sec [Average]
[info]   (min, avg, max) = (673.415, 877.341, 1013.766), stdev = 182.788
[info]   CI (99.9%): [173.487, 1581.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   98.766 ±(99.9%) 78.820 B/op [Average]
[info]   (min, avg, max) = (74.146, 98.766, 115.654), stdev = 20.469
[info]   CI (99.9%): [19.946, 177.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 6.438 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 3.996), stdev = 1.672
[info]   CI (99.9%): [≈ 0, 7.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.121 ±(99.9%) 0.735 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.121, 0.456), stdev = 0.191
[info]   CI (99.9%): [≈ 0, 0.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.600, 10.000), stdev = 2.966
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 67.57% complete, ETA 00:25:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8648440.256 ops/s
[info] # Warmup Iteration   2: 10496436.641 ops/s
[info] # Warmup Iteration   3: 10555321.883 ops/s
[info] Iteration   1: 10223967.530 ops/s
[info]                  ·gc.alloc.rate:                   571.529 MB/sec
[info]                  ·gc.alloc.rate.norm:              88.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.649 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        103.570 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.103 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 10410729.028 ops/s
[info]                  ·gc.alloc.rate:            582.192 MB/sec
[info]                  ·gc.alloc.rate.norm:       88.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.573 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 101.812 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 10525828.978 ops/s
[info]                  ·gc.alloc.rate:            588.537 MB/sec
[info]                  ·gc.alloc.rate.norm:       88.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.807 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 100.600 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 10441038.218 ops/s
[info]                  ·gc.alloc.rate:                   583.849 MB/sec
[info]                  ·gc.alloc.rate.norm:              88.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             336.423 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        50.707 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.100 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 10355765.478 ops/s
[info]                  ·gc.alloc.rate:            578.939 MB/sec
[info]                  ·gc.alloc.rate.norm:       88.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.349 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 102.351 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScalaPrealloc":
[info]   10391465.847 ±(99.9%) 431427.422 ops/s [Average]
[info]   (min, avg, max) = (10223967.530, 10391465.847, 10525828.978), stdev = 112040.332
[info]   CI (99.9%): [9960038.424, 10822893.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   581.009 ±(99.9%) 24.376 MB/sec [Average]
[info]   (min, avg, max) = (571.529, 581.009, 588.537), stdev = 6.330
[info]   CI (99.9%): [556.633, 605.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   88.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (88.000, 88.000, 88.000), stdev = 0.001
[info]   CI (99.9%): [88.000, 88.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   605.760 ±(99.9%) 579.770 MB/sec [Average]
[info]   (min, avg, max) = (336.423, 605.760, 673.573), stdev = 150.564
[info]   CI (99.9%): [25.990, 1185.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   91.808 ±(99.9%) 88.568 B/op [Average]
[info]   (min, avg, max) = (50.707, 91.808, 103.570), stdev = 23.001
[info]   CI (99.9%): [3.240, 180.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm":
[info]   0.041 ±(99.9%) 0.214 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.041, 0.103), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 7.000), stdev = 1.517
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson
[info] # Run progress: 67.84% complete, ETA 00:25:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 63338.172 ops/s
[info] # Warmup Iteration   2: 460084.386 ops/s
[info] # Warmup Iteration   3: 461864.467 ops/s
[info] Iteration   1: 466922.982 ops/s
[info]                  ·gc.alloc.rate:                   1618.333 MB/sec
[info]                  ·gc.alloc.rate.norm:              5456.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1679.002 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5660.538 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 13.472 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         23.000 ms
[info] Iteration   2: 472343.771 ops/s
[info]                  ·gc.alloc.rate:                                  1637.800 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5456.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.219 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.729 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.197 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4534.553 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                2.220 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 473263.429 ops/s
[info]                  ·gc.alloc.rate:            1640.309 MB/sec
[info]                  ·gc.alloc.rate.norm:       5456.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.670 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5660.099 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 473251.154 ops/s
[info]                  ·gc.alloc.rate:                                  1640.305 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5456.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.705 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5660.231 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 457162.374 ops/s
[info]                  ·gc.alloc.rate:                                  1585.140 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5456.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.344 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5859.414 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson":
[info]   468588.742 ±(99.9%) 26610.406 ops/s [Average]
[info]   (min, avg, max) = (457162.374, 468588.742, 473263.429), stdev = 6910.638
[info]   CI (99.9%): [441978.336, 495199.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1624.377 ±(99.9%) 91.606 MB/sec [Average]
[info]   (min, avg, max) = (1585.140, 1624.377, 1640.309), stdev = 23.790
[info]   CI (99.9%): [1532.772, 1715.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5456.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5456.001, 5456.001, 5456.001), stdev = 0.001
[info]   CI (99.9%): [5456.001, 5456.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.044 ±(99.9%) 0.375 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.044, 0.219), stdev = 0.098
[info]   CI (99.9%): [≈ 0, 0.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.148 ±(99.9%) 1.251 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.148, 0.729), stdev = 0.325
[info]   CI (99.9%): [≈ 0, 1.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1629.183 ±(99.9%) 578.124 MB/sec [Average]
[info]   (min, avg, max) = (1361.197, 1629.183, 1702.344), stdev = 150.137
[info]   CI (99.9%): [1051.059, 2207.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   5474.967 ±(99.9%) 2051.359 B/op [Average]
[info]   (min, avg, max) = (4534.553, 5474.967, 5859.414), stdev = 532.731
[info]   CI (99.9%): [3423.608, 7526.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.687 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   3.138 ±(99.9%) 22.550 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.138, 13.472), stdev = 5.856
[info]   CI (99.9%): [≈ 0, 25.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 8.800, 23.000), stdev = 8.228
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala
[info] # Run progress: 68.11% complete, ETA 00:25:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 935985.211 ops/s
[info] # Warmup Iteration   2: 1864502.141 ops/s
[info] # Warmup Iteration   3: 1891922.463 ops/s
[info] Iteration   1: 1896389.121 ops/s
[info]                  ·gc.alloc.rate:            1147.175 MB/sec
[info]                  ·gc.alloc.rate.norm:       952.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.882 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 836.406 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 1882104.778 ops/s
[info]                  ·gc.alloc.rate:                   1138.009 MB/sec
[info]                  ·gc.alloc.rate.norm:              952.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1342.404 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1122.987 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.995 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.342 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   3: 1913141.810 ops/s
[info]                  ·gc.alloc.rate:                                  1157.031 MB/sec
[info]                  ·gc.alloc.rate.norm:                             952.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.068 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.056 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.342 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       839.533 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                0.548 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 1948840.581 ops/s
[info]                  ·gc.alloc.rate:                                  1178.663 MB/sec
[info]                  ·gc.alloc.rate.norm:                             952.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.405 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1099.600 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 1999938.182 ops/s
[info]                  ·gc.alloc.rate:            1209.466 MB/sec
[info]                  ·gc.alloc.rate.norm:       952.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.971 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 803.631 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala":
[info]   1928082.894 ±(99.9%) 181999.275 ops/s [Average]
[info]   (min, avg, max) = (1882104.778, 1928082.894, 1999938.182), stdev = 47264.634
[info]   CI (99.9%): [1746083.620, 2110082.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1166.069 ±(99.9%) 110.062 MB/sec [Average]
[info]   (min, avg, max) = (1138.009, 1166.069, 1209.466), stdev = 28.583
[info]   CI (99.9%): [1056.007, 1276.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   952.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (952.000, 952.000, 952.000), stdev = 0.001
[info]   CI (99.9%): [952.000, 952.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.014 ±(99.9%) 0.117 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.068), stdev = 0.030
[info]   CI (99.9%): [≈ 0, 0.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.011 ±(99.9%) 0.096 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.056), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1150.601 ±(99.9%) 708.369 MB/sec [Average]
[info]   (min, avg, max) = (1007.882, 1150.601, 1361.405), stdev = 183.961
[info]   CI (99.9%): [442.231, 1858.970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   940.431 ±(99.9%) 603.880 B/op [Average]
[info]   (min, avg, max) = (803.631, 940.431, 1122.987), stdev = 156.826
[info]   CI (99.9%): [336.551, 1544.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.686 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.995), stdev = 1.736
[info]   CI (99.9%): [≈ 0, 7.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.778 ±(99.9%) 5.595 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.778, 3.342), stdev = 1.453
[info]   CI (99.9%): [≈ 0, 6.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.800, 18.000), stdev = 7.259
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala
[info] # Run progress: 68.38% complete, ETA 00:25:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5711649.648 ops/s
[info] # Warmup Iteration   2: 8386122.645 ops/s
[info] # Warmup Iteration   3: 8784096.772 ops/s
[info] Iteration   1: 8710135.500 ops/s
[info]                  ·gc.alloc.rate:            1150.861 MB/sec
[info]                  ·gc.alloc.rate.norm:       208.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.943 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 182.712 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 8714863.612 ops/s
[info]                  ·gc.alloc.rate:            1151.452 MB/sec
[info]                  ·gc.alloc.rate.norm:       208.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.934 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 182.617 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 8530232.365 ops/s
[info]                  ·gc.alloc.rate:                                  1127.493 MB/sec
[info]                  ·gc.alloc.rate.norm:                             208.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.083 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1358.475 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       250.612 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                0.615 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 8154796.360 ops/s
[info]                  ·gc.alloc.rate:            1078.159 MB/sec
[info]                  ·gc.alloc.rate.norm:       208.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.604 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 197.089 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 8485583.820 ops/s
[info]                  ·gc.alloc.rate:            1121.280 MB/sec
[info]                  ·gc.alloc.rate.norm:       208.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.065 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 189.410 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala":
[info]   8519122.331 ±(99.9%) 879731.746 ops/s [Average]
[info]   (min, avg, max) = (8154796.360, 8519122.331, 8714863.612), stdev = 228463.541
[info]   CI (99.9%): [7639390.585, 9398854.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1125.849 ±(99.9%) 115.182 MB/sec [Average]
[info]   (min, avg, max) = (1078.159, 1125.849, 1151.452), stdev = 29.913
[info]   CI (99.9%): [1010.666, 1241.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   208.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (208.000, 208.000, 208.000), stdev = 0.001
[info]   CI (99.9%): [208.000, 208.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.017 ±(99.9%) 0.144 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.083), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.003 ±(99.9%) 0.027 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.015), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1084.604 ±(99.9%) 589.867 MB/sec [Average]
[info]   (min, avg, max) = (1010.934, 1084.604, 1358.475), stdev = 153.186
[info]   CI (99.9%): [494.738, 1674.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   200.488 ±(99.9%) 110.300 B/op [Average]
[info]   (min, avg, max) = (182.617, 200.488, 250.612), stdev = 28.644
[info]   CI (99.9%): [90.188, 310.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.737 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.123 ±(99.9%) 1.058 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.123, 0.615), stdev = 0.275
[info]   CI (99.9%): [≈ 0, 1.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.600, 9.000), stdev = 3.286
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson
[info] # Run progress: 68.65% complete, ETA 00:24:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 90788.471 ops/s
[info] # Warmup Iteration   2: 318982.506 ops/s
[info] # Warmup Iteration   3: 322060.648 ops/s
[info] Iteration   1: 324495.968 ops/s
[info]                  ·gc.alloc.rate:                   1477.460 MB/sec
[info]                  ·gc.alloc.rate.norm:              7168.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1343.906 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        6520.059 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.231 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 322377.041 ops/s
[info]                  ·gc.alloc.rate:                                  1467.991 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7168.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.063 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.306 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1357.378 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6627.891 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                19.513 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   3: 317156.082 ops/s
[info]                  ·gc.alloc.rate:            1444.529 MB/sec
[info]                  ·gc.alloc.rate.norm:       7168.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.687 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6756.923 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 317528.113 ops/s
[info]                  ·gc.alloc.rate:                                  1446.375 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7168.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.293 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8436.287 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 318529.903 ops/s
[info]                  ·gc.alloc.rate:                                  1450.567 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7168.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.455 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6727.654 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson":
[info]   320017.421 ±(99.9%) 12510.418 ops/s [Average]
[info]   (min, avg, max) = (317156.082, 320017.421, 324495.968), stdev = 3248.916
[info]   CI (99.9%): [307507.004, 332527.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1457.384 ±(99.9%) 56.081 MB/sec [Average]
[info]   (min, avg, max) = (1444.529, 1457.384, 1477.460), stdev = 14.564
[info]   CI (99.9%): [1401.303, 1513.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   7168.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7168.001, 7168.001, 7168.001), stdev = 0.001
[info]   CI (99.9%): [7168.001, 7168.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.014 ±(99.9%) 0.106 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.063), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.066 ±(99.9%) 0.516 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.066, 0.306), stdev = 0.134
[info]   CI (99.9%): [≈ 0, 0.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1425.344 ±(99.9%) 596.807 MB/sec [Average]
[info]   (min, avg, max) = (1343.906, 1425.344, 1702.293), stdev = 154.989
[info]   CI (99.9%): [828.537, 2022.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   7013.763 ±(99.9%) 3082.945 B/op [Average]
[info]   (min, avg, max) = (6520.059, 7013.763, 8436.287), stdev = 800.631
[info]   CI (99.9%): [3930.818, 10096.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   4.549 ±(99.9%) 32.659 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.549, 19.513), stdev = 8.481
[info]   CI (99.9%): [≈ 0, 37.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.600, 18.000), stdev = 6.269
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala
[info] # Run progress: 68.92% complete, ETA 00:24:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_8263f884/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 1243107.568 ops/s
[info] # Warmup Iteration   2: 2172374.749 ops/s
[info] # Warmup Iteration   3: 2298854.586 ops/s
[info] Iteration   1: 2260460.291 ops/s
[info]                  ·gc.alloc.rate:            1194.703 MB/sec
[info]                  ·gc.alloc.rate.norm:       832.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1342.590 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 934.990 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   2: 2242009.142 ops/s
[info]                  ·gc.alloc.rate:                   1184.936 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.644 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        945.544 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.273 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   3: 2337150.682 ops/s
[info]                  ·gc.alloc.rate:                                  1235.329 MB/sec
[info]                  ·gc.alloc.rate.norm:                             832.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.063 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.042 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.066 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       687.693 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   4: 2322561.683 ops/s
[info]                  ·gc.alloc.rate:                                  1227.713 MB/sec
[info]                  ·gc.alloc.rate.norm:                             832.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.495 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       922.662 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 2323771.636 ops/s
[info]                  ·gc.alloc.rate:                                  1228.357 MB/sec
[info]                  ·gc.alloc.rate.norm:                             832.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.098 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       691.618 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala":
[info]   2297190.687 ±(99.9%) 164962.687 ops/s [Average]
[info]   (min, avg, max) = (2242009.142, 2297190.687, 2337150.682), stdev = 42840.286
[info]   CI (99.9%): [2132228.000, 2462153.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1214.207 ±(99.9%) 87.512 MB/sec [Average]
[info]   (min, avg, max) = (1184.936, 1214.207, 1235.329), stdev = 22.727
[info]   CI (99.9%): [1126.695, 1301.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   832.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (832.000, 832.000, 832.000), stdev = 0.001
[info]   CI (99.9%): [832.000, 832.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.013 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.063), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.009 ±(99.9%) 0.073 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1218.579 ±(99.9%) 694.758 MB/sec [Average]
[info]   (min, avg, max) = (1021.066, 1218.579, 1361.495), stdev = 180.426
[info]   CI (99.9%): [523.821, 1913.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   836.501 ±(99.9%) 517.153 B/op [Average]
[info]   (min, avg, max) = (687.693, 836.501, 945.544), stdev = 134.303
[info]   CI (99.9%): [319.349, 1353.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.655 ±(99.9%) 5.637 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.655, 3.273), stdev = 1.464
[info]   CI (99.9%): [≈ 0, 6.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.200, 18.000), stdev = 7.662
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala
[info] # Run progress: 69.19% complete, ETA 00:24:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5568457.849 ops/s
[info] # Warmup Iteration   2: 6080516.188 ops/s
[info] # Warmup Iteration   3: 6154914.066 ops/s
[info] Iteration   1: 6085224.604 ops/s
[info]                  ·gc.alloc.rate:                   927.726 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.619 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        174.005 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.172 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 6095587.627 ops/s
[info]                  ·gc.alloc.rate:                   929.336 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1010.299 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        260.909 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.172 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 6095083.027 ops/s
[info]                  ·gc.alloc.rate:                   929.245 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.978 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        260.593 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.032 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 6375491.680 ops/s
[info]                  ·gc.alloc.rate:                                  972.337 MB/sec
[info]                  ·gc.alloc.rate.norm:                             240.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.103 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.025 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.353 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       252.099 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 6285408.019 ops/s
[info]                  ·gc.alloc.rate:            958.323 MB/sec
[info]                  ·gc.alloc.rate.norm:       240.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.065 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 255.713 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala":
[info]   6187358.991 ±(99.9%) 517964.535 ops/s [Average]
[info]   (min, avg, max) = (6085224.604, 6187358.991, 6375491.680), stdev = 134513.745
[info]   CI (99.9%): [5669394.456, 6705323.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   943.393 ±(99.9%) 79.474 MB/sec [Average]
[info]   (min, avg, max) = (927.726, 943.393, 972.337), stdev = 20.639
[info]   CI (99.9%): [863.920, 1022.867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   240.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (240.000, 240.000, 240.000), stdev = 0.001
[info]   CI (99.9%): [240.000, 240.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.021 ±(99.9%) 0.177 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.103), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.005 ±(99.9%) 0.044 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.025), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   946.863 ±(99.9%) 590.753 MB/sec [Average]
[info]   (min, avg, max) = (672.619, 946.863, 1021.353), stdev = 153.417
[info]   CI (99.9%): [356.110, 1537.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   240.664 ±(99.9%) 144.177 B/op [Average]
[info]   (min, avg, max) = (174.005, 240.664, 260.909), stdev = 37.442
[info]   CI (99.9%): [96.487, 384.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 6.437 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 3.996), stdev = 1.672
[info]   CI (99.9%): [≈ 0, 7.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.275 ±(99.9%) 1.662 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.275, 1.032), stdev = 0.432
[info]   CI (99.9%): [≈ 0, 1.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.800, 9.000), stdev = 3.271
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 69.46% complete, ETA 00:24:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5575748.286 ops/s
[info] # Warmup Iteration   2: 6347469.088 ops/s
[info] # Warmup Iteration   3: 6551680.551 ops/s
[info] Iteration   1: 6374333.846 ops/s
[info]                  ·gc.alloc.rate:                   777.422 MB/sec
[info]                  ·gc.alloc.rate.norm:              192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.623 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        249.347 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.164 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 6443455.642 ops/s
[info]                  ·gc.alloc.rate:                   785.898 MB/sec
[info]                  ·gc.alloc.rate.norm:              192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.662 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        164.336 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.163 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 6468006.586 ops/s
[info]                  ·gc.alloc.rate:            789.052 MB/sec
[info]                  ·gc.alloc.rate.norm:       192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.132 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 164.036 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 6448760.830 ops/s
[info]                  ·gc.alloc.rate:                   786.645 MB/sec
[info]                  ·gc.alloc.rate.norm:              192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.810 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        246.469 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.975 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 6184185.664 ops/s
[info]                  ·gc.alloc.rate:                                  754.348 MB/sec
[info]                  ·gc.alloc.rate.norm:                             192.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.097 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.025 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.742 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       173.266 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScalaPrealloc":
[info]   6383748.514 ±(99.9%) 450726.598 ops/s [Average]
[info]   (min, avg, max) = (6184185.664, 6383748.514, 6468006.586), stdev = 117052.266
[info]   CI (99.9%): [5933021.915, 6834475.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   778.673 ±(99.9%) 55.024 MB/sec [Average]
[info]   (min, avg, max) = (754.348, 778.673, 789.052), stdev = 14.289
[info]   CI (99.9%): [723.649, 833.697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   192.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (192.000, 192.000, 192.000), stdev = 0.001
[info]   CI (99.9%): [192.000, 192.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.019 ±(99.9%) 0.167 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.097), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.005 ±(99.9%) 0.043 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.025), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   809.394 ±(99.9%) 704.260 MB/sec [Average]
[info]   (min, avg, max) = (672.662, 809.394, 1009.810), stdev = 182.894
[info]   CI (99.9%): [105.134, 1513.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   199.491 ±(99.9%) 170.836 B/op [Average]
[info]   (min, avg, max) = (164.036, 199.491, 249.347), stdev = 44.366
[info]   CI (99.9%): [28.655, 370.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 6.438 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 3.997), stdev = 1.672
[info]   CI (99.9%): [≈ 0, 7.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm":
[info]   0.261 ±(99.9%) 1.571 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.261, 0.975), stdev = 0.408
[info]   CI (99.9%): [≈ 0, 1.831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.400, 9.000), stdev = 2.881
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson
[info] # Run progress: 69.73% complete, ETA 00:23:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 124804.532 ops/s
[info] # Warmup Iteration   2: 568723.146 ops/s
[info] # Warmup Iteration   3: 574966.139 ops/s
[info] Iteration   1: 567125.046 ops/s
[info]                  ·gc.alloc.rate:                   1642.749 MB/sec
[info]                  ·gc.alloc.rate.norm:              4560.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1343.899 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3730.443 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 12.940 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 567639.356 ops/s
[info]                  ·gc.alloc.rate:                                  1645.000 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4560.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.047 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.130 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.643 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4717.018 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1.847 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   3: 556539.328 ops/s
[info]                  ·gc.alloc.rate:                                  1612.278 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4560.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.791 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4813.170 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 561226.311 ops/s
[info]                  ·gc.alloc.rate:                                  1626.330 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4560.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.252 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4772.878 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 562169.948 ops/s
[info]                  ·gc.alloc.rate:                                  1628.796 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4560.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.026 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4765.017 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson":
[info]   562939.998 ±(99.9%) 17656.039 ops/s [Average]
[info]   (min, avg, max) = (556539.328, 562939.998, 567639.356), stdev = 4585.217
[info]   CI (99.9%): [545283.958, 580596.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1631.030 ±(99.9%) 51.346 MB/sec [Average]
[info]   (min, avg, max) = (1612.278, 1631.030, 1645.000), stdev = 13.334
[info]   CI (99.9%): [1579.684, 1682.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4560.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4560.001, 4560.001, 4560.001), stdev = 0.001
[info]   CI (99.9%): [4560.001, 4560.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.010 ±(99.9%) 0.079 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.047), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.028 ±(99.9%) 0.219 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.130), stdev = 0.057
[info]   CI (99.9%): [≈ 0, 0.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1630.322 ±(99.9%) 616.548 MB/sec [Average]
[info]   (min, avg, max) = (1343.899, 1630.322, 1702.252), stdev = 160.116
[info]   CI (99.9%): [1013.774, 2246.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   4559.705 ±(99.9%) 1789.891 B/op [Average]
[info]   (min, avg, max) = (3730.443, 4559.705, 4813.170), stdev = 464.829
[info]   CI (99.9%): [2769.814, 6349.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.820 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.662), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   2.957 ±(99.9%) 21.708 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.957, 12.940), stdev = 5.638
[info]   CI (99.9%): [≈ 0, 24.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.600, 18.000), stdev = 6.269
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce
[info] # Run progress: 70.00% complete, ETA 00:23:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 396416.589 ops/s
[info] # Warmup Iteration   2: 731067.203 ops/s
[info] # Warmup Iteration   3: 725682.952 ops/s
[info] Iteration   1: 743161.142 ops/s
[info]                  ·gc.alloc.rate:                                  2416.890 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5120.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.065 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.138 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.428 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5767.259 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   2: 733775.853 ops/s
[info]                  ·gc.alloc.rate:                                  2386.593 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5120.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.351 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5110.900 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 732982.434 ops/s
[info]                  ·gc.alloc.rate:                                  2383.959 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5120.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.240 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5116.310 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 747445.698 ops/s
[info]                  ·gc.alloc.rate:                                  2431.262 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5120.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.464 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5017.238 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 746797.663 ops/s
[info]                  ·gc.alloc.rate:                                  2430.276 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5120.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2383.644 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5021.758 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce":
[info]   740832.558 ±(99.9%) 26965.503 ops/s [Average]
[info]   (min, avg, max) = (732982.434, 740832.558, 747445.698), stdev = 7002.855
[info]   CI (99.9%): [713867.055, 767798.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate":
[info]   2409.796 ±(99.9%) 88.992 MB/sec [Average]
[info]   (min, avg, max) = (2383.959, 2409.796, 2431.262), stdev = 23.111
[info]   CI (99.9%): [2320.804, 2498.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5120.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5120.001, 5120.001, 5120.001), stdev = 0.001
[info]   CI (99.9%): [5120.000, 5120.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.015 ±(99.9%) 0.109 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.015, 0.065), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.031 ±(99.9%) 0.231 B/op [Average]
[info]   (min, avg, max) = (0.003, 0.031, 0.138), stdev = 0.060
[info]   CI (99.9%): [≈ 0, 0.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2450.625 ±(99.9%) 585.079 MB/sec [Average]
[info]   (min, avg, max) = (2382.240, 2450.625, 2722.428), stdev = 151.943
[info]   CI (99.9%): [1865.546, 3035.704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   5206.693 ±(99.9%) 1220.226 B/op [Average]
[info]   (min, avg, max) = (5017.238, 5206.693, 5767.259), stdev = 316.889
[info]   CI (99.9%): [3986.467, 6426.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.count":
[info]   36.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.200, 8.000), stdev = 0.447
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 7.000), stdev = 0.894
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava
[info] # Run progress: 70.27% complete, ETA 00:23:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.862 ops/s
[info] # Warmup Iteration   2: 5059472.493 ops/s
[info] # Warmup Iteration   3: 5122111.622 ops/s
[info] Iteration   1: 5268363.606 ops/s
[info]                  ·gc.alloc.rate:            321.428 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.814 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 99.700 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 5103546.429 ops/s
[info]                  ·gc.alloc.rate:            311.387 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.839 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 102.922 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 4989810.437 ops/s
[info]                  ·gc.alloc.rate:            304.395 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.770 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 105.264 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 4991555.597 ops/s
[info]                  ·gc.alloc.rate:            304.450 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.712 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 105.227 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 4985149.187 ops/s
[info]                  ·gc.alloc.rate:            304.051 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.705 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 105.363 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava":
[info]   5067685.051 ±(99.9%) 472509.624 ops/s [Average]
[info]   (min, avg, max) = (4985149.187, 5067685.051, 5268363.606), stdev = 122709.249
[info]   CI (99.9%): [4595175.428, 5540194.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   309.142 ±(99.9%) 28.972 MB/sec [Average]
[info]   (min, avg, max) = (304.051, 309.142, 321.428), stdev = 7.524
[info]   CI (99.9%): [280.170, 338.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   96.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (96.000, 96.000, 96.000), stdev = 0.001
[info]   CI (99.9%): [96.000, 96.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   333.768 ±(99.9%) 0.230 MB/sec [Average]
[info]   (min, avg, max) = (333.705, 333.768, 333.839), stdev = 0.060
[info]   CI (99.9%): [333.538, 333.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   103.695 ±(99.9%) 9.462 B/op [Average]
[info]   (min, avg, max) = (99.700, 103.695, 105.363), stdev = 2.457
[info]   CI (99.9%): [94.233, 113.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala
[info] # Run progress: 70.54% complete, ETA 00:23:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 141390.040 ops/s
[info] # Warmup Iteration   2: 771796.385 ops/s
[info] # Warmup Iteration   3: 785637.669 ops/s
[info] Iteration   1: 772090.513 ops/s
[info]                  ·gc.alloc.rate:            957.362 MB/sec
[info]                  ·gc.alloc.rate.norm:       1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.975 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2057.235 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 773355.401 ops/s
[info]                  ·gc.alloc.rate:                   959.091 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.457 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2052.472 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.356 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 793110.376 ops/s
[info]                  ·gc.alloc.rate:            983.504 MB/sec
[info]                  ·gc.alloc.rate.norm:       1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.043 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1333.831 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 773843.126 ops/s
[info]                  ·gc.alloc.rate:                                  959.977 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1952.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.197 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.400 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1016.764 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2067.470 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                9.484 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 788323.722 ops/s
[info]                  ·gc.alloc.rate:                                  977.660 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1952.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.028 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.055 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.166 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2038.864 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala":
[info]   780144.628 ±(99.9%) 37810.868 ops/s [Average]
[info]   (min, avg, max) = (772090.513, 780144.628, 793110.376), stdev = 9819.362
[info]   CI (99.9%): [742333.760, 817955.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   967.519 ±(99.9%) 46.743 MB/sec [Average]
[info]   (min, avg, max) = (957.362, 967.519, 983.504), stdev = 12.139
[info]   CI (99.9%): [920.776, 1014.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1952.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1952.001, 1952.001, 1952.001), stdev = 0.001
[info]   CI (99.9%): [1952.000, 1952.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.045 ±(99.9%) 0.330 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.045, 0.197), stdev = 0.086
[info]   CI (99.9%): [≈ 0, 0.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.091 ±(99.9%) 0.671 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.091, 0.400), stdev = 0.174
[info]   CI (99.9%): [≈ 0, 0.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   945.481 ±(99.9%) 588.957 MB/sec [Average]
[info]   (min, avg, max) = (672.043, 945.481, 1021.166), stdev = 152.950
[info]   CI (99.9%): [356.523, 1534.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1909.974 ±(99.9%) 1240.825 B/op [Average]
[info]   (min, avg, max) = (1333.831, 1909.974, 2067.470), stdev = 322.238
[info]   CI (99.9%): [669.149, 3150.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.824 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.664), stdev = 2.032
[info]   CI (99.9%): [≈ 0, 8.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   2.168 ±(99.9%) 15.909 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.168, 9.484), stdev = 4.132
[info]   CI (99.9%): [≈ 0, 18.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.600, 13.000), stdev = 4.393
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala
[info] # Run progress: 70.81% complete, ETA 00:23:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6801462.067 ops/s
[info] # Warmup Iteration   2: 7351460.680 ops/s
[info] # Warmup Iteration   3: 7185412.630 ops/s
[info] Iteration   1: 7469743.527 ops/s
[info]                  ·gc.alloc.rate:            341.693 MB/sec
[info]                  ·gc.alloc.rate.norm:       72.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.958 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 71.002 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   2: 7519124.385 ops/s
[info]                  ·gc.alloc.rate:            343.900 MB/sec
[info]                  ·gc.alloc.rate.norm:       72.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.988 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 70.553 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 7512328.105 ops/s
[info]                  ·gc.alloc.rate:            343.621 MB/sec
[info]                  ·gc.alloc.rate.norm:       72.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.019 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 70.617 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 7193002.430 ops/s
[info]                  ·gc.alloc.rate:            329.028 MB/sec
[info]                  ·gc.alloc.rate.norm:       72.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.031 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 73.751 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 7230476.597 ops/s
[info]                  ·gc.alloc.rate:            330.731 MB/sec
[info]                  ·gc.alloc.rate.norm:       72.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.019 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 73.369 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala":
[info]   7384935.009 ±(99.9%) 615271.541 ops/s [Average]
[info]   (min, avg, max) = (7193002.430, 7384935.009, 7519124.385), stdev = 159784.065
[info]   CI (99.9%): [6769663.468, 8000206.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   337.795 ±(99.9%) 28.111 MB/sec [Average]
[info]   (min, avg, max) = (329.028, 337.795, 343.900), stdev = 7.300
[info]   CI (99.9%): [309.684, 365.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   72.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (72.000, 72.000, 72.000), stdev = 0.001
[info]   CI (99.9%): [72.000, 72.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   337.003 ±(99.9%) 0.114 MB/sec [Average]
[info]   (min, avg, max) = (336.958, 337.003, 337.031), stdev = 0.030
[info]   CI (99.9%): [336.889, 337.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   71.858 ±(99.9%) 6.041 B/op [Average]
[info]   (min, avg, max) = (70.553, 71.858, 73.751), stdev = 1.569
[info]   CI (99.9%): [65.818, 77.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson
[info] # Run progress: 71.08% complete, ETA 00:22:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25648.799 ops/s
[info] # Warmup Iteration   2: 240611.359 ops/s
[info] # Warmup Iteration   3: 258002.400 ops/s
[info] Iteration   1: 257492.677 ops/s
[info]                  ·gc.alloc.rate:            1432.059 MB/sec
[info]                  ·gc.alloc.rate.norm:       8752.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1678.898 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10260.557 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  22.000 ms
[info] Iteration   2: 251723.319 ops/s
[info]                  ·gc.alloc.rate:                                  1399.870 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8752.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.147 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.922 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1352.389 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8455.150 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                29.156 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   3: 256821.002 ops/s
[info]                  ·gc.alloc.rate:                                  1427.878 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8752.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.029 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.178 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.366 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8344.323 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 257135.751 ops/s
[info]                  ·gc.alloc.rate:            1430.157 MB/sec
[info]                  ·gc.alloc.rate.norm:       8752.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.842 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8333.940 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 261528.524 ops/s
[info]                  ·gc.alloc.rate:                                  1454.148 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8752.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.359 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8193.535 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson":
[info]   256940.255 ±(99.9%) 13425.755 ops/s [Average]
[info]   (min, avg, max) = (251723.319, 256940.255, 261528.524), stdev = 3486.626
[info]   CI (99.9%): [243514.500, 270366.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1428.823 ±(99.9%) 74.389 MB/sec [Average]
[info]   (min, avg, max) = (1399.870, 1428.823, 1454.148), stdev = 19.319
[info]   CI (99.9%): [1354.434, 1503.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8752.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8752.002, 8752.002, 8752.002), stdev = 0.001
[info]   CI (99.9%): [8752.001, 8752.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.036 ±(99.9%) 0.246 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.036, 0.147), stdev = 0.064
[info]   CI (99.9%): [≈ 0, 0.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.221 ±(99.9%) 1.537 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.221, 0.922), stdev = 0.399
[info]   CI (99.9%): [≈ 0, 1.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1423.171 ±(99.9%) 550.684 MB/sec [Average]
[info]   (min, avg, max) = (1352.389, 1423.171, 1678.898), stdev = 143.011
[info]   CI (99.9%): [872.487, 1973.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   8717.501 ±(99.9%) 3340.737 B/op [Average]
[info]   (min, avg, max) = (8193.535, 8717.501, 10260.557), stdev = 867.579
[info]   CI (99.9%): [5376.764, 12058.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.031 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.663), stdev = 2.086
[info]   CI (99.9%): [≈ 0, 8.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   5.831 ±(99.9%) 50.208 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.831, 29.156), stdev = 13.039
[info]   CI (99.9%): [≈ 0, 56.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.800, 22.000), stdev = 8.289
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce
[info] # Run progress: 71.35% complete, ETA 00:22:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4944.006 ops/s
[info] # Warmup Iteration   2: 7373.132 ops/s
[info] # Warmup Iteration   3: 7527.596 ops/s
[info] Iteration   1: 7649.714 ops/s
[info]                  ·gc.alloc.rate:                                  1841.689 MB/sec
[info]                  ·gc.alloc.rate.norm:                             378784.053 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.170 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 34.942 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1695.655 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       348748.813 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                685.165 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   2: 7707.723 ops/s
[info]                  ·gc.alloc.rate:                                  1855.422 MB/sec
[info]                  ·gc.alloc.rate.norm:                             378784.053 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.086 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 17.577 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.797 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       417036.453 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 7729.438 ops/s
[info]                  ·gc.alloc.rate:                                  1860.278 MB/sec
[info]                  ·gc.alloc.rate.norm:                             378784.053 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.102 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 20.676 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.708 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       346496.596 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 7710.384 ops/s
[info]                  ·gc.alloc.rate:                                  1855.302 MB/sec
[info]                  ·gc.alloc.rate.norm:                             378784.061 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.104 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 21.286 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.869 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       416874.224 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 7731.865 ops/s
[info]                  ·gc.alloc.rate:                                  1860.524 MB/sec
[info]                  ·gc.alloc.rate.norm:                             378784.053 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.063 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 12.886 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.493 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       346406.993 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce":
[info]   7705.825 ±(99.9%) 127.834 ops/s [Average]
[info]   (min, avg, max) = (7649.714, 7705.825, 7731.865), stdev = 33.198
[info]   CI (99.9%): [7577.991, 7833.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1854.643 ±(99.9%) 29.526 MB/sec [Average]
[info]   (min, avg, max) = (1841.689, 1854.643, 1860.524), stdev = 7.668
[info]   CI (99.9%): [1825.117, 1884.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   378784.055 ±(99.9%) 0.014 B/op [Average]
[info]   (min, avg, max) = (378784.053, 378784.055, 378784.061), stdev = 0.004
[info]   CI (99.9%): [378784.040, 378784.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.105 ±(99.9%) 0.153 MB/sec [Average]
[info]   (min, avg, max) = (0.063, 0.105, 0.170), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   21.474 ±(99.9%) 31.694 B/op [Average]
[info]   (min, avg, max) = (12.886, 21.474, 34.942), stdev = 8.231
[info]   CI (99.9%): [≈ 0, 53.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1836.704 ±(99.9%) 722.875 MB/sec [Average]
[info]   (min, avg, max) = (1695.655, 1836.704, 2042.797), stdev = 187.728
[info]   CI (99.9%): [1113.829, 2559.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   375112.616 ±(99.9%) 147127.601 B/op [Average]
[info]   (min, avg, max) = (346406.993, 375112.616, 417036.453), stdev = 38208.571
[info]   CI (99.9%): [227985.015, 522240.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.737 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   137.033 ±(99.9%) 1179.895 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 137.033, 685.165), stdev = 306.415
[info]   CI (99.9%): [≈ 0, 1316.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 10.000), stdev = 2.345
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava
[info] # Run progress: 71.62% complete, ETA 00:22:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 673.645 ops/s
[info] # Warmup Iteration   2: 10800.301 ops/s
[info] # Warmup Iteration   3: 11285.444 ops/s
[info] Iteration   1: 11299.711 ops/s
[info]                  ·gc.alloc.rate:            260.459 MB/sec
[info]                  ·gc.alloc.rate.norm:       36280.042 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.698 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 46481.736 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 11332.967 ops/s
[info]                  ·gc.alloc.rate:            261.263 MB/sec
[info]                  ·gc.alloc.rate.norm:       36280.036 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.754 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 46346.412 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 11335.515 ops/s
[info]                  ·gc.alloc.rate:            261.566 MB/sec
[info]                  ·gc.alloc.rate.norm:       36280.039 B/op
[info]                  ·gc.churn.G1_Old_Gen:      332.937 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 46179.376 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 11200.265 ops/s
[info]                  ·gc.alloc.rate:      258.248 MB/sec
[info]                  ·gc.alloc.rate.norm: 36280.042 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 11326.435 ops/s
[info]                  ·gc.alloc.rate:            261.183 MB/sec
[info]                  ·gc.alloc.rate.norm:       36280.036 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.192 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 46282.486 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava":
[info]   11298.979 ±(99.9%) 219.427 ops/s [Average]
[info]   (min, avg, max) = (11200.265, 11298.979, 11335.515), stdev = 56.985
[info]   CI (99.9%): [11079.551, 11518.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   260.544 ±(99.9%) 5.184 MB/sec [Average]
[info]   (min, avg, max) = (258.248, 260.544, 261.566), stdev = 1.346
[info]   CI (99.9%): [255.360, 265.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   36280.039 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (36280.036, 36280.039, 36280.042), stdev = 0.003
[info]   CI (99.9%): [36280.027, 36280.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   266.716 ±(99.9%) 574.128 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 266.716, 333.754), stdev = 149.099
[info]   CI (99.9%): [≈ 0, 840.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   37058.002 ±(99.9%) 79771.258 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 37058.002, 46481.736), stdev = 20716.342
[info]   CI (99.9%): [≈ 0, 116829.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.000, 5.000), stdev = 2.236
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala
[info] # Run progress: 71.89% complete, ETA 00:22:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6109.204 ops/s
[info] # Warmup Iteration   2: 12187.971 ops/s
[info] # Warmup Iteration   3: 12292.126 ops/s
[info] Iteration   1: 12579.497 ops/s
[info]                  ·gc.alloc.rate:            318.645 MB/sec
[info]                  ·gc.alloc.rate.norm:       39872.032 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.649 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 41999.706 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 12914.642 ops/s
[info]                  ·gc.alloc.rate:            327.128 MB/sec
[info]                  ·gc.alloc.rate.norm:       39872.032 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.674 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 40913.703 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 12975.378 ops/s
[info]                  ·gc.alloc.rate:            328.726 MB/sec
[info]                  ·gc.alloc.rate.norm:       39872.034 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.729 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 40721.398 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 13032.756 ops/s
[info]                  ·gc.alloc.rate:            330.215 MB/sec
[info]                  ·gc.alloc.rate.norm:       39872.031 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.749 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 40540.220 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 12998.753 ops/s
[info]                  ·gc.alloc.rate:            329.275 MB/sec
[info]                  ·gc.alloc.rate.norm:       39872.034 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.668 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 40646.232 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala":
[info]   12900.205 ±(99.9%) 710.009 ops/s [Average]
[info]   (min, avg, max) = (12579.497, 12900.205, 13032.756), stdev = 184.387
[info]   CI (99.9%): [12190.196, 13610.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   326.798 ±(99.9%) 18.072 MB/sec [Average]
[info]   (min, avg, max) = (318.645, 326.798, 330.215), stdev = 4.693
[info]   CI (99.9%): [308.726, 344.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   39872.033 ±(99.9%) 0.005 B/op [Average]
[info]   (min, avg, max) = (39872.031, 39872.033, 39872.034), stdev = 0.001
[info]   CI (99.9%): [39872.028, 39872.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   335.694 ±(99.9%) 0.164 MB/sec [Average]
[info]   (min, avg, max) = (335.649, 335.694, 335.749), stdev = 0.043
[info]   CI (99.9%): [335.530, 335.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   40964.252 ±(99.9%) 2289.951 B/op [Average]
[info]   (min, avg, max) = (40540.220, 40964.252, 41999.706), stdev = 594.693
[info]   CI (99.9%): [38674.301, 43254.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala
[info] # Run progress: 72.16% complete, ETA 00:22:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18612.401 ops/s
[info] # Warmup Iteration   2: 22231.907 ops/s
[info] # Warmup Iteration   3: 22005.385 ops/s
[info] Iteration   1: 22064.301 ops/s
[info]                  ·gc.alloc.rate:            377.119 MB/sec
[info]                  ·gc.alloc.rate.norm:       26896.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.114 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 24042.933 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 22095.926 ops/s
[info]                  ·gc.alloc.rate:            377.652 MB/sec
[info]                  ·gc.alloc.rate.norm:       26896.025 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.102 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 24008.120 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 22708.316 ops/s
[info]                  ·gc.alloc.rate:            388.040 MB/sec
[info]                  ·gc.alloc.rate.norm:       26896.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.027 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23360.166 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 22824.842 ops/s
[info]                  ·gc.alloc.rate:            390.014 MB/sec
[info]                  ·gc.alloc.rate.norm:       26896.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.005 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23240.449 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 22917.158 ops/s
[info]                  ·gc.alloc.rate:            391.622 MB/sec
[info]                  ·gc.alloc.rate.norm:       26896.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.052 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23148.181 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala":
[info]   22522.109 ±(99.9%) 1580.177 ops/s [Average]
[info]   (min, avg, max) = (22064.301, 22522.109, 22917.158), stdev = 410.367
[info]   CI (99.9%): [20941.932, 24102.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   384.889 ±(99.9%) 26.836 MB/sec [Average]
[info]   (min, avg, max) = (377.119, 384.889, 391.622), stdev = 6.969
[info]   CI (99.9%): [358.053, 411.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   26896.019 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (26896.018, 26896.019, 26896.025), stdev = 0.003
[info]   CI (99.9%): [26896.008, 26896.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   337.060 ±(99.9%) 0.182 MB/sec [Average]
[info]   (min, avg, max) = (337.005, 337.060, 337.114), stdev = 0.047
[info]   CI (99.9%): [336.878, 337.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   23559.970 ±(99.9%) 1662.566 B/op [Average]
[info]   (min, avg, max) = (23148.181, 23559.970, 24042.933), stdev = 431.763
[info]   CI (99.9%): [21897.404, 25222.536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson
[info] # Run progress: 72.43% complete, ETA 00:21:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 591.655 ops/s
[info] # Warmup Iteration   2: 1975.994 ops/s
[info] # Warmup Iteration   3: 2055.201 ops/s
[info] Iteration   1: 2047.331 ops/s
[info]                  ·gc.alloc.rate:            1301.084 MB/sec
[info]                  ·gc.alloc.rate.norm:       1000325.352 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1342.532 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1032192.000 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   2: 2073.176 ops/s
[info]                  ·gc.alloc.rate:                   1317.635 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000320.212 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.568 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1022285.763 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3539.070 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   3: 2034.660 ops/s
[info]                  ·gc.alloc.rate:                                  1293.537 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1000320.200 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.065 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 50.299 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.266 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1052696.141 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 2039.653 ops/s
[info]                  ·gc.alloc.rate:                                  1296.132 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1000320.200 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.030 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 23.220 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.321 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1050632.031 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 2038.930 ops/s
[info]                  ·gc.alloc.rate:                                  1295.913 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1000320.200 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.060 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 46.361 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.091 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1050632.031 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson":
[info]   2046.750 ±(99.9%) 59.541 ops/s [Average]
[info]   (min, avg, max) = (2034.660, 2046.750, 2073.176), stdev = 15.463
[info]   CI (99.9%): [1987.209, 2106.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1300.860 ±(99.9%) 37.625 MB/sec [Average]
[info]   (min, avg, max) = (1293.537, 1300.860, 1317.635), stdev = 9.771
[info]   CI (99.9%): [1263.235, 1338.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   1000321.233 ±(99.9%) 8.866 B/op [Average]
[info]   (min, avg, max) = (1000320.200, 1000321.233, 1000325.352), stdev = 2.302
[info]   CI (99.9%): [1000312.367, 1000330.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.031 ±(99.9%) 0.121 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.031, 0.065), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   23.976 ±(99.9%) 93.219 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 23.976, 50.299), stdev = 24.209
[info]   CI (99.9%): [≈ 0, 117.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1354.556 ±(99.9%) 35.599 MB/sec [Average]
[info]   (min, avg, max) = (1342.532, 1354.556, 1361.321), stdev = 9.245
[info]   CI (99.9%): [1318.956, 1390.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   1041687.593 ±(99.9%) 52649.421 B/op [Average]
[info]   (min, avg, max) = (1022285.763, 1041687.593, 1052696.141), stdev = 13672.887
[info]   CI (99.9%): [989038.173, 1094337.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   707.814 ±(99.9%) 6094.493 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 707.814, 3539.070), stdev = 1582.720
[info]   CI (99.9%): [≈ 0, 6802.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.200, 19.000), stdev = 7.662
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce
[info] # Run progress: 72.70% complete, ETA 00:21:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5230.685 ops/s
[info] # Warmup Iteration   2: 6938.477 ops/s
[info] # Warmup Iteration   3: 6935.378 ops/s
[info] Iteration   1: 6892.870 ops/s
[info]                  ·gc.alloc.rate:            1411.748 MB/sec
[info]                  ·gc.alloc.rate.norm:       322368.059 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1347.974 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 307805.341 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 6954.839 ops/s
[info]                  ·gc.alloc.rate:                                  1424.356 MB/sec
[info]                  ·gc.alloc.rate.norm:                             322368.063 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.219 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 49.643 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1698.184 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       384342.216 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                753.612 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 7049.945 ops/s
[info]                  ·gc.alloc.rate:                                  1443.815 MB/sec
[info]                  ·gc.alloc.rate.norm:                             322368.058 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.067 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 14.962 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.219 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       303926.453 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 7276.824 ops/s
[info]                  ·gc.alloc.rate:                                  1490.494 MB/sec
[info]                  ·gc.alloc.rate.norm:                             322368.056 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.074 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 16.101 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.404 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       294448.323 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 7217.882 ops/s
[info]                  ·gc.alloc.rate:                                  1478.349 MB/sec
[info]                  ·gc.alloc.rate.norm:                             322368.061 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.114 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 24.861 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.918 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       371119.501 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce":
[info]   7078.472 ±(99.9%) 636.596 ops/s [Average]
[info]   (min, avg, max) = (6892.870, 7078.472, 7276.824), stdev = 165.322
[info]   CI (99.9%): [6441.876, 7715.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate":
[info]   1449.752 ±(99.9%) 130.612 MB/sec [Average]
[info]   (min, avg, max) = (1411.748, 1449.752, 1490.494), stdev = 33.919
[info]   CI (99.9%): [1319.141, 1580.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   322368.059 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (322368.056, 322368.059, 322368.063), stdev = 0.003
[info]   CI (99.9%): [322368.049, 322368.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.095 ±(99.9%) 0.311 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.095, 0.219), stdev = 0.081
[info]   CI (99.9%): [≈ 0, 0.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   21.113 ±(99.9%) 70.392 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21.113, 49.643), stdev = 18.281
[info]   CI (99.9%): [≈ 0, 91.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1494.140 ±(99.9%) 724.127 MB/sec [Average]
[info]   (min, avg, max) = (1347.974, 1494.140, 1701.918), stdev = 188.054
[info]   CI (99.9%): [770.013, 2218.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   332328.367 ±(99.9%) 161694.242 B/op [Average]
[info]   (min, avg, max) = (294448.323, 332328.367, 384342.216), stdev = 41991.481
[info]   CI (99.9%): [170634.125, 494022.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   150.722 ±(99.9%) 1297.766 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 150.722, 753.612), stdev = 337.026
[info]   CI (99.9%): [≈ 0, 1448.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 13.000), stdev = 4.159
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava
[info] # Run progress: 72.97% complete, ETA 00:21:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4554.790 ops/s
[info] # Warmup Iteration   2: 50082.341 ops/s
[info] # Warmup Iteration   3: 49771.643 ops/s
[info] Iteration   1: 51013.964 ops/s
[info]                  ·gc.alloc.rate:            476.803 MB/sec
[info]                  ·gc.alloc.rate.norm:       14712.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.667 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10295.469 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 53966.164 ops/s
[info]                  ·gc.alloc.rate:            504.481 MB/sec
[info]                  ·gc.alloc.rate.norm:       14712.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.754 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9733.141 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 53604.296 ops/s
[info]                  ·gc.alloc.rate:            501.005 MB/sec
[info]                  ·gc.alloc.rate.norm:       14712.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.372 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19597.358 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   4: 53534.164 ops/s
[info]                  ·gc.alloc.rate:            500.369 MB/sec
[info]                  ·gc.alloc.rate.norm:       14712.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.396 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19622.979 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 51329.182 ops/s
[info]                  ·gc.alloc.rate:                   479.761 MB/sec
[info]                  ·gc.alloc.rate.norm:              14712.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:             333.030 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        10212.474 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 20.425 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava":
[info]   52689.554 ±(99.9%) 5390.237 ops/s [Average]
[info]   (min, avg, max) = (51013.964, 52689.554, 53966.164), stdev = 1399.827
[info]   CI (99.9%): [47299.317, 58079.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   492.484 ±(99.9%) 50.445 MB/sec [Average]
[info]   (min, avg, max) = (476.803, 492.484, 504.481), stdev = 13.100
[info]   CI (99.9%): [442.039, 542.929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   14712.008 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (14712.008, 14712.008, 14712.009), stdev = 0.001
[info]   CI (99.9%): [14712.006, 14712.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   467.044 ±(99.9%) 704.225 MB/sec [Average]
[info]   (min, avg, max) = (333.030, 467.044, 667.396), stdev = 182.885
[info]   CI (99.9%): [≈ 0, 1171.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   13892.284 ±(99.9%) 20116.186 B/op [Average]
[info]   (min, avg, max) = (9733.141, 13892.284, 19622.979), stdev = 5224.109
[info]   CI (99.9%): [≈ 0, 34008.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   4.085 ±(99.9%) 35.173 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.085, 20.425), stdev = 9.134
[info]   CI (99.9%): [≈ 0, 39.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.400, 13.000), stdev = 3.912
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala
[info] # Run progress: 73.24% complete, ETA 00:21:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_8263f884/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 19257.247 ops/s
[info] # Warmup Iteration   2: 35524.465 ops/s
[info] # Warmup Iteration   3: 36929.880 ops/s
[info] Iteration   1: 37351.807 ops/s
[info]                  ·gc.alloc.rate:            541.405 MB/sec
[info]                  ·gc.alloc.rate.norm:       22807.892 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.794 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14146.051 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 35717.313 ops/s
[info]                  ·gc.alloc.rate:            517.536 MB/sec
[info]                  ·gc.alloc.rate.norm:       22807.890 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.380 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 29587.790 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 35392.064 ops/s
[info]                  ·gc.alloc.rate:            512.795 MB/sec
[info]                  ·gc.alloc.rate.norm:       22807.649 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.672 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14929.722 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 35301.268 ops/s
[info]                  ·gc.alloc.rate:            511.527 MB/sec
[info]                  ·gc.alloc.rate.norm:       22808.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.399 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 29936.404 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 36611.912 ops/s
[info]                  ·gc.alloc.rate:            530.490 MB/sec
[info]                  ·gc.alloc.rate.norm:       22807.728 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.684 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14432.309 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala":
[info]   36074.873 ±(99.9%) 3396.169 ops/s [Average]
[info]   (min, avg, max) = (35301.268, 36074.873, 37351.807), stdev = 881.974
[info]   CI (99.9%): [32678.703, 39471.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   522.751 ±(99.9%) 49.469 MB/sec [Average]
[info]   (min, avg, max) = (511.527, 522.751, 541.405), stdev = 12.847
[info]   CI (99.9%): [473.281, 572.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   22807.833 ±(99.9%) 0.548 B/op [Average]
[info]   (min, avg, max) = (22807.649, 22807.833, 22808.004), stdev = 0.142
[info]   CI (99.9%): [22807.285, 22808.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   469.986 ±(99.9%) 707.963 MB/sec [Average]
[info]   (min, avg, max) = (335.672, 469.986, 671.399), stdev = 183.856
[info]   CI (99.9%): [≈ 0, 1177.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   20606.455 ±(99.9%) 32204.975 B/op [Average]
[info]   (min, avg, max) = (14146.051, 20606.455, 29936.404), stdev = 8363.530
[info]   CI (99.9%): [≈ 0, 52811.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 9.000), stdev = 2.588
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala
[info] # Run progress: 73.51% complete, ETA 00:20:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 46047.443 ops/s
[info] # Warmup Iteration   2: 54930.988 ops/s
[info] # Warmup Iteration   3: 54429.254 ops/s
[info] Iteration   1: 54520.027 ops/s
[info]                  ·gc.alloc.rate:            411.723 MB/sec
[info]                  ·gc.alloc.rate.norm:       11888.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.326 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9710.996 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 54327.963 ops/s
[info]                  ·gc.alloc.rate:            410.289 MB/sec
[info]                  ·gc.alloc.rate.norm:       11888.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.430 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19483.448 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 52538.992 ops/s
[info]                  ·gc.alloc.rate:            396.924 MB/sec
[info]                  ·gc.alloc.rate.norm:       11888.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.460 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10077.089 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 54287.205 ops/s
[info]                  ·gc.alloc.rate:            409.967 MB/sec
[info]                  ·gc.alloc.rate.norm:       11888.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.329 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9752.668 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 54410.283 ops/s
[info]                  ·gc.alloc.rate:            410.951 MB/sec
[info]                  ·gc.alloc.rate.norm:       11888.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.361 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9730.267 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala":
[info]   54016.894 ±(99.9%) 3199.700 ops/s [Average]
[info]   (min, avg, max) = (52538.992, 54016.894, 54520.027), stdev = 830.952
[info]   CI (99.9%): [50817.194, 57216.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   407.971 ±(99.9%) 23.921 MB/sec [Average]
[info]   (min, avg, max) = (396.924, 407.971, 411.723), stdev = 6.212
[info]   CI (99.9%): [384.050, 431.892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   11888.008 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11888.007, 11888.008, 11888.008), stdev = 0.001
[info]   CI (99.9%): [11888.007, 11888.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   403.581 ±(99.9%) 578.718 MB/sec [Average]
[info]   (min, avg, max) = (336.326, 403.581, 672.430), stdev = 150.291
[info]   CI (99.9%): [≈ 0, 982.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   11750.894 ±(99.9%) 16654.984 B/op [Average]
[info]   (min, avg, max) = (9710.996, 11750.894, 19483.448), stdev = 4325.247
[info]   CI (99.9%): [≈ 0, 28405.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 6.000), stdev = 1.342
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 73.78% complete, ETA 00:20:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 57548.836 ops/s
[info] # Warmup Iteration   2: 64047.101 ops/s
[info] # Warmup Iteration   3: 63938.758 ops/s
[info] Iteration   1: 62183.225 ops/s
[info]                  ·gc.alloc.rate:      0.948 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.007 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 62255.850 ops/s
[info]                  ·gc.alloc.rate:      0.950 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.007 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 62022.364 ops/s
[info]                  ·gc.alloc.rate:      0.946 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.007 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 62178.246 ops/s
[info]                  ·gc.alloc.rate:      0.949 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.007 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 62164.392 ops/s
[info]                  ·gc.alloc.rate:      0.948 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.007 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   62160.815 ±(99.9%) 327.978 ops/s [Average]
[info]   (min, avg, max) = (62022.364, 62160.815, 62255.850), stdev = 85.175
[info]   CI (99.9%): [61832.837, 62488.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.948 ±(99.9%) 0.005 MB/sec [Average]
[info]   (min, avg, max) = (0.946, 0.948, 0.950), stdev = 0.001
[info]   CI (99.9%): [0.943, 0.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   24.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (24.007, 24.007, 24.007), stdev = 0.001
[info]   CI (99.9%): [24.007, 24.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson
[info] # Run progress: 74.05% complete, ETA 00:20:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1720.047 ops/s
[info] # Warmup Iteration   2: 4861.524 ops/s
[info] # Warmup Iteration   3: 4911.752 ops/s
[info] Iteration   1: 4929.467 ops/s
[info]                  ·gc.alloc.rate:            1490.946 MB/sec
[info]                  ·gc.alloc.rate.norm:       476071.336 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1342.596 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 428701.930 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   2: 4956.761 ops/s
[info]                  ·gc.alloc.rate:                                  1499.126 MB/sec
[info]                  ·gc.alloc.rate.norm:                             476072.771 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.072 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 22.854 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1696.239 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       538669.438 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1480.442 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   3: 4999.147 ops/s
[info]                  ·gc.alloc.rate:                                  1512.323 MB/sec
[info]                  ·gc.alloc.rate.norm:                             476072.142 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.043 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 13.457 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.431 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       428572.154 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 5018.343 ops/s
[info]                  ·gc.alloc.rate:                                  1518.021 MB/sec
[info]                  ·gc.alloc.rate.norm:                             476071.531 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.082 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 25.782 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.738 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       533687.586 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 4872.846 ops/s
[info]                  ·gc.alloc.rate:                                  1473.817 MB/sec
[info]                  ·gc.alloc.rate.norm:                             476071.795 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.035 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 11.156 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.339 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       439739.299 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson":
[info]   4955.313 ±(99.9%) 222.583 ops/s [Average]
[info]   (min, avg, max) = (4872.846, 4955.313, 5018.343), stdev = 57.804
[info]   CI (99.9%): [4732.730, 5177.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1498.847 ±(99.9%) 67.750 MB/sec [Average]
[info]   (min, avg, max) = (1473.817, 1498.847, 1518.021), stdev = 17.594
[info]   CI (99.9%): [1431.097, 1566.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   476071.915 ±(99.9%) 2.179 B/op [Average]
[info]   (min, avg, max) = (476071.336, 476071.915, 476072.771), stdev = 0.566
[info]   CI (99.9%): [476069.736, 476074.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.046 ±(99.9%) 0.125 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.082), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   14.650 ±(99.9%) 39.433 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14.650, 25.782), stdev = 10.241
[info]   CI (99.9%): [≈ 0, 54.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1492.669 ±(99.9%) 725.883 MB/sec [Average]
[info]   (min, avg, max) = (1342.596, 1492.669, 1701.738), stdev = 188.510
[info]   CI (99.9%): [766.786, 2218.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   473874.081 ±(99.9%) 219807.902 B/op [Average]
[info]   (min, avg, max) = (428572.154, 473874.081, 538669.438), stdev = 57083.414
[info]   CI (99.9%): [254066.179, 693681.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   296.088 ±(99.9%) 2549.411 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 296.088, 1480.442), stdev = 662.074
[info]   CI (99.9%): [≈ 0, 2845.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 8.000, 18.000), stdev = 6.164
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala
[info] # Run progress: 74.32% complete, ETA 00:20:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4451232.498 ops/s
[info] # Warmup Iteration   2: 5169108.041 ops/s
[info] # Warmup Iteration   3: 5083913.390 ops/s
[info] Iteration   1: 5113252.387 ops/s
[info]                  ·gc.alloc.rate:                                  1533.373 MB/sec
[info]                  ·gc.alloc.rate.norm:                             472.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.051 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1351.553 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       416.032 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1.025 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   2: 4987715.076 ops/s
[info]                  ·gc.alloc.rate:                                  1495.600 MB/sec
[info]                  ·gc.alloc.rate.norm:                             472.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.066 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.749 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       537.059 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 4985618.765 ops/s
[info]                  ·gc.alloc.rate:            1494.887 MB/sec
[info]                  ·gc.alloc.rate.norm:       472.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.309 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 429.824 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 5119446.078 ops/s
[info]                  ·gc.alloc.rate:                                  1535.371 MB/sec
[info]                  ·gc.alloc.rate.norm:                             472.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.041 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       523.237 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 5029455.723 ops/s
[info]                  ·gc.alloc.rate:                                  1508.137 MB/sec
[info]                  ·gc.alloc.rate.norm:                             472.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.434 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       426.087 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala":
[info]   5047097.606 ±(99.9%) 252708.502 ops/s [Average]
[info]   (min, avg, max) = (4985618.765, 5047097.606, 5119446.078), stdev = 65627.595
[info]   CI (99.9%): [4794389.104, 5299806.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1513.474 ±(99.9%) 76.261 MB/sec [Average]
[info]   (min, avg, max) = (1494.887, 1513.474, 1535.371), stdev = 19.805
[info]   CI (99.9%): [1437.213, 1589.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   472.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (472.000, 472.000, 472.000), stdev = 0.001
[info]   CI (99.9%): [472.000, 472.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.025 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.066), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.008 ±(99.9%) 0.037 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1495.617 ±(99.9%) 725.260 MB/sec [Average]
[info]   (min, avg, max) = (1351.553, 1495.617, 1702.041), stdev = 188.348
[info]   CI (99.9%): [770.357, 2220.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   466.448 ±(99.9%) 225.543 B/op [Average]
[info]   (min, avg, max) = (416.032, 466.448, 537.059), stdev = 58.573
[info]   CI (99.9%): [240.905, 691.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.205 ±(99.9%) 1.765 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.205, 1.025), stdev = 0.458
[info]   CI (99.9%): [≈ 0, 1.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 10.000), stdev = 2.950
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson
[info] # Run progress: 74.59% complete, ETA 00:20:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 92212.669 ops/s
[info] # Warmup Iteration   2: 296826.086 ops/s
[info] # Warmup Iteration   3: 303100.766 ops/s
[info] Iteration   1: 301224.297 ops/s
[info]                  ·gc.alloc.rate:                                  1743.471 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9112.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.016 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.084 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2023.865 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10577.438 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                24.364 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        22.000 ms
[info] Iteration   2: 301758.297 ops/s
[info]                  ·gc.alloc.rate:                                  1746.653 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9112.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.034 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.175 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.582 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8876.874 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 308292.520 ops/s
[info]                  ·gc.alloc.rate:                                  1784.677 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9112.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.771 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8688.710 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 304817.577 ops/s
[info]                  ·gc.alloc.rate:            1764.416 MB/sec
[info]                  ·gc.alloc.rate.norm:       9112.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.617 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8787.689 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 307545.338 ops/s
[info]                  ·gc.alloc.rate:                                  1780.620 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9112.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.183 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10445.389 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson":
[info]   304727.606 ±(99.9%) 12439.768 ops/s [Average]
[info]   (min, avg, max) = (301224.297, 304727.606, 308292.520), stdev = 3230.568
[info]   CI (99.9%): [292287.837, 317167.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1763.967 ±(99.9%) 72.712 MB/sec [Average]
[info]   (min, avg, max) = (1743.471, 1763.967, 1784.677), stdev = 18.883
[info]   CI (99.9%): [1691.255, 1836.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   9112.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9112.001, 9112.001, 9112.001), stdev = 0.001
[info]   CI (99.9%): [9112.001, 9112.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.010 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.034), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.053 ±(99.9%) 0.296 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.053, 0.175), stdev = 0.077
[info]   CI (99.9%): [≈ 0, 0.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1834.004 ±(99.9%) 698.225 MB/sec [Average]
[info]   (min, avg, max) = (1701.582, 1834.004, 2041.183), stdev = 181.327
[info]   CI (99.9%): [1135.778, 2532.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   9475.220 ±(99.9%) 3655.793 B/op [Average]
[info]   (min, avg, max) = (8688.710, 9475.220, 10577.438), stdev = 949.398
[info]   CI (99.9%): [5819.427, 13131.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   4.873 ±(99.9%) 41.956 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.873, 24.364), stdev = 10.896
[info]   CI (99.9%): [≈ 0, 46.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.800, 22.000), stdev = 8.012
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala
[info] # Run progress: 74.86% complete, ETA 00:19:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2675896.682 ops/s
[info] # Warmup Iteration   2: 3116561.340 ops/s
[info] # Warmup Iteration   3: 3142214.843 ops/s
[info] Iteration   1: 3066536.218 ops/s
[info]                  ·gc.alloc.rate:            498.784 MB/sec
[info]                  ·gc.alloc.rate.norm:       256.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.377 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 172.645 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 2991859.210 ops/s
[info]                  ·gc.alloc.rate:            486.644 MB/sec
[info]                  ·gc.alloc.rate.norm:       256.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.805 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 353.930 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 3005725.566 ops/s
[info]                  ·gc.alloc.rate:            488.910 MB/sec
[info]                  ·gc.alloc.rate.norm:       256.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.403 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 176.145 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 3144042.584 ops/s
[info]                  ·gc.alloc.rate:                   511.314 MB/sec
[info]                  ·gc.alloc.rate.norm:              256.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.685 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        336.794 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.333 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 3147788.450 ops/s
[info]                  ·gc.alloc.rate:            511.903 MB/sec
[info]                  ·gc.alloc.rate.norm:       256.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.993 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 168.529 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala":
[info]   3071190.406 ±(99.9%) 284110.243 ops/s [Average]
[info]   (min, avg, max) = (2991859.210, 3071190.406, 3147788.450), stdev = 73782.528
[info]   CI (99.9%): [2787080.163, 3355300.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   499.511 ±(99.9%) 46.021 MB/sec [Average]
[info]   (min, avg, max) = (486.644, 499.511, 511.903), stdev = 11.951
[info]   CI (99.9%): [453.490, 545.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   256.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (256.000, 256.000, 256.000), stdev = 0.001
[info]   CI (99.9%): [256.000, 256.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   471.052 ±(99.9%) 708.978 MB/sec [Average]
[info]   (min, avg, max) = (336.377, 471.052, 672.805), stdev = 184.119
[info]   CI (99.9%): [≈ 0, 1180.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   241.609 ±(99.9%) 365.601 B/op [Average]
[info]   (min, avg, max) = (168.529, 241.609, 353.930), stdev = 94.946
[info]   CI (99.9%): [≈ 0, 607.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.067 ±(99.9%) 0.574 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.333), stdev = 0.149
[info]   CI (99.9%): [≈ 0, 0.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 6.000), stdev = 1.643
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 75.14% complete, ETA 00:19:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2634507.671 ops/s
[info] # Warmup Iteration   2: 3064317.090 ops/s
[info] # Warmup Iteration   3: 3241623.655 ops/s
[info] Iteration   1: 3249407.363 ops/s
[info]                  ·gc.alloc.rate:                   379.803 MB/sec
[info]                  ·gc.alloc.rate.norm:              184.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             336.306 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        162.928 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.323 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 3240790.706 ops/s
[info]                  ·gc.alloc.rate:            378.798 MB/sec
[info]                  ·gc.alloc.rate.norm:       184.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.988 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 163.691 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 3248082.555 ops/s
[info]                  ·gc.alloc.rate:            379.679 MB/sec
[info]                  ·gc.alloc.rate.norm:       184.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.353 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 163.003 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 3245645.013 ops/s
[info]                  ·gc.alloc.rate:            379.357 MB/sec
[info]                  ·gc.alloc.rate.norm:       184.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.318 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 163.125 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 3239289.010 ops/s
[info]                  ·gc.alloc.rate:            378.661 MB/sec
[info]                  ·gc.alloc.rate.norm:       184.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.360 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 163.445 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScalaPrealloc":
[info]   3244642.929 ±(99.9%) 17116.870 ops/s [Average]
[info]   (min, avg, max) = (3239289.010, 3244642.929, 3249407.363), stdev = 4445.197
[info]   CI (99.9%): [3227526.059, 3261759.799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   379.260 ±(99.9%) 1.974 MB/sec [Average]
[info]   (min, avg, max) = (378.661, 379.260, 379.803), stdev = 0.513
[info]   CI (99.9%): [377.285, 381.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   184.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (184.000, 184.000, 184.000), stdev = 0.001
[info]   CI (99.9%): [184.000, 184.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   336.465 ±(99.9%) 1.129 MB/sec [Average]
[info]   (min, avg, max) = (336.306, 336.465, 336.988), stdev = 0.293
[info]   CI (99.9%): [335.336, 337.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   163.238 ±(99.9%) 1.236 B/op [Average]
[info]   (min, avg, max) = (162.928, 163.238, 163.691), stdev = 0.321
[info]   CI (99.9%): [162.002, 164.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm":
[info]   0.065 ±(99.9%) 0.556 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.065, 0.323), stdev = 0.144
[info]   CI (99.9%): [≈ 0, 0.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson
[info] # Run progress: 75.41% complete, ETA 00:19:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 63451.011 ops/s
[info] # Warmup Iteration   2: 351080.055 ops/s
[info] # Warmup Iteration   3: 353491.889 ops/s
[info] Iteration   1: 349820.741 ops/s
[info]                  ·gc.alloc.rate:                   1361.736 MB/sec
[info]                  ·gc.alloc.rate.norm:              6128.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1678.931 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        7555.420 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.997 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         22.000 ms
[info] Iteration   2: 352086.540 ops/s
[info]                  ·gc.alloc.rate:                                  1370.679 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6128.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.140 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.628 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1351.360 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6041.632 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                20.843 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        13.000 ms
[info] Iteration   3: 354064.730 ops/s
[info]                  ·gc.alloc.rate:                                  1378.341 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6128.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.038 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.170 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.372 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6052.558 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 355001.455 ops/s
[info]                  ·gc.alloc.rate:            1381.957 MB/sec
[info]                  ·gc.alloc.rate.norm:       6128.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.345 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6036.602 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 359231.613 ops/s
[info]                  ·gc.alloc.rate:                                  1398.598 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6128.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.452 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5965.247 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson":
[info]   354041.016 ±(99.9%) 13545.293 ops/s [Average]
[info]   (min, avg, max) = (349820.741, 354041.016, 359231.613), stdev = 3517.670
[info]   CI (99.9%): [340495.723, 367586.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1378.262 ±(99.9%) 53.001 MB/sec [Average]
[info]   (min, avg, max) = (1361.736, 1378.262, 1398.598), stdev = 13.764
[info]   CI (99.9%): [1325.262, 1431.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   6128.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6128.001, 6128.001, 6128.001), stdev = 0.001
[info]   CI (99.9%): [6128.001, 6128.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.036 ±(99.9%) 0.234 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.036, 0.140), stdev = 0.061
[info]   CI (99.9%): [≈ 0, 0.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.160 ±(99.9%) 1.047 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.160, 0.628), stdev = 0.272
[info]   CI (99.9%): [≈ 0, 1.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1422.892 ±(99.9%) 551.396 MB/sec [Average]
[info]   (min, avg, max) = (1351.360, 1422.892, 1678.931), stdev = 143.196
[info]   CI (99.9%): [871.496, 1974.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   6330.292 ±(99.9%) 2640.508 B/op [Average]
[info]   (min, avg, max) = (5965.247, 6330.292, 7555.420), stdev = 685.732
[info]   CI (99.9%): [3689.783, 8970.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.821 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.662), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   4.768 ±(99.9%) 34.962 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.768, 20.843), stdev = 9.080
[info]   CI (99.9%): [≈ 0, 39.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.800, 22.000), stdev = 8.556
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce
[info] # Run progress: 75.68% complete, ETA 00:19:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4601544.626 ops/s
[info] # Warmup Iteration   2: 6371500.474 ops/s
[info] # Warmup Iteration   3: 6460447.455 ops/s
[info] Iteration   1: 6561787.914 ops/s
[info]                  ·gc.alloc.rate:                                  3968.446 MB/sec
[info]                  ·gc.alloc.rate.norm:                             952.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3743.557 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       898.051 B/op
[info]                  ·gc.count:                                       11.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   2: 6345945.993 ops/s
[info]                  ·gc.alloc.rate:                                  3838.568 MB/sec
[info]                  ·gc.alloc.rate.norm:                             952.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            4084.756 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1013.057 B/op
[info]                  ·gc.count:                                       12.000 counts
[info]                  ·gc.time:                                        13.000 ms
[info] Iteration   3: 6378037.191 ops/s
[info]                  ·gc.alloc.rate:                                  3858.460 MB/sec
[info]                  ·gc.alloc.rate.norm:                             952.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3744.841 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       923.967 B/op
[info]                  ·gc.count:                                       11.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   4: 6563063.474 ops/s
[info]                  ·gc.alloc.rate:            3970.067 MB/sec
[info]                  ·gc.alloc.rate.norm:       952.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      4084.921 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 979.541 B/op
[info]                  ·gc.count:                 12.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 6493454.067 ops/s
[info]                  ·gc.alloc.rate:                                  3926.915 MB/sec
[info]                  ·gc.alloc.rate.norm:                             952.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3743.532 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       907.543 B/op
[info]                  ·gc.count:                                       11.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce":
[info]   6468457.728 ±(99.9%) 392078.885 ops/s [Average]
[info]   (min, avg, max) = (6345945.993, 6468457.728, 6563063.474), stdev = 101821.641
[info]   CI (99.9%): [6076378.843, 6860536.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.alloc.rate":
[info]   3912.491 ±(99.9%) 236.101 MB/sec [Average]
[info]   (min, avg, max) = (3838.568, 3912.491, 3970.067), stdev = 61.315
[info]   CI (99.9%): [3676.390, 4148.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   952.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (952.000, 952.000, 952.000), stdev = 0.001
[info]   CI (99.9%): [952.000, 952.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.009 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.005), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   3880.321 ±(99.9%) 718.909 MB/sec [Average]
[info]   (min, avg, max) = (3743.532, 3880.321, 4084.921), stdev = 186.698
[info]   CI (99.9%): [3161.413, 4599.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   944.432 ±(99.9%) 191.305 B/op [Average]
[info]   (min, avg, max) = (898.051, 944.432, 1013.057), stdev = 49.681
[info]   CI (99.9%): [753.127, 1135.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.count":
[info]   57.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (11.000, 11.400, 12.000), stdev = 0.548
[info]   CI (99.9%): [57.000, 57.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.time":
[info]   51.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 10.200, 13.000), stdev = 1.643
[info]   CI (99.9%): [51.000, 51.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava
[info] # Run progress: 75.95% complete, ETA 00:19:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.894 ops/s
[info] # Warmup Iteration   2: 37229686.898 ops/s
[info] # Warmup Iteration   3: 36439232.181 ops/s
[info] Iteration   1: 35257395.122 ops/s
[info]                  ·gc.alloc.rate:            358.503 MB/sec
[info]                  ·gc.alloc.rate.norm:       16.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.800 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14.898 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 36546055.907 ops/s
[info]                  ·gc.alloc.rate:            371.481 MB/sec
[info]                  ·gc.alloc.rate.norm:       16.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.692 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14.372 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 36720624.333 ops/s
[info]                  ·gc.alloc.rate:            373.274 MB/sec
[info]                  ·gc.alloc.rate.norm:       16.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.718 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14.304 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 38089094.211 ops/s
[info]                  ·gc.alloc.rate:            387.232 MB/sec
[info]                  ·gc.alloc.rate.norm:       16.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.746 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13.790 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 38130787.994 ops/s
[info]                  ·gc.alloc.rate:            387.608 MB/sec
[info]                  ·gc.alloc.rate.norm:       16.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.717 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13.775 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava":
[info]   36948791.514 ±(99.9%) 4625777.408 ops/s [Average]
[info]   (min, avg, max) = (35257395.122, 36948791.514, 38130787.994), stdev = 1201299.703
[info]   CI (99.9%): [32323014.106, 41574568.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   375.620 ±(99.9%) 46.931 MB/sec [Average]
[info]   (min, avg, max) = (358.503, 375.620, 387.608), stdev = 12.188
[info]   CI (99.9%): [328.689, 422.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   16.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16.000, 16.000, 16.000), stdev = 0.001
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   333.735 ±(99.9%) 0.160 MB/sec [Average]
[info]   (min, avg, max) = (333.692, 333.735, 333.800), stdev = 0.041
[info]   CI (99.9%): [333.575, 333.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   14.228 ±(99.9%) 1.797 B/op [Average]
[info]   (min, avg, max) = (13.775, 14.228, 14.898), stdev = 0.467
[info]   CI (99.9%): [12.431, 16.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala
[info] # Run progress: 76.22% complete, ETA 00:18:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2581090.410 ops/s
[info] # Warmup Iteration   2: 6280542.297 ops/s
[info] # Warmup Iteration   3: 6357941.125 ops/s
[info] Iteration   1: 6131329.295 ops/s
[info]                  ·gc.alloc.rate:                                  2586.203 MB/sec
[info]                  ·gc.alloc.rate.norm:                             664.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.192 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       611.621 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 6176443.686 ops/s
[info]                  ·gc.alloc.rate:            2605.473 MB/sec
[info]                  ·gc.alloc.rate.norm:       664.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2722.777 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 693.895 B/op
[info]                  ·gc.count:                 8.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 6497637.268 ops/s
[info]                  ·gc.alloc.rate:                                  2741.088 MB/sec
[info]                  ·gc.alloc.rate.norm:                             664.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.896 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       659.593 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 6402253.822 ops/s
[info]                  ·gc.alloc.rate:                                  2700.381 MB/sec
[info]                  ·gc.alloc.rate.norm:                             664.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.531 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       669.447 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 6476881.233 ops/s
[info]                  ·gc.alloc.rate:                                  2732.557 MB/sec
[info]                  ·gc.alloc.rate.norm:                             664.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.185 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       661.723 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala":
[info]   6336909.061 ±(99.9%) 660550.664 ops/s [Average]
[info]   (min, avg, max) = (6131329.295, 6336909.061, 6497637.268), stdev = 171542.910
[info]   CI (99.9%): [5676358.397, 6997459.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2673.140 ±(99.9%) 279.179 MB/sec [Average]
[info]   (min, avg, max) = (2586.203, 2673.140, 2741.088), stdev = 72.502
[info]   CI (99.9%): [2393.961, 2952.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   664.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (664.000, 664.000, 664.000), stdev = 0.001
[info]   CI (99.9%): [664.000, 664.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.006 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   2654.716 ±(99.9%) 586.630 MB/sec [Average]
[info]   (min, avg, max) = (2382.192, 2654.716, 2723.185), stdev = 152.346
[info]   CI (99.9%): [2068.086, 3241.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   659.256 ±(99.9%) 115.182 B/op [Average]
[info]   (min, avg, max) = (611.621, 659.256, 693.895), stdev = 29.912
[info]   CI (99.9%): [544.073, 774.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.count":
[info]   39.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.800, 8.000), stdev = 0.447
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala
[info] # Run progress: 76.49% complete, ETA 00:18:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 35133735.060 ops/s
[info] # Warmup Iteration   2: 34031599.432 ops/s
[info] # Warmup Iteration   3: 33819347.114 ops/s
[info] Iteration   1: 34624250.422 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 34554869.232 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 34529426.990 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 34604642.244 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 34618372.339 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala":
[info]   34586312.245 ±(99.9%) 161402.843 ops/s [Average]
[info]   (min, avg, max) = (34529426.990, 34586312.245, 34624250.422), stdev = 41915.806
[info]   CI (99.9%): [34424909.402, 34747715.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala
[info] # Run progress: 76.76% complete, ETA 00:18:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22047278.988 ops/s
[info] # Warmup Iteration   2: 28495364.070 ops/s
[info] # Warmup Iteration   3: 28310963.333 ops/s
[info] Iteration   1: 28269322.396 ops/s
[info]                  ·gc.alloc.rate:            1005.941 MB/sec
[info]                  ·gc.alloc.rate.norm:       56.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.257 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 56.296 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 27708303.492 ops/s
[info]                  ·gc.alloc.rate:            986.043 MB/sec
[info]                  ·gc.alloc.rate.norm:       56.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.371 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 57.439 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 26642646.135 ops/s
[info]                  ·gc.alloc.rate:                                  947.975 MB/sec
[info]                  ·gc.alloc.rate.norm:                             56.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.068 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1014.540 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       59.932 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                0.197 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 23998487.409 ops/s
[info]                  ·gc.alloc.rate:                                  854.061 MB/sec
[info]                  ·gc.alloc.rate.norm:                             56.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.033 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.921 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       44.647 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 24676438.124 ops/s
[info]                  ·gc.alloc.rate:                                  878.264 MB/sec
[info]                  ·gc.alloc.rate.norm:                             56.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.477 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       65.132 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala":
[info]   26259039.511 ±(99.9%) 7179019.439 ops/s [Average]
[info]   (min, avg, max) = (23998487.409, 26259039.511, 28269322.396), stdev = 1864368.550
[info]   CI (99.9%): [19080020.072, 33438058.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.alloc.rate":
[info]   934.457 ±(99.9%) 255.241 MB/sec [Average]
[info]   (min, avg, max) = (854.061, 934.457, 1005.941), stdev = 66.285
[info]   CI (99.9%): [679.215, 1189.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.alloc.rate.norm":
[info]   56.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (56.000, 56.000, 56.000), stdev = 0.001
[info]   CI (99.9%): [56.000, 56.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.021 ±(99.9%) 0.115 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.068), stdev = 0.030
[info]   CI (99.9%): [≈ 0, 0.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.001 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.G1_Old_Gen":
[info]   947.913 ±(99.9%) 574.944 MB/sec [Average]
[info]   (min, avg, max) = (680.921, 947.913, 1021.477), stdev = 149.311
[info]   CI (99.9%): [372.969, 1522.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.G1_Old_Gen.norm":
[info]   56.689 ±(99.9%) 29.041 B/op [Average]
[info]   (min, avg, max) = (44.647, 56.689, 65.132), stdev = 7.542
[info]   CI (99.9%): [27.648, 85.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.039 ±(99.9%) 0.339 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.039, 0.197), stdev = 0.088
[info]   CI (99.9%): [≈ 0, 0.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.400, 9.000), stdev = 3.286
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson
[info] # Run progress: 77.03% complete, ETA 00:18:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2919354.127 ops/s
[info] # Warmup Iteration   2: 5847745.222 ops/s
[info] # Warmup Iteration   3: 5793951.861 ops/s
[info] Iteration   1: 5993902.102 ops/s
[info]                  ·gc.alloc.rate:                                  2893.754 MB/sec
[info]                  ·gc.alloc.rate.norm:                             760.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3062.868 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       804.415 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   2: 5989040.080 ops/s
[info]                  ·gc.alloc.rate:                                  2891.877 MB/sec
[info]                  ·gc.alloc.rate.norm:                             760.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3062.538 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       804.851 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 5817015.515 ops/s
[info]                  ·gc.alloc.rate:                                  2808.534 MB/sec
[info]                  ·gc.alloc.rate.norm:                             760.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.828 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       736.808 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 5693539.632 ops/s
[info]                  ·gc.alloc.rate:            2749.791 MB/sec
[info]                  ·gc.alloc.rate.norm:       760.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2723.562 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 752.751 B/op
[info]                  ·gc.count:                 8.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 5758006.968 ops/s
[info]                  ·gc.alloc.rate:                                  2779.907 MB/sec
[info]                  ·gc.alloc.rate.norm:                             760.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.473 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       744.298 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson":
[info]   5850300.860 ±(99.9%) 523992.024 ops/s [Average]
[info]   (min, avg, max) = (5693539.632, 5850300.860, 5993902.102), stdev = 136079.065
[info]   CI (99.9%): [5326308.835, 6374292.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2824.772 ±(99.9%) 252.212 MB/sec [Average]
[info]   (min, avg, max) = (2749.791, 2824.772, 2893.754), stdev = 65.499
[info]   CI (99.9%): [2572.561, 3076.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   760.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (760.000, 760.000, 760.000), stdev = 0.001
[info]   CI (99.9%): [760.000, 760.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.005 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2858.854 ±(99.9%) 716.560 MB/sec [Average]
[info]   (min, avg, max) = (2722.473, 2858.854, 3062.868), stdev = 186.088
[info]   CI (99.9%): [2142.294, 3575.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   768.625 ±(99.9%) 128.426 B/op [Average]
[info]   (min, avg, max) = (736.808, 768.625, 804.851), stdev = 33.352
[info]   CI (99.9%): [640.199, 897.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.count":
[info]   42.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.400, 9.000), stdev = 0.548
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 8.000), stdev = 0.837
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce
[info] # Run progress: 77.30% complete, ETA 00:17:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12669944.683 ops/s
[info] # Warmup Iteration   2: 19764210.562 ops/s
[info] # Warmup Iteration   3: 20556499.084 ops/s
[info] Iteration   1: 20634778.070 ops/s
[info]                  ·gc.alloc.rate:                                  1888.281 MB/sec
[info]                  ·gc.alloc.rate.norm:                             144.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.080 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2036.025 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       155.267 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                0.254 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   2: 20181405.134 ops/s
[info]                  ·gc.alloc.rate:                                  1846.055 MB/sec
[info]                  ·gc.alloc.rate.norm:                             144.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.577 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       132.730 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 20147806.995 ops/s
[info]                  ·gc.alloc.rate:                                  1842.860 MB/sec
[info]                  ·gc.alloc.rate.norm:                             144.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.475 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       132.952 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 20119461.759 ops/s
[info]                  ·gc.alloc.rate:                                  1840.727 MB/sec
[info]                  ·gc.alloc.rate.norm:                             144.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.279 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       159.767 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 21025564.426 ops/s
[info]                  ·gc.alloc.rate:                                  1923.455 MB/sec
[info]                  ·gc.alloc.rate.norm:                             144.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.742 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       127.401 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce":
[info]   20421803.277 ±(99.9%) 1533215.746 ops/s [Average]
[info]   (min, avg, max) = (20119461.759, 20421803.277, 21025564.426), stdev = 398171.260
[info]   CI (99.9%): [18888587.531, 21955019.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.alloc.rate":
[info]   1868.276 ±(99.9%) 140.742 MB/sec [Average]
[info]   (min, avg, max) = (1840.727, 1868.276, 1923.455), stdev = 36.550
[info]   CI (99.9%): [1727.534, 2009.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   144.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (144.000, 144.000, 144.000), stdev = 0.001
[info]   CI (99.9%): [144.000, 144.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.017 ±(99.9%) 0.135 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.017, 0.080), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.001 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.001, 0.006), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1836.620 ±(99.9%) 711.982 MB/sec [Average]
[info]   (min, avg, max) = (1701.475, 1836.620, 2042.279), stdev = 184.899
[info]   CI (99.9%): [1124.638, 2548.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   141.624 ±(99.9%) 56.851 B/op [Average]
[info]   (min, avg, max) = (127.401, 141.624, 159.767), stdev = 14.764
[info]   CI (99.9%): [84.773, 198.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.737 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   0.051 ±(99.9%) 0.437 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.051, 0.254), stdev = 0.114
[info]   CI (99.9%): [≈ 0, 0.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 10.000), stdev = 2.683
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava
[info] # Run progress: 77.57% complete, ETA 00:17:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.902 ops/s
[info] # Warmup Iteration   2: 51289359.148 ops/s
[info] # Warmup Iteration   3: 51459674.165 ops/s
[info] Iteration   1: 52330737.869 ops/s
[info]                  ·gc.alloc.rate:            1595.735 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1668.448 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 50.187 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  25.000 ms
[info] Iteration   2: 54202832.858 ops/s
[info]                  ·gc.alloc.rate:                                  1652.925 MB/sec
[info]                  ·gc.alloc.rate.norm:                             48.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.610 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1692.533 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       49.150 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     6.661 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                0.193 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   3: 54446351.626 ops/s
[info]                  ·gc.alloc.rate:                                  1660.429 MB/sec
[info]                  ·gc.alloc.rate.norm:                             48.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.907 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       49.199 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 54932786.918 ops/s
[info]                  ·gc.alloc.rate:            1675.679 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.852 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 39.010 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 54499379.233 ops/s
[info]                  ·gc.alloc.rate:                                  1662.581 MB/sec
[info]                  ·gc.alloc.rate.norm:                             48.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.381 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       49.149 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava":
[info]   54082417.701 ±(99.9%) 3904330.153 ops/s [Average]
[info]   (min, avg, max) = (52330737.869, 54082417.701, 54932786.918), stdev = 1013942.142
[info]   CI (99.9%): [50178087.547, 57986747.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   1649.470 ±(99.9%) 119.901 MB/sec [Average]
[info]   (min, avg, max) = (1595.735, 1649.470, 1675.679), stdev = 31.138
[info]   CI (99.9%): [1529.569, 1769.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.122 ±(99.9%) 1.049 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.122, 0.610), stdev = 0.272
[info]   CI (99.9%): [≈ 0, 1.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.004 ±(99.9%) 0.030 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.018), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   1625.424 ±(99.9%) 569.833 MB/sec [Average]
[info]   (min, avg, max) = (1361.852, 1625.424, 1702.381), stdev = 147.984
[info]   CI (99.9%): [1055.591, 2195.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   47.339 ±(99.9%) 18.009 B/op [Average]
[info]   (min, avg, max) = (39.010, 47.339, 50.187), stdev = 4.677
[info]   CI (99.9%): [29.330, 65.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   1.332 ±(99.9%) 11.470 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.332, 6.661), stdev = 2.979
[info]   CI (99.9%): [≈ 0, 12.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.039 ±(99.9%) 0.333 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.039, 0.193), stdev = 0.087
[info]   CI (99.9%): [≈ 0, 0.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.400, 25.000), stdev = 9.290
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala
[info] # Run progress: 77.84% complete, ETA 00:17:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3110240.558 ops/s
[info] # Warmup Iteration   2: 10515638.364 ops/s
[info] # Warmup Iteration   3: 10839242.865 ops/s
[info] Iteration   1: 10697564.591 ops/s
[info]                  ·gc.alloc.rate:                                  2120.127 MB/sec
[info]                  ·gc.alloc.rate.norm:                             312.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.098 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2037.890 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       299.898 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                0.588 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   2: 10600359.199 ops/s
[info]                  ·gc.alloc.rate:                                  2101.056 MB/sec
[info]                  ·gc.alloc.rate.norm:                             312.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.034 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       303.236 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 10611685.397 ops/s
[info]                  ·gc.alloc.rate:                                  2103.324 MB/sec
[info]                  ·gc.alloc.rate.norm:                             312.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.368 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       353.393 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   4: 10831613.997 ops/s
[info]                  ·gc.alloc.rate:                                  2146.841 MB/sec
[info]                  ·gc.alloc.rate.norm:                             312.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.996 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       296.763 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 10810615.378 ops/s
[info]                  ·gc.alloc.rate:                                  2142.607 MB/sec
[info]                  ·gc.alloc.rate.norm:                             312.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.919 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       297.338 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala":
[info]   10710367.712 ±(99.9%) 416307.184 ops/s [Average]
[info]   (min, avg, max) = (10600359.199, 10710367.712, 10831613.997), stdev = 108113.654
[info]   CI (99.9%): [10294060.528, 11126674.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   2122.791 ±(99.9%) 82.352 MB/sec [Average]
[info]   (min, avg, max) = (2101.056, 2122.791, 2146.841), stdev = 21.386
[info]   CI (99.9%): [2040.439, 2205.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   312.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (312.000, 312.000, 312.000), stdev = 0.001
[info]   CI (99.9%): [312.000, 312.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.020 ±(99.9%) 0.167 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.020, 0.098), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.003 ±(99.9%) 0.025 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁵, 0.003, 0.014), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   2109.241 ±(99.9%) 587.965 MB/sec [Average]
[info]   (min, avg, max) = (2037.890, 2109.241, 2382.368), stdev = 152.693
[info]   CI (99.9%): [1521.276, 2697.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   310.125 ±(99.9%) 93.654 B/op [Average]
[info]   (min, avg, max) = (296.763, 310.125, 353.393), stdev = 24.322
[info]   CI (99.9%): [216.471, 403.780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.118 ±(99.9%) 1.013 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.118, 0.588), stdev = 0.263
[info]   CI (99.9%): [≈ 0, 1.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 9.000), stdev = 2.168
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala
[info] # Run progress: 78.11% complete, ETA 00:17:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30579373.913 ops/s
[info] # Warmup Iteration   2: 40558678.742 ops/s
[info] # Warmup Iteration   3: 44322105.393 ops/s
[info] Iteration   1: 43450511.443 ops/s
[info]                  ·gc.alloc.rate:                   883.361 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.728 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        24.370 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.024 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 44678866.359 ops/s
[info]                  ·gc.alloc.rate:                   908.306 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.721 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        35.573 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.023 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 43389626.979 ops/s
[info]                  ·gc.alloc.rate:                   882.068 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.345 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        24.428 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.024 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 38899528.281 ops/s
[info]                  ·gc.alloc.rate:                                  790.841 MB/sec
[info]                  ·gc.alloc.rate.norm:                             32.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.061 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.767 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       41.020 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                0.162 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   5: 35485664.165 ops/s
[info]                  ·gc.alloc.rate:                                  721.544 MB/sec
[info]                  ·gc.alloc.rate.norm:                             32.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.109 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.834 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       30.195 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala":
[info]   41180839.446 ±(99.9%) 14901761.627 ops/s [Average]
[info]   (min, avg, max) = (35485664.165, 41180839.446, 44678866.359), stdev = 3869940.172
[info]   CI (99.9%): [26279077.818, 56082601.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   837.224 ±(99.9%) 302.744 MB/sec [Average]
[info]   (min, avg, max) = (721.544, 837.224, 908.306), stdev = 78.622
[info]   CI (99.9%): [534.480, 1139.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   32.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (32.000, 32.000, 32.000), stdev = 0.001
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.034 ±(99.9%) 0.191 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.034, 0.109), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.001 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.005), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   810.079 ±(99.9%) 709.009 MB/sec [Average]
[info]   (min, avg, max) = (672.728, 810.079, 1013.767), stdev = 184.127
[info]   CI (99.9%): [101.070, 1519.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   31.117 ±(99.9%) 27.837 B/op [Average]
[info]   (min, avg, max) = (24.370, 31.117, 41.020), stdev = 7.229
[info]   CI (99.9%): [3.280, 58.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   1.199 ±(99.9%) 6.123 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.199, 3.996), stdev = 1.590
[info]   CI (99.9%): [≈ 0, 7.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.047 ±(99.9%) 0.251 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.047, 0.162), stdev = 0.065
[info]   CI (99.9%): [≈ 0, 0.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.000, 8.000), stdev = 2.449
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 78.38% complete, ETA 00:17:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 35177076.295 ops/s
[info] # Warmup Iteration   2: 47210001.451 ops/s
[info] # Warmup Iteration   3: 48838179.929 ops/s
[info] Iteration   1: 49566750.087 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 49622421.829 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 50853913.492 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 50860909.109 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 50833196.185 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc":
[info]   50347438.140 ±(99.9%) 2647757.397 ops/s [Average]
[info]   (min, avg, max) = (49566750.087, 50347438.140, 50860909.109), stdev = 687614.188
[info]   CI (99.9%): [47699680.744, 52995195.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala
[info] # Run progress: 78.65% complete, ETA 00:16:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 41671966.902 ops/s
[info] # Warmup Iteration   2: 39585017.749 ops/s
[info] # Warmup Iteration   3: 39474174.965 ops/s
[info] Iteration   1: 39514853.745 ops/s
[info]                  ·gc.alloc.rate:                                  2008.193 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.961 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       81.345 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 39923135.514 ops/s
[info]                  ·gc.alloc.rate:                                  2029.101 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.175 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       80.515 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 39933139.197 ops/s
[info]                  ·gc.alloc.rate:                                  2029.752 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.320 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       80.495 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 39605041.109 ops/s
[info]                  ·gc.alloc.rate:                                  2012.965 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.189 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       81.161 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 40042345.428 ops/s
[info]                  ·gc.alloc.rate:                                  2035.765 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.831 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       80.278 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala":
[info]   39803702.999 ±(99.9%) 884115.943 ops/s [Average]
[info]   (min, avg, max) = (39514853.745, 39803702.999, 40042345.428), stdev = 229602.103
[info]   CI (99.9%): [38919587.055, 40687818.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.alloc.rate":
[info]   2023.155 ±(99.9%) 45.788 MB/sec [Average]
[info]   (min, avg, max) = (2008.193, 2023.155, 2035.765), stdev = 11.891
[info]   CI (99.9%): [1977.368, 2068.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.alloc.rate.norm":
[info]   80.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (80.000, 80.000, 80.000), stdev = 0.001
[info]   CI (99.9%): [80.000, 80.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.003 ±(99.9%) 0.003 MB/sec [Average]
[info]   (min, avg, max) = (0.002, 0.003, 0.004), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.G1_Old_Gen":
[info]   2042.295 ±(99.9%) 1.256 MB/sec [Average]
[info]   (min, avg, max) = (2041.961, 2042.295, 2042.831), stdev = 0.326
[info]   CI (99.9%): [2041.040, 2043.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.G1_Old_Gen.norm":
[info]   80.759 ±(99.9%) 1.792 B/op [Average]
[info]   (min, avg, max) = (80.278, 80.759, 81.345), stdev = 0.465
[info]   CI (99.9%): [78.967, 82.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson
[info] # Run progress: 78.92% complete, ETA 00:16:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1325099.425 ops/s
[info] # Warmup Iteration   2: 2063717.029 ops/s
[info] # Warmup Iteration   3: 2082550.353 ops/s
[info] Iteration   1: 1991440.894 ops/s
[info]                  ·gc.alloc.rate:                                  1629.515 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1288.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.169 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.134 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1689.814 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1335.662 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                3.159 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        13.000 ms
[info] Iteration   2: 2087479.901 ops/s
[info]                  ·gc.alloc.rate:                                  1707.973 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1288.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.623 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1283.211 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 2044250.980 ops/s
[info]                  ·gc.alloc.rate:                                  1672.695 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1288.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.769 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1310.387 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 2082580.184 ops/s
[info]                  ·gc.alloc.rate:                                  1703.972 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1288.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.633 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1286.232 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 2082275.262 ops/s
[info]                  ·gc.alloc.rate:                                  1703.780 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1288.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.707 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1286.433 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson":
[info]   2057605.444 ±(99.9%) 157369.723 ops/s [Average]
[info]   (min, avg, max) = (1991440.894, 2057605.444, 2087479.901), stdev = 40868.417
[info]   CI (99.9%): [1900235.721, 2214975.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1683.587 ±(99.9%) 128.585 MB/sec [Average]
[info]   (min, avg, max) = (1629.515, 1683.587, 1707.973), stdev = 33.393
[info]   CI (99.9%): [1555.002, 1812.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1288.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1288.000, 1288.000, 1288.000), stdev = 0.001
[info]   CI (99.9%): [1288.000, 1288.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.035 ±(99.9%) 0.288 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.035, 0.169), stdev = 0.075
[info]   CI (99.9%): [≈ 0, 0.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.028 ±(99.9%) 0.228 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.028, 0.134), stdev = 0.059
[info]   CI (99.9%): [≈ 0, 0.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1699.309 ±(99.9%) 20.440 MB/sec [Average]
[info]   (min, avg, max) = (1689.814, 1699.309, 1701.769), stdev = 5.308
[info]   CI (99.9%): [1678.870, 1719.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   1300.385 ±(99.9%) 86.840 B/op [Average]
[info]   (min, avg, max) = (1283.211, 1300.385, 1335.662), stdev = 22.552
[info]   CI (99.9%): [1213.545, 1387.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   0.632 ±(99.9%) 5.440 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.632, 3.159), stdev = 1.413
[info]   CI (99.9%): [≈ 0, 6.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 13.000), stdev = 4.159
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce
[info] # Run progress: 79.19% complete, ETA 00:16:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 381192.278 ops/s
[info] # Warmup Iteration   2: 552977.708 ops/s
[info] # Warmup Iteration   3: 559200.865 ops/s
[info] Iteration   1: 571550.626 ops/s
[info]                  ·gc.alloc.rate:                                  2056.605 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5664.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.220 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.606 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.140 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5624.162 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 567398.909 ops/s
[info]                  ·gc.alloc.rate:                                  2041.621 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5664.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.111 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5665.361 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 571486.362 ops/s
[info]                  ·gc.alloc.rate:                                  2056.300 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5664.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.968 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5624.526 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 576138.801 ops/s
[info]                  ·gc.alloc.rate:            2073.885 MB/sec
[info]                  ·gc.alloc.rate.norm:       5664.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2042.851 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5579.245 B/op
[info]                  ·gc.count:                 6.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 554653.321 ops/s
[info]                  ·gc.alloc.rate:                                  1995.692 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5664.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.913 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5795.180 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce":
[info]   568245.604 ±(99.9%) 31589.089 ops/s [Average]
[info]   (min, avg, max) = (554653.321, 568245.604, 576138.801), stdev = 8203.586
[info]   CI (99.9%): [536656.515, 599834.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.alloc.rate":
[info]   2044.821 ±(99.9%) 114.539 MB/sec [Average]
[info]   (min, avg, max) = (1995.692, 2044.821, 2073.885), stdev = 29.746
[info]   CI (99.9%): [1930.281, 2159.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5664.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5664.001, 5664.001, 5664.001), stdev = 0.001
[info]   CI (99.9%): [5664.001, 5664.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.046 ±(99.9%) 0.375 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.220), stdev = 0.097
[info]   CI (99.9%): [≈ 0, 0.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.127 ±(99.9%) 1.032 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.127, 0.606), stdev = 0.268
[info]   CI (99.9%): [≈ 0, 1.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2042.197 ±(99.9%) 1.456 MB/sec [Average]
[info]   (min, avg, max) = (2041.913, 2042.197, 2042.851), stdev = 0.378
[info]   CI (99.9%): [2040.741, 2043.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   5657.695 ±(99.9%) 318.348 B/op [Average]
[info]   (min, avg, max) = (5579.245, 5657.695, 5795.180), stdev = 82.674
[info]   CI (99.9%): [5339.347, 5976.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 8.000), stdev = 1.517
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala
[info] # Run progress: 79.46% complete, ETA 00:16:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 191037.278 ops/s
[info] # Warmup Iteration   2: 528141.227 ops/s
[info] # Warmup Iteration   3: 547720.162 ops/s
[info] Iteration   1: 553769.543 ops/s
[info]                  ·gc.alloc.rate:            661.514 MB/sec
[info]                  ·gc.alloc.rate.norm:       1880.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.519 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1908.436 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 549178.758 ops/s
[info]                  ·gc.alloc.rate:            655.944 MB/sec
[info]                  ·gc.alloc.rate.norm:       1880.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.416 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1924.346 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 549472.250 ops/s
[info]                  ·gc.alloc.rate:            656.389 MB/sec
[info]                  ·gc.alloc.rate.norm:       1880.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.501 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1923.285 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 554572.238 ops/s
[info]                  ·gc.alloc.rate:            662.488 MB/sec
[info]                  ·gc.alloc.rate.norm:       1880.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.501 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1905.577 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 551425.461 ops/s
[info]                  ·gc.alloc.rate:                   658.649 MB/sec
[info]                  ·gc.alloc.rate.norm:              1880.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             670.762 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1914.574 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.901 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala":
[info]   551683.650 ±(99.9%) 9417.625 ops/s [Average]
[info]   (min, avg, max) = (549178.758, 551683.650, 554572.238), stdev = 2445.727
[info]   CI (99.9%): [542266.026, 561101.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   658.997 ±(99.9%) 11.353 MB/sec [Average]
[info]   (min, avg, max) = (655.944, 658.997, 662.488), stdev = 2.948
[info]   CI (99.9%): [647.644, 670.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1880.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1880.001, 1880.001, 1880.001), stdev = 0.001
[info]   CI (99.9%): [1880.001, 1880.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   671.340 ±(99.9%) 1.254 MB/sec [Average]
[info]   (min, avg, max) = (670.762, 671.340, 671.519), stdev = 0.326
[info]   CI (99.9%): [670.086, 672.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1915.244 ±(99.9%) 32.660 B/op [Average]
[info]   (min, avg, max) = (1905.577, 1915.244, 1924.346), stdev = 8.482
[info]   CI (99.9%): [1882.584, 1947.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.380 ±(99.9%) 3.274 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.380, 1.901), stdev = 0.850
[info]   CI (99.9%): [≈ 0, 3.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 9.200, 10.000), stdev = 0.447
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala
[info] # Run progress: 79.73% complete, ETA 00:16:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3040550.487 ops/s
[info] # Warmup Iteration   2: 3569904.888 ops/s
[info] # Warmup Iteration   3: 3575269.364 ops/s
[info] Iteration   1: 3550702.571 ops/s
[info]                  ·gc.alloc.rate:                   1407.638 MB/sec
[info]                  ·gc.alloc.rate.norm:              624.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.096 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        597.605 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.476 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 3594431.699 ops/s
[info]                  ·gc.alloc.rate:                                  1425.293 MB/sec
[info]                  ·gc.alloc.rate.norm:                             624.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.101 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.044 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.788 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       596.197 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 3491812.048 ops/s
[info]                  ·gc.alloc.rate:            1384.237 MB/sec
[info]                  ·gc.alloc.rate.norm:       624.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.400 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 613.705 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 3598543.693 ops/s
[info]                  ·gc.alloc.rate:                                  1426.587 MB/sec
[info]                  ·gc.alloc.rate.norm:                             624.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.425 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       595.497 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 3568904.138 ops/s
[info]                  ·gc.alloc.rate:                                  1414.776 MB/sec
[info]                  ·gc.alloc.rate.norm:                             624.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.366 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       600.443 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala":
[info]   3560878.830 ±(99.9%) 166544.458 ops/s [Average]
[info]   (min, avg, max) = (3491812.048, 3560878.830, 3598543.693), stdev = 43251.067
[info]   CI (99.9%): [3394334.372, 3727423.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1411.707 ±(99.9%) 66.321 MB/sec [Average]
[info]   (min, avg, max) = (1384.237, 1411.707, 1426.587), stdev = 17.223
[info]   CI (99.9%): [1345.386, 1478.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   624.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (624.000, 624.000, 624.000), stdev = 0.001
[info]   CI (99.9%): [624.000, 624.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.021 ±(99.9%) 0.172 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.101), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.009 ±(99.9%) 0.075 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.044), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1358.815 ±(99.9%) 23.082 MB/sec [Average]
[info]   (min, avg, max) = (1348.096, 1358.815, 1361.788), stdev = 5.994
[info]   CI (99.9%): [1335.733, 1381.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   600.690 ±(99.9%) 28.952 B/op [Average]
[info]   (min, avg, max) = (595.497, 600.690, 613.705), stdev = 7.519
[info]   CI (99.9%): [571.738, 629.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.295 ±(99.9%) 2.542 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.295, 1.476), stdev = 0.660
[info]   CI (99.9%): [≈ 0, 2.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 11.000), stdev = 3.347
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson
[info] # Run progress: 80.00% complete, ETA 00:15:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 35990.780 ops/s
[info] # Warmup Iteration   2: 199590.820 ops/s
[info] # Warmup Iteration   3: 209172.491 ops/s
[info] Iteration   1: 208444.363 ops/s
[info]                  ·gc.alloc.rate:            1457.599 MB/sec
[info]                  ·gc.alloc.rate.norm:       11008.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1342.647 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10139.868 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   2: 208007.416 ops/s
[info]                  ·gc.alloc.rate:                                  1454.608 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11008.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.029 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.221 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1351.378 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10226.789 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                35.282 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   3: 209482.148 ops/s
[info]                  ·gc.alloc.rate:                                  1465.158 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11008.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.037 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.278 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.978 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12787.268 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 210130.939 ops/s
[info]                  ·gc.alloc.rate:                                  1469.610 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11008.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.560 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10198.661 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 209650.457 ops/s
[info]                  ·gc.alloc.rate:                                  1466.621 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11008.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.023 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.798 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10221.228 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson":
[info]   209143.065 ±(99.9%) 3404.175 ops/s [Average]
[info]   (min, avg, max) = (208007.416, 209143.065, 210130.939), stdev = 884.053
[info]   CI (99.9%): [205738.890, 212547.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1462.719 ±(99.9%) 24.404 MB/sec [Average]
[info]   (min, avg, max) = (1454.608, 1462.719, 1469.610), stdev = 6.338
[info]   CI (99.9%): [1438.315, 1487.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   11008.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11008.002, 11008.002, 11008.002), stdev = 0.001
[info]   CI (99.9%): [11008.002, 11008.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.014 ±(99.9%) 0.068 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.037), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.106 ±(99.9%) 0.510 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.106, 0.278), stdev = 0.132
[info]   CI (99.9%): [≈ 0, 0.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1423.872 ±(99.9%) 599.426 MB/sec [Average]
[info]   (min, avg, max) = (1342.647, 1423.872, 1701.978), stdev = 155.669
[info]   CI (99.9%): [824.446, 2023.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   10714.763 ±(99.9%) 4463.193 B/op [Average]
[info]   (min, avg, max) = (10139.868, 10714.763, 12787.268), stdev = 1159.077
[info]   CI (99.9%): [6251.570, 15177.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   7.056 ±(99.9%) 60.758 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.056, 35.282), stdev = 15.779
[info]   CI (99.9%): [≈ 0, 67.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.600, 19.000), stdev = 6.877
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce
[info] # Run progress: 80.27% complete, ETA 00:15:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 500499.200 ops/s
[info] # Warmup Iteration   2: 811563.036 ops/s
[info] # Warmup Iteration   3: 815250.519 ops/s
[info] Iteration   1: 817207.481 ops/s
[info]                  ·gc.alloc.rate:                                  1819.728 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3504.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.169 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.325 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1695.615 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3265.013 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                6.415 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   2: 827115.977 ops/s
[info]                  ·gc.alloc.rate:                                  1841.168 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3504.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.691 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3238.556 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 823000.673 ops/s
[info]                  ·gc.alloc.rate:                                  1831.874 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3504.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.893 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3905.724 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   4: 829375.093 ops/s
[info]                  ·gc.alloc.rate:            1846.562 MB/sec
[info]                  ·gc.alloc.rate.norm:       3504.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1702.014 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3229.709 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 829761.252 ops/s
[info]                  ·gc.alloc.rate:                                  1846.934 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3504.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.913 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3873.914 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce":
[info]   825292.095 ±(99.9%) 20246.331 ops/s [Average]
[info]   (min, avg, max) = (817207.481, 825292.095, 829761.252), stdev = 5257.908
[info]   CI (99.9%): [805045.764, 845538.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1837.253 ±(99.9%) 44.398 MB/sec [Average]
[info]   (min, avg, max) = (1819.728, 1837.253, 1846.934), stdev = 11.530
[info]   CI (99.9%): [1792.855, 1881.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3504.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3504.000, 3504.001, 3504.001), stdev = 0.001
[info]   CI (99.9%): [3504.000, 3504.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.035 ±(99.9%) 0.288 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.035, 0.169), stdev = 0.075
[info]   CI (99.9%): [≈ 0, 0.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.067 ±(99.9%) 0.555 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.325), stdev = 0.144
[info]   CI (99.9%): [≈ 0, 0.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1836.625 ±(99.9%) 721.648 MB/sec [Average]
[info]   (min, avg, max) = (1695.615, 1836.625, 2041.913), stdev = 187.410
[info]   CI (99.9%): [1114.977, 2558.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   3502.583 ±(99.9%) 1362.794 B/op [Average]
[info]   (min, avg, max) = (3229.709, 3502.583, 3905.724), stdev = 353.913
[info]   CI (99.9%): [2139.789, 4865.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.737 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   1.283 ±(99.9%) 11.046 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.283, 6.415), stdev = 2.869
[info]   CI (99.9%): [≈ 0, 12.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.000, 12.000), stdev = 3.742
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala
[info] # Run progress: 80.54% complete, ETA 00:15:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_8263f884/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 483960.761 ops/s
[info] # Warmup Iteration   2: 1193250.345 ops/s
[info] # Warmup Iteration   3: 1174802.530 ops/s
[info] Iteration   1: 1209219.113 ops/s
[info]                  ·gc.alloc.rate:            817.380 MB/sec
[info]                  ·gc.alloc.rate.norm:       1064.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.087 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1310.945 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   2: 1186125.427 ops/s
[info]                  ·gc.alloc.rate:            801.752 MB/sec
[info]                  ·gc.alloc.rate.norm:       1064.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.373 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 890.975 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 1151686.767 ops/s
[info]                  ·gc.alloc.rate:                   778.497 MB/sec
[info]                  ·gc.alloc.rate.norm:              1064.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             670.697 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        916.666 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.910 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 1211876.025 ops/s
[info]                  ·gc.alloc.rate:                   819.191 MB/sec
[info]                  ·gc.alloc.rate.norm:              1064.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1007.120 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1308.091 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 5.191 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   5: 1212333.669 ops/s
[info]                  ·gc.alloc.rate:                                  819.502 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1064.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.031 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.040 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.053 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       882.947 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                0.865 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala":
[info]   1194248.200 ±(99.9%) 100770.102 ops/s [Average]
[info]   (min, avg, max) = (1151686.767, 1194248.200, 1212333.669), stdev = 26169.676
[info]   CI (99.9%): [1093478.098, 1295018.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   807.265 ±(99.9%) 68.132 MB/sec [Average]
[info]   (min, avg, max) = (778.497, 807.265, 819.502), stdev = 17.694
[info]   CI (99.9%): [739.133, 875.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1064.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1064.000, 1064.000, 1064.000), stdev = 0.001
[info]   CI (99.9%): [1064.000, 1064.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.006 ±(99.9%) 0.053 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.031), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.008 ±(99.9%) 0.069 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.040), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   807.266 ±(99.9%) 702.600 MB/sec [Average]
[info]   (min, avg, max) = (670.697, 807.266, 1007.120), stdev = 182.463
[info]   CI (99.9%): [104.666, 1509.867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1061.925 ±(99.9%) 871.654 B/op [Average]
[info]   (min, avg, max) = (882.947, 1061.925, 1310.945), stdev = 226.366
[info]   CI (99.9%): [190.271, 1933.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 6.438 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 3.997), stdev = 1.672
[info]   CI (99.9%): [≈ 0, 7.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.393 ±(99.9%) 8.352 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.393, 5.191), stdev = 2.169
[info]   CI (99.9%): [≈ 0, 9.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.time":
[info]   48.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 9.600, 14.000), stdev = 4.930
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala
[info] # Run progress: 80.81% complete, ETA 00:15:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5572455.411 ops/s
[info] # Warmup Iteration   2: 6559561.529 ops/s
[info] # Warmup Iteration   3: 6695900.296 ops/s
[info] Iteration   1: 6716136.925 ops/s
[info]                  ·gc.alloc.rate:                   751.044 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.784 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        157.660 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.156 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 6731686.803 ops/s
[info]                  ·gc.alloc.rate:            752.769 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.451 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 157.455 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 6666726.990 ops/s
[info]                  ·gc.alloc.rate:            745.693 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.955 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 158.832 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 6748804.947 ops/s
[info]                  ·gc.alloc.rate:            754.763 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.856 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 156.901 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 6623206.224 ops/s
[info]                  ·gc.alloc.rate:                                  740.793 MB/sec
[info]                  ·gc.alloc.rate.norm:                             176.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.393 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       240.765 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                0.950 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala":
[info]   6697312.378 ±(99.9%) 198360.843 ops/s [Average]
[info]   (min, avg, max) = (6623206.224, 6697312.378, 6748804.947), stdev = 51513.681
[info]   CI (99.9%): [6498951.535, 6895673.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   749.012 ±(99.9%) 21.942 MB/sec [Average]
[info]   (min, avg, max) = (740.793, 749.012, 754.763), stdev = 5.698
[info]   CI (99.9%): [727.071, 770.954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   176.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (176.000, 176.000, 176.000), stdev = 0.001
[info]   CI (99.9%): [176.000, 176.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.011 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.006), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   741.088 ±(99.9%) 586.158 MB/sec [Average]
[info]   (min, avg, max) = (672.784, 741.088, 1013.393), stdev = 152.223
[info]   CI (99.9%): [154.930, 1327.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   174.323 ±(99.9%) 143.048 B/op [Average]
[info]   (min, avg, max) = (156.901, 174.323, 240.765), stdev = 37.149
[info]   CI (99.9%): [31.275, 317.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.690 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.998), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.221 ±(99.9%) 1.590 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.221, 0.950), stdev = 0.413
[info]   CI (99.9%): [≈ 0, 1.811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 81.08% complete, ETA 00:14:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5599445.606 ops/s
[info] # Warmup Iteration   2: 6728026.960 ops/s
[info] # Warmup Iteration   3: 6730746.687 ops/s
[info] Iteration   1: 6749737.889 ops/s
[info]                  ·gc.alloc.rate:            480.334 MB/sec
[info]                  ·gc.alloc.rate.norm:       112.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.405 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 78.440 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 6743290.916 ops/s
[info]                  ·gc.alloc.rate:                   479.769 MB/sec
[info]                  ·gc.alloc.rate.norm:              112.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             336.325 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        78.514 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.155 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 7035947.245 ops/s
[info]                  ·gc.alloc.rate:            500.667 MB/sec
[info]                  ·gc.alloc.rate.norm:       112.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.103 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 150.798 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 7051165.634 ops/s
[info]                  ·gc.alloc.rate:            501.809 MB/sec
[info]                  ·gc.alloc.rate.norm:       112.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.085 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 75.235 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 7008609.486 ops/s
[info]                  ·gc.alloc.rate:            498.771 MB/sec
[info]                  ·gc.alloc.rate.norm:       112.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.831 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 151.086 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScalaPrealloc":
[info]   6917750.234 ±(99.9%) 604838.624 ops/s [Average]
[info]   (min, avg, max) = (6743290.916, 6917750.234, 7051165.634), stdev = 157074.670
[info]   CI (99.9%): [6312911.610, 7522588.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   492.270 ±(99.9%) 43.159 MB/sec [Average]
[info]   (min, avg, max) = (479.769, 492.270, 501.809), stdev = 11.208
[info]   CI (99.9%): [449.111, 535.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   112.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (112.000, 112.000, 112.000), stdev = 0.001
[info]   CI (99.9%): [112.000, 112.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   471.350 ±(99.9%) 710.474 MB/sec [Average]
[info]   (min, avg, max) = (336.325, 471.350, 674.103), stdev = 184.508
[info]   CI (99.9%): [≈ 0, 1181.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   106.814 ±(99.9%) 155.199 B/op [Average]
[info]   (min, avg, max) = (75.235, 106.814, 151.086), stdev = 40.305
[info]   CI (99.9%): [≈ 0, 262.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm":
[info]   0.031 ±(99.9%) 0.268 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.031, 0.155), stdev = 0.070
[info]   CI (99.9%): [≈ 0, 0.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 6.000), stdev = 1.643
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson
[info] # Run progress: 81.35% complete, ETA 00:14:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 103037.071 ops/s
[info] # Warmup Iteration   2: 472479.638 ops/s
[info] # Warmup Iteration   3: 479169.002 ops/s
[info] Iteration   1: 471230.333 ops/s
[info]                  ·gc.alloc.rate:                   1611.595 MB/sec
[info]                  ·gc.alloc.rate.norm:              5384.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1679.560 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5611.058 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      5.328 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 17.799 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         23.000 ms
[info] Iteration   2: 481513.151 ops/s
[info]                  ·gc.alloc.rate:                                  1647.063 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5384.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.077 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.253 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.151 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5560.808 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                2.177 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 478703.205 ops/s
[info]                  ·gc.alloc.rate:                                  1637.388 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5384.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.775 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5595.717 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 479005.549 ops/s
[info]                  ·gc.alloc.rate:                                  1639.091 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5384.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.468 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5592.178 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 467959.303 ops/s
[info]                  ·gc.alloc.rate:                                  1600.527 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5384.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.245 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4579.081 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson":
[info]   475682.308 ±(99.9%) 22256.702 ops/s [Average]
[info]   (min, avg, max) = (467959.303, 475682.308, 481513.151), stdev = 5779.995
[info]   CI (99.9%): [453425.606, 497939.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1627.133 ±(99.9%) 76.884 MB/sec [Average]
[info]   (min, avg, max) = (1600.527, 1627.133, 1647.063), stdev = 19.967
[info]   CI (99.9%): [1550.249, 1704.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5384.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5384.001, 5384.001, 5384.001), stdev = 0.001
[info]   CI (99.9%): [5384.001, 5384.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.017 ±(99.9%) 0.130 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.077), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.056 ±(99.9%) 0.423 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.056, 0.253), stdev = 0.110
[info]   CI (99.9%): [≈ 0, 0.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1629.240 ±(99.9%) 578.073 MB/sec [Average]
[info]   (min, avg, max) = (1361.245, 1629.240, 1702.468), stdev = 150.124
[info]   CI (99.9%): [1051.167, 2207.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   5387.769 ±(99.9%) 1742.179 B/op [Average]
[info]   (min, avg, max) = (4579.081, 5387.769, 5611.058), stdev = 452.438
[info]   CI (99.9%): [3645.589, 7129.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.199 ±(99.9%) 8.957 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.199, 5.328), stdev = 2.326
[info]   CI (99.9%): [≈ 0, 10.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   3.995 ±(99.9%) 29.934 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.995, 17.799), stdev = 7.774
[info]   CI (99.9%): [≈ 0, 33.929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.800, 23.000), stdev = 8.526
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce
[info] # Run progress: 81.62% complete, ETA 00:14:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 356056.727 ops/s
[info] # Warmup Iteration   2: 594389.619 ops/s
[info] # Warmup Iteration   3: 583566.461 ops/s
[info] Iteration   1: 601012.559 ops/s
[info]                  ·gc.alloc.rate:                                  2086.217 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5464.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.120 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.314 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2378.997 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6230.819 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                8.722 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   2: 605698.291 ops/s
[info]                  ·gc.alloc.rate:            2102.695 MB/sec
[info]                  ·gc.alloc.rate.norm:       5464.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2042.261 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5306.958 B/op
[info]                  ·gc.count:                 6.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 610332.363 ops/s
[info]                  ·gc.alloc.rate:                                  2118.617 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5464.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.101 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5266.662 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 606467.257 ops/s
[info]                  ·gc.alloc.rate:                                  2105.284 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5464.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.169 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5300.195 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 609301.408 ops/s
[info]                  ·gc.alloc.rate:                                  2114.844 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5464.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.873 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5275.469 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce":
[info]   606562.376 ±(99.9%) 14052.379 ops/s [Average]
[info]   (min, avg, max) = (601012.559, 606562.376, 610332.363), stdev = 3649.358
[info]   CI (99.9%): [592509.997, 620614.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.alloc.rate":
[info]   2105.531 ±(99.9%) 48.673 MB/sec [Average]
[info]   (min, avg, max) = (2086.217, 2105.531, 2118.617), stdev = 12.640
[info]   CI (99.9%): [2056.858, 2154.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5464.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5464.001, 5464.001, 5464.001), stdev = 0.001
[info]   CI (99.9%): [5464.001, 5464.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.025 ±(99.9%) 0.204 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.120), stdev = 0.053
[info]   CI (99.9%): [≈ 0, 0.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.066 ±(99.9%) 0.534 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.066, 0.314), stdev = 0.139
[info]   CI (99.9%): [≈ 0, 0.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2109.480 ±(99.9%) 580.156 MB/sec [Average]
[info]   (min, avg, max) = (2041.873, 2109.480, 2378.997), stdev = 150.665
[info]   CI (99.9%): [1529.324, 2689.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   5476.021 ±(99.9%) 1626.036 B/op [Average]
[info]   (min, avg, max) = (5266.662, 5476.021, 6230.819), stdev = 422.276
[info]   CI (99.9%): [3849.985, 7102.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   1.744 ±(99.9%) 15.019 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.744, 8.722), stdev = 3.900
[info]   CI (99.9%): [≈ 0, 16.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 8.000), stdev = 1.517
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala
[info] # Run progress: 81.89% complete, ETA 00:14:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 67935.848 ops/s
[info] # Warmup Iteration   2: 544653.880 ops/s
[info] # Warmup Iteration   3: 557274.176 ops/s
[info] Iteration   1: 563490.945 ops/s
[info]                  ·gc.alloc.rate:            870.472 MB/sec
[info]                  ·gc.alloc.rate.norm:       2432.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1006.901 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2813.166 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   2: 576441.525 ops/s
[info]                  ·gc.alloc.rate:                   890.575 MB/sec
[info]                  ·gc.alloc.rate.norm:              2432.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             670.667 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1831.471 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.819 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 572914.352 ops/s
[info]                  ·gc.alloc.rate:            885.482 MB/sec
[info]                  ·gc.alloc.rate.norm:       2432.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.394 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2766.836 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   4: 568806.202 ops/s
[info]                  ·gc.alloc.rate:                   878.819 MB/sec
[info]                  ·gc.alloc.rate.norm:              2432.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             671.357 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1857.880 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 11.059 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 555833.175 ops/s
[info]                  ·gc.alloc.rate:                                  858.794 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2432.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.209 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.591 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.416 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2889.694 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1.886 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala":
[info]   567497.240 ±(99.9%) 31232.944 ops/s [Average]
[info]   (min, avg, max) = (555833.175, 567497.240, 576441.525), stdev = 8111.096
[info]   CI (99.9%): [536264.296, 598730.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   876.828 ±(99.9%) 48.457 MB/sec [Average]
[info]   (min, avg, max) = (858.794, 876.828, 890.575), stdev = 12.584
[info]   CI (99.9%): [828.371, 925.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2432.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2432.001, 2432.001, 2432.001), stdev = 0.001
[info]   CI (99.9%): [2432.001, 2432.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.042 ±(99.9%) 0.359 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.209), stdev = 0.093
[info]   CI (99.9%): [≈ 0, 0.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.118 ±(99.9%) 1.017 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.118, 0.591), stdev = 0.264
[info]   CI (99.9%): [≈ 0, 1.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   875.347 ±(99.9%) 718.570 MB/sec [Average]
[info]   (min, avg, max) = (670.667, 875.347, 1020.416), stdev = 186.610
[info]   CI (99.9%): [156.776, 1593.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   2431.809 ±(99.9%) 2071.074 B/op [Average]
[info]   (min, avg, max) = (1831.471, 2431.809, 2889.694), stdev = 537.851
[info]   CI (99.9%): [360.736, 4502.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 6.437 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 3.996), stdev = 1.672
[info]   CI (99.9%): [≈ 0, 7.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   2.953 ±(99.9%) 17.810 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.953, 11.059), stdev = 4.625
[info]   CI (99.9%): [≈ 0, 20.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala:·gc.time":
[info]   49.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.800, 14.000), stdev = 4.324
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala
[info] # Run progress: 82.16% complete, ETA 00:14:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4419959.778 ops/s
[info] # Warmup Iteration   2: 4393510.873 ops/s
[info] # Warmup Iteration   3: 4412901.068 ops/s
[info] Iteration   1: 4404303.134 ops/s
[info]                  ·gc.alloc.rate:            1096.795 MB/sec
[info]                  ·gc.alloc.rate.norm:       392.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1347.995 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 481.780 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 4431776.548 ops/s
[info]                  ·gc.alloc.rate:                   1103.509 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1010.933 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        359.114 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.183 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 4418566.387 ops/s
[info]                  ·gc.alloc.rate:                                  1100.371 MB/sec
[info]                  ·gc.alloc.rate.norm:                             392.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.088 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.031 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.048 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       363.741 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 4405486.039 ops/s
[info]                  ·gc.alloc.rate:                                  1097.176 MB/sec
[info]                  ·gc.alloc.rate.norm:                             392.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.102 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       364.820 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 4356510.806 ops/s
[info]                  ·gc.alloc.rate:            1084.945 MB/sec
[info]                  ·gc.alloc.rate.norm:       392.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.437 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 491.899 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala":
[info]   4403328.583 ±(99.9%) 109574.098 ops/s [Average]
[info]   (min, avg, max) = (4356510.806, 4403328.583, 4431776.548), stdev = 28456.045
[info]   CI (99.9%): [4293754.485, 4512902.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1096.559 ±(99.9%) 27.102 MB/sec [Average]
[info]   (min, avg, max) = (1084.945, 1096.559, 1103.509), stdev = 7.038
[info]   CI (99.9%): [1069.457, 1123.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   392.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (392.000, 392.000, 392.000), stdev = 0.001
[info]   CI (99.9%): [392.000, 392.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.018 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.088), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.006 ±(99.9%) 0.053 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.031), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1152.503 ±(99.9%) 711.222 MB/sec [Average]
[info]   (min, avg, max) = (1010.933, 1152.503, 1361.437), stdev = 184.702
[info]   CI (99.9%): [441.281, 1863.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   412.271 ±(99.9%) 262.611 B/op [Average]
[info]   (min, avg, max) = (359.114, 412.271, 491.899), stdev = 68.199
[info]   CI (99.9%): [149.660, 674.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.237 ±(99.9%) 2.037 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.237, 1.183), stdev = 0.529
[info]   CI (99.9%): [≈ 0, 2.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 11.000), stdev = 3.899
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson
[info] # Run progress: 82.43% complete, ETA 00:13:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 67406.117 ops/s
[info] # Warmup Iteration   2: 294042.698 ops/s
[info] # Warmup Iteration   3: 293119.018 ops/s
[info] Iteration   1: 300024.058 ops/s
[info]                  ·gc.alloc.rate:                   1559.776 MB/sec
[info]                  ·gc.alloc.rate.norm:              8184.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1344.635 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        7055.176 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.494 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 292959.088 ops/s
[info]                  ·gc.alloc.rate:                                  1523.097 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8184.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.067 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.362 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1697.666 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9122.004 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                21.472 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   3: 303860.900 ops/s
[info]                  ·gc.alloc.rate:                                  1580.146 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8184.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.660 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7052.405 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 299686.117 ops/s
[info]                  ·gc.alloc.rate:            1558.062 MB/sec
[info]                  ·gc.alloc.rate.norm:       8184.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.698 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8938.476 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   5: 295801.881 ops/s
[info]                  ·gc.alloc.rate:                                  1537.812 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8184.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.614 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9055.734 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson":
[info]   298466.409 ±(99.9%) 16159.496 ops/s [Average]
[info]   (min, avg, max) = (292959.088, 298466.409, 303860.900), stdev = 4196.570
[info]   CI (99.9%): [282306.913, 314625.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1551.779 ±(99.9%) 84.491 MB/sec [Average]
[info]   (min, avg, max) = (1523.097, 1551.779, 1580.146), stdev = 21.942
[info]   CI (99.9%): [1467.287, 1636.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8184.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8184.001, 8184.001, 8184.001), stdev = 0.001
[info]   CI (99.9%): [8184.001, 8184.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.014 ±(99.9%) 0.114 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.067), stdev = 0.030
[info]   CI (99.9%): [≈ 0, 0.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.077 ±(99.9%) 0.614 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.077, 0.362), stdev = 0.160
[info]   CI (99.9%): [≈ 0, 0.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1561.455 ±(99.9%) 732.622 MB/sec [Average]
[info]   (min, avg, max) = (1344.635, 1561.455, 1701.698), stdev = 190.260
[info]   CI (99.9%): [828.832, 2294.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   8244.759 ±(99.9%) 4194.065 B/op [Average]
[info]   (min, avg, max) = (7052.405, 8244.759, 9122.004), stdev = 1089.185
[info]   CI (99.9%): [4050.694, 12438.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   4.993 ±(99.9%) 35.947 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.993, 21.472), stdev = 9.335
[info]   CI (99.9%): [≈ 0, 40.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.000, 18.000), stdev = 6.042
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce
[info] # Run progress: 82.70% complete, ETA 00:13:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 208840.010 ops/s
[info] # Warmup Iteration   2: 410799.283 ops/s
[info] # Warmup Iteration   3: 413653.982 ops/s
[info] Iteration   1: 422504.206 ops/s
[info]                  ·gc.alloc.rate:            1052.486 MB/sec
[info]                  ·gc.alloc.rate.norm:       3920.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.337 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3766.742 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 423164.954 ops/s
[info]                  ·gc.alloc.rate:            1054.094 MB/sec
[info]                  ·gc.alloc.rate.norm:       3920.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.417 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5014.538 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   3: 416738.814 ops/s
[info]                  ·gc.alloc.rate:                                  1037.825 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3920.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.027 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.104 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1014.405 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3831.538 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                12.579 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   4: 413350.588 ops/s
[info]                  ·gc.alloc.rate:                                  1029.392 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3920.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.116 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.443 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.081 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3888.349 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 415363.756 ops/s
[info]                  ·gc.alloc.rate:            1034.414 MB/sec
[info]                  ·gc.alloc.rate.norm:       3920.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.114 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3869.601 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce":
[info]   418224.464 ±(99.9%) 16880.376 ops/s [Average]
[info]   (min, avg, max) = (413350.588, 418224.464, 423164.954), stdev = 4383.780
[info]   CI (99.9%): [401344.087, 435104.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1041.642 ±(99.9%) 42.597 MB/sec [Average]
[info]   (min, avg, max) = (1029.392, 1041.642, 1054.094), stdev = 11.062
[info]   CI (99.9%): [999.045, 1084.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3920.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3920.001, 3920.001, 3920.001), stdev = 0.001
[info]   CI (99.9%): [3920.001, 3920.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.029 ±(99.9%) 0.194 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.116), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.109 ±(99.9%) 0.738 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.109, 0.443), stdev = 0.192
[info]   CI (99.9%): [≈ 0, 0.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1083.271 ±(99.9%) 570.982 MB/sec [Average]
[info]   (min, avg, max) = (1011.337, 1083.271, 1348.417), stdev = 148.282
[info]   CI (99.9%): [512.289, 1654.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   4074.154 ±(99.9%) 2032.151 B/op [Average]
[info]   (min, avg, max) = (3766.742, 4074.154, 5014.538), stdev = 527.743
[info]   CI (99.9%): [2042.002, 6106.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   2.516 ±(99.9%) 21.662 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.516, 12.579), stdev = 5.625
[info]   CI (99.9%): [≈ 0, 24.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.200, 13.000), stdev = 4.658
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala
[info] # Run progress: 82.97% complete, ETA 00:13:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2646831.485 ops/s
[info] # Warmup Iteration   2: 3078525.227 ops/s
[info] # Warmup Iteration   3: 3108242.939 ops/s
[info] Iteration   1: 3069143.171 ops/s
[info]                  ·gc.alloc.rate:            592.693 MB/sec
[info]                  ·gc.alloc.rate.norm:       304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.340 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 172.513 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 3128348.854 ops/s
[info]                  ·gc.alloc.rate:            604.310 MB/sec
[info]                  ·gc.alloc.rate.norm:       304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.872 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 338.491 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 3096872.189 ops/s
[info]                  ·gc.alloc.rate:            598.060 MB/sec
[info]                  ·gc.alloc.rate.norm:       304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.670 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 341.925 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 2959338.626 ops/s
[info]                  ·gc.alloc.rate:            571.576 MB/sec
[info]                  ·gc.alloc.rate.norm:       304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.764 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 357.819 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 2975932.903 ops/s
[info]                  ·gc.alloc.rate:            574.753 MB/sec
[info]                  ·gc.alloc.rate.norm:       304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.379 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 177.918 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala":
[info]   3045927.149 ±(99.9%) 287669.681 ops/s [Average]
[info]   (min, avg, max) = (2959338.626, 3045927.149, 3128348.854), stdev = 74706.903
[info]   CI (99.9%): [2758257.468, 3333596.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   588.278 ±(99.9%) 55.605 MB/sec [Average]
[info]   (min, avg, max) = (571.576, 588.278, 604.310), stdev = 14.440
[info]   CI (99.9%): [532.673, 643.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   304.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (304.000, 304.000, 304.000), stdev = 0.001
[info]   CI (99.9%): [304.000, 304.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   538.205 ±(99.9%) 709.516 MB/sec [Average]
[info]   (min, avg, max) = (336.340, 538.205, 672.872), stdev = 184.259
[info]   CI (99.9%): [≈ 0, 1247.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   277.733 ±(99.9%) 361.530 B/op [Average]
[info]   (min, avg, max) = (172.513, 277.733, 357.819), stdev = 93.888
[info]   CI (99.9%): [≈ 0, 639.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 6.000), stdev = 1.643
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 83.24% complete, ETA 00:13:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2555826.915 ops/s
[info] # Warmup Iteration   2: 3115827.412 ops/s
[info] # Warmup Iteration   3: 3126263.890 ops/s
[info] Iteration   1: 3039693.493 ops/s
[info]                  ·gc.alloc.rate:            509.804 MB/sec
[info]                  ·gc.alloc.rate.norm:       264.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.337 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 174.171 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 2981843.982 ops/s
[info]                  ·gc.alloc.rate:            500.075 MB/sec
[info]                  ·gc.alloc.rate.norm:       264.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.646 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 355.104 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 2990336.788 ops/s
[info]                  ·gc.alloc.rate:                   501.511 MB/sec
[info]                  ·gc.alloc.rate.norm:              264.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             336.331 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        177.048 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.351 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 2978589.231 ops/s
[info]                  ·gc.alloc.rate:            499.580 MB/sec
[info]                  ·gc.alloc.rate.norm:       264.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.090 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 356.218 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 2994360.285 ops/s
[info]                  ·gc.alloc.rate:            502.149 MB/sec
[info]                  ·gc.alloc.rate.norm:       264.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.314 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 176.814 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScalaPrealloc":
[info]   2996964.756 ±(99.9%) 95157.583 ops/s [Average]
[info]   (min, avg, max) = (2978589.231, 2996964.756, 3039693.493), stdev = 24712.122
[info]   CI (99.9%): [2901807.172, 3092122.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   502.624 ±(99.9%) 15.967 MB/sec [Average]
[info]   (min, avg, max) = (499.580, 502.624, 509.804), stdev = 4.147
[info]   CI (99.9%): [486.657, 518.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   264.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (264.000, 264.000, 264.000), stdev = 0.001
[info]   CI (99.9%): [264.000, 264.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   471.143 ±(99.9%) 710.849 MB/sec [Average]
[info]   (min, avg, max) = (336.314, 471.143, 674.090), stdev = 184.605
[info]   CI (99.9%): [≈ 0, 1181.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   247.871 ±(99.9%) 378.925 B/op [Average]
[info]   (min, avg, max) = (174.171, 247.871, 356.218), stdev = 98.406
[info]   CI (99.9%): [≈ 0, 626.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm":
[info]   0.070 ±(99.9%) 0.604 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.070, 0.351), stdev = 0.157
[info]   CI (99.9%): [≈ 0, 0.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 6.000), stdev = 1.517
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson
[info] # Run progress: 83.51% complete, ETA 00:13:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 75109.850 ops/s
[info] # Warmup Iteration   2: 342866.407 ops/s
[info] # Warmup Iteration   3: 345436.362 ops/s
[info] Iteration   1: 345302.111 ops/s
[info]                  ·gc.alloc.rate:                   1247.647 MB/sec
[info]                  ·gc.alloc.rate.norm:              5688.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1343.289 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        6124.033 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 6.072 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 347519.136 ops/s
[info]                  ·gc.alloc.rate:                   1255.934 MB/sec
[info]                  ·gc.alloc.rate.norm:              5688.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.508 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4567.434 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 18.101 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   3: 348669.866 ops/s
[info]                  ·gc.alloc.rate:                                  1259.987 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5688.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.227 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.023 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1360.729 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6142.784 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                3.007 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 349080.220 ops/s
[info]                  ·gc.alloc.rate:            1261.323 MB/sec
[info]                  ·gc.alloc.rate.norm:       5688.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.296 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6138.838 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 349823.139 ops/s
[info]                  ·gc.alloc.rate:                                  1264.012 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5688.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.950 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4594.233 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson":
[info]   348078.894 ±(99.9%) 6784.717 ops/s [Average]
[info]   (min, avg, max) = (345302.111, 348078.894, 349823.139), stdev = 1761.969
[info]   CI (99.9%): [341294.178, 354863.611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1257.781 ±(99.9%) 24.531 MB/sec [Average]
[info]   (min, avg, max) = (1247.647, 1257.781, 1264.012), stdev = 6.371
[info]   CI (99.9%): [1233.250, 1282.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5688.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5688.001, 5688.001, 5688.001), stdev = 0.001
[info]   CI (99.9%): [5688.001, 5688.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.046 ±(99.9%) 0.390 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.227), stdev = 0.101
[info]   CI (99.9%): [≈ 0, 0.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.206 ±(99.9%) 1.760 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.206, 1.023), stdev = 0.457
[info]   CI (99.9%): [≈ 0, 1.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1218.955 ±(99.9%) 718.622 MB/sec [Average]
[info]   (min, avg, max) = (1008.508, 1218.955, 1361.296), stdev = 186.624
[info]   CI (99.9%): [500.333, 1937.576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   5513.465 ±(99.9%) 3278.643 B/op [Average]
[info]   (min, avg, max) = (4567.434, 5513.465, 6142.784), stdev = 851.453
[info]   CI (99.9%): [2234.821, 8792.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.199 ±(99.9%) 6.387 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.199, 3.997), stdev = 1.659
[info]   CI (99.9%): [≈ 0, 7.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   5.436 ±(99.9%) 28.931 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.436, 18.101), stdev = 7.513
[info]   CI (99.9%): [≈ 0, 34.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.400, 18.000), stdev = 7.127
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce
[info] # Run progress: 83.78% complete, ETA 00:12:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1036435.002 ops/s
[info] # Warmup Iteration   2: 1879938.154 ops/s
[info] # Warmup Iteration   3: 1943940.672 ops/s
[info] Iteration   1: 1947246.802 ops/s
[info]                  ·gc.alloc.rate:                                  2800.561 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2264.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.101 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2476.240 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   2: 1978116.121 ops/s
[info]                  ·gc.alloc.rate:                                  2845.169 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2264.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.886 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2166.695 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 1935217.812 ops/s
[info]                  ·gc.alloc.rate:                                  2783.591 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2264.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.948 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2214.677 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 1986595.225 ops/s
[info]                  ·gc.alloc.rate:                                  2858.167 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2264.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3064.051 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2427.085 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 1993067.847 ops/s
[info]                  ·gc.alloc.rate:                                  2866.505 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2264.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.733 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2150.447 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce":
[info]   1968048.761 ±(99.9%) 97829.671 ops/s [Average]
[info]   (min, avg, max) = (1935217.812, 1968048.761, 1993067.847), stdev = 25406.055
[info]   CI (99.9%): [1870219.091, 2065878.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate":
[info]   2830.799 ±(99.9%) 141.133 MB/sec [Average]
[info]   (min, avg, max) = (2783.591, 2830.799, 2866.505), stdev = 36.652
[info]   CI (99.9%): [2689.665, 2971.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2264.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2264.000, 2264.000, 2264.000), stdev = 0.001
[info]   CI (99.9%): [2264.000, 2264.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.004 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.001, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.001 ±(99.9%) 0.003 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.001, 0.002), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2859.144 ±(99.9%) 718.609 MB/sec [Average]
[info]   (min, avg, max) = (2722.733, 2859.144, 3064.051), stdev = 186.621
[info]   CI (99.9%): [2140.535, 3577.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2287.029 ±(99.9%) 589.620 B/op [Average]
[info]   (min, avg, max) = (2150.447, 2287.029, 2476.240), stdev = 153.123
[info]   CI (99.9%): [1697.408, 2876.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.count":
[info]   42.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.400, 9.000), stdev = 0.548
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava
[info] # Run progress: 84.05% complete, ETA 00:12:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.913 ops/s
[info] # Warmup Iteration   2: 858787.321 ops/s
[info] # Warmup Iteration   3: 869412.328 ops/s
[info] Iteration   1: 884592.372 ops/s
[info]                  ·gc.alloc.rate:            526.125 MB/sec
[info]                  ·gc.alloc.rate.norm:       936.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.770 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 593.793 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 886114.688 ops/s
[info]                  ·gc.alloc.rate:            526.986 MB/sec
[info]                  ·gc.alloc.rate.norm:       936.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.488 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1185.551 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 861542.494 ops/s
[info]                  ·gc.alloc.rate:            512.293 MB/sec
[info]                  ·gc.alloc.rate.norm:       936.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.685 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 609.670 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 858271.973 ops/s
[info]                  ·gc.alloc.rate:            510.391 MB/sec
[info]                  ·gc.alloc.rate.norm:       936.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.436 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1224.003 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 859771.992 ops/s
[info]                  ·gc.alloc.rate:            511.265 MB/sec
[info]                  ·gc.alloc.rate.norm:       936.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.707 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 610.935 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava":
[info]   870058.704 ±(99.9%) 53987.739 ops/s [Average]
[info]   (min, avg, max) = (858271.973, 870058.704, 886114.688), stdev = 14020.444
[info]   CI (99.9%): [816070.965, 924046.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   517.412 ±(99.9%) 32.266 MB/sec [Average]
[info]   (min, avg, max) = (510.391, 517.412, 526.986), stdev = 8.379
[info]   CI (99.9%): [485.146, 549.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   936.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (936.000, 936.000, 936.001), stdev = 0.001
[info]   CI (99.9%): [936.000, 936.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   467.217 ±(99.9%) 703.888 MB/sec [Average]
[info]   (min, avg, max) = (333.685, 467.217, 667.488), stdev = 182.797
[info]   CI (99.9%): [≈ 0, 1171.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   844.790 ±(99.9%) 1266.754 B/op [Average]
[info]   (min, avg, max) = (593.793, 844.790, 1224.003), stdev = 328.972
[info]   CI (99.9%): [≈ 0, 2111.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.600, 9.000), stdev = 2.191
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala
[info] # Run progress: 84.32% complete, ETA 00:12:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30397.798 ops/s
[info] # Warmup Iteration   2: 264574.767 ops/s
[info] # Warmup Iteration   3: 286775.177 ops/s
[info] Iteration   1: 283077.401 ops/s
[info]                  ·gc.alloc.rate:            535.356 MB/sec
[info]                  ·gc.alloc.rate.norm:       2976.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.443 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1870.262 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 288431.051 ops/s
[info]                  ·gc.alloc.rate:            545.286 MB/sec
[info]                  ·gc.alloc.rate.norm:       2976.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.662 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3671.179 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 288820.683 ops/s
[info]                  ·gc.alloc.rate:            546.035 MB/sec
[info]                  ·gc.alloc.rate.norm:       2976.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.676 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3666.223 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 291021.468 ops/s
[info]                  ·gc.alloc.rate:            550.206 MB/sec
[info]                  ·gc.alloc.rate.norm:       2976.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.343 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1819.244 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 288450.939 ops/s
[info]                  ·gc.alloc.rate:                   545.493 MB/sec
[info]                  ·gc.alloc.rate.norm:              2976.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.195 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3667.239 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.635 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala":
[info]   287960.308 ±(99.9%) 11294.938 ops/s [Average]
[info]   (min, avg, max) = (283077.401, 287960.308, 291021.468), stdev = 2933.259
[info]   CI (99.9%): [276665.371, 299255.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   544.475 ±(99.9%) 21.102 MB/sec [Average]
[info]   (min, avg, max) = (535.356, 544.475, 550.206), stdev = 5.480
[info]   CI (99.9%): [523.373, 565.578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2976.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2976.001, 2976.001, 2976.002), stdev = 0.001
[info]   CI (99.9%): [2976.001, 2976.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   538.064 ±(99.9%) 708.902 MB/sec [Average]
[info]   (min, avg, max) = (336.343, 538.064, 672.676), stdev = 184.100
[info]   CI (99.9%): [≈ 0, 1246.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   2938.829 ±(99.9%) 3846.467 B/op [Average]
[info]   (min, avg, max) = (1819.244, 2938.829, 3671.179), stdev = 998.915
[info]   CI (99.9%): [≈ 0, 6785.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.727 ±(99.9%) 6.259 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.727, 3.635), stdev = 1.625
[info]   CI (99.9%): [≈ 0, 6.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.000, 9.000), stdev = 2.739
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala
[info] # Run progress: 84.59% complete, ETA 00:12:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 650085.010 ops/s
[info] # Warmup Iteration   2: 693515.067 ops/s
[info] # Warmup Iteration   3: 716291.496 ops/s
[info] Iteration   1: 712032.958 ops/s
[info]                  ·gc.alloc.rate:            535.566 MB/sec
[info]                  ·gc.alloc.rate.norm:       1184.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.983 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1490.007 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 736670.386 ops/s
[info]                  ·gc.alloc.rate:            554.078 MB/sec
[info]                  ·gc.alloc.rate.norm:       1184.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.002 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 720.134 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 746634.034 ops/s
[info]                  ·gc.alloc.rate:            561.609 MB/sec
[info]                  ·gc.alloc.rate.norm:       1184.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.061 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1421.076 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 740999.449 ops/s
[info]                  ·gc.alloc.rate:            557.377 MB/sec
[info]                  ·gc.alloc.rate.norm:       1184.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.063 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1431.870 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 743151.593 ops/s
[info]                  ·gc.alloc.rate:            558.934 MB/sec
[info]                  ·gc.alloc.rate.norm:       1184.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.985 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 713.841 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala":
[info]   735897.684 ±(99.9%) 53218.304 ops/s [Average]
[info]   (min, avg, max) = (712032.958, 735897.684, 746634.034), stdev = 13820.624
[info]   CI (99.9%): [682679.380, 789115.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   553.513 ±(99.9%) 40.031 MB/sec [Average]
[info]   (min, avg, max) = (535.566, 553.513, 561.609), stdev = 10.396
[info]   CI (99.9%): [513.482, 593.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1184.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1184.001, 1184.001, 1184.001), stdev = 0.001
[info]   CI (99.9%): [1184.000, 1184.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   539.219 ±(99.9%) 710.852 MB/sec [Average]
[info]   (min, avg, max) = (336.985, 539.219, 674.063), stdev = 184.606
[info]   CI (99.9%): [≈ 0, 1250.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1155.386 ±(99.9%) 1544.358 B/op [Average]
[info]   (min, avg, max) = (713.841, 1155.386, 1490.007), stdev = 401.065
[info]   CI (99.9%): [≈ 0, 2699.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 1.095
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless
[info] # Run progress: 84.86% complete, ETA 00:11:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3604567.936 ops/s
[info] # Warmup Iteration   2: 4003336.083 ops/s
[info] # Warmup Iteration   3: 4126690.712 ops/s
[info] Iteration   1: 4121007.356 ops/s
[info]                  ·gc.alloc.rate:            1319.453 MB/sec
[info]                  ·gc.alloc.rate.norm:       504.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.068 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 514.930 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 4068470.839 ops/s
[info]                  ·gc.alloc.rate:                                  1302.552 MB/sec
[info]                  ·gc.alloc.rate.norm:                             504.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.080 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.031 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.620 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       393.751 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1.288 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 4006293.353 ops/s
[info]                  ·gc.alloc.rate:                                  1282.747 MB/sec
[info]                  ·gc.alloc.rate.norm:                             504.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.351 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       534.884 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 4268151.719 ops/s
[info]                  ·gc.alloc.rate:                                  1367.236 MB/sec
[info]                  ·gc.alloc.rate.norm:                             504.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.017 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       502.076 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 4062871.735 ops/s
[info]                  ·gc.alloc.rate:            1300.877 MB/sec
[info]                  ·gc.alloc.rate.norm:       504.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.387 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 527.444 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless":
[info]   4105359.000 ±(99.9%) 383744.474 ops/s [Average]
[info]   (min, avg, max) = (4006293.353, 4105359.000, 4268151.719), stdev = 99657.221
[info]   CI (99.9%): [3721614.527, 4489103.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate":
[info]   1314.573 ±(99.9%) 123.913 MB/sec [Average]
[info]   (min, avg, max) = (1282.747, 1314.573, 1367.236), stdev = 32.180
[info]   CI (99.9%): [1190.660, 1438.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm":
[info]   504.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (504.000, 504.000, 504.000), stdev = 0.001
[info]   CI (99.9%): [504.000, 504.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.018 ±(99.9%) 0.133 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.080), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.007 ±(99.9%) 0.052 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.031), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Old_Gen":
[info]   1290.089 ±(99.9%) 586.942 MB/sec [Average]
[info]   (min, avg, max) = (1017.620, 1290.089, 1362.017), stdev = 152.427
[info]   CI (99.9%): [703.146, 1877.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Old_Gen.norm":
[info]   494.617 ±(99.9%) 222.384 B/op [Average]
[info]   (min, avg, max) = (393.751, 494.617, 534.884), stdev = 57.752
[info]   CI (99.9%): [272.233, 717.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Survivor_Space.norm":
[info]   0.258 ±(99.9%) 2.219 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.258, 1.288), stdev = 0.576
[info]   CI (99.9%): [≈ 0, 2.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 10.000), stdev = 2.915
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump
[info] # Run progress: 85.14% complete, ETA 00:11:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6873510.748 ops/s
[info] # Warmup Iteration   2: 7336069.700 ops/s
[info] # Warmup Iteration   3: 7800775.581 ops/s
[info] Iteration   1: 8098356.070 ops/s
[info]                  ·gc.alloc.rate:                   658.589 MB/sec
[info]                  ·gc.alloc.rate.norm:              128.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.735 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        131.138 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.129 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 7862574.826 ops/s
[info]                  ·gc.alloc.rate:            639.333 MB/sec
[info]                  ·gc.alloc.rate.norm:       128.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.990 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 134.939 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 7917877.317 ops/s
[info]                  ·gc.alloc.rate:            643.901 MB/sec
[info]                  ·gc.alloc.rate.norm:       128.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.079 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 133.999 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 7818110.137 ops/s
[info]                  ·gc.alloc.rate:            635.768 MB/sec
[info]                  ·gc.alloc.rate.norm:       128.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.061 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 135.710 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 8074434.353 ops/s
[info]                  ·gc.alloc.rate:            656.553 MB/sec
[info]                  ·gc.alloc.rate.norm:       128.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.997 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 65.700 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump":
[info]   7954270.541 ±(99.9%) 485059.671 ops/s [Average]
[info]   (min, avg, max) = (7818110.137, 7954270.541, 8098356.070), stdev = 125968.456
[info]   CI (99.9%): [7469210.870, 8439330.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate":
[info]   646.829 ±(99.9%) 39.455 MB/sec [Average]
[info]   (min, avg, max) = (635.768, 646.829, 658.589), stdev = 10.246
[info]   CI (99.9%): [607.373, 686.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm":
[info]   128.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (128.000, 128.000, 128.000), stdev = 0.001
[info]   CI (99.9%): [128.000, 128.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.G1_Old_Gen":
[info]   606.773 ±(99.9%) 580.713 MB/sec [Average]
[info]   (min, avg, max) = (336.997, 606.773, 674.735), stdev = 150.809
[info]   CI (99.9%): [26.060, 1187.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.G1_Old_Gen.norm":
[info]   120.297 ±(99.9%) 117.713 B/op [Average]
[info]   (min, avg, max) = (65.700, 120.297, 135.710), stdev = 30.570
[info]   CI (99.9%): [2.584, 238.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.G1_Survivor_Space.norm":
[info]   0.026 ±(99.9%) 0.223 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.129), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 6.000), stdev = 1.095
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson
[info] # Run progress: 85.41% complete, ETA 00:11:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17768.342 ops/s
[info] # Warmup Iteration   2: 171275.681 ops/s
[info] # Warmup Iteration   3: 181125.445 ops/s
[info] Iteration   1: 184216.071 ops/s
[info]                  ·gc.alloc.rate:            1249.719 MB/sec
[info]                  ·gc.alloc.rate.norm:       10680.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1343.920 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11485.038 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   2: 184798.900 ops/s
[info]                  ·gc.alloc.rate:                   1253.585 MB/sec
[info]                  ·gc.alloc.rate.norm:              10680.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1343.130 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        11442.889 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.661 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 39.713 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   3: 187443.501 ops/s
[info]                  ·gc.alloc.rate:                                  1272.316 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10680.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.150 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.259 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.446 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8574.163 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 188273.898 ops/s
[info]                  ·gc.alloc.rate:                                  1277.374 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10680.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.359 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11382.191 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 189604.625 ops/s
[info]                  ·gc.alloc.rate:                                  1286.505 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10680.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.467 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11302.302 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson":
[info]   186867.399 ±(99.9%) 8846.172 ops/s [Average]
[info]   (min, avg, max) = (184216.071, 186867.399, 189604.625), stdev = 2297.323
[info]   CI (99.9%): [178021.227, 195713.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1267.900 ±(99.9%) 60.606 MB/sec [Average]
[info]   (min, avg, max) = (1249.719, 1267.900, 1286.505), stdev = 15.739
[info]   CI (99.9%): [1207.294, 1328.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   10680.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10680.002, 10680.002, 10680.002), stdev = 0.001
[info]   CI (99.9%): [10680.002, 10680.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.030 ±(99.9%) 0.258 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.150), stdev = 0.067
[info]   CI (99.9%): [≈ 0, 0.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.254 ±(99.9%) 2.162 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.254, 1.259), stdev = 0.561
[info]   CI (99.9%): [≈ 0, 2.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1286.265 ±(99.9%) 571.083 MB/sec [Average]
[info]   (min, avg, max) = (1021.446, 1286.265, 1361.467), stdev = 148.308
[info]   CI (99.9%): [715.182, 1857.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   10837.317 ±(99.9%) 4878.791 B/op [Average]
[info]   (min, avg, max) = (8574.163, 10837.317, 11485.038), stdev = 1267.007
[info]   CI (99.9%): [5958.525, 15716.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.027 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.661), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   7.943 ±(99.9%) 68.387 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.943, 39.713), stdev = 17.760
[info]   CI (99.9%): [≈ 0, 76.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.time":
[info]   49.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.800, 19.000), stdev = 7.981
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce
[info] # Run progress: 85.68% complete, ETA 00:11:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 440435.838 ops/s
[info] # Warmup Iteration   2: 657548.847 ops/s
[info] # Warmup Iteration   3: 654963.482 ops/s
[info] Iteration   1: 667586.259 ops/s
[info]                  ·gc.alloc.rate:                                  2541.531 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5992.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.110 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6420.100 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 662146.640 ops/s
[info]                  ·gc.alloc.rate:                                  2521.473 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5992.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2383.275 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5663.588 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 674353.354 ops/s
[info]                  ·gc.alloc.rate:                                  2567.552 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5992.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.394 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6355.694 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 664102.206 ops/s
[info]                  ·gc.alloc.rate:                                  2527.865 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5992.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.359 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5647.097 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 669194.429 ops/s
[info]                  ·gc.alloc.rate:                                  2547.389 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5992.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.835 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6404.685 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce":
[info]   667476.578 ±(99.9%) 18270.050 ops/s [Average]
[info]   (min, avg, max) = (662146.640, 667476.578, 674353.354), stdev = 4744.674
[info]   CI (99.9%): [649206.528, 685746.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.alloc.rate":
[info]   2541.162 ±(99.9%) 69.414 MB/sec [Average]
[info]   (min, avg, max) = (2521.473, 2541.162, 2567.552), stdev = 18.027
[info]   CI (99.9%): [2471.748, 2610.576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5992.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5992.001, 5992.001, 5992.001), stdev = 0.001
[info]   CI (99.9%): [5992.001, 5992.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.005 ±(99.9%) 0.011 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.005, 0.008), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.011 ±(99.9%) 0.025 B/op [Average]
[info]   (min, avg, max) = (0.003, 0.011, 0.018), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2586.995 ±(99.9%) 717.714 MB/sec [Average]
[info]   (min, avg, max) = (2382.359, 2586.995, 2723.394), stdev = 186.388
[info]   CI (99.9%): [1869.280, 3304.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   6098.233 ±(99.9%) 1559.674 B/op [Average]
[info]   (min, avg, max) = (5647.097, 6098.233, 6420.100), stdev = 405.042
[info]   CI (99.9%): [4538.558, 7657.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.count":
[info]   38.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.600, 8.000), stdev = 0.548
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala
[info] # Run progress: 85.95% complete, ETA 00:11:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2776567.070 ops/s
[info] # Warmup Iteration   2: 3284746.141 ops/s
[info] # Warmup Iteration   3: 3281372.282 ops/s
[info] Iteration   1: 3267634.163 ops/s
[info]                  ·gc.alloc.rate:                                  2109.004 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1016.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.079 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.038 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.268 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1147.643 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 3297027.770 ops/s
[info]                  ·gc.alloc.rate:                                  2127.935 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1016.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.990 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       974.965 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 3289726.489 ops/s
[info]                  ·gc.alloc.rate:                                  2123.383 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1016.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.154 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       977.134 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 3296548.446 ops/s
[info]                  ·gc.alloc.rate:                                  2128.029 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1016.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.366 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       975.101 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 3273837.849 ops/s
[info]                  ·gc.alloc.rate:                                  2113.105 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1016.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.502 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1145.529 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala":
[info]   3284954.943 ±(99.9%) 51895.528 ops/s [Average]
[info]   (min, avg, max) = (3267634.163, 3284954.943, 3297027.770), stdev = 13477.104
[info]   CI (99.9%): [3233059.415, 3336850.472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2120.291 ±(99.9%) 33.728 MB/sec [Average]
[info]   (min, avg, max) = (2109.004, 2120.291, 2128.029), stdev = 8.759
[info]   CI (99.9%): [2086.563, 2154.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1016.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1016.000, 1016.000, 1016.000), stdev = 0.001
[info]   CI (99.9%): [1016.000, 1016.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.017 ±(99.9%) 0.133 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.017, 0.079), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.008 ±(99.9%) 0.064 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.008, 0.038), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   2178.256 ±(99.9%) 717.543 MB/sec [Average]
[info]   (min, avg, max) = (2041.990, 2178.256, 2382.502), stdev = 186.344
[info]   CI (99.9%): [1460.713, 2895.799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1044.074 ±(99.9%) 360.369 B/op [Average]
[info]   (min, avg, max) = (974.965, 1044.074, 1147.643), stdev = 93.587
[info]   CI (99.9%): [683.705, 1404.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson
[info] # Run progress: 86.22% complete, ETA 00:10:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 45287.894 ops/s
[info] # Warmup Iteration   2: 223679.743 ops/s
[info] # Warmup Iteration   3: 226100.121 ops/s
[info] Iteration   1: 229725.146 ops/s
[info]                  ·gc.alloc.rate:                   1645.634 MB/sec
[info]                  ·gc.alloc.rate.norm:              11272.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1679.030 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        11500.747 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 31.947 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         22.000 ms
[info] Iteration   2: 234826.651 ops/s
[info]                  ·gc.alloc.rate:                                  1681.583 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11272.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.057 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.383 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.756 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11407.222 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 234381.604 ops/s
[info]                  ·gc.alloc.rate:                                  1679.046 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11272.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.023 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.450 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11429.121 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 234907.540 ops/s
[info]                  ·gc.alloc.rate:                                  1682.669 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11272.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.275 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11403.338 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 236786.412 ops/s
[info]                  ·gc.alloc.rate:            1695.703 MB/sec
[info]                  ·gc.alloc.rate.norm:       11272.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.807 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11312.574 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson":
[info]   234125.470 ±(99.9%) 10117.079 ops/s [Average]
[info]   (min, avg, max) = (229725.146, 234125.470, 236786.412), stdev = 2627.373
[info]   CI (99.9%): [224008.392, 244242.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1676.927 ±(99.9%) 71.805 MB/sec [Average]
[info]   (min, avg, max) = (1645.634, 1676.927, 1695.703), stdev = 18.648
[info]   CI (99.9%): [1605.122, 1748.732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   11272.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11272.002, 11272.002, 11272.002), stdev = 0.001
[info]   CI (99.9%): [11272.001, 11272.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.012 ±(99.9%) 0.097 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.057), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.082 ±(99.9%) 0.648 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.082, 0.383), stdev = 0.168
[info]   CI (99.9%): [≈ 0, 0.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1697.463 ±(99.9%) 39.697 MB/sec [Average]
[info]   (min, avg, max) = (1679.030, 1697.463, 1702.450), stdev = 10.309
[info]   CI (99.9%): [1657.767, 1737.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   11410.600 ±(99.9%) 259.330 B/op [Average]
[info]   (min, avg, max) = (11312.574, 11410.600, 11500.747), stdev = 67.347
[info]   CI (99.9%): [11151.270, 11669.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.032 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.664), stdev = 2.086
[info]   CI (99.9%): [≈ 0, 8.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   6.389 ±(99.9%) 55.014 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.389, 31.947), stdev = 14.287
[info]   CI (99.9%): [≈ 0, 61.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.800, 22.000), stdev = 8.012
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce
[info] # Run progress: 86.49% complete, ETA 00:10:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 499866.301 ops/s
[info] # Warmup Iteration   2: 686709.329 ops/s
[info] # Warmup Iteration   3: 688247.111 ops/s
[info] Iteration   1: 715332.334 ops/s
[info]                  ·gc.alloc.rate:                   1531.295 MB/sec
[info]                  ·gc.alloc.rate.norm:              3368.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.713 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2966.422 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 7.328 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 733534.291 ops/s
[info]                  ·gc.alloc.rate:                                  1569.432 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3368.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.101 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.217 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.695 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3651.837 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 730749.554 ops/s
[info]                  ·gc.alloc.rate:                                  1563.576 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3368.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.394 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2932.494 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 732405.935 ops/s
[info]                  ·gc.alloc.rate:                                  1567.105 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3368.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.747 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3657.371 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 697023.585 ops/s
[info]                  ·gc.alloc.rate:                                  1491.350 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3368.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.322 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3074.350 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce":
[info]   721809.140 ±(99.9%) 60455.569 ops/s [Average]
[info]   (min, avg, max) = (697023.585, 721809.140, 733534.291), stdev = 15700.119
[info]   CI (99.9%): [661353.570, 782264.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1544.552 ±(99.9%) 129.094 MB/sec [Average]
[info]   (min, avg, max) = (1491.350, 1544.552, 1569.432), stdev = 33.525
[info]   CI (99.9%): [1415.458, 1673.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3368.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3368.001, 3368.001, 3368.001), stdev = 0.001
[info]   CI (99.9%): [3368.000, 3368.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.021 ±(99.9%) 0.171 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.101), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.046 ±(99.9%) 0.368 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.217), stdev = 0.096
[info]   CI (99.9%): [≈ 0, 0.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1494.974 ±(99.9%) 727.016 MB/sec [Average]
[info]   (min, avg, max) = (1348.713, 1494.974, 1701.747), stdev = 188.804
[info]   CI (99.9%): [767.958, 2221.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   3256.495 ±(99.9%) 1413.889 B/op [Average]
[info]   (min, avg, max) = (2932.494, 3256.495, 3657.371), stdev = 367.183
[info]   CI (99.9%): [1842.605, 4670.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.738 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.332), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   1.466 ±(99.9%) 12.619 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.466, 7.328), stdev = 3.277
[info]   CI (99.9%): [≈ 0, 14.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 13.000), stdev = 4.159
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala
[info] # Run progress: 86.76% complete, ETA 00:10:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_8263f884/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 521672.142 ops/s
[info] # Warmup Iteration   2: 1331916.900 ops/s
[info] # Warmup Iteration   3: 1303538.672 ops/s
[info] Iteration   1: 1285800.589 ops/s
[info]                  ·gc.alloc.rate:            640.405 MB/sec
[info]                  ·gc.alloc.rate.norm:       784.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.055 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 820.298 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 1301363.808 ops/s
[info]                  ·gc.alloc.rate:                   648.195 MB/sec
[info]                  ·gc.alloc.rate.norm:              784.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             670.754 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        811.286 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.806 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 1344771.219 ops/s
[info]                  ·gc.alloc.rate:            669.795 MB/sec
[info]                  ·gc.alloc.rate.norm:       784.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.070 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 784.322 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 1339871.462 ops/s
[info]                  ·gc.alloc.rate:                   667.463 MB/sec
[info]                  ·gc.alloc.rate.norm:              784.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             670.842 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        787.969 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.782 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 1365260.911 ops/s
[info]                  ·gc.alloc.rate:                   680.064 MB/sec
[info]                  ·gc.alloc.rate.norm:              784.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             670.790 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        773.309 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.768 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala":
[info]   1327413.598 ±(99.9%) 126239.157 ops/s [Average]
[info]   (min, avg, max) = (1285800.589, 1327413.598, 1365260.911), stdev = 32783.908
[info]   CI (99.9%): [1201174.441, 1453652.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   661.184 ±(99.9%) 62.994 MB/sec [Average]
[info]   (min, avg, max) = (640.405, 661.184, 680.064), stdev = 16.359
[info]   CI (99.9%): [598.190, 724.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   784.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (784.000, 784.000, 784.000), stdev = 0.001
[info]   CI (99.9%): [784.000, 784.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   670.502 ±(99.9%) 1.551 MB/sec [Average]
[info]   (min, avg, max) = (670.055, 670.502, 670.842), stdev = 0.403
[info]   CI (99.9%): [668.951, 672.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   795.437 ±(99.9%) 75.511 B/op [Average]
[info]   (min, avg, max) = (773.309, 795.437, 820.298), stdev = 19.610
[info]   CI (99.9%): [719.926, 870.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.400 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.400, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.471 ±(99.9%) 1.657 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.471, 0.806), stdev = 0.430
[info]   CI (99.9%): [≈ 0, 2.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 9.200, 10.000), stdev = 0.447
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala
[info] # Run progress: 87.03% complete, ETA 00:10:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3798157.305 ops/s
[info] # Warmup Iteration   2: 4337559.609 ops/s
[info] # Warmup Iteration   3: 4517808.376 ops/s
[info] Iteration   1: 4535755.446 ops/s
[info]                  ·gc.alloc.rate:            345.897 MB/sec
[info]                  ·gc.alloc.rate.norm:       120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.124 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 116.957 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 4568231.393 ops/s
[info]                  ·gc.alloc.rate:            348.299 MB/sec
[info]                  ·gc.alloc.rate.norm:       120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.390 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 115.897 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 4533657.115 ops/s
[info]                  ·gc.alloc.rate:            345.643 MB/sec
[info]                  ·gc.alloc.rate.norm:       120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.747 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 233.564 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 4532842.074 ops/s
[info]                  ·gc.alloc.rate:            345.553 MB/sec
[info]                  ·gc.alloc.rate.norm:       120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.347 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 116.803 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 4423871.010 ops/s
[info]                  ·gc.alloc.rate:            337.254 MB/sec
[info]                  ·gc.alloc.rate.norm:       120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.349 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 119.678 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala":
[info]   4518871.407 ±(99.9%) 212312.920 ops/s [Average]
[info]   (min, avg, max) = (4423871.010, 4518871.407, 4568231.393), stdev = 55136.991
[info]   CI (99.9%): [4306558.487, 4731184.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   344.529 ±(99.9%) 16.257 MB/sec [Average]
[info]   (min, avg, max) = (337.254, 344.529, 348.299), stdev = 4.222
[info]   CI (99.9%): [328.272, 360.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   120.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (120.000, 120.000, 120.000), stdev = 0.001
[info]   CI (99.9%): [120.000, 120.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   403.791 ±(99.9%) 578.948 MB/sec [Average]
[info]   (min, avg, max) = (336.347, 403.791, 672.747), stdev = 150.351
[info]   CI (99.9%): [≈ 0, 982.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   140.580 ±(99.9%) 200.229 B/op [Average]
[info]   (min, avg, max) = (115.897, 140.580, 233.564), stdev = 51.999
[info]   CI (99.9%): [≈ 0, 340.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 6.000), stdev = 1.342
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 87.30% complete, ETA 00:10:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4084200.351 ops/s
[info] # Warmup Iteration   2: 4811137.787 ops/s
[info] # Warmup Iteration   3: 4842904.173 ops/s
[info] Iteration   1: 4934859.684 ops/s
[info]                  ·gc.alloc.rate:            175.586 MB/sec
[info]                  ·gc.alloc.rate.norm:       56.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.062 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 107.500 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 4936391.819 ops/s
[info]                  ·gc.alloc.rate:      175.605 MB/sec
[info]                  ·gc.alloc.rate.norm: 56.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 4917649.931 ops/s
[info]                  ·gc.alloc.rate:            174.991 MB/sec
[info]                  ·gc.alloc.rate.norm:       56.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.101 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 107.878 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 4962606.807 ops/s
[info]                  ·gc.alloc.rate:      176.565 MB/sec
[info]                  ·gc.alloc.rate.norm: 56.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 4947865.484 ops/s
[info]                  ·gc.alloc.rate:            176.035 MB/sec
[info]                  ·gc.alloc.rate.norm:       56.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.383 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 107.010 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScalaPrealloc":
[info]   4939874.745 ±(99.9%) 64197.941 ops/s [Average]
[info]   (min, avg, max) = (4917649.931, 4939874.745, 4962606.807), stdev = 16672.001
[info]   CI (99.9%): [4875676.804, 5004072.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   175.757 ±(99.9%) 2.252 MB/sec [Average]
[info]   (min, avg, max) = (174.991, 175.757, 176.565), stdev = 0.585
[info]   CI (99.9%): [173.504, 178.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   56.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (56.000, 56.000, 56.000), stdev = 0.001
[info]   CI (99.9%): [56.000, 56.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   202.109 ±(99.9%) 710.443 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 202.109, 337.101), stdev = 184.500
[info]   CI (99.9%): [≈ 0, 912.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   64.478 ±(99.9%) 226.651 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 64.478, 107.878), stdev = 58.860
[info]   CI (99.9%): [≈ 0, 291.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson
[info] # Run progress: 87.57% complete, ETA 00:09:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 118669.903 ops/s
[info] # Warmup Iteration   2: 447381.298 ops/s
[info] # Warmup Iteration   3: 455414.811 ops/s
[info] Iteration   1: 455131.108 ops/s
[info]                  ·gc.alloc.rate:                   1538.093 MB/sec
[info]                  ·gc.alloc.rate.norm:              5320.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1679.659 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5809.655 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 16.125 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         23.000 ms
[info] Iteration   2: 455452.554 ops/s
[info]                  ·gc.alloc.rate:                                  1539.312 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5320.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.092 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.318 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1360.745 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4702.857 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                2.302 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 454012.533 ops/s
[info]                  ·gc.alloc.rate:                                  1534.531 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5320.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.843 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5900.048 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 451611.232 ops/s
[info]                  ·gc.alloc.rate:                                  1526.235 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5320.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.300 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4745.087 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 445046.780 ops/s
[info]                  ·gc.alloc.rate:                                  1504.584 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5320.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.239 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6018.880 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson":
[info]   452250.841 ±(99.9%) 16557.552 ops/s [Average]
[info]   (min, avg, max) = (445046.780, 452250.841, 455452.554), stdev = 4299.944
[info]   CI (99.9%): [435693.289, 468808.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1528.551 ±(99.9%) 55.213 MB/sec [Average]
[info]   (min, avg, max) = (1504.584, 1528.551, 1539.312), stdev = 14.339
[info]   CI (99.9%): [1473.338, 1583.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5320.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5320.001, 5320.001, 5320.001), stdev = 0.001
[info]   CI (99.9%): [5320.001, 5320.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.019 ±(99.9%) 0.157 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.092), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.066 ±(99.9%) 0.542 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.066, 0.318), stdev = 0.141
[info]   CI (99.9%): [≈ 0, 0.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1561.157 ±(99.9%) 704.382 MB/sec [Average]
[info]   (min, avg, max) = (1360.745, 1561.157, 1702.239), stdev = 182.926
[info]   CI (99.9%): [856.776, 2265.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   5435.306 ±(99.9%) 2517.365 B/op [Average]
[info]   (min, avg, max) = (4702.857, 5435.306, 6018.880), stdev = 653.752
[info]   CI (99.9%): [2917.941, 7952.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.821 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.662), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   3.685 ±(99.9%) 27.051 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.685, 16.125), stdev = 7.025
[info]   CI (99.9%): [≈ 0, 30.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.600, 23.000), stdev = 8.620
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala
[info] # Run progress: 87.84% complete, ETA 00:09:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 47961.220 ops/s
[info] # Warmup Iteration   2: 583442.261 ops/s
[info] # Warmup Iteration   3: 592905.697 ops/s
[info] Iteration   1: 594641.486 ops/s
[info]                  ·gc.alloc.rate:            970.009 MB/sec
[info]                  ·gc.alloc.rate.norm:       2568.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.324 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1777.262 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 583816.572 ops/s
[info]                  ·gc.alloc.rate:            952.480 MB/sec
[info]                  ·gc.alloc.rate.norm:       2568.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.136 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2715.360 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   3: 591187.603 ops/s
[info]                  ·gc.alloc.rate:            964.421 MB/sec
[info]                  ·gc.alloc.rate.norm:       2568.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1006.996 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2681.367 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   4: 590756.628 ops/s
[info]                  ·gc.alloc.rate:                                  963.776 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2568.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.214 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.569 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1015.713 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2706.390 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                12.423 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   5: 576291.122 ops/s
[info]                  ·gc.alloc.rate:                                  940.452 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2568.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.048 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.132 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.342 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2788.877 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala":
[info]   587338.682 ±(99.9%) 28183.540 ops/s [Average]
[info]   (min, avg, max) = (576291.122, 587338.682, 594641.486), stdev = 7319.176
[info]   CI (99.9%): [559155.142, 615522.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   958.227 ±(99.9%) 45.436 MB/sec [Average]
[info]   (min, avg, max) = (940.452, 958.227, 970.009), stdev = 11.800
[info]   CI (99.9%): [912.791, 1003.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2568.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2568.001, 2568.001, 2568.001), stdev = 0.001
[info]   CI (99.9%): [2568.001, 2568.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.052 ±(99.9%) 0.356 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.052, 0.214), stdev = 0.092
[info]   CI (99.9%): [≈ 0, 0.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.140 ±(99.9%) 0.949 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.140, 0.569), stdev = 0.246
[info]   CI (99.9%): [≈ 0, 1.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   944.502 ±(99.9%) 588.501 MB/sec [Average]
[info]   (min, avg, max) = (671.324, 944.502, 1021.342), stdev = 152.832
[info]   CI (99.9%): [356.001, 1533.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   2533.851 ±(99.9%) 1635.890 B/op [Average]
[info]   (min, avg, max) = (1777.262, 2533.851, 2788.877), stdev = 424.835
[info]   CI (99.9%): [897.961, 4169.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   2.485 ±(99.9%) 21.393 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.485, 12.423), stdev = 5.556
[info]   CI (99.9%): [≈ 0, 23.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala:·gc.time":
[info]   48.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 9.600, 14.000), stdev = 4.980
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala
[info] # Run progress: 88.11% complete, ETA 00:09:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2623025.027 ops/s
[info] # Warmup Iteration   2: 3030179.431 ops/s
[info] # Warmup Iteration   3: 3182346.694 ops/s
[info] Iteration   1: 3126751.162 ops/s
[info]                  ·gc.alloc.rate:                   1478.169 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.271 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        678.619 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.676 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 3110837.444 ops/s
[info]                  ·gc.alloc.rate:                                  1470.567 MB/sec
[info]                  ·gc.alloc.rate.norm:                             744.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.149 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.075 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.021 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       861.099 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 3050584.880 ops/s
[info]                  ·gc.alloc.rate:            1441.859 MB/sec
[info]                  ·gc.alloc.rate.norm:       744.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.443 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 702.505 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 3084472.777 ops/s
[info]                  ·gc.alloc.rate:                                  1457.943 MB/sec
[info]                  ·gc.alloc.rate.norm:                             744.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.508 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       694.788 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 3095206.296 ops/s
[info]                  ·gc.alloc.rate:                                  1462.839 MB/sec
[info]                  ·gc.alloc.rate.norm:                             744.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.647 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       865.458 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala":
[info]   3093570.512 ±(99.9%) 111141.478 ops/s [Average]
[info]   (min, avg, max) = (3050584.880, 3093570.512, 3126751.162), stdev = 28863.089
[info]   CI (99.9%): [2982429.033, 3204711.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1462.275 ±(99.9%) 52.982 MB/sec [Average]
[info]   (min, avg, max) = (1441.859, 1462.275, 1478.169), stdev = 13.759
[info]   CI (99.9%): [1409.293, 1515.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   744.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (744.000, 744.000, 744.000), stdev = 0.001
[info]   CI (99.9%): [744.000, 744.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.031 ±(99.9%) 0.254 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.031, 0.149), stdev = 0.066
[info]   CI (99.9%): [≈ 0, 0.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.015 ±(99.9%) 0.129 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.075), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1494.978 ±(99.9%) 727.425 MB/sec [Average]
[info]   (min, avg, max) = (1348.271, 1494.978, 1702.021), stdev = 188.910
[info]   CI (99.9%): [767.553, 2222.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   760.494 ±(99.9%) 362.872 B/op [Average]
[info]   (min, avg, max) = (678.619, 760.494, 865.458), stdev = 94.237
[info]   CI (99.9%): [397.622, 1123.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.335 ±(99.9%) 2.887 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.335, 1.676), stdev = 0.750
[info]   CI (99.9%): [≈ 0, 3.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 12.000), stdev = 3.834
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson
[info] # Run progress: 88.38% complete, ETA 00:09:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 68628.257 ops/s
[info] # Warmup Iteration   2: 269147.443 ops/s
[info] # Warmup Iteration   3: 274917.444 ops/s
[info] Iteration   1: 275249.799 ops/s
[info]                  ·gc.alloc.rate:                   1525.148 MB/sec
[info]                  ·gc.alloc.rate.norm:              8720.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1343.751 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        7682.866 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.809 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 278037.642 ops/s
[info]                  ·gc.alloc.rate:                                  1540.329 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8720.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.066 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.375 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1697.199 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9608.063 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                26.396 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   3: 279727.588 ops/s
[info]                  ·gc.alloc.rate:            1549.565 MB/sec
[info]                  ·gc.alloc.rate.norm:       8720.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.316 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7660.651 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 281285.014 ops/s
[info]                  ·gc.alloc.rate:            1558.259 MB/sec
[info]                  ·gc.alloc.rate.norm:       8720.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.812 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9523.326 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 281018.451 ops/s
[info]                  ·gc.alloc.rate:            1556.701 MB/sec
[info]                  ·gc.alloc.rate.norm:       8720.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.327 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7625.600 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson":
[info]   279063.699 ±(99.9%) 9586.996 ops/s [Average]
[info]   (min, avg, max) = (275249.799, 279063.699, 281285.014), stdev = 2489.712
[info]   CI (99.9%): [269476.703, 288650.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1546.000 ±(99.9%) 52.531 MB/sec [Average]
[info]   (min, avg, max) = (1525.148, 1546.000, 1558.259), stdev = 13.642
[info]   CI (99.9%): [1493.469, 1598.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8720.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8720.001, 8720.002, 8720.002), stdev = 0.001
[info]   CI (99.9%): [8720.001, 8720.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.013 ±(99.9%) 0.114 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.066), stdev = 0.030
[info]   CI (99.9%): [≈ 0, 0.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.075 ±(99.9%) 0.645 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.075, 0.375), stdev = 0.168
[info]   CI (99.9%): [≈ 0, 0.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1493.081 ±(99.9%) 726.164 MB/sec [Average]
[info]   (min, avg, max) = (1343.751, 1493.081, 1701.812), stdev = 188.582
[info]   CI (99.9%): [766.917, 2219.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   8420.101 ±(99.9%) 4029.340 B/op [Average]
[info]   (min, avg, max) = (7625.600, 8420.101, 9608.063), stdev = 1046.407
[info]   CI (99.9%): [4390.761, 12449.442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.822 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.663), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   6.041 ±(99.9%) 44.273 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.041, 26.396), stdev = 11.498
[info]   CI (99.9%): [≈ 0, 50.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.400, 18.000), stdev = 6.427
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce
[info] # Run progress: 88.65% complete, ETA 00:08:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 203439.929 ops/s
[info] # Warmup Iteration   2: 414453.489 ops/s
[info] # Warmup Iteration   3: 426565.833 ops/s
[info] Iteration   1: 431278.920 ops/s
[info]                  ·gc.alloc.rate:            1076.589 MB/sec
[info]                  ·gc.alloc.rate.norm:       3928.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.557 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4920.290 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 426268.844 ops/s
[info]                  ·gc.alloc.rate:            1063.664 MB/sec
[info]                  ·gc.alloc.rate.norm:       3928.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.994 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3733.495 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 427952.610 ops/s
[info]                  ·gc.alloc.rate:                                  1067.917 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3928.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.078 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.288 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1014.375 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3731.064 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                12.249 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   4: 437376.343 ops/s
[info]                  ·gc.alloc.rate:                                  1091.372 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3928.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.128 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.461 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.955 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3674.563 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 424307.467 ops/s
[info]                  ·gc.alloc.rate:            1058.853 MB/sec
[info]                  ·gc.alloc.rate.norm:       3928.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.067 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3787.828 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce":
[info]   429436.837 ±(99.9%) 19726.666 ops/s [Average]
[info]   (min, avg, max) = (424307.467, 429436.837, 437376.343), stdev = 5122.953
[info]   CI (99.9%): [409710.171, 449163.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1071.679 ±(99.9%) 49.267 MB/sec [Average]
[info]   (min, avg, max) = (1058.853, 1071.679, 1091.372), stdev = 12.795
[info]   CI (99.9%): [1022.412, 1120.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3928.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3928.001, 3928.001, 3928.001), stdev = 0.001
[info]   CI (99.9%): [3928.001, 3928.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.041 ±(99.9%) 0.228 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.041, 0.128), stdev = 0.059
[info]   CI (99.9%): [≈ 0, 0.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.150 ±(99.9%) 0.824 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.150, 0.461), stdev = 0.214
[info]   CI (99.9%): [≈ 0, 0.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1083.190 ±(99.9%) 571.466 MB/sec [Average]
[info]   (min, avg, max) = (1010.994, 1083.190, 1348.557), stdev = 148.408
[info]   CI (99.9%): [511.724, 1654.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   3969.448 ±(99.9%) 2052.563 B/op [Average]
[info]   (min, avg, max) = (3674.563, 3969.448, 4920.290), stdev = 533.044
[info]   CI (99.9%): [1916.885, 6022.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   2.450 ±(99.9%) 21.094 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.450, 12.249), stdev = 5.478
[info]   CI (99.9%): [≈ 0, 23.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.200, 13.000), stdev = 4.658
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala
[info] # Run progress: 88.92% complete, ETA 00:08:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2098703.773 ops/s
[info] # Warmup Iteration   2: 2529259.643 ops/s
[info] # Warmup Iteration   3: 2566179.411 ops/s
[info] Iteration   1: 2576087.243 ops/s
[info]                  ·gc.alloc.rate:            523.842 MB/sec
[info]                  ·gc.alloc.rate.norm:       320.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.433 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 205.517 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 2601746.422 ops/s
[info]                  ·gc.alloc.rate:            528.891 MB/sec
[info]                  ·gc.alloc.rate.norm:       320.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.679 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 406.998 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 2691655.950 ops/s
[info]                  ·gc.alloc.rate:            547.212 MB/sec
[info]                  ·gc.alloc.rate.norm:       320.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.724 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 393.397 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 2714920.035 ops/s
[info]                  ·gc.alloc.rate:            552.010 MB/sec
[info]                  ·gc.alloc.rate.norm:       320.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.396 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 195.009 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 2614327.104 ops/s
[info]                  ·gc.alloc.rate:                   531.686 MB/sec
[info]                  ·gc.alloc.rate.norm:              320.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.630 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        405.430 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.401 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala":
[info]   2639747.351 ±(99.9%) 231745.943 ops/s [Average]
[info]   (min, avg, max) = (2576087.243, 2639747.351, 2714920.035), stdev = 60183.685
[info]   CI (99.9%): [2408001.408, 2871493.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   536.728 ±(99.9%) 47.017 MB/sec [Average]
[info]   (min, avg, max) = (523.842, 536.728, 552.010), stdev = 12.210
[info]   CI (99.9%): [489.711, 583.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   320.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (320.000, 320.000, 320.000), stdev = 0.001
[info]   CI (99.9%): [320.000, 320.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   538.372 ±(99.9%) 709.912 MB/sec [Average]
[info]   (min, avg, max) = (336.396, 538.372, 673.630), stdev = 184.362
[info]   CI (99.9%): [≈ 0, 1248.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   321.270 ±(99.9%) 426.080 B/op [Average]
[info]   (min, avg, max) = (195.009, 321.270, 406.998), stdev = 110.652
[info]   CI (99.9%): [≈ 0, 747.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.080 ±(99.9%) 0.691 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.080, 0.401), stdev = 0.179
[info]   CI (99.9%): [≈ 0, 0.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.871
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 89.19% complete, ETA 00:08:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2240103.852 ops/s
[info] # Warmup Iteration   2: 2802231.956 ops/s
[info] # Warmup Iteration   3: 2806635.656 ops/s
[info] Iteration   1: 2815537.726 ops/s
[info]                  ·gc.alloc.rate:                   443.600 MB/sec
[info]                  ·gc.alloc.rate.norm:              248.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.358 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        376.449 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.372 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 2792232.774 ops/s
[info]                  ·gc.alloc.rate:            439.903 MB/sec
[info]                  ·gc.alloc.rate.norm:       248.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.347 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 189.619 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 2806466.661 ops/s
[info]                  ·gc.alloc.rate:            442.166 MB/sec
[info]                  ·gc.alloc.rate.norm:       248.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.360 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 188.657 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 2786851.369 ops/s
[info]                  ·gc.alloc.rate:            439.060 MB/sec
[info]                  ·gc.alloc.rate.norm:       248.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.340 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 189.980 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 2783191.800 ops/s
[info]                  ·gc.alloc.rate:            438.501 MB/sec
[info]                  ·gc.alloc.rate.norm:       248.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.707 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 380.458 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScalaPrealloc":
[info]   2796856.066 ±(99.9%) 52711.256 ops/s [Average]
[info]   (min, avg, max) = (2783191.800, 2796856.066, 2815537.726), stdev = 13688.946
[info]   CI (99.9%): [2744144.810, 2849567.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   440.646 ±(99.9%) 8.327 MB/sec [Average]
[info]   (min, avg, max) = (438.501, 440.646, 443.600), stdev = 2.162
[info]   CI (99.9%): [432.319, 448.973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   248.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (248.000, 248.000, 248.000), stdev = 0.001
[info]   CI (99.9%): [248.000, 248.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   471.023 ±(99.9%) 710.094 MB/sec [Average]
[info]   (min, avg, max) = (336.340, 471.023, 673.358), stdev = 184.409
[info]   CI (99.9%): [≈ 0, 1181.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   265.033 ±(99.9%) 398.733 B/op [Average]
[info]   (min, avg, max) = (188.657, 265.033, 380.458), stdev = 103.550
[info]   CI (99.9%): [≈ 0, 663.765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm":
[info]   0.074 ±(99.9%) 0.641 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.074, 0.372), stdev = 0.167
[info]   CI (99.9%): [≈ 0, 0.716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 6.000), stdev = 1.643
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson
[info] # Run progress: 89.46% complete, ETA 00:08:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 70860.813 ops/s
[info] # Warmup Iteration   2: 336322.003 ops/s
[info] # Warmup Iteration   3: 342164.581 ops/s
[info] Iteration   1: 342179.902 ops/s
[info]                  ·gc.alloc.rate:                   1299.418 MB/sec
[info]                  ·gc.alloc.rate.norm:              5976.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1343.083 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        6176.817 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.064 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 353047.704 ops/s
[info]                  ·gc.alloc.rate:                   1340.497 MB/sec
[info]                  ·gc.alloc.rate.norm:              5976.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1347.603 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        6007.679 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 20.788 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   3: 359773.032 ops/s
[info]                  ·gc.alloc.rate:                                  1365.939 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5976.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.194 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.850 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.511 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5956.626 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 354456.557 ops/s
[info]                  ·gc.alloc.rate:                                  1346.124 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5976.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.884 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6045.967 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 360353.188 ops/s
[info]                  ·gc.alloc.rate:            1368.121 MB/sec
[info]                  ·gc.alloc.rate.norm:       5976.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.483 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5947.007 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson":
[info]   353962.076 ±(99.9%) 28198.818 ops/s [Average]
[info]   (min, avg, max) = (342179.902, 353962.076, 360353.188), stdev = 7323.143
[info]   CI (99.9%): [325763.259, 382160.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1344.020 ±(99.9%) 106.635 MB/sec [Average]
[info]   (min, avg, max) = (1299.418, 1344.020, 1368.121), stdev = 27.693
[info]   CI (99.9%): [1237.385, 1450.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5976.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5976.001, 5976.001, 5976.001), stdev = 0.001
[info]   CI (99.9%): [5976.001, 5976.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.039 ±(99.9%) 0.334 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.039, 0.194), stdev = 0.087
[info]   CI (99.9%): [≈ 0, 0.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.171 ±(99.9%) 1.461 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.171, 0.850), stdev = 0.380
[info]   CI (99.9%): [≈ 0, 1.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1355.113 ±(99.9%) 34.895 MB/sec [Average]
[info]   (min, avg, max) = (1343.083, 1355.113, 1361.884), stdev = 9.062
[info]   CI (99.9%): [1320.218, 1390.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   6026.819 ±(99.9%) 357.766 B/op [Average]
[info]   (min, avg, max) = (5947.007, 6026.819, 6176.817), stdev = 92.911
[info]   CI (99.9%): [5669.053, 6384.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.822 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.663), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   4.770 ±(99.9%) 34.855 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.770, 20.788), stdev = 9.052
[info]   CI (99.9%): [≈ 0, 39.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.600, 18.000), stdev = 7.301
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce
[info] # Run progress: 89.73% complete, ETA 00:08:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 247323.588 ops/s
[info] # Warmup Iteration   2: 609735.364 ops/s
[info] # Warmup Iteration   3: 613269.591 ops/s
[info] Iteration   1: 611795.359 ops/s
[info]                  ·gc.alloc.rate:                                  1885.056 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4848.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.035 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.089 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2032.953 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5228.365 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                8.568 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   2: 621352.902 ops/s
[info]                  ·gc.alloc.rate:                                  1913.368 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4848.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.441 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4311.031 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 620085.170 ops/s
[info]                  ·gc.alloc.rate:                                  1909.646 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4848.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.915 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5183.789 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 622064.332 ops/s
[info]                  ·gc.alloc.rate:                                  1915.851 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4848.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.040 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5167.317 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 623359.776 ops/s
[info]                  ·gc.alloc.rate:                                  1920.375 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4848.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.177 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4297.160 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce":
[info]   619731.508 ±(99.9%) 17681.842 ops/s [Average]
[info]   (min, avg, max) = (611795.359, 619731.508, 623359.776), stdev = 4591.918
[info]   CI (99.9%): [602049.666, 637413.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate":
[info]   1908.859 ±(99.9%) 53.393 MB/sec [Average]
[info]   (min, avg, max) = (1885.056, 1908.859, 1920.375), stdev = 13.866
[info]   CI (99.9%): [1855.466, 1962.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4848.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4848.001, 4848.001, 4848.001), stdev = 0.001
[info]   CI (99.9%): [4848.001, 4848.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.008 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.008, 0.035), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.022 ±(99.9%) 0.146 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0.022, 0.089), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1904.105 ±(99.9%) 711.241 MB/sec [Average]
[info]   (min, avg, max) = (1701.441, 1904.105, 2042.040), stdev = 184.707
[info]   CI (99.9%): [1192.864, 2615.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   4837.532 ±(99.9%) 1877.172 B/op [Average]
[info]   (min, avg, max) = (4297.160, 4837.532, 5228.365), stdev = 487.496
[info]   CI (99.9%): [2960.360, 6714.704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.737 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.332), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   1.714 ±(99.9%) 14.755 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.714, 8.568), stdev = 3.832
[info]   CI (99.9%): [≈ 0, 16.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 12.000), stdev = 3.391
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala
[info] # Run progress: 90.00% complete, ETA 00:07:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 352484.988 ops/s
[info] # Warmup Iteration   2: 1325944.490 ops/s
[info] # Warmup Iteration   3: 1327918.544 ops/s
[info] Iteration   1: 1339551.854 ops/s
[info]                  ·gc.alloc.rate:                   1014.298 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1007.611 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1184.143 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.783 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 1345579.727 ops/s
[info]                  ·gc.alloc.rate:            1018.983 MB/sec
[info]                  ·gc.alloc.rate.norm:       1192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.095 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1180.433 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   3: 1339384.540 ops/s
[info]                  ·gc.alloc.rate:                   1014.222 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.331 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1185.077 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 5.479 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   4: 1330337.512 ops/s
[info]                  ·gc.alloc.rate:                                  1007.825 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1192.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.249 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.294 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.454 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1208.120 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 1349102.408 ops/s
[info]                  ·gc.alloc.rate:                                  1021.657 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1192.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.093 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1191.342 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala":
[info]   1340791.208 ±(99.9%) 27552.993 ops/s [Average]
[info]   (min, avg, max) = (1330337.512, 1340791.208, 1349102.408), stdev = 7155.425
[info]   CI (99.9%): [1313238.215, 1368344.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1015.397 ±(99.9%) 20.374 MB/sec [Average]
[info]   (min, avg, max) = (1007.825, 1015.397, 1021.657), stdev = 5.291
[info]   CI (99.9%): [995.023, 1035.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1192.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1192.000, 1192.000, 1192.000), stdev = 0.001
[info]   CI (99.9%): [1192.000, 1192.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.050 ±(99.9%) 0.428 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.249), stdev = 0.111
[info]   CI (99.9%): [≈ 0, 0.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.059 ±(99.9%) 0.506 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.059, 0.294), stdev = 0.131
[info]   CI (99.9%): [≈ 0, 0.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1013.517 ±(99.9%) 27.345 MB/sec [Average]
[info]   (min, avg, max) = (1007.611, 1013.517, 1021.454), stdev = 7.101
[info]   CI (99.9%): [986.172, 1040.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1189.823 ±(99.9%) 42.185 B/op [Average]
[info]   (min, avg, max) = (1180.433, 1189.823, 1208.120), stdev = 10.955
[info]   CI (99.9%): [1147.638, 1232.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.821 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.662), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.252 ±(99.9%) 9.192 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.252, 5.479), stdev = 2.387
[info]   CI (99.9%): [≈ 0, 10.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 9.000, 14.000), stdev = 5.958
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala
[info] # Run progress: 90.27% complete, ETA 00:07:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5627009.178 ops/s
[info] # Warmup Iteration   2: 5942646.310 ops/s
[info] # Warmup Iteration   3: 6008253.615 ops/s
[info] Iteration   1: 6158588.135 ops/s
[info]                  ·gc.alloc.rate:            187.789 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.662 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 86.309 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 6206615.545 ops/s
[info]                  ·gc.alloc.rate:      189.245 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 6053104.393 ops/s
[info]                  ·gc.alloc.rate:            184.583 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.689 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 87.815 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   4: 6094676.565 ops/s
[info]                  ·gc.alloc.rate:      185.861 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 6110216.385 ops/s
[info]                  ·gc.alloc.rate:            186.393 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.141 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 86.821 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala":
[info]   6124640.205 ±(99.9%) 228584.105 ops/s [Average]
[info]   (min, avg, max) = (6053104.393, 6124640.205, 6206615.545), stdev = 59362.566
[info]   CI (99.9%): [5896056.099, 6353224.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   186.774 ±(99.9%) 6.919 MB/sec [Average]
[info]   (min, avg, max) = (184.583, 186.774, 189.245), stdev = 1.797
[info]   CI (99.9%): [179.856, 193.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   202.499 ±(99.9%) 711.812 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 202.499, 337.689), stdev = 184.855
[info]   CI (99.9%): [≈ 0, 914.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   52.189 ±(99.9%) 183.463 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 52.189, 87.815), stdev = 47.645
[info]   CI (99.9%): [≈ 0, 235.652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson
[info] # Run progress: 90.54% complete, ETA 00:07:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27270.001 ops/s
[info] # Warmup Iteration   2: 189826.217 ops/s
[info] # Warmup Iteration   3: 195316.090 ops/s
[info] Iteration   1: 195238.210 ops/s
[info]                  ·gc.alloc.rate:                   1399.598 MB/sec
[info]                  ·gc.alloc.rate.norm:              11280.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1680.295 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        13542.277 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.999 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 16.109 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         23.000 ms
[info] Iteration   2: 197251.563 ops/s
[info]                  ·gc.alloc.rate:                                  1413.479 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11280.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.168 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.344 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1352.689 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10794.884 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                37.205 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   3: 193360.714 ops/s
[info]                  ·gc.alloc.rate:                                  1385.698 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11280.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.026 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.214 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.464 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11082.731 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 193646.552 ops/s
[info]                  ·gc.alloc.rate:            1387.648 MB/sec
[info]                  ·gc.alloc.rate.norm:       11280.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.352 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11066.251 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 201218.803 ops/s
[info]                  ·gc.alloc.rate:                                  1442.022 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11280.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.442 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10649.673 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson":
[info]   196143.168 ±(99.9%) 12445.490 ops/s [Average]
[info]   (min, avg, max) = (193360.714, 196143.168, 201218.803), stdev = 3232.054
[info]   CI (99.9%): [183697.678, 208588.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1405.689 ±(99.9%) 89.129 MB/sec [Average]
[info]   (min, avg, max) = (1385.698, 1405.689, 1442.022), stdev = 23.147
[info]   CI (99.9%): [1316.560, 1494.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   11280.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11280.002, 11280.002, 11280.002), stdev = 0.001
[info]   CI (99.9%): [11280.002, 11280.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.039 ±(99.9%) 0.281 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.039, 0.168), stdev = 0.073
[info]   CI (99.9%): [≈ 0, 0.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.315 ±(99.9%) 2.242 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.315, 1.344), stdev = 0.582
[info]   CI (99.9%): [≈ 0, 2.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1423.449 ±(99.9%) 553.074 MB/sec [Average]
[info]   (min, avg, max) = (1352.689, 1423.449, 1680.295), stdev = 143.632
[info]   CI (99.9%): [870.375, 1976.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   11427.163 ±(99.9%) 4607.462 B/op [Average]
[info]   (min, avg, max) = (10649.673, 11427.163, 13542.277), stdev = 1196.543
[info]   CI (99.9%): [6819.701, 16034.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.332 ±(99.9%) 7.905 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.332, 4.662), stdev = 2.053
[info]   CI (99.9%): [≈ 0, 9.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   10.663 ±(99.9%) 63.133 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.663, 37.205), stdev = 16.396
[info]   CI (99.9%): [≈ 0, 73.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.000, 23.000), stdev = 8.689
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce
[info] # Run progress: 90.81% complete, ETA 00:07:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 390129.774 ops/s
[info] # Warmup Iteration   2: 818951.823 ops/s
[info] # Warmup Iteration   3: 807458.298 ops/s
[info] Iteration   1: 817969.993 ops/s
[info]                  ·gc.alloc.rate:            1276.211 MB/sec
[info]                  ·gc.alloc.rate.norm:       2456.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.014 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2594.181 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 827454.511 ops/s
[info]                  ·gc.alloc.rate:                                  1291.252 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2456.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.101 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.192 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1351.613 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2570.809 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                6.335 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   3: 833557.580 ops/s
[info]                  ·gc.alloc.rate:                                  1300.606 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2456.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.045 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.086 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.042 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1928.087 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 829434.861 ops/s
[info]                  ·gc.alloc.rate:                                  1294.611 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2456.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.876 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2583.609 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 824324.731 ops/s
[info]                  ·gc.alloc.rate:                                  1286.270 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2456.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.526 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2599.694 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce":
[info]   826548.335 ±(99.9%) 22520.100 ops/s [Average]
[info]   (min, avg, max) = (817969.993, 826548.335, 833557.580), stdev = 5848.398
[info]   CI (99.9%): [804028.235, 849068.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1289.790 ±(99.9%) 35.456 MB/sec [Average]
[info]   (min, avg, max) = (1276.211, 1289.790, 1300.606), stdev = 9.208
[info]   CI (99.9%): [1254.334, 1325.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2456.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2456.000, 2456.001, 2456.001), stdev = 0.001
[info]   CI (99.9%): [2456.000, 2456.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.030 ±(99.9%) 0.169 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.101), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.057 ±(99.9%) 0.322 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.057, 0.192), stdev = 0.084
[info]   CI (99.9%): [≈ 0, 0.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1288.814 ±(99.9%) 576.875 MB/sec [Average]
[info]   (min, avg, max) = (1021.042, 1288.814, 1361.876), stdev = 149.813
[info]   CI (99.9%): [711.940, 1865.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2455.276 ±(99.9%) 1135.609 B/op [Average]
[info]   (min, avg, max) = (1928.087, 2455.276, 2599.694), stdev = 294.914
[info]   CI (99.9%): [1319.667, 3590.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   1.267 ±(99.9%) 10.910 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.267, 6.335), stdev = 2.833
[info]   CI (99.9%): [≈ 0, 12.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.600, 13.000), stdev = 4.980
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala
[info] # Run progress: 91.08% complete, ETA 00:07:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_8263f884/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 604199.977 ops/s
[info] # Warmup Iteration   2: 2099173.874 ops/s
[info] # Warmup Iteration   3: 2142922.443 ops/s
[info] Iteration   1: 2124031.708 ops/s
[info]                  ·gc.alloc.rate:            874.522 MB/sec
[info]                  ·gc.alloc.rate.norm:       648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.178 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 746.295 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 2127017.307 ops/s
[info]                  ·gc.alloc.rate:            875.770 MB/sec
[info]                  ·gc.alloc.rate.norm:       648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.228 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 745.268 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 2135831.215 ops/s
[info]                  ·gc.alloc.rate:            879.557 MB/sec
[info]                  ·gc.alloc.rate.norm:       648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.599 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 494.790 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 2057847.808 ops/s
[info]                  ·gc.alloc.rate:                   847.159 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1011.044 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        773.358 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.566 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 2086405.153 ops/s
[info]                  ·gc.alloc.rate:                                  859.070 MB/sec
[info]                  ·gc.alloc.rate.norm:                             648.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.108 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.081 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.820 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       513.545 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala":
[info]   2106226.638 ±(99.9%) 127116.544 ops/s [Average]
[info]   (min, avg, max) = (2057847.808, 2106226.638, 2135831.215), stdev = 33011.763
[info]   CI (99.9%): [1979110.095, 2233343.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   867.216 ±(99.9%) 52.639 MB/sec [Average]
[info]   (min, avg, max) = (847.159, 867.216, 879.557), stdev = 13.670
[info]   CI (99.9%): [814.577, 919.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   648.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (648.000, 648.000, 648.000), stdev = 0.001
[info]   CI (99.9%): [648.000, 648.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.022 ±(99.9%) 0.186 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.108), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.016 ±(99.9%) 0.140 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.081), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   875.574 ±(99.9%) 700.931 MB/sec [Average]
[info]   (min, avg, max) = (671.599, 875.574, 1011.044), stdev = 182.030
[info]   CI (99.9%): [174.642, 1576.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   654.651 ±(99.9%) 531.360 B/op [Average]
[info]   (min, avg, max) = (494.790, 654.651, 773.358), stdev = 137.992
[info]   CI (99.9%): [123.292, 1186.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.713 ±(99.9%) 6.141 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.713, 3.566), stdev = 1.595
[info]   CI (99.9%): [≈ 0, 6.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 9.200, 13.000), stdev = 4.324
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala
[info] # Run progress: 91.35% complete, ETA 00:06:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3652272.133 ops/s
[info] # Warmup Iteration   2: 5314911.720 ops/s
[info] # Warmup Iteration   3: 5615864.844 ops/s
[info] Iteration   1: 5703970.633 ops/s
[info]                  ·gc.alloc.rate:                   637.723 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.318 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        185.824 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.184 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 5680481.205 ops/s
[info]                  ·gc.alloc.rate:                   635.030 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.589 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        186.409 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.185 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 5666606.948 ops/s
[info]                  ·gc.alloc.rate:            633.578 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.357 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 187.050 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 5676572.223 ops/s
[info]                  ·gc.alloc.rate:            634.727 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.729 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 186.537 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 5673380.788 ops/s
[info]                  ·gc.alloc.rate:            634.364 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.709 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 186.639 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala":
[info]   5680202.359 ±(99.9%) 54780.587 ops/s [Average]
[info]   (min, avg, max) = (5666606.948, 5680202.359, 5703970.633), stdev = 14226.344
[info]   CI (99.9%): [5625421.773, 5734982.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   635.085 ±(99.9%) 6.051 MB/sec [Average]
[info]   (min, avg, max) = (633.578, 635.085, 637.723), stdev = 1.571
[info]   CI (99.9%): [629.033, 641.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   176.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (176.000, 176.000, 176.000), stdev = 0.001
[info]   CI (99.9%): [176.000, 176.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   672.940 ±(99.9%) 1.413 MB/sec [Average]
[info]   (min, avg, max) = (672.589, 672.940, 673.357), stdev = 0.367
[info]   CI (99.9%): [671.527, 674.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   186.492 ±(99.9%) 1.710 B/op [Average]
[info]   (min, avg, max) = (185.824, 186.492, 187.050), stdev = 0.444
[info]   CI (99.9%): [184.782, 188.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.074 ±(99.9%) 0.388 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.074, 0.185), stdev = 0.101
[info]   CI (99.9%): [≈ 0, 0.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 91.62% complete, ETA 00:06:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3864324.338 ops/s
[info] # Warmup Iteration   2: 5490026.911 ops/s
[info] # Warmup Iteration   3: 5694108.867 ops/s
[info] Iteration   1: 5704738.814 ops/s
[info]                  ·gc.alloc.rate:                   347.899 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             336.318 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        92.804 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.184 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 5672725.044 ops/s
[info]                  ·gc.alloc.rate:            345.942 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.984 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 93.514 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 5663936.829 ops/s
[info]                  ·gc.alloc.rate:            345.515 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.440 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 93.479 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 5696455.246 ops/s
[info]                  ·gc.alloc.rate:            347.408 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.353 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 92.945 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 5402753.118 ops/s
[info]                  ·gc.alloc.rate:            329.500 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.342 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 97.993 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc":
[info]   5628121.810 ±(99.9%) 489360.774 ops/s [Average]
[info]   (min, avg, max) = (5402753.118, 5628121.810, 5704738.814), stdev = 127085.439
[info]   CI (99.9%): [5138761.036, 6117482.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   343.253 ±(99.9%) 29.848 MB/sec [Average]
[info]   (min, avg, max) = (329.500, 343.253, 347.899), stdev = 7.751
[info]   CI (99.9%): [313.405, 373.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   96.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (96.000, 96.000, 96.000), stdev = 0.001
[info]   CI (99.9%): [96.000, 96.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   336.487 ±(99.9%) 1.085 MB/sec [Average]
[info]   (min, avg, max) = (336.318, 336.487, 336.984), stdev = 0.282
[info]   CI (99.9%): [335.403, 337.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   94.147 ±(99.9%) 8.368 B/op [Average]
[info]   (min, avg, max) = (92.804, 94.147, 97.993), stdev = 2.173
[info]   CI (99.9%): [85.779, 102.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm":
[info]   0.037 ±(99.9%) 0.316 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.184), stdev = 0.082
[info]   CI (99.9%): [≈ 0, 0.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson
[info] # Run progress: 91.89% complete, ETA 00:06:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 31272.498 ops/s
[info] # Warmup Iteration   2: 297006.863 ops/s
[info] # Warmup Iteration   3: 306338.456 ops/s
[info] Iteration   1: 298106.271 ops/s
[info]                  ·gc.alloc.rate:                   1518.008 MB/sec
[info]                  ·gc.alloc.rate.norm:              8016.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1679.623 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        8869.428 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.517 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         22.000 ms
[info] Iteration   2: 299269.975 ops/s
[info]                  ·gc.alloc.rate:                                  1524.131 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8016.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.162 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.853 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1356.794 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7135.911 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                24.522 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 314577.061 ops/s
[info]                  ·gc.alloc.rate:                                  1602.030 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8016.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.835 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8515.389 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 302106.136 ops/s
[info]                  ·gc.alloc.rate:                                  1538.377 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8016.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.271 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7093.156 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 301867.844 ops/s
[info]                  ·gc.alloc.rate:                                  1537.260 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8016.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.699 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8873.464 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson":
[info]   303185.457 ±(99.9%) 25382.054 ops/s [Average]
[info]   (min, avg, max) = (298106.271, 303185.457, 314577.061), stdev = 6591.639
[info]   CI (99.9%): [277803.404, 328567.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1543.961 ±(99.9%) 129.368 MB/sec [Average]
[info]   (min, avg, max) = (1518.008, 1543.961, 1602.030), stdev = 33.597
[info]   CI (99.9%): [1414.593, 1673.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   8016.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8016.001, 8016.001, 8016.001), stdev = 0.001
[info]   CI (99.9%): [8016.001, 8016.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.033 ±(99.9%) 0.278 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.162), stdev = 0.072
[info]   CI (99.9%): [≈ 0, 0.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.175 ±(99.9%) 1.461 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.175, 0.853), stdev = 0.379
[info]   CI (99.9%): [≈ 0, 1.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1560.244 ±(99.9%) 708.171 MB/sec [Average]
[info]   (min, avg, max) = (1356.794, 1560.244, 1701.835), stdev = 183.910
[info]   CI (99.9%): [852.073, 2268.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   8097.470 ±(99.9%) 3500.691 B/op [Average]
[info]   (min, avg, max) = (7093.156, 8097.470, 8873.464), stdev = 909.118
[info]   CI (99.9%): [4596.779, 11598.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.822 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.663), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   5.608 ±(99.9%) 41.134 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.608, 24.522), stdev = 10.682
[info]   CI (99.9%): [≈ 0, 46.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.400, 22.000), stdev = 7.829
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce
[info] # Run progress: 92.16% complete, ETA 00:06:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3311298.368 ops/s
[info] # Warmup Iteration   2: 4858262.274 ops/s
[info] # Warmup Iteration   3: 4943213.236 ops/s
[info] Iteration   1: 4987163.141 ops/s
[info]                  ·gc.alloc.rate:                                  3599.087 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1136.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.458 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1074.253 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   2: 4854407.004 ops/s
[info]                  ·gc.alloc.rate:                                  3504.791 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1136.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3743.476 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1213.364 B/op
[info]                  ·gc.count:                                       11.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   3: 4828362.903 ops/s
[info]                  ·gc.alloc.rate:                                  3484.514 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1136.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.423 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1109.563 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   4: 4823499.129 ops/s
[info]                  ·gc.alloc.rate:                                  3481.223 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1136.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.709 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1110.706 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   5: 4838688.755 ops/s
[info]                  ·gc.alloc.rate:                                  3492.976 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1136.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3404.329 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1107.170 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce":
[info]   4866424.187 ±(99.9%) 263865.947 ops/s [Average]
[info]   (min, avg, max) = (4823499.129, 4866424.187, 4987163.141), stdev = 68525.148
[info]   CI (99.9%): [4602558.240, 5130290.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   3512.518 ±(99.9%) 189.616 MB/sec [Average]
[info]   (min, avg, max) = (3481.223, 3512.518, 3599.087), stdev = 49.243
[info]   CI (99.9%): [3322.902, 3702.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   1136.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1136.000, 1136.000, 1136.000), stdev = 0.001
[info]   CI (99.9%): [1136.000, 1136.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.005 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0.002, 0.004), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.001 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   3471.679 ±(99.9%) 585.064 MB/sec [Average]
[info]   (min, avg, max) = (3403.423, 3471.679, 3743.476), stdev = 151.939
[info]   CI (99.9%): [2886.615, 4056.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   1123.011 ±(99.9%) 203.067 B/op [Average]
[info]   (min, avg, max) = (1074.253, 1123.011, 1213.364), stdev = 52.736
[info]   CI (99.9%): [919.944, 1326.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.count":
[info]   51.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (10.000, 10.200, 11.000), stdev = 0.447
[info]   CI (99.9%): [51.000, 51.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 8.200, 10.000), stdev = 1.095
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava
[info] # Run progress: 92.43% complete, ETA 00:05:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.899 ops/s
[info] # Warmup Iteration   2: 7453830.088 ops/s
[info] # Warmup Iteration   3: 7592573.864 ops/s
[info] Iteration   1: 7466032.592 ops/s
[info]                  ·gc.alloc.rate:            797.036 MB/sec
[info]                  ·gc.alloc.rate.norm:       168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1001.314 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 211.058 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   2: 7436045.045 ops/s
[info]                  ·gc.alloc.rate:            793.754 MB/sec
[info]                  ·gc.alloc.rate.norm:       168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.475 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 141.273 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 7470508.292 ops/s
[info]                  ·gc.alloc.rate:            797.637 MB/sec
[info]                  ·gc.alloc.rate.norm:       168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1001.450 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 210.928 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   4: 7671200.322 ops/s
[info]                  ·gc.alloc.rate:            819.070 MB/sec
[info]                  ·gc.alloc.rate.norm:       168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.643 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 136.941 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 7694802.725 ops/s
[info]                  ·gc.alloc.rate:                   821.310 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             671.399 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        137.336 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      6.661 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.362 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava":
[info]   7547717.795 ±(99.9%) 479349.084 ops/s [Average]
[info]   (min, avg, max) = (7436045.045, 7547717.795, 7694802.725), stdev = 124485.435
[info]   CI (99.9%): [7068368.711, 8027066.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   805.761 ±(99.9%) 51.127 MB/sec [Average]
[info]   (min, avg, max) = (793.754, 805.761, 821.310), stdev = 13.278
[info]   CI (99.9%): [754.634, 856.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   168.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (168.000, 168.000, 168.000), stdev = 0.001
[info]   CI (99.9%): [168.000, 168.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   801.856 ±(99.9%) 701.388 MB/sec [Average]
[info]   (min, avg, max) = (667.475, 801.856, 1001.450), stdev = 182.148
[info]   CI (99.9%): [100.468, 1503.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   167.507 ±(99.9%) 152.998 B/op [Average]
[info]   (min, avg, max) = (136.941, 167.507, 211.058), stdev = 39.733
[info]   CI (99.9%): [14.509, 320.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   1.332 ±(99.9%) 11.470 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.332, 6.661), stdev = 2.979
[info]   CI (99.9%): [≈ 0, 12.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.272 ±(99.9%) 2.346 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.272, 1.362), stdev = 0.609
[info]   CI (99.9%): [≈ 0, 2.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.time":
[info]   56.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 11.200, 14.000), stdev = 2.588
[info]   CI (99.9%): [56.000, 56.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala
[info] # Run progress: 92.70% complete, ETA 00:05:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1502394.944 ops/s
[info] # Warmup Iteration   2: 3931631.401 ops/s
[info] # Warmup Iteration   3: 3971171.766 ops/s
[info] Iteration   1: 3917257.719 ops/s
[info]                  ·gc.alloc.rate:                                  2030.817 MB/sec
[info]                  ·gc.alloc.rate.norm:                             816.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.068 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.027 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2038.169 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       818.954 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1.606 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   2: 3889587.684 ops/s
[info]                  ·gc.alloc.rate:                                  2017.318 MB/sec
[info]                  ·gc.alloc.rate.norm:                             816.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2043.071 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       826.417 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 3904587.639 ops/s
[info]                  ·gc.alloc.rate:            2024.390 MB/sec
[info]                  ·gc.alloc.rate.norm:       816.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2042.354 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 823.241 B/op
[info]                  ·gc.count:                 6.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 3925210.772 ops/s
[info]                  ·gc.alloc.rate:                                  2034.764 MB/sec
[info]                  ·gc.alloc.rate.norm:                             816.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.013 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       818.907 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 3862692.159 ops/s
[info]                  ·gc.alloc.rate:                                  2002.281 MB/sec
[info]                  ·gc.alloc.rate.norm:                             816.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.956 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       832.169 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala":
[info]   3899867.195 ±(99.9%) 95389.192 ops/s [Average]
[info]   (min, avg, max) = (3862692.159, 3899867.195, 3925210.772), stdev = 24772.270
[info]   CI (99.9%): [3804478.003, 3995256.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2021.914 ±(99.9%) 49.354 MB/sec [Average]
[info]   (min, avg, max) = (2002.281, 2021.914, 2034.764), stdev = 12.817
[info]   CI (99.9%): [1972.560, 2071.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   816.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (816.000, 816.000, 816.000), stdev = 0.001
[info]   CI (99.9%): [816.000, 816.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.015 ±(99.9%) 0.114 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.068), stdev = 0.030
[info]   CI (99.9%): [≈ 0, 0.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.006 ±(99.9%) 0.046 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.027), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   2041.513 ±(99.9%) 7.397 MB/sec [Average]
[info]   (min, avg, max) = (2038.169, 2041.513, 2043.071), stdev = 1.921
[info]   CI (99.9%): [2034.115, 2048.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   823.938 ±(99.9%) 21.485 B/op [Average]
[info]   (min, avg, max) = (818.907, 823.938, 832.169), stdev = 5.580
[info]   CI (99.9%): [802.453, 845.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.321 ±(99.9%) 2.765 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.321, 1.606), stdev = 0.718
[info]   CI (99.9%): [≈ 0, 3.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 8.000), stdev = 1.517
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala
[info] # Run progress: 92.97% complete, ETA 00:05:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6611940.750 ops/s
[info] # Warmup Iteration   2: 7146370.717 ops/s
[info] # Warmup Iteration   3: 7334735.187 ops/s
[info] Iteration   1: 7332997.984 ops/s
[info]                  ·gc.alloc.rate:            782.595 MB/sec
[info]                  ·gc.alloc.rate.norm:       168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.956 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 217.022 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 7308624.708 ops/s
[info]                  ·gc.alloc.rate:            779.955 MB/sec
[info]                  ·gc.alloc.rate.norm:       168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.960 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 145.169 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 7662754.469 ops/s
[info]                  ·gc.alloc.rate:            817.804 MB/sec
[info]                  ·gc.alloc.rate.norm:       168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.009 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 138.460 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 7575830.935 ops/s
[info]                  ·gc.alloc.rate:                   808.590 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1011.089 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        210.073 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.692 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 6956271.010 ops/s
[info]                  ·gc.alloc.rate:                                  742.434 MB/sec
[info]                  ·gc.alloc.rate.norm:                             168.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.038 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.683 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       154.027 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala":
[info]   7367295.821 ±(99.9%) 1062147.522 ops/s [Average]
[info]   (min, avg, max) = (6956271.010, 7367295.821, 7662754.469), stdev = 275836.339
[info]   CI (99.9%): [6305148.299, 8429443.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   786.276 ±(99.9%) 113.374 MB/sec [Average]
[info]   (min, avg, max) = (742.434, 786.276, 817.804), stdev = 29.443
[info]   CI (99.9%): [672.901, 899.650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   168.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (168.000, 168.000, 168.000), stdev = 0.001
[info]   CI (99.9%): [168.000, 168.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.008 ±(99.9%) 0.066 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.038), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.002 ±(99.9%) 0.015 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.009), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   810.139 ±(99.9%) 706.211 MB/sec [Average]
[info]   (min, avg, max) = (673.960, 810.139, 1011.089), stdev = 183.401
[info]   CI (99.9%): [103.929, 1516.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   172.950 ±(99.9%) 144.590 B/op [Average]
[info]   (min, avg, max) = (138.460, 172.950, 217.022), stdev = 37.550
[info]   CI (99.9%): [28.360, 317.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.138 ±(99.9%) 1.192 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.138, 0.692), stdev = 0.309
[info]   CI (99.9%): [≈ 0, 1.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.600, 8.000), stdev = 2.510
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson
[info] # Run progress: 93.24% complete, ETA 00:05:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2443617.646 ops/s
[info] # Warmup Iteration   2: 4618594.166 ops/s
[info] # Warmup Iteration   3: 4599717.152 ops/s
[info] Iteration   1: 4762314.106 ops/s
[info]                  ·gc.alloc.rate:                                  2566.146 MB/sec
[info]                  ·gc.alloc.rate.norm:                             848.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.513 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       900.003 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 4739301.246 ops/s
[info]                  ·gc.alloc.rate:                                  2553.118 MB/sec
[info]                  ·gc.alloc.rate.norm:                             848.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.472 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       791.321 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 4770827.707 ops/s
[info]                  ·gc.alloc.rate:                                  2570.141 MB/sec
[info]                  ·gc.alloc.rate.norm:                             848.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.823 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       898.376 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 4687784.393 ops/s
[info]                  ·gc.alloc.rate:            2525.356 MB/sec
[info]                  ·gc.alloc.rate.norm:       848.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2382.372 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 799.987 B/op
[info]                  ·gc.count:                 7.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 4712219.297 ops/s
[info]                  ·gc.alloc.rate:                                  2538.456 MB/sec
[info]                  ·gc.alloc.rate.norm:                             848.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.629 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       909.525 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson":
[info]   4734489.350 ±(99.9%) 133322.894 ops/s [Average]
[info]   (min, avg, max) = (4687784.393, 4734489.350, 4770827.707), stdev = 34623.532
[info]   CI (99.9%): [4601166.456, 4867812.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2550.644 ±(99.9%) 72.414 MB/sec [Average]
[info]   (min, avg, max) = (2525.356, 2550.644, 2570.141), stdev = 18.806
[info]   CI (99.9%): [2478.230, 2623.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   848.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (848.000, 848.000, 848.000), stdev = 0.001
[info]   CI (99.9%): [848.000, 848.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.006 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.004), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.001 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2586.762 ±(99.9%) 718.285 MB/sec [Average]
[info]   (min, avg, max) = (2382.372, 2586.762, 2723.513), stdev = 186.536
[info]   CI (99.9%): [1868.477, 3305.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   859.843 ±(99.9%) 226.534 B/op [Average]
[info]   (min, avg, max) = (791.321, 859.843, 909.525), stdev = 58.830
[info]   CI (99.9%): [633.308, 1086.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.count":
[info]   38.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.600, 8.000), stdev = 0.548
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce
[info] # Run progress: 93.51% complete, ETA 00:05:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1983203.013 ops/s
[info] # Warmup Iteration   2: 3258511.531 ops/s
[info] # Warmup Iteration   3: 3238062.226 ops/s
[info] Iteration   1: 3259802.672 ops/s
[info]                  ·gc.alloc.rate:            778.604 MB/sec
[info]                  ·gc.alloc.rate.norm:       376.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.983 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 325.477 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 3254117.930 ops/s
[info]                  ·gc.alloc.rate:            777.236 MB/sec
[info]                  ·gc.alloc.rate.norm:       376.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.958 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 326.038 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 3228327.773 ops/s
[info]                  ·gc.alloc.rate:            771.152 MB/sec
[info]                  ·gc.alloc.rate.norm:       376.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.088 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 492.989 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 3261317.700 ops/s
[info]                  ·gc.alloc.rate:            779.033 MB/sec
[info]                  ·gc.alloc.rate.norm:       376.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.040 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 325.325 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 3294659.231 ops/s
[info]                  ·gc.alloc.rate:                                  787.329 MB/sec
[info]                  ·gc.alloc.rate.norm:                             376.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.076 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.036 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            677.668 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       323.630 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1.591 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce":
[info]   3259645.061 ±(99.9%) 91125.640 ops/s [Average]
[info]   (min, avg, max) = (3228327.773, 3259645.061, 3294659.231), stdev = 23665.039
[info]   CI (99.9%): [3168519.421, 3350770.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   778.671 ±(99.9%) 22.263 MB/sec [Average]
[info]   (min, avg, max) = (771.152, 778.671, 787.329), stdev = 5.782
[info]   CI (99.9%): [756.408, 800.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   376.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (376.000, 376.000, 376.000), stdev = 0.001
[info]   CI (99.9%): [376.000, 376.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.015 ±(99.9%) 0.131 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.076), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.007 ±(99.9%) 0.063 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.036), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   742.147 ±(99.9%) 578.948 MB/sec [Average]
[info]   (min, avg, max) = (673.958, 742.147, 1011.088), stdev = 150.351
[info]   CI (99.9%): [163.200, 1321.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   358.692 ±(99.9%) 289.106 B/op [Average]
[info]   (min, avg, max) = (323.630, 358.692, 492.989), stdev = 75.080
[info]   CI (99.9%): [69.586, 647.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.737 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.332), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   0.318 ±(99.9%) 2.740 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.318, 1.591), stdev = 0.712
[info]   CI (99.9%): [≈ 0, 3.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.600, 9.000), stdev = 1.517
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava
[info] # Run progress: 93.78% complete, ETA 00:04:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.850 ops/s
[info] # Warmup Iteration   2: 7331415.138 ops/s
[info] # Warmup Iteration   3: 7791743.365 ops/s
[info] Iteration   1: 8039132.946 ops/s
[info]                  ·gc.alloc.rate:            776.295 MB/sec
[info]                  ·gc.alloc.rate.norm:       152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.399 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 130.678 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 8034230.991 ops/s
[info]                  ·gc.alloc.rate:            776.000 MB/sec
[info]                  ·gc.alloc.rate.norm:       152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1001.306 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 196.132 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   3: 8050121.056 ops/s
[info]                  ·gc.alloc.rate:            777.388 MB/sec
[info]                  ·gc.alloc.rate.norm:       152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.403 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 130.495 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 7791079.015 ops/s
[info]                  ·gc.alloc.rate:            752.438 MB/sec
[info]                  ·gc.alloc.rate.norm:       152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.471 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 134.836 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 8008432.829 ops/s
[info]                  ·gc.alloc.rate:                   773.381 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1005.166 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        197.555 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      6.661 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.309 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava":
[info]   7984599.367 ±(99.9%) 420710.216 ops/s [Average]
[info]   (min, avg, max) = (7791079.015, 7984599.367, 8050121.056), stdev = 109257.107
[info]   CI (99.9%): [7563889.152, 8405309.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   771.100 ±(99.9%) 40.568 MB/sec [Average]
[info]   (min, avg, max) = (752.438, 771.100, 777.388), stdev = 10.535
[info]   CI (99.9%): [730.532, 811.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   152.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (152.000, 152.000, 152.000), stdev = 0.001
[info]   CI (99.9%): [152.000, 152.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   801.749 ±(99.9%) 708.274 MB/sec [Average]
[info]   (min, avg, max) = (667.399, 801.749, 1005.166), stdev = 183.937
[info]   CI (99.9%): [93.475, 1510.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   157.939 ±(99.9%) 136.931 B/op [Average]
[info]   (min, avg, max) = (130.495, 157.939, 197.555), stdev = 35.561
[info]   CI (99.9%): [21.008, 294.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   1.332 ±(99.9%) 11.471 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.332, 6.661), stdev = 2.979
[info]   CI (99.9%): [≈ 0, 12.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.262 ±(99.9%) 2.254 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.262, 1.309), stdev = 0.585
[info]   CI (99.9%): [≈ 0, 2.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.time":
[info]   58.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 11.600, 15.000), stdev = 2.702
[info]   CI (99.9%): [58.000, 58.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala
[info] # Run progress: 94.05% complete, ETA 00:04:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 897337.509 ops/s
[info] # Warmup Iteration   2: 1730169.437 ops/s
[info] # Warmup Iteration   3: 1825812.717 ops/s
[info] Iteration   1: 1836977.537 ops/s
[info]                  ·gc.alloc.rate:            569.485 MB/sec
[info]                  ·gc.alloc.rate.norm:       488.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.334 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 288.210 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 1843785.405 ops/s
[info]                  ·gc.alloc.rate:            571.581 MB/sec
[info]                  ·gc.alloc.rate.norm:       488.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.680 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 574.316 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 1837884.156 ops/s
[info]                  ·gc.alloc.rate:            569.855 MB/sec
[info]                  ·gc.alloc.rate.norm:       488.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.789 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 576.149 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 1843216.583 ops/s
[info]                  ·gc.alloc.rate:            571.460 MB/sec
[info]                  ·gc.alloc.rate.norm:       488.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.374 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 287.247 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 1835212.642 ops/s
[info]                  ·gc.alloc.rate:            568.939 MB/sec
[info]                  ·gc.alloc.rate.norm:       488.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.699 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 576.999 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala":
[info]   1839415.265 ±(99.9%) 14850.835 ops/s [Average]
[info]   (min, avg, max) = (1835212.642, 1839415.265, 1843785.405), stdev = 3856.715
[info]   CI (99.9%): [1824564.429, 1854266.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   570.264 ±(99.9%) 4.595 MB/sec [Average]
[info]   (min, avg, max) = (568.939, 570.264, 571.581), stdev = 1.193
[info]   CI (99.9%): [565.669, 574.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   488.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (488.000, 488.000, 488.000), stdev = 0.001
[info]   CI (99.9%): [488.000, 488.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   538.175 ±(99.9%) 709.431 MB/sec [Average]
[info]   (min, avg, max) = (336.334, 538.175, 672.789), stdev = 184.237
[info]   CI (99.9%): [≈ 0, 1247.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   460.584 ±(99.9%) 607.626 B/op [Average]
[info]   (min, avg, max) = (287.247, 460.584, 576.999), stdev = 157.798
[info]   CI (99.9%): [≈ 0, 1068.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 8.000), stdev = 2.191
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala
[info] # Run progress: 94.32% complete, ETA 00:04:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6597629.298 ops/s
[info] # Warmup Iteration   2: 9315945.061 ops/s
[info] # Warmup Iteration   3: 9316542.888 ops/s
[info] Iteration   1: 9355787.965 ops/s
[info]                  ·gc.alloc.rate:                   903.362 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.619 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        113.175 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.112 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 9281286.384 ops/s
[info]                  ·gc.alloc.rate:                   896.114 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1010.252 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        171.360 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.113 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 9857092.625 ops/s
[info]                  ·gc.alloc.rate:                   951.789 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.662 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        161.242 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.106 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 9458800.114 ops/s
[info]                  ·gc.alloc.rate:                                  913.449 MB/sec
[info]                  ·gc.alloc.rate.norm:                             152.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.126 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.128 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       169.252 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                0.665 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 9286297.534 ops/s
[info]                  ·gc.alloc.rate:                                  897.050 MB/sec
[info]                  ·gc.alloc.rate.norm:                             152.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.947 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       115.383 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala":
[info]   9447852.924 ±(99.9%) 923186.333 ops/s [Average]
[info]   (min, avg, max) = (9281286.384, 9447852.924, 9857092.625), stdev = 239748.559
[info]   CI (99.9%): [8524666.591, 10371039.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   912.353 ±(99.9%) 88.965 MB/sec [Average]
[info]   (min, avg, max) = (896.114, 912.353, 951.789), stdev = 23.104
[info]   CI (99.9%): [823.388, 1001.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   152.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (152.000, 152.000, 152.000), stdev = 0.001
[info]   CI (99.9%): [152.000, 152.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.026 ±(99.9%) 0.215 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.126), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.004 ±(99.9%) 0.036 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   878.121 ±(99.9%) 707.914 MB/sec [Average]
[info]   (min, avg, max) = (672.619, 878.121, 1017.128), stdev = 183.843
[info]   CI (99.9%): [170.208, 1586.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   146.083 ±(99.9%) 112.775 B/op [Average]
[info]   (min, avg, max) = (113.175, 146.083, 171.360), stdev = 29.287
[info]   CI (99.9%): [33.307, 258.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   1.199 ±(99.9%) 6.124 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.199, 3.997), stdev = 1.590
[info]   CI (99.9%): [≈ 0, 7.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.199 ±(99.9%) 1.019 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.199, 0.665), stdev = 0.265
[info]   CI (99.9%): [≈ 0, 1.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.200, 9.000), stdev = 2.950
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 94.59% complete, ETA 00:04:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5631713.831 ops/s
[info] # Warmup Iteration   2: 8041049.748 ops/s
[info] # Warmup Iteration   3: 8036604.988 ops/s
[info] Iteration   1: 8060484.720 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 8054131.398 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 8053455.832 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 8059870.943 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 8061964.531 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   8057981.485 ±(99.9%) 15037.935 ops/s [Average]
[info]   (min, avg, max) = (8053455.832, 8057981.485, 8061964.531), stdev = 3905.304
[info]   CI (99.9%): [8042943.550, 8073019.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson
[info] # Run progress: 94.86% complete, ETA 00:04:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2124141.321 ops/s
[info] # Warmup Iteration   2: 2937203.336 ops/s
[info] # Warmup Iteration   3: 3063367.221 ops/s
[info] Iteration   1: 3099537.998 ops/s
[info]                  ·gc.alloc.rate:            992.645 MB/sec
[info]                  ·gc.alloc.rate.norm:       504.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.265 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 512.438 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 3027893.460 ops/s
[info]                  ·gc.alloc.rate:            969.713 MB/sec
[info]                  ·gc.alloc.rate.norm:       504.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.278 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 524.564 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 3074641.837 ops/s
[info]                  ·gc.alloc.rate:                   984.779 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.381 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        516.591 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.046 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   4: 2966972.484 ops/s
[info]                  ·gc.alloc.rate:                                  949.932 MB/sec
[info]                  ·gc.alloc.rate.norm:                             504.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.128 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.068 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.947 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       541.678 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 3030967.216 ops/s
[info]                  ·gc.alloc.rate:                                  970.477 MB/sec
[info]                  ·gc.alloc.rate.norm:                             504.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.049 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       530.264 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson":
[info]   3040002.599 ±(99.9%) 195455.815 ops/s [Average]
[info]   (min, avg, max) = (2966972.484, 3040002.599, 3099537.998), stdev = 50759.254
[info]   CI (99.9%): [2844546.784, 3235458.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   973.509 ±(99.9%) 63.058 MB/sec [Average]
[info]   (min, avg, max) = (949.932, 973.509, 992.645), stdev = 16.376
[info]   CI (99.9%): [910.451, 1036.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   504.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (504.000, 504.000, 504.000), stdev = 0.001
[info]   CI (99.9%): [504.000, 504.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.026 ±(99.9%) 0.219 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.128), stdev = 0.057
[info]   CI (99.9%): [≈ 0, 0.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.014 ±(99.9%) 0.116 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.068), stdev = 0.030
[info]   CI (99.9%): [≈ 0, 0.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1013.984 ±(99.9%) 24.656 MB/sec [Average]
[info]   (min, avg, max) = (1009.265, 1013.984, 1021.049), stdev = 6.403
[info]   CI (99.9%): [989.328, 1038.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   525.107 ±(99.9%) 44.512 B/op [Average]
[info]   (min, avg, max) = (512.438, 525.107, 541.678), stdev = 11.560
[info]   CI (99.9%): [480.595, 569.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.800 ±(99.9%) 6.884 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.800, 3.998), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   0.409 ±(99.9%) 3.523 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.409, 2.046), stdev = 0.915
[info]   CI (99.9%): [≈ 0, 3.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.400, 11.000), stdev = 4.506
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce
[info] # Run progress: 95.14% complete, ETA 00:03:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 510615.400 ops/s
[info] # Warmup Iteration   2: 785566.179 ops/s
[info] # Warmup Iteration   3: 754927.394 ops/s
[info] Iteration   1: 749809.029 ops/s
[info]                  ·gc.alloc.rate:            1246.091 MB/sec
[info]                  ·gc.alloc.rate.norm:       2616.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.998 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2122.454 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 746501.835 ops/s
[info]                  ·gc.alloc.rate:                                  1240.408 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2616.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.038 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.080 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1351.104 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2849.456 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.329 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                7.022 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   3: 743632.869 ops/s
[info]                  ·gc.alloc.rate:                                  1235.798 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2616.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.019 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.041 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.334 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2881.741 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 750748.877 ops/s
[info]                  ·gc.alloc.rate:                                  1248.137 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2616.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.409 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2140.795 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 795481.014 ops/s
[info]                  ·gc.alloc.rate:                                  1322.682 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2616.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.059 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2693.881 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce":
[info]   757234.725 ±(99.9%) 83039.009 ops/s [Average]
[info]   (min, avg, max) = (743632.869, 757234.725, 795481.014), stdev = 21564.967
[info]   CI (99.9%): [674195.715, 840273.734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   1258.623 ±(99.9%) 139.147 MB/sec [Average]
[info]   (min, avg, max) = (1235.798, 1258.623, 1322.682), stdev = 36.136
[info]   CI (99.9%): [1119.476, 1397.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2616.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2616.001, 2616.001, 2616.001), stdev = 0.001
[info]   CI (99.9%): [2616.000, 2616.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.012 ±(99.9%) 0.065 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.038), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.025 ±(99.9%) 0.137 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.080), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1221.381 ±(99.9%) 721.559 MB/sec [Average]
[info]   (min, avg, max) = (1010.998, 1221.381, 1362.059), stdev = 187.387
[info]   CI (99.9%): [499.821, 1942.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2537.665 ±(99.9%) 1453.474 B/op [Average]
[info]   (min, avg, max) = (2122.454, 2537.665, 2881.741), stdev = 377.463
[info]   CI (99.9%): [1084.191, 3991.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.329), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   1.404 ±(99.9%) 12.092 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.404, 7.022), stdev = 3.140
[info]   CI (99.9%): [≈ 0, 13.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.600, 10.000), stdev = 3.647
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava
[info] # Run progress: 95.41% complete, ETA 00:03:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.886 ops/s
[info] # Warmup Iteration   2: 2530807.159 ops/s
[info] # Warmup Iteration   3: 2597616.917 ops/s
[info] Iteration   1: 2706260.809 ops/s
[info]                  ·gc.alloc.rate:            756.466 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.368 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 388.176 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 2672042.459 ops/s
[info]                  ·gc.alloc.rate:            747.199 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.638 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 393.149 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 2561588.671 ops/s
[info]                  ·gc.alloc.rate:            716.076 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1001.109 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 615.142 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   4: 2594247.971 ops/s
[info]                  ·gc.alloc.rate:            725.204 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.401 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 404.930 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 2671869.574 ops/s
[info]                  ·gc.alloc.rate:                   746.865 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             667.362 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        393.163 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.354 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava":
[info]   2641201.897 ±(99.9%) 233172.671 ops/s [Average]
[info]   (min, avg, max) = (2561588.671, 2641201.897, 2706260.809), stdev = 60554.202
[info]   CI (99.9%): [2408029.226, 2874374.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   738.362 ±(99.9%) 65.233 MB/sec [Average]
[info]   (min, avg, max) = (716.076, 738.362, 756.466), stdev = 16.941
[info]   CI (99.9%): [673.129, 803.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   440.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (440.000, 440.000, 440.000), stdev = 0.001
[info]   CI (99.9%): [440.000, 440.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   734.176 ±(99.9%) 574.595 MB/sec [Average]
[info]   (min, avg, max) = (667.362, 734.176, 1001.109), stdev = 149.221
[info]   CI (99.9%): [159.580, 1308.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   438.912 ±(99.9%) 380.090 B/op [Average]
[info]   (min, avg, max) = (388.176, 438.912, 615.142), stdev = 98.708
[info]   CI (99.9%): [58.822, 819.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.471 ±(99.9%) 4.054 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.471, 2.354), stdev = 1.053
[info]   CI (99.9%): [≈ 0, 4.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.time":
[info]   53.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 10.600, 14.000), stdev = 1.949
[info]   CI (99.9%): [53.000, 53.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala
[info] # Run progress: 95.68% complete, ETA 00:03:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 443814.361 ops/s
[info] # Warmup Iteration   2: 1154033.172 ops/s
[info] # Warmup Iteration   3: 1163554.510 ops/s
[info] Iteration   1: 1148485.376 ops/s
[info]                  ·gc.alloc.rate:            846.350 MB/sec
[info]                  ·gc.alloc.rate.norm:       1160.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.675 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 921.964 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 1158614.316 ops/s
[info]                  ·gc.alloc.rate:            853.702 MB/sec
[info]                  ·gc.alloc.rate.norm:       1160.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.926 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1370.917 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   3: 1122447.264 ops/s
[info]                  ·gc.alloc.rate:            827.111 MB/sec
[info]                  ·gc.alloc.rate.norm:       1160.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.669 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 943.400 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 1107898.594 ops/s
[info]                  ·gc.alloc.rate:                                  816.447 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1160.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.090 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.128 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1012.976 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1439.226 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                5.677 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   5: 1112929.572 ops/s
[info]                  ·gc.alloc.rate:                                  820.186 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1160.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.043 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.061 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.699 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       962.721 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala":
[info]   1130075.024 ±(99.9%) 86046.504 ops/s [Average]
[info]   (min, avg, max) = (1107898.594, 1130075.024, 1158614.316), stdev = 22346.004
[info]   CI (99.9%): [1044028.521, 1216121.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   832.759 ±(99.9%) 63.254 MB/sec [Average]
[info]   (min, avg, max) = (816.447, 832.759, 853.702), stdev = 16.427
[info]   CI (99.9%): [769.506, 896.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1160.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1160.000, 1160.000, 1160.000), stdev = 0.001
[info]   CI (99.9%): [1160.000, 1160.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.027 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.090), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.038 ±(99.9%) 0.219 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.038, 0.128), stdev = 0.057
[info]   CI (99.9%): [≈ 0, 0.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   809.589 ±(99.9%) 707.950 MB/sec [Average]
[info]   (min, avg, max) = (672.669, 809.589, 1012.976), stdev = 183.852
[info]   CI (99.9%): [101.640, 1517.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1127.646 ±(99.9%) 981.187 B/op [Average]
[info]   (min, avg, max) = (921.964, 1127.646, 1439.226), stdev = 254.811
[info]   CI (99.9%): [146.459, 2108.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.135 ±(99.9%) 9.777 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.135, 5.677), stdev = 2.539
[info]   CI (99.9%): [≈ 0, 10.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.000, 13.000), stdev = 3.937
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala
[info] # Run progress: 95.95% complete, ETA 00:03:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1655221.425 ops/s
[info] # Warmup Iteration   2: 1809748.810 ops/s
[info] # Warmup Iteration   3: 1807688.923 ops/s
[info] Iteration   1: 1821199.047 ops/s
[info]                  ·gc.alloc.rate:            509.218 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.112 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 291.288 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 1884851.660 ops/s
[info]                  ·gc.alloc.rate:            526.821 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.978 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 562.905 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 1879997.084 ops/s
[info]                  ·gc.alloc.rate:            525.465 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.977 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 564.357 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 1891585.241 ops/s
[info]                  ·gc.alloc.rate:            528.774 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.032 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 280.449 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   5: 1818843.973 ops/s
[info]                  ·gc.alloc.rate:            508.386 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.993 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 583.331 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala":
[info]   1859295.401 ±(99.9%) 138996.592 ops/s [Average]
[info]   (min, avg, max) = (1818843.973, 1859295.401, 1891585.241), stdev = 36096.973
[info]   CI (99.9%): [1720298.809, 1998291.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   519.733 ±(99.9%) 38.706 MB/sec [Average]
[info]   (min, avg, max) = (508.386, 519.733, 528.774), stdev = 10.052
[info]   CI (99.9%): [481.027, 558.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   440.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (440.000, 440.000, 440.000), stdev = 0.001
[info]   CI (99.9%): [440.000, 440.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   539.218 ±(99.9%) 710.573 MB/sec [Average]
[info]   (min, avg, max) = (337.032, 539.218, 673.993), stdev = 184.534
[info]   CI (99.9%): [≈ 0, 1249.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   456.466 ±(99.9%) 600.658 B/op [Average]
[info]   (min, avg, max) = (280.449, 456.466, 583.331), stdev = 155.989
[info]   CI (99.9%): [≈ 0, 1057.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.200, 6.000), stdev = 1.643
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson
[info] # Run progress: 96.22% complete, ETA 00:02:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 675194.535 ops/s
[info] # Warmup Iteration   2: 1196868.445 ops/s
[info] # Warmup Iteration   3: 1239208.557 ops/s
[info] Iteration   1: 1220925.895 ops/s
[info]                  ·gc.alloc.rate:            868.644 MB/sec
[info]                  ·gc.alloc.rate.norm:       1120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.985 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1300.951 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 1169354.264 ops/s
[info]                  ·gc.alloc.rate:            832.127 MB/sec
[info]                  ·gc.alloc.rate.norm:       1120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.768 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 905.512 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 1158359.471 ops/s
[info]                  ·gc.alloc.rate:            824.236 MB/sec
[info]                  ·gc.alloc.rate.norm:       1120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.078 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1371.170 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   4: 1189395.393 ops/s
[info]                  ·gc.alloc.rate:                   846.262 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.682 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        890.273 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 5.289 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 1227077.724 ops/s
[info]                  ·gc.alloc.rate:                                  873.139 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1120.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.181 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.232 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.120 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1309.820 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson":
[info]   1193022.549 ±(99.9%) 117321.870 ops/s [Average]
[info]   (min, avg, max) = (1158359.471, 1193022.549, 1227077.724), stdev = 30468.117
[info]   CI (99.9%): [1075700.679, 1310344.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   848.881 ±(99.9%) 83.346 MB/sec [Average]
[info]   (min, avg, max) = (824.236, 848.881, 873.139), stdev = 21.645
[info]   CI (99.9%): [765.535, 932.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   1120.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1120.000, 1120.000, 1120.000), stdev = 0.001
[info]   CI (99.9%): [1120.000, 1120.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.036 ±(99.9%) 0.311 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.036, 0.181), stdev = 0.081
[info]   CI (99.9%): [≈ 0, 0.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.046 ±(99.9%) 0.399 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.232), stdev = 0.104
[info]   CI (99.9%): [≈ 0, 0.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   876.926 ±(99.9%) 718.048 MB/sec [Average]
[info]   (min, avg, max) = (672.682, 876.926, 1021.120), stdev = 186.475
[info]   CI (99.9%): [158.878, 1594.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   1155.545 ±(99.9%) 911.886 B/op [Average]
[info]   (min, avg, max) = (890.273, 1155.545, 1371.170), stdev = 236.814
[info]   CI (99.9%): [243.659, 2067.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   1.058 ±(99.9%) 9.108 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.058, 5.289), stdev = 2.365
[info]   CI (99.9%): [≈ 0, 10.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.600, 12.000), stdev = 3.715
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce
[info] # Run progress: 96.49% complete, ETA 00:02:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 964078.990 ops/s
[info] # Warmup Iteration   2: 1763337.576 ops/s
[info] # Warmup Iteration   3: 1753081.411 ops/s
[info] Iteration   1: 1766296.301 ops/s
[info]                  ·gc.alloc.rate:            1436.186 MB/sec
[info]                  ·gc.alloc.rate.norm:       1280.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1684.952 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1501.713 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 1791087.816 ops/s
[info]                  ·gc.alloc.rate:                                  1456.624 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1280.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.107 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.094 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1358.206 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1193.516 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                2.927 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 1799131.721 ops/s
[info]                  ·gc.alloc.rate:                                  1463.402 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1280.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.753 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1191.091 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 1795821.610 ops/s
[info]                  ·gc.alloc.rate:                                  1460.588 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1280.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.073 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1491.628 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 1795395.167 ops/s
[info]                  ·gc.alloc.rate:            1460.346 MB/sec
[info]                  ·gc.alloc.rate.norm:       1280.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.740 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1193.572 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce":
[info]   1789546.523 ±(99.9%) 51244.236 ops/s [Average]
[info]   (min, avg, max) = (1766296.301, 1789546.523, 1799131.721), stdev = 13307.965
[info]   CI (99.9%): [1738302.287, 1840790.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1455.429 ±(99.9%) 42.449 MB/sec [Average]
[info]   (min, avg, max) = (1436.186, 1455.429, 1463.402), stdev = 11.024
[info]   CI (99.9%): [1412.981, 1497.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1280.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1280.000, 1280.000, 1280.000), stdev = 0.001
[info]   CI (99.9%): [1280.000, 1280.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.022 ±(99.9%) 0.183 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.107), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.019 ±(99.9%) 0.161 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.094), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1493.745 ±(99.9%) 702.621 MB/sec [Average]
[info]   (min, avg, max) = (1358.206, 1493.745, 1702.073), stdev = 182.468
[info]   CI (99.9%): [791.124, 2196.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   1314.304 ±(99.9%) 641.203 B/op [Average]
[info]   (min, avg, max) = (1191.091, 1314.304, 1501.713), stdev = 166.518
[info]   CI (99.9%): [673.101, 1955.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   0.585 ±(99.9%) 5.040 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.585, 2.927), stdev = 1.309
[info]   CI (99.9%): [≈ 0, 5.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 16.000), stdev = 5.505
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava
[info] # Run progress: 96.76% complete, ETA 00:02:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.897 ops/s
[info] # Warmup Iteration   2: 2741449.486 ops/s
[info] # Warmup Iteration   3: 2883903.066 ops/s
[info] Iteration   1: 2895279.093 ops/s
[info]                  ·gc.alloc.rate:            676.992 MB/sec
[info]                  ·gc.alloc.rate.norm:       368.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.509 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 362.845 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 2997944.078 ops/s
[info]                  ·gc.alloc.rate:            700.874 MB/sec
[info]                  ·gc.alloc.rate.norm:       368.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.408 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 350.429 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 2959966.634 ops/s
[info]                  ·gc.alloc.rate:            692.078 MB/sec
[info]                  ·gc.alloc.rate.norm:       368.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.484 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 354.923 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 2988584.488 ops/s
[info]                  ·gc.alloc.rate:            698.767 MB/sec
[info]                  ·gc.alloc.rate.norm:       368.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.478 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 351.522 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 2991505.772 ops/s
[info]                  ·gc.alloc.rate:            699.683 MB/sec
[info]                  ·gc.alloc.rate.norm:       368.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.704 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 351.181 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava":
[info]   2966656.013 ±(99.9%) 163558.612 ops/s [Average]
[info]   (min, avg, max) = (2895279.093, 2966656.013, 2997944.078), stdev = 42475.652
[info]   CI (99.9%): [2803097.401, 3130214.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   693.679 ±(99.9%) 38.251 MB/sec [Average]
[info]   (min, avg, max) = (676.992, 693.679, 700.874), stdev = 9.934
[info]   CI (99.9%): [655.428, 731.929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   368.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (368.000, 368.000, 368.000), stdev = 0.001
[info]   CI (99.9%): [368.000, 368.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   667.517 ±(99.9%) 0.428 MB/sec [Average]
[info]   (min, avg, max) = (667.408, 667.517, 667.704), stdev = 0.111
[info]   CI (99.9%): [667.088, 667.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   354.180 ±(99.9%) 19.801 B/op [Average]
[info]   (min, avg, max) = (350.429, 354.180, 362.845), stdev = 5.142
[info]   CI (99.9%): [334.379, 373.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 9.400, 10.000), stdev = 0.548
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala
[info] # Run progress: 97.03% complete, ETA 00:02:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 828648.211 ops/s
[info] # Warmup Iteration   2: 1983726.857 ops/s
[info] # Warmup Iteration   3: 1982873.491 ops/s
[info] Iteration   1: 1988557.804 ops/s
[info]                  ·gc.alloc.rate:            889.748 MB/sec
[info]                  ·gc.alloc.rate.norm:       704.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.510 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 798.760 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 1989890.740 ops/s
[info]                  ·gc.alloc.rate:            890.041 MB/sec
[info]                  ·gc.alloc.rate.norm:       704.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.758 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 532.135 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 1962746.180 ops/s
[info]                  ·gc.alloc.rate:            877.761 MB/sec
[info]                  ·gc.alloc.rate.norm:       704.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.975 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 809.239 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   4: 1976053.002 ops/s
[info]                  ·gc.alloc.rate:                                  883.758 MB/sec
[info]                  ·gc.alloc.rate.norm:                             704.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.083 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.066 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            676.682 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       539.044 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                3.183 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 1988608.197 ops/s
[info]                  ·gc.alloc.rate:                                  889.356 MB/sec
[info]                  ·gc.alloc.rate.norm:                             704.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.028 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.003 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       808.210 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala":
[info]   1981171.185 ±(99.9%) 45217.552 ops/s [Average]
[info]   (min, avg, max) = (1962746.180, 1981171.185, 1989890.740), stdev = 11742.855
[info]   CI (99.9%): [1935953.633, 2026388.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   886.133 ±(99.9%) 20.598 MB/sec [Average]
[info]   (min, avg, max) = (877.761, 886.133, 890.041), stdev = 5.349
[info]   CI (99.9%): [865.535, 906.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   704.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (704.000, 704.000, 704.000), stdev = 0.001
[info]   CI (99.9%): [704.000, 704.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.022 ±(99.9%) 0.140 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.083), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.018 ±(99.9%) 0.111 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.066), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   877.786 ±(99.9%) 714.065 MB/sec [Average]
[info]   (min, avg, max) = (672.758, 877.786, 1021.003), stdev = 185.440
[info]   CI (99.9%): [163.721, 1591.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   697.478 ±(99.9%) 569.355 B/op [Average]
[info]   (min, avg, max) = (532.135, 697.478, 809.239), stdev = 147.860
[info]   CI (99.9%): [128.123, 1266.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.637 ±(99.9%) 5.482 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.637, 3.183), stdev = 1.424
[info]   CI (99.9%): [≈ 0, 6.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 8.200, 12.000), stdev = 3.768
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala
[info] # Run progress: 97.30% complete, ETA 00:02:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1697331.153 ops/s
[info] # Warmup Iteration   2: 2424015.172 ops/s
[info] # Warmup Iteration   3: 2442582.038 ops/s
[info] Iteration   1: 2445841.734 ops/s
[info]                  ·gc.alloc.rate:            571.784 MB/sec
[info]                  ·gc.alloc.rate.norm:       368.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.308 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 433.341 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 2448564.904 ops/s
[info]                  ·gc.alloc.rate:                   572.403 MB/sec
[info]                  ·gc.alloc.rate.norm:              368.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.311 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        432.874 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.428 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 2453742.603 ops/s
[info]                  ·gc.alloc.rate:                   573.600 MB/sec
[info]                  ·gc.alloc.rate.norm:              368.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             336.317 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        215.768 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.427 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 2445971.347 ops/s
[info]                  ·gc.alloc.rate:                   571.916 MB/sec
[info]                  ·gc.alloc.rate.norm:              368.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.458 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        433.337 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.429 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 2444173.691 ops/s
[info]                  ·gc.alloc.rate:            571.455 MB/sec
[info]                  ·gc.alloc.rate.norm:       368.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.413 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 433.658 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala":
[info]   2447658.856 ±(99.9%) 14424.361 ops/s [Average]
[info]   (min, avg, max) = (2444173.691, 2447658.856, 2453742.603), stdev = 3745.961
[info]   CI (99.9%): [2433234.494, 2462083.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   572.232 ±(99.9%) 3.224 MB/sec [Average]
[info]   (min, avg, max) = (571.455, 572.232, 573.600), stdev = 0.837
[info]   CI (99.9%): [569.008, 575.455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   368.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (368.000, 368.000, 368.000), stdev = 0.001
[info]   CI (99.9%): [368.000, 368.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   605.961 ±(99.9%) 580.430 MB/sec [Average]
[info]   (min, avg, max) = (336.317, 605.961, 673.458), stdev = 150.736
[info]   CI (99.9%): [25.531, 1186.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   389.796 ±(99.9%) 374.609 B/op [Average]
[info]   (min, avg, max) = (215.768, 389.796, 433.658), stdev = 97.285
[info]   CI (99.9%): [15.187, 764.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.400 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.400, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.257 ±(99.9%) 0.903 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.257, 0.429), stdev = 0.234
[info]   CI (99.9%): [≈ 0, 1.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 6.000), stdev = 1.342
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 97.57% complete, ETA 00:01:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1800116.004 ops/s
[info] # Warmup Iteration   2: 2545074.421 ops/s
[info] # Warmup Iteration   3: 2416544.290 ops/s
[info] Iteration   1: 2562194.573 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2560040.977 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2559953.736 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2560041.756 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2560239.665 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   2560494.141 ±(99.9%) 3682.489 ops/s [Average]
[info]   (min, avg, max) = (2559953.736, 2560494.141, 2562194.573), stdev = 956.331
[info]   CI (99.9%): [2556811.653, 2564176.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson
[info] # Run progress: 97.84% complete, ETA 00:01:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1472311.502 ops/s
[info] # Warmup Iteration   2: 2081868.768 ops/s
[info] # Warmup Iteration   3: 2173311.528 ops/s
[info] Iteration   1: 2129385.824 ops/s
[info]                  ·gc.alloc.rate:            973.890 MB/sec
[info]                  ·gc.alloc.rate.norm:       720.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.947 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 745.918 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 2174268.679 ops/s
[info]                  ·gc.alloc.rate:            994.458 MB/sec
[info]                  ·gc.alloc.rate.norm:       720.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.012 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 730.537 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 2156687.180 ops/s
[info]                  ·gc.alloc.rate:                   986.443 MB/sec
[info]                  ·gc.alloc.rate.norm:              720.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.024 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        736.482 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.917 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 2199179.679 ops/s
[info]                  ·gc.alloc.rate:                                  1005.970 MB/sec
[info]                  ·gc.alloc.rate.norm:                             720.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.111 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.079 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.082 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       730.817 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 2198666.120 ops/s
[info]                  ·gc.alloc.rate:            1006.039 MB/sec
[info]                  ·gc.alloc.rate.norm:       720.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.392 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 730.988 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson":
[info]   2171637.496 ±(99.9%) 113980.966 ops/s [Average]
[info]   (min, avg, max) = (2129385.824, 2171637.496, 2199179.679), stdev = 29600.495
[info]   CI (99.9%): [2057656.530, 2285618.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   993.360 ±(99.9%) 52.653 MB/sec [Average]
[info]   (min, avg, max) = (973.890, 993.360, 1006.039), stdev = 13.674
[info]   CI (99.9%): [940.707, 1046.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   720.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (720.000, 720.000, 720.000), stdev = 0.001
[info]   CI (99.9%): [720.000, 720.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.022 ±(99.9%) 0.191 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.111), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.016 ±(99.9%) 0.136 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.079), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1013.891 ±(99.9%) 25.826 MB/sec [Average]
[info]   (min, avg, max) = (1008.947, 1013.891, 1021.392), stdev = 6.707
[info]   CI (99.9%): [988.066, 1039.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   734.948 ±(99.9%) 25.461 B/op [Average]
[info]   (min, avg, max) = (730.537, 734.948, 745.918), stdev = 6.612
[info]   CI (99.9%): [709.487, 760.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   0.583 ±(99.9%) 5.023 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.583, 2.917), stdev = 1.304
[info]   CI (99.9%): [≈ 0, 5.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.200, 10.000), stdev = 3.834
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce
[info] # Run progress: 98.11% complete, ETA 00:01:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5058.719 ops/s
[info] # Warmup Iteration   2: 8272.941 ops/s
[info] # Warmup Iteration   3: 9572.335 ops/s
[info] Iteration   1: 9649.169 ops/s
[info]                  ·gc.alloc.rate:            1416.597 MB/sec
[info]                  ·gc.alloc.rate.norm:       230992.042 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.614 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 219906.520 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  24.000 ms
[info] Iteration   2: 10337.123 ops/s
[info]                  ·gc.alloc.rate:                                  1513.986 MB/sec
[info]                  ·gc.alloc.rate.norm:                             230558.124 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.066 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 10.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1354.608 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       206287.222 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                507.097 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   3: 10747.152 ops/s
[info]                  ·gc.alloc.rate:                                  1573.257 MB/sec
[info]                  ·gc.alloc.rate.norm:                             230416.038 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.209 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.804 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       249242.877 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 10876.315 ops/s
[info]                  ·gc.alloc.rate:            1592.627 MB/sec
[info]                  ·gc.alloc.rate.norm:       230422.847 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1702.278 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 246287.156 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 10891.199 ops/s
[info]                  ·gc.alloc.rate:                                  1594.499 MB/sec
[info]                  ·gc.alloc.rate.norm:                             230440.040 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.028 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.996 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.444 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       196758.409 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce":
[info]   10500.192 ±(99.9%) 2024.955 ops/s [Average]
[info]   (min, avg, max) = (9649.169, 10500.192, 10891.199), stdev = 525.874
[info]   CI (99.9%): [8475.237, 12525.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1538.193 ±(99.9%) 290.299 MB/sec [Average]
[info]   (min, avg, max) = (1416.597, 1538.193, 1594.499), stdev = 75.390
[info]   CI (99.9%): [1247.894, 1828.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   230565.818 ±(99.9%) 944.038 B/op [Average]
[info]   (min, avg, max) = (230416.038, 230565.818, 230992.042), stdev = 245.164
[info]   CI (99.9%): [229621.780, 231509.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.019 ±(99.9%) 0.110 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.066), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.844 ±(99.9%) 16.769 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.844, 10.014), stdev = 4.355
[info]   CI (99.9%): [≈ 0, 19.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1493.749 ±(99.9%) 732.383 MB/sec [Average]
[info]   (min, avg, max) = (1348.614, 1493.749, 1702.278), stdev = 190.197
[info]   CI (99.9%): [761.367, 2226.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   223696.436 ±(99.9%) 90429.952 B/op [Average]
[info]   (min, avg, max) = (196758.409, 223696.436, 249242.877), stdev = 23484.371
[info]   CI (99.9%): [133266.485, 314126.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   101.419 ±(99.9%) 873.252 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 101.419, 507.097), stdev = 226.781
[info]   CI (99.9%): [≈ 0, 974.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 9.400, 24.000), stdev = 8.532
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala
[info] # Run progress: 98.38% complete, ETA 00:01:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4274.741 ops/s
[info] # Warmup Iteration   2: 13275.690 ops/s
[info] # Warmup Iteration   3: 13858.895 ops/s
[info] Iteration   1: 14092.277 ops/s
[info]                  ·gc.alloc.rate:      199.104 MB/sec
[info]                  ·gc.alloc.rate.norm: 22240.031 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 13725.719 ops/s
[info]                  ·gc.alloc.rate:            193.927 MB/sec
[info]                  ·gc.alloc.rate.norm:       22240.030 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.681 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 38496.671 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 13929.848 ops/s
[info]                  ·gc.alloc.rate:            196.922 MB/sec
[info]                  ·gc.alloc.rate.norm:       22253.496 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.646 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 37930.259 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 14559.694 ops/s
[info]                  ·gc.alloc.rate:      205.870 MB/sec
[info]                  ·gc.alloc.rate.norm: 22256.030 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 14525.482 ops/s
[info]                  ·gc.alloc.rate:            205.371 MB/sec
[info]                  ·gc.alloc.rate.norm:       22256.035 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.649 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 36374.307 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala":
[info]   14166.604 ±(99.9%) 1413.861 ops/s [Average]
[info]   (min, avg, max) = (13725.719, 14166.604, 14559.694), stdev = 367.175
[info]   CI (99.9%): [12752.743, 15580.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   200.239 ±(99.9%) 20.209 MB/sec [Average]
[info]   (min, avg, max) = (193.927, 200.239, 205.870), stdev = 5.248
[info]   CI (99.9%): [180.030, 220.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   22249.124 ±(99.9%) 32.215 B/op [Average]
[info]   (min, avg, max) = (22240.030, 22249.124, 22256.035), stdev = 8.366
[info]   CI (99.9%): [22216.910, 22281.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   201.395 ±(99.9%) 707.933 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 201.395, 335.681), stdev = 183.848
[info]   CI (99.9%): [≈ 0, 909.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   22560.248 ±(99.9%) 79358.881 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 22560.248, 38496.671), stdev = 20609.249
[info]   CI (99.9%): [≈ 0, 101919.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 5.000), stdev = 2.739
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala
[info] # Run progress: 98.65% complete, ETA 00:01:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17677.884 ops/s
[info] # Warmup Iteration   2: 24478.256 ops/s
[info] # Warmup Iteration   3: 36527.796 ops/s
[info] Iteration   1: 36502.026 ops/s
[info]                  ·gc.alloc.rate:            328.357 MB/sec
[info]                  ·gc.alloc.rate.norm:       14160.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.002 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14532.840 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 37107.829 ops/s
[info]                  ·gc.alloc.rate:            333.922 MB/sec
[info]                  ·gc.alloc.rate.norm:       14160.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.118 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14295.553 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 38061.653 ops/s
[info]                  ·gc.alloc.rate:            342.396 MB/sec
[info]                  ·gc.alloc.rate.norm:       14160.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.019 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13937.676 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   4: 36596.050 ops/s
[info]                  ·gc.alloc.rate:            329.315 MB/sec
[info]                  ·gc.alloc.rate.norm:       14160.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.127 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14495.914 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 37991.932 ops/s
[info]                  ·gc.alloc.rate:            341.774 MB/sec
[info]                  ·gc.alloc.rate.norm:       14160.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.027 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13963.352 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala":
[info]   37251.898 ±(99.9%) 2866.438 ops/s [Average]
[info]   (min, avg, max) = (36502.026, 37251.898, 38061.653), stdev = 744.405
[info]   CI (99.9%): [34385.460, 40118.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   335.153 ±(99.9%) 25.693 MB/sec [Average]
[info]   (min, avg, max) = (328.357, 335.153, 342.396), stdev = 6.672
[info]   CI (99.9%): [309.460, 360.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   14160.012 ±(99.9%) 0.005 B/op [Average]
[info]   (min, avg, max) = (14160.011, 14160.012, 14160.014), stdev = 0.001
[info]   CI (99.9%): [14160.007, 14160.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   337.059 ±(99.9%) 0.227 MB/sec [Average]
[info]   (min, avg, max) = (337.002, 337.059, 337.127), stdev = 0.059
[info]   CI (99.9%): [336.832, 337.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   14245.067 ±(99.9%) 1092.760 B/op [Average]
[info]   (min, avg, max) = (13937.676, 14245.067, 14532.840), stdev = 283.786
[info]   CI (99.9%): [13152.307, 15337.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson
[info] # Run progress: 98.92% complete, ETA 00:00:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 639.604 ops/s
[info] # Warmup Iteration   2: 2584.890 ops/s
[info] # Warmup Iteration   3: 2326.764 ops/s
[info] Iteration   1: 2368.560 ops/s
[info]                  ·gc.alloc.rate:            773.741 MB/sec
[info]                  ·gc.alloc.rate.norm:       514000.493 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.626 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 446164.883 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  33.000 ms
[info] Iteration   2: 2790.366 ops/s
[info]                  ·gc.alloc.rate:            911.098 MB/sec
[info]                  ·gc.alloc.rate.norm:       513735.880 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.435 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 568056.937 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  21.000 ms
[info] Iteration   3: 2908.279 ops/s
[info]                  ·gc.alloc.rate:            949.589 MB/sec
[info]                  ·gc.alloc.rate.norm:       513688.140 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.498 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 545014.408 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   4: 2867.628 ops/s
[info]                  ·gc.alloc.rate:                   936.245 MB/sec
[info]                  ·gc.alloc.rate.norm:              513688.153 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1011.539 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        554999.431 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.665 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2559.286 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   5: 2931.108 ops/s
[info]                  ·gc.alloc.rate:                                  957.055 MB/sec
[info]                  ·gc.alloc.rate.norm:                             513688.139 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.041 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 21.965 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.964 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       365499.547 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson":
[info]   2773.188 ±(99.9%) 895.069 ops/s [Average]
[info]   (min, avg, max) = (2368.560, 2773.188, 2931.108), stdev = 232.447
[info]   CI (99.9%): [1878.119, 3668.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   905.546 ±(99.9%) 291.602 MB/sec [Average]
[info]   (min, avg, max) = (773.741, 905.546, 957.055), stdev = 75.728
[info]   CI (99.9%): [613.944, 1197.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   513760.161 ±(99.9%) 523.420 B/op [Average]
[info]   (min, avg, max) = (513688.139, 513760.161, 514000.493), stdev = 135.930
[info]   CI (99.9%): [513236.742, 514283.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.008 ±(99.9%) 0.070 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.041), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   4.393 ±(99.9%) 37.824 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.393, 21.965), stdev = 9.823
[info]   CI (99.9%): [≈ 0, 42.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   875.812 ±(99.9%) 701.476 MB/sec [Average]
[info]   (min, avg, max) = (671.626, 875.812, 1011.539), stdev = 182.171
[info]   CI (99.9%): [174.336, 1577.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   495947.041 ±(99.9%) 336735.676 B/op [Average]
[info]   (min, avg, max) = (365499.547, 495947.041, 568056.937), stdev = 87449.186
[info]   CI (99.9%): [159211.365, 832682.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.033 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.665), stdev = 2.086
[info]   CI (99.9%): [≈ 0, 8.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   511.857 ±(99.9%) 4407.245 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 511.857, 2559.286), stdev = 1144.547
[info]   CI (99.9%): [≈ 0, 4919.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.time":
[info]   99.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (10.000, 19.800, 33.000), stdev = 8.468
[info]   CI (99.9%): [99.000, 99.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala
[info] # Run progress: 99.19% complete, ETA 00:00:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_8263f884/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 21324.961 ops/s
[info] # Warmup Iteration   2: 51981.225 ops/s
[info] # Warmup Iteration   3: 52954.156 ops/s
[info] Iteration   1: 55058.896 ops/s
[info]                  ·gc.alloc.rate:            702.979 MB/sec
[info]                  ·gc.alloc.rate.norm:       20100.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      669.953 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19155.725 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 54890.784 ops/s
[info]                  ·gc.alloc.rate:            700.898 MB/sec
[info]                  ·gc.alloc.rate.norm:       20100.042 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1005.038 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 28822.040 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   3: 54988.601 ops/s
[info]                  ·gc.alloc.rate:            702.518 MB/sec
[info]                  ·gc.alloc.rate.norm:       20099.998 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.403 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19181.152 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 55347.435 ops/s
[info]                  ·gc.alloc.rate:            706.749 MB/sec
[info]                  ·gc.alloc.rate.norm:       20099.982 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.043 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19056.064 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 55331.256 ops/s
[info]                  ·gc.alloc.rate:                   706.556 MB/sec
[info]                  ·gc.alloc.rate.norm:              20100.063 B/op
[info]                  ·gc.churn.G1_Old_Gen:             670.063 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        19061.918 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 113.689 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala":
[info]   55123.394 ±(99.9%) 793.451 ops/s [Average]
[info]   (min, avg, max) = (54890.784, 55123.394, 55347.435), stdev = 206.057
[info]   CI (99.9%): [54329.944, 55916.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   703.940 ±(99.9%) 9.992 MB/sec [Average]
[info]   (min, avg, max) = (700.898, 703.940, 706.749), stdev = 2.595
[info]   CI (99.9%): [693.948, 713.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   20100.018 ±(99.9%) 0.129 B/op [Average]
[info]   (min, avg, max) = (20099.982, 20100.018, 20100.063), stdev = 0.034
[info]   CI (99.9%): [20099.889, 20100.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   737.100 ±(99.9%) 576.757 MB/sec [Average]
[info]   (min, avg, max) = (669.953, 737.100, 1005.038), stdev = 149.782
[info]   CI (99.9%): [160.343, 1313.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   21055.380 ±(99.9%) 16719.688 B/op [Average]
[info]   (min, avg, max) = (19056.064, 21055.380, 28822.040), stdev = 4342.050
[info]   CI (99.9%): [4335.692, 37775.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   22.738 ±(99.9%) 195.780 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 22.738, 113.689), stdev = 50.843
[info]   CI (99.9%): [≈ 0, 218.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.time":
[info]   55.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 11.000, 16.000), stdev = 2.828
[info]   CI (99.9%): [55.000, 55.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala
[info] # Run progress: 99.46% complete, ETA 00:00:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 62451.369 ops/s
[info] # Warmup Iteration   2: 79312.881 ops/s
[info] # Warmup Iteration   3: 77635.220 ops/s
[info] Iteration   1: 80086.441 ops/s
[info]                  ·gc.alloc.rate:            525.112 MB/sec
[info]                  ·gc.alloc.rate.norm:       10320.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.372 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6610.707 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 80413.831 ops/s
[info]                  ·gc.alloc.rate:            527.216 MB/sec
[info]                  ·gc.alloc.rate.norm:       10320.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.701 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13167.824 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 80406.938 ops/s
[info]                  ·gc.alloc.rate:            527.211 MB/sec
[info]                  ·gc.alloc.rate.norm:       10320.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.763 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13169.134 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 78330.249 ops/s
[info]                  ·gc.alloc.rate:            513.546 MB/sec
[info]                  ·gc.alloc.rate.norm:       10320.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.332 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6758.789 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 79771.741 ops/s
[info]                  ·gc.alloc.rate:            523.111 MB/sec
[info]                  ·gc.alloc.rate.norm:       10320.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.835 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13273.779 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala":
[info]   79801.840 ±(99.9%) 3328.168 ops/s [Average]
[info]   (min, avg, max) = (78330.249, 79801.840, 80413.831), stdev = 864.315
[info]   CI (99.9%): [76473.672, 83130.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   523.239 ±(99.9%) 21.873 MB/sec [Average]
[info]   (min, avg, max) = (513.546, 523.239, 527.216), stdev = 5.680
[info]   CI (99.9%): [501.366, 545.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   10320.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10320.005, 10320.005, 10320.005), stdev = 0.001
[info]   CI (99.9%): [10320.005, 10320.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   538.201 ±(99.9%) 709.526 MB/sec [Average]
[info]   (min, avg, max) = (336.332, 538.201, 672.835), stdev = 184.262
[info]   CI (99.9%): [≈ 0, 1247.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   10596.047 ±(99.9%) 13751.240 B/op [Average]
[info]   (min, avg, max) = (6610.707, 10596.047, 13273.779), stdev = 3571.153
[info]   CI (99.9%): [≈ 0, 24347.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 6.000), stdev = 1.643
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 99.73% complete, ETA 00:00:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 67719.080 ops/s
[info] # Warmup Iteration   2: 84048.641 ops/s
[info] # Warmup Iteration   3: 84316.315 ops/s
[info] Iteration   1: 84079.761 ops/s
[info]                  ·gc.alloc.rate:      11.964 MB/sec
[info]                  ·gc.alloc.rate.norm: 224.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 83980.139 ops/s
[info]                  ·gc.alloc.rate:      11.951 MB/sec
[info]                  ·gc.alloc.rate.norm: 224.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 83937.464 ops/s
[info]                  ·gc.alloc.rate:      11.947 MB/sec
[info]                  ·gc.alloc.rate.norm: 224.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 84058.560 ops/s
[info]                  ·gc.alloc.rate:      11.961 MB/sec
[info]                  ·gc.alloc.rate.norm: 224.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 84104.927 ops/s
[info]                  ·gc.alloc.rate:      11.967 MB/sec
[info]                  ·gc.alloc.rate.norm: 224.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   84032.170 ±(99.9%) 271.813 ops/s [Average]
[info]   (min, avg, max) = (83937.464, 84032.170, 84104.927), stdev = 70.589
[info]   CI (99.9%): [83760.357, 84303.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   11.958 ±(99.9%) 0.034 MB/sec [Average]
[info]   (min, avg, max) = (11.947, 11.958, 11.967), stdev = 0.009
[info]   CI (99.9%): [11.924, 11.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   224.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (224.005, 224.005, 224.005), stdev = 0.001
[info]   CI (99.9%): [224.005, 224.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # Run complete. Total time: 01:19:16
[info] Benchmark                                                                                                Mode  Cnt         Score          Error   Units
[info] AdtBenchmark.readCirce                                                                                  thrpt    5    720086.237 ±    49150.261   ops/s
[info] AdtBenchmark.readCirce:·gc.alloc.rate                                                                   thrpt    5      1892.103 ±      128.183  MB/sec
[info] AdtBenchmark.readCirce:·gc.alloc.rate.norm                                                              thrpt    5      4136.001 ±        0.001    B/op
[info] AdtBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                       thrpt    5         0.023 ±        0.195  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                  thrpt    5         0.053 ±        0.440    B/op
[info] AdtBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                             thrpt    5      1903.994 ±      711.436  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                        thrpt    5      4164.634 ±     1657.028    B/op
[info] AdtBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                      thrpt    5         0.666 ±        5.737  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                                 thrpt    5         1.503 ±       12.938    B/op
[info] AdtBenchmark.readCirce:·gc.count                                                                        thrpt    5        28.000                 counts
[info] AdtBenchmark.readCirce:·gc.time                                                                         thrpt    5        31.000                     ms
[info] AdtBenchmark.readJacksonScala                                                                           thrpt    5   1395064.188 ±    27116.272   ops/s
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate                                                            thrpt    5       992.606 ±       19.406  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                       thrpt    5      1120.000 ±        0.001    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                thrpt    5         0.044 ±        0.379  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           thrpt    5         0.050 ±        0.425    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                      thrpt    5      1013.297 ±       27.409  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                 thrpt    5      1143.366 ±       35.651    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                               thrpt    5         1.066 ±        7.821  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                          thrpt    5         1.200 ±        8.801    B/op
[info] AdtBenchmark.readJacksonScala:·gc.count                                                                 thrpt    5        15.000                 counts
[info] AdtBenchmark.readJacksonScala:·gc.time                                                                  thrpt    5        47.000                     ms
[info] AdtBenchmark.readJsoniterScala                                                                          thrpt    5   3353609.426 ±    15339.698   ops/s
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate                                                           thrpt    5       221.566 ±        1.008  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                      thrpt    5       104.000 ±        0.001    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                     thrpt    5       270.008 ±      581.213  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                thrpt    5       126.722 ±      272.779    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.count                                                                thrpt    5         4.000                 counts
[info] AdtBenchmark.readJsoniterScala:·gc.time                                                                 thrpt    5        11.000                     ms
[info] AdtBenchmark.readPlayJson                                                                               thrpt    5    147635.759 ±     6445.791   ops/s
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate                                                                thrpt    5      1174.353 ±       50.758  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate.norm                                                           thrpt    5     12520.003 ±        0.001    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                    thrpt    5         0.011 ±        0.057  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                               thrpt    5         0.115 ±        0.606    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                          thrpt    5      1150.334 ±      712.098  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                     thrpt    5     12256.995 ±     7343.871    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                   thrpt    5         1.199 ±        6.386  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                              thrpt    5        12.757 ±       67.900    B/op
[info] AdtBenchmark.readPlayJson:·gc.count                                                                     thrpt    5        17.000                 counts
[info] AdtBenchmark.readPlayJson:·gc.time                                                                      thrpt    5        52.000                     ms
[info] AdtBenchmark.writeCirce                                                                                 thrpt    5    535749.556 ±    30209.529   ops/s
[info] AdtBenchmark.writeCirce:·gc.alloc.rate                                                                  thrpt    5      1699.042 ±       95.968  MB/sec
[info] AdtBenchmark.writeCirce:·gc.alloc.rate.norm                                                             thrpt    5      4992.001 ±        0.001    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                      thrpt    5         0.025 ±        0.196  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                 thrpt    5         0.073 ±        0.578    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                            thrpt    5      1698.399 ±       28.632  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                       thrpt    5      4990.760 ±      216.595    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                     thrpt    5         0.666 ±        5.735  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                                thrpt    5         2.001 ±       17.228    B/op
[info] AdtBenchmark.writeCirce:·gc.count                                                                       thrpt    5        25.000                 counts
[info] AdtBenchmark.writeCirce:·gc.time                                                                        thrpt    5        38.000                     ms
[info] AdtBenchmark.writeJacksonScala                                                                          thrpt    5   1835950.942 ±   107087.724   ops/s
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate                                                           thrpt    5       597.168 ±       34.835  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                      thrpt    5       512.000 ±        0.001    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                     thrpt    5       604.226 ±      578.057  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                thrpt    5       518.932 ±      506.690    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.count                                                                thrpt    5         9.000                 counts
[info] AdtBenchmark.writeJacksonScala:·gc.time                                                                 thrpt    5        40.000                     ms
[info] AdtBenchmark.writeJsoniterScala                                                                         thrpt    5   6913940.042 ±   408702.878   ops/s
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate                                                          thrpt    5       351.400 ±       21.019  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                     thrpt    5        80.000 ±        0.001    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                    thrpt    5       336.626 ±        1.341  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                               thrpt    5        76.651 ±        4.593    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                             thrpt    5         0.133 ±        1.147  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                        thrpt    5         0.031 ±        0.263    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.count                                                               thrpt    5         5.000                 counts
[info] AdtBenchmark.writeJsoniterScala:·gc.time                                                                thrpt    5        15.000                     ms
[info] AdtBenchmark.writeJsoniterScalaPrealloc                                                                 thrpt    5   7330165.948 ±   758522.084   ops/s
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                             thrpt    5        ≈ 10⁻⁴                   B/op
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                       thrpt    5           ≈ 0                 counts
[info] AdtBenchmark.writePlayJson                                                                              thrpt    5    298099.444 ±    14025.070   ops/s
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate                                                               thrpt    5       957.594 ±       44.666  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate.norm                                                          thrpt    5      5056.001 ±        0.001    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   thrpt    5         0.047 ±        0.321  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              thrpt    5         0.246 ±        1.695    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                         thrpt    5       944.817 ±      587.588  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                    thrpt    5      4988.648 ±     3098.585    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                  thrpt    5         1.199 ±        7.565  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                             thrpt    5         6.332 ±       39.868    B/op
[info] AdtBenchmark.writePlayJson:·gc.count                                                                    thrpt    5        14.000                 counts
[info] AdtBenchmark.writePlayJson:·gc.time                                                                     thrpt    5        45.000                     ms
[info] AnyRefsBenchmark.readCirce                                                                              thrpt    5   1413120.335 ±    89307.416   ops/s
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate                                                               thrpt    5      2197.688 ±      139.871  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm                                                          thrpt    5      2448.000 ±        0.001    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   thrpt    5         0.019 ±        0.145  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              thrpt    5         0.021 ±        0.159    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                         thrpt    5      2246.330 ±      718.750  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                    thrpt    5      2500.104 ±      655.130    B/op
[info] AnyRefsBenchmark.readCirce:·gc.count                                                                    thrpt    5        33.000                 counts
[info] AnyRefsBenchmark.readCirce:·gc.time                                                                     thrpt    5        26.000                     ms
[info] AnyRefsBenchmark.readDslJsonJava                                                                        thrpt    5   9134434.858 ±   746532.433   ops/s
[info] AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate                                                         thrpt    5      1114.382 ±       90.939  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                    thrpt    5       192.000 ±        0.001    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'                             thrpt    5         0.121 ±        1.043  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        thrpt    5         0.021 ±        0.183    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                   thrpt    5      1076.669 ±      558.030  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                              thrpt    5       185.436 ±       91.337    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space                                            thrpt    5         1.465 ±       11.238  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                       thrpt    5         0.251 ±        1.934    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.count                                                              thrpt    5        16.000                 counts
[info] AnyRefsBenchmark.readDslJsonJava:·gc.time                                                               thrpt    5        51.000                     ms
[info] AnyRefsBenchmark.readJacksonScala                                                                       thrpt    5   2124573.249 ±   125138.730   ops/s
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate                                                        thrpt    5      1490.294 ±       88.962  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                   thrpt    5      1104.000 ±        0.001    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                            thrpt    5         0.015 ±        0.126  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       thrpt    5         0.011 ±        0.094    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                  thrpt    5      1493.613 ±      733.093  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                             thrpt    5      1105.579 ±      502.510    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                           thrpt    5         0.932 ±        6.688  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                      thrpt    5         0.700 ±        5.018    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.count                                                             thrpt    5        22.000                 counts
[info] AnyRefsBenchmark.readJacksonScala:·gc.time                                                              thrpt    5        37.000                     ms
[info] AnyRefsBenchmark.readJsoniterScala                                                                      thrpt    5   9338359.655 ±   997647.448   ops/s
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate                                                       thrpt    5      1186.685 ±      127.305  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                  thrpt    5       200.000 ±        0.001    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                           thrpt    5         0.021 ±        0.110  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      thrpt    5         0.004 ±        0.019    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                 thrpt    5      1221.176 ±      715.709  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                            thrpt    5       205.781 ±      118.295    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                          thrpt    5         0.666 ±        5.734  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                     thrpt    5         0.112 ±        0.961    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.count                                                            thrpt    5        18.000                 counts
[info] AnyRefsBenchmark.readJsoniterScala:·gc.time                                                             thrpt    5        27.000                     ms
[info] AnyRefsBenchmark.readPlayJson                                                                           thrpt    5    603695.741 ±    30185.418   ops/s
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate                                                            thrpt    5      1626.346 ±       81.555  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                       thrpt    5      4240.001 ±        0.001    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                thrpt    5         0.032 ±        0.264  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           thrpt    5         0.083 ±        0.686    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                      thrpt    5      1629.365 ±      578.162  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                 thrpt    5      4250.374 ±     1605.099    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                               thrpt    5         1.066 ±        9.176  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                          thrpt    5         2.841 ±       24.464    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.count                                                                 thrpt    5        24.000                 counts
[info] AnyRefsBenchmark.readPlayJson:·gc.time                                                                  thrpt    5        39.000                     ms
[info] AnyRefsBenchmark.writeCirce                                                                             thrpt    5   1740804.818 ±    90805.153   ops/s
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate                                                              thrpt    5      1583.952 ±       83.812  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm                                                         thrpt    5      1432.000 ±        0.001    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  thrpt    5         0.027 ±        0.216  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             thrpt    5         0.025 ±        0.198    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                        thrpt    5      1563.221 ±      732.167  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                   thrpt    5      1412.705 ±      637.081    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                 thrpt    5         0.666 ±        5.735  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                            thrpt    5         0.612 ±        5.272    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.count                                                                   thrpt    5        23.000                 counts
[info] AnyRefsBenchmark.writeCirce:·gc.time                                                                    thrpt    5        32.000                     ms
[info] AnyRefsBenchmark.writeDslJsonJava                                                                       thrpt    5  16814601.426 ±  1390353.702   ops/s
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                        thrpt    5       512.773 ±       42.644  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                   thrpt    5        48.000 ±        0.001    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                                  thrpt    5       467.189 ±      703.716  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                             thrpt    5        43.714 ±       65.481    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.count                                                             thrpt    5         7.000                 counts
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.time                                                              thrpt    5        33.000                     ms
[info] AnyRefsBenchmark.writeJacksonScala                                                                      thrpt    5   4870739.667 ±   121132.321   ops/s
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate                                                       thrpt    5      1336.753 ±       33.317  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                  thrpt    5       432.000 ±        0.001    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                           thrpt    5         0.016 ±        0.130  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      thrpt    5         0.005 ±        0.042    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                 thrpt    5      1287.612 ±      604.557  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                            thrpt    5       415.923 ±      188.493    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                          thrpt    5         0.933 ±        8.030  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                     thrpt    5         0.302 ±        2.603    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.count                                                            thrpt    5        19.000                 counts
[info] AnyRefsBenchmark.writeJacksonScala:·gc.time                                                             thrpt    5        37.000                     ms
[info] AnyRefsBenchmark.writeJsoniterScala                                                                     thrpt    5  20911734.563 ±  1133822.339   ops/s
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                      thrpt    5       637.725 ±       34.439  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                 thrpt    5        48.000 ±        0.001    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                thrpt    5       673.011 ±        1.203  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                           thrpt    5        50.664 ±        2.667    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                         thrpt    5         0.133 ±        1.147  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                    thrpt    5         0.010 ±        0.084    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.count                                                           thrpt    5        10.000                 counts
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.time                                                            thrpt    5        35.000                     ms
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc                                                             thrpt    5  19827949.621 ±  1999488.872   ops/s
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                              thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                         thrpt    5        ≈ 10⁻⁵                   B/op
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                   thrpt    5           ≈ 0                 counts
[info] AnyRefsBenchmark.writePlayJson                                                                          thrpt    5   1262982.356 ±    61279.420   ops/s
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate                                                           thrpt    5      1842.349 ±       90.184  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                      thrpt    5      2296.000 ±        0.001    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                               thrpt    5         0.038 ±        0.258  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          thrpt    5         0.048 ±        0.323    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                     thrpt    5      1834.600 ±      700.763  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                thrpt    5      2285.861 ±      840.401    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                              thrpt    5         1.066 ±        9.175  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                         thrpt    5         1.335 ±       11.493    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.count                                                                thrpt    5        27.000                 counts
[info] AnyRefsBenchmark.writePlayJson:·gc.time                                                                 thrpt    5        37.000                     ms
[info] ArrayOfBigDecimalsBenchmark.readCirce                                                                   thrpt    5     20073.125 ±     1172.464   ops/s
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate                                                    thrpt    5      1229.570 ±       71.443  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm                                               thrpt    5     96408.028 ±        0.052    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                        thrpt    5         0.022 ±        0.096  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   thrpt    5         1.777 ±        7.648    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                              thrpt    5      1221.362 ±      721.886  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                         thrpt    5     95876.778 ±    59634.358    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                       thrpt    5         0.666 ±        5.737  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                  thrpt    5        52.990 ±      456.264    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.count                                                         thrpt    5        18.000                 counts
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.time                                                          thrpt    5        29.000                     ms
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala                                                            thrpt    5     33482.411 ±     2154.298   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate                                             thrpt    5       839.308 ±       54.097  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        thrpt    5     39455.814 ±        1.707    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.027 ±        0.157  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         1.279 ±        7.306    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                       thrpt    5       809.671 ±      708.254  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                  thrpt    5     38058.916 ±    33097.015    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                           thrpt    5        37.064 ±      319.134    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count                                                  thrpt    5        12.000                 counts
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time                                                   thrpt    5        41.000                     ms
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala                                                           thrpt    5     32019.392 ±     1385.164   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate                                            thrpt    5       430.182 ±       18.800  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       thrpt    5     21144.014 ±        0.007    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                      thrpt    5       471.717 ±      709.918  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                 thrpt    5     23179.426 ±    34784.942    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count                                                 thrpt    5         7.000                 counts
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time                                                  thrpt    5        21.000                     ms
[info] ArrayOfBigDecimalsBenchmark.readPlayJson                                                                thrpt    5     24651.520 ±     1574.660   ops/s
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate                                                 thrpt    5      1306.340 ±       83.983  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            thrpt    5     83400.018 ±        0.007    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.025 ±        0.161  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         1.572 ±       10.264    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                           thrpt    5      1356.809 ±       27.908  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                      thrpt    5     86639.847 ±     5417.195    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.800 ±        6.884  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                               thrpt    5        50.885 ±      438.138    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count                                                      thrpt    5        20.000                 counts
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time                                                       thrpt    5        36.000                     ms
[info] ArrayOfBigDecimalsBenchmark.writeCirce                                                                  thrpt    5     27451.232 ±     1495.182   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate                                                   thrpt    5      1559.411 ±       84.345  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm                                              thrpt    5     89408.027 ±        0.098    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                       thrpt    5         0.028 ±        0.219  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  thrpt    5         1.615 ±       12.547    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                             thrpt    5      1563.055 ±      731.407  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                        thrpt    5     89640.543 ±    42554.913    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                      thrpt    5         0.666 ±        5.738  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                 thrpt    5        38.812 ±      334.181    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count                                                        thrpt    5        23.000                 counts
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time                                                         thrpt    5        30.000                     ms
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala                                                           thrpt    5     28525.544 ±     1462.544   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate                                            thrpt    5      1535.557 ±       78.703  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       thrpt    5     84720.026 ±        0.095    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5         0.014 ±        0.117  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5         0.804 ±        6.525    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                      thrpt    5      1494.425 ±      729.488  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                 thrpt    5     82434.738 ±    39402.908    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                               thrpt    5         0.933 ±        8.031  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                          thrpt    5        52.090 ±      448.512    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count                                                 thrpt    5        22.000                 counts
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time                                                  thrpt    5        34.000                     ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala                                                          thrpt    5     30062.928 ±     2666.949   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           thrpt    5      1551.303 ±      137.725  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      thrpt    5     81224.015 ±        0.009    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'               thrpt    5         0.033 ±        0.159  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm          thrpt    5         1.761 ±        8.483    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                     thrpt    5      1562.401 ±      707.035  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                thrpt    5     81949.247 ±    41747.051    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                              thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                         thrpt    5        43.430 ±      373.944    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count                                                thrpt    5        23.000                 counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time                                                 thrpt    5        28.000                     ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc                                                  thrpt    5     29623.942 ±      815.642   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   thrpt    5      1471.208 ±       39.608  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              thrpt    5     78168.015 ±        0.006    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'       thrpt    5         0.016 ±        0.108  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm  thrpt    5         0.826 ±        5.720    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                             thrpt    5      1426.456 ±      592.885  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                        thrpt    5     75789.792 ±    31406.637    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space                      thrpt    5         0.933 ±        8.031  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm                 thrpt    5        50.156 ±      431.855    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        thrpt    5        21.000                 counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                         thrpt    5        28.000                     ms
[info] ArrayOfBigDecimalsBenchmark.writePlayJson                                                               thrpt    5      7865.186 ±      226.795   ops/s
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate                                                thrpt    5      1023.204 ±       29.639  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm                                           thrpt    5    204776.053 ±        0.009    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.030 ±        0.185  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         6.048 ±       37.364    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                          thrpt    5      1081.794 ±      567.449  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                     thrpt    5    216383.872 ±   108344.971    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                              thrpt    5       161.340 ±     1389.187    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count                                                     thrpt    5        16.000                 counts
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time                                                      thrpt    5        42.000                     ms
[info] ArrayOfBigIntsBenchmark.readCirce                                                                       thrpt    5     19145.503 ±      978.748   ops/s
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate                                                        thrpt    5      1487.303 ±       76.915  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm                                                   thrpt    5    122264.030 ±        0.059    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                            thrpt    5         0.021 ±        0.119  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       thrpt    5         1.672 ±        9.704    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                  thrpt    5      1494.363 ±      700.119  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                             thrpt    5    122906.253 ±    59653.553    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                           thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                      thrpt    5        55.448 ±      477.423    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.count                                                             thrpt    5        22.000                 counts
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.time                                                              thrpt    5        31.000                     ms
[info] ArrayOfBigIntsBenchmark.readJacksonScala                                                                thrpt    5     38671.301 ±     2204.571   ops/s
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate                                                 thrpt    5       953.903 ±       54.353  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                            thrpt    5     38823.845 ±        1.430    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.031 ±        0.183  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         1.280 ±        7.497    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                           thrpt    5       946.668 ±      572.872  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                      thrpt    5     38494.841 ±    22421.857    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                               thrpt    5        32.650 ±      281.125    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count                                                      thrpt    5        14.000                 counts
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time                                                       thrpt    5        38.000                     ms
[info] ArrayOfBigIntsBenchmark.readJsoniterScala                                                               thrpt    5     52672.553 ±     3465.639   ops/s
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                                thrpt    5       680.643 ±       45.017  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                           thrpt    5     20336.008 ±        0.001    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                          thrpt    5       741.606 ±      580.707  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                     thrpt    5     22157.541 ±    17251.734    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                              thrpt    5        20.288 ±      174.688    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count                                                     thrpt    5        11.000                 counts
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time                                                      thrpt    5        31.000                     ms
[info] ArrayOfBigIntsBenchmark.readPlayJson                                                                    thrpt    5     29282.292 ±      819.923   ops/s
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate                                                     thrpt    5      1955.997 ±       54.335  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                thrpt    5    105128.015 ±        0.008    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                         thrpt    5         0.010 ±        0.039  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    thrpt    5         0.523 ±        2.075    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                               thrpt    5      1972.567 ±      582.105  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                          thrpt    5    105988.335 ±    29405.177    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                        thrpt    5         0.933 ±        8.029  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                   thrpt    5        50.094 ±      431.325    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.count                                                          thrpt    5        29.000                 counts
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.time                                                           thrpt    5        33.000                     ms
[info] ArrayOfBigIntsBenchmark.writeJacksonScala                                                               thrpt    5     32935.410 ±     1855.009   ops/s
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                                thrpt    5      1801.196 ±      100.527  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                           thrpt    5     86072.013 ±        0.008    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.013 ±        0.098  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         0.634 ±        4.767    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                          thrpt    5      1768.306 ±      590.974  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                     thrpt    5     84558.718 ±    31237.501    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.933 ±        8.030  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                              thrpt    5        45.342 ±      390.412    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count                                                     thrpt    5        26.000                 counts
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time                                                      thrpt    5        29.000                     ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala                                                              thrpt    5     44993.568 ±     1263.893   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                               thrpt    5      1728.987 ±       48.830  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                          thrpt    5     60480.009 ±        0.002    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                   thrpt    5         0.010 ±        0.079  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm              thrpt    5         0.370 ±        2.795    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                         thrpt    5      1700.373 ±       13.906  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                    thrpt    5     59480.939 ±     1219.094    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                  thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                             thrpt    5        28.321 ±      243.850    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count                                                    thrpt    5        25.000                 counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time                                                     thrpt    5        24.000                     ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc                                                      thrpt    5     45389.621 ±      523.704   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                       thrpt    5      1664.896 ±       19.646  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                  thrpt    5     57736.009 ±        0.001    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'           thrpt    5         0.033 ±        0.266  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm      thrpt    5         1.134 ±        9.257    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                                 thrpt    5      1699.465 ±       19.841  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                            thrpt    5     58934.878 ±      351.419    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space                          thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm                     thrpt    5        27.846 ±      239.760    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                            thrpt    5        25.000                 counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                             thrpt    5        26.000                     ms
[info] ArrayOfBooleansBenchmark.readCirce                                                                      thrpt    5    382180.959 ±    13833.185   ops/s
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                       thrpt    5      1923.206 ±       70.096  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                                  thrpt    5      7920.001 ±        0.001    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                           thrpt    5         0.021 ±        0.163  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      thrpt    5         0.088 ±        0.681    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                 thrpt    5      1973.635 ±      585.511  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                            thrpt    5      8130.357 ±     2543.429    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                          thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                     thrpt    5         2.788 ±       24.005    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.count                                                            thrpt    5        29.000                 counts
[info] ArrayOfBooleansBenchmark.readCirce:·gc.time                                                             thrpt    5        25.000                     ms
[info] ArrayOfBooleansBenchmark.readDslJsonJava                                                                thrpt    5   1548029.263 ±    30823.109   ops/s
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate                                                 thrpt    5       487.827 ±        9.713  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                            thrpt    5       496.000 ±        0.001    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                           thrpt    5       467.064 ±      704.342  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                      thrpt    5       475.572 ±      725.646    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm                               thrpt    5         0.135 ±        1.164    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.count                                                      thrpt    5         7.000                 counts
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.time                                                       thrpt    5        33.000                     ms
[info] ArrayOfBooleansBenchmark.readJacksonScala                                                               thrpt    5    591830.650 ±    17259.983   ops/s
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                                thrpt    5       502.356 ±       14.759  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                           thrpt    5      1336.001 ±        0.001    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                          thrpt    5       538.209 ±      709.461  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                     thrpt    5      1433.927 ±     1917.969    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.count                                                     thrpt    5         8.000                 counts
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.time                                                      thrpt    5        32.000                     ms
[info] ArrayOfBooleansBenchmark.readJsoniterScala                                                              thrpt    5   1727180.168 ±    18924.740   ops/s
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                               thrpt    5       333.610 ±        3.680  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                          thrpt    5       304.000 ±        0.001    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                         thrpt    5       337.059 ±        0.285  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                    thrpt    5       307.145 ±        3.324    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count                                                    thrpt    5         5.000                 counts
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time                                                     thrpt    5        14.000                     ms
[info] ArrayOfBooleansBenchmark.readPlayJson                                                                   thrpt    5     90911.199 ±     3303.787   ops/s
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                    thrpt    5      3302.659 ±      118.242  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                               thrpt    5     57176.005 ±        0.001    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                        thrpt    5         0.003 ±        0.010  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   thrpt    5         0.057 ±        0.176    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                              thrpt    5      3335.822 ±      585.030  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                         thrpt    5     57739.978 ±     8846.583    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.count                                                         thrpt    5        49.000                 counts
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.time                                                          thrpt    5        37.000                     ms
[info] ArrayOfBooleansBenchmark.writeCirce                                                                     thrpt    5    308956.499 ±     4425.277   ops/s
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                      thrpt    5       475.843 ±        6.861  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                                 thrpt    5      2424.001 ±        0.001    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                thrpt    5       539.288 ±      710.725  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                           thrpt    5      2747.694 ±     3626.515    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.count                                                           thrpt    5         8.000                 counts
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.time                                                            thrpt    5        26.000                     ms
[info] ArrayOfBooleansBenchmark.writeDslJsonJava                                                               thrpt    5   1219815.720 ±    57709.159   ops/s
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate                                                thrpt    5       564.213 ±       26.602  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                           thrpt    5       728.000 ±        0.001    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                          thrpt    5       533.849 ±      704.772  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                     thrpt    5       690.126 ±      925.090    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm                              thrpt    5         0.171 ±        1.475    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.count                                                     thrpt    5         8.000                 counts
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.time                                                      thrpt    5        37.000                     ms
[info] ArrayOfBooleansBenchmark.writeJacksonScala                                                              thrpt    5    980681.659 ±    29361.235   ops/s
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                               thrpt    5       692.807 ±       20.417  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                          thrpt    5      1112.000 ±        0.001    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                         thrpt    5       672.456 ±        1.888  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                    thrpt    5      1079.382 ±       29.452    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                  thrpt    5         0.932 ±        6.688  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                             thrpt    5         1.497 ±       10.716    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count                                                    thrpt    5        10.000                 counts
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time                                                     thrpt    5        41.000                     ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScala                                                             thrpt    5   2454774.907 ±    34447.894   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                              thrpt    5      1135.343 ±       16.123  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                         thrpt    5       728.000 ±        0.001    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                  thrpt    5         0.033 ±        0.274  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm             thrpt    5         0.021 ±        0.177    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                        thrpt    5      1152.399 ±      710.177  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                   thrpt    5       738.723 ±      448.316    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                 thrpt    5         0.799 ±        5.562  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                            thrpt    5         0.511 ±        3.557    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count                                                   thrpt    5        17.000                 counts
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time                                                    thrpt    5        29.000                     ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                     thrpt    5   1965599.490 ±    95602.335   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                      thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                 thrpt    5        ≈ 10⁻⁴                   B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                           thrpt    5           ≈ 0                 counts
[info] ArrayOfBooleansBenchmark.writePlayJson                                                                  thrpt    5    406803.688 ±    37096.912   ops/s
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                                   thrpt    5       475.530 ±       43.385  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                              thrpt    5      1840.001 ±        0.001    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                             thrpt    5       538.163 ±      709.407  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                        thrpt    5      2082.599 ±     2744.655    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.count                                                        thrpt    5         8.000                 counts
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.time                                                         thrpt    5        31.000                     ms
[info] ArrayOfBytesBenchmark.readCirce                                                                         thrpt    5    166854.557 ±     5875.136   ops/s
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate                                                          thrpt    5      2003.220 ±       71.328  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm                                                     thrpt    5     18896.002 ±        0.001    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                              thrpt    5         0.039 ±        0.303  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         thrpt    5         0.374 ±        2.886    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                    thrpt    5      2042.321 ±        2.002  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                               thrpt    5     19266.143 ±      678.616    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.count                                                               thrpt    5        30.000                 counts
[info] ArrayOfBytesBenchmark.readCirce:·gc.time                                                                thrpt    5        24.000                     ms
[info] ArrayOfBytesBenchmark.readJacksonScala                                                                  thrpt    5    370468.134 ±     1910.747   ops/s
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate                                                   thrpt    5       314.439 ±        1.589  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                              thrpt    5      1336.001 ±        0.001    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                             thrpt    5       336.361 ±        0.218  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                        thrpt    5      1429.146 ±        7.336    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.count                                                        thrpt    5         5.000                 counts
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.time                                                         thrpt    5        21.000                     ms
[info] ArrayOfBytesBenchmark.readJsoniterScala                                                                 thrpt    5    832065.257 ±    60228.458   ops/s
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate                                                  thrpt    5       160.707 ±       11.611  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                             thrpt    5       304.001 ±        0.001    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                            thrpt    5       134.801 ±      710.766  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                       thrpt    5       255.711 ±     1348.572    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.count                                                       thrpt    5         2.000                 counts
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.time                                                        thrpt    5         6.000                     ms
[info] ArrayOfBytesBenchmark.readPlayJson                                                                      thrpt    5     76484.860 ±     4320.576   ops/s
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate                                                       thrpt    5      3256.901 ±      182.428  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                  thrpt    5     67016.005 ±        0.001    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                           thrpt    5         0.007 ±        0.010  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      thrpt    5         0.152 ±        0.201    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                 thrpt    5      3267.875 ±      718.083  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                            thrpt    5     67277.997 ±    17092.840    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.count                                                            thrpt    5        48.000                 counts
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.time                                                             thrpt    5        40.000                     ms
[info] ArrayOfBytesBenchmark.writeCirce                                                                        thrpt    5    322633.294 ±     5038.121   ops/s
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate                                                         thrpt    5      1428.407 ±       22.084  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm                                                    thrpt    5      6968.001 ±        0.001    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                             thrpt    5         0.018 ±        0.150  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        thrpt    5         0.089 ±        0.731    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                   thrpt    5      1426.334 ±      586.984  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                              thrpt    5      6957.712 ±     2851.157    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                            thrpt    5         0.666 ±        5.736  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                       thrpt    5         3.247 ±       27.957    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.count                                                              thrpt    5        21.000                 counts
[info] ArrayOfBytesBenchmark.writeCirce:·gc.time                                                               thrpt    5        29.000                     ms
[info] ArrayOfBytesBenchmark.writeJacksonScala                                                                 thrpt    5   1644814.050 ±   114466.928   ops/s
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate                                                  thrpt    5       844.285 ±       58.920  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                             thrpt    5       808.000 ±        0.001    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                      thrpt    5         0.026 ±        0.146  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 thrpt    5         0.025 ±        0.141    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                            thrpt    5       877.673 ±      713.592  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                       thrpt    5       840.876 ±      700.135    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                     thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                thrpt    5         0.774 ±        6.662    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.count                                                       thrpt    5        13.000                 counts
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.time                                                        thrpt    5        40.000                     ms
[info] ArrayOfBytesBenchmark.writeJsoniterScala                                                                thrpt    5   2165470.032 ±   164343.691   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate                                                 thrpt    5       583.327 ±       44.256  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                            thrpt    5       424.000 ±        0.001    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                           thrpt    5       538.713 ±      710.130  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                      thrpt    5       390.632 ±      503.493    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.266 ±        1.405  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                               thrpt    5         0.192 ±        1.013    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count                                                      thrpt    5         8.000                 counts
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time                                                       thrpt    5        24.000                     ms
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc                                                        thrpt    5   2518155.222 ±     4902.771   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                         thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                    thrpt    5        ≈ 10⁻⁴                   B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                              thrpt    5           ≈ 0                 counts
[info] ArrayOfBytesBenchmark.writePlayJson                                                                     thrpt    5     38674.730 ±      832.946   ops/s
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate                                                      thrpt    5      1629.636 ±       35.149  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm                                                 thrpt    5     66320.765 ±        6.496    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                          thrpt    5         0.034 ±        0.165  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     thrpt    5         1.389 ±        6.732    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                thrpt    5      1630.599 ±      580.138  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                           thrpt    5     66382.614 ±    24582.524    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                         thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                    thrpt    5        32.684 ±      281.417    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.count                                                           thrpt    5        24.000                 counts
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.time                                                            thrpt    5        32.000                     ms
[info] ArrayOfCharsBenchmark.readCirce                                                                         thrpt    5    235646.556 ±     9254.302   ops/s
[info] ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate                                                          thrpt    5      2421.928 ±       95.105  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate.norm                                                     thrpt    5     16176.002 ±        0.001    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                              thrpt    5         0.008 ±        0.003  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         thrpt    5         0.050 ±        0.016    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                    thrpt    5      2382.743 ±        2.515  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                               thrpt    5     15915.618 ±      630.983    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.count                                                               thrpt    5        35.000                 counts
[info] ArrayOfCharsBenchmark.readCirce:·gc.time                                                                thrpt    5        27.000                     ms
[info] ArrayOfCharsBenchmark.readJacksonScala                                                                  thrpt    5    300630.874 ±    10412.352   ops/s
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate                                                   thrpt    5      1454.542 ±       50.271  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                              thrpt    5      7616.001 ±        0.001    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                       thrpt    5         0.038 ±        0.322  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  thrpt    5         0.199 ±        1.695    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                             thrpt    5      1426.088 ±      593.927  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                        thrpt    5      7464.993 ±     2992.832    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                      thrpt    5         0.932 ±        8.029  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                 thrpt    5         4.949 ±       42.611    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.count                                                        thrpt    5        21.000                 counts
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.time                                                         thrpt    5        30.000                     ms
[info] ArrayOfCharsBenchmark.readJsoniterScala                                                                 thrpt    5   1240278.790 ±   104178.920   ops/s
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                                  thrpt    5       428.663 ±       36.074  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                             thrpt    5       544.000 ±        0.001    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                            thrpt    5       471.853 ±      710.971  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                       thrpt    5       598.013 ±      888.952    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.count                                                       thrpt    5         7.000                 counts
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.time                                                        thrpt    5        20.000                     ms
[info] ArrayOfCharsBenchmark.readPlayJson                                                                      thrpt    5     71985.493 ±     4966.972   ops/s
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate                                                       thrpt    5      3024.401 ±      208.496  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                  thrpt    5     66128.006 ±        0.002    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                           thrpt    5         0.007 ±        0.010  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      thrpt    5         0.154 ±        0.217    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                 thrpt    5      3063.362 ±      925.936  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                            thrpt    5     66935.218 ±    16577.074    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.count                                                            thrpt    5        45.000                 counts
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.time                                                             thrpt    5        37.000                     ms
[info] ArrayOfCharsBenchmark.writeCirce                                                                        thrpt    5    211774.638 ±    11618.158   ops/s
[info] ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate                                                         thrpt    5      1794.266 ±       98.178  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                                    thrpt    5     13336.002 ±        0.001    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                             thrpt    5         0.029 ±        0.233  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        thrpt    5         0.213 ±        1.717    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                   thrpt    5      1836.609 ±      710.572  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                              thrpt    5     13638.059 ±     4549.909    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                            thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                       thrpt    5         4.906 ±       42.244    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.count                                                              thrpt    5        27.000                 counts
[info] ArrayOfCharsBenchmark.writeCirce:·gc.time                                                               thrpt    5        30.000                     ms
[info] ArrayOfCharsBenchmark.writeJacksonScala                                                                 thrpt    5   1150970.969 ±   133526.362   ops/s
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                                  thrpt    5       672.661 ±       77.999  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                             thrpt    5       920.000 ±        0.001    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                            thrpt    5       672.644 ±        0.068  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                       thrpt    5       920.651 ±      107.903    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                     thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                thrpt    5         1.129 ±        9.724    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.count                                                       thrpt    5        10.000                 counts
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.time                                                        thrpt    5        40.000                     ms
[info] ArrayOfCharsBenchmark.writeJsoniterScala                                                                thrpt    5   2992351.940 ±   188716.435   ops/s
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                 thrpt    5      1019.040 ±       63.958  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                            thrpt    5       536.000 ±        0.001    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.014 ±        0.075  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         0.008 ±        0.040    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                           thrpt    5      1015.559 ±       20.328  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                      thrpt    5       534.315 ±       43.462    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.932 ±        6.688  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                               thrpt    5         0.487 ±        3.502    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.count                                                      thrpt    5        15.000                 counts
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.time                                                       thrpt    5        30.000                     ms
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc                                                        thrpt    5   3106848.625 ±    10189.218   ops/s
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                         thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                    thrpt    5        ≈ 10⁻⁴                   B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                              thrpt    5           ≈ 0                 counts
[info] ArrayOfCharsBenchmark.writePlayJson                                                                     thrpt    5    279927.009 ±     7418.104   ops/s
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate                                                      thrpt    5      2283.536 ±       61.339  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                 thrpt    5     12840.001 ±        0.001    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                          thrpt    5         0.009 ±        0.057  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     thrpt    5         0.053 ±        0.318    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                thrpt    5      2246.418 ±      717.206  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                           thrpt    5     12636.212 ±     4288.380    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.count                                                           thrpt    5        33.000                 counts
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.time                                                            thrpt    5        28.000                     ms
[info] ArrayOfDoublesBenchmark.readCirce                                                                       thrpt    5     25599.685 ±      695.147   ops/s
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate                                                        thrpt    5      1499.099 ±       40.369  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm                                                   thrpt    5     92168.017 ±        0.009    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                            thrpt    5         0.031 ±        0.232  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       thrpt    5         1.940 ±       14.305    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                  thrpt    5      1494.976 ±      726.860  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                             thrpt    5     91882.976 ±    43354.029    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                           thrpt    5         0.666 ±        5.737  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                      thrpt    5        41.116 ±      354.019    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.count                                                             thrpt    5        22.000                 counts
[info] ArrayOfDoublesBenchmark.readCirce:·gc.time                                                              thrpt    5        28.000                     ms
[info] ArrayOfDoublesBenchmark.readDslJsonJava                                                                 thrpt    5     92744.839 ±     3757.775   ops/s
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate                                                  thrpt    5       835.385 ±       34.106  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                             thrpt    5     14176.004 ±        0.001    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'                      thrpt    5         0.094 ±        0.805  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 thrpt    5         1.568 ±       13.504    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                            thrpt    5       802.839 ±      696.396  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                       thrpt    5     13635.532 ±    12076.428    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space                                     thrpt    5         1.599 ±        6.437  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                thrpt    5        27.170 ±      110.166    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.count                                                       thrpt    5        12.000                 counts
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.time                                                        thrpt    5        53.000                     ms
[info] ArrayOfDoublesBenchmark.readJacksonScala                                                                thrpt    5     59618.075 ±     4846.868   ops/s
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate                                                 thrpt    5       985.046 ±       80.295  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                            thrpt    5     26008.007 ±        0.002    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.023 ±        0.120  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         0.610 ±        3.218    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                           thrpt    5      1014.629 ±       23.666  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                      thrpt    5     26797.641 ±     2034.231    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                               thrpt    5        21.886 ±      188.442    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.count                                                      thrpt    5        15.000                 counts
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.time                                                       thrpt    5        39.000                     ms
[info] ArrayOfDoublesBenchmark.readJsoniterScala                                                               thrpt    5     68553.216 ±      965.657   ops/s
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate                                                thrpt    5       441.826 ±        6.103  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                           thrpt    5     10144.006 ±        0.001    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                          thrpt    5       471.870 ±      710.939  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                     thrpt    5     10844.024 ±    16465.655    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count                                                     thrpt    5         7.000                 counts
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time                                                      thrpt    5        20.000                     ms
[info] ArrayOfDoublesBenchmark.readPlayJson                                                                    thrpt    5     32712.175 ±     2609.310   ops/s
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate                                                     thrpt    5      1709.124 ±      136.739  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                thrpt    5     82232.014 ±        0.006    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                         thrpt    5         0.026 ±        0.152  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    thrpt    5         1.250 ±        7.433    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                               thrpt    5      1699.520 ±       20.044  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                          thrpt    5     81796.421 ±     6201.738    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                        thrpt    5         0.799 ±        6.884  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                   thrpt    5        38.973 ±      335.572    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.count                                                          thrpt    5        25.000                 counts
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.time                                                           thrpt    5        32.000                     ms
[info] ArrayOfDoublesBenchmark.writeCirce                                                                      thrpt    5     38062.808 ±      567.677   ops/s
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate                                                       thrpt    5       426.350 ±        6.384  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm                                                  thrpt    5     17631.795 ±        1.857    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                 thrpt    5       404.423 ±      580.427  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                            thrpt    5     16731.545 ±    24127.714    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.count                                                            thrpt    5         6.000                 counts
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.time                                                             thrpt    5        20.000                     ms
[info] ArrayOfDoublesBenchmark.writeJacksonScala                                                               thrpt    5     40952.572 ±      284.409   ops/s
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate                                                thrpt    5       369.846 ±        2.608  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                           thrpt    5     14216.010 ±        0.001    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                          thrpt    5       403.598 ±      579.171  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                     thrpt    5     15520.535 ±    22400.527    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count                                                     thrpt    5         6.000                 counts
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time                                                      thrpt    5        23.000                     ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScala                                                              thrpt    5     44500.565 ±      358.653   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate                                               thrpt    5       391.070 ±        3.047  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                          thrpt    5     13832.009 ±        0.001    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                         thrpt    5       403.905 ±      579.978  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                    thrpt    5     14291.047 ±    20611.269    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                  thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                             thrpt    5         4.708 ±       40.540    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count                                                    thrpt    5         6.000                 counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time                                                     thrpt    5        18.000                     ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc                                                      thrpt    5     43991.019 ±      654.650   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                       thrpt    5       336.300 ±        5.016  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                  thrpt    5     12032.009 ±        0.001    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                                 thrpt    5       336.512 ±        1.078  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                            thrpt    5     12039.744 ±      166.976    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space                          thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm                     thrpt    5         4.791 ±       41.253    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                            thrpt    5         5.000                 counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                             thrpt    5        14.000                     ms
[info] ArrayOfDurationsBenchmark.readCirce                                                                     thrpt    5     18821.930 ±      456.093   ops/s
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate                                                      thrpt    5       705.710 ±       17.085  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm                                                 thrpt    5     59016.027 ±        0.034    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                thrpt    5       741.975 ±      581.911  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                           thrpt    5     62097.801 ±    50091.132    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                         thrpt    5         1.066 ±        5.000  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                    thrpt    5        88.937 ±      416.406    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.count                                                           thrpt    5        11.000                 counts
[info] ArrayOfDurationsBenchmark.readCirce:·gc.time                                                            thrpt    5        34.000                     ms
[info] ArrayOfDurationsBenchmark.readJacksonScala                                                              thrpt    5     18705.381 ±      260.355   ops/s
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate                                               thrpt    5       530.929 ±        7.721  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          thrpt    5     44674.965 ±       39.883    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                         thrpt    5       470.900 ±      709.239  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                    thrpt    5     39654.709 ±    60109.097    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.count                                                    thrpt    5         7.000                 counts
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.time                                                     thrpt    5        27.000                     ms
[info] ArrayOfDurationsBenchmark.readJsoniterScala                                                             thrpt    5     78686.975 ±     2286.631   ops/s
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate                                              thrpt    5       204.754 ±        5.877  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         thrpt    5      4096.005 ±        0.001    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                        thrpt    5       202.748 ±      712.690  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                   thrpt    5      4072.770 ±    14317.086    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count                                                   thrpt    5         3.000                 counts
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time                                                    thrpt    5         8.000                     ms
[info] ArrayOfDurationsBenchmark.readPlayJson                                                                  thrpt    5     15961.956 ±      585.996   ops/s
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate                                                   thrpt    5      1034.934 ±       37.206  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm                                              thrpt    5    102048.108 ±        0.687    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                       thrpt    5         0.023 ±        0.137  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  thrpt    5         2.268 ±       13.509    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                             thrpt    5      1014.590 ±       23.334  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                        thrpt    5    100044.887 ±     1643.230    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                      thrpt    5         0.933 ±        6.689  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                 thrpt    5        91.969 ±      658.902    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.count                                                        thrpt    5        15.000                 counts
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.time                                                         thrpt    5        38.000                     ms
[info] ArrayOfDurationsBenchmark.writeCirce                                                                    thrpt    5     58689.360 ±      942.827   ops/s
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate                                                     thrpt    5       889.322 ±       14.510  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm                                                thrpt    5     23848.007 ±        0.001    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                         thrpt    5         0.023 ±        0.165  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    thrpt    5         0.611 ±        4.405    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                               thrpt    5       879.234 ±      715.163  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                          thrpt    5     23580.696 ±    19240.610    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                        thrpt    5         0.800 ±        5.562  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                   thrpt    5        21.442 ±      148.964    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.count                                                          thrpt    5        13.000                 counts
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.time                                                           thrpt    5        34.000                     ms
[info] ArrayOfDurationsBenchmark.writeJacksonScala                                                             thrpt    5     90165.327 ±     3395.693   ops/s
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate                                              thrpt    5      1069.215 ±       40.635  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         thrpt    5     18664.005 ±        0.001    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                  thrpt    5         0.023 ±        0.149  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm             thrpt    5         0.402 ±        2.580    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                        thrpt    5      1015.286 ±       24.502  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                   thrpt    5     17724.102 ±      835.468    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                 thrpt    5         1.066 ±        6.440  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                            thrpt    5        18.514 ±      111.614    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.count                                                   thrpt    5        15.000                 counts
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.time                                                    thrpt    5        35.000                     ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScala                                                            thrpt    5    285189.528 ±     5284.138   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate                                             thrpt    5       452.223 ±        8.462  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        thrpt    5      2496.001 ±        0.001    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                       thrpt    5       471.281 ±      710.259  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                  thrpt    5      2601.780 ±     3928.104    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                thrpt    5         0.266 ±        1.405  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                           thrpt    5         1.477 ±        7.790    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count                                                  thrpt    5         7.000                 counts
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time                                                   thrpt    5        21.000                     ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc                                                    thrpt    5    331187.318 ±      761.505   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          thrpt    5           ≈ 0                 counts
[info] ArrayOfDurationsBenchmark.writePlayJson                                                                 thrpt    5     77881.829 ±     3902.831   ops/s
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate                                                  thrpt    5      1062.463 ±       53.288  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm                                             thrpt    5     21472.005 ±        0.001    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                      thrpt    5         0.030 ±        0.169  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 thrpt    5         0.603 ±        3.405    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                            thrpt    5      1082.780 ±      600.270  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                       thrpt    5     21863.245 ±    11267.697    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                     thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                thrpt    5        16.175 ±      139.274    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.count                                                       thrpt    5        16.000                 counts
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.time                                                        thrpt    5        37.000                     ms
[info] ArrayOfEnumsBenchmark.readCirce                                                                         thrpt    5     27579.510 ±     1594.426   ops/s
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate                                                          thrpt    5       572.953 ±       33.037  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                                     thrpt    5     32700.022 ±       26.684    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                    thrpt    5       606.630 ±      580.254  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                               thrpt    5     34671.167 ±    33737.871    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.count                                                               thrpt    5         9.000                 counts
[info] ArrayOfEnumsBenchmark.readCirce:·gc.time                                                                thrpt    5        30.000                     ms
[info] ArrayOfEnumsBenchmark.readJacksonScala                                                                  thrpt    5     28170.769 ±      331.062   ops/s
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                                   thrpt    5       370.260 ±        4.358  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                              thrpt    5     20687.783 ±        2.007    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                             thrpt    5       403.490 ±      579.397  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                        thrpt    5     22553.529 ±    32546.155    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                      thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                 thrpt    5         7.457 ±       64.210    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.count                                                        thrpt    5         6.000                 counts
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.time                                                         thrpt    5        24.000                     ms
[info] ArrayOfEnumsBenchmark.readJsoniterScala                                                                 thrpt    5    119886.333 ±     5347.605   ops/s
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                                                  thrpt    5       467.934 ±       20.829  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                             thrpt    5      6144.004 ±        0.001    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                            thrpt    5       471.810 ±      710.775  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                       thrpt    5      6215.054 ±     9609.776    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count                                                       thrpt    5         7.000                 counts
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time                                                        thrpt    5        20.000                     ms
[info] ArrayOfEnumsBenchmark.readPlayJson                                                                      thrpt    5     21635.236 ±      826.624   ops/s
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate                                                       thrpt    5      1194.506 ±       45.312  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                  thrpt    5     86904.022 ±        0.016    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                           thrpt    5         0.014 ±        0.120  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      thrpt    5         1.013 ±        8.719    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                 thrpt    5      1218.869 ±      719.795  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                            thrpt    5     88692.373 ±    52734.349    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                          thrpt    5         0.932 ±        8.028  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                     thrpt    5        68.210 ±      587.305    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.count                                                            thrpt    5        18.000                 counts
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.time                                                             thrpt    5        43.000                     ms
[info] ArrayOfEnumsBenchmark.writeCirce                                                                        thrpt    5    178425.054 ±     5390.551   ops/s
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate                                                         thrpt    5       622.988 ±       18.972  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                                    thrpt    5      5496.002 ±        0.001    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                   thrpt    5       606.615 ±      580.342  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                              thrpt    5      5357.072 ±     5189.592    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.count                                                              thrpt    5         9.000                 counts
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.time                                                               thrpt    5        29.000                     ms
[info] ArrayOfEnumsBenchmark.writeJacksonScala                                                                 thrpt    5    299472.748 ±    10268.334   ops/s
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                                                  thrpt    5       302.895 ±       10.253  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                             thrpt    5      1592.001 ±        0.001    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                            thrpt    5       269.088 ±      579.232  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                       thrpt    5      1417.207 ±     3051.105    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.count                                                       thrpt    5         4.000                 counts
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.time                                                        thrpt    5        17.000                     ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScala                                                                thrpt    5    468462.233 ±    37883.710   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                 thrpt    5       359.521 ±       29.027  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                            thrpt    5      1208.001 ±        0.001    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                           thrpt    5       336.615 ±        1.403  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                      thrpt    5      1131.435 ±       91.509    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.266 ±        1.405  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                               thrpt    5         0.886 ±        4.674    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count                                                      thrpt    5         5.000                 counts
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time                                                       thrpt    5        15.000                     ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc                                                        thrpt    5    505272.793 ±    34833.892   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                         thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                    thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                              thrpt    5           ≈ 0                 counts
[info] ArrayOfEnumsBenchmark.writePlayJson                                                                     thrpt    5    280247.054 ±    17152.559   ops/s
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate                                                      thrpt    5       771.987 ±       47.004  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                 thrpt    5      4336.002 ±        0.001    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                          thrpt    5         0.006 ±        0.055  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     thrpt    5         0.036 ±        0.311    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                thrpt    5       741.165 ±      573.678  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                           thrpt    5      4158.659 ±     3075.587    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                         thrpt    5         1.199 ±        8.957  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                    thrpt    5         6.659 ±       49.620    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.count                                                           thrpt    5        11.000                 counts
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.time                                                            thrpt    5        42.000                     ms
[info] ArrayOfFloatsBenchmark.readCirce                                                                        thrpt    5     35794.309 ±     2225.001   ops/s
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate                                                         thrpt    5      1596.096 ±       99.220  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm                                                    thrpt    5     70176.012 ±        0.007    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                             thrpt    5         0.024 ±        0.124  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        thrpt    5         1.088 ±        5.542    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                   thrpt    5      1563.878 ±      728.117  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                              thrpt    5     68723.847 ±    30381.456    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                            thrpt    5         0.666 ±        5.736  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                       thrpt    5        29.837 ±      256.909    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.count                                                              thrpt    5        23.000                 counts
[info] ArrayOfFloatsBenchmark.readCirce:·gc.time                                                               thrpt    5        25.000                     ms
[info] ArrayOfFloatsBenchmark.readDslJsonJava                                                                  thrpt    5    291954.322 ±    26761.018   ops/s
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate                                                   thrpt    5       302.741 ±       27.625  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                              thrpt    5      1632.001 ±        0.001    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                             thrpt    5       333.724 ±        0.247  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                        thrpt    5      1799.866 ±      170.577    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.count                                                        thrpt    5         5.000                 counts
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.time                                                         thrpt    5        24.000                     ms
[info] ArrayOfFloatsBenchmark.readJacksonScala                                                                 thrpt    5     96613.483 ±     8417.983   ops/s
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate                                                  thrpt    5      1067.504 ±       92.908  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                             thrpt    5     17392.004 ±        0.001    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                      thrpt    5         0.024 ±        0.144  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 thrpt    5         0.382 ±        2.313    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                            thrpt    5      1015.473 ±       23.227  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                       thrpt    5     16549.519 ±     1121.150    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                     thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                thrpt    5        12.836 ±      110.526    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.count                                                       thrpt    5        15.000                 counts
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.time                                                        thrpt    5        37.000                     ms
[info] ArrayOfFloatsBenchmark.readJsoniterScala                                                                thrpt    5    149882.038 ±     2516.334   ops/s
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate                                                 thrpt    5        97.504 ±        1.652  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                            thrpt    5      1024.003 ±        0.001    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                           thrpt    5       135.601 ±      715.008  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                      thrpt    5      1430.233 ±     7541.671    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count                                                      thrpt    5         2.000                 counts
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time                                                       thrpt    5         5.000                     ms
[info] ArrayOfFloatsBenchmark.readPlayJson                                                                     thrpt    5     37159.946 ±      624.000   ops/s
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate                                                      thrpt    5      1983.560 ±       34.214  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                 thrpt    5     84016.012 ±        0.005    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                          thrpt    5         0.008 ±        0.023  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     thrpt    5         0.350 ±        0.971    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                thrpt    5      1973.353 ±      593.413  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                           thrpt    5     83571.351 ±    24410.716    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                         thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                    thrpt    5        34.011 ±      292.842    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.count                                                           thrpt    5        29.000                 counts
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.time                                                            thrpt    5        30.000                     ms
[info] ArrayOfFloatsBenchmark.writeCirce                                                                       thrpt    5     88219.805 ±     4141.443   ops/s
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate                                                        thrpt    5       426.002 ±       19.922  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm                                                   thrpt    5      7600.005 ±        0.001    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                  thrpt    5       404.467 ±      580.319  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                             thrpt    5      7223.548 ±    10491.218    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.count                                                             thrpt    5         6.000                 counts
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.time                                                              thrpt    5        22.000                     ms
[info] ArrayOfFloatsBenchmark.writeDslJsonJava                                                                 thrpt    5    113181.211 ±     7058.317   ops/s
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                  thrpt    5       346.297 ±       21.591  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                             thrpt    5      4816.004 ±        0.001    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                            thrpt    5       333.710 ±        0.099  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                       thrpt    5      4641.946 ±      294.279    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.count                                                       thrpt    5         5.000                 counts
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.time                                                        thrpt    5        23.000                     ms
[info] ArrayOfFloatsBenchmark.writeJacksonScala                                                                thrpt    5     98877.244 ±     3079.913   ops/s
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate                                                 thrpt    5       326.646 ±       10.112  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                            thrpt    5      5200.004 ±        0.001    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                           thrpt    5       336.353 ±        0.166  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                      thrpt    5      5354.810 ±      166.606    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count                                                      thrpt    5         5.000                 counts
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time                                                       thrpt    5        20.000                     ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScala                                                               thrpt    5    115457.363 ±     2315.692   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                thrpt    5       353.255 ±        7.075  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                           thrpt    5      4816.004 ±        0.001    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                          thrpt    5       336.627 ±        1.429  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                     thrpt    5      4589.395 ±       89.509    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                              thrpt    5         1.810 ±       15.585    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count                                                     thrpt    5         5.000                 counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time                                                      thrpt    5        15.000                     ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc                                                       thrpt    5    116093.290 ±     1077.439   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                        thrpt    5       263.796 ±        2.453  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                   thrpt    5      3576.004 ±        0.001    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                                  thrpt    5       269.278 ±      579.642  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                             thrpt    5      3652.858 ±     7863.114    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                             thrpt    5         4.000                 counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                              thrpt    5        11.000                     ms
[info] ArrayOfInstantsBenchmark.readCirce                                                                      thrpt    5      8189.926 ±      518.337   ops/s
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate                                                       thrpt    5      1355.758 ±       86.628  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm                                                  thrpt    5    260528.051 ±        0.007    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                           thrpt    5         0.015 ±        0.107  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      thrpt    5         2.911 ±       20.568    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                 thrpt    5      1357.670 ±       23.454  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                            thrpt    5    260938.397 ±    12475.731    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                          thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                     thrpt    5       128.345 ±     1105.086    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.count                                                            thrpt    5        20.000                 counts
[info] ArrayOfInstantsBenchmark.readCirce:·gc.time                                                             thrpt    5        31.000                     ms
[info] ArrayOfInstantsBenchmark.readJacksonScala                                                               thrpt    5      8574.205 ±      588.036   ops/s
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate                                                thrpt    5      1336.094 ±       91.771  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                           thrpt    5    245216.049 ±        0.007    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.021 ±        0.172  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         3.957 ±       32.071    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                          thrpt    5      1356.746 ±       28.083  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                     thrpt    5    249068.301 ±    17523.947    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.933 ±        6.690  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                              thrpt    5       173.058 ±     1244.426    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.count                                                     thrpt    5        20.000                 counts
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.time                                                      thrpt    5        38.000                     ms
[info] ArrayOfInstantsBenchmark.readJsoniterScala                                                              thrpt    5     80297.728 ±     1075.410   ops/s
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate                                               thrpt    5       208.988 ±        2.840  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                          thrpt    5      4096.005 ±        0.001    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                         thrpt    5       202.759 ±      712.729  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                    thrpt    5      3983.329 ±    14002.099    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count                                                    thrpt    5         3.000                 counts
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time                                                     thrpt    5         8.000                     ms
[info] ArrayOfInstantsBenchmark.readPlayJson                                                                   thrpt    5      4753.485 ±      247.835   ops/s
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate                                                    thrpt    5      1261.375 ±       65.825  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm                                               thrpt    5    417680.088 ±        0.012    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                        thrpt    5         0.022 ±        0.124  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   thrpt    5         7.331 ±       40.733    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                              thrpt    5      1287.627 ±      574.695  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                         thrpt    5    426173.576 ±   182451.418    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                       thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                  thrpt    5       260.948 ±     2246.841    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.count                                                         thrpt    5        19.000                 counts
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.time                                                          thrpt    5        39.000                     ms
[info] ArrayOfInstantsBenchmark.writeCirce                                                                     thrpt    5     23769.291 ±     2106.759   ops/s
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate                                                      thrpt    5      1231.406 ±      108.843  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm                                                 thrpt    5     81537.321 ±       51.725    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                          thrpt    5         0.017 ±        0.130  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     thrpt    5         1.091 ±        8.422    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                thrpt    5      1220.696 ±      719.510  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                           thrpt    5     80753.560 ±    44924.399    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                         thrpt    5         0.666 ±        5.736  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                    thrpt    5        44.980 ±      387.292    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.count                                                           thrpt    5        18.000                 counts
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.time                                                            thrpt    5        33.000                     ms
[info] ArrayOfInstantsBenchmark.writeJacksonScala                                                              thrpt    5     24468.435 ±     1452.712   ops/s
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate                                               thrpt    5      1243.460 ±       73.693  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                          thrpt    5     79984.018 ±        0.009    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                   thrpt    5         0.022 ±        0.144  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm              thrpt    5         1.405 ±        9.147    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                         thrpt    5      1220.445 ±      716.652  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                    thrpt    5     78629.900 ±    49561.817    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                  thrpt    5         0.932 ±        8.029  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                             thrpt    5        59.354 ±      511.057    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.count                                                    thrpt    5        18.000                 counts
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.time                                                     thrpt    5        36.000                     ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScala                                                             thrpt    5    336947.799 ±    12277.283   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate                                              thrpt    5       743.207 ±       27.048  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                         thrpt    5      3472.001 ±        0.001    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                  thrpt    5         0.020 ±        0.168  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm             thrpt    5         0.091 ±        0.782    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                        thrpt    5       741.154 ±      578.185  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                   thrpt    5      3462.151 ±     2688.472    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                 thrpt    5         0.932 ±        5.318  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                            thrpt    5         4.353 ±       24.737    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count                                                   thrpt    5        11.000                 counts
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time                                                    thrpt    5        31.000                     ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc                                                     thrpt    5    372536.612 ±     1198.980   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                      thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                 thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                           thrpt    5           ≈ 0                 counts
[info] ArrayOfInstantsBenchmark.writePlayJson                                                                  thrpt    5     25832.122 ±     2094.523   ops/s
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate                                                   thrpt    5      1358.737 ±      110.568  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm                                              thrpt    5     82792.017 ±        0.009    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                       thrpt    5         0.028 ±        0.163  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  thrpt    5         1.677 ±        9.992    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                             thrpt    5      1356.592 ±       27.849  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                        thrpt    5     82684.077 ±     5200.002    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                      thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                 thrpt    5        48.968 ±      421.632    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.count                                                        thrpt    5        20.000                 counts
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.time                                                         thrpt    5        36.000                     ms
[info] ArrayOfIntsBenchmark.readCirce                                                                          thrpt    5    132166.818 ±     1558.630   ops/s
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate                                                           thrpt    5      2151.191 ±       24.392  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                                      thrpt    5     25616.003 ±        0.001    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                               thrpt    5         0.017 ±        0.106  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          thrpt    5         0.202 ±        1.260    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                     thrpt    5      2178.630 ±      719.012  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                thrpt    5     25942.779 ±     8558.727    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.count                                                                thrpt    5        32.000                 counts
[info] ArrayOfIntsBenchmark.readCirce:·gc.time                                                                 thrpt    5        24.000                     ms
[info] ArrayOfIntsBenchmark.readDslJsonJava                                                                    thrpt    5    451777.463 ±     8125.950   ops/s
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate                                                     thrpt    5       468.399 ±        8.491  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                thrpt    5      1632.001 ±        0.001    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                               thrpt    5       467.020 ±      704.196  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                          thrpt    5      1629.048 ±     2479.355    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space                                        thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                   thrpt    5         0.463 ±        3.985    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.count                                                          thrpt    5         7.000                 counts
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.time                                                           thrpt    5        33.000                     ms
[info] ArrayOfIntsBenchmark.readJacksonScala                                                                   thrpt    5    273496.521 ±    25709.748   ops/s
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                                    thrpt    5       391.995 ±       36.809  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                               thrpt    5      2256.002 ±        0.001    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                              thrpt    5       336.369 ±        0.209  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                         thrpt    5      1936.785 ±      181.828    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.count                                                         thrpt    5         5.000                 counts
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.time                                                          thrpt    5        20.000                     ms
[info] ArrayOfIntsBenchmark.readJsoniterScala                                                                  thrpt    5    602542.821 ±    17576.857   ops/s
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                                   thrpt    5       392.038 ±       11.470  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                              thrpt    5      1024.001 ±        0.001    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                             thrpt    5       404.480 ±      580.354  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                        thrpt    5      1056.962 ±     1524.172    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.count                                                        thrpt    5         6.000                 counts
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.time                                                         thrpt    5        17.000                     ms
[info] ArrayOfIntsBenchmark.readPlayJson                                                                       thrpt    5     67947.798 ±     4166.444   ops/s
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                                        thrpt    5      2975.246 ±      182.458  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                   thrpt    5     68920.006 ±        0.001    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                            thrpt    5         0.008 ±        0.014  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       thrpt    5         0.192 ±        0.324    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                  thrpt    5      2995.208 ±      585.824  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                             thrpt    5     69383.850 ±    13137.842    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.count                                                             thrpt    5        44.000                 counts
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.time                                                              thrpt    5        36.000                     ms
[info] ArrayOfIntsBenchmark.writeCirce                                                                         thrpt    5    243101.654 ±    12210.454   ops/s
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate                                                          thrpt    5      1444.515 ±       72.794  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                                     thrpt    5      9352.002 ±        0.001    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                              thrpt    5         0.026 ±        0.217  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         thrpt    5         0.170 ±        1.412    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                    thrpt    5      1494.358 ±      701.009  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                               thrpt    5      9672.831 ±     4429.951    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                             thrpt    5         0.666 ±        5.736  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                        thrpt    5         4.277 ±       36.830    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.count                                                               thrpt    5        22.000                 counts
[info] ArrayOfIntsBenchmark.writeCirce:·gc.time                                                                thrpt    5        29.000                     ms
[info] ArrayOfIntsBenchmark.writeDslJsonJava                                                                   thrpt    5    909809.291 ±    44574.189   ops/s
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                    thrpt    5       494.759 ±       24.268  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                               thrpt    5       856.000 ±        0.001    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                              thrpt    5       467.163 ±      703.802  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                         thrpt    5       808.315 ±     1217.538    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.count                                                         thrpt    5         7.000                 counts
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.time                                                          thrpt    5        32.000                     ms
[info] ArrayOfIntsBenchmark.writeJacksonScala                                                                  thrpt    5    820166.562 ±    10054.173   ops/s
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                                   thrpt    5       646.131 ±        7.942  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                              thrpt    5      1240.001 ±        0.001    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                             thrpt    5       605.488 ±      579.302  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                        thrpt    5      1162.078 ±     1112.726    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.count                                                        thrpt    5         9.000                 counts
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.time                                                         thrpt    5        37.000                     ms
[info] ArrayOfIntsBenchmark.writeJsoniterScala                                                                 thrpt    5   1031074.587 ±    13869.505   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                  thrpt    5       560.795 ±        7.830  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                             thrpt    5       856.000 ±        0.001    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                            thrpt    5       606.482 ±      580.098  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                       thrpt    5       925.957 ±      888.293    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                     thrpt    5         0.266 ±        1.405  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                thrpt    5         0.408 ±        2.149    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count                                                       thrpt    5         9.000                 counts
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time                                                        thrpt    5        28.000                     ms
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc                                                         thrpt    5   1027482.217 ±     4684.728   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                          thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                     thrpt    5        ≈ 10⁻³                   B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                               thrpt    5           ≈ 0                 counts
[info] ArrayOfIntsBenchmark.writePlayJson                                                                      thrpt    5     29695.848 ±     1406.671   ops/s
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                                       thrpt    5      1551.008 ±       72.130  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                  thrpt    5     82203.703 ±       26.823    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                           thrpt    5         0.042 ±        0.350  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      thrpt    5         2.213 ±       18.410    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                 thrpt    5      1494.479 ±      729.287  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                            thrpt    5     79197.662 ±    38067.685    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                          thrpt    5         0.800 ±        6.885  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                     thrpt    5        43.233 ±      372.248    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.count                                                            thrpt    5        22.000                 counts
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.time                                                             thrpt    5        31.000                     ms
[info] ArrayOfJavaEnumsBenchmark.readCirce                                                                     thrpt    5    123273.631 ±     4518.748   ops/s
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate                                                      thrpt    5      1519.290 ±       56.104  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                                 thrpt    5     19400.003 ±        0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                          thrpt    5         0.022 ±        0.178  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     thrpt    5         0.278 ±        2.252    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                thrpt    5      1494.872 ±      727.966  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                           thrpt    5     19077.486 ±     8829.748    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                         thrpt    5         0.666 ±        5.734  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                    thrpt    5         8.630 ±       74.311    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.count                                                           thrpt    5        22.000                 counts
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.time                                                            thrpt    5        28.000                     ms
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala                                                              thrpt    5    160623.225 ±    14218.562   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                               thrpt    5       857.333 ±       76.482  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          thrpt    5      8400.003 ±        0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                   thrpt    5         0.031 ±        0.172  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm              thrpt    5         0.305 ±        1.720    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                         thrpt    5       877.461 ±      713.073  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                    thrpt    5      8570.773 ±     6370.594    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                  thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                             thrpt    5         8.023 ±       69.082    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count                                                    thrpt    5        13.000                 counts
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time                                                     thrpt    5        41.000                     ms
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala                                                             thrpt    5    257458.036 ±     2529.885   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                                              thrpt    5       669.989 ±        6.640  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         thrpt    5      4096.002 ±        0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                        thrpt    5       674.054 ±        0.336  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                   thrpt    5      4120.873 ±       40.125    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count                                                   thrpt    5        10.000                 counts
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time                                                    thrpt    5        29.000                     ms
[info] ArrayOfJavaEnumsBenchmark.readPlayJson                                                                  thrpt    5     61800.443 ±     3397.773   ops/s
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate                                                   thrpt    5      2609.316 ±      143.185  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                                              thrpt    5     66448.007 ±        0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                       thrpt    5         0.006 ±        0.007  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  thrpt    5         0.159 ±        0.178    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                             thrpt    5      2587.115 ±      718.303  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                        thrpt    5     65915.635 ±    20034.863    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count                                                        thrpt    5        38.000                 counts
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time                                                         thrpt    5        31.000                     ms
[info] ArrayOfJavaEnumsBenchmark.writeCirce                                                                    thrpt    5    176970.597 ±     7492.702   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate                                                     thrpt    5       617.921 ±       26.247  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                                thrpt    5      5496.002 ±        0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                               thrpt    5       606.643 ±      580.463  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                          thrpt    5      5392.605 ±     5122.440    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.count                                                          thrpt    5         9.000                 counts
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.time                                                           thrpt    5        30.000                     ms
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala                                                             thrpt    5    541562.272 ±    14364.443   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                                              thrpt    5       547.730 ±       14.622  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         thrpt    5      1592.001 ±        0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                        thrpt    5       538.155 ±      709.278  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                   thrpt    5      1565.738 ±     2080.561    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count                                                   thrpt    5         8.000                 counts
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time                                                    thrpt    5        33.000                     ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala                                                            thrpt    5    465791.698 ±    28198.152   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                                             thrpt    5       357.477 ±       21.768  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        thrpt    5      1208.001 ±        0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                       thrpt    5       336.355 ±        0.187  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                  thrpt    5      1136.848 ±       67.815    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                           thrpt    5         0.452 ±        3.895    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count                                                  thrpt    5         5.000                 counts
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time                                                   thrpt    5        14.000                     ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc                                                    thrpt    5    492248.403 ±     7118.575   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          thrpt    5           ≈ 0                 counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson                                                                 thrpt    5    273816.143 ±     2702.727   ops/s
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate                                                  thrpt    5       751.797 ±        7.404  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                                             thrpt    5      4320.002 ±        0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                            thrpt    5       740.348 ±      573.093  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                       thrpt    5      4254.405 ±     3298.455    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                     thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                thrpt    5         4.596 ±       39.575    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count                                                       thrpt    5        11.000                 counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time                                                        thrpt    5        46.000                     ms
[info] ArrayOfLocalDateTimesBenchmark.readCirce                                                                thrpt    5      8714.230 ±      498.085   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate                                                 thrpt    5      1114.180 ±       64.103  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                            thrpt    5    201256.056 ±        0.058    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.004 ±        0.016  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         0.718 ±        2.838    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                           thrpt    5      1151.953 ±      714.168  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                      thrpt    5    208062.766 ±   127822.074    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.799 ±        5.560  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                               thrpt    5       143.370 ±      995.633    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count                                                      thrpt    5        17.000                 counts
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time                                                       thrpt    5        33.000                     ms
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala                                                         thrpt    5      8756.658 ±      410.905   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                          thrpt    5      1037.841 ±       48.629  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     thrpt    5    186547.414 ±       28.979    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'              thrpt    5         0.004 ±        0.015  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm         thrpt    5         0.700 ±        2.811    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                    thrpt    5      1082.308 ±      601.101  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                               thrpt    5    194405.227 ±   101964.556    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                             thrpt    5         1.066 ±        7.823  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                        thrpt    5       194.431 ±     1432.032    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count                                               thrpt    5        16.000                 counts
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time                                                thrpt    5        39.000                     ms
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala                                                        thrpt    5    144281.964 ±    11438.330   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                         thrpt    5       938.666 ±       74.139  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    thrpt    5     10240.003 ±        0.001    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'             thrpt    5         0.008 ±        0.070  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm        thrpt    5         0.090 ±        0.775    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                   thrpt    5       948.786 ±      588.781  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                              thrpt    5     10353.541 ±     6481.227    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                            thrpt    5         0.533 ±        4.588  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                       thrpt    5         5.821 ±       50.117    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count                                              thrpt    5        14.000                 counts
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time                                               thrpt    5        28.000                     ms
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson                                                             thrpt    5      6687.828 ±      491.556   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                              thrpt    5      1245.378 ±       91.477  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                         thrpt    5    293096.064 ±        0.013    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                  thrpt    5         0.017 ±        0.143  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm             thrpt    5         3.976 ±       33.566    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                        thrpt    5      1220.379 ±      715.183  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                   thrpt    5    287251.897 ±   168480.719    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                 thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                            thrpt    5       187.385 ±     1613.443    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count                                                   thrpt    5        18.000                 counts
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time                                                    thrpt    5        35.000                     ms
[info] ArrayOfLocalDateTimesBenchmark.writeCirce                                                               thrpt    5     21774.550 ±     1086.116   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate                                                thrpt    5       914.339 ±       45.352  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                           thrpt    5     66089.394 ±       40.873    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.014 ±        0.081  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         0.973 ±        5.847    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                          thrpt    5       878.980 ±      708.256  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                     thrpt    5     63470.176 ±    49731.975    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                              thrpt    5        47.906 ±      412.489    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count                                                     thrpt    5        13.000                 counts
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time                                                      thrpt    5        33.000                     ms
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala                                                        thrpt    5     23757.423 ±     1251.489   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                         thrpt    5       914.037 ±       48.292  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                    thrpt    5     60552.018 ±        0.008    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'             thrpt    5         0.038 ±        0.325  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm        thrpt    5         2.522 ±       21.671    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                   thrpt    5       878.596 ±      709.484  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                              thrpt    5     58301.249 ±    48925.254    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                            thrpt    5         0.799 ±        6.884  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                       thrpt    5        53.408 ±      459.859    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.count                                              thrpt    5        13.000                 counts
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.time                                               thrpt    5        46.000                     ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala                                                       thrpt    5    857546.373 ±    24999.143   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                        thrpt    5      1547.233 ±       44.892  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                   thrpt    5      2840.000 ±        0.001    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'            thrpt    5         0.029 ±        0.150  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm       thrpt    5         0.054 ±        0.275    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                  thrpt    5      1495.175 ±      726.694  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                             thrpt    5      2743.621 ±     1297.535    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                           thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                      thrpt    5         1.468 ±       12.642    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count                                             thrpt    5        22.000                 counts
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time                                              thrpt    5        25.000                     ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc                                               thrpt    5   1016950.022 ±    45910.116   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                           thrpt    5        ≈ 10⁻³                   B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                     thrpt    5           ≈ 0                 counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson                                                            thrpt    5     22726.913 ±     1521.303   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                             thrpt    5       959.062 ±       64.255  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                        thrpt    5     66422.670 ±       32.929    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.026 ±        0.221  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         1.772 ±       15.182    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                       thrpt    5      1013.865 ±       25.819  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                  thrpt    5     70229.398 ±     3220.469    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                           thrpt    5        56.365 ±      485.319    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count                                                  thrpt    5        15.000                 counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time                                                   thrpt    5        39.000                     ms
[info] ArrayOfLocalDatesBenchmark.readCirce                                                                    thrpt    5     21810.833 ±     8453.339   ops/s
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate                                                     thrpt    5      1183.725 ±      458.466  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm                                                thrpt    5     85416.031 ±        0.095    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                         thrpt    5         0.018 ±        0.107  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    thrpt    5         1.217 ±        6.983    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                               thrpt    5      1153.593 ±      697.985  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                          thrpt    5     82876.526 ±    17911.301    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                        thrpt    5         0.799 ±        5.560  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                   thrpt    5        52.254 ±      364.567    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.count                                                          thrpt    5        17.000                 counts
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.time                                                           thrpt    5        28.000                     ms
[info] ArrayOfLocalDatesBenchmark.readJacksonScala                                                             thrpt    5     25505.179 ±     1185.368   ops/s
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate                                              thrpt    5      1164.832 ±       54.045  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                         thrpt    5     71888.125 ±        0.930    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                  thrpt    5         0.029 ±        0.247  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm             thrpt    5         1.791 ±       15.421    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                        thrpt    5      1219.531 ±      719.301  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                   thrpt    5     75303.193 ±    45436.843    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                 thrpt    5         0.932 ±        6.688  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                            thrpt    5        56.755 ±      406.921    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count                                                   thrpt    5        18.000                 counts
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time                                                    thrpt    5        38.000                     ms
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala                                                            thrpt    5    265669.529 ±    10494.486   ops/s
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate                                             thrpt    5       691.341 ±       27.087  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                        thrpt    5      4096.002 ±        0.001    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                       thrpt    5       742.927 ±      581.227  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                  thrpt    5      4401.331 ±     3427.336    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                thrpt    5         0.533 ±        4.588  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                           thrpt    5         3.133 ±       26.972    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count                                                  thrpt    5        11.000                 counts
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time                                                   thrpt    5        31.000                     ms
[info] ArrayOfLocalDatesBenchmark.readPlayJson                                                                 thrpt    5     15706.719 ±      968.170   ops/s
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate                                                  thrpt    5      1565.814 ±       96.066  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm                                             thrpt    5    156904.328 ±        2.585    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                      thrpt    5         0.018 ±        0.104  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 thrpt    5         1.834 ±       10.319    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                            thrpt    5      1562.537 ±      707.660  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                       thrpt    5    156556.402 ±    69596.611    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                     thrpt    5         0.799 ±        6.884  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                thrpt    5        79.413 ±      683.766    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count                                                       thrpt    5        23.000                 counts
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time                                                        thrpt    5        32.000                     ms
[info] ArrayOfLocalDatesBenchmark.writeCirce                                                                   thrpt    5     50140.097 ±     2900.282   ops/s
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate                                                    thrpt    5      1216.155 ±       70.691  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm                                               thrpt    5     38176.008 ±        0.002    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                        thrpt    5         0.011 ±        0.095  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   thrpt    5         0.356 ±        2.951    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                              thrpt    5      1220.872 ±      720.393  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                         thrpt    5     38335.291 ±    22860.366    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                       thrpt    5         0.799 ±        5.560  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                  thrpt    5        25.268 ±      175.101    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.count                                                         thrpt    5        18.000                 counts
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.time                                                          thrpt    5        33.000                     ms
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala                                                            thrpt    5    113065.934 ±     6946.211   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate                                             thrpt    5       957.886 ±       58.681  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                        thrpt    5     13336.004 ±        0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.027 ±        0.154  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         0.374 ±        2.133    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                       thrpt    5       946.414 ±      572.232  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                  thrpt    5     13161.990 ±     7593.468    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                thrpt    5         0.932 ±        6.688  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                           thrpt    5        12.825 ±       92.004    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.count                                                  thrpt    5        14.000                 counts
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.time                                                   thrpt    5        37.000                     ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala                                                           thrpt    5   1440905.721 ±    63492.513   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate                                            thrpt    5      1545.465 ±       68.483  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                       thrpt    5      1688.000 ±        0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5         0.033 ±        0.175  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5         0.037 ±        0.193    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                      thrpt    5      1562.714 ±      706.157  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                 thrpt    5      1706.952 ±      772.302    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                               thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                          thrpt    5         0.889 ±        7.650    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count                                                 thrpt    5        23.000                 counts
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time                                                  thrpt    5        28.000                     ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc                                                   thrpt    5   1549888.096 ±    12356.885   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                    thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                               thrpt    5        ≈ 10⁻⁴                   B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                         thrpt    5           ≈ 0                 counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson                                                                thrpt    5     57994.835 ±     2675.337   ops/s
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate                                                 thrpt    5      1348.778 ±       62.237  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm                                            thrpt    5     36608.007 ±        0.002    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.040 ±        0.329  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         1.079 ±        8.828    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                           thrpt    5      1357.375 ±       26.867  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                      thrpt    5     36846.478 ±     2151.822    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                               thrpt    5        21.463 ±      184.800    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count                                                      thrpt    5        20.000                 counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time                                                       thrpt    5        32.000                     ms
[info] ArrayOfLocalTimesBenchmark.readCirce                                                                    thrpt    5     13724.390 ±      681.728   ops/s
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate                                                     thrpt    5      1224.742 ±       60.175  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm                                                thrpt    5    140456.032 ±        0.016    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                         thrpt    5         0.014 ±        0.054  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    thrpt    5         1.601 ±        6.216    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                               thrpt    5      1221.173 ±      703.832  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                          thrpt    5    140185.294 ±    84601.683    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                        thrpt    5         0.799 ±        5.562  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                   thrpt    5        93.341 ±      652.055    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.count                                                          thrpt    5        18.000                 counts
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.time                                                           thrpt    5        31.000                     ms
[info] ArrayOfLocalTimesBenchmark.readJacksonScala                                                             thrpt    5     13497.066 ±      224.083   ops/s
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate                                              thrpt    5      1090.785 ±       17.726  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                         thrpt    5    127184.266 ±        2.003    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                  thrpt    5         0.022 ±        0.177  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm             thrpt    5         2.561 ±       20.746    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                        thrpt    5      1083.744 ±      598.704  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                   thrpt    5    126331.529 ±    68498.023    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                 thrpt    5         0.800 ±        6.884  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                            thrpt    5        93.616 ±      806.061    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count                                                   thrpt    5        16.000                 counts
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time                                                    thrpt    5        37.000                     ms
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala                                                            thrpt    5    260854.000 ±    37894.896   ops/s
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                             thrpt    5       678.776 ±       98.707  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                        thrpt    5      4096.002 ±        0.001    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                       thrpt    5       675.357 ±        0.203  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                  thrpt    5      4080.179 ±      613.143    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count                                                  thrpt    5        10.000                 counts
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time                                                   thrpt    5        28.000                     ms
[info] ArrayOfLocalTimesBenchmark.readPlayJson                                                                 thrpt    5     10296.150 ±      225.490   ops/s
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate                                                  thrpt    5      1401.579 ±       30.011  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                             thrpt    5    214248.057 ±        0.145    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                      thrpt    5         0.019 ±        0.167  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 thrpt    5         2.950 ±       25.398    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                            thrpt    5      1425.559 ±      595.204  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                       thrpt    5    217896.790 ±    89941.287    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                     thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                thrpt    5       121.246 ±     1043.965    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count                                                       thrpt    5        21.000                 counts
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time                                                        thrpt    5        34.000                     ms
[info] ArrayOfLocalTimesBenchmark.writeCirce                                                                   thrpt    5     37828.527 ±     1001.179   ops/s
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate                                                    thrpt    5      1175.942 ±       31.000  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                               thrpt    5     48929.080 ±        9.205    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                        thrpt    5         0.009 ±        0.065  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   thrpt    5         0.353 ±        2.714    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                              thrpt    5      1152.555 ±      710.592  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                         thrpt    5     47971.928 ±    30040.843    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                       thrpt    5         0.666 ±        5.734  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                  thrpt    5        27.908 ±      240.294    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.count                                                         thrpt    5        17.000                 counts
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.time                                                          thrpt    5        32.000                     ms
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala                                                            thrpt    5     44389.609 ±     1297.285   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                             thrpt    5      1177.598 ±       33.684  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                        thrpt    5     41752.009 ±        0.002    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.037 ±        0.204  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         1.314 ±        7.205    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                       thrpt    5      1152.539 ±      714.368  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                  thrpt    5     40873.437 ±    25613.156    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                           thrpt    5        28.453 ±      244.992    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.count                                                  thrpt    5        17.000                 counts
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.time                                                   thrpt    5        35.000                     ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala                                                           thrpt    5   1672247.550 ±    26166.693   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                            thrpt    5      1521.358 ±       23.882  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                       thrpt    5      1432.000 ±        0.001    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5         0.028 ±        0.136  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5         0.026 ±        0.127    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                      thrpt    5      1495.303 ±      725.717  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                 thrpt    5      1407.241 ±      673.217    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                               thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                          thrpt    5         0.752 ±        6.471    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count                                                 thrpt    5        22.000                 counts
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time                                                  thrpt    5        24.000                     ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc                                                   thrpt    5   1831217.380 ±    17201.865   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                    thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                               thrpt    5        ≈ 10⁻⁴                   B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                         thrpt    5           ≈ 0                 counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson                                                                thrpt    5     33584.054 ±     2985.186   ops/s
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate                                                 thrpt    5      1016.084 ±       90.205  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                            thrpt    5     47617.748 ±       14.943    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.023 ±        0.120  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         1.059 ±        5.563    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                           thrpt    5      1014.770 ±       23.285  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                      thrpt    5     47571.464 ±     3217.290    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                               thrpt    5        37.357 ±      321.654    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count                                                      thrpt    5        15.000                 counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time                                                       thrpt    5        38.000                     ms
[info] ArrayOfLongsBenchmark.readCirce                                                                         thrpt    5    128880.690 ±     2189.916   ops/s
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate                                                          thrpt    5      2209.028 ±       38.450  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm                                                     thrpt    5     26976.003 ±        0.001    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                              thrpt    5         0.011 ±        0.029  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         thrpt    5         0.134 ±        0.355    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                    thrpt    5      2178.590 ±      718.929  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                               thrpt    5     26607.726 ±     8964.505    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.count                                                               thrpt    5        32.000                 counts
[info] ArrayOfLongsBenchmark.readCirce:·gc.time                                                                thrpt    5        25.000                     ms
[info] ArrayOfLongsBenchmark.readDslJsonJava                                                                   thrpt    5    329775.368 ±    19464.395   ops/s
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate                                                    thrpt    5       660.594 ±       39.531  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                               thrpt    5      3152.001 ±        0.001    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                              thrpt    5       666.822 ±      904.314  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                         thrpt    5      3173.748 ±     4196.588    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space                                       thrpt    5         0.133 ±        1.144  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                  thrpt    5         0.625 ±        5.380    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.count                                                         thrpt    5        10.000                 counts
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.time                                                          thrpt    5        47.000                     ms
[info] ArrayOfLongsBenchmark.readJacksonScala                                                                  thrpt    5    233099.639 ±     2015.974   ops/s
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate                                                   thrpt    5       516.507 ±        4.534  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                              thrpt    5      3488.002 ±        0.001    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                             thrpt    5       470.884 ±      709.362  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                        thrpt    5      3180.967 ±     4805.197    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.count                                                        thrpt    5         7.000                 counts
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.time                                                         thrpt    5        28.000                     ms
[info] ArrayOfLongsBenchmark.readJsoniterScala                                                                 thrpt    5    451133.074 ±    15168.920   ops/s
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate                                                  thrpt    5       568.691 ±       19.140  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                             thrpt    5      1984.001 ±        0.001    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                            thrpt    5       606.729 ±      580.608  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                       thrpt    5      2118.495 ±     2048.362    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.count                                                       thrpt    5         9.000                 counts
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.time                                                        thrpt    5        26.000                     ms
[info] ArrayOfLongsBenchmark.readPlayJson                                                                      thrpt    5     64296.119 ±     1412.476   ops/s
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate                                                       thrpt    5      2868.841 ±       63.305  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                  thrpt    5     70232.006 ±        0.001    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                           thrpt    5         0.011 ±        0.017  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      thrpt    5         0.262 ±        0.427    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                 thrpt    5      2859.004 ±      717.278  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                            thrpt    5     69987.916 ±    17238.038    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.count                                                            thrpt    5        42.000                 counts
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.time                                                             thrpt    5        35.000                     ms
[info] ArrayOfLongsBenchmark.writeCirce                                                                        thrpt    5    216278.945 ±    10797.691   ops/s
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate                                                         thrpt    5      1525.898 ±       75.260  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm                                                    thrpt    5     11104.002 ±        0.001    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                             thrpt    5         0.024 ±        0.112  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        thrpt    5         0.173 ±        0.823    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                   thrpt    5      1563.173 ±      709.570  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                              thrpt    5     11389.512 ±     5666.722    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                            thrpt    5         0.666 ±        5.737  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                       thrpt    5         4.895 ±       42.143    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.count                                                              thrpt    5        23.000                 counts
[info] ArrayOfLongsBenchmark.writeCirce:·gc.time                                                               thrpt    5        28.000                     ms
[info] ArrayOfLongsBenchmark.writeDslJsonJava                                                                  thrpt    5    665261.383 ±    31948.658   ops/s
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                   thrpt    5       520.698 ±       25.024  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                              thrpt    5      1232.001 ±        0.001    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                             thrpt    5       533.908 ±      703.681  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                        thrpt    5      1262.348 ±     1653.635    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.count                                                        thrpt    5         8.000                 counts
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.time                                                         thrpt    5        37.000                     ms
[info] ArrayOfLongsBenchmark.writeJacksonScala                                                                 thrpt    5    475973.328 ±    24708.772   ops/s
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate                                                  thrpt    5       488.653 ±       25.439  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                             thrpt    5      1616.001 ±        0.001    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                            thrpt    5       538.175 ±      709.404  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                       thrpt    5      1782.023 ±     2373.424    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.count                                                       thrpt    5         8.000                 counts
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.time                                                        thrpt    5        33.000                     ms
[info] ArrayOfLongsBenchmark.writeJsoniterScala                                                                thrpt    5    616054.518 ±     6603.820   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                 thrpt    5       482.266 ±        4.756  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                            thrpt    5      1232.001 ±        0.001    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                           thrpt    5       471.336 ±      710.440  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                      thrpt    5      1204.609 ±     1822.319    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.266 ±        1.405  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                               thrpt    5         0.681 ±        3.590    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count                                                      thrpt    5         7.000                 counts
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time                                                       thrpt    5        22.000                     ms
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc                                                        thrpt    5    667233.128 ±    57320.117   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                         thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                    thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                              thrpt    5           ≈ 0                 counts
[info] ArrayOfLongsBenchmark.writePlayJson                                                                     thrpt    5     26847.018 ±      696.215   ops/s
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate                                                      thrpt    5      1373.055 ±       35.498  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                 thrpt    5     80500.691 ±       27.307    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                          thrpt    5         0.033 ±        0.271  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     thrpt    5         1.936 ±       15.853    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                thrpt    5      1357.466 ±       26.971  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                           thrpt    5     79587.441 ±      634.254    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                         thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                    thrpt    5        46.829 ±      403.211    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.count                                                           thrpt    5        20.000                 counts
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.time                                                            thrpt    5        32.000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.readCirce                                                               thrpt    5      6432.677 ±      301.884   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate                                                thrpt    5       990.133 ±       46.568  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                           thrpt    5    242272.065 ±        0.009    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.008 ±        0.059  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         1.880 ±       14.211    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                          thrpt    5      1015.268 ±       19.945  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                     thrpt    5    248446.357 ±    10409.186    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.932 ±        5.618  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                              thrpt    5       231.614 ±     1402.174    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count                                                     thrpt    5        15.000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time                                                      thrpt    5        34.000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala                                                        thrpt    5      6416.941 ±      388.904   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                         thrpt    5       924.990 ±       55.948  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    thrpt    5    226864.065 ±        0.008    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'             thrpt    5         0.017 ±        0.100  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm        thrpt    5         4.156 ±       24.281    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                   thrpt    5       945.711 ±      587.965  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                              thrpt    5    232197.830 ±   149632.629    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                            thrpt    5         0.933 ±        6.689  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                       thrpt    5       226.699 ±     1626.394    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.count                                              thrpt    5        14.000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.time                                               thrpt    5        43.000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala                                                       thrpt    5     98480.606 ±     2584.805   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                        thrpt    5       953.986 ±       25.479  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   thrpt    5     15248.004 ±        0.001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'            thrpt    5         0.006 ±        0.052  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm       thrpt    5         0.097 ±        0.832    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                  thrpt    5       948.733 ±      588.804  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                             thrpt    5     15163.900 ±     9400.487    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                           thrpt    5         0.533 ±        4.588  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                      thrpt    5         8.582 ±       73.897    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count                                             thrpt    5        14.000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time                                              thrpt    5        28.000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson                                                            thrpt    5      6184.364 ±      675.764   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                             thrpt    5      1124.850 ±      122.537  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                        thrpt    5    286296.068 ±        0.013    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.026 ±        0.201  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         6.742 ±       52.799    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                       thrpt    5      1083.484 ±      590.458  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                  thrpt    5    276445.268 ±   172392.811    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                thrpt    5         0.799 ±        6.883  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                           thrpt    5       209.610 ±     1804.809    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count                                                  thrpt    5        16.000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time                                                   thrpt    5        38.000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce                                                              thrpt    5     17818.493 ±     1245.528   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate                                               thrpt    5       808.486 ±       56.421  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                          thrpt    5     71414.474 ±       78.050    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                   thrpt    5         0.022 ±        0.187  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm              thrpt    5         1.875 ±       16.144    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                         thrpt    5       810.243 ±      706.220  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                    thrpt    5     71526.827 ±    61167.970    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                  thrpt    5         0.666 ±        5.736  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                             thrpt    5        59.191 ±      509.656    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count                                                    thrpt    5        12.000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time                                                     thrpt    5        36.000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala                                                       thrpt    5     19679.980 ±     2013.584   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                        thrpt    5       833.866 ±       85.287  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   thrpt    5     66696.022 ±        0.010    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'            thrpt    5         0.015 ±        0.080  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm       thrpt    5         1.164 ±        6.252    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                  thrpt    5       809.475 ±      707.421  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                             thrpt    5     64879.470 ±    59230.280    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                           thrpt    5         0.932 ±        8.028  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                      thrpt    5        73.573 ±      633.488    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.count                                             thrpt    5        12.000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.time                                              thrpt    5        39.000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala                                                      thrpt    5    601245.199 ±    23186.737   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                       thrpt    5      1363.035 ±       52.376  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  thrpt    5      3568.001 ±        0.001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'           thrpt    5         0.023 ±        0.188  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm      thrpt    5         0.061 ±        0.491    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                 thrpt    5      1357.708 ±       26.081  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                            thrpt    5      3554.413 ±      181.914    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                          thrpt    5         0.933 ±        6.688  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                     thrpt    5         2.437 ±       17.498    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count                                            thrpt    5        20.000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time                                             thrpt    5        28.000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc                                              thrpt    5    602048.492 ±    22934.309   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    thrpt    5           ≈ 0                 counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson                                                           thrpt    5     18466.528 ±      380.788   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                            thrpt    5       851.363 ±       17.542  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                       thrpt    5     72568.377 ±       28.003    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5         0.046 ±        0.396  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5         3.891 ±       33.501    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                      thrpt    5       876.898 ±      717.859  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                 thrpt    5     74752.679 ±    61326.099    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                               thrpt    5         0.799 ±        6.883  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                          thrpt    5        68.027 ±      585.731    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count                                                 thrpt    5        13.000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time                                                  thrpt    5        43.000                     ms
[info] ArrayOfOffsetTimesBenchmark.readCirce                                                                   thrpt    5     11051.447 ±      284.340   ops/s
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate                                                    thrpt    5      1109.890 ±       28.800  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm                                               thrpt    5    158088.039 ±        0.009    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                        thrpt    5         0.016 ±        0.099  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   thrpt    5         2.319 ±       14.047    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                              thrpt    5      1151.778 ±      713.817  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                         thrpt    5    164111.640 ±   103374.873    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                       thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                  thrpt    5        94.851 ±      816.694    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.count                                                         thrpt    5        17.000                 counts
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.time                                                          thrpt    5        34.000                     ms
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala                                                            thrpt    5     11111.056 ±     1023.595   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate                                             thrpt    5      1017.071 ±       93.919  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        thrpt    5    144069.076 ±       68.762    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.015 ±        0.084  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         2.126 ±       12.220    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                       thrpt    5      1014.553 ±       24.532  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                  thrpt    5    143775.668 ±    13155.864    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                thrpt    5         0.932 ±        6.688  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                           thrpt    5       134.325 ±      969.881    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count                                                  thrpt    5        15.000                 counts
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time                                                   thrpt    5        38.000                     ms
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala                                                           thrpt    5    166132.050 ±     2028.219   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                            thrpt    5       960.890 ±       11.764  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       thrpt    5      9104.003 ±        0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5         0.012 ±        0.106  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5         0.116 ±        1.002    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                      thrpt    5       947.681 ±      589.044  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                 thrpt    5      8980.277 ±     5613.590    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                               thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                          thrpt    5         6.340 ±       54.589    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count                                                 thrpt    5        14.000                 counts
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time                                                  thrpt    5        28.000                     ms
[info] ArrayOfOffsetTimesBenchmark.readPlayJson                                                                thrpt    5     10349.658 ±      597.105   ops/s
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate                                                 thrpt    5      1295.444 ±       75.104  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                            thrpt    5    197000.041 ±        0.006    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.012 ±        0.097  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         1.794 ±       14.993    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                           thrpt    5      1288.122 ±      602.497  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                      thrpt    5    195812.286 ±    88694.626    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                    thrpt    5         1.066 ±        7.821  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                               thrpt    5       161.654 ±     1183.915    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.count                                                      thrpt    5        19.000                 counts
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.time                                                       thrpt    5        39.000                     ms
[info] ArrayOfOffsetTimesBenchmark.writeCirce                                                                  thrpt    5     27434.335 ±     1563.664   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate                                                   thrpt    5       946.719 ±       54.604  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                              thrpt    5     54318.174 ±       40.048    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                       thrpt    5         0.017 ±        0.116  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  thrpt    5         1.005 ±        6.734    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                             thrpt    5       946.989 ±      573.433  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                        thrpt    5     54288.215 ±    31711.198    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                      thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                 thrpt    5        38.559 ±      332.005    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count                                                        thrpt    5        14.000                 counts
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time                                                         thrpt    5        34.000                     ms
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala                                                           thrpt    5     95685.329 ±     3465.684   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                            thrpt    5      1523.095 ±       55.359  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       thrpt    5     25056.004 ±        0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5         0.047 ±        0.239  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5         0.785 ±        3.954    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                      thrpt    5      1562.363 ±      706.962  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                 thrpt    5     25709.421 ±    11884.145    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                               thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                          thrpt    5        13.365 ±      115.078    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.count                                                 thrpt    5        23.000                 counts
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.time                                                  thrpt    5        33.000                     ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala                                                          thrpt    5    932767.392 ±    36830.623   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                           thrpt    5      1280.080 ±       50.907  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      thrpt    5      2160.000 ±        0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'               thrpt    5         0.036 ±        0.294  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm          thrpt    5         0.061 ±        0.494    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                     thrpt    5      1289.979 ±      602.070  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                thrpt    5      2177.872 ±     1052.018    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                              thrpt    5         0.799 ±        5.560  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                         thrpt    5         1.342 ±        9.339    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count                                                thrpt    5        19.000                 counts
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time                                                 thrpt    5        27.000                     ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc                                                  thrpt    5   1076794.358 ±    83518.958   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              thrpt    5        ≈ 10⁻³                   B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        thrpt    5           ≈ 0                 counts
[info] ArrayOfOffsetTimesBenchmark.writePlayJson                                                               thrpt    5     69139.090 ±     2215.751   ops/s
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate                                                thrpt    5      1355.410 ±       42.979  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                           thrpt    5     30856.006 ±        0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.015 ±        0.111  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         0.351 ±        2.561    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                          thrpt    5      1357.237 ±       29.192  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                     thrpt    5     30898.890 ±      990.778    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                   thrpt    5         1.066 ±        6.690  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                              thrpt    5        24.473 ±      153.867    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.count                                                     thrpt    5        20.000                 counts
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.time                                                      thrpt    5        37.000                     ms
[info] ArrayOfPeriodsBenchmark.readCirce                                                                       thrpt    5     25251.083 ±     1614.565   ops/s
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate                                                        thrpt    5       910.098 ±       58.312  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm                                                   thrpt    5     56728.020 ±        0.022    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                            thrpt    5         0.031 ±        0.173  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       thrpt    5         1.911 ±       10.761    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                  thrpt    5       878.829 ±      707.024  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                             thrpt    5     54687.444 ±    41946.081    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                           thrpt    5         1.066 ±        5.000  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                      thrpt    5        65.966 ±      306.281    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.count                                                             thrpt    5        13.000                 counts
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.time                                                              thrpt    5        35.000                     ms
[info] ArrayOfPeriodsBenchmark.readJacksonScala                                                                thrpt    5     21240.183 ±     1025.070   ops/s
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate                                                 thrpt    5       582.249 ±       27.643  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                            thrpt    5     43144.154 ±        1.147    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                           thrpt    5       605.520 ±      579.444  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                      thrpt    5     44945.545 ±    43904.405    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count                                                      thrpt    5         9.000                 counts
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time                                                       thrpt    5        36.000                     ms
[info] ArrayOfPeriodsBenchmark.readJsoniterScala                                                               thrpt    5    169413.044 ±     2187.930   ops/s
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate                                                thrpt    5       440.934 ±        5.660  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                           thrpt    5      4096.002 ±        0.001    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                          thrpt    5       472.875 ±      712.340  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                     thrpt    5      4397.098 ±     6678.434    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count                                                     thrpt    5         7.000                 counts
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time                                                      thrpt    5        20.000                     ms
[info] ArrayOfPeriodsBenchmark.readPlayJson                                                                    thrpt    5     20106.335 ±     1472.029   ops/s
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate                                                     thrpt    5      1257.606 ±       92.048  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                thrpt    5     98448.022 ±        0.013    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                         thrpt    5         0.077 ±        0.659  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    thrpt    5         6.163 ±       52.624    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                               thrpt    5      1287.777 ±      600.260  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                          thrpt    5    100722.474 ±    43568.030    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                        thrpt    5         0.799 ±        6.883  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                   thrpt    5        63.960 ±      550.718    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.count                                                          thrpt    5        19.000                 counts
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.time                                                           thrpt    5        41.000                     ms
[info] ArrayOfPeriodsBenchmark.writeCirce                                                                      thrpt    5     82027.571 ±     5757.286   ops/s
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate                                                       thrpt    5      1084.355 ±       75.790  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm                                                  thrpt    5     20808.005 ±        0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                           thrpt    5         0.011 ±        0.095  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      thrpt    5         0.216 ±        1.843    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                 thrpt    5      1083.809 ±      568.815  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                            thrpt    5     20785.057 ±    10232.635    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                          thrpt    5         0.666 ±        5.737  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                     thrpt    5        12.908 ±      111.141    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.count                                                            thrpt    5        16.000                 counts
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.time                                                             thrpt    5        33.000                     ms
[info] ArrayOfPeriodsBenchmark.writeJacksonScala                                                               thrpt    5    138756.921 ±     6187.261   ops/s
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate                                                thrpt    5      1174.337 ±       52.862  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                           thrpt    5     13320.003 ±        0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.039 ±        0.204  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         0.438 ±        2.303    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                          thrpt    5      1152.409 ±      713.258  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                     thrpt    5     13087.759 ±     8579.090    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.933 ±        8.030  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                              thrpt    5        10.641 ±       91.624    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count                                                     thrpt    5        17.000                 counts
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time                                                      thrpt    5        34.000                     ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala                                                              thrpt    5    433461.758 ±    53740.246   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate                                               thrpt    5       480.243 ±       59.580  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                          thrpt    5      1744.001 ±        0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                         thrpt    5       471.005 ±      710.002  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                    thrpt    5      1721.614 ±     2728.885    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                  thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                             thrpt    5         0.475 ±        4.090    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count                                                    thrpt    5         7.000                 counts
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time                                                     thrpt    5        21.000                     ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc                                                      thrpt    5    508340.583 ±     4833.570   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                       thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                  thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                            thrpt    5           ≈ 0                 counts
[info] ArrayOfPeriodsBenchmark.writePlayJson                                                                   thrpt    5    101469.161 ±     5844.561   ops/s
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate                                                    thrpt    5      1237.804 ±       71.375  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm                                               thrpt    5     19200.004 ±        0.001    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                        thrpt    5         0.032 ±        0.181  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   thrpt    5         0.504 ±        2.856    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                              thrpt    5      1287.851 ±      575.074  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                         thrpt    5     19986.980 ±     9231.645    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                       thrpt    5         0.799 ±        6.884  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                  thrpt    5        12.611 ±      108.582    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.count                                                         thrpt    5        19.000                 counts
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.time                                                          thrpt    5        38.000                     ms
[info] ArrayOfShortsBenchmark.readCirce                                                                        thrpt    5    146566.838 ±     7544.827   ops/s
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate                                                         thrpt    5      2461.808 ±      126.191  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm                                                    thrpt    5     26440.003 ±        0.001    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                             thrpt    5         0.007 ±        0.014  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        thrpt    5         0.074 ±        0.154    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                   thrpt    5      2450.402 ±      585.865  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                              thrpt    5     26322.914 ±     6565.326    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.count                                                              thrpt    5        36.000                 counts
[info] ArrayOfShortsBenchmark.readCirce:·gc.time                                                               thrpt    5        28.000                     ms
[info] ArrayOfShortsBenchmark.readDslJsonJava                                                                  thrpt    5    555831.201 ±    46619.915   ops/s
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate                                                   thrpt    5       307.970 ±       25.874  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                              thrpt    5       872.001 ±        0.001    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                             thrpt    5       333.757 ±        0.160  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                        thrpt    5       945.384 ±       81.359    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.count                                                        thrpt    5         5.000                 counts
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.time                                                         thrpt    5        23.000                     ms
[info] ArrayOfShortsBenchmark.readJacksonScala                                                                 thrpt    5    314356.852 ±    24924.576   ops/s
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate                                                  thrpt    5       327.533 ±       25.920  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                             thrpt    5      1640.001 ±        0.001    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                            thrpt    5       336.358 ±        0.176  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                       thrpt    5      1684.765 ±      134.471    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.count                                                       thrpt    5         5.000                 counts
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.time                                                        thrpt    5        21.000                     ms
[info] ArrayOfShortsBenchmark.readJsoniterScala                                                                thrpt    5    738175.778 ±     6054.040   ops/s
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate                                                 thrpt    5       255.130 ±        2.193  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                            thrpt    5       544.001 ±        0.001    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                           thrpt    5       269.626 ±      580.391  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                      thrpt    5       575.241 ±     1238.260    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.count                                                      thrpt    5         4.000                 counts
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.time                                                       thrpt    5        12.000                     ms
[info] ArrayOfShortsBenchmark.readPlayJson                                                                     thrpt    5     72567.869 ±     4050.432   ops/s
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate                                                      thrpt    5      3207.872 ±      178.932  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                 thrpt    5     69576.006 ±        0.001    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                          thrpt    5         0.016 ±        0.016  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     thrpt    5         0.344 ±        0.357    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                thrpt    5      3199.512 ±      718.193  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                           thrpt    5     69402.235 ±    15710.944    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.count                                                           thrpt    5        47.000                 counts
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.time                                                            thrpt    5        38.000                     ms
[info] ArrayOfShortsBenchmark.writeCirce                                                                       thrpt    5    268782.717 ±    24193.030   ops/s
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate                                                        thrpt    5      1613.573 ±      144.889  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm                                                   thrpt    5      9448.002 ±        0.001    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                            thrpt    5         0.025 ±        0.115  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       thrpt    5         0.151 ±        0.687    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                  thrpt    5      1631.310 ±      581.473  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                             thrpt    5      9560.572 ±     3708.349    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                           thrpt    5         0.666 ±        5.736  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                      thrpt    5         4.067 ±       35.018    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.count                                                             thrpt    5        24.000                 counts
[info] ArrayOfShortsBenchmark.writeCirce:·gc.time                                                              thrpt    5        29.000                     ms
[info] ArrayOfShortsBenchmark.writeDslJsonJava                                                                 thrpt    5   1202397.692 ±    38892.375   ops/s
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                  thrpt    5       495.006 ±       16.065  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                             thrpt    5       648.000 ±        0.001    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                            thrpt    5       467.183 ±      703.774  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                       thrpt    5       611.179 ±      915.372    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.count                                                       thrpt    5         7.000                 counts
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.time                                                        thrpt    5        38.000                     ms
[info] ArrayOfShortsBenchmark.writeJacksonScala                                                                thrpt    5   1213382.923 ±   102965.656   ops/s
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate                                                 thrpt    5       795.584 ±       67.086  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                            thrpt    5      1032.000 ±        0.001    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.031 ±        0.267  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         0.039 ±        0.338    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                           thrpt    5       809.561 ±      721.303  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                      thrpt    5      1047.672 ±      873.054    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.932 ±        6.688  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                               thrpt    5         1.192 ±        8.545    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.count                                                      thrpt    5        12.000                 counts
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.time                                                       thrpt    5        39.000                     ms
[info] ArrayOfShortsBenchmark.writeJsoniterScala                                                               thrpt    5   1533114.778 ±    13846.494   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                thrpt    5       631.177 ±        5.558  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                           thrpt    5       648.000 ±        0.001    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                          thrpt    5       605.872 ±      578.773  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                     thrpt    5       622.257 ±      597.234    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.266 ±        1.405  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                              thrpt    5         0.274 ±        1.444    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count                                                     thrpt    5         9.000                 counts
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time                                                      thrpt    5        26.000                     ms
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc                                                       thrpt    5   1643029.351 ±   112911.512   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                        thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                   thrpt    5        ≈ 10⁻⁴                   B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                             thrpt    5           ≈ 0                 counts
[info] ArrayOfShortsBenchmark.writePlayJson                                                                    thrpt    5     35312.125 ±     3210.130   ops/s
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate                                                     thrpt    5      1727.251 ±      157.213  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                thrpt    5     76985.733 ±       14.821    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                         thrpt    5         0.045 ±        0.362  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    thrpt    5         2.074 ±       16.679    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                               thrpt    5      1699.544 ±       20.853  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                          thrpt    5     75781.479 ±     6274.591    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                        thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                   thrpt    5        36.823 ±      317.060    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.count                                                          thrpt    5        25.000                 counts
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.time                                                           thrpt    5        30.000                     ms
[info] ArrayOfUUIDsBenchmark.readCirce                                                                         thrpt    5     46340.703 ±     2473.640   ops/s
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate                                                          thrpt    5       924.533 ±       49.614  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm                                                     thrpt    5     31400.009 ±        0.002    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                              thrpt    5         0.012 ±        0.102  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         thrpt    5         0.413 ±        3.556    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                    thrpt    5       947.092 ±      587.455  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                               thrpt    5     32194.152 ±    20562.079    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                             thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                        thrpt    5        23.127 ±      199.130    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.count                                                               thrpt    5        14.000                 counts
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.time                                                                thrpt    5        32.000                     ms
[info] ArrayOfUUIDsBenchmark.readJacksonScala                                                                  thrpt    5     78821.952 ±     5103.370   ops/s
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate                                                   thrpt    5       830.848 ±       53.740  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                              thrpt    5     16592.005 ±        0.001    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                       thrpt    5         0.033 ±        0.185  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  thrpt    5         0.653 ±        3.678    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                             thrpt    5       809.641 ±      708.134  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                        thrpt    5     16143.178 ±    13493.742    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                      thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                 thrpt    5        15.839 ±      136.381    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count                                                        thrpt    5        12.000                 counts
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time                                                         thrpt    5        41.000                     ms
[info] ArrayOfUUIDsBenchmark.readJsoniterScala                                                                 thrpt    5    261770.514 ±     3029.830   ops/s
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate                                                  thrpt    5       851.521 ±       10.282  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                             thrpt    5      5120.002 ±        0.001    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                      thrpt    5         0.016 ±        0.093  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 thrpt    5         0.098 ±        0.561    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                            thrpt    5       810.904 ±      709.597  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                       thrpt    5      4878.225 ±     4322.114    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                     thrpt    5         0.666 ±        5.736  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                thrpt    5         4.012 ±       34.543    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count                                                       thrpt    5        12.000                 counts
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time                                                        thrpt    5        29.000                     ms
[info] ArrayOfUUIDsBenchmark.readPlayJson                                                                      thrpt    5     23049.282 ±     1153.489   ops/s
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate                                                       thrpt    5      1083.046 ±       54.381  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                  thrpt    5     73960.026 ±        0.062    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                           thrpt    5         0.027 ±        0.235  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      thrpt    5         1.841 ±       15.824    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                 thrpt    5      1083.552 ±      590.115  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                            thrpt    5     73946.483 ±    38028.991    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                          thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                     thrpt    5        53.872 ±      463.855    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.count                                                            thrpt    5        16.000                 counts
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.time                                                             thrpt    5        37.000                     ms
[info] ArrayOfUUIDsBenchmark.writeCirce                                                                        thrpt    5     58290.464 ±     1263.357   ops/s
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate                                                         thrpt    5       864.782 ±       18.637  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm                                                    thrpt    5     23352.007 ±        0.001    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                             thrpt    5         0.020 ±        0.115  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        thrpt    5         0.534 ±        3.110    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                   thrpt    5       878.929 ±      720.279  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                              thrpt    5     23726.243 ±    19279.183    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                            thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                       thrpt    5        17.950 ±      154.559    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.count                                                              thrpt    5        13.000                 counts
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.time                                                               thrpt    5        32.000                     ms
[info] ArrayOfUUIDsBenchmark.writeJacksonScala                                                                 thrpt    5     88791.205 ±     4959.405   ops/s
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate                                                  thrpt    5      1216.308 ±       66.857  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                             thrpt    5     21560.005 ±        0.061    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                      thrpt    5         0.032 ±        0.193  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 thrpt    5         0.563 ±        3.437    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                            thrpt    5      1219.772 ±      714.547  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                       thrpt    5     21637.880 ±    13102.991    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                     thrpt    5         1.065 ±        7.821  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                thrpt    5        18.940 ±      138.636    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count                                                       thrpt    5        18.000                 counts
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time                                                        thrpt    5        36.000                     ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala                                                                thrpt    5    286480.507 ±    15179.264   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                 thrpt    5       912.899 ±       48.593  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                            thrpt    5      5016.001 ±        0.001    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.016 ±        0.103  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         0.088 ±        0.561    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                           thrpt    5       946.025 ±      571.475  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                      thrpt    5      5202.433 ±     3238.491    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                    thrpt    5         1.066 ±        6.437  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                               thrpt    5         5.880 ±       35.482    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count                                                      thrpt    5        14.000                 counts
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time                                                       thrpt    5        32.000                     ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc                                                        thrpt    5    319698.197 ±    17472.887   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                         thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                    thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                              thrpt    5           ≈ 0                 counts
[info] ArrayOfUUIDsBenchmark.writePlayJson                                                                     thrpt    5     77032.483 ±     3993.192   ops/s
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate                                                      thrpt    5      1141.607 ±       59.267  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                 thrpt    5     23328.011 ±        0.084    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                          thrpt    5         0.027 ±        0.220  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     thrpt    5         0.560 ±        4.590    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                thrpt    5      1151.544 ±      709.591  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                           thrpt    5     23530.284 ±    14407.303    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                         thrpt    5         0.799 ±        6.880  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                    thrpt    5        16.485 ±      141.944    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.count                                                           thrpt    5        17.000                 counts
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.time                                                            thrpt    5        35.000                     ms
[info] ArrayOfZoneIdsBenchmark.readCirce                                                                       thrpt    5     70595.917 ±     3468.444   ops/s
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate                                                        thrpt    5      1430.882 ±       70.636  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm                                                   thrpt    5     31904.006 ±        0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                            thrpt    5         0.030 ±        0.227  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       thrpt    5         0.688 ±        5.131    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                  thrpt    5      1425.486 ±      595.532  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                             thrpt    5     31769.906 ±    12432.210    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                           thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                      thrpt    5        18.052 ±      155.432    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.count                                                             thrpt    5        21.000                 counts
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.time                                                              thrpt    5        30.000                     ms
[info] ArrayOfZoneIdsBenchmark.readJacksonScala                                                                thrpt    5     76802.509 ±     5469.173   ops/s
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate                                                 thrpt    5       885.253 ±       63.198  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                            thrpt    5     18144.005 ±        0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.017 ±        0.145  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         0.341 ±        2.940    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                           thrpt    5       876.243 ±      704.140  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                      thrpt    5     17963.910 ±    14487.278    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                    thrpt    5         1.066 ±        7.822  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                               thrpt    5        21.602 ±      158.535    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count                                                      thrpt    5        13.000                 counts
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time                                                       thrpt    5        43.000                     ms
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala                                                               thrpt    5     97126.640 ±     6879.374   ops/s
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate                                                thrpt    5      1022.811 ±       72.343  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                           thrpt    5     16576.004 ±        0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.028 ±        0.198  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         0.465 ±        3.257    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                          thrpt    5      1082.736 ±      565.708  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                     thrpt    5     17522.247 ±     7946.486    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                              thrpt    5        13.124 ±      112.999    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count                                                     thrpt    5        16.000                 counts
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time                                                      thrpt    5        32.000                     ms
[info] ArrayOfZoneIdsBenchmark.readPlayJson                                                                    thrpt    5     41645.627 ±      400.033   ops/s
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate                                                     thrpt    5      1998.113 ±       20.121  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                thrpt    5     75512.010 ±        0.004    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                         thrpt    5         0.028 ±        0.198  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    thrpt    5         1.076 ±        7.529    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                               thrpt    5      1973.332 ±      582.840  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                          thrpt    5     74578.674 ±    22195.741    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                        thrpt    5         0.932 ±        8.028  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                   thrpt    5        35.368 ±      304.526    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count                                                          thrpt    5        29.000                 counts
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time                                                           thrpt    5        28.000                     ms
[info] ArrayOfZoneIdsBenchmark.writeCirce                                                                      thrpt    5    127723.344 ±     7319.438   ops/s
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate                                                       thrpt    5       566.814 ±       32.502  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm                                                  thrpt    5      6984.003 ±        0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                 thrpt    5       605.550 ±      579.274  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                            thrpt    5      7469.897 ±     7246.849    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.count                                                            thrpt    5         9.000                 counts
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.time                                                             thrpt    5        33.000                     ms
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala                                                               thrpt    5    162071.947 ±     1536.696   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate                                                thrpt    5       240.537 ±        2.298  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                           thrpt    5      2336.003 ±        0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                          thrpt    5       268.553 ±      578.082  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                     thrpt    5      2610.591 ±     5619.517    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count                                                     thrpt    5         4.000                 counts
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time                                                      thrpt    5        18.000                     ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala                                                              thrpt    5    742526.033 ±    28030.420   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate                                               thrpt    5       920.843 ±       34.473  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                          thrpt    5      1952.001 ±        0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                   thrpt    5         0.013 ±        0.074  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm              thrpt    5         0.027 ±        0.155    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                         thrpt    5       878.548 ±      709.834  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                    thrpt    5      1863.498 ±     1527.690    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                  thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                             thrpt    5         1.694 ±       14.584    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count                                                    thrpt    5        13.000                 counts
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time                                                     thrpt    5        30.000                     ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc                                                      thrpt    5    753044.190 ±    62301.195   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                       thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                  thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                            thrpt    5           ≈ 0                 counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson                                                                   thrpt    5    182467.865 ±     3676.472   ops/s
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate                                                    thrpt    5       594.423 ±       12.060  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm                                               thrpt    5      5128.002 ±        0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                              thrpt    5       604.077 ±      577.752  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                         thrpt    5      5216.014 ±     5044.200    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                       thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                  thrpt    5         1.156 ±        9.955    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count                                                         thrpt    5         9.000                 counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time                                                          thrpt    5        38.000                     ms
[info] ArrayOfZoneOffsetsBenchmark.readCirce                                                                   thrpt    5    130733.383 ±     2621.428   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate                                                    thrpt    5      1606.534 ±       31.979  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate.norm                                               thrpt    5     19344.003 ±        0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                        thrpt    5         0.033 ±        0.137  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   thrpt    5         0.391 ±        1.641    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                              thrpt    5      1563.564 ±      728.423  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                         thrpt    5     18822.235 ±     8593.745    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                       thrpt    5         0.666 ±        5.734  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                  thrpt    5         8.002 ±       68.901    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.count                                                         thrpt    5        23.000                 counts
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.time                                                          thrpt    5        26.000                     ms
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala                                                            thrpt    5    160534.283 ±    12899.850   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate                                             thrpt    5       856.698 ±       68.748  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        thrpt    5      8400.003 ±        0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.018 ±        0.094  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         0.171 ±        0.904    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                       thrpt    5       877.608 ±      714.716  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                  thrpt    5      8619.667 ±     7284.766    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                thrpt    5         0.932 ±        6.688  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                           thrpt    5         9.003 ±       64.387    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count                                                  thrpt    5        13.000                 counts
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time                                                   thrpt    5        40.000                     ms
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala                                                           thrpt    5    316078.163 ±     1904.943   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate                                            thrpt    5       613.675 ±        3.684  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       thrpt    5      3056.001 ±        0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                      thrpt    5       606.682 ±      580.421  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                 thrpt    5      3022.103 ±     2902.292    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count                                                 thrpt    5         9.000                 counts
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time                                                  thrpt    5        26.000                     ms
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson                                                                thrpt    5     60804.684 ±     2803.552   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate                                                 thrpt    5      2566.317 ±      116.735  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            thrpt    5     66432.007 ±        0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.006 ±        0.013  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         0.167 ±        0.351    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                           thrpt    5      2586.777 ±      718.484  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                      thrpt    5     66990.141 ±    20170.487    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.count                                                      thrpt    5        38.000                 counts
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.time                                                       thrpt    5        31.000                     ms
[info] ArrayOfZoneOffsetsBenchmark.writeCirce                                                                  thrpt    5    179295.913 ±    10873.103   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate                                                   thrpt    5       616.961 ±       37.470  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate.norm                                              thrpt    5      5416.002 ±        0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                             thrpt    5       606.704 ±      580.585  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                        thrpt    5      5321.558 ±     5038.697    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.count                                                        thrpt    5         9.000                 counts
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.time                                                         thrpt    5        29.000                     ms
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala                                                           thrpt    5    283800.881 ±    17683.085   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate                                            thrpt    5       279.836 ±       17.349  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       thrpt    5      1552.001 ±        0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                      thrpt    5       269.105 ±      579.270  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                 thrpt    5      1488.828 ±     3206.604    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count                                                 thrpt    5         4.000                 counts
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time                                                  thrpt    5        17.000                     ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala                                                          thrpt    5   1492505.838 ±    77884.551   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           thrpt    5      1107.523 ±       58.104  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      thrpt    5      1168.000 ±        0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'               thrpt    5         0.030 ±        0.260  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm          thrpt    5         0.032 ±        0.276    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                     thrpt    5      1152.094 ±      710.843  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                thrpt    5      1215.279 ±      755.269    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                              thrpt    5         0.932 ±        6.687  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                         thrpt    5         0.972 ±        6.977    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count                                                thrpt    5        17.000                 counts
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time                                                 thrpt    5        31.000                     ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc                                                  thrpt    5   1580554.286 ±    13220.959   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              thrpt    5        ≈ 10⁻⁴                   B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        thrpt    5           ≈ 0                 counts
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson                                                               thrpt    5    290183.073 ±     7790.841   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate                                                thrpt    5       789.185 ±       20.931  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate.norm                                           thrpt    5      4280.001 ±        0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.005 ±        0.041  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         0.025 ±        0.219    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                          thrpt    5       740.769 ±      574.781  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                     thrpt    5      4019.129 ±     3166.211    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                   thrpt    5         1.066 ±        7.825  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                              thrpt    5         5.829 ±       42.871    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.count                                                     thrpt    5        11.000                 counts
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.time                                                      thrpt    5        43.000                     ms
[info] ArrayOfZonedDateTimesBenchmark.readCirce                                                                thrpt    5      4435.648 ±      287.969   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate                                                 thrpt    5       873.943 ±       56.734  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                            thrpt    5    310120.096 ±        0.023    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.037 ±        0.318  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5        12.939 ±      111.405    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                           thrpt    5       876.571 ±      717.169  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                      thrpt    5    310725.329 ±   246633.244    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.932 ±        6.687  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                               thrpt    5       338.603 ±     2441.949    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count                                                      thrpt    5        13.000                 counts
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time                                                       thrpt    5        37.000                     ms
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala                                                         thrpt    5      4211.304 ±      134.181   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                          thrpt    5       791.501 ±       24.996  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     thrpt    5    295816.098 ±        0.015    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'              thrpt    5         0.014 ±        0.118  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm         thrpt    5         5.157 ±       44.406    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                    thrpt    5       806.655 ±      700.524  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                               thrpt    5    301749.831 ±   267714.949    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                             thrpt    5         1.332 ±        8.696  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                        thrpt    5       499.811 ±     3260.367    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.count                                               thrpt    5        12.000                 counts
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.time                                                thrpt    5        49.000                     ms
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala                                                        thrpt    5     29300.760 ±     1703.292   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                         thrpt    5       497.886 ±       28.861  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    thrpt    5     26744.015 ±        0.008    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                   thrpt    5       538.204 ±      709.264  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                              thrpt    5     28887.112 ±    37779.408    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count                                              thrpt    5         8.000                 counts
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time                                               thrpt    5        25.000                     ms
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson                                                             thrpt    5      3589.397 ±      116.199   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                              thrpt    5       911.516 ±       29.657  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                         thrpt    5    399728.901 ±        6.764    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                  thrpt    5         0.032 ±        0.273  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm             thrpt    5        14.028 ±      120.088    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                        thrpt    5       875.489 ±      704.122  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                   thrpt    5    384356.944 ±   317540.519    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                 thrpt    5         1.066 ±        7.821  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                            thrpt    5       469.080 ±     3442.310    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count                                                   thrpt    5        13.000                 counts
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time                                                    thrpt    5        43.000                     ms
[info] ArrayOfZonedDateTimesBenchmark.writeCirce                                                               thrpt    5     14294.856 ±      639.640   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate                                                thrpt    5       795.888 ±       35.757  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                           thrpt    5     87627.183 ±      108.997    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.043 ±        0.371  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         4.813 ±       41.444    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                          thrpt    5       808.387 ±      703.522  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                     thrpt    5     89054.789 ±    78486.722    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                   thrpt    5         1.199 ±        7.566  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                              thrpt    5       131.539 ±      828.802    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count                                                     thrpt    5        12.000                 counts
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time                                                      thrpt    5        40.000                     ms
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala                                                        thrpt    5     16018.925 ±      991.341   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                         thrpt    5       829.862 ±       51.570  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                    thrpt    5     81536.029 ±        0.323    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'             thrpt    5         0.021 ±        0.114  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm        thrpt    5         2.064 ±       11.013    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                   thrpt    5       808.242 ±      707.924  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                              thrpt    5     79552.684 ±    72583.134    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                            thrpt    5         1.199 ±        7.568  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                       thrpt    5       117.185 ±      738.343    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.count                                              thrpt    5        12.000                 counts
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.time                                               thrpt    5        43.000                     ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala                                                       thrpt    5    264772.916 ±    11478.253   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                        thrpt    5       933.978 ±       40.857  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                   thrpt    5      5552.002 ±        0.001    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'            thrpt    5         0.028 ±        0.242  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm       thrpt    5         0.169 ±        1.452    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                  thrpt    5       945.861 ±      571.070  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                             thrpt    5      5617.671 ±     3267.587    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                           thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                      thrpt    5         4.749 ±       40.893    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count                                             thrpt    5        14.000                 counts
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time                                              thrpt    5        33.000                     ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc                                               thrpt    5    286107.328 ±    15770.042   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                           thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                     thrpt    5           ≈ 0                 counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson                                                            thrpt    5     14818.089 ±      542.112   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                             thrpt    5       822.961 ±       30.133  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                        thrpt    5     87415.325 ±        5.775    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.041 ±        0.350  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         4.263 ±       36.703    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                       thrpt    5       807.513 ±      701.386  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                  thrpt    5     85776.296 ±    74484.910    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                thrpt    5         0.933 ±        8.031  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                           thrpt    5        99.096 ±      853.245    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count                                                  thrpt    5        12.000                 counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time                                                   thrpt    5        45.000                     ms
[info] ArraysBenchmark.readCirce                                                                               thrpt    5    824626.475 ±    20483.734   ops/s
[info] ArraysBenchmark.readCirce:·gc.alloc.rate                                                                thrpt    5      2657.240 ±       65.782  MB/sec
[info] ArraysBenchmark.readCirce:·gc.alloc.rate.norm                                                           thrpt    5      5072.001 ±        0.001    B/op
[info] ArraysBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                    thrpt    5         0.002 ±        0.006  MB/sec
[info] ArraysBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                               thrpt    5         0.004 ±        0.012    B/op
[info] ArraysBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                          thrpt    5      2654.859 ±      586.558  MB/sec
[info] ArraysBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                     thrpt    5      5066.859 ±     1066.208    B/op
[info] ArraysBenchmark.readCirce:·gc.count                                                                     thrpt    5        39.000                 counts
[info] ArraysBenchmark.readCirce:·gc.time                                                                      thrpt    5        36.000                     ms
[info] ArraysBenchmark.readJacksonScala                                                                        thrpt    5   1378141.954 ±    32825.442   ops/s
[info] ArraysBenchmark.readJacksonScala:·gc.alloc.rate                                                         thrpt    5      1295.949 ±       31.197  MB/sec
[info] ArraysBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                    thrpt    5      1480.000 ±        0.001    B/op
[info] ArraysBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                             thrpt    5         0.023 ±        0.130  MB/sec
[info] ArraysBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        thrpt    5         0.027 ±        0.149    B/op
[info] ArraysBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                   thrpt    5      1288.594 ±      593.951  MB/sec
[info] ArraysBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                              thrpt    5      1471.578 ±      676.727    B/op
[info] ArraysBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                            thrpt    5         0.932 ±        6.687  MB/sec
[info] ArraysBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                       thrpt    5         1.066 ±        7.640    B/op
[info] ArraysBenchmark.readJacksonScala:·gc.count                                                              thrpt    5        19.000                 counts
[info] ArraysBenchmark.readJacksonScala:·gc.time                                                               thrpt    5        38.000                     ms
[info] ArraysBenchmark.readJsoniterScala                                                                       thrpt    5   7733307.304 ±   668759.227   ops/s
[info] ArraysBenchmark.readJsoniterScala:·gc.alloc.rate                                                        thrpt    5      1925.936 ±      166.640  MB/sec
[info] ArraysBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                   thrpt    5       392.000 ±        0.001    B/op
[info] ArraysBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                            thrpt    5         0.023 ±        0.182  MB/sec
[info] ArraysBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       thrpt    5         0.005 ±        0.036    B/op
[info] ArraysBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                  thrpt    5      1974.087 ±      586.343  MB/sec
[info] ArraysBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                             thrpt    5       401.619 ±      104.061    B/op
[info] ArraysBenchmark.readJsoniterScala:·gc.count                                                             thrpt    5        29.000                 counts
[info] ArraysBenchmark.readJsoniterScala:·gc.time                                                              thrpt    5        23.000                     ms
[info] ArraysBenchmark.readPlayJson                                                                            thrpt    5    291557.932 ±     7673.830   ops/s
[info] ArraysBenchmark.readPlayJson:·gc.alloc.rate                                                             thrpt    5      1812.347 ±       48.088  MB/sec
[info] ArraysBenchmark.readPlayJson:·gc.alloc.rate.norm                                                        thrpt    5      9784.001 ±        0.001    B/op
[info] ArraysBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                 thrpt    5         0.041 ±        0.340  MB/sec
[info] ArraysBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                            thrpt    5         0.224 ±        1.841    B/op
[info] ArraysBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                       thrpt    5      1834.465 ±      731.247  MB/sec
[info] ArraysBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                  thrpt    5      9901.804 ±     3860.989    B/op
[info] ArraysBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                thrpt    5         0.932 ±        8.029  MB/sec
[info] ArraysBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                           thrpt    5         5.080 ±       43.738    B/op
[info] ArraysBenchmark.readPlayJson:·gc.count                                                                  thrpt    5        27.000                 counts
[info] ArraysBenchmark.readPlayJson:·gc.time                                                                   thrpt    5        45.000                     ms
[info] ArraysBenchmark.writeCirce                                                                              thrpt    5   1008160.367 ±    14962.197   ops/s
[info] ArraysBenchmark.writeCirce:·gc.alloc.rate                                                               thrpt    5      2157.053 ±       32.164  MB/sec
[info] ArraysBenchmark.writeCirce:·gc.alloc.rate.norm                                                          thrpt    5      3368.000 ±        0.001    B/op
[info] ArraysBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   thrpt    5         0.029 ±        0.241  MB/sec
[info] ArraysBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              thrpt    5         0.046 ±        0.376    B/op
[info] ArraysBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                         thrpt    5      2177.509 ±      714.407  MB/sec
[info] ArraysBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                    thrpt    5      3399.443 ±     1084.871    B/op
[info] ArraysBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                  thrpt    5         0.666 ±        5.735  MB/sec
[info] ArraysBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                             thrpt    5         1.036 ±        8.921    B/op
[info] ArraysBenchmark.writeCirce:·gc.count                                                                    thrpt    5        32.000                 counts
[info] ArraysBenchmark.writeCirce:·gc.time                                                                     thrpt    5        29.000                     ms
[info] ArraysBenchmark.writeJacksonScala                                                                       thrpt    5   2790322.826 ±   150009.311   ops/s
[info] ArraysBenchmark.writeJacksonScala:·gc.alloc.rate                                                        thrpt    5      1588.511 ±       85.905  MB/sec
[info] ArraysBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                   thrpt    5       896.000 ±        0.001    B/op
[info] ArraysBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                            thrpt    5         0.012 ±        0.094  MB/sec
[info] ArraysBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       thrpt    5         0.007 ±        0.053    B/op
[info] ArraysBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                  thrpt    5      1561.932 ±      738.075  MB/sec
[info] ArraysBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                             thrpt    5       880.768 ±      404.627    B/op
[info] ArraysBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                           thrpt    5         0.932 ±        6.687  MB/sec
[info] ArraysBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                      thrpt    5         0.535 ±        3.855    B/op
[info] ArraysBenchmark.writeJacksonScala:·gc.count                                                             thrpt    5        23.000                 counts
[info] ArraysBenchmark.writeJacksonScala:·gc.time                                                              thrpt    5        33.000                     ms
[info] ArraysBenchmark.writeJsoniterScala                                                                      thrpt    5  13981783.246 ±  1085559.789   ops/s
[info] ArraysBenchmark.writeJsoniterScala:·gc.alloc.rate                                                       thrpt    5       852.760 ±       65.938  MB/sec
[info] ArraysBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                  thrpt    5        96.000 ±        0.001    B/op
[info] ArraysBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                           thrpt    5         0.042 ±        0.223  MB/sec
[info] ArraysBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      thrpt    5         0.005 ±        0.026    B/op
[info] ArraysBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                 thrpt    5       877.341 ±      703.853  MB/sec
[info] ArraysBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                            thrpt    5        98.766 ±       78.820    B/op
[info] ArraysBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                          thrpt    5         1.066 ±        6.438  MB/sec
[info] ArraysBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                     thrpt    5         0.121 ±        0.735    B/op
[info] ArraysBenchmark.writeJsoniterScala:·gc.count                                                            thrpt    5        13.000                 counts
[info] ArraysBenchmark.writeJsoniterScala:·gc.time                                                             thrpt    5        33.000                     ms
[info] ArraysBenchmark.writeJsoniterScalaPrealloc                                                              thrpt    5  10391465.847 ±   431427.422   ops/s
[info] ArraysBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                               thrpt    5       581.009 ±       24.376  MB/sec
[info] ArraysBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                          thrpt    5        88.000 ±        0.001    B/op
[info] ArraysBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                                         thrpt    5       605.760 ±      579.770  MB/sec
[info] ArraysBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                                    thrpt    5        91.808 ±       88.568    B/op
[info] ArraysBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space                                  thrpt    5         0.266 ±        1.405  MB/sec
[info] ArraysBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm                             thrpt    5         0.041 ±        0.214    B/op
[info] ArraysBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                    thrpt    5         9.000                 counts
[info] ArraysBenchmark.writeJsoniterScalaPrealloc:·gc.time                                                     thrpt    5        28.000                     ms
[info] ArraysBenchmark.writePlayJson                                                                           thrpt    5    468588.742 ±    26610.406   ops/s
[info] ArraysBenchmark.writePlayJson:·gc.alloc.rate                                                            thrpt    5      1624.377 ±       91.606  MB/sec
[info] ArraysBenchmark.writePlayJson:·gc.alloc.rate.norm                                                       thrpt    5      5456.001 ±        0.001    B/op
[info] ArraysBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                thrpt    5         0.044 ±        0.375  MB/sec
[info] ArraysBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           thrpt    5         0.148 ±        1.251    B/op
[info] ArraysBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                      thrpt    5      1629.183 ±      578.124  MB/sec
[info] ArraysBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                 thrpt    5      5474.967 ±     2051.359    B/op
[info] ArraysBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                               thrpt    5         0.932 ±        6.687  MB/sec
[info] ArraysBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                          thrpt    5         3.138 ±       22.550    B/op
[info] ArraysBenchmark.writePlayJson:·gc.count                                                                 thrpt    5        24.000                 counts
[info] ArraysBenchmark.writePlayJson:·gc.time                                                                  thrpt    5        44.000                     ms
[info] BitSetsBenchmark.readJacksonScala                                                                       thrpt    5   1928082.894 ±   181999.275   ops/s
[info] BitSetsBenchmark.readJacksonScala:·gc.alloc.rate                                                        thrpt    5      1166.069 ±      110.062  MB/sec
[info] BitSetsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                   thrpt    5       952.000 ±        0.001    B/op
[info] BitSetsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                            thrpt    5         0.014 ±        0.117  MB/sec
[info] BitSetsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       thrpt    5         0.011 ±        0.096    B/op
[info] BitSetsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                  thrpt    5      1150.601 ±      708.369  MB/sec
[info] BitSetsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                             thrpt    5       940.431 ±      603.880    B/op
[info] BitSetsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                           thrpt    5         0.932 ±        6.686  MB/sec
[info] BitSetsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                      thrpt    5         0.778 ±        5.595    B/op
[info] BitSetsBenchmark.readJacksonScala:·gc.count                                                             thrpt    5        17.000                 counts
[info] BitSetsBenchmark.readJacksonScala:·gc.time                                                              thrpt    5        39.000                     ms
[info] BitSetsBenchmark.readJsoniterScala                                                                      thrpt    5   8519122.331 ±   879731.746   ops/s
[info] BitSetsBenchmark.readJsoniterScala:·gc.alloc.rate                                                       thrpt    5      1125.849 ±      115.182  MB/sec
[info] BitSetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                  thrpt    5       208.000 ±        0.001    B/op
[info] BitSetsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                           thrpt    5         0.017 ±        0.144  MB/sec
[info] BitSetsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      thrpt    5         0.003 ±        0.027    B/op
[info] BitSetsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                 thrpt    5      1084.604 ±      589.867  MB/sec
[info] BitSetsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                            thrpt    5       200.488 ±      110.300    B/op
[info] BitSetsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                          thrpt    5         0.666 ±        5.737  MB/sec
[info] BitSetsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                     thrpt    5         0.123 ±        1.058    B/op
[info] BitSetsBenchmark.readJsoniterScala:·gc.count                                                            thrpt    5        16.000                 counts
[info] BitSetsBenchmark.readJsoniterScala:·gc.time                                                             thrpt    5        28.000                     ms
[info] BitSetsBenchmark.readPlayJson                                                                           thrpt    5    320017.421 ±    12510.418   ops/s
[info] BitSetsBenchmark.readPlayJson:·gc.alloc.rate                                                            thrpt    5      1457.384 ±       56.081  MB/sec
[info] BitSetsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                       thrpt    5      7168.001 ±        0.001    B/op
[info] BitSetsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                thrpt    5         0.014 ±        0.106  MB/sec
[info] BitSetsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           thrpt    5         0.066 ±        0.516    B/op
[info] BitSetsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                      thrpt    5      1425.344 ±      596.807  MB/sec
[info] BitSetsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                 thrpt    5      7013.763 ±     3082.945    B/op
[info] BitSetsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                               thrpt    5         0.932 ±        6.688  MB/sec
[info] BitSetsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                          thrpt    5         4.549 ±       32.659    B/op
[info] BitSetsBenchmark.readPlayJson:·gc.count                                                                 thrpt    5        21.000                 counts
[info] BitSetsBenchmark.readPlayJson:·gc.time                                                                  thrpt    5        38.000                     ms
[info] BitSetsBenchmark.writeJacksonScala                                                                      thrpt    5   2297190.687 ±   164962.687   ops/s
[info] BitSetsBenchmark.writeJacksonScala:·gc.alloc.rate                                                       thrpt    5      1214.207 ±       87.512  MB/sec
[info] BitSetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                  thrpt    5       832.000 ±        0.001    B/op
[info] BitSetsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                           thrpt    5         0.013 ±        0.108  MB/sec
[info] BitSetsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      thrpt    5         0.009 ±        0.073    B/op
[info] BitSetsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                 thrpt    5      1218.579 ±      694.758  MB/sec
[info] BitSetsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                            thrpt    5       836.501 ±      517.153    B/op
[info] BitSetsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                          thrpt    5         0.932 ±        8.028  MB/sec
[info] BitSetsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                     thrpt    5         0.655 ±        5.637    B/op
[info] BitSetsBenchmark.writeJacksonScala:·gc.count                                                            thrpt    5        18.000                 counts
[info] BitSetsBenchmark.writeJacksonScala:·gc.time                                                             thrpt    5        41.000                     ms
[info] BitSetsBenchmark.writeJsoniterScala                                                                     thrpt    5   6187358.991 ±   517964.535   ops/s
[info] BitSetsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                      thrpt    5       943.393 ±       79.474  MB/sec
[info] BitSetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                 thrpt    5       240.000 ±        0.001    B/op
[info] BitSetsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                          thrpt    5         0.021 ±        0.177  MB/sec
[info] BitSetsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     thrpt    5         0.005 ±        0.044    B/op
[info] BitSetsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                thrpt    5       946.863 ±      590.753  MB/sec
[info] BitSetsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                           thrpt    5       240.664 ±      144.177    B/op
[info] BitSetsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                         thrpt    5         1.066 ±        6.437  MB/sec
[info] BitSetsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                    thrpt    5         0.275 ±        1.662    B/op
[info] BitSetsBenchmark.writeJsoniterScala:·gc.count                                                           thrpt    5        14.000                 counts
[info] BitSetsBenchmark.writeJsoniterScala:·gc.time                                                            thrpt    5        29.000                     ms
[info] BitSetsBenchmark.writeJsoniterScalaPrealloc                                                             thrpt    5   6383748.514 ±   450726.598   ops/s
[info] BitSetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                              thrpt    5       778.673 ±       55.024  MB/sec
[info] BitSetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                         thrpt    5       192.000 ±        0.001    B/op
[info] BitSetsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'                  thrpt    5         0.019 ±        0.167  MB/sec
[info] BitSetsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm             thrpt    5         0.005 ±        0.043    B/op
[info] BitSetsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                                        thrpt    5       809.394 ±      704.260  MB/sec
[info] BitSetsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                                   thrpt    5       199.491 ±      170.836    B/op
[info] BitSetsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space                                 thrpt    5         1.066 ±        6.438  MB/sec
[info] BitSetsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm                            thrpt    5         0.261 ±        1.571    B/op
[info] BitSetsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                   thrpt    5        12.000                 counts
[info] BitSetsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                                    thrpt    5        32.000                     ms
[info] BitSetsBenchmark.writePlayJson                                                                          thrpt    5    562939.998 ±    17656.039   ops/s
[info] BitSetsBenchmark.writePlayJson:·gc.alloc.rate                                                           thrpt    5      1631.030 ±       51.346  MB/sec
[info] BitSetsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                      thrpt    5      4560.001 ±        0.001    B/op
[info] BitSetsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                               thrpt    5         0.010 ±        0.079  MB/sec
[info] BitSetsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          thrpt    5         0.028 ±        0.219    B/op
[info] BitSetsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                     thrpt    5      1630.322 ±      616.548  MB/sec
[info] BitSetsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                thrpt    5      4559.705 ±     1789.891    B/op
[info] BitSetsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                              thrpt    5         1.066 ±        7.820  MB/sec
[info] BitSetsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                         thrpt    5         2.957 ±       21.708    B/op
[info] BitSetsBenchmark.writePlayJson:·gc.count                                                                thrpt    5        24.000                 counts
[info] BitSetsBenchmark.writePlayJson:·gc.time                                                                 thrpt    5        38.000                     ms
[info] ExtractFieldsBenchmark.readCirce                                                                        thrpt    5    740832.558 ±    26965.503   ops/s
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate                                                         thrpt    5      2409.796 ±       88.992  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm                                                    thrpt    5      5120.001 ±        0.001    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                             thrpt    5         0.015 ±        0.109  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        thrpt    5         0.031 ±        0.231    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                   thrpt    5      2450.625 ±      585.079  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                              thrpt    5      5206.693 ±     1220.226    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.count                                                              thrpt    5        36.000                 counts
[info] ExtractFieldsBenchmark.readCirce:·gc.time                                                               thrpt    5        28.000                     ms
[info] ExtractFieldsBenchmark.readDslJsonJava                                                                  thrpt    5   5067685.051 ±   472509.624   ops/s
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate                                                   thrpt    5       309.142 ±       28.972  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                              thrpt    5        96.000 ±        0.001    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                             thrpt    5       333.768 ±        0.230  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                        thrpt    5       103.695 ±        9.462    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.count                                                        thrpt    5         5.000                 counts
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.time                                                         thrpt    5        24.000                     ms
[info] ExtractFieldsBenchmark.readJacksonScala                                                                 thrpt    5    780144.628 ±    37810.868   ops/s
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate                                                  thrpt    5       967.519 ±       46.743  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                             thrpt    5      1952.001 ±        0.001    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                      thrpt    5         0.045 ±        0.330  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 thrpt    5         0.091 ±        0.671    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                            thrpt    5       945.481 ±      588.957  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                       thrpt    5      1909.974 ±     1240.825    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                     thrpt    5         1.066 ±        7.824  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                thrpt    5         2.168 ±       15.909    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.count                                                       thrpt    5        14.000                 counts
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.time                                                        thrpt    5        43.000                     ms
[info] ExtractFieldsBenchmark.readJsoniterScala                                                                thrpt    5   7384935.009 ±   615271.541   ops/s
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate                                                 thrpt    5       337.795 ±       28.111  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                            thrpt    5        72.000 ±        0.001    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                           thrpt    5       337.003 ±        0.114  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                      thrpt    5        71.858 ±        6.041    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.count                                                      thrpt    5         5.000                 counts
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.time                                                       thrpt    5        14.000                     ms
[info] ExtractFieldsBenchmark.readPlayJson                                                                     thrpt    5    256940.255 ±    13425.755   ops/s
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate                                                      thrpt    5      1428.823 ±       74.389  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                 thrpt    5      8752.002 ±        0.001    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                          thrpt    5         0.036 ±        0.246  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     thrpt    5         0.221 ±        1.537    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                thrpt    5      1423.171 ±      550.684  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                           thrpt    5      8717.501 ±     3340.737    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                         thrpt    5         0.933 ±        8.031  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                    thrpt    5         5.831 ±       50.208    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.count                                                           thrpt    5        21.000                 counts
[info] ExtractFieldsBenchmark.readPlayJson:·gc.time                                                            thrpt    5        44.000                     ms
[info] GoogleMapsAPIBenchmark.readCirce                                                                        thrpt    5      7705.825 ±      127.834   ops/s
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate                                                         thrpt    5      1854.643 ±       29.526  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm                                                    thrpt    5    378784.055 ±        0.014    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                             thrpt    5         0.105 ±        0.153  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        thrpt    5        21.474 ±       31.694    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                   thrpt    5      1836.704 ±      722.875  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                              thrpt    5    375112.616 ±   147127.601    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                            thrpt    5         0.666 ±        5.737  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                       thrpt    5       137.033 ±     1179.895    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.count                                                              thrpt    5        27.000                 counts
[info] GoogleMapsAPIBenchmark.readCirce:·gc.time                                                               thrpt    5        30.000                     ms
[info] GoogleMapsAPIBenchmark.readDslJsonJava                                                                  thrpt    5     11298.979 ±      219.427   ops/s
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate                                                   thrpt    5       260.544 ±        5.184  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                              thrpt    5     36280.039 ±        0.011    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                             thrpt    5       266.716 ±      574.128  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                        thrpt    5     37058.002 ±    79771.258    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.count                                                        thrpt    5         4.000                 counts
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.time                                                         thrpt    5        20.000                     ms
[info] GoogleMapsAPIBenchmark.readJacksonScala                                                                 thrpt    5     12900.205 ±      710.009   ops/s
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate                                                  thrpt    5       326.798 ±       18.072  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                                             thrpt    5     39872.033 ±        0.005    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                            thrpt    5       335.694 ±        0.164  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                       thrpt    5     40964.252 ±     2289.951    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.count                                                       thrpt    5         5.000                 counts
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.time                                                        thrpt    5        23.000                     ms
[info] GoogleMapsAPIBenchmark.readJsoniterScala                                                                thrpt    5     22522.109 ±     1580.177   ops/s
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                                 thrpt    5       384.889 ±       26.836  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                            thrpt    5     26896.019 ±        0.011    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                           thrpt    5       337.060 ±        0.182  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                      thrpt    5     23559.970 ±     1662.566    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count                                                      thrpt    5         5.000                 counts
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time                                                       thrpt    5        15.000                     ms
[info] GoogleMapsAPIBenchmark.readPlayJson                                                                     thrpt    5      2046.750 ±       59.541   ops/s
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate                                                      thrpt    5      1300.860 ±       37.625  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                                 thrpt    5   1000321.233 ±        8.866    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                          thrpt    5         0.031 ±        0.121  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     thrpt    5        23.976 ±       93.219    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                thrpt    5      1354.556 ±       35.599  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                           thrpt    5   1041687.593 ±    52649.421    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                         thrpt    5         0.932 ±        8.028  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                    thrpt    5       707.814 ±     6094.493    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.count                                                           thrpt    5        20.000                 counts
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.time                                                            thrpt    5        46.000                     ms
[info] GoogleMapsAPIBenchmark.writeCirce                                                                       thrpt    5      7078.472 ±      636.596   ops/s
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate                                                        thrpt    5      1449.752 ±      130.612  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm                                                   thrpt    5    322368.059 ±        0.011    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                            thrpt    5         0.095 ±        0.311  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       thrpt    5        21.113 ±       70.392    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                  thrpt    5      1494.140 ±      724.127  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                             thrpt    5    332328.367 ±   161694.242    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                           thrpt    5         0.666 ±        5.734  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                      thrpt    5       150.722 ±     1297.766    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.count                                                             thrpt    5        22.000                 counts
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.time                                                              thrpt    5        32.000                     ms
[info] GoogleMapsAPIBenchmark.writeDslJsonJava                                                                 thrpt    5     52689.554 ±     5390.237   ops/s
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate                                                  thrpt    5       492.484 ±       50.445  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                             thrpt    5     14712.008 ±        0.002    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                            thrpt    5       467.044 ±      704.225  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                       thrpt    5     13892.284 ±    20116.186    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space                                     thrpt    5         0.133 ±        1.147  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                thrpt    5         4.085 ±       35.173    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.count                                                       thrpt    5         7.000                 counts
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.time                                                        thrpt    5        37.000                     ms
[info] GoogleMapsAPIBenchmark.writeJacksonScala                                                                thrpt    5     36074.873 ±     3396.169   ops/s
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                                 thrpt    5       522.751 ±       49.469  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                            thrpt    5     22807.833 ±        0.548    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                           thrpt    5       469.986 ±      707.963  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                      thrpt    5     20606.455 ±    32204.975    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count                                                      thrpt    5         7.000                 counts
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time                                                       thrpt    5        31.000                     ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScala                                                               thrpt    5     54016.894 ±     3199.700   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                                thrpt    5       407.971 ±       23.921  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                           thrpt    5     11888.008 ±        0.001    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                          thrpt    5       403.581 ±      578.718  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                     thrpt    5     11750.894 ±    16654.984    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count                                                     thrpt    5         6.000                 counts
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time                                                      thrpt    5        18.000                     ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc                                                       thrpt    5     62160.815 ±      327.978   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                        thrpt    5         0.948 ±        0.005  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                   thrpt    5        24.007 ±        0.001    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                                             thrpt    5           ≈ 0                 counts
[info] GoogleMapsAPIBenchmark.writePlayJson                                                                    thrpt    5      4955.313 ±      222.583   ops/s
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate                                                     thrpt    5      1498.847 ±       67.750  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm                                                thrpt    5    476071.915 ±        2.179    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                         thrpt    5         0.046 ±        0.125  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    thrpt    5        14.650 ±       39.433    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                               thrpt    5      1492.669 ±      725.883  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                          thrpt    5    473874.081 ±   219807.902    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                        thrpt    5         0.932 ±        8.028  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                   thrpt    5       296.088 ±     2549.411    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.count                                                          thrpt    5        22.000                 counts
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.time                                                           thrpt    5        40.000                     ms
[info] IntAndLongMapsBenchmark.readJsoniterScala                                                               thrpt    5   5047097.606 ±   252708.502   ops/s
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.alloc.rate                                                thrpt    5      1513.474 ±       76.261  MB/sec
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                           thrpt    5       472.000 ±        0.001    B/op
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.025 ±        0.119  MB/sec
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         0.008 ±        0.037    B/op
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                          thrpt    5      1495.617 ±      725.260  MB/sec
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                     thrpt    5       466.448 ±      225.543    B/op
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.666 ±        5.735  MB/sec
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                              thrpt    5         0.205 ±        1.765    B/op
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.count                                                     thrpt    5        22.000                 counts
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.time                                                      thrpt    5        24.000                     ms
[info] IntAndLongMapsBenchmark.readPlayJson                                                                    thrpt    5    304727.606 ±    12439.768   ops/s
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.alloc.rate                                                     thrpt    5      1763.967 ±       72.712  MB/sec
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                thrpt    5      9112.001 ±        0.001    B/op
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                         thrpt    5         0.010 ±        0.057  MB/sec
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    thrpt    5         0.053 ±        0.296    B/op
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                               thrpt    5      1834.004 ±      698.225  MB/sec
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                          thrpt    5      9475.220 ±     3655.793    B/op
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                        thrpt    5         0.932 ±        8.028  MB/sec
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                   thrpt    5         4.873 ±       41.956    B/op
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.count                                                          thrpt    5        27.000                 counts
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.time                                                           thrpt    5        39.000                     ms
[info] IntAndLongMapsBenchmark.writeJsoniterScala                                                              thrpt    5   3071190.406 ±   284110.243   ops/s
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.alloc.rate                                               thrpt    5       499.511 ±       46.021  MB/sec
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                          thrpt    5       256.000 ±        0.001    B/op
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                         thrpt    5       471.052 ±      708.978  MB/sec
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                    thrpt    5       241.609 ±      365.601    B/op
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                  thrpt    5         0.133 ±        1.147  MB/sec
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                             thrpt    5         0.067 ±        0.574    B/op
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.count                                                    thrpt    5         7.000                 counts
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.time                                                     thrpt    5        21.000                     ms
[info] IntAndLongMapsBenchmark.writeJsoniterScalaPrealloc                                                      thrpt    5   3244642.929 ±    17116.870   ops/s
[info] IntAndLongMapsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                       thrpt    5       379.260 ±        1.974  MB/sec
[info] IntAndLongMapsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                  thrpt    5       184.000 ±        0.001    B/op
[info] IntAndLongMapsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                                 thrpt    5       336.465 ±        1.129  MB/sec
[info] IntAndLongMapsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                            thrpt    5       163.238 ±        1.236    B/op
[info] IntAndLongMapsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space                          thrpt    5         0.133 ±        1.147  MB/sec
[info] IntAndLongMapsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm                     thrpt    5         0.065 ±        0.556    B/op
[info] IntAndLongMapsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                            thrpt    5         5.000                 counts
[info] IntAndLongMapsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                             thrpt    5        15.000                     ms
[info] IntAndLongMapsBenchmark.writePlayJson                                                                   thrpt    5    354041.016 ±    13545.293   ops/s
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.alloc.rate                                                    thrpt    5      1378.262 ±       53.001  MB/sec
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.alloc.rate.norm                                               thrpt    5      6128.001 ±        0.001    B/op
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                        thrpt    5         0.036 ±        0.234  MB/sec
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   thrpt    5         0.160 ±        1.047    B/op
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                              thrpt    5      1422.892 ±      551.396  MB/sec
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                         thrpt    5      6330.292 ±     2640.508    B/op
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                       thrpt    5         1.066 ±        7.821  MB/sec
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                  thrpt    5         4.768 ±       34.962    B/op
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.count                                                         thrpt    5        21.000                 counts
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.time                                                          thrpt    5        44.000                     ms
[info] IntBenchmark.readCirce                                                                                  thrpt    5   6468457.728 ±   392078.885   ops/s
[info] IntBenchmark.readCirce:·gc.alloc.rate                                                                   thrpt    5      3912.491 ±      236.101  MB/sec
[info] IntBenchmark.readCirce:·gc.alloc.rate.norm                                                              thrpt    5       952.000 ±        0.001    B/op
[info] IntBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                       thrpt    5         0.001 ±        0.009  MB/sec
[info] IntBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                  thrpt    5        ≈ 10⁻³                   B/op
[info] IntBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                             thrpt    5      3880.321 ±      718.909  MB/sec
[info] IntBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                        thrpt    5       944.432 ±      191.305    B/op
[info] IntBenchmark.readCirce:·gc.count                                                                        thrpt    5        57.000                 counts
[info] IntBenchmark.readCirce:·gc.time                                                                         thrpt    5        51.000                     ms
[info] IntBenchmark.readDslJsonJava                                                                            thrpt    5  36948791.514 ±  4625777.408   ops/s
[info] IntBenchmark.readDslJsonJava:·gc.alloc.rate                                                             thrpt    5       375.620 ±       46.931  MB/sec
[info] IntBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                        thrpt    5        16.000 ±        0.001    B/op
[info] IntBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                       thrpt    5       333.735 ±        0.160  MB/sec
[info] IntBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                  thrpt    5        14.228 ±        1.797    B/op
[info] IntBenchmark.readDslJsonJava:·gc.count                                                                  thrpt    5         5.000                 counts
[info] IntBenchmark.readDslJsonJava:·gc.time                                                                   thrpt    5        24.000                     ms
[info] IntBenchmark.readJacksonScala                                                                           thrpt    5   6336909.061 ±   660550.664   ops/s
[info] IntBenchmark.readJacksonScala:·gc.alloc.rate                                                            thrpt    5      2673.140 ±      279.179  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                       thrpt    5       664.000 ±        0.001    B/op
[info] IntBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                thrpt    5         0.001 ±        0.006  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           thrpt    5        ≈ 10⁻³                   B/op
[info] IntBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                      thrpt    5      2654.716 ±      586.630  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                 thrpt    5       659.256 ±      115.182    B/op
[info] IntBenchmark.readJacksonScala:·gc.count                                                                 thrpt    5        39.000                 counts
[info] IntBenchmark.readJacksonScala:·gc.time                                                                  thrpt    5        30.000                     ms
[info] IntBenchmark.readJsoniterScala                                                                          thrpt    5  34586312.245 ±   161402.843   ops/s
[info] IntBenchmark.readJsoniterScala:·gc.alloc.rate                                                           thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] IntBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                      thrpt    5        ≈ 10⁻⁵                   B/op
[info] IntBenchmark.readJsoniterScala:·gc.count                                                                thrpt    5           ≈ 0                 counts
[info] IntBenchmark.readNaiveScala                                                                             thrpt    5  26259039.511 ±  7179019.439   ops/s
[info] IntBenchmark.readNaiveScala:·gc.alloc.rate                                                              thrpt    5       934.457 ±      255.241  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.alloc.rate.norm                                                         thrpt    5        56.000 ±        0.001    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  thrpt    5         0.021 ±        0.115  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             thrpt    5         0.001 ±        0.007    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.G1_Old_Gen                                                        thrpt    5       947.913 ±      574.944  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.G1_Old_Gen.norm                                                   thrpt    5        56.689 ±       29.041    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.G1_Survivor_Space                                                 thrpt    5         0.666 ±        5.736  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.G1_Survivor_Space.norm                                            thrpt    5         0.039 ±        0.339    B/op
[info] IntBenchmark.readNaiveScala:·gc.count                                                                   thrpt    5        14.000                 counts
[info] IntBenchmark.readNaiveScala:·gc.time                                                                    thrpt    5        27.000                     ms
[info] IntBenchmark.readPlayJson                                                                               thrpt    5   5850300.860 ±   523992.024   ops/s
[info] IntBenchmark.readPlayJson:·gc.alloc.rate                                                                thrpt    5      2824.772 ±      252.212  MB/sec
[info] IntBenchmark.readPlayJson:·gc.alloc.rate.norm                                                           thrpt    5       760.000 ±        0.001    B/op
[info] IntBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                    thrpt    5         0.002 ±        0.005  MB/sec
[info] IntBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                               thrpt    5         0.001 ±        0.001    B/op
[info] IntBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                          thrpt    5      2858.854 ±      716.560  MB/sec
[info] IntBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                     thrpt    5       768.625 ±      128.426    B/op
[info] IntBenchmark.readPlayJson:·gc.count                                                                     thrpt    5        42.000                 counts
[info] IntBenchmark.readPlayJson:·gc.time                                                                      thrpt    5        34.000                     ms
[info] IntBenchmark.writeCirce                                                                                 thrpt    5  20421803.277 ±  1533215.746   ops/s
[info] IntBenchmark.writeCirce:·gc.alloc.rate                                                                  thrpt    5      1868.276 ±      140.742  MB/sec
[info] IntBenchmark.writeCirce:·gc.alloc.rate.norm                                                             thrpt    5       144.000 ±        0.001    B/op
[info] IntBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                      thrpt    5         0.017 ±        0.135  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                 thrpt    5         0.001 ±        0.010    B/op
[info] IntBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                            thrpt    5      1836.620 ±      711.982  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                       thrpt    5       141.624 ±       56.851    B/op
[info] IntBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                     thrpt    5         0.666 ±        5.737  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                                thrpt    5         0.051 ±        0.437    B/op
[info] IntBenchmark.writeCirce:·gc.count                                                                       thrpt    5        27.000                 counts
[info] IntBenchmark.writeCirce:·gc.time                                                                        thrpt    5        26.000                     ms
[info] IntBenchmark.writeDslJsonJava                                                                           thrpt    5  54082417.701 ±  3904330.153   ops/s
[info] IntBenchmark.writeDslJsonJava:·gc.alloc.rate                                                            thrpt    5      1649.470 ±      119.901  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                       thrpt    5        48.000 ±        0.001    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'                                thrpt    5         0.122 ±        1.049  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           thrpt    5         0.004 ±        0.030    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                                      thrpt    5      1625.424 ±      569.833  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                 thrpt    5        47.339 ±       18.009    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space                                               thrpt    5         1.332 ±       11.470  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                          thrpt    5         0.039 ±        0.333    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.count                                                                 thrpt    5        24.000                 counts
[info] IntBenchmark.writeDslJsonJava:·gc.time                                                                  thrpt    5        47.000                     ms
[info] IntBenchmark.writeJacksonScala                                                                          thrpt    5  10710367.712 ±   416307.184   ops/s
[info] IntBenchmark.writeJacksonScala:·gc.alloc.rate                                                           thrpt    5      2122.791 ±       82.352  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                      thrpt    5       312.000 ±        0.001    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                               thrpt    5         0.020 ±        0.167  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          thrpt    5         0.003 ±        0.025    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                     thrpt    5      2109.241 ±      587.965  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                thrpt    5       310.125 ±       93.654    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                              thrpt    5         0.799 ±        6.881  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                         thrpt    5         0.118 ±        1.013    B/op
[info] IntBenchmark.writeJacksonScala:·gc.count                                                                thrpt    5        31.000                 counts
[info] IntBenchmark.writeJacksonScala:·gc.time                                                                 thrpt    5        31.000                     ms
[info] IntBenchmark.writeJsoniterScala                                                                         thrpt    5  41180839.446 ± 14901761.627   ops/s
[info] IntBenchmark.writeJsoniterScala:·gc.alloc.rate                                                          thrpt    5       837.224 ±      302.744  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                     thrpt    5        32.000 ±        0.001    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                              thrpt    5         0.034 ±        0.191  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         thrpt    5         0.001 ±        0.008    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                    thrpt    5       810.079 ±      709.009  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                               thrpt    5        31.117 ±       27.837    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                             thrpt    5         1.199 ±        6.123  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                        thrpt    5         0.047 ±        0.251    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.count                                                               thrpt    5        12.000                 counts
[info] IntBenchmark.writeJsoniterScala:·gc.time                                                                thrpt    5        30.000                     ms
[info] IntBenchmark.writeJsoniterScalaPrealloc                                                                 thrpt    5  50347438.140 ±  2647757.397   ops/s
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                             thrpt    5        ≈ 10⁻⁵                   B/op
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                       thrpt    5           ≈ 0                 counts
[info] IntBenchmark.writeNaiveScala                                                                            thrpt    5  39803702.999 ±   884115.943   ops/s
[info] IntBenchmark.writeNaiveScala:·gc.alloc.rate                                                             thrpt    5      2023.155 ±       45.788  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.alloc.rate.norm                                                        thrpt    5        80.000 ±        0.001    B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                 thrpt    5         0.003 ±        0.003  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                            thrpt    5        ≈ 10⁻⁴                   B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.G1_Old_Gen                                                       thrpt    5      2042.295 ±        1.256  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.G1_Old_Gen.norm                                                  thrpt    5        80.759 ±        1.792    B/op
[info] IntBenchmark.writeNaiveScala:·gc.count                                                                  thrpt    5        30.000                 counts
[info] IntBenchmark.writeNaiveScala:·gc.time                                                                   thrpt    5        25.000                     ms
[info] IntBenchmark.writePlayJson                                                                              thrpt    5   2057605.444 ±   157369.723   ops/s
[info] IntBenchmark.writePlayJson:·gc.alloc.rate                                                               thrpt    5      1683.587 ±      128.585  MB/sec
[info] IntBenchmark.writePlayJson:·gc.alloc.rate.norm                                                          thrpt    5      1288.000 ±        0.001    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   thrpt    5         0.035 ±        0.288  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              thrpt    5         0.028 ±        0.228    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                         thrpt    5      1699.309 ±       20.440  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                    thrpt    5      1300.385 ±       86.840    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                  thrpt    5         0.799 ±        6.882  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                             thrpt    5         0.632 ±        5.440    B/op
[info] IntBenchmark.writePlayJson:·gc.count                                                                    thrpt    5        25.000                 counts
[info] IntBenchmark.writePlayJson:·gc.time                                                                     thrpt    5        28.000                     ms
[info] IterablesBenchmark.readCirce                                                                            thrpt    5    568245.604 ±    31589.089   ops/s
[info] IterablesBenchmark.readCirce:·gc.alloc.rate                                                             thrpt    5      2044.821 ±      114.539  MB/sec
[info] IterablesBenchmark.readCirce:·gc.alloc.rate.norm                                                        thrpt    5      5664.001 ±        0.001    B/op
[info] IterablesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                 thrpt    5         0.046 ±        0.375  MB/sec
[info] IterablesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                            thrpt    5         0.127 ±        1.032    B/op
[info] IterablesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                       thrpt    5      2042.197 ±        1.456  MB/sec
[info] IterablesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                  thrpt    5      5657.695 ±      318.348    B/op
[info] IterablesBenchmark.readCirce:·gc.count                                                                  thrpt    5        30.000                 counts
[info] IterablesBenchmark.readCirce:·gc.time                                                                   thrpt    5        27.000                     ms
[info] IterablesBenchmark.readJacksonScala                                                                     thrpt    5    551683.650 ±     9417.625   ops/s
[info] IterablesBenchmark.readJacksonScala:·gc.alloc.rate                                                      thrpt    5       658.997 ±       11.353  MB/sec
[info] IterablesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                 thrpt    5      1880.001 ±        0.001    B/op
[info] IterablesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                thrpt    5       671.340 ±        1.254  MB/sec
[info] IterablesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                           thrpt    5      1915.244 ±       32.660    B/op
[info] IterablesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                         thrpt    5         0.133 ±        1.147  MB/sec
[info] IterablesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                    thrpt    5         0.380 ±        3.274    B/op
[info] IterablesBenchmark.readJacksonScala:·gc.count                                                           thrpt    5        10.000                 counts
[info] IterablesBenchmark.readJacksonScala:·gc.time                                                            thrpt    5        46.000                     ms
[info] IterablesBenchmark.readJsoniterScala                                                                    thrpt    5   3560878.830 ±   166544.458   ops/s
[info] IterablesBenchmark.readJsoniterScala:·gc.alloc.rate                                                     thrpt    5      1411.707 ±       66.321  MB/sec
[info] IterablesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                thrpt    5       624.000 ±        0.001    B/op
[info] IterablesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                         thrpt    5         0.021 ±        0.172  MB/sec
[info] IterablesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    thrpt    5         0.009 ±        0.075    B/op
[info] IterablesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                               thrpt    5      1358.815 ±       23.082  MB/sec
[info] IterablesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                          thrpt    5       600.690 ±       28.952    B/op
[info] IterablesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                        thrpt    5         0.666 ±        5.735  MB/sec
[info] IterablesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                   thrpt    5         0.295 ±        2.542    B/op
[info] IterablesBenchmark.readJsoniterScala:·gc.count                                                          thrpt    5        20.000                 counts
[info] IterablesBenchmark.readJsoniterScala:·gc.time                                                           thrpt    5        26.000                     ms
[info] IterablesBenchmark.readPlayJson                                                                         thrpt    5    209143.065 ±     3404.175   ops/s
[info] IterablesBenchmark.readPlayJson:·gc.alloc.rate                                                          thrpt    5      1462.719 ±       24.404  MB/sec
[info] IterablesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                     thrpt    5     11008.002 ±        0.001    B/op
[info] IterablesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                              thrpt    5         0.014 ±        0.068  MB/sec
[info] IterablesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         thrpt    5         0.106 ±        0.510    B/op
[info] IterablesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                    thrpt    5      1423.872 ±      599.426  MB/sec
[info] IterablesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                               thrpt    5     10714.763 ±     4463.193    B/op
[info] IterablesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                             thrpt    5         0.932 ±        8.029  MB/sec
[info] IterablesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                        thrpt    5         7.056 ±       60.758    B/op
[info] IterablesBenchmark.readPlayJson:·gc.count                                                               thrpt    5        21.000                 counts
[info] IterablesBenchmark.readPlayJson:·gc.time                                                                thrpt    5        43.000                     ms
[info] IterablesBenchmark.writeCirce                                                                           thrpt    5    825292.095 ±    20246.331   ops/s
[info] IterablesBenchmark.writeCirce:·gc.alloc.rate                                                            thrpt    5      1837.253 ±       44.398  MB/sec
[info] IterablesBenchmark.writeCirce:·gc.alloc.rate.norm                                                       thrpt    5      3504.001 ±        0.001    B/op
[info] IterablesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                thrpt    5         0.035 ±        0.288  MB/sec
[info] IterablesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           thrpt    5         0.067 ±        0.555    B/op
[info] IterablesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                      thrpt    5      1836.625 ±      721.648  MB/sec
[info] IterablesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                 thrpt    5      3502.583 ±     1362.794    B/op
[info] IterablesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                               thrpt    5         0.666 ±        5.737  MB/sec
[info] IterablesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                          thrpt    5         1.283 ±       11.046    B/op
[info] IterablesBenchmark.writeCirce:·gc.count                                                                 thrpt    5        27.000                 counts
[info] IterablesBenchmark.writeCirce:·gc.time                                                                  thrpt    5        35.000                     ms
[info] IterablesBenchmark.writeJacksonScala                                                                    thrpt    5   1194248.200 ±   100770.102   ops/s
[info] IterablesBenchmark.writeJacksonScala:·gc.alloc.rate                                                     thrpt    5       807.265 ±       68.132  MB/sec
[info] IterablesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                thrpt    5      1064.000 ±        0.001    B/op
[info] IterablesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                         thrpt    5         0.006 ±        0.053  MB/sec
[info] IterablesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    thrpt    5         0.008 ±        0.069    B/op
[info] IterablesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                               thrpt    5       807.266 ±      702.600  MB/sec
[info] IterablesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                          thrpt    5      1061.925 ±      871.654    B/op
[info] IterablesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                        thrpt    5         1.066 ±        6.438  MB/sec
[info] IterablesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                   thrpt    5         1.393 ±        8.352    B/op
[info] IterablesBenchmark.writeJacksonScala:·gc.count                                                          thrpt    5        12.000                 counts
[info] IterablesBenchmark.writeJacksonScala:·gc.time                                                           thrpt    5        48.000                     ms
[info] IterablesBenchmark.writeJsoniterScala                                                                   thrpt    5   6697312.378 ±   198360.843   ops/s
[info] IterablesBenchmark.writeJsoniterScala:·gc.alloc.rate                                                    thrpt    5       749.012 ±       21.942  MB/sec
[info] IterablesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                               thrpt    5       176.000 ±        0.001    B/op
[info] IterablesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                        thrpt    5         0.001 ±        0.011  MB/sec
[info] IterablesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   thrpt    5        ≈ 10⁻⁴                   B/op
[info] IterablesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                              thrpt    5       741.088 ±      586.158  MB/sec
[info] IterablesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                         thrpt    5       174.323 ±      143.048    B/op
[info] IterablesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                       thrpt    5         0.933 ±        6.690  MB/sec
[info] IterablesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                  thrpt    5         0.221 ±        1.590    B/op
[info] IterablesBenchmark.writeJsoniterScala:·gc.count                                                         thrpt    5        11.000                 counts
[info] IterablesBenchmark.writeJsoniterScala:·gc.time                                                          thrpt    5        32.000                     ms
[info] IterablesBenchmark.writeJsoniterScalaPrealloc                                                           thrpt    5   6917750.234 ±   604838.624   ops/s
[info] IterablesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                            thrpt    5       492.270 ±       43.159  MB/sec
[info] IterablesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                       thrpt    5       112.000 ±        0.001    B/op
[info] IterablesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                                      thrpt    5       471.350 ±      710.474  MB/sec
[info] IterablesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                                 thrpt    5       106.814 ±      155.199    B/op
[info] IterablesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space                               thrpt    5         0.133 ±        1.147  MB/sec
[info] IterablesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm                          thrpt    5         0.031 ±        0.268    B/op
[info] IterablesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                 thrpt    5         7.000                 counts
[info] IterablesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                                  thrpt    5        21.000                     ms
[info] IterablesBenchmark.writePlayJson                                                                        thrpt    5    475682.308 ±    22256.702   ops/s
[info] IterablesBenchmark.writePlayJson:·gc.alloc.rate                                                         thrpt    5      1627.133 ±       76.884  MB/sec
[info] IterablesBenchmark.writePlayJson:·gc.alloc.rate.norm                                                    thrpt    5      5384.001 ±        0.001    B/op
[info] IterablesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                             thrpt    5         0.017 ±        0.130  MB/sec
[info] IterablesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        thrpt    5         0.056 ±        0.423    B/op
[info] IterablesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                   thrpt    5      1629.240 ±      578.073  MB/sec
[info] IterablesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                              thrpt    5      5387.769 ±     1742.179    B/op
[info] IterablesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                            thrpt    5         1.199 ±        8.957  MB/sec
[info] IterablesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                       thrpt    5         3.995 ±       29.934    B/op
[info] IterablesBenchmark.writePlayJson:·gc.count                                                              thrpt    5        24.000                 counts
[info] IterablesBenchmark.writePlayJson:·gc.time                                                               thrpt    5        39.000                     ms
[info] MapsBenchmark.readCirce                                                                                 thrpt    5    606562.376 ±    14052.379   ops/s
[info] MapsBenchmark.readCirce:·gc.alloc.rate                                                                  thrpt    5      2105.531 ±       48.673  MB/sec
[info] MapsBenchmark.readCirce:·gc.alloc.rate.norm                                                             thrpt    5      5464.001 ±        0.001    B/op
[info] MapsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                      thrpt    5         0.025 ±        0.204  MB/sec
[info] MapsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                 thrpt    5         0.066 ±        0.534    B/op
[info] MapsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                            thrpt    5      2109.480 ±      580.156  MB/sec
[info] MapsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                       thrpt    5      5476.021 ±     1626.036    B/op
[info] MapsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                     thrpt    5         0.666 ±        5.735  MB/sec
[info] MapsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                                thrpt    5         1.744 ±       15.019    B/op
[info] MapsBenchmark.readCirce:·gc.count                                                                       thrpt    5        31.000                 counts
[info] MapsBenchmark.readCirce:·gc.time                                                                        thrpt    5        27.000                     ms
[info] MapsBenchmark.readJacksonScala                                                                          thrpt    5    567497.240 ±    31232.944   ops/s
[info] MapsBenchmark.readJacksonScala:·gc.alloc.rate                                                           thrpt    5       876.828 ±       48.457  MB/sec
[info] MapsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                      thrpt    5      2432.001 ±        0.001    B/op
[info] MapsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                               thrpt    5         0.042 ±        0.359  MB/sec
[info] MapsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          thrpt    5         0.118 ±        1.017    B/op
[info] MapsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                     thrpt    5       875.347 ±      718.570  MB/sec
[info] MapsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                thrpt    5      2431.809 ±     2071.074    B/op
[info] MapsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                              thrpt    5         1.066 ±        6.437  MB/sec
[info] MapsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                         thrpt    5         2.953 ±       17.810    B/op
[info] MapsBenchmark.readJacksonScala:·gc.count                                                                thrpt    5        13.000                 counts
[info] MapsBenchmark.readJacksonScala:·gc.time                                                                 thrpt    5        49.000                     ms
[info] MapsBenchmark.readJsoniterScala                                                                         thrpt    5   4403328.583 ±   109574.098   ops/s
[info] MapsBenchmark.readJsoniterScala:·gc.alloc.rate                                                          thrpt    5      1096.559 ±       27.102  MB/sec
[info] MapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                     thrpt    5       392.000 ±        0.001    B/op
[info] MapsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                              thrpt    5         0.018 ±        0.150  MB/sec
[info] MapsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         thrpt    5         0.006 ±        0.053    B/op
[info] MapsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                    thrpt    5      1152.503 ±      711.222  MB/sec
[info] MapsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                               thrpt    5       412.271 ±      262.611    B/op
[info] MapsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                             thrpt    5         0.666 ±        5.734  MB/sec
[info] MapsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                        thrpt    5         0.237 ±        2.037    B/op
[info] MapsBenchmark.readJsoniterScala:·gc.count                                                               thrpt    5        17.000                 counts
[info] MapsBenchmark.readJsoniterScala:·gc.time                                                                thrpt    5        29.000                     ms
[info] MapsBenchmark.readPlayJson                                                                              thrpt    5    298466.409 ±    16159.496   ops/s
[info] MapsBenchmark.readPlayJson:·gc.alloc.rate                                                               thrpt    5      1551.779 ±       84.491  MB/sec
[info] MapsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                          thrpt    5      8184.001 ±        0.001    B/op
[info] MapsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   thrpt    5         0.014 ±        0.114  MB/sec
[info] MapsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              thrpt    5         0.077 ±        0.614    B/op
[info] MapsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                         thrpt    5      1561.455 ±      732.622  MB/sec
[info] MapsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                    thrpt    5      8244.759 ±     4194.065    B/op
[info] MapsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                  thrpt    5         0.932 ±        6.688  MB/sec
[info] MapsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                             thrpt    5         4.993 ±       35.947    B/op
[info] MapsBenchmark.readPlayJson:·gc.count                                                                    thrpt    5        23.000                 counts
[info] MapsBenchmark.readPlayJson:·gc.time                                                                     thrpt    5        45.000                     ms
[info] MapsBenchmark.writeCirce                                                                                thrpt    5    418224.464 ±    16880.376   ops/s
[info] MapsBenchmark.writeCirce:·gc.alloc.rate                                                                 thrpt    5      1041.642 ±       42.597  MB/sec
[info] MapsBenchmark.writeCirce:·gc.alloc.rate.norm                                                            thrpt    5      3920.001 ±        0.001    B/op
[info] MapsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                     thrpt    5         0.029 ±        0.194  MB/sec
[info] MapsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                thrpt    5         0.109 ±        0.738    B/op
[info] MapsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                           thrpt    5      1083.271 ±      570.982  MB/sec
[info] MapsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                      thrpt    5      4074.154 ±     2032.151    B/op
[info] MapsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                    thrpt    5         0.666 ±        5.735  MB/sec
[info] MapsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                               thrpt    5         2.516 ±       21.662    B/op
[info] MapsBenchmark.writeCirce:·gc.count                                                                      thrpt    5        16.000                 counts
[info] MapsBenchmark.writeCirce:·gc.time                                                                       thrpt    5        36.000                     ms
[info] MapsBenchmark.writeJsoniterScala                                                                        thrpt    5   3045927.149 ±   287669.681   ops/s
[info] MapsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                         thrpt    5       588.278 ±       55.605  MB/sec
[info] MapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                    thrpt    5       304.000 ±        0.001    B/op
[info] MapsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                   thrpt    5       538.205 ±      709.516  MB/sec
[info] MapsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                              thrpt    5       277.733 ±      361.530    B/op
[info] MapsBenchmark.writeJsoniterScala:·gc.count                                                              thrpt    5         8.000                 counts
[info] MapsBenchmark.writeJsoniterScala:·gc.time                                                               thrpt    5        24.000                     ms
[info] MapsBenchmark.writeJsoniterScalaPrealloc                                                                thrpt    5   2996964.756 ±    95157.583   ops/s
[info] MapsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                 thrpt    5       502.624 ±       15.967  MB/sec
[info] MapsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                            thrpt    5       264.000 ±        0.001    B/op
[info] MapsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                                           thrpt    5       471.143 ±      710.849  MB/sec
[info] MapsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                                      thrpt    5       247.871 ±      378.925    B/op
[info] MapsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.133 ±        1.147  MB/sec
[info] MapsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm                               thrpt    5         0.070 ±        0.604    B/op
[info] MapsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                      thrpt    5         7.000                 counts
[info] MapsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                                       thrpt    5        22.000                     ms
[info] MapsBenchmark.writePlayJson                                                                             thrpt    5    348078.894 ±     6784.717   ops/s
[info] MapsBenchmark.writePlayJson:·gc.alloc.rate                                                              thrpt    5      1257.781 ±       24.531  MB/sec
[info] MapsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                         thrpt    5      5688.001 ±        0.001    B/op
[info] MapsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  thrpt    5         0.046 ±        0.390  MB/sec
[info] MapsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             thrpt    5         0.206 ±        1.760    B/op
[info] MapsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                        thrpt    5      1218.955 ±      718.622  MB/sec
[info] MapsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                   thrpt    5      5513.465 ±     3278.643    B/op
[info] MapsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                 thrpt    5         1.199 ±        6.387  MB/sec
[info] MapsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                            thrpt    5         5.436 ±       28.931    B/op
[info] MapsBenchmark.writePlayJson:·gc.count                                                                   thrpt    5        18.000                 counts
[info] MapsBenchmark.writePlayJson:·gc.time                                                                    thrpt    5        42.000                     ms
[info] MissingReqFieldBenchmark.readCirce                                                                      thrpt    5   1968048.761 ±    97829.671   ops/s
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate                                                       thrpt    5      2830.799 ±      141.133  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm                                                  thrpt    5      2264.000 ±        0.001    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                           thrpt    5         0.001 ±        0.004  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      thrpt    5         0.001 ±        0.003    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                 thrpt    5      2859.144 ±      718.609  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                            thrpt    5      2287.029 ±      589.620    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.count                                                            thrpt    5        42.000                 counts
[info] MissingReqFieldBenchmark.readCirce:·gc.time                                                             thrpt    5        33.000                     ms
[info] MissingReqFieldBenchmark.readDslJsonJava                                                                thrpt    5    870058.704 ±    53987.739   ops/s
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate                                                 thrpt    5       517.412 ±       32.266  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                            thrpt    5       936.000 ±        0.001    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                           thrpt    5       467.217 ±      703.888  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                      thrpt    5       844.790 ±     1266.754    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.count                                                      thrpt    5         7.000                 counts
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.time                                                       thrpt    5        33.000                     ms
[info] MissingReqFieldBenchmark.readJacksonScala                                                               thrpt    5    287960.308 ±    11294.938   ops/s
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate                                                thrpt    5       544.475 ±       21.102  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm                                           thrpt    5      2976.001 ±        0.001    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                          thrpt    5       538.064 ±      708.902  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                     thrpt    5      2938.829 ±     3846.467    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.133 ±        1.147  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                              thrpt    5         0.727 ±        6.259    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.count                                                     thrpt    5         8.000                 counts
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.time                                                      thrpt    5        35.000                     ms
[info] MissingReqFieldBenchmark.readJsoniterScala                                                              thrpt    5    735897.684 ±    53218.304   ops/s
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate                                               thrpt    5       553.513 ±       40.031  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                          thrpt    5      1184.001 ±        0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                         thrpt    5       539.219 ±      710.852  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                    thrpt    5      1155.386 ±     1544.358    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.count                                                    thrpt    5         8.000                 counts
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.time                                                     thrpt    5        21.000                     ms
[info] MissingReqFieldBenchmark.readJsoniterStackless                                                          thrpt    5   4105359.000 ±   383744.474   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate                                           thrpt    5      1314.573 ±      123.913  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm                                      thrpt    5       504.000 ±        0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.CodeHeap_'non-profiled_nmethods'               thrpt    5         0.018 ±        0.133  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm          thrpt    5         0.007 ±        0.052    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Old_Gen                                     thrpt    5      1290.089 ±      586.942  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Old_Gen.norm                                thrpt    5       494.617 ±      222.384    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Survivor_Space                              thrpt    5         0.666 ±        5.734  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Survivor_Space.norm                         thrpt    5         0.258 ±        2.219    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.count                                                thrpt    5        19.000                 counts
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.time                                                 thrpt    5        25.000                     ms
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump                                                    thrpt    5   7954270.541 ±   485059.671   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate                                     thrpt    5       646.829 ±       39.455  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm                                thrpt    5       128.000 ±        0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.G1_Old_Gen                               thrpt    5       606.773 ±      580.713  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.G1_Old_Gen.norm                          thrpt    5       120.297 ±      117.713    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.G1_Survivor_Space                        thrpt    5         0.133 ±        1.147  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.G1_Survivor_Space.norm                   thrpt    5         0.026 ±        0.223    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count                                          thrpt    5         9.000                 counts
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time                                           thrpt    5        24.000                     ms
[info] MissingReqFieldBenchmark.readPlayJson                                                                   thrpt    5    186867.399 ±     8846.172   ops/s
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate                                                    thrpt    5      1267.900 ±       60.606  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm                                               thrpt    5     10680.002 ±        0.001    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                        thrpt    5         0.030 ±        0.258  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   thrpt    5         0.254 ±        2.162    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                              thrpt    5      1286.265 ±      571.083  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                         thrpt    5     10837.317 ±     4878.791    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                       thrpt    5         0.932 ±        8.027  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                  thrpt    5         7.943 ±       68.387    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.count                                                         thrpt    5        19.000                 counts
[info] MissingReqFieldBenchmark.readPlayJson:·gc.time                                                          thrpt    5        49.000                     ms
[info] MutableIterablesBenchmark.readCirce                                                                     thrpt    5    667476.578 ±    18270.050   ops/s
[info] MutableIterablesBenchmark.readCirce:·gc.alloc.rate                                                      thrpt    5      2541.162 ±       69.414  MB/sec
[info] MutableIterablesBenchmark.readCirce:·gc.alloc.rate.norm                                                 thrpt    5      5992.001 ±        0.001    B/op
[info] MutableIterablesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                          thrpt    5         0.005 ±        0.011  MB/sec
[info] MutableIterablesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     thrpt    5         0.011 ±        0.025    B/op
[info] MutableIterablesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                thrpt    5      2586.995 ±      717.714  MB/sec
[info] MutableIterablesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                           thrpt    5      6098.233 ±     1559.674    B/op
[info] MutableIterablesBenchmark.readCirce:·gc.count                                                           thrpt    5        38.000                 counts
[info] MutableIterablesBenchmark.readCirce:·gc.time                                                            thrpt    5        30.000                     ms
[info] MutableIterablesBenchmark.readJsoniterScala                                                             thrpt    5   3284954.943 ±    51895.528   ops/s
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.alloc.rate                                              thrpt    5      2120.291 ±       33.728  MB/sec
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         thrpt    5      1016.000 ±        0.001    B/op
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                  thrpt    5         0.017 ±        0.133  MB/sec
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm             thrpt    5         0.008 ±        0.064    B/op
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                        thrpt    5      2178.256 ±      717.543  MB/sec
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                   thrpt    5      1044.074 ±      360.369    B/op
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.count                                                   thrpt    5        32.000                 counts
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.time                                                    thrpt    5        25.000                     ms
[info] MutableIterablesBenchmark.readPlayJson                                                                  thrpt    5    234125.470 ±    10117.079   ops/s
[info] MutableIterablesBenchmark.readPlayJson:·gc.alloc.rate                                                   thrpt    5      1676.927 ±       71.805  MB/sec
[info] MutableIterablesBenchmark.readPlayJson:·gc.alloc.rate.norm                                              thrpt    5     11272.002 ±        0.001    B/op
[info] MutableIterablesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                       thrpt    5         0.012 ±        0.097  MB/sec
[info] MutableIterablesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  thrpt    5         0.082 ±        0.648    B/op
[info] MutableIterablesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                             thrpt    5      1697.463 ±       39.697  MB/sec
[info] MutableIterablesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                        thrpt    5     11410.600 ±      259.330    B/op
[info] MutableIterablesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                      thrpt    5         0.933 ±        8.032  MB/sec
[info] MutableIterablesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                 thrpt    5         6.389 ±       55.014    B/op
[info] MutableIterablesBenchmark.readPlayJson:·gc.count                                                        thrpt    5        25.000                 counts
[info] MutableIterablesBenchmark.readPlayJson:·gc.time                                                         thrpt    5        39.000                     ms
[info] MutableIterablesBenchmark.writeCirce                                                                    thrpt    5    721809.140 ±    60455.569   ops/s
[info] MutableIterablesBenchmark.writeCirce:·gc.alloc.rate                                                     thrpt    5      1544.552 ±      129.094  MB/sec
[info] MutableIterablesBenchmark.writeCirce:·gc.alloc.rate.norm                                                thrpt    5      3368.001 ±        0.001    B/op
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                         thrpt    5         0.021 ±        0.171  MB/sec
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    thrpt    5         0.046 ±        0.368    B/op
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                               thrpt    5      1494.974 ±      727.016  MB/sec
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                          thrpt    5      3256.495 ±     1413.889    B/op
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                        thrpt    5         0.666 ±        5.738  MB/sec
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                   thrpt    5         1.466 ±       12.619    B/op
[info] MutableIterablesBenchmark.writeCirce:·gc.count                                                          thrpt    5        22.000                 counts
[info] MutableIterablesBenchmark.writeCirce:·gc.time                                                           thrpt    5        28.000                     ms
[info] MutableIterablesBenchmark.writeJacksonScala                                                             thrpt    5   1327413.598 ±   126239.157   ops/s
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.alloc.rate                                              thrpt    5       661.184 ±       62.994  MB/sec
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         thrpt    5       784.000 ±        0.001    B/op
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                        thrpt    5       670.502 ±        1.551  MB/sec
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                   thrpt    5       795.437 ±       75.511    B/op
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                 thrpt    5         0.400 ±        1.405  MB/sec
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                            thrpt    5         0.471 ±        1.657    B/op
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.count                                                   thrpt    5        10.000                 counts
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.time                                                    thrpt    5        46.000                     ms
[info] MutableIterablesBenchmark.writeJsoniterScala                                                            thrpt    5   4518871.407 ±   212312.920   ops/s
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.alloc.rate                                             thrpt    5       344.529 ±       16.257  MB/sec
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        thrpt    5       120.000 ±        0.001    B/op
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                       thrpt    5       403.791 ±      578.948  MB/sec
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                  thrpt    5       140.580 ±      200.229    B/op
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.count                                                  thrpt    5         6.000                 counts
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.time                                                   thrpt    5        18.000                     ms
[info] MutableIterablesBenchmark.writeJsoniterScalaPrealloc                                                    thrpt    5   4939874.745 ±    64197.941   ops/s
[info] MutableIterablesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     thrpt    5       175.757 ±        2.252  MB/sec
[info] MutableIterablesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                thrpt    5        56.000 ±        0.001    B/op
[info] MutableIterablesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                               thrpt    5       202.109 ±      710.443  MB/sec
[info] MutableIterablesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                          thrpt    5        64.478 ±      226.651    B/op
[info] MutableIterablesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          thrpt    5         3.000                 counts
[info] MutableIterablesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                           thrpt    5         9.000                     ms
[info] MutableIterablesBenchmark.writePlayJson                                                                 thrpt    5    452250.841 ±    16557.552   ops/s
[info] MutableIterablesBenchmark.writePlayJson:·gc.alloc.rate                                                  thrpt    5      1528.551 ±       55.213  MB/sec
[info] MutableIterablesBenchmark.writePlayJson:·gc.alloc.rate.norm                                             thrpt    5      5320.001 ±        0.001    B/op
[info] MutableIterablesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                      thrpt    5         0.019 ±        0.157  MB/sec
[info] MutableIterablesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 thrpt    5         0.066 ±        0.542    B/op
[info] MutableIterablesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                            thrpt    5      1561.157 ±      704.382  MB/sec
[info] MutableIterablesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                       thrpt    5      5435.306 ±     2517.365    B/op
[info] MutableIterablesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                     thrpt    5         1.066 ±        7.821  MB/sec
[info] MutableIterablesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                thrpt    5         3.685 ±       27.051    B/op
[info] MutableIterablesBenchmark.writePlayJson:·gc.count                                                       thrpt    5        23.000                 counts
[info] MutableIterablesBenchmark.writePlayJson:·gc.time                                                        thrpt    5        38.000                     ms
[info] MutableMapsBenchmark.readJacksonScala                                                                   thrpt    5    587338.682 ±    28183.540   ops/s
[info] MutableMapsBenchmark.readJacksonScala:·gc.alloc.rate                                                    thrpt    5       958.227 ±       45.436  MB/sec
[info] MutableMapsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                               thrpt    5      2568.001 ±        0.001    B/op
[info] MutableMapsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                        thrpt    5         0.052 ±        0.356  MB/sec
[info] MutableMapsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   thrpt    5         0.140 ±        0.949    B/op
[info] MutableMapsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                              thrpt    5       944.502 ±      588.501  MB/sec
[info] MutableMapsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                         thrpt    5      2533.851 ±     1635.890    B/op
[info] MutableMapsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                       thrpt    5         0.932 ±        8.029  MB/sec
[info] MutableMapsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                  thrpt    5         2.485 ±       21.393    B/op
[info] MutableMapsBenchmark.readJacksonScala:·gc.count                                                         thrpt    5        14.000                 counts
[info] MutableMapsBenchmark.readJacksonScala:·gc.time                                                          thrpt    5        48.000                     ms
[info] MutableMapsBenchmark.readJsoniterScala                                                                  thrpt    5   3093570.512 ±   111141.478   ops/s
[info] MutableMapsBenchmark.readJsoniterScala:·gc.alloc.rate                                                   thrpt    5      1462.275 ±       52.982  MB/sec
[info] MutableMapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                              thrpt    5       744.000 ±        0.001    B/op
[info] MutableMapsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                       thrpt    5         0.031 ±        0.254  MB/sec
[info] MutableMapsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  thrpt    5         0.015 ±        0.129    B/op
[info] MutableMapsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                             thrpt    5      1494.978 ±      727.425  MB/sec
[info] MutableMapsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                        thrpt    5       760.494 ±      362.872    B/op
[info] MutableMapsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                      thrpt    5         0.666 ±        5.736  MB/sec
[info] MutableMapsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                 thrpt    5         0.335 ±        2.887    B/op
[info] MutableMapsBenchmark.readJsoniterScala:·gc.count                                                        thrpt    5        22.000                 counts
[info] MutableMapsBenchmark.readJsoniterScala:·gc.time                                                         thrpt    5        26.000                     ms
[info] MutableMapsBenchmark.readPlayJson                                                                       thrpt    5    279063.699 ±     9586.996   ops/s
[info] MutableMapsBenchmark.readPlayJson:·gc.alloc.rate                                                        thrpt    5      1546.000 ±       52.531  MB/sec
[info] MutableMapsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                   thrpt    5      8720.002 ±        0.001    B/op
[info] MutableMapsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                            thrpt    5         0.013 ±        0.114  MB/sec
[info] MutableMapsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       thrpt    5         0.075 ±        0.645    B/op
[info] MutableMapsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                  thrpt    5      1493.081 ±      726.164  MB/sec
[info] MutableMapsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                             thrpt    5      8420.101 ±     4029.340    B/op
[info] MutableMapsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                           thrpt    5         1.066 ±        7.822  MB/sec
[info] MutableMapsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                      thrpt    5         6.041 ±       44.273    B/op
[info] MutableMapsBenchmark.readPlayJson:·gc.count                                                             thrpt    5        22.000                 counts
[info] MutableMapsBenchmark.readPlayJson:·gc.time                                                              thrpt    5        37.000                     ms
[info] MutableMapsBenchmark.writeCirce                                                                         thrpt    5    429436.837 ±    19726.666   ops/s
[info] MutableMapsBenchmark.writeCirce:·gc.alloc.rate                                                          thrpt    5      1071.679 ±       49.267  MB/sec
[info] MutableMapsBenchmark.writeCirce:·gc.alloc.rate.norm                                                     thrpt    5      3928.001 ±        0.001    B/op
[info] MutableMapsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                              thrpt    5         0.041 ±        0.228  MB/sec
[info] MutableMapsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         thrpt    5         0.150 ±        0.824    B/op
[info] MutableMapsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                    thrpt    5      1083.190 ±      571.466  MB/sec
[info] MutableMapsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                               thrpt    5      3969.448 ±     2052.563    B/op
[info] MutableMapsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                             thrpt    5         0.666 ±        5.735  MB/sec
[info] MutableMapsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                        thrpt    5         2.450 ±       21.094    B/op
[info] MutableMapsBenchmark.writeCirce:·gc.count                                                               thrpt    5        16.000                 counts
[info] MutableMapsBenchmark.writeCirce:·gc.time                                                                thrpt    5        36.000                     ms
[info] MutableMapsBenchmark.writeJsoniterScala                                                                 thrpt    5   2639747.351 ±   231745.943   ops/s
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                  thrpt    5       536.728 ±       47.017  MB/sec
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                             thrpt    5       320.000 ±        0.001    B/op
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                            thrpt    5       538.372 ±      709.912  MB/sec
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                       thrpt    5       321.270 ±      426.080    B/op
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                     thrpt    5         0.133 ±        1.147  MB/sec
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                thrpt    5         0.080 ±        0.691    B/op
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.count                                                       thrpt    5         8.000                 counts
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.time                                                        thrpt    5        25.000                     ms
[info] MutableMapsBenchmark.writeJsoniterScalaPrealloc                                                         thrpt    5   2796856.066 ±    52711.256   ops/s
[info] MutableMapsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                          thrpt    5       440.646 ±        8.327  MB/sec
[info] MutableMapsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                     thrpt    5       248.000 ±        0.001    B/op
[info] MutableMapsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                                    thrpt    5       471.023 ±      710.094  MB/sec
[info] MutableMapsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                               thrpt    5       265.033 ±      398.733    B/op
[info] MutableMapsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space                             thrpt    5         0.133 ±        1.147  MB/sec
[info] MutableMapsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm                        thrpt    5         0.074 ±        0.641    B/op
[info] MutableMapsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                               thrpt    5         7.000                 counts
[info] MutableMapsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                                thrpt    5        21.000                     ms
[info] MutableMapsBenchmark.writePlayJson                                                                      thrpt    5    353962.076 ±    28198.818   ops/s
[info] MutableMapsBenchmark.writePlayJson:·gc.alloc.rate                                                       thrpt    5      1344.020 ±      106.635  MB/sec
[info] MutableMapsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                  thrpt    5      5976.001 ±        0.001    B/op
[info] MutableMapsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                           thrpt    5         0.039 ±        0.334  MB/sec
[info] MutableMapsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      thrpt    5         0.171 ±        1.461    B/op
[info] MutableMapsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                 thrpt    5      1355.113 ±       34.895  MB/sec
[info] MutableMapsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                            thrpt    5      6026.819 ±      357.766    B/op
[info] MutableMapsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                          thrpt    5         1.066 ±        7.822  MB/sec
[info] MutableMapsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                     thrpt    5         4.770 ±       34.855    B/op
[info] MutableMapsBenchmark.writePlayJson:·gc.count                                                            thrpt    5        20.000                 counts
[info] MutableMapsBenchmark.writePlayJson:·gc.time                                                             thrpt    5        43.000                     ms
[info] PrimitivesBenchmark.readCirce                                                                           thrpt    5    619731.508 ±    17681.842   ops/s
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate                                                            thrpt    5      1908.859 ±       53.393  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm                                                       thrpt    5      4848.001 ±        0.001    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                thrpt    5         0.008 ±        0.057  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           thrpt    5         0.022 ±        0.146    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                      thrpt    5      1904.105 ±      711.241  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                 thrpt    5      4837.532 ±     1877.172    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                               thrpt    5         0.666 ±        5.737  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                          thrpt    5         1.714 ±       14.755    B/op
[info] PrimitivesBenchmark.readCirce:·gc.count                                                                 thrpt    5        28.000                 counts
[info] PrimitivesBenchmark.readCirce:·gc.time                                                                  thrpt    5        30.000                     ms
[info] PrimitivesBenchmark.readJacksonScala                                                                    thrpt    5   1340791.208 ±    27552.993   ops/s
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate                                                     thrpt    5      1015.397 ±       20.374  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                thrpt    5      1192.000 ±        0.001    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                         thrpt    5         0.050 ±        0.428  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    thrpt    5         0.059 ±        0.506    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                               thrpt    5      1013.517 ±       27.345  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                          thrpt    5      1189.823 ±       42.185    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                        thrpt    5         1.066 ±        7.821  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                   thrpt    5         1.252 ±        9.192    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.count                                                          thrpt    5        15.000                 counts
[info] PrimitivesBenchmark.readJacksonScala:·gc.time                                                           thrpt    5        45.000                     ms
[info] PrimitivesBenchmark.readJsoniterScala                                                                   thrpt    5   6124640.205 ±   228584.105   ops/s
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate                                                    thrpt    5       186.774 ±        6.919  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                               thrpt    5        48.000 ±        0.001    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                              thrpt    5       202.499 ±      711.812  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                         thrpt    5        52.189 ±      183.463    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.count                                                         thrpt    5         3.000                 counts
[info] PrimitivesBenchmark.readJsoniterScala:·gc.time                                                          thrpt    5         8.000                     ms
[info] PrimitivesBenchmark.readPlayJson                                                                        thrpt    5    196143.168 ±    12445.490   ops/s
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate                                                         thrpt    5      1405.689 ±       89.129  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                    thrpt    5     11280.002 ±        0.001    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                             thrpt    5         0.039 ±        0.281  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        thrpt    5         0.315 ±        2.242    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                   thrpt    5      1423.449 ±      553.074  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                              thrpt    5     11427.163 ±     4607.462    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                            thrpt    5         1.332 ±        7.905  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                       thrpt    5        10.663 ±       63.133    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.count                                                              thrpt    5        21.000                 counts
[info] PrimitivesBenchmark.readPlayJson:·gc.time                                                               thrpt    5        45.000                     ms
[info] PrimitivesBenchmark.writeCirce                                                                          thrpt    5    826548.335 ±    22520.100   ops/s
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate                                                           thrpt    5      1289.790 ±       35.456  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm                                                      thrpt    5      2456.001 ±        0.001    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                               thrpt    5         0.030 ±        0.169  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          thrpt    5         0.057 ±        0.322    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                     thrpt    5      1288.814 ±      576.875  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                thrpt    5      2455.276 ±     1135.609    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                              thrpt    5         0.666 ±        5.736  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                         thrpt    5         1.267 ±       10.910    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.count                                                                thrpt    5        19.000                 counts
[info] PrimitivesBenchmark.writeCirce:·gc.time                                                                 thrpt    5        33.000                     ms
[info] PrimitivesBenchmark.writeJacksonScala                                                                   thrpt    5   2106226.638 ±   127116.544   ops/s
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate                                                    thrpt    5       867.216 ±       52.639  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                               thrpt    5       648.000 ±        0.001    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                        thrpt    5         0.022 ±        0.186  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   thrpt    5         0.016 ±        0.140    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                              thrpt    5       875.574 ±      700.931  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                         thrpt    5       654.651 ±      531.360    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                       thrpt    5         0.932 ±        8.029  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                  thrpt    5         0.713 ±        6.141    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.count                                                         thrpt    5        13.000                 counts
[info] PrimitivesBenchmark.writeJacksonScala:·gc.time                                                          thrpt    5        46.000                     ms
[info] PrimitivesBenchmark.writeJsoniterScala                                                                  thrpt    5   5680202.359 ±    54780.587   ops/s
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate                                                   thrpt    5       635.085 ±        6.051  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                              thrpt    5       176.000 ±        0.001    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                             thrpt    5       672.940 ±        1.413  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                        thrpt    5       186.492 ±        1.710    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                      thrpt    5         0.266 ±        1.405  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                 thrpt    5         0.074 ±        0.388    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.count                                                        thrpt    5        10.000                 counts
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.time                                                         thrpt    5        29.000                     ms
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc                                                          thrpt    5   5628121.810 ±   489360.774   ops/s
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                           thrpt    5       343.253 ±       29.848  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                      thrpt    5        96.000 ±        0.001    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                                     thrpt    5       336.487 ±        1.085  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                                thrpt    5        94.147 ±        8.368    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space                              thrpt    5         0.133 ±        1.147  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm                         thrpt    5         0.037 ±        0.316    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                thrpt    5         5.000                 counts
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                                 thrpt    5        15.000                     ms
[info] PrimitivesBenchmark.writePlayJson                                                                       thrpt    5    303185.457 ±    25382.054   ops/s
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate                                                        thrpt    5      1543.961 ±      129.368  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm                                                   thrpt    5      8016.001 ±        0.001    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                            thrpt    5         0.033 ±        0.278  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       thrpt    5         0.175 ±        1.461    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                  thrpt    5      1560.244 ±      708.171  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                             thrpt    5      8097.470 ±     3500.691    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                           thrpt    5         1.066 ±        7.822  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                      thrpt    5         5.608 ±       41.134    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.count                                                             thrpt    5        23.000                 counts
[info] PrimitivesBenchmark.writePlayJson:·gc.time                                                              thrpt    5        42.000                     ms
[info] StringOfAsciiCharsBenchmark.readCirce                                                                   thrpt    5   4866424.187 ±   263865.947   ops/s
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                                    thrpt    5      3512.518 ±      189.616  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                                               thrpt    5      1136.000 ±        0.001    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                        thrpt    5         0.002 ±        0.005  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   thrpt    5         0.001 ±        0.002    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                              thrpt    5      3471.679 ±      585.064  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                         thrpt    5      1123.011 ±      203.067    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.count                                                         thrpt    5        51.000                 counts
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.time                                                          thrpt    5        41.000                     ms
[info] StringOfAsciiCharsBenchmark.readDslJsonJava                                                             thrpt    5   7547717.795 ±   479349.084   ops/s
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate                                              thrpt    5       805.761 ±       51.127  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                         thrpt    5       168.000 ±        0.001    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                        thrpt    5       801.856 ±      701.388  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                   thrpt    5       167.507 ±      152.998    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space                                 thrpt    5         1.332 ±       11.470  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm                            thrpt    5         0.272 ±        2.346    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.count                                                   thrpt    5        12.000                 counts
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.time                                                    thrpt    5        56.000                     ms
[info] StringOfAsciiCharsBenchmark.readJacksonScala                                                            thrpt    5   3899867.195 ±    95389.192   ops/s
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                                             thrpt    5      2021.914 ±       49.354  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        thrpt    5       816.000 ±        0.001    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.015 ±        0.114  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         0.006 ±        0.046    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                       thrpt    5      2041.513 ±        7.397  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                  thrpt    5       823.938 ±       21.485    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                thrpt    5         0.799 ±        6.882  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                           thrpt    5         0.321 ±        2.765    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count                                                  thrpt    5        30.000                 counts
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time                                                   thrpt    5        27.000                     ms
[info] StringOfAsciiCharsBenchmark.readJsoniterScala                                                           thrpt    5   7367295.821 ±  1062147.522   ops/s
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                            thrpt    5       786.276 ±      113.374  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       thrpt    5       168.000 ±        0.001    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5         0.008 ±        0.066  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5         0.002 ±        0.015    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                      thrpt    5       810.139 ±      706.211  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                 thrpt    5       172.950 ±      144.590    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                               thrpt    5         0.666 ±        5.735  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                          thrpt    5         0.138 ±        1.192    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count                                                 thrpt    5        12.000                 counts
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time                                                  thrpt    5        28.000                     ms
[info] StringOfAsciiCharsBenchmark.readPlayJson                                                                thrpt    5   4734489.350 ±   133322.894   ops/s
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate                                                 thrpt    5      2550.644 ±       72.414  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            thrpt    5       848.000 ±        0.001    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.002 ±        0.006  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         0.001 ±        0.002    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                           thrpt    5      2586.762 ±      718.285  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                      thrpt    5       859.843 ±      226.534    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.count                                                      thrpt    5        38.000                 counts
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.time                                                       thrpt    5        30.000                     ms
[info] StringOfAsciiCharsBenchmark.writeCirce                                                                  thrpt    5   3259645.061 ±    91125.640   ops/s
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                                   thrpt    5       778.671 ±       22.263  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                              thrpt    5       376.000 ±        0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                       thrpt    5         0.015 ±        0.131  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  thrpt    5         0.007 ±        0.063    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                             thrpt    5       742.147 ±      578.948  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                        thrpt    5       358.692 ±      289.106    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                      thrpt    5         0.666 ±        5.737  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                 thrpt    5         0.318 ±        2.740    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.count                                                        thrpt    5        11.000                 counts
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.time                                                         thrpt    5        33.000                     ms
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava                                                            thrpt    5   7984599.367 ±   420710.216   ops/s
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate                                             thrpt    5       771.100 ±       40.568  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                        thrpt    5       152.000 ±        0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                       thrpt    5       801.749 ±      708.274  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                  thrpt    5       157.939 ±      136.931    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space                                thrpt    5         1.332 ±       11.471  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm                           thrpt    5         0.262 ±        2.254    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.count                                                  thrpt    5        12.000                 counts
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.time                                                   thrpt    5        58.000                     ms
[info] StringOfAsciiCharsBenchmark.writeJacksonScala                                                           thrpt    5   1839415.265 ±    14850.835   ops/s
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                            thrpt    5       570.264 ±        4.595  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       thrpt    5       488.000 ±        0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                      thrpt    5       538.175 ±      709.431  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                 thrpt    5       460.584 ±      607.626    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count                                                 thrpt    5         8.000                 counts
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time                                                  thrpt    5        32.000                     ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala                                                          thrpt    5   9447852.924 ±   923186.333   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           thrpt    5       912.353 ±       88.965  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      thrpt    5       152.000 ±        0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'               thrpt    5         0.026 ±        0.215  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm          thrpt    5         0.004 ±        0.036    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                     thrpt    5       878.121 ±      707.914  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                thrpt    5       146.083 ±      112.775    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                              thrpt    5         1.199 ±        6.124  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                         thrpt    5         0.199 ±        1.019    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count                                                thrpt    5        13.000                 counts
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                                 thrpt    5        31.000                     ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                                  thrpt    5   8057981.485 ±    15037.935   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              thrpt    5        ≈ 10⁻⁴                   B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        thrpt    5           ≈ 0                 counts
[info] StringOfAsciiCharsBenchmark.writePlayJson                                                               thrpt    5   3040002.599 ±   195455.815   ops/s
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                                                thrpt    5       973.509 ±       63.058  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                           thrpt    5       504.000 ±        0.001    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.026 ±        0.219  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         0.014 ±        0.116    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                          thrpt    5      1013.984 ±       24.656  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                     thrpt    5       525.107 ±       44.512    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.800 ±        6.884  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                              thrpt    5         0.409 ±        3.523    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.count                                                     thrpt    5        15.000                 counts
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.time                                                      thrpt    5        37.000                     ms
[info] StringOfNonAsciiCharsBenchmark.readCirce                                                                thrpt    5    757234.725 ±    83039.009   ops/s
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                                 thrpt    5      1258.623 ±      139.147  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                                            thrpt    5      2616.001 ±        0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.012 ±        0.065  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         0.025 ±        0.137    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                           thrpt    5      1221.381 ±      721.559  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                      thrpt    5      2537.665 ±     1453.474    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.666 ±        5.734  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                               thrpt    5         1.404 ±       12.092    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.count                                                      thrpt    5        18.000                 counts
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.time                                                       thrpt    5        28.000                     ms
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava                                                          thrpt    5   2641201.897 ±   233172.671   ops/s
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate                                           thrpt    5       738.362 ±       65.233  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                      thrpt    5       440.000 ±        0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                     thrpt    5       734.176 ±      574.595  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                thrpt    5       438.912 ±      380.090    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space                              thrpt    5         0.799 ±        6.882  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm                         thrpt    5         0.471 ±        4.054    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.count                                                thrpt    5        11.000                 counts
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.time                                                 thrpt    5        53.000                     ms
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala                                                         thrpt    5   1130075.024 ±    86046.504   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                                          thrpt    5       832.759 ±       63.254  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     thrpt    5      1160.000 ±        0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'              thrpt    5         0.027 ±        0.154  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm         thrpt    5         0.038 ±        0.219    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                    thrpt    5       809.589 ±      707.950  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                               thrpt    5      1127.646 ±      981.187    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                             thrpt    5         0.799 ±        6.881  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                        thrpt    5         1.135 ±        9.777    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count                                               thrpt    5        12.000                 counts
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time                                                thrpt    5        40.000                     ms
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala                                                        thrpt    5   1859295.401 ±   138996.592   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                         thrpt    5       519.733 ±       38.706  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    thrpt    5       440.000 ±        0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                   thrpt    5       539.218 ±      710.573  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                              thrpt    5       456.466 ±      600.658    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count                                              thrpt    5         8.000                 counts
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time                                               thrpt    5        21.000                     ms
[info] StringOfNonAsciiCharsBenchmark.readPlayJson                                                             thrpt    5   1193022.549 ±   117321.870   ops/s
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate                                              thrpt    5       848.881 ±       83.346  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                         thrpt    5      1120.000 ±        0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                  thrpt    5         0.036 ±        0.311  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm             thrpt    5         0.046 ±        0.399    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                        thrpt    5       876.926 ±      718.048  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                   thrpt    5      1155.545 ±      911.886    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                 thrpt    5         0.799 ±        6.882  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                            thrpt    5         1.058 ±        9.108    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.count                                                   thrpt    5        13.000                 counts
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.time                                                    thrpt    5        43.000                     ms
[info] StringOfNonAsciiCharsBenchmark.writeCirce                                                               thrpt    5   1789546.523 ±    51244.236   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                                thrpt    5      1455.429 ±       42.449  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                           thrpt    5      1280.000 ±        0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.022 ±        0.183  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         0.019 ±        0.161    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                          thrpt    5      1493.745 ±      702.621  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                     thrpt    5      1314.304 ±      641.203    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.666 ±        5.735  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                              thrpt    5         0.585 ±        5.040    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count                                                     thrpt    5        22.000                 counts
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time                                                      thrpt    5        32.000                     ms
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava                                                         thrpt    5   2966656.013 ±   163558.612   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate                                          thrpt    5       693.679 ±       38.251  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                     thrpt    5       368.000 ±        0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                    thrpt    5       667.517 ±        0.428  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                               thrpt    5       354.180 ±       19.801    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.count                                               thrpt    5        10.000                 counts
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.time                                                thrpt    5        47.000                     ms
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala                                                        thrpt    5   1981171.185 ±    45217.552   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                         thrpt    5       886.133 ±       20.598  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                    thrpt    5       704.000 ±        0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'             thrpt    5         0.022 ±        0.140  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm        thrpt    5         0.018 ±        0.111    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                   thrpt    5       877.786 ±      714.065  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                              thrpt    5       697.478 ±      569.355    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                            thrpt    5         0.799 ±        6.882  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                       thrpt    5         0.637 ±        5.482    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count                                              thrpt    5        13.000                 counts
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time                                               thrpt    5        41.000                     ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala                                                       thrpt    5   2447658.856 ±    14424.361   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                        thrpt    5       572.232 ±        3.224  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                   thrpt    5       368.000 ±        0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                  thrpt    5       605.961 ±      580.430  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                             thrpt    5       389.796 ±      374.609    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                           thrpt    5         0.400 ±        1.405  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                      thrpt    5         0.257 ±        0.903    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count                                             thrpt    5         9.000                 counts
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                              thrpt    5        27.000                     ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                               thrpt    5   2560494.141 ±     3682.489   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                           thrpt    5        ≈ 10⁻⁴                   B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                     thrpt    5           ≈ 0                 counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson                                                            thrpt    5   2171637.496 ±   113980.966   ops/s
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                                             thrpt    5       993.360 ±       52.653  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                        thrpt    5       720.000 ±        0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.022 ±        0.191  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         0.016 ±        0.136    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                       thrpt    5      1013.891 ±       25.826  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                  thrpt    5       734.948 ±       25.461    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                thrpt    5         0.799 ±        6.882  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                           thrpt    5         0.583 ±        5.023    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count                                                  thrpt    5        15.000                 counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time                                                   thrpt    5        36.000                     ms
[info] TwitterAPIBenchmark.readCirce                                                                           thrpt    5     10500.192 ±     2024.955   ops/s
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate                                                            thrpt    5      1538.193 ±      290.299  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm                                                       thrpt    5    230565.818 ±      944.038    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                thrpt    5         0.019 ±        0.110  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           thrpt    5         2.844 ±       16.769    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                      thrpt    5      1493.749 ±      732.383  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                 thrpt    5    223696.436 ±    90429.952    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                               thrpt    5         0.666 ±        5.734  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                          thrpt    5       101.419 ±      873.252    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.count                                                                 thrpt    5        22.000                 counts
[info] TwitterAPIBenchmark.readCirce:·gc.time                                                                  thrpt    5        47.000                     ms
[info] TwitterAPIBenchmark.readJacksonScala                                                                    thrpt    5     14166.604 ±     1413.861   ops/s
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate                                                     thrpt    5       200.239 ±       20.209  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                thrpt    5     22249.124 ±       32.215    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                               thrpt    5       201.395 ±      707.933  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                          thrpt    5     22560.248 ±    79358.881    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.count                                                          thrpt    5         3.000                 counts
[info] TwitterAPIBenchmark.readJacksonScala:·gc.time                                                           thrpt    5        15.000                     ms
[info] TwitterAPIBenchmark.readJsoniterScala                                                                   thrpt    5     37251.898 ±     2866.438   ops/s
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                                    thrpt    5       335.153 ±       25.693  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                               thrpt    5     14160.012 ±        0.005    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                              thrpt    5       337.059 ±        0.227  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                         thrpt    5     14245.067 ±     1092.760    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.count                                                         thrpt    5         5.000                 counts
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.time                                                          thrpt    5        15.000                     ms
[info] TwitterAPIBenchmark.readPlayJson                                                                        thrpt    5      2773.188 ±      895.069   ops/s
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate                                                         thrpt    5       905.546 ±      291.602  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                                    thrpt    5    513760.161 ±      523.420    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                             thrpt    5         0.008 ±        0.070  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        thrpt    5         4.393 ±       37.824    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                   thrpt    5       875.812 ±      701.476  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                              thrpt    5    495947.041 ±   336735.676    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                            thrpt    5         0.933 ±        8.033  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                       thrpt    5       511.857 ±     4407.245    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.count                                                              thrpt    5        13.000                 counts
[info] TwitterAPIBenchmark.readPlayJson:·gc.time                                                               thrpt    5        99.000                     ms
[info] TwitterAPIBenchmark.writeJacksonScala                                                                   thrpt    5     55123.394 ±      793.451   ops/s
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                                    thrpt    5       703.940 ±        9.992  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                               thrpt    5     20100.018 ±        0.129    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                              thrpt    5       737.100 ±      576.757  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                         thrpt    5     21055.380 ±    16719.688    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                       thrpt    5         0.799 ±        6.882  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                  thrpt    5        22.738 ±      195.780    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.count                                                         thrpt    5        11.000                 counts
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.time                                                          thrpt    5        55.000                     ms
[info] TwitterAPIBenchmark.writeJsoniterScala                                                                  thrpt    5     79801.840 ±     3328.168   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                                   thrpt    5       523.239 ±       21.873  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                              thrpt    5     10320.005 ±        0.001    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                             thrpt    5       538.201 ±      709.526  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                        thrpt    5     10596.047 ±    13751.240    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.count                                                        thrpt    5         8.000                 counts
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.time                                                         thrpt    5        24.000                     ms
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc                                                          thrpt    5     84032.170 ±      271.813   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                           thrpt    5        11.958 ±        0.034  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                      thrpt    5       224.005 ±        0.001    B/op
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                thrpt    5           ≈ 0                 counts
[info] Benchmark result is saved to jdk10.json
[success] Total time: 4980 s, completed Apr 9, 2018 4:54:02 PM
