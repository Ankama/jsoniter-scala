[info] Loading settings from idea.sbt ...
[info] Loading global plugins from /home/andriy/.sbt/1.0/plugins
[info] Loading settings from plugins.sbt ...
[info] Loading project definition from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/project
[info] Loading settings from release.sbt,build.sbt,version.sbt ...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[info] Setting Scala version to 2.12.6 on 4 projects.
[info] Reapplying settings...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[success] Total time: 0 s, completed May 9, 2018 3:50:50 AM
[info] Updating core...
[info] Done updating.
[info] Updating macros...
[info] Done updating.
[info] Updating benchmark...
[info] Done updating.
[info] Compiling 5 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/classes ...
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:987:79: constructor String in class String is deprecated: see corresponding Javadoc for more information.
[warn]   private[this] def toDouble(pos: Int): Double = java.lang.Double.parseDouble(new String(buf, 0, mark, pos - mark))
[warn]                                                                               ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1073:75: constructor String in class String is deprecated: see corresponding Javadoc for more information.
[warn]   private[this] def toFloat(pos: Int): Float = java.lang.Float.parseFloat(new String(buf, 0, mark, pos - mark))
[warn]                                                                           ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:445:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:453:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos + 1)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:964:14: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]       zoneId.getBytes(0, len, buf, pos)
[warn]              ^
[warn] 5 warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/core_2.12-0.25.4-SNAPSHOT.jar ...
[info] Compiling 1 Scala source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/classes ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/macros_2.12-0.25.4-SNAPSHOT.jar ...
[info] Compiling 57 Scala sources and 1 Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done packaging.
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:17:48: Generated JSON codec for type 'Int':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Int] {
[info]       def nullValue: Int = 0;
[info]       def decodeValue(in: JsonReader, default: Int): Int = in.readInt();
[info]       def encodeValue(x: Int, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val intCodec: JsonValueCodec[Int] = make[Int](CodecMakerConfig()) // don't define implicit for supported types
[info]                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:18:57: Generated JSON codec for type 'String':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[String] {
[info]       def nullValue: String = null;
[info]       def decodeValue(in: JsonReader, default: String): String = in.readString(default);
[info]       def encodeValue(x: String, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val stringCodec: JsonValueCodec[String] = make[String](CodecMakerConfig()) // don't define implicit for supported types
[info]                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:19:65: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("a");
[info]       private[this] val f1: Array[String] = Array("b");
[info]       private[this] val f2: Array[String] = Array("l", "r");
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.A): com.github.plokhotnyuk.jsoniter_scala.macros.A = if (in.isNextToken('{'))
[info]         {
[info]           var _a: Int = 0;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 97 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _a = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.A(a = _a)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.B): com.github.plokhotnyuk.jsoniter_scala.macros.B = if (in.isNextToken('{'))
[info]         {
[info]           var _b: String = null;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _b = in.readString(_b)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.B(b = _b)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.C): com.github.plokhotnyuk.jsoniter_scala.macros.C = if (in.isNextToken('{'))
[info]         {
[info]           var _l: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var _r: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var p0 = 3;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = JsoniterCodecs.this.adtCodec.decodeValue(in, _l)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 114 => if (in.isCharBufEqualsTo(l, "r"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _r = JsoniterCodecs.this.adtCodec.decodeValue(in, _r)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.C(l = _l, r = _r)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 65 => if (in.isCharBufEqualsTo(l, "A"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d1(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 66 => if (in.isCharBufEqualsTo(l, "B"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d2(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 67 => if (in.isCharBufEqualsTo(l, "C"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d3(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.A, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("A")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("a");
[info]           out.writeVal(x.a)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.B, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("B")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           out.writeVal(x.b)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.C, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("C")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           JsoniterCodecs.this.adtCodec.encodeValue(x.l, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("r");
[info]           JsoniterCodecs.this.adtCodec.encodeValue(x.r, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.A)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.B)) => e2(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.C)) => e3(x, out)
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val adtCodec: JsonValueCodec[AdtBase] = make[AdtBase](CodecMakerConfig())
[info]                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:20:69: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("s", "bd", "os");
[info]       private[this] def d1(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(in.readString(null))
[info]         };
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _bd: scala.math.BigDecimal = null;
[info]           var _os: Option[String] = None;
[info]           var p0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3138 => if (in.isCharBufEqualsTo(l, "bd"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _bd = in.readBigDecimal(_bd)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556 => if (in.isCharBufEqualsTo(l, "os"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _os = d1(in, _os)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs(s = _s, bd = _bd, os = _os)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bd");
[info]           out.writeVal(x.bd)
[info]         };
[info]         {
[info]           val v = x.os;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("os");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val anyRefsCodec: JsonValueCodec[AnyRefs] = make[AnyRefs](CodecMakerConfig())
[info]                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:21:97: Generated JSON codec for type 'Array[BigDecimal]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigDecimal]] {
[info]       def nullValue: Array[BigDecimal] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = d0(in, default);
[info]       def encodeValue(x: Array[BigDecimal], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[BigDecimal] = new Array[scala.math.BigDecimal](0);
[info]       private[this] def d0(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigDecimal](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigDecimal(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[BigDecimal], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigDecimalArrayCodec: JsonValueCodec[Array[BigDecimal]] = make[Array[BigDecimal]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:22:85: Generated JSON codec for type 'Array[BigInt]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigInt]] {
[info]       def nullValue: Array[BigInt] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[BigInt]): Array[BigInt] = d0(in, default);
[info]       def encodeValue(x: Array[BigInt], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[BigInt] = new Array[scala.math.BigInt](0);
[info]       private[this] def d0(in: JsonReader, default: Array[BigInt]): Array[BigInt] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigInt](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigInt(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[BigInt], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigIntArrayCodec: JsonValueCodec[Array[BigInt]] = make[Array[BigInt]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:23:122: Generated JSON codec for type 'scala.collection.mutable.ArrayBuffer[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.ArrayBuffer[Boolean]] {
[info]       def nullValue: scala.collection.mutable.ArrayBuffer[Boolean] = ArrayBuffer.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[Boolean]): scala.collection.mutable.ArrayBuffer[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.ArrayBuffer[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[Boolean]): scala.collection.mutable.ArrayBuffer[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               ArrayBuffer.empty[Boolean];
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.ArrayBuffer[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanArrayBufferCodec: JsonValueCodec[mutable.ArrayBuffer[Boolean]] = make[mutable.ArrayBuffer[Boolean]](CodecMakerConfig())
[info]                                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:24:88: Generated JSON codec for type 'Array[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Boolean]] {
[info]       def nullValue: Array[Boolean] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Boolean]): Array[Boolean] = d0(in, default);
[info]       def encodeValue(x: Array[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Boolean] = new Array[Boolean](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Boolean]): Array[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Boolean](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBoolean());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanArrayCodec: JsonValueCodec[Array[Boolean]] = make[Array[Boolean]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:25:85: Generated JSON codec for type 'List[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[List[Boolean]] {
[info]       def nullValue: List[Boolean] = List.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: List[Boolean]): List[Boolean] = d0(in, default);
[info]       def encodeValue(x: List[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: List[Boolean]): List[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = List.newBuilder[Boolean];
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: List[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var l = x;
[info]         while (l.isEmpty.`unary_!`) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(l.head);
[info]             l = l.tail
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanListCodec: JsonValueCodec[List[Boolean]] = make[List[Boolean]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:26:91: Generated JSON codec for type 'scala.collection.immutable.Vector[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Vector[Boolean]] {
[info]       def nullValue: scala.collection.immutable.Vector[Boolean] = Vector.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Vector[Boolean]): scala.collection.immutable.Vector[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Vector[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Vector[Boolean]): scala.collection.immutable.Vector[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Vector.newBuilder[Boolean];
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.Vector[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanVectorCodec: JsonValueCodec[Vector[Boolean]] = make[Vector[Boolean]](CodecMakerConfig())
[info]                                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:27:79: Generated JSON codec for type 'Array[Byte]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Byte]] {
[info]       def nullValue: Array[Byte] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Byte]): Array[Byte] = d0(in, default);
[info]       def encodeValue(x: Array[Byte], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Byte] = new Array[Byte](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Byte]): Array[Byte] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Byte](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readByte());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Byte], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val byteArrayCodec: JsonValueCodec[Array[Byte]] = make[Array[Byte]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:28:79: Generated JSON codec for type 'Array[Char]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Char]] {
[info]       def nullValue: Array[Char] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Char]): Array[Char] = d0(in, default);
[info]       def encodeValue(x: Array[Char], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Char] = new Array[Char](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Char]): Array[Char] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Char](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readChar());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Char], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val charArrayCodec: JsonValueCodec[Array[Char]] = make[Array[Char]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:29:85: Generated JSON codec for type 'Array[Double]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Double]] {
[info]       def nullValue: Array[Double] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Double]): Array[Double] = d0(in, default);
[info]       def encodeValue(x: Array[Double], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Double] = new Array[Double](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Double]): Array[Double] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Double](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDouble());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Double], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val doubleArrayCodec: JsonValueCodec[Array[Double]] = make[Array[Double]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:30:91: Generated JSON codec for type 'Array[java.time.Duration]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Duration]] {
[info]       def nullValue: Array[java.time.Duration] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Duration], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Duration] = new Array[java.time.Duration](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Duration](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDuration(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Duration], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val durationArrayCodec: JsonValueCodec[Array[Duration]] = make[Array[Duration]](CodecMakerConfig())
[info]                                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:31:87: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](0);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value): com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val len = in.readStringAsCharBuf();
[info]           SuitEnum.values.iterator.find(((e) => in.isCharBufEqualsTo(len, e.toString))).getOrElse(in.enumValueError(len))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private[this] def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value, out: JsonWriter): Unit = out.writeVal(x.toString);
[info]       private[this] def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val enumArrayCodec: JsonValueCodec[Array[SuitEnum]] = make[Array[SuitEnum]](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:32:82: Generated JSON codec for type 'Array[Float]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Float]] {
[info]       def nullValue: Array[Float] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Float]): Array[Float] = d0(in, default);
[info]       def encodeValue(x: Array[Float], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Float] = new Array[Float](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Float]): Array[Float] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Float](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readFloat());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Float], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val floatArrayCodec: JsonValueCodec[Array[Float]] = make[Array[Float]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:33:88: Generated JSON codec for type 'Array[java.time.Instant]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Instant]] {
[info]       def nullValue: Array[java.time.Instant] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Instant], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Instant] = new Array[java.time.Instant](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Instant](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInstant(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Instant], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val instantArrayCodec: JsonValueCodec[Array[Instant]] = make[Array[Instant]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:34:76: Generated JSON codec for type 'Array[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Int]] {
[info]       def nullValue: Array[Int] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Int]): Array[Int] = d0(in, default);
[info]       def encodeValue(x: Array[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Int] = new Array[Int](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Int]): Array[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Int](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInt());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intArrayCodec: JsonValueCodec[Array[Int]] = make[Array[Int]](CodecMakerConfig())
[info]                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:35:83: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](0);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Suit): com.github.plokhotnyuk.jsoniter_scala.macros.Suit = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val v = in.readString(null);
[info]           try {
[info]             Suit.valueOf(v)
[info]           } catch {
[info]             case ((_): IllegalArgumentException) => in.enumValueError(v)
[info]           }
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private[this] def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Suit, out: JsonWriter): Unit = out.writeVal(x.name);
[info]       private[this] def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val javaEnumArrayCodec: JsonValueCodec[Array[Suit]] = make[Array[Suit]](CodecMakerConfig())
[info]                                                                                   ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:36:79: Generated JSON codec for type 'Array[Long]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Long]] {
[info]       def nullValue: Array[Long] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Long]): Array[Long] = d0(in, default);
[info]       def encodeValue(x: Array[Long], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Long] = new Array[Long](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Long]): Array[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLong());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Long], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val longArrayCodec: JsonValueCodec[Array[Long]] = make[Array[Long]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:37:94: Generated JSON codec for type 'Array[java.time.LocalDate]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDate]] {
[info]       def nullValue: Array[java.time.LocalDate] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDate], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.LocalDate] = new Array[java.time.LocalDate](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDate](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDate(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalDate], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateArrayCodec: JsonValueCodec[Array[LocalDate]] = make[Array[LocalDate]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:38:106: Generated JSON codec for type 'Array[java.time.LocalDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDateTime]] {
[info]       def nullValue: Array[java.time.LocalDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.LocalDateTime] = new Array[java.time.LocalDateTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateTimeArrayCodec: JsonValueCodec[Array[LocalDateTime]] = make[Array[LocalDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:39:94: Generated JSON codec for type 'Array[java.time.LocalTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalTime]] {
[info]       def nullValue: Array[java.time.LocalTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.LocalTime] = new Array[java.time.LocalTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localTimeArrayCodec: JsonValueCodec[Array[LocalTime]] = make[Array[LocalTime]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:40:109: Generated JSON codec for type 'Array[java.time.OffsetDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetDateTime]] {
[info]       def nullValue: Array[java.time.OffsetDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.OffsetDateTime] = new Array[java.time.OffsetDateTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetDateTimeArrayCodec: JsonValueCodec[Array[OffsetDateTime]] = make[Array[OffsetDateTime]](CodecMakerConfig())
[info]                                                                                                             ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:41:97: Generated JSON codec for type 'Array[java.time.OffsetTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetTime]] {
[info]       def nullValue: Array[java.time.OffsetTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.OffsetTime] = new Array[java.time.OffsetTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetTimeArrayCodec: JsonValueCodec[Array[OffsetTime]] = make[Array[OffsetTime]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:42:85: Generated JSON codec for type 'Array[java.time.Period]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Period]] {
[info]       def nullValue: Array[java.time.Period] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Period], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Period] = new Array[java.time.Period](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Period](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readPeriod(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Period], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val periodArrayCodec: JsonValueCodec[Array[Period]] = make[Array[Period]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:43:82: Generated JSON codec for type 'Array[Short]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Short]] {
[info]       def nullValue: Array[Short] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Short]): Array[Short] = d0(in, default);
[info]       def encodeValue(x: Array[Short], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Short] = new Array[Short](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Short]): Array[Short] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Short](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readShort());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Short], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val shortArrayCodec: JsonValueCodec[Array[Short]] = make[Array[Short]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:44:79: Generated JSON codec for type 'Array[java.util.UUID]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.util.UUID]] {
[info]       def nullValue: Array[java.util.UUID] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = d0(in, default);
[info]       def encodeValue(x: Array[java.util.UUID], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.util.UUID] = new Array[java.util.UUID](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.util.UUID](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readUUID(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.util.UUID], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val uuidArrayCodec: JsonValueCodec[Array[UUID]] = make[Array[UUID]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:45:79: Generated JSON codec for type 'Array[java.time.Year]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Year]] {
[info]       def nullValue: Array[java.time.Year] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Year]): Array[java.time.Year] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Year], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Year] = new Array[java.time.Year](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Year]): Array[java.time.Year] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Year](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readYear(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Year], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val yearArrayCodec: JsonValueCodec[Array[Year]] = make[Array[Year]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:46:94: Generated JSON codec for type 'Array[java.time.YearMonth]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.YearMonth]] {
[info]       def nullValue: Array[java.time.YearMonth] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.YearMonth]): Array[java.time.YearMonth] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.YearMonth], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.YearMonth] = new Array[java.time.YearMonth](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.YearMonth]): Array[java.time.YearMonth] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.YearMonth](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readYearMonth(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.YearMonth], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val yearMonthArrayCodec: JsonValueCodec[Array[YearMonth]] = make[Array[YearMonth]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:47:106: Generated JSON codec for type 'Array[java.time.ZonedDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZonedDateTime]] {
[info]       def nullValue: Array[java.time.ZonedDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.ZonedDateTime] = new Array[java.time.ZonedDateTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZonedDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZonedDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zonedDateTimeArrayCodec: JsonValueCodec[Array[ZonedDateTime]] = make[Array[ZonedDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:48:85: Generated JSON codec for type 'Array[java.time.ZoneId]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneId]] {
[info]       def nullValue: Array[java.time.ZoneId] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneId], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.ZoneId] = new Array[java.time.ZoneId](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneId](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneId(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZoneId], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneIdArrayCodec: JsonValueCodec[Array[ZoneId]] = make[Array[ZoneId]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:49:97: Generated JSON codec for type 'Array[java.time.ZoneOffset]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneOffset]] {
[info]       def nullValue: Array[java.time.ZoneOffset] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.ZoneOffset] = new Array[java.time.ZoneOffset](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneOffset](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneOffset(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneOffsetArrayCodec: JsonValueCodec[Array[ZoneOffset]] = make[Array[ZoneOffset]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:50:66: Generated JSON codec for type 'scala.collection.immutable.BitSet':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.BitSet] {
[info]       def nullValue: scala.collection.immutable.BitSet = BitSet.empty;
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](2);
[info]             var mi = 0;
[info]             do 
[info]               {
[info]                 val v = in.readInt();
[info]                 if (v.<(0).||(v.>=(2147483647)))
[info]                   in.decodeError("illegal value for bit set")
[info]                 else
[info]                   ();
[info]                 val i = v.>>>(6);
[info]                 if (i.>(mi))
[info]                   {
[info]                     mi = i;
[info]                     if (i.>=(x.length))
[info]                       x = java.util.Arrays.copyOf(x, java.lang.Integer.highestOneBit(i).<<(1))
[info]                     else
[info]                       ()
[info]                   }
[info]                 else
[info]                   ();
[info]                 x(i).|=(1L.<<(v.&(63)))
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               {
[info]                 if (mi.>(1).&&(mi.+(1).!=(x.length)))
[info]                   x = java.util.Arrays.copyOf(x, mi.+(1))
[info]                 else
[info]                   ();
[info]                 BitSet.fromBitMaskNoCopy(x)
[info]               }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bitSetCodec: JsonValueCodec[BitSet] = make[BitSet](CodecMakerConfig(bitSetValueLimit = Int.MaxValue /*WARNING: don't do this for open-system*/))
[info]                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:51:87: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("s", "l");
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _l: Long = 0L;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields(s = _s, l = _l)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           out.writeVal(x.l)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val extractFieldsCodec: JsonValueCodec[ExtractFields] = make[ExtractFields](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:52:94: Generated JSON codec for type 'scala.collection.immutable.IntMap[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.IntMap[Boolean]] {
[info]       def nullValue: scala.collection.immutable.IntMap[Boolean] = IntMap.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.IntMap[Boolean]): scala.collection.immutable.IntMap[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.IntMap[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.IntMap[Boolean]): scala.collection.immutable.IntMap[Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = IntMap.empty[Boolean];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.immutable.IntMap[Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intMapOfBooleansCodec: JsonValueCodec[IntMap[Boolean]] = make[IntMap[Boolean]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:53:69: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON): com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("properties", "geometry");
[info]       private[this] val f1: Array[String] = Array("coordinates");
[info]       private[this] def d2(in: JsonReader, default: scala.collection.immutable.Map[String,String]): scala.collection.immutable.Map[String,String] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[String, String];
[info]             do 
[info]               x = x.updated(in.readKeyAsString(), in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d8(in: JsonReader, default: (Double, Double)): (Double, Double) = if (in.isNextToken('['))
[info]         {
[info]           val _1: Double = in.readDouble();
[info]           val _2: Double = if (in.isNextToken(','))
[info]             in.readDouble()
[info]           else
[info]             in.commaError();
[info]           if (in.isNextToken(']'))
[info]             new (Double, Double)(_1, _2)
[info]           else
[info]             in.arrayEndError()
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d7(in: JsonReader, default: IndexedSeq[(Double, Double)]): IndexedSeq[(Double, Double)] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[(Double, Double)];
[info]             do 
[info]               x.+=(d8(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: IndexedSeq[IndexedSeq[(Double, Double)]]): IndexedSeq[IndexedSeq[(Double, Double)]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[IndexedSeq[(Double, Double)]];
[info]             do 
[info]               x.+=(d7(in, IndexedSeq.empty[(Double, Double)]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d5(in: JsonReader, default: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]]): IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[IndexedSeq[IndexedSeq[(Double, Double)]]];
[info]             do 
[info]               x.+=(d6(in, IndexedSeq.empty[IndexedSeq[(Double, Double)]]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d4(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]] = IndexedSeq.empty[IndexedSeq[IndexedSeq[(Double, Double)]]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d5(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d10(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d9(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection): com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection = if (in.isNextToken('{'))
[info]         {
[info]           var _geometries: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 203916432 => if (in.isCharBufEqualsTo(l, "geometries"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geometries = d10(in, _geometries)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection(geometries = _geometries)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d11(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Point): com.github.plokhotnyuk.jsoniter_scala.macros.Point = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: (Double, Double) = null;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d8(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Point(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d12(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Polygon): com.github.plokhotnyuk.jsoniter_scala.macros.Polygon = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[(Double, Double)]] = IndexedSeq.empty[IndexedSeq[(Double, Double)]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d6(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Polygon(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d13(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString): com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[(Double, Double)]] = IndexedSeq.empty[IndexedSeq[(Double, Double)]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d6(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d14(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.LineString): com.github.plokhotnyuk.jsoniter_scala.macros.LineString = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[(Double, Double)] = IndexedSeq.empty[(Double, Double)];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d7(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.LineString(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d15(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[(Double, Double)] = IndexedSeq.empty[(Double, Double)];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d7(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry): com.github.plokhotnyuk.jsoniter_scala.macros.Geometry = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case -2116761119 => if (in.isCharBufEqualsTo(l, "MultiPolygon"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d4(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 1950410960 => if (in.isCharBufEqualsTo(l, "GeometryCollection"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d9(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 77292912 => if (in.isCharBufEqualsTo(l, "Point"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d11(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 1267133722 => if (in.isCharBufEqualsTo(l, "Polygon"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d12(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -627102946 => if (in.isCharBufEqualsTo(l, "MultiLineString"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d13(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 1806700869 => if (in.isCharBufEqualsTo(l, "LineString"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d14(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -1065891849 => if (in.isCharBufEqualsTo(l, "MultiPoint"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d15(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Feature): com.github.plokhotnyuk.jsoniter_scala.macros.Feature = if (in.isNextToken('{'))
[info]         {
[info]           var _properties: scala.collection.immutable.Map[String,String] = Map.empty[String, String];
[info]           var _geometry: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry = null;
[info]           var p0 = 3;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -926053069 => if (in.isCharBufEqualsTo(l, "properties"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _properties = d2(in, _properties)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1846020210 => if (in.isCharBufEqualsTo(l, "geometry"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geometry = d3(in, _geometry)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(2).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Feature(properties = _properties, geometry = _geometry)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d17(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON];
[info]             do 
[info]               x.+=(JsoniterCodecs.this.geoJSONCodec.decodeValue(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d16(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection): com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection = if (in.isNextToken('{'))
[info]         {
[info]           var _features: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -290659267 => if (in.isCharBufEqualsTo(l, "features"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _features = d17(in, _features)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection(features = _features)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON): com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 685445846 => if (in.isCharBufEqualsTo(l, "Feature"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d1(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -1377727980 => if (in.isCharBufEqualsTo(l, "FeatureCollection"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d16(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def e2(x: scala.collection.immutable.Map[String,String], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e8(x: (Double, Double), out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         {
[info]           out.writeComma();
[info]           out.writeVal(x._1)
[info]         };
[info]         {
[info]           out.writeComma();
[info]           out.writeVal(x._2)
[info]         };
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e7(x: IndexedSeq[(Double, Double)], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e8(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: IndexedSeq[IndexedSeq[(Double, Double)]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e7(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e5(x: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e6(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e4(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiPolygon")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e5(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e10(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e3(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e9(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("GeometryCollection")
[info]         };
[info]         {
[info]           val v = x.geometries;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geometries");
[info]               e10(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e11(x: com.github.plokhotnyuk.jsoniter_scala.macros.Point, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Point")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("coordinates");
[info]           e8(x.coordinates, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e12(x: com.github.plokhotnyuk.jsoniter_scala.macros.Polygon, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Polygon")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e13(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiLineString")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e14(x: com.github.plokhotnyuk.jsoniter_scala.macros.LineString, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("LineString")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e15(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiPoint")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon)) => e4(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection)) => e9(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Point)) => e11(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Polygon)) => e12(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString)) => e13(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.LineString)) => e14(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint)) => e15(x, out)
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Feature, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Feature")
[info]         };
[info]         {
[info]           val v = x.properties;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("properties");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("geometry");
[info]           e3(x.geometry, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e17(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             JsoniterCodecs.this.geoJSONCodec.encodeValue(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e16(x: com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("FeatureCollection")
[info]         };
[info]         {
[info]           val v = x.features;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("features");
[info]               e17(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Feature)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection)) => e16(x, out)
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val geoJSONCodec: JsonValueCodec[GeoJSON] = make[GeoJSON](CodecMakerConfig())
[info]                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:54:89: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("destination_addresses", "origin_addresses", "rows", "status");
[info]       private[this] val f1: Array[String] = Array("distance", "duration", "status");
[info]       private[this] val f2: Array[String] = Array("text", "value");
[info]       private[this] def d1(in: JsonReader, default: IndexedSeq[String]): IndexedSeq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Value): com.github.plokhotnyuk.jsoniter_scala.macros.Value = if (in.isNextToken('{'))
[info]         {
[info]           var _text: String = null;
[info]           var _value: Int = 0;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 111972721 => if (in.isCharBufEqualsTo(l, "value"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _value = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Value(text = _text, value = _value)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Elements): com.github.plokhotnyuk.jsoniter_scala.macros.Elements = if (in.isNextToken('{'))
[info]         {
[info]           var _distance: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _duration: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _status: String = null;
[info]           var p0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 288459765 => if (in.isCharBufEqualsTo(l, "distance"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _distance = d6(in, _distance)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1992012396 => if (in.isCharBufEqualsTo(l, "duration"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _duration = d6(in, _duration)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _status = in.readString(_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(7).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Elements(distance = _distance, duration = _duration, status = _status)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d4(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Rows): com.github.plokhotnyuk.jsoniter_scala.macros.Rows = if (in.isNextToken('{'))
[info]         {
[info]           var _elements: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]           var p0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -8339209 => if (in.isCharBufEqualsTo(l, "elements"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _elements = d4(in, _elements)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Rows(elements = _elements)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = if (in.isNextToken('{'))
[info]         {
[info]           var _destination_addresses: IndexedSeq[String] = IndexedSeq.empty[String];
[info]           var _origin_addresses: IndexedSeq[String] = IndexedSeq.empty[String];
[info]           var _rows: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]           var _status: String = null;
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 715423921 => if (in.isCharBufEqualsTo(l, "destination_addresses"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _destination_addresses = d1(in, _destination_addresses)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1780936137 => if (in.isCharBufEqualsTo(l, "origin_addresses"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _origin_addresses = d1(in, _origin_addresses)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3506649 => if (in.isCharBufEqualsTo(l, "rows"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _rows = d2(in, _rows)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _status = in.readString(_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(8).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix(destination_addresses = _destination_addresses, origin_addresses = _origin_addresses, rows = _rows, status = _status)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: IndexedSeq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: com.github.plokhotnyuk.jsoniter_scala.macros.Value, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("value");
[info]           out.writeVal(x.value)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.Elements, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("distance");
[info]           e6(x.distance, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("duration");
[info]           e6(x.duration, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           out.writeVal(x.status)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e4(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e5(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Rows, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.elements;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("elements");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e3(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.destination_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("destination_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.origin_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("origin_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.rows;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("rows");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           out.writeVal(x.status)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val googleMapsAPICodec: JsonValueCodec[DistanceMatrix] = make[DistanceMatrix](CodecMakerConfig())
[info]                                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:55:101: Generated JSON codec for type 'scala.collection.immutable.Map[Int,Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Map[Int,Boolean]] {
[info]       def nullValue: scala.collection.immutable.Map[Int,Boolean] = Map.empty[Int, Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Map[Int,Boolean]): scala.collection.immutable.Map[Int,Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Map[Int,Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Map[Int,Boolean]): scala.collection.immutable.Map[Int,Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[Int, Boolean];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.immutable.Map[Int,Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mapOfIntsToBooleansCodec: JsonValueCodec[Map[Int, Boolean]] = make[Map[Int, Boolean]](CodecMakerConfig())
[info]                                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:56:95: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("s", "i");
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _i: Int = 0;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _i = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields(s = _s, i = _i)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val missingReqFieldCodec: JsonValueCodec[MissingReqFields] = make[MissingReqFields](CodecMakerConfig())
[info]                                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:57:89: Generated JSON codec for type 'scala.collection.mutable.BitSet':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.BitSet] {
[info]       def nullValue: scala.collection.mutable.BitSet = BitSet.empty;
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](2);
[info]             do 
[info]               {
[info]                 val v = in.readInt();
[info]                 if (v.<(0).||(v.>=(2147483647)))
[info]                   in.decodeError("illegal value for bit set")
[info]                 else
[info]                   ();
[info]                 val i = v.>>>(6);
[info]                 if (i.>=(x.length))
[info]                   x = java.util.Arrays.copyOf(x, java.lang.Integer.highestOneBit(i).<<(1))
[info]                 else
[info]                   ();
[info]                 x(i).|=(1L.<<(v.&(63)))
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               BitSet.fromBitMaskNoCopy(x)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableBitSetCodec: JsonValueCodec[mutable.BitSet] = make[mutable.BitSet](CodecMakerConfig(bitSetValueLimit = Int.MaxValue /*WARNING: don't do this for open-system*/))
[info]                                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:58:120: Generated JSON codec for type 'scala.collection.mutable.LongMap[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.LongMap[Boolean]] {
[info]       def nullValue: scala.collection.mutable.LongMap[Boolean] = LongMap.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.LongMap[Boolean]): scala.collection.mutable.LongMap[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.LongMap[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.LongMap[Boolean]): scala.collection.mutable.LongMap[Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               LongMap.empty[Boolean];
[info]             do 
[info]               x.update(in.readKeyAsLong(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.mutable.LongMap[Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableLongMapOfBooleansCodec: JsonValueCodec[mutable.LongMap[Boolean]] = make[mutable.LongMap[Boolean]](CodecMakerConfig())
[info]                                                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:59:124: Generated JSON codec for type 'scala.collection.mutable.Map[Int,Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.Map[Int,Boolean]] {
[info]       def nullValue: scala.collection.mutable.Map[Int,Boolean] = Map.empty[Int, Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.Map[Int,Boolean]): scala.collection.mutable.Map[Int,Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.Map[Int,Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.Map[Int,Boolean]): scala.collection.mutable.Map[Int,Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               Map.empty[Int, Boolean];
[info]             do 
[info]               x.update(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.mutable.Map[Int,Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableMapOfIntsToBooleansCodec: JsonValueCodec[mutable.Map[Int, Boolean]] = make[mutable.Map[Int, Boolean]](CodecMakerConfig())
[info]                                                                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:60:96: Generated JSON codec for type 'scala.collection.mutable.Set[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.Set[Int]] {
[info]       def nullValue: scala.collection.mutable.Set[Int] = Set.empty[Int];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.Set[Int]): scala.collection.mutable.Set[Int] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.Set[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.Set[Int]): scala.collection.mutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               Set.empty[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.Set[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableSetOfIntsCodec: JsonValueCodec[mutable.Set[Int]] = make[mutable.Set[Int]](CodecMakerConfig())
[info]                                                                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:61:78: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Primitives':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Primitives] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("b", "s", "i", "l", "bl", "ch", "dbl", "f");
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = if (in.isNextToken('{'))
[info]         {
[info]           var _b: Byte = ((0): Byte);
[info]           var _s: Short = ((0): Short);
[info]           var _i: Int = 0;
[info]           var _l: Long = 0L;
[info]           var _bl: Boolean = false;
[info]           var _ch: Char = '\u0000';
[info]           var _dbl: Double = 0.0;
[info]           var _f: Float = 0.0F;
[info]           var p0 = 255;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _b = in.readByte()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readShort()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _i = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3146 => if (in.isCharBufEqualsTo(l, "bl"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _bl = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3173 => if (in.isCharBufEqualsTo(l, "ch"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _ch = in.readChar()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 99246 => if (in.isCharBufEqualsTo(l, "dbl"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _dbl = in.readDouble()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102 => if (in.isCharBufEqualsTo(l, "f"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _f = in.readFloat()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(255).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Primitives(b = _b, s = _s, i = _i, l = _l, bl = _bl, ch = _ch, dbl = _dbl, f = _f)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           out.writeVal(x.b)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           out.writeVal(x.l)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bl");
[info]           out.writeVal(x.bl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("ch");
[info]           out.writeVal(x.ch)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("dbl");
[info]           out.writeVal(x.dbl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("f");
[info]           out.writeVal(x.f)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val primitivesCodec: JsonValueCodec[Primitives] = make[Primitives](CodecMakerConfig())
[info]                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:62:73: Generated JSON codec for type 'scala.collection.immutable.Set[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Set[Int]] {
[info]       def nullValue: scala.collection.immutable.Set[Int] = Set.empty[Int];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Set.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val setOfIntsCodec: JsonValueCodec[Set[Int]] = make[Set[Int]](CodecMakerConfig())
[info]                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:63:78: Generated JSON codec for type 'Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]] {
[info]       def nullValue: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]       def decodeValue(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = d0(in, default);
[info]       def encodeValue(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "in_reply_to_status_id", "in_reply_to_status_id_str", "in_reply_to_user_id", "in_reply_to_user_id_str", "in_reply_to_screen_name", "user", "geo", "coordinates", "place", "contributors", "retweeted_status", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private[this] val f1: Array[String] = Array("screen_name", "name", "id", "id_str", "indices");
[info]       private[this] val f2: Array[String] = Array("url", "expanded_url", "display_url", "indices");
[info]       private[this] val f3: Array[String] = Array("id", "id_str", "name", "screen_name", "location", "description", "url", "entities", "protected", "followers_count", "friends_count", "listed_count", "created_at", "favourites_count", "utc_offset", "time_zone", "geo_enabled", "verified", "statuses_count", "lang", "contributors_enabled", "is_translator", "is_translation_enabled", "profile_background_color", "profile_background_image_url", "profile_background_image_url_https", "profile_background_tile", "profile_image_url", "profile_image_url_https", "profile_banner_url", "profile_link_color", "profile_sidebar_border_color", "profile_sidebar_fill_color", "profile_text_color", "profile_use_background_image", "has_extended_profile", "default_profile", "default_profile_image", "following", "follow_request_sent", "notifications", "translator_type");
[info]       private[this] val f4: Array[String] = Array("url", "description");
[info]       private[this] val f5: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "in_reply_to_status_id", "in_reply_to_status_id_str", "in_reply_to_user_id", "in_reply_to_user_id_str", "in_reply_to_screen_name", "user", "geo", "coordinates", "place", "contributors", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private[this] def d3(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: Seq[Int]): Seq[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions): com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions = if (in.isNextToken('{'))
[info]         {
[info]           var _screen_name: String = null;
[info]           var _name: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var p0 = 31;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _screen_name = in.readString(_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _name = in.readString(_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _indices = d6(in, _indices)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(15).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions(screen_name = _screen_name, name = _name, id = _id, id_str = _id_str, indices = _indices)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d8(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Urls): com.github.plokhotnyuk.jsoniter_scala.macros.Urls = if (in.isNextToken('{'))
[info]         {
[info]           var _url: String = null;
[info]           var _expanded_url: String = null;
[info]           var _display_url: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = in.readString(_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -518939415 => if (in.isCharBufEqualsTo(l, "expanded_url"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _expanded_url = in.readString(_expanded_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1714674802 => if (in.isCharBufEqualsTo(l, "display_url"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _display_url = in.readString(_display_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _indices = d6(in, _indices)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(7).!=(0))
[info]             in.requiredFieldError(f2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Urls(url = _url, expanded_url = _expanded_url, display_url = _display_url, indices = _indices)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d7(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]             do 
[info]               x.+=(d8(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Entities): com.github.plokhotnyuk.jsoniter_scala.macros.Entities = if (in.isNextToken('{'))
[info]         {
[info]           var _hashtags: Seq[String] = Seq.empty[String];
[info]           var _symbols: Seq[String] = Seq.empty[String];
[info]           var _user_mentions: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 149143079 => if (in.isCharBufEqualsTo(l, "hashtags"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _hashtags = d3(in, _hashtags)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1743438373 => if (in.isCharBufEqualsTo(l, "symbols"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _symbols = d3(in, _symbols)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -553518659 => if (in.isCharBufEqualsTo(l, "user_mentions"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user_mentions = d4(in, _user_mentions)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _urls = d7(in, _urls)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Entities(hashtags = _hashtags, symbols = _symbols, user_mentions = _user_mentions, urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d9(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(in.readString(null))
[info]         };
[info]       private[this] def d12(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Url): com.github.plokhotnyuk.jsoniter_scala.macros.Url = if (in.isNextToken('{'))
[info]         {
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           var p0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _urls = d7(in, _urls)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Url(urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d11(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities): com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = if (in.isNextToken('{'))
[info]         {
[info]           var _url: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var _description: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = d12(in, _url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _description = d12(in, _description)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f4(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities(url = _url, description = _description)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d10(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.User): com.github.plokhotnyuk.jsoniter_scala.macros.User = if (in.isNextToken('{'))
[info]         {
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _name: String = null;
[info]           var _screen_name: String = null;
[info]           var _location: String = null;
[info]           var _description: String = null;
[info]           var _url: String = null;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = null;
[info]           var _protected: Boolean = false;
[info]           var _followers_count: Int = 0;
[info]           var _friends_count: Int = 0;
[info]           var _listed_count: Int = 0;
[info]           var _created_at: String = null;
[info]           var _favourites_count: Int = 0;
[info]           var _utc_offset: Int = 0;
[info]           var _time_zone: String = null;
[info]           var _geo_enabled: Boolean = false;
[info]           var _verified: Boolean = false;
[info]           var _statuses_count: Int = 0;
[info]           var _lang: String = null;
[info]           var _contributors_enabled: Boolean = false;
[info]           var _is_translator: Boolean = false;
[info]           var _is_translation_enabled: Boolean = false;
[info]           var _profile_background_color: String = null;
[info]           var _profile_background_image_url: String = null;
[info]           var _profile_background_image_url_https: String = null;
[info]           var _profile_background_tile: Boolean = false;
[info]           var _profile_image_url: String = null;
[info]           var _profile_image_url_https: String = null;
[info]           var _profile_banner_url: String = null;
[info]           var _profile_link_color: String = null;
[info]           var _profile_sidebar_border_color: String = null;
[info]           var _profile_sidebar_fill_color: String = null;
[info]           var _profile_text_color: String = null;
[info]           var _profile_use_background_image: Boolean = false;
[info]           var _has_extended_profile: Boolean = false;
[info]           var _default_profile: Boolean = false;
[info]           var _default_profile_image: Boolean = false;
[info]           var _following: Boolean = false;
[info]           var _follow_request_sent: Boolean = false;
[info]           var _notifications: Boolean = false;
[info]           var _translator_type: String = null;
[info]           var p0 = -1;
[info]           var p1 = 1023;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _name = in.readString(_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _screen_name = in.readString(_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1901043637 => if (in.isCharBufEqualsTo(l, "location"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _location = in.readString(_location)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _description = in.readString(_description)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = in.readString(_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d11(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -608539730 => if (in.isCharBufEqualsTo(l, "protected"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _protected = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -460163995 => if (in.isCharBufEqualsTo(l, "followers_count"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _followers_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1666926107 => if (in.isCharBufEqualsTo(l, "friends_count"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _friends_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1974943731 => if (in.isCharBufEqualsTo(l, "listed_count"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _listed_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 226316666 => if (in.isCharBufEqualsTo(l, "favourites_count"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favourites_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1699658638 => if (in.isCharBufEqualsTo(l, "utc_offset"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _utc_offset = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 36848094 => if (in.isCharBufEqualsTo(l, "time_zone"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _time_zone = in.readString(_time_zone)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1085743021 => if (in.isCharBufEqualsTo(l, "geo_enabled"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1994383672 => if (in.isCharBufEqualsTo(l, "verified"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _verified = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1824078800 => if (in.isCharBufEqualsTo(l, "statuses_count"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _statuses_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 647263482 => if (in.isCharBufEqualsTo(l, "contributors_enabled"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 583435343 => if (in.isCharBufEqualsTo(l, "is_translator"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_translator = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1690715422 => if (in.isCharBufEqualsTo(l, "is_translation_enabled"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_translation_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1592986856 => if (in.isCharBufEqualsTo(l, "profile_background_color"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_color = in.readString(_profile_background_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1189803120 => if (in.isCharBufEqualsTo(l, "profile_background_image_url"))
[info]                       {
[info]                         if (p0.&(16777216).!=(0))
[info]                           p0.^=(16777216)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_image_url = in.readString(_profile_background_image_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 594447228 => if (in.isCharBufEqualsTo(l, "profile_background_image_url_https"))
[info]                       {
[info]                         if (p0.&(33554432).!=(0))
[info]                           p0.^=(33554432)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_image_url_https = in.readString(_profile_background_image_url_https)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1021718665 => if (in.isCharBufEqualsTo(l, "profile_background_tile"))
[info]                       {
[info]                         if (p0.&(67108864).!=(0))
[info]                           p0.^=(67108864)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_tile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -174080651 => if (in.isCharBufEqualsTo(l, "profile_image_url"))
[info]                       {
[info]                         if (p0.&(134217728).!=(0))
[info]                           p0.^=(134217728)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_image_url = in.readString(_profile_image_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -782008927 => if (in.isCharBufEqualsTo(l, "profile_image_url_https"))
[info]                       {
[info]                         if (p0.&(268435456).!=(0))
[info]                           p0.^=(268435456)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_image_url_https = in.readString(_profile_image_url_https)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -690137550 => if (in.isCharBufEqualsTo(l, "profile_banner_url"))
[info]                       {
[info]                         if (p0.&(536870912).!=(0))
[info]                           p0.^=(536870912)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_banner_url = in.readString(_profile_banner_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1512257332 => if (in.isCharBufEqualsTo(l, "profile_link_color"))
[info]                       {
[info]                         if (p0.&(1073741824).!=(0))
[info]                           p0.^=(1073741824)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_link_color = in.readString(_profile_link_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1412739479 => if (in.isCharBufEqualsTo(l, "profile_sidebar_border_color"))
[info]                       {
[info]                         if (p0.&(-2147483648).!=(0))
[info]                           p0.^=(-2147483648)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_sidebar_border_color = in.readString(_profile_sidebar_border_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 486184128 => if (in.isCharBufEqualsTo(l, "profile_sidebar_fill_color"))
[info]                       {
[info]                         if (p1.&(1).!=(0))
[info]                           p1.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_sidebar_fill_color = in.readString(_profile_sidebar_fill_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1774134745 => if (in.isCharBufEqualsTo(l, "profile_text_color"))
[info]                       {
[info]                         if (p1.&(2).!=(0))
[info]                           p1.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_text_color = in.readString(_profile_text_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -101767272 => if (in.isCharBufEqualsTo(l, "profile_use_background_image"))
[info]                       {
[info]                         if (p1.&(4).!=(0))
[info]                           p1.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_use_background_image = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 284519336 => if (in.isCharBufEqualsTo(l, "has_extended_profile"))
[info]                       {
[info]                         if (p1.&(8).!=(0))
[info]                           p1.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _has_extended_profile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -312724053 => if (in.isCharBufEqualsTo(l, "default_profile"))
[info]                       {
[info]                         if (p1.&(16).!=(0))
[info]                           p1.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _default_profile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 545330631 => if (in.isCharBufEqualsTo(l, "default_profile_image"))
[info]                       {
[info]                         if (p1.&(32).!=(0))
[info]                           p1.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _default_profile_image = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 765915793 => if (in.isCharBufEqualsTo(l, "following"))
[info]                       {
[info]                         if (p1.&(64).!=(0))
[info]                           p1.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _following = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 585125142 => if (in.isCharBufEqualsTo(l, "follow_request_sent"))
[info]                       {
[info]                         if (p1.&(128).!=(0))
[info]                           p1.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _follow_request_sent = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1272354024 => if (in.isCharBufEqualsTo(l, "notifications"))
[info]                       {
[info]                         if (p1.&(256).!=(0))
[info]                           p1.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _notifications = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -475640257 => if (in.isCharBufEqualsTo(l, "translator_type"))
[info]                       {
[info]                         if (p1.&(512).!=(0))
[info]                           p1.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _translator_type = in.readString(_translator_type)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(-1).!=(0))
[info]             in.requiredFieldError(f3(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           if (p1.&(1023).!=(0))
[info]             in.requiredFieldError(f3(Integer.numberOfTrailingZeros(p1).+(32)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.User(id = _id, id_str = _id_str, name = _name, screen_name = _screen_name, location = _location, description = _description, url = _url, entities = _entities, `protected` = _protected, followers_count = _followers_count, friends_count = _friends_count, listed_count = _listed_count, created_at = _created_at, favourites_count = _favourites_count, utc_offset = _utc_offset, time_zone = _time_zone, geo_enabled = _geo_enabled, verified = _verified, statuses_count = _statuses_count, lang = _lang, contributors_enabled = _contributors_enabled, is_translator = _is_translator, is_translation_enabled = _is_translation_enabled, profile_background_color = _profile_background_color, profile_background_image_url = _profile_background_image_url, profile_background_image_url_https = _profile_background_image_url_https, profile_background_tile = _profile_background_tile, profile_image_url = _profile_image_url, profile_image_url_https = _profile_image_url_https, profile_banner_url = _profile_banner_url, profile_link_color = _profile_link_color, profile_sidebar_border_color = _profile_sidebar_border_color, profile_sidebar_fill_color = _profile_sidebar_fill_color, profile_text_color = _profile_text_color, profile_use_background_image = _profile_use_background_image, has_extended_profile = _has_extended_profile, default_profile = _default_profile, default_profile_image = _default_profile_image, following = _following, follow_request_sent = _follow_request_sent, notifications = _notifications, translator_type = _translator_type)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d13(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus): com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var p0 = 16777215;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _truncated = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d2(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _source = in.readString(_source)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user = d10(in, _user)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo = d9(in, _geo)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _place = d9(in, _place)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors = d9(in, _contributors)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_quote_status = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweet_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorite_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorited = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _possibly_sensitive = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(16650367).!=(0))
[info]             in.requiredFieldError(f5(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet): com.github.plokhotnyuk.jsoniter_scala.macros.Tweet = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _retweeted_status: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = null;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var p0 = 33554431;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _truncated = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d2(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _source = in.readString(_source)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user = d10(in, _user)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo = d9(in, _geo)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _place = d9(in, _place)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors = d9(in, _contributors)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 364396852 => if (in.isCharBufEqualsTo(l, "retweeted_status"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted_status = d13(in, _retweeted_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_quote_status = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweet_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorite_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorited = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _possibly_sensitive = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(16777216).!=(0))
[info]                           p0.^=(16777216)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(33427583).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Tweet(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, retweeted_status = _retweeted_status, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]             do 
[info]               x.+=(d1(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e3(x: Seq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: Seq[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           out.writeVal(x.screen_name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           out.writeVal(x.name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e5(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e8(x: com.github.plokhotnyuk.jsoniter_scala.macros.Urls, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           out.writeVal(x.url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("expanded_url");
[info]           out.writeVal(x.expanded_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("display_url");
[info]           out.writeVal(x.display_url)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e7(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e8(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.Entities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.hashtags;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("hashtags");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.symbols;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("symbols");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.user_mentions;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("user_mentions");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e11(x: com.github.plokhotnyuk.jsoniter_scala.macros.Url, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e10(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           e11(x.url, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           e11(x.description, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e9(x: com.github.plokhotnyuk.jsoniter_scala.macros.User, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           out.writeVal(x.name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           out.writeVal(x.screen_name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("location");
[info]           out.writeVal(x.location)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           out.writeVal(x.description)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           out.writeVal(x.url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e10(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("protected");
[info]           out.writeVal(x.`protected`)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("followers_count");
[info]           out.writeVal(x.followers_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("friends_count");
[info]           out.writeVal(x.friends_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("listed_count");
[info]           out.writeVal(x.listed_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favourites_count");
[info]           out.writeVal(x.favourites_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("utc_offset");
[info]           out.writeVal(x.utc_offset)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("time_zone");
[info]           out.writeVal(x.time_zone)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("geo_enabled");
[info]           out.writeVal(x.geo_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("verified");
[info]           out.writeVal(x.verified)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("statuses_count");
[info]           out.writeVal(x.statuses_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("contributors_enabled");
[info]           out.writeVal(x.contributors_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translator");
[info]           out.writeVal(x.is_translator)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translation_enabled");
[info]           out.writeVal(x.is_translation_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_color");
[info]           out.writeVal(x.profile_background_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url");
[info]           out.writeVal(x.profile_background_image_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url_https");
[info]           out.writeVal(x.profile_background_image_url_https)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_tile");
[info]           out.writeVal(x.profile_background_tile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url");
[info]           out.writeVal(x.profile_image_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url_https");
[info]           out.writeVal(x.profile_image_url_https)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_banner_url");
[info]           out.writeVal(x.profile_banner_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_link_color");
[info]           out.writeVal(x.profile_link_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_border_color");
[info]           out.writeVal(x.profile_sidebar_border_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_fill_color");
[info]           out.writeVal(x.profile_sidebar_fill_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_text_color");
[info]           out.writeVal(x.profile_text_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_use_background_image");
[info]           out.writeVal(x.profile_use_background_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("has_extended_profile");
[info]           out.writeVal(x.has_extended_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile");
[info]           out.writeVal(x.default_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile_image");
[info]           out.writeVal(x.default_profile_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("following");
[info]           out.writeVal(x.following)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("follow_request_sent");
[info]           out.writeVal(x.follow_request_sent)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("notifications");
[info]           out.writeVal(x.notifications)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("translator_type");
[info]           out.writeVal(x.translator_type)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e12(x: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           out.writeVal(x.source)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           out.writeVal(x.retweet_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           out.writeVal(x.favorite_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           out.writeVal(x.source)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted_status");
[info]           e12(x.retweeted_status, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           out.writeVal(x.retweet_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           out.writeVal(x.favorite_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e1(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val twitterAPICodec: JsonValueCodec[Seq[Tweet]] = make[Seq[Tweet]](CodecMakerConfig())
[info]                                                                              ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:35:18: local val v1 in value primitivesFormat is never used
[warn]     implicit val v1: Format[Char] = Format(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:42:23: local val v1 in value adtFormat is never used
[warn]     implicit lazy val v1: OFormat[A] = Json.format[A]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:43:23: local val v2 in value adtFormat is never used
[warn]     implicit lazy val v2: OFormat[B] = Json.format[B]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:44:23: local val v3 in value adtFormat is never used
[warn]     implicit lazy val v3: OFormat[C] = Json.format[C]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:64:18: local val v1 in value googleMapsAPIFormat is never used
[warn]     implicit val v1: OFormat[Value] = Json.format[Value]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:65:18: local val v2 in value googleMapsAPIFormat is never used
[warn]     implicit val v2: OFormat[Elements] = Json.format[Elements]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:66:18: local val v3 in value googleMapsAPIFormat is never used
[warn]     implicit val v3: OFormat[Rows] = Json.format[Rows]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:70:18: local val v1 in value twitterAPIFormat is never used
[warn]     implicit val v1: OFormat[Urls] = Json.format[Urls]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:71:18: local val v2 in value twitterAPIFormat is never used
[warn]     implicit val v2: OFormat[Url] = Json.format[Url]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:72:18: local val v3 in value twitterAPIFormat is never used
[warn]     implicit val v3: OFormat[UserEntities] = Json.format[UserEntities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:73:18: local val v4 in value twitterAPIFormat is never used
[warn]     implicit val v4: OFormat[UserMentions] = Json.format[UserMentions]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:74:18: local val v5 in value twitterAPIFormat is never used
[warn]     implicit val v5: OFormat[Entities] = Json.format[Entities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:75:18: local val v6 in value twitterAPIFormat is never used
[warn]     implicit val v6: Format[User] = Jsonx.formatCaseClass[User]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:76:18: local val v7 in value twitterAPIFormat is never used
[warn]     implicit val v7: Format[RetweetedStatus] = Jsonx.formatCaseClass[RetweetedStatus]
[warn]                  ^
[warn] 14 warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.25.4-SNAPSHOT.jar ...
[info] Compiling 49 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/test-classes ...
Processing 421 classes from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes with "reflection" generator
Writing out Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/src_managed/jmh and resources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/resource_managed/jmh
[info] Done packaging.
[info] Compiling 617 Java sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.25.4-SNAPSHOT-tests.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.25.4-SNAPSHOT-jmh.jar ...
[info] Done packaging.
[info] Running (fork) org.openjdk.jmh.Main -p size=128 -jvm /usr/lib/jvm/jdk-10/bin/java -prof gc -rf json -rff jdk10.json .*Benchmark.*
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce
[info] # Run progress: 0.00% complete, ETA 01:10:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 304875.113 ops/s
[info] # Warmup Iteration   2: 666940.414 ops/s
[info] # Warmup Iteration   3: 656405.628 ops/s
[info] # Warmup Iteration   4: 669083.127 ops/s
[info] # Warmup Iteration   5: 671850.579 ops/s
[info] Iteration   1: 647346.680 ops/s
[info]                  ·gc.alloc.rate:            1721.392 MB/sec
[info]                  ·gc.alloc.rate.norm:       4184.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2034.939 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4946.106 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 656695.655 ops/s
[info]                  ·gc.alloc.rate:                   1745.622 MB/sec
[info]                  ·gc.alloc.rate.norm:              4184.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1356.150 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3250.493 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 7.983 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 660425.515 ops/s
[info]                  ·gc.alloc.rate:                                  1755.467 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4184.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.157 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.374 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.152 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4872.055 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 661948.559 ops/s
[info]                  ·gc.alloc.rate:            1759.886 MB/sec
[info]                  ·gc.alloc.rate.norm:       4184.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1363.061 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3240.579 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   5: 658887.270 ops/s
[info]                  ·gc.alloc.rate:            1751.665 MB/sec
[info]                  ·gc.alloc.rate.norm:       4184.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.479 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4883.411 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce":
[info]   657060.736 ±(99.9%) 22207.649 ops/s [Average]
[info]   (min, avg, max) = (647346.680, 657060.736, 661948.559), stdev = 5767.256
[info]   CI (99.9%): [634853.087, 679268.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate":
[info]   1746.806 ±(99.9%) 58.302 MB/sec [Average]
[info]   (min, avg, max) = (1721.392, 1746.806, 1759.886), stdev = 15.141
[info]   CI (99.9%): [1688.504, 1805.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4184.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4184.001, 4184.001, 4184.001), stdev = 0.001
[info]   CI (99.9%): [4184.001, 4184.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.031 ±(99.9%) 0.270 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.031, 0.157), stdev = 0.070
[info]   CI (99.9%): [≈ 0, 0.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.075 ±(99.9%) 0.643 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.075, 0.374), stdev = 0.167
[info]   CI (99.9%): [≈ 0, 0.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1768.556 ±(99.9%) 1437.625 MB/sec [Average]
[info]   (min, avg, max) = (1356.150, 1768.556, 2044.479), stdev = 373.347
[info]   CI (99.9%): [330.931, 3206.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   4238.528 ±(99.9%) 3492.224 B/op [Average]
[info]   (min, avg, max) = (3240.579, 4238.528, 4946.106), stdev = 906.919
[info]   CI (99.9%): [746.305, 7730.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   1.597 ±(99.9%) 13.746 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.597, 7.983), stdev = 3.570
[info]   CI (99.9%): [≈ 0, 15.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.200, 11.000), stdev = 3.421
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala
[info] # Run progress: 0.24% complete, ETA 01:53:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 253849.279 ops/s
[info] # Warmup Iteration   2: 1429160.987 ops/s
[info] # Warmup Iteration   3: 1381647.286 ops/s
[info] # Warmup Iteration   4: 1447983.672 ops/s
[info] # Warmup Iteration   5: 1440655.339 ops/s
[info] Iteration   1: 1447495.585 ops/s
[info]                  ·gc.alloc.rate:            1029.853 MB/sec
[info]                  ·gc.alloc.rate.norm:       1120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.327 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 736.616 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 1447744.125 ops/s
[info]                  ·gc.alloc.rate:            1030.085 MB/sec
[info]                  ·gc.alloc.rate.norm:       1120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.399 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1471.536 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 1404030.711 ops/s
[info]                  ·gc.alloc.rate:            999.132 MB/sec
[info]                  ·gc.alloc.rate.norm:       1120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.796 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 758.671 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 1444319.282 ops/s
[info]                  ·gc.alloc.rate:            1028.103 MB/sec
[info]                  ·gc.alloc.rate.norm:       1120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.986 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1475.012 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 1454923.068 ops/s
[info]                  ·gc.alloc.rate:                   1035.281 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.752 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        732.133 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.721 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala":
[info]   1439702.554 ±(99.9%) 78227.250 ops/s [Average]
[info]   (min, avg, max) = (1404030.711, 1439702.554, 1454923.068), stdev = 20315.368
[info]   CI (99.9%): [1361475.304, 1517929.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1024.491 ±(99.9%) 55.555 MB/sec [Average]
[info]   (min, avg, max) = (999.132, 1024.491, 1035.281), stdev = 14.428
[info]   CI (99.9%): [968.935, 1080.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1120.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1120.000, 1120.000, 1120.000), stdev = 0.001
[info]   CI (99.9%): [1120.000, 1120.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   947.652 ±(99.9%) 1427.289 MB/sec [Average]
[info]   (min, avg, max) = (676.752, 947.652, 1353.986), stdev = 370.662
[info]   CI (99.9%): [≈ 0, 2374.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1034.794 ±(99.9%) 1541.813 B/op [Average]
[info]   (min, avg, max) = (732.133, 1034.794, 1475.012), stdev = 400.404
[info]   CI (99.9%): [≈ 0, 2576.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.144 ±(99.9%) 1.241 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.144, 0.721), stdev = 0.322
[info]   CI (99.9%): [≈ 0, 1.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.600, 9.000), stdev = 2.191
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala
[info] # Run progress: 0.47% complete, ETA 01:52:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2498568.100 ops/s
[info] # Warmup Iteration   2: 3204404.172 ops/s
[info] # Warmup Iteration   3: 3002419.324 ops/s
[info] # Warmup Iteration   4: 3095271.181 ops/s
[info] # Warmup Iteration   5: 3308610.051 ops/s
[info] Iteration   1: 3308866.796 ops/s
[info]                  ·gc.alloc.rate:      218.616 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3278822.923 ops/s
[info]                  ·gc.alloc.rate:            216.634 MB/sec
[info]                  ·gc.alloc.rate.norm:       104.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.684 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 325.818 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 3281766.814 ops/s
[info]                  ·gc.alloc.rate:      216.822 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3290096.443 ops/s
[info]                  ·gc.alloc.rate:      217.383 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3283567.876 ops/s
[info]                  ·gc.alloc.rate:            216.932 MB/sec
[info]                  ·gc.alloc.rate.norm:       104.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.986 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 325.036 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala":
[info]   3288624.170 ±(99.9%) 46391.286 ops/s [Average]
[info]   (min, avg, max) = (3278822.923, 3288624.170, 3308866.796), stdev = 12047.670
[info]   CI (99.9%): [3242232.884, 3335015.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   217.277 ±(99.9%) 3.072 MB/sec [Average]
[info]   (min, avg, max) = (216.634, 217.277, 218.616), stdev = 0.798
[info]   CI (99.9%): [214.206, 220.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   104.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (104.000, 104.000, 104.000), stdev = 0.001
[info]   CI (99.9%): [104.000, 104.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   271.334 ±(99.9%) 1430.667 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 271.334, 678.684), stdev = 371.540
[info]   CI (99.9%): [≈ 0, 1702.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   130.171 ±(99.9%) 686.355 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 130.171, 325.818), stdev = 178.244
[info]   CI (99.9%): [≈ 0, 816.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.643
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson
[info] # Run progress: 0.71% complete, ETA 01:51:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24693.286 ops/s
[info] # Warmup Iteration   2: 156773.454 ops/s
[info] # Warmup Iteration   3: 158700.974 ops/s
[info] # Warmup Iteration   4: 157788.524 ops/s
[info] # Warmup Iteration   5: 156301.042 ops/s
[info] Iteration   1: 154545.014 ops/s
[info]                  ·gc.alloc.rate:                   1309.387 MB/sec
[info]                  ·gc.alloc.rate.norm:              13336.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.041 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        13790.805 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 6.783 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 160009.969 ops/s
[info]                  ·gc.alloc.rate:            1355.517 MB/sec
[info]                  ·gc.alloc.rate.norm:       13336.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.264 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13313.836 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 155293.432 ops/s
[info]                  ·gc.alloc.rate:            1315.728 MB/sec
[info]                  ·gc.alloc.rate.norm:       13336.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.433 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13718.172 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 160117.922 ops/s
[info]                  ·gc.alloc.rate:                   1356.776 MB/sec
[info]                  ·gc.alloc.rate.norm:              13336.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1358.313 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        13351.108 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 45.835 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 155740.585 ops/s
[info]                  ·gc.alloc.rate:                                  1319.542 MB/sec
[info]                  ·gc.alloc.rate.norm:                             13336.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.042 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.427 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.743 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       13772.607 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson":
[info]   157141.385 ±(99.9%) 10405.089 ops/s [Average]
[info]   (min, avg, max) = (154545.014, 157141.385, 160117.922), stdev = 2702.169
[info]   CI (99.9%): [146736.296, 167546.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1331.390 ±(99.9%) 88.153 MB/sec [Average]
[info]   (min, avg, max) = (1309.387, 1331.390, 1356.776), stdev = 22.893
[info]   CI (99.9%): [1243.237, 1419.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   13336.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13336.003, 13336.003, 13336.003), stdev = 0.001
[info]   CI (99.9%): [13336.002, 13336.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.008 ±(99.9%) 0.073 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.085 ±(99.9%) 0.735 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.085, 0.427), stdev = 0.191
[info]   CI (99.9%): [≈ 0, 0.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1356.359 ±(99.9%) 15.886 MB/sec [Average]
[info]   (min, avg, max) = (1353.264, 1356.359, 1362.743), stdev = 4.125
[info]   CI (99.9%): [1340.473, 1372.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   13589.306 ±(99.9%) 910.066 B/op [Average]
[info]   (min, avg, max) = (13313.836, 13589.306, 13790.805), stdev = 236.341
[info]   CI (99.9%): [12679.239, 14499.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.823 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.663), stdev = 2.032
[info]   CI (99.9%): [≈ 0, 8.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   10.524 ±(99.9%) 76.847 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.524, 45.835), stdev = 19.957
[info]   CI (99.9%): [≈ 0, 87.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 8.200, 10.000), stdev = 2.683
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce
[info] # Run progress: 0.94% complete, ETA 01:51:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 179672.349 ops/s
[info] # Warmup Iteration   2: 540127.288 ops/s
[info] # Warmup Iteration   3: 561928.307 ops/s
[info] # Warmup Iteration   4: 556719.325 ops/s
[info] # Warmup Iteration   5: 561138.367 ops/s
[info] Iteration   1: 551346.123 ops/s
[info]                  ·gc.alloc.rate:            1614.275 MB/sec
[info]                  ·gc.alloc.rate.norm:       4608.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.245 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3871.445 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 558054.114 ops/s
[info]                  ·gc.alloc.rate:            1633.975 MB/sec
[info]                  ·gc.alloc.rate.norm:       4608.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2034.486 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5737.490 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 548478.476 ops/s
[info]                  ·gc.alloc.rate:                                  1605.911 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4608.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.064 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.182 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1359.664 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3901.420 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                9.558 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 563178.763 ops/s
[info]                  ·gc.alloc.rate:                                  1648.780 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4608.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.093 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.261 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.338 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5713.504 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   5: 567508.918 ops/s
[info]                  ·gc.alloc.rate:            1662.223 MB/sec
[info]                  ·gc.alloc.rate.norm:       4608.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1363.507 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3779.904 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce":
[info]   557713.279 ±(99.9%) 30549.253 ops/s [Average]
[info]   (min, avg, max) = (548478.476, 557713.279, 567508.918), stdev = 7933.544
[info]   CI (99.9%): [527164.026, 588262.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.alloc.rate":
[info]   1633.033 ±(99.9%) 90.067 MB/sec [Average]
[info]   (min, avg, max) = (1605.911, 1633.033, 1662.223), stdev = 23.390
[info]   CI (99.9%): [1542.966, 1723.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   4608.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4608.001, 4608.001, 4608.001), stdev = 0.001
[info]   CI (99.9%): [4608.001, 4608.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.031 ±(99.9%) 0.170 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.031, 0.093), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.089 ±(99.9%) 0.479 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.089, 0.261), stdev = 0.124
[info]   CI (99.9%): [≈ 0, 0.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1631.648 ±(99.9%) 1433.445 MB/sec [Average]
[info]   (min, avg, max) = (1356.245, 1631.648, 2044.338), stdev = 372.261
[info]   CI (99.9%): [198.203, 3065.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   4600.753 ±(99.9%) 3957.525 B/op [Average]
[info]   (min, avg, max) = (3779.904, 4600.753, 5737.490), stdev = 1027.757
[info]   CI (99.9%): [643.228, 8558.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   1.912 ±(99.9%) 16.459 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.912, 9.558), stdev = 4.274
[info]   CI (99.9%): [≈ 0, 18.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.400, 12.000), stdev = 4.159
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala
[info] # Run progress: 1.18% complete, ETA 01:51:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_456a8d2b/target/1bdf7fe1/jackson-module-afterburner-2.9.5.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 484315.333 ops/s
[info] # Warmup Iteration   2: 1665328.884 ops/s
[info] # Warmup Iteration   3: 1702262.728 ops/s
[info] # Warmup Iteration   4: 1710378.498 ops/s
[info] # Warmup Iteration   5: 1709731.386 ops/s
[info] Iteration   1: 1700018.357 ops/s
[info]                  ·gc.alloc.rate:            708.585 MB/sec
[info]                  ·gc.alloc.rate.norm:       656.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.782 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 626.557 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 1706406.685 ops/s
[info]                  ·gc.alloc.rate:            711.133 MB/sec
[info]                  ·gc.alloc.rate.norm:       656.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.671 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 624.210 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 1697581.660 ops/s
[info]                  ·gc.alloc.rate:            707.435 MB/sec
[info]                  ·gc.alloc.rate.norm:       656.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.668 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 627.470 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 1637165.059 ops/s
[info]                  ·gc.alloc.rate:            682.529 MB/sec
[info]                  ·gc.alloc.rate.norm:       656.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.962 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 650.650 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 1707646.180 ops/s
[info]                  ·gc.alloc.rate:            711.662 MB/sec
[info]                  ·gc.alloc.rate.norm:       656.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.713 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 623.784 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala":
[info]   1689763.588 ±(99.9%) 114385.315 ops/s [Average]
[info]   (min, avg, max) = (1637165.059, 1689763.588, 1707646.180), stdev = 29705.503
[info]   CI (99.9%): [1575378.274, 1804148.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   704.269 ±(99.9%) 47.280 MB/sec [Average]
[info]   (min, avg, max) = (682.529, 704.269, 711.662), stdev = 12.278
[info]   CI (99.9%): [656.989, 751.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   656.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (656.000, 656.000, 656.000), stdev = 0.001
[info]   CI (99.9%): [656.000, 656.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   676.759 ±(99.9%) 0.472 MB/sec [Average]
[info]   (min, avg, max) = (676.668, 676.759, 676.962), stdev = 0.123
[info]   CI (99.9%): [676.287, 677.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   630.534 ±(99.9%) 43.710 B/op [Average]
[info]   (min, avg, max) = (623.784, 630.534, 650.650), stdev = 11.351
[info]   CI (99.9%): [586.825, 674.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala
[info] # Run progress: 1.41% complete, ETA 01:50:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8370691.612 ops/s
[info] # Warmup Iteration   2: 5606639.790 ops/s
[info] # Warmup Iteration   3: 5890086.712 ops/s
[info] # Warmup Iteration   4: 5876018.824 ops/s
[info] # Warmup Iteration   5: 5840068.155 ops/s
[info] Iteration   1: 5872646.146 ops/s
[info]                  ·gc.alloc.rate:      298.557 MB/sec
[info]                  ·gc.alloc.rate.norm: 80.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 5846422.540 ops/s
[info]                  ·gc.alloc.rate:                   297.132 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             677.375 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        182.377 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.179 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 6080284.190 ops/s
[info]                  ·gc.alloc.rate:      309.046 MB/sec
[info]                  ·gc.alloc.rate.norm: 80.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 6047327.376 ops/s
[info]                  ·gc.alloc.rate:            307.368 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.097 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 176.491 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 6076244.166 ops/s
[info]                  ·gc.alloc.rate:      308.820 MB/sec
[info]                  ·gc.alloc.rate.norm: 80.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala":
[info]   5984584.884 ±(99.9%) 443725.172 ops/s [Average]
[info]   (min, avg, max) = (5846422.540, 5984584.884, 6080284.190), stdev = 115234.018
[info]   CI (99.9%): [5540859.712, 6428310.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   304.184 ±(99.9%) 22.508 MB/sec [Average]
[info]   (min, avg, max) = (297.132, 304.184, 309.046), stdev = 5.845
[info]   CI (99.9%): [281.677, 326.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   80.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (80.000, 80.000, 80.000), stdev = 0.001
[info]   CI (99.9%): [80.000, 80.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   271.094 ±(99.9%) 1429.402 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 271.094, 678.097), stdev = 371.211
[info]   CI (99.9%): [≈ 0, 1700.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   71.774 ±(99.9%) 378.527 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 71.774, 182.377), stdev = 98.302
[info]   CI (99.9%): [≈ 0, 450.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.036 ±(99.9%) 0.309 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.036, 0.179), stdev = 0.080
[info]   CI (99.9%): [≈ 0, 0.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 4.000), stdev = 2.191
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 1.65% complete, ETA 01:50:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9180501.915 ops/s
[info] # Warmup Iteration   2: 7403680.661 ops/s
[info] # Warmup Iteration   3: 7266332.902 ops/s
[info] # Warmup Iteration   4: 7480954.358 ops/s
[info] # Warmup Iteration   5: 7481065.307 ops/s
[info] Iteration   1: 7478795.148 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 7472142.195 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 7482135.302 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 7455277.510 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 7482287.964 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc":
[info]   7474127.624 ±(99.9%) 43555.216 ops/s [Average]
[info]   (min, avg, max) = (7455277.510, 7474127.624, 7482287.964), stdev = 11311.151
[info]   CI (99.9%): [7430572.408, 7517682.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson
[info] # Run progress: 1.88% complete, ETA 01:50:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 43879.157 ops/s
[info] # Warmup Iteration   2: 297354.526 ops/s
[info] # Warmup Iteration   3: 296243.287 ops/s
[info] # Warmup Iteration   4: 300739.850 ops/s
[info] # Warmup Iteration   5: 299876.005 ops/s
[info] Iteration   1: 297878.138 ops/s
[info]                  ·gc.alloc.rate:            964.367 MB/sec
[info]                  ·gc.alloc.rate.norm:       5096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.081 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7155.365 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 300482.273 ops/s
[info]                  ·gc.alloc.rate:            972.712 MB/sec
[info]                  ·gc.alloc.rate.norm:       5096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.640 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3544.891 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 299882.313 ops/s
[info]                  ·gc.alloc.rate:                   971.041 MB/sec
[info]                  ·gc.alloc.rate.norm:              5096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.261 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        7107.129 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.496 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 300870.648 ops/s
[info]                  ·gc.alloc.rate:                   974.339 MB/sec
[info]                  ·gc.alloc.rate.norm:              5096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.891 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3540.285 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.485 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 298301.350 ops/s
[info]                  ·gc.alloc.rate:                   966.008 MB/sec
[info]                  ·gc.alloc.rate.norm:              5096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.470 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        7145.268 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.515 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson":
[info]   299482.944 ±(99.9%) 5114.056 ops/s [Average]
[info]   (min, avg, max) = (297878.138, 299482.944, 300870.648), stdev = 1328.104
[info]   CI (99.9%): [294368.888, 304597.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate":
[info]   969.694 ±(99.9%) 16.615 MB/sec [Average]
[info]   (min, avg, max) = (964.367, 969.694, 974.339), stdev = 4.315
[info]   CI (99.9%): [953.079, 986.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5096.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5096.001, 5096.001, 5096.001), stdev = 0.001
[info]   CI (99.9%): [5096.001, 5096.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1083.269 ±(99.9%) 1428.916 MB/sec [Average]
[info]   (min, avg, max) = (676.640, 1083.269, 1354.470), stdev = 371.085
[info]   CI (99.9%): [≈ 0, 2512.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   5698.588 ±(99.9%) 7578.962 B/op [Average]
[info]   (min, avg, max) = (3540.285, 5698.588, 7155.365), stdev = 1968.232
[info]   CI (99.9%): [≈ 0, 13277.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.400 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.400, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   2.099 ±(99.9%) 7.378 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.099, 3.515), stdev = 1.916
[info]   CI (99.9%): [≈ 0, 9.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.800, 10.000), stdev = 3.033
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce
[info] # Run progress: 2.12% complete, ETA 01:49:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 894770.754 ops/s
[info] # Warmup Iteration   2: 1478628.512 ops/s
[info] # Warmup Iteration   3: 1504601.396 ops/s
[info] # Warmup Iteration   4: 1496012.482 ops/s
[info] # Warmup Iteration   5: 1501996.568 ops/s
[info] Iteration   1: 1488394.739 ops/s
[info]                  ·gc.alloc.rate:                                  2299.541 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2432.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.090 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.095 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.027 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2878.822 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                3.522 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   2: 1504206.314 ops/s
[info]                  ·gc.alloc.rate:            2324.359 MB/sec
[info]                  ·gc.alloc.rate.norm:       2432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.407 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2139.083 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 1501335.824 ops/s
[info]                  ·gc.alloc.rate:                                  2320.454 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2432.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.839 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2143.136 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   4: 1530055.796 ops/s
[info]                  ·gc.alloc.rate:                                  2363.984 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2432.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.537 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2803.956 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 1514465.552 ops/s
[info]                  ·gc.alloc.rate:            2340.024 MB/sec
[info]                  ·gc.alloc.rate.norm:       2432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.288 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2124.640 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce":
[info]   1507691.645 ±(99.9%) 59993.342 ops/s [Average]
[info]   (min, avg, max) = (1488394.739, 1507691.645, 1530055.796), stdev = 15580.081
[info]   CI (99.9%): [1447698.303, 1567684.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate":
[info]   2329.673 ±(99.9%) 92.447 MB/sec [Average]
[info]   (min, avg, max) = (2299.541, 2329.673, 2363.984), stdev = 24.008
[info]   CI (99.9%): [2237.225, 2422.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2432.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2432.000, 2432.000, 2432.000), stdev = 0.001
[info]   CI (99.9%): [2432.000, 2432.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.019 ±(99.9%) 0.152 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.090), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.020 ±(99.9%) 0.160 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.095), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2316.220 ±(99.9%) 1432.648 MB/sec [Average]
[info]   (min, avg, max) = (2044.288, 2316.220, 2725.537), stdev = 372.054
[info]   CI (99.9%): [883.572, 3748.867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2417.928 ±(99.9%) 1492.247 B/op [Average]
[info]   (min, avg, max) = (2124.640, 2417.928, 2878.822), stdev = 387.532
[info]   CI (99.9%): [925.680, 3910.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   0.704 ±(99.9%) 6.065 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.704, 3.522), stdev = 1.575
[info]   CI (99.9%): [≈ 0, 6.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 8.000), stdev = 2.302
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava
[info] # Run progress: 2.35% complete, ETA 01:49:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.940 ops/s
[info] # Warmup Iteration   2: 9004804.808 ops/s
[info] # Warmup Iteration   3: 9497464.430 ops/s
[info] # Warmup Iteration   4: 9506961.120 ops/s
[info] # Warmup Iteration   5: 9455432.841 ops/s
[info] Iteration   1: 9490676.487 ops/s
[info]                  ·gc.alloc.rate:            1157.635 MB/sec
[info]                  ·gc.alloc.rate.norm:       192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1349.399 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 223.805 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 9240857.607 ops/s
[info]                  ·gc.alloc.rate:            1127.223 MB/sec
[info]                  ·gc.alloc.rate.norm:       192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1349.485 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 229.858 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 9407412.520 ops/s
[info]                  ·gc.alloc.rate:            1147.615 MB/sec
[info]                  ·gc.alloc.rate.norm:       192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.755 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 112.889 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 9420865.088 ops/s
[info]                  ·gc.alloc.rate:            1149.181 MB/sec
[info]                  ·gc.alloc.rate.norm:       192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1349.503 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 225.469 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   5: 9542960.885 ops/s
[info]                  ·gc.alloc.rate:                   1164.024 MB/sec
[info]                  ·gc.alloc.rate.norm:              192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1349.476 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        222.589 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.659 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava":
[info]   9420554.518 ±(99.9%) 440575.753 ops/s [Average]
[info]   (min, avg, max) = (9240857.607, 9420554.518, 9542960.885), stdev = 114416.124
[info]   CI (99.9%): [8979978.764, 9861130.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   1149.135 ±(99.9%) 53.646 MB/sec [Average]
[info]   (min, avg, max) = (1127.223, 1149.135, 1164.024), stdev = 13.932
[info]   CI (99.9%): [1095.489, 1202.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   192.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (192.000, 192.000, 192.000), stdev = 0.001
[info]   CI (99.9%): [192.000, 192.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   1214.523 ±(99.9%) 1161.892 MB/sec [Average]
[info]   (min, avg, max) = (674.755, 1214.523, 1349.503), stdev = 301.740
[info]   CI (99.9%): [52.631, 2376.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   202.922 ±(99.9%) 194.093 B/op [Average]
[info]   (min, avg, max) = (112.889, 202.922, 229.858), stdev = 50.405
[info]   CI (99.9%): [8.829, 397.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.132 ±(99.9%) 1.135 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.132, 0.659), stdev = 0.295
[info]   CI (99.9%): [≈ 0, 1.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 9.400, 11.000), stdev = 1.949
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala
[info] # Run progress: 2.59% complete, ETA 01:49:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 720778.073 ops/s
[info] # Warmup Iteration   2: 2171375.723 ops/s
[info] # Warmup Iteration   3: 2191056.636 ops/s
[info] # Warmup Iteration   4: 2187526.210 ops/s
[info] # Warmup Iteration   5: 2200584.769 ops/s
[info] Iteration   1: 2172434.555 ops/s
[info]                  ·gc.alloc.rate:                   1523.665 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2030.769 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1471.432 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.483 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   2: 2197910.998 ops/s
[info]                  ·gc.alloc.rate:            1541.780 MB/sec
[info]                  ·gc.alloc.rate.norm:       1104.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.955 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 970.223 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 2136927.268 ops/s
[info]                  ·gc.alloc.rate:                                  1498.848 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1104.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1358.135 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1000.356 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                3.434 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 2197829.653 ops/s
[info]                  ·gc.alloc.rate:                                  1541.593 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1104.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.178 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.128 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.870 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       976.009 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 2194011.340 ops/s
[info]                  ·gc.alloc.rate:            1539.304 MB/sec
[info]                  ·gc.alloc.rate.norm:       1104.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.836 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1466.571 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala":
[info]   2179822.763 ±(99.9%) 100916.209 ops/s [Average]
[info]   (min, avg, max) = (2136927.268, 2179822.763, 2197910.998), stdev = 26207.619
[info]   CI (99.9%): [2078906.553, 2280738.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1529.038 ±(99.9%) 71.151 MB/sec [Average]
[info]   (min, avg, max) = (1498.848, 1529.038, 1541.780), stdev = 18.478
[info]   CI (99.9%): [1457.887, 1600.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1104.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1104.000, 1104.000, 1104.000), stdev = 0.001
[info]   CI (99.9%): [1104.000, 1104.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.037 ±(99.9%) 0.305 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.178), stdev = 0.079
[info]   CI (99.9%): [≈ 0, 0.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.026 ±(99.9%) 0.218 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.128), stdev = 0.057
[info]   CI (99.9%): [≈ 0, 0.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1630.313 ±(99.9%) 1432.552 MB/sec [Average]
[info]   (min, avg, max) = (1354.955, 1630.313, 2044.836), stdev = 372.029
[info]   CI (99.9%): [197.760, 3062.865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1176.918 ±(99.9%) 1027.659 B/op [Average]
[info]   (min, avg, max) = (970.223, 1176.918, 1471.432), stdev = 266.880
[info]   CI (99.9%): [149.259, 2204.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.822 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.663), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.783 ±(99.9%) 5.763 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.783, 3.434), stdev = 1.497
[info]   CI (99.9%): [≈ 0, 6.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.400, 15.000), stdev = 4.980
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala
[info] # Run progress: 2.82% complete, ETA 01:49:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8666981.245 ops/s
[info] # Warmup Iteration   2: 10064395.626 ops/s
[info] # Warmup Iteration   3: 9695694.055 ops/s
[info] # Warmup Iteration   4: 10050327.981 ops/s
[info] # Warmup Iteration   5: 10093070.135 ops/s
[info] Iteration   1: 10106197.066 ops/s
[info]                  ·gc.alloc.rate:            1284.018 MB/sec
[info]                  ·gc.alloc.rate.norm:       200.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.049 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 211.220 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 10143659.927 ops/s
[info]                  ·gc.alloc.rate:            1289.315 MB/sec
[info]                  ·gc.alloc.rate.norm:       200.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.280 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 105.216 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 10026839.059 ops/s
[info]                  ·gc.alloc.rate:            1273.964 MB/sec
[info]                  ·gc.alloc.rate.norm:       200.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.028 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 212.883 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 9876900.395 ops/s
[info]                  ·gc.alloc.rate:                   1255.166 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1356.359 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        216.124 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.531 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 9484802.979 ops/s
[info]                  ·gc.alloc.rate:                                  1205.211 MB/sec
[info]                  ·gc.alloc.rate.norm:                             200.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.115 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.879 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       226.164 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala":
[info]   9927679.885 ±(99.9%) 1031560.872 ops/s [Average]
[info]   (min, avg, max) = (9484802.979, 9927679.885, 10143659.927), stdev = 267893.083
[info]   CI (99.9%): [8896119.013, 10959240.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1261.535 ±(99.9%) 131.213 MB/sec [Average]
[info]   (min, avg, max) = (1205.211, 1261.535, 1289.315), stdev = 34.076
[info]   CI (99.9%): [1130.322, 1392.748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   200.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (200.000, 200.000, 200.000), stdev = 0.001
[info]   CI (99.9%): [200.000, 200.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.023 ±(99.9%) 0.198 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.115), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.004 ±(99.9%) 0.033 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.019), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1221.919 ±(99.9%) 1170.278 MB/sec [Average]
[info]   (min, avg, max) = (678.280, 1221.919, 1362.879), stdev = 303.918
[info]   CI (99.9%): [51.640, 2392.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   194.321 ±(99.9%) 193.102 B/op [Average]
[info]   (min, avg, max) = (105.216, 194.321, 226.164), stdev = 50.148
[info]   CI (99.9%): [1.219, 387.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.106 ±(99.9%) 0.914 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.106, 0.531), stdev = 0.237
[info]   CI (99.9%): [≈ 0, 1.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 2.049
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson
[info] # Run progress: 3.06% complete, ETA 01:48:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 126338.560 ops/s
[info] # Warmup Iteration   2: 619805.334 ops/s
[info] # Warmup Iteration   3: 621678.564 ops/s
[info] # Warmup Iteration   4: 617633.720 ops/s
[info] # Warmup Iteration   5: 625387.852 ops/s
[info] Iteration   1: 620359.283 ops/s
[info]                  ·gc.alloc.rate:            1595.434 MB/sec
[info]                  ·gc.alloc.rate.norm:       4048.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2030.278 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5151.304 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   2: 625631.567 ops/s
[info]                  ·gc.alloc.rate:                   1608.803 MB/sec
[info]                  ·gc.alloc.rate.norm:              4048.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.334 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3405.202 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.676 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 610422.104 ops/s
[info]                  ·gc.alloc.rate:                                  1569.648 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4048.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.123 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.318 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2039.832 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5260.570 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                10.305 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   4: 610118.553 ops/s
[info]                  ·gc.alloc.rate:                                  1569.308 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4048.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.016 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.041 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.980 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3515.782 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 618868.276 ops/s
[info]                  ·gc.alloc.rate:            1591.734 MB/sec
[info]                  ·gc.alloc.rate.norm:       4048.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.912 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3466.076 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson":
[info]   617079.956 ±(99.9%) 25821.592 ops/s [Average]
[info]   (min, avg, max) = (610118.553, 617079.956, 625631.567), stdev = 6705.785
[info]   CI (99.9%): [591258.364, 642901.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1586.985 ±(99.9%) 66.221 MB/sec [Average]
[info]   (min, avg, max) = (1569.308, 1586.985, 1608.803), stdev = 17.197
[info]   CI (99.9%): [1520.764, 1653.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   4048.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4048.001, 4048.001, 4048.001), stdev = 0.001
[info]   CI (99.9%): [4048.001, 4048.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.028 ±(99.9%) 0.207 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.123), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.072 ±(99.9%) 0.535 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.072, 0.318), stdev = 0.139
[info]   CI (99.9%): [≈ 0, 0.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1629.867 ±(99.9%) 1424.431 MB/sec [Average]
[info]   (min, avg, max) = (1353.334, 1629.867, 2039.832), stdev = 369.920
[info]   CI (99.9%): [205.436, 3054.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   4159.787 ±(99.9%) 3683.461 B/op [Average]
[info]   (min, avg, max) = (3405.202, 4159.787, 5260.570), stdev = 956.583
[info]   CI (99.9%): [476.326, 7843.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.687 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   2.396 ±(99.9%) 17.252 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.396, 10.305), stdev = 4.480
[info]   CI (99.9%): [≈ 0, 19.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.600, 14.000), stdev = 4.722
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce
[info] # Run progress: 3.29% complete, ETA 01:48:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 784766.040 ops/s
[info] # Warmup Iteration   2: 1643394.273 ops/s
[info] # Warmup Iteration   3: 1653632.336 ops/s
[info] # Warmup Iteration   4: 1659417.172 ops/s
[info] # Warmup Iteration   5: 1655561.344 ops/s
[info] Iteration   1: 1657341.720 ops/s
[info]                  ·gc.alloc.rate:            1440.336 MB/sec
[info]                  ·gc.alloc.rate.norm:       1368.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.039 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1287.937 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 1652214.846 ops/s
[info]                  ·gc.alloc.rate:                   1435.894 MB/sec
[info]                  ·gc.alloc.rate.norm:              1368.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.388 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1291.301 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.635 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 1654485.514 ops/s
[info]                  ·gc.alloc.rate:            1437.973 MB/sec
[info]                  ·gc.alloc.rate.norm:       1368.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.144 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1290.153 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 1662001.853 ops/s
[info]                  ·gc.alloc.rate:                                  1444.426 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1368.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.191 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.181 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2040.784 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1932.804 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                3.154 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 1666424.742 ops/s
[info]                  ·gc.alloc.rate:                                  1448.259 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1368.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.762 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1287.241 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce":
[info]   1658493.735 ±(99.9%) 22122.375 ops/s [Average]
[info]   (min, avg, max) = (1652214.846, 1658493.735, 1666424.742), stdev = 5745.111
[info]   CI (99.9%): [1636371.360, 1680616.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1441.378 ±(99.9%) 19.195 MB/sec [Average]
[info]   (min, avg, max) = (1435.894, 1441.378, 1448.259), stdev = 4.985
[info]   CI (99.9%): [1422.183, 1460.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1368.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1368.000, 1368.000, 1368.000), stdev = 0.001
[info]   CI (99.9%): [1368.000, 1368.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.039 ±(99.9%) 0.328 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.039, 0.191), stdev = 0.085
[info]   CI (99.9%): [≈ 0, 0.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.037 ±(99.9%) 0.310 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.181), stdev = 0.081
[info]   CI (99.9%): [≈ 0, 0.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1494.224 ±(99.9%) 1176.570 MB/sec [Average]
[info]   (min, avg, max) = (1355.388, 1494.224, 2040.784), stdev = 305.552
[info]   CI (99.9%): [317.653, 2670.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   1417.887 ±(99.9%) 1108.416 B/op [Average]
[info]   (min, avg, max) = (1287.241, 1417.887, 1932.804), stdev = 287.852
[info]   CI (99.9%): [309.471, 2526.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   0.758 ±(99.9%) 5.266 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.758, 3.154), stdev = 1.367
[info]   CI (99.9%): [≈ 0, 6.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.600, 8.000), stdev = 2.074
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava
[info] # Run progress: 3.53% complete, ETA 01:48:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.976 ops/s
[info] # Warmup Iteration   2: 16497763.514 ops/s
[info] # Warmup Iteration   3: 16136962.456 ops/s
[info] # Warmup Iteration   4: 17017159.542 ops/s
[info] # Warmup Iteration   5: 16874849.383 ops/s
[info] Iteration   1: 16687627.610 ops/s
[info]                  ·gc.alloc.rate:      508.899 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 16633971.960 ops/s
[info]                  ·gc.alloc.rate:            507.267 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.745 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 63.848 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 16506580.219 ops/s
[info]                  ·gc.alloc.rate:            503.385 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.728 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 64.338 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 16330181.918 ops/s
[info]                  ·gc.alloc.rate:            498.005 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.743 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 65.035 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 16786489.041 ops/s
[info]                  ·gc.alloc.rate:      511.910 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava":
[info]   16588970.149 ±(99.9%) 679427.598 ops/s [Average]
[info]   (min, avg, max) = (16330181.918, 16588970.149, 16786489.041), stdev = 176445.189
[info]   CI (99.9%): [15909542.552, 17268397.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   505.893 ±(99.9%) 20.705 MB/sec [Average]
[info]   (min, avg, max) = (498.005, 505.893, 511.910), stdev = 5.377
[info]   CI (99.9%): [485.188, 526.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   404.843 ±(99.9%) 1423.081 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 404.843, 674.745), stdev = 369.570
[info]   CI (99.9%): [≈ 0, 1827.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   38.644 ±(99.9%) 135.849 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 38.644, 65.035), stdev = 35.280
[info]   CI (99.9%): [≈ 0, 174.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.400, 6.000), stdev = 3.130
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala
[info] # Run progress: 3.76% complete, ETA 01:47:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_456a8d2b/target/1bdf7fe1/jackson-module-afterburner-2.9.5.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 1329651.777 ops/s
[info] # Warmup Iteration   2: 4964322.426 ops/s
[info] # Warmup Iteration   3: 4995203.510 ops/s
[info] # Warmup Iteration   4: 5005951.358 ops/s
[info] # Warmup Iteration   5: 4942306.093 ops/s
[info] Iteration   1: 4983512.728 ops/s
[info]                  ·gc.alloc.rate:            1368.345 MB/sec
[info]                  ·gc.alloc.rate.norm:       432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.027 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 427.480 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 4993696.600 ops/s
[info]                  ·gc.alloc.rate:            1370.537 MB/sec
[info]                  ·gc.alloc.rate.norm:       432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.473 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 426.621 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 4992810.948 ops/s
[info]                  ·gc.alloc.rate:            1370.255 MB/sec
[info]                  ·gc.alloc.rate.norm:       432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.354 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 426.672 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 4968349.665 ops/s
[info]                  ·gc.alloc.rate:                   1363.650 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1357.447 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        430.035 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.477 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 4970443.737 ops/s
[info]                  ·gc.alloc.rate:                                  1364.041 MB/sec
[info]                  ·gc.alloc.rate.norm:                             432.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.176 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.056 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.654 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       431.561 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala":
[info]   4981762.736 ±(99.9%) 46190.588 ops/s [Average]
[info]   (min, avg, max) = (4968349.665, 4981762.736, 4993696.600), stdev = 11995.549
[info]   CI (99.9%): [4935572.147, 5027953.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1367.366 ±(99.9%) 12.805 MB/sec [Average]
[info]   (min, avg, max) = (1363.650, 1367.366, 1370.537), stdev = 3.325
[info]   CI (99.9%): [1354.561, 1380.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   432.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (432.000, 432.000, 432.000), stdev = 0.001
[info]   CI (99.9%): [432.000, 432.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.035 ±(99.9%) 0.304 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.035, 0.176), stdev = 0.079
[info]   CI (99.9%): [≈ 0, 0.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.011 ±(99.9%) 0.096 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.056), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1356.191 ±(99.9%) 15.337 MB/sec [Average]
[info]   (min, avg, max) = (1353.354, 1356.191, 1362.654), stdev = 3.983
[info]   CI (99.9%): [1340.853, 1371.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   428.474 ±(99.9%) 8.531 B/op [Average]
[info]   (min, avg, max) = (426.621, 428.474, 431.561), stdev = 2.216
[info]   CI (99.9%): [419.942, 437.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.295 ±(99.9%) 2.544 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.295, 1.477), stdev = 0.661
[info]   CI (99.9%): [≈ 0, 2.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.600, 10.000), stdev = 3.050
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala
[info] # Run progress: 4.00% complete, ETA 01:47:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14255331.597 ops/s
[info] # Warmup Iteration   2: 20130514.459 ops/s
[info] # Warmup Iteration   3: 21475632.933 ops/s
[info] # Warmup Iteration   4: 21270973.568 ops/s
[info] # Warmup Iteration   5: 21374890.616 ops/s
[info] Iteration   1: 21415954.349 ops/s
[info]                  ·gc.alloc.rate:            653.163 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.456 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 49.785 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 21364900.915 ops/s
[info]                  ·gc.alloc.rate:                   651.607 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             677.451 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        49.904 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.049 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 21155223.955 ops/s
[info]                  ·gc.alloc.rate:            645.144 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.053 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 50.449 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 21014709.964 ops/s
[info]                  ·gc.alloc.rate:            640.814 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.372 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 50.738 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 21232842.471 ops/s
[info]                  ·gc.alloc.rate:            647.498 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.402 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 50.217 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala":
[info]   21236726.331 ±(99.9%) 622389.606 ops/s [Average]
[info]   (min, avg, max) = (21014709.964, 21236726.331, 21415954.349), stdev = 161632.604
[info]   CI (99.9%): [20614336.724, 21859115.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   647.645 ±(99.9%) 19.164 MB/sec [Average]
[info]   (min, avg, max) = (640.814, 647.645, 653.163), stdev = 4.977
[info]   CI (99.9%): [628.481, 666.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   677.547 ±(99.9%) 1.098 MB/sec [Average]
[info]   (min, avg, max) = (677.372, 677.547, 678.053), stdev = 0.285
[info]   CI (99.9%): [676.449, 678.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   50.219 ±(99.9%) 1.504 B/op [Average]
[info]   (min, avg, max) = (49.785, 50.219, 50.738), stdev = 0.390
[info]   CI (99.9%): [48.715, 51.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.010 ±(99.9%) 0.085 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.049), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 4.24% complete, ETA 01:47:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15657455.540 ops/s
[info] # Warmup Iteration   2: 20845333.203 ops/s
[info] # Warmup Iteration   3: 19533186.887 ops/s
[info] # Warmup Iteration   4: 20671484.699 ops/s
[info] # Warmup Iteration   5: 20572586.225 ops/s
[info] Iteration   1: 20589507.902 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 20678813.148 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 20688276.063 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 20676076.390 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 20679696.094 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc":
[info]   20662473.919 ±(99.9%) 158045.259 ops/s [Average]
[info]   (min, avg, max) = (20589507.902, 20662473.919, 20688276.063), stdev = 41043.852
[info]   CI (99.9%): [20504428.660, 20820519.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson
[info] # Run progress: 4.47% complete, ETA 01:47:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 292217.702 ops/s
[info] # Warmup Iteration   2: 1234889.425 ops/s
[info] # Warmup Iteration   3: 1233248.664 ops/s
[info] # Warmup Iteration   4: 1261813.410 ops/s
[info] # Warmup Iteration   5: 1245567.266 ops/s
[info] Iteration   1: 1239003.931 ops/s
[info]                  ·gc.alloc.rate:            1832.397 MB/sec
[info]                  ·gc.alloc.rate.norm:       2328.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2030.057 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2579.121 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   2: 1243427.723 ops/s
[info]                  ·gc.alloc.rate:                                  1838.779 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2328.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1357.911 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1719.194 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                5.902 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 1246464.177 ops/s
[info]                  ·gc.alloc.rate:                                  1844.109 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2328.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.191 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.241 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.674 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2581.193 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 1252330.519 ops/s
[info]                  ·gc.alloc.rate:            1852.276 MB/sec
[info]                  ·gc.alloc.rate.norm:       2328.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.221 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2569.243 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 1266733.303 ops/s
[info]                  ·gc.alloc.rate:                                  1873.525 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2328.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.208 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2540.087 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson":
[info]   1249591.930 ±(99.9%) 41347.946 ops/s [Average]
[info]   (min, avg, max) = (1239003.931, 1249591.930, 1266733.303), stdev = 10737.930
[info]   CI (99.9%): [1208243.985, 1290939.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1848.217 ±(99.9%) 61.285 MB/sec [Average]
[info]   (min, avg, max) = (1832.397, 1848.217, 1873.525), stdev = 15.915
[info]   CI (99.9%): [1786.932, 1909.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2328.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2328.000, 2328.000, 2328.000), stdev = 0.001
[info]   CI (99.9%): [2328.000, 2328.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.040 ±(99.9%) 0.325 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.040, 0.191), stdev = 0.084
[info]   CI (99.9%): [≈ 0, 0.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.050 ±(99.9%) 0.410 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.241), stdev = 0.106
[info]   CI (99.9%): [≈ 0, 0.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1904.214 ±(99.9%) 1176.201 MB/sec [Average]
[info]   (min, avg, max) = (1357.911, 1904.214, 2044.674), stdev = 305.456
[info]   CI (99.9%): [728.013, 3080.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   2397.768 ±(99.9%) 1462.047 B/op [Average]
[info]   (min, avg, max) = (1719.194, 2397.768, 2581.193), stdev = 379.689
[info]   CI (99.9%): [935.721, 3859.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   1.180 ±(99.9%) 10.164 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.180, 5.902), stdev = 2.639
[info]   CI (99.9%): [≈ 0, 11.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.600, 14.000), stdev = 4.393
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 4.71% complete, ETA 01:46:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 297623.134 ops/s
[info] # Warmup Iteration   2: 354153.827 ops/s
[info] # Warmup Iteration   3: 355513.324 ops/s
[info] # Warmup Iteration   4: 357344.463 ops/s
[info] # Warmup Iteration   5: 355589.354 ops/s
[info] Iteration   1: 351647.429 ops/s
[info]                  ·gc.alloc.rate:                   1935.340 MB/sec
[info]                  ·gc.alloc.rate.norm:              8664.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.963 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        6070.284 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 14.907 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 358930.859 ops/s
[info]                  ·gc.alloc.rate:                                  1975.836 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8664.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.081 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.354 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.396 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8964.635 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 359401.499 ops/s
[info]                  ·gc.alloc.rate:            1978.282 MB/sec
[info]                  ·gc.alloc.rate.norm:       8664.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.199 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8952.689 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 359727.893 ops/s
[info]                  ·gc.alloc.rate:                                  1979.992 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8664.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.026 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.101 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8944.527 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 357631.437 ops/s
[info]                  ·gc.alloc.rate:            1969.078 MB/sec
[info]                  ·gc.alloc.rate.norm:       8664.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.746 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8996.941 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce":
[info]   357467.823 ±(99.9%) 12899.837 ops/s [Average]
[info]   (min, avg, max) = (351647.429, 357467.823, 359727.893), stdev = 3350.047
[info]   CI (99.9%): [344567.987, 370367.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1967.706 ±(99.9%) 71.480 MB/sec [Average]
[info]   (min, avg, max) = (1935.340, 1967.706, 1979.992), stdev = 18.563
[info]   CI (99.9%): [1896.226, 2039.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   8664.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8664.001, 8664.001, 8664.001), stdev = 0.001
[info]   CI (99.9%): [8664.001, 8664.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.017 ±(99.9%) 0.137 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.081), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.076 ±(99.9%) 0.600 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.076, 0.354), stdev = 0.156
[info]   CI (99.9%): [≈ 0, 0.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1906.681 ±(99.9%) 1185.463 MB/sec [Average]
[info]   (min, avg, max) = (1355.963, 1906.681, 2044.746), stdev = 307.861
[info]   CI (99.9%): [721.218, 3092.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   8385.815 ±(99.9%) 4984.946 B/op [Average]
[info]   (min, avg, max) = (6070.284, 8385.815, 8996.941), stdev = 1294.575
[info]   CI (99.9%): [3400.869, 13370.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   2.981 ±(99.9%) 25.671 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.981, 14.907), stdev = 6.667
[info]   CI (99.9%): [≈ 0, 28.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 9.000), stdev = 2.490
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 4.94% complete, ETA 01:46:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 208006.549 ops/s
[info] # Warmup Iteration   2: 429089.991 ops/s
[info] # Warmup Iteration   3: 431208.391 ops/s
[info] # Warmup Iteration   4: 437004.276 ops/s
[info] # Warmup Iteration   5: 432649.437 ops/s
[info] Iteration   1: 431658.666 ops/s
[info]                  ·gc.alloc.rate:            574.789 MB/sec
[info]                  ·gc.alloc.rate.norm:       2096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.680 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2467.552 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 425463.433 ops/s
[info]                  ·gc.alloc.rate:            566.719 MB/sec
[info]                  ·gc.alloc.rate.norm:       2096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.917 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2503.568 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 434766.731 ops/s
[info]                  ·gc.alloc.rate:            578.914 MB/sec
[info]                  ·gc.alloc.rate.norm:       2096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.644 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2449.837 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 434303.740 ops/s
[info]                  ·gc.alloc.rate:            578.359 MB/sec
[info]                  ·gc.alloc.rate.norm:       2096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.757 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2452.600 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 434471.547 ops/s
[info]                  ·gc.alloc.rate:                   578.514 MB/sec
[info]                  ·gc.alloc.rate.norm:              2096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.661 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2451.596 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.413 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala":
[info]   432132.823 ±(99.9%) 15138.660 ops/s [Average]
[info]   (min, avg, max) = (425463.433, 432132.823, 434766.731), stdev = 3931.462
[info]   CI (99.9%): [416994.163, 447271.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   575.459 ±(99.9%) 19.871 MB/sec [Average]
[info]   (min, avg, max) = (566.719, 575.459, 578.914), stdev = 5.160
[info]   CI (99.9%): [555.588, 595.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2096.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2096.001, 2096.001, 2096.001), stdev = 0.001
[info]   CI (99.9%): [2096.001, 2096.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   676.732 ±(99.9%) 0.432 MB/sec [Average]
[info]   (min, avg, max) = (676.644, 676.732, 676.917), stdev = 0.112
[info]   CI (99.9%): [676.300, 677.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   2465.031 ±(99.9%) 87.328 B/op [Average]
[info]   (min, avg, max) = (2449.837, 2465.031, 2503.568), stdev = 22.679
[info]   CI (99.9%): [2377.702, 2552.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.483 ±(99.9%) 4.155 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.483, 2.413), stdev = 1.079
[info]   CI (99.9%): [≈ 0, 4.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 5.18% complete, ETA 01:46:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 930639.865 ops/s
[info] # Warmup Iteration   2: 973756.196 ops/s
[info] # Warmup Iteration   3: 982774.607 ops/s
[info] # Warmup Iteration   4: 983958.902 ops/s
[info] # Warmup Iteration   5: 982425.786 ops/s
[info] Iteration   1: 981254.681 ops/s
[info]                  ·gc.alloc.rate:            653.416 MB/sec
[info]                  ·gc.alloc.rate.norm:       1048.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.172 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1087.706 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 984798.733 ops/s
[info]                  ·gc.alloc.rate:            655.919 MB/sec
[info]                  ·gc.alloc.rate.norm:       1048.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.322 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1083.795 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 984758.203 ops/s
[info]                  ·gc.alloc.rate:            655.675 MB/sec
[info]                  ·gc.alloc.rate.norm:       1048.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.099 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1083.841 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 983334.958 ops/s
[info]                  ·gc.alloc.rate:            654.733 MB/sec
[info]                  ·gc.alloc.rate.norm:       1048.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.099 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1085.402 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 983529.286 ops/s
[info]                  ·gc.alloc.rate:            654.870 MB/sec
[info]                  ·gc.alloc.rate.norm:       1048.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.105 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1085.183 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala":
[info]   983535.172 ±(99.9%) 5557.865 ops/s [Average]
[info]   (min, avg, max) = (981254.681, 983535.172, 984798.733), stdev = 1443.360
[info]   CI (99.9%): [977977.307, 989093.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   654.923 ±(99.9%) 3.786 MB/sec [Average]
[info]   (min, avg, max) = (653.416, 654.923, 655.919), stdev = 0.983
[info]   CI (99.9%): [651.137, 658.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1048.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1048.000, 1048.000, 1048.000), stdev = 0.001
[info]   CI (99.9%): [1048.000, 1048.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   678.159 ±(99.9%) 0.369 MB/sec [Average]
[info]   (min, avg, max) = (678.099, 678.159, 678.322), stdev = 0.096
[info]   CI (99.9%): [677.790, 678.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1085.185 ±(99.9%) 6.130 B/op [Average]
[info]   (min, avg, max) = (1083.795, 1085.185, 1087.706), stdev = 1.592
[info]   CI (99.9%): [1079.055, 1091.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 5.41% complete, ETA 01:46:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 63618.512 ops/s
[info] # Warmup Iteration   2: 96555.526 ops/s
[info] # Warmup Iteration   3: 97651.683 ops/s
[info] # Warmup Iteration   4: 98135.758 ops/s
[info] # Warmup Iteration   5: 97890.312 ops/s
[info] Iteration   1: 99826.464 ops/s
[info]                  ·gc.alloc.rate:                                  3457.000 MB/sec
[info]                  ·gc.alloc.rate.norm:                             54496.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3407.813 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       53720.615 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 97762.058 ops/s
[info]                  ·gc.alloc.rate:                                  3384.402 MB/sec
[info]                  ·gc.alloc.rate.norm:                             54496.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3406.639 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       54854.068 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   3: 97466.502 ops/s
[info]                  ·gc.alloc.rate:                                  3374.280 MB/sec
[info]                  ·gc.alloc.rate.norm:                             54496.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.045 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3406.624 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       55018.375 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 98865.501 ops/s
[info]                  ·gc.alloc.rate:                                  3423.314 MB/sec
[info]                  ·gc.alloc.rate.norm:                             54496.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.042 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3407.369 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       54242.175 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   5: 99828.530 ops/s
[info]                  ·gc.alloc.rate:            3456.018 MB/sec
[info]                  ·gc.alloc.rate.norm:       54496.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      3406.606 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 53716.849 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson":
[info]   98749.811 ±(99.9%) 4287.350 ops/s [Average]
[info]   (min, avg, max) = (97466.502, 98749.811, 99828.530), stdev = 1113.411
[info]   CI (99.9%): [94462.461, 103037.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3419.003 ±(99.9%) 149.506 MB/sec [Average]
[info]   (min, avg, max) = (3374.280, 3419.003, 3457.000), stdev = 38.826
[info]   CI (99.9%): [3269.497, 3568.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   54496.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (54496.004, 54496.004, 54496.004), stdev = 0.001
[info]   CI (99.9%): [54496.004, 54496.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.004 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.025 ±(99.9%) 0.071 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.045), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   3407.010 ±(99.9%) 2.130 MB/sec [Average]
[info]   (min, avg, max) = (3406.606, 3407.010, 3407.813), stdev = 0.553
[info]   CI (99.9%): [3404.880, 3409.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   54310.416 ±(99.9%) 2359.290 B/op [Average]
[info]   (min, avg, max) = (53716.849, 54310.416, 55018.375), stdev = 612.700
[info]   CI (99.9%): [51951.126, 56669.707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 8.400, 12.000), stdev = 3.286
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 5.65% complete, ETA 01:46:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 263111.258 ops/s
[info] # Warmup Iteration   2: 327022.469 ops/s
[info] # Warmup Iteration   3: 335261.043 ops/s
[info] # Warmup Iteration   4: 336621.111 ops/s
[info] # Warmup Iteration   5: 317375.766 ops/s
[info] Iteration   1: 334742.329 ops/s
[info]                  ·gc.alloc.rate:            512.085 MB/sec
[info]                  ·gc.alloc.rate.norm:       2408.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.022 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3188.294 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 331845.404 ops/s
[info]                  ·gc.alloc.rate:            507.770 MB/sec
[info]                  ·gc.alloc.rate.norm:       2408.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.175 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3216.113 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 335505.348 ops/s
[info]                  ·gc.alloc.rate:      513.474 MB/sec
[info]                  ·gc.alloc.rate.norm: 2408.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 334832.873 ops/s
[info]                  ·gc.alloc.rate:            512.230 MB/sec
[info]                  ·gc.alloc.rate.norm:       2408.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.030 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3187.428 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 332482.887 ops/s
[info]                  ·gc.alloc.rate:            508.699 MB/sec
[info]                  ·gc.alloc.rate.norm:       2408.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.106 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3209.914 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce":
[info]   333881.768 ±(99.9%) 6204.445 ops/s [Average]
[info]   (min, avg, max) = (331845.404, 333881.768, 335505.348), stdev = 1611.275
[info]   CI (99.9%): [327677.322, 340086.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   510.852 ±(99.9%) 9.516 MB/sec [Average]
[info]   (min, avg, max) = (507.770, 510.852, 513.474), stdev = 2.471
[info]   CI (99.9%): [501.335, 520.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2408.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2408.001, 2408.001, 2408.001), stdev = 0.001
[info]   CI (99.9%): [2408.001, 2408.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   542.466 ±(99.9%) 1167.700 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 542.466, 678.175), stdev = 303.248
[info]   CI (99.9%): [≈ 0, 1710.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2560.350 ±(99.9%) 5511.565 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2560.350, 3216.113), stdev = 1431.336
[info]   CI (99.9%): [≈ 0, 8071.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 4.000), stdev = 1.732
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 5.88% complete, ETA 01:45:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 320305.811 ops/s
[info] # Warmup Iteration   2: 531811.037 ops/s
[info] # Warmup Iteration   3: 545545.702 ops/s
[info] # Warmup Iteration   4: 546453.188 ops/s
[info] # Warmup Iteration   5: 547978.180 ops/s
[info] Iteration   1: 530602.583 ops/s
[info]                  ·gc.alloc.rate:                   391.024 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.700 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2007.479 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.976 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 519513.784 ops/s
[info]                  ·gc.alloc.rate:      382.911 MB/sec
[info]                  ·gc.alloc.rate.norm: 1160.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 546708.679 ops/s
[info]                  ·gc.alloc.rate:            403.018 MB/sec
[info]                  ·gc.alloc.rate.norm:       1160.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.569 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1950.238 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 546723.069 ops/s
[info]                  ·gc.alloc.rate:            402.880 MB/sec
[info]                  ·gc.alloc.rate.norm:       1160.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.660 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1948.288 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 547348.286 ops/s
[info]                  ·gc.alloc.rate:      403.366 MB/sec
[info]                  ·gc.alloc.rate.norm: 1160.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala":
[info]   538179.280 ±(99.9%) 48540.445 ops/s [Average]
[info]   (min, avg, max) = (519513.784, 538179.280, 547348.286), stdev = 12605.799
[info]   CI (99.9%): [489638.835, 586719.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   396.640 ±(99.9%) 35.754 MB/sec [Average]
[info]   (min, avg, max) = (382.911, 396.640, 403.366), stdev = 9.285
[info]   CI (99.9%): [360.885, 432.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1160.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1160.001, 1160.001, 1160.001), stdev = 0.001
[info]   CI (99.9%): [1160.001, 1160.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   406.186 ±(99.9%) 1427.801 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 406.186, 677.569), stdev = 370.795
[info]   CI (99.9%): [≈ 0, 1833.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1181.201 ±(99.9%) 4153.098 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1181.201, 2007.479), stdev = 1078.546
[info]   CI (99.9%): [≈ 0, 5334.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.395 ±(99.9%) 3.403 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.395, 1.976), stdev = 0.884
[info]   CI (99.9%): [≈ 0, 3.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 5.000), stdev = 2.588
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 6.12% complete, ETA 01:45:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2521135.225 ops/s
[info] # Warmup Iteration   2: 2722035.105 ops/s
[info] # Warmup Iteration   3: 2768658.209 ops/s
[info] # Warmup Iteration   4: 2784661.709 ops/s
[info] # Warmup Iteration   5: 2718731.816 ops/s
[info] Iteration   1: 2725333.777 ops/s
[info]                  ·gc.alloc.rate:                   1260.428 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.387 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        782.847 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.385 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 2722625.092 ops/s
[info]                  ·gc.alloc.rate:                   1259.277 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.830 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        783.240 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.385 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 2785309.088 ops/s
[info]                  ·gc.alloc.rate:            1288.213 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.042 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 383.178 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 2741512.431 ops/s
[info]                  ·gc.alloc.rate:                   1268.438 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.206 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        777.800 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.294 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 2711563.717 ops/s
[info]                  ·gc.alloc.rate:                                  1254.084 MB/sec
[info]                  ·gc.alloc.rate.norm:                             728.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.179 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.104 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.762 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       791.088 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala":
[info]   2737268.821 ±(99.9%) 111328.102 ops/s [Average]
[info]   (min, avg, max) = (2711563.717, 2737268.821, 2785309.088), stdev = 28911.555
[info]   CI (99.9%): [2625940.719, 2848596.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1266.088 ±(99.9%) 51.573 MB/sec [Average]
[info]   (min, avg, max) = (1254.084, 1266.088, 1288.213), stdev = 13.393
[info]   CI (99.9%): [1214.514, 1317.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   728.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (728.000, 728.000, 728.000), stdev = 0.001
[info]   CI (99.9%): [728.000, 728.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.036 ±(99.9%) 0.308 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.036, 0.179), stdev = 0.080
[info]   CI (99.9%): [≈ 0, 0.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.021 ±(99.9%) 0.179 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.104), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1221.245 ±(99.9%) 1169.356 MB/sec [Average]
[info]   (min, avg, max) = (678.042, 1221.245, 1362.762), stdev = 303.678
[info]   CI (99.9%): [51.889, 2390.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   703.630 ±(99.9%) 690.041 B/op [Average]
[info]   (min, avg, max) = (383.178, 703.630, 791.088), stdev = 179.202
[info]   CI (99.9%): [13.589, 1393.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 6.440 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 3.998), stdev = 1.672
[info]   CI (99.9%): [≈ 0, 7.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.613 ±(99.9%) 3.695 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.613, 2.294), stdev = 0.960
[info]   CI (99.9%): [≈ 0, 4.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 7.000), stdev = 1.732
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 6.35% complete, ETA 01:45:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2688678.670 ops/s
[info] # Warmup Iteration   2: 2989380.189 ops/s
[info] # Warmup Iteration   3: 2998286.325 ops/s
[info] # Warmup Iteration   4: 2997042.133 ops/s
[info] # Warmup Iteration   5: 2951199.540 ops/s
[info] Iteration   1: 3006976.847 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3007671.757 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3008003.206 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3005925.233 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3008150.795 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   3007345.568 ±(99.9%) 3518.961 ops/s [Average]
[info]   (min, avg, max) = (3005925.233, 3007345.568, 3008150.795), stdev = 913.863
[info]   CI (99.9%): [3003826.606, 3010864.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 6.59% complete, ETA 01:45:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 311026.622 ops/s
[info] # Warmup Iteration   2: 401076.843 ops/s
[info] # Warmup Iteration   3: 407489.171 ops/s
[info] # Warmup Iteration   4: 402110.555 ops/s
[info] # Warmup Iteration   5: 408710.082 ops/s
[info] Iteration   1: 408749.223 ops/s
[info]                  ·gc.alloc.rate:            587.946 MB/sec
[info]                  ·gc.alloc.rate.norm:       2264.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.395 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2608.443 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 411984.765 ops/s
[info]                  ·gc.alloc.rate:      592.678 MB/sec
[info]                  ·gc.alloc.rate.norm: 2264.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 410770.127 ops/s
[info]                  ·gc.alloc.rate:            590.760 MB/sec
[info]                  ·gc.alloc.rate.norm:       2264.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.285 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2595.593 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 410269.864 ops/s
[info]                  ·gc.alloc.rate:            590.108 MB/sec
[info]                  ·gc.alloc.rate.norm:       2264.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.394 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2598.882 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 411530.579 ops/s
[info]                  ·gc.alloc.rate:            592.158 MB/sec
[info]                  ·gc.alloc.rate.norm:       2264.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.637 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2590.813 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson":
[info]   410660.912 ±(99.9%) 4843.365 ops/s [Average]
[info]   (min, avg, max) = (408749.223, 410660.912, 411984.765), stdev = 1257.806
[info]   CI (99.9%): [405817.547, 415504.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   590.730 ±(99.9%) 7.197 MB/sec [Average]
[info]   (min, avg, max) = (587.946, 590.730, 592.678), stdev = 1.869
[info]   CI (99.9%): [583.533, 597.927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2264.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2264.001, 2264.001, 2264.001), stdev = 0.001
[info]   CI (99.9%): [2264.001, 2264.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   541.942 ±(99.9%) 1166.572 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 541.942, 677.637), stdev = 302.955
[info]   CI (99.9%): [≈ 0, 1708.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   2078.746 ±(99.9%) 4474.726 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2078.746, 2608.443), stdev = 1162.072
[info]   CI (99.9%): [≈ 0, 6553.472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.200, 4.000), stdev = 1.789
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 6.82% complete, ETA 01:44:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15581.566 ops/s
[info] # Warmup Iteration   2: 18875.119 ops/s
[info] # Warmup Iteration   3: 19018.424 ops/s
[info] # Warmup Iteration   4: 19364.941 ops/s
[info] # Warmup Iteration   5: 19501.341 ops/s
[info] Iteration   1: 19502.392 ops/s
[info]                  ·gc.alloc.rate:            1245.600 MB/sec
[info]                  ·gc.alloc.rate.norm:       100512.093 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.343 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 109448.413 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 19065.421 ops/s
[info]                  ·gc.alloc.rate:            1218.005 MB/sec
[info]                  ·gc.alloc.rate.norm:       100512.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.691 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 111956.617 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 19030.208 ops/s
[info]                  ·gc.alloc.rate:            1215.416 MB/sec
[info]                  ·gc.alloc.rate.norm:       100512.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.296 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 112162.485 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 19160.818 ops/s
[info]                  ·gc.alloc.rate:            1224.008 MB/sec
[info]                  ·gc.alloc.rate.norm:       100512.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.274 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 55697.906 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 19053.302 ops/s
[info]                  ·gc.alloc.rate:                                  1216.869 MB/sec
[info]                  ·gc.alloc.rate.norm:                             100512.021 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.031 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.566 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1359.610 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       112302.231 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                275.116 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce":
[info]   19162.428 ±(99.9%) 756.481 ops/s [Average]
[info]   (min, avg, max) = (19030.208, 19162.428, 19502.392), stdev = 196.456
[info]   CI (99.9%): [18405.947, 19918.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate":
[info]   1223.980 ±(99.9%) 48.210 MB/sec [Average]
[info]   (min, avg, max) = (1215.416, 1223.980, 1245.600), stdev = 12.520
[info]   CI (99.9%): [1175.769, 1272.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   100512.036 ±(99.9%) 0.123 B/op [Average]
[info]   (min, avg, max) = (100512.021, 100512.036, 100512.093), stdev = 0.032
[info]   CI (99.9%): [100511.913, 100512.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.006 ±(99.9%) 0.053 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.031), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.513 ±(99.9%) 4.418 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.513, 2.566), stdev = 1.147
[info]   CI (99.9%): [≈ 0, 4.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1221.443 ±(99.9%) 1169.224 MB/sec [Average]
[info]   (min, avg, max) = (678.274, 1221.443, 1359.610), stdev = 303.644
[info]   CI (99.9%): [52.219, 2390.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   100313.530 ±(99.9%) 96144.498 B/op [Average]
[info]   (min, avg, max) = (55697.906, 100313.530, 112302.231), stdev = 24968.421
[info]   CI (99.9%): [4169.032, 196458.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   55.023 ±(99.9%) 473.766 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 55.023, 275.116), stdev = 123.035
[info]   CI (99.9%): [≈ 0, 528.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 7.000), stdev = 1.789
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 7.06% complete, ETA 01:44:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19797.683 ops/s
[info] # Warmup Iteration   2: 33956.249 ops/s
[info] # Warmup Iteration   3: 34653.941 ops/s
[info] # Warmup Iteration   4: 34700.106 ops/s
[info] # Warmup Iteration   5: 34739.226 ops/s
[info] Iteration   1: 34227.884 ops/s
[info]                  ·gc.alloc.rate:            858.002 MB/sec
[info]                  ·gc.alloc.rate.norm:       39456.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.739 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 62298.922 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 34738.294 ops/s
[info]                  ·gc.alloc.rate:            870.737 MB/sec
[info]                  ·gc.alloc.rate.norm:       39456.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.314 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 30691.354 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 34754.667 ops/s
[info]                  ·gc.alloc.rate:            871.136 MB/sec
[info]                  ·gc.alloc.rate.norm:       39456.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.332 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 30678.110 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 34778.108 ops/s
[info]                  ·gc.alloc.rate:            872.042 MB/sec
[info]                  ·gc.alloc.rate.norm:       39456.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.549 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 30656.063 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 34383.980 ops/s
[info]                  ·gc.alloc.rate:            861.923 MB/sec
[info]                  ·gc.alloc.rate.norm:       39456.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.757 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 62016.329 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala":
[info]   34576.587 ±(99.9%) 976.355 ops/s [Average]
[info]   (min, avg, max) = (34227.884, 34576.587, 34778.108), stdev = 253.556
[info]   CI (99.9%): [33600.231, 35552.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   866.768 ±(99.9%) 24.578 MB/sec [Average]
[info]   (min, avg, max) = (858.002, 866.768, 872.042), stdev = 6.383
[info]   CI (99.9%): [842.190, 891.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   39456.012 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (39456.012, 39456.012, 39456.013), stdev = 0.001
[info]   CI (99.9%): [39456.010, 39456.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   948.338 ±(99.9%) 1428.588 MB/sec [Average]
[info]   (min, avg, max) = (677.314, 948.338, 1354.757), stdev = 371.000
[info]   CI (99.9%): [≈ 0, 2376.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   43268.156 ±(99.9%) 66400.281 B/op [Average]
[info]   (min, avg, max) = (30656.063, 43268.156, 62298.922), stdev = 17243.942
[info]   CI (99.9%): [≈ 0, 109668.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.400, 9.000), stdev = 1.949
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 7.29% complete, ETA 01:44:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37512.934 ops/s
[info] # Warmup Iteration   2: 41831.283 ops/s
[info] # Warmup Iteration   3: 41335.701 ops/s
[info] # Warmup Iteration   4: 41682.781 ops/s
[info] # Warmup Iteration   5: 42118.680 ops/s
[info] Iteration   1: 42130.143 ops/s
[info]                  ·gc.alloc.rate:      566.020 MB/sec
[info]                  ·gc.alloc.rate.norm: 21144.010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 42147.627 ops/s
[info]                  ·gc.alloc.rate:            566.234 MB/sec
[info]                  ·gc.alloc.rate.norm:       21144.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.089 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 25320.833 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 42000.721 ops/s
[info]                  ·gc.alloc.rate:            564.195 MB/sec
[info]                  ·gc.alloc.rate.norm:       21144.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.028 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 25410.040 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 40509.517 ops/s
[info]                  ·gc.alloc.rate:            544.184 MB/sec
[info]                  ·gc.alloc.rate.norm:       21144.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.045 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26345.090 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 41325.985 ops/s
[info]                  ·gc.alloc.rate:            555.135 MB/sec
[info]                  ·gc.alloc.rate.norm:       21144.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.051 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 25825.620 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala":
[info]   41622.799 ±(99.9%) 2724.969 ops/s [Average]
[info]   (min, avg, max) = (40509.517, 41622.799, 42147.627), stdev = 707.666
[info]   CI (99.9%): [38897.829, 44347.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   559.154 ±(99.9%) 36.679 MB/sec [Average]
[info]   (min, avg, max) = (544.184, 559.154, 566.234), stdev = 9.525
[info]   CI (99.9%): [522.475, 595.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   21144.010 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (21144.010, 21144.010, 21144.010), stdev = 0.001
[info]   CI (99.9%): [21144.009, 21144.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   542.442 ±(99.9%) 1167.648 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 542.442, 678.089), stdev = 303.234
[info]   CI (99.9%): [≈ 0, 1710.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   20580.317 ±(99.9%) 44328.170 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 20580.317, 26345.090), stdev = 11511.885
[info]   CI (99.9%): [≈ 0, 64908.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 7.53% complete, ETA 01:44:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13014.170 ops/s
[info] # Warmup Iteration   2: 24786.019 ops/s
[info] # Warmup Iteration   3: 24273.378 ops/s
[info] # Warmup Iteration   4: 24662.775 ops/s
[info] # Warmup Iteration   5: 24409.712 ops/s
[info] Iteration   1: 24735.562 ops/s
[info]                  ·gc.alloc.rate:            1310.572 MB/sec
[info]                  ·gc.alloc.rate.norm:       83400.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.709 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 86208.714 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 24775.934 ops/s
[info]                  ·gc.alloc.rate:                   1312.618 MB/sec
[info]                  ·gc.alloc.rate.norm:              83400.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.913 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        86023.769 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 42.314 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 24742.210 ops/s
[info]                  ·gc.alloc.rate:            1310.945 MB/sec
[info]                  ·gc.alloc.rate.norm:       83400.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.656 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 86180.846 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 24798.004 ops/s
[info]                  ·gc.alloc.rate:                                  1314.161 MB/sec
[info]                  ·gc.alloc.rate.norm:                             83400.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.081 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.145 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1358.965 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       86243.400 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                253.657 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 24897.121 ops/s
[info]                  ·gc.alloc.rate:                                  1319.153 MB/sec
[info]                  ·gc.alloc.rate.norm:                             83400.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.020 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.270 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.646 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       86149.721 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson":
[info]   24789.766 ±(99.9%) 250.912 ops/s [Average]
[info]   (min, avg, max) = (24735.562, 24789.766, 24897.121), stdev = 65.161
[info]   CI (99.9%): [24538.854, 25040.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1313.490 ±(99.9%) 13.377 MB/sec [Average]
[info]   (min, avg, max) = (1310.572, 1313.490, 1319.153), stdev = 3.474
[info]   CI (99.9%): [1300.113, 1326.867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   83400.017 ±(99.9%) 0.003 B/op [Average]
[info]   (min, avg, max) = (83400.016, 83400.017, 83400.018), stdev = 0.001
[info]   CI (99.9%): [83400.014, 83400.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.020 ±(99.9%) 0.135 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.081), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.283 ±(99.9%) 8.579 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.283, 5.145), stdev = 2.228
[info]   CI (99.9%): [≈ 0, 9.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1356.978 ±(99.9%) 14.408 MB/sec [Average]
[info]   (min, avg, max) = (1353.913, 1356.978, 1362.646), stdev = 3.742
[info]   CI (99.9%): [1342.569, 1371.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   86161.290 ±(99.9%) 324.572 B/op [Average]
[info]   (min, avg, max) = (86023.769, 86161.290, 86243.400), stdev = 84.290
[info]   CI (99.9%): [85836.718, 86485.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.689 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.997), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   59.194 ±(99.9%) 424.500 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 59.194, 253.657), stdev = 110.241
[info]   CI (99.9%): [≈ 0, 483.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.200, 10.000), stdev = 2.775
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 7.76% complete, ETA 01:43:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17555.791 ops/s
[info] # Warmup Iteration   2: 28008.511 ops/s
[info] # Warmup Iteration   3: 27890.706 ops/s
[info] # Warmup Iteration   4: 28019.632 ops/s
[info] # Warmup Iteration   5: 28302.800 ops/s
[info] Iteration   1: 28193.748 ops/s
[info]                  ·gc.alloc.rate:            1601.527 MB/sec
[info]                  ·gc.alloc.rate.norm:       89408.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2034.125 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 113558.550 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   2: 28273.756 ops/s
[info]                  ·gc.alloc.rate:                   1606.604 MB/sec
[info]                  ·gc.alloc.rate.norm:              89408.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.820 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        75451.793 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 37.077 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 28172.852 ops/s
[info]                  ·gc.alloc.rate:                                  1600.359 MB/sec
[info]                  ·gc.alloc.rate.norm:                             89408.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.152 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 8.510 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2040.889 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       114019.337 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                186.063 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 28750.251 ops/s
[info]                  ·gc.alloc.rate:                                  1633.458 MB/sec
[info]                  ·gc.alloc.rate.norm:                             89408.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.349 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1363.040 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       74606.569 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 28768.907 ops/s
[info]                  ·gc.alloc.rate:                                  1634.187 MB/sec
[info]                  ·gc.alloc.rate.norm:                             89408.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.056 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.843 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       74562.489 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce":
[info]   28431.903 ±(99.9%) 1161.200 ops/s [Average]
[info]   (min, avg, max) = (28172.852, 28431.903, 28768.907), stdev = 301.560
[info]   CI (99.9%): [27270.703, 29593.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1615.227 ±(99.9%) 65.996 MB/sec [Average]
[info]   (min, avg, max) = (1600.359, 1615.227, 1634.187), stdev = 17.139
[info]   CI (99.9%): [1549.232, 1681.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   89408.015 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (89408.014, 89408.015, 89408.016), stdev = 0.001
[info]   CI (99.9%): [89408.012, 89408.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.032 ±(99.9%) 0.259 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.032, 0.152), stdev = 0.067
[info]   CI (99.9%): [≈ 0, 0.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.783 ±(99.9%) 14.492 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.783, 8.510), stdev = 3.763
[info]   CI (99.9%): [≈ 0, 16.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1631.344 ±(99.9%) 1427.797 MB/sec [Average]
[info]   (min, avg, max) = (1355.820, 1631.344, 2040.889), stdev = 370.794
[info]   CI (99.9%): [203.547, 3059.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   90439.747 ±(99.9%) 82089.454 B/op [Average]
[info]   (min, avg, max) = (74562.489, 90439.747, 114019.337), stdev = 21318.371
[info]   CI (99.9%): [8350.293, 172529.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   44.628 ±(99.9%) 310.663 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 44.628, 186.063), stdev = 80.678
[info]   CI (99.9%): [≈ 0, 355.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.800, 15.000), stdev = 5.119
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 8.00% complete, ETA 01:43:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12268.348 ops/s
[info] # Warmup Iteration   2: 28443.189 ops/s
[info] # Warmup Iteration   3: 28549.628 ops/s
[info] # Warmup Iteration   4: 28647.410 ops/s
[info] # Warmup Iteration   5: 28315.165 ops/s
[info] Iteration   1: 28166.488 ops/s
[info]                  ·gc.alloc.rate:            1543.000 MB/sec
[info]                  ·gc.alloc.rate.norm:       86208.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.706 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 75632.061 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 28648.231 ops/s
[info]                  ·gc.alloc.rate:                   1568.955 MB/sec
[info]                  ·gc.alloc.rate.norm:              86208.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.370 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        74362.420 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 36.596 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 28501.865 ops/s
[info]                  ·gc.alloc.rate:                                  1561.128 MB/sec
[info]                  ·gc.alloc.rate.norm:                             86208.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.012 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.682 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2040.263 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       112666.653 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                220.699 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   4: 28678.567 ops/s
[info]                  ·gc.alloc.rate:                                  1571.184 MB/sec
[info]                  ·gc.alloc.rate.norm:                             86208.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.030 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.630 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1363.202 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       74796.447 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 28699.552 ops/s
[info]                  ·gc.alloc.rate:            1571.870 MB/sec
[info]                  ·gc.alloc.rate.norm:       86208.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.800 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 74741.726 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala":
[info]   28538.941 ±(99.9%) 855.266 ops/s [Average]
[info]   (min, avg, max) = (28166.488, 28538.941, 28699.552), stdev = 222.110
[info]   CI (99.9%): [27683.675, 29394.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1563.227 ±(99.9%) 46.542 MB/sec [Average]
[info]   (min, avg, max) = (1543.000, 1563.227, 1571.870), stdev = 12.087
[info]   CI (99.9%): [1516.685, 1609.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   86208.015 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (86208.014, 86208.015, 86208.015), stdev = 0.001
[info]   CI (99.9%): [86208.013, 86208.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.008 ±(99.9%) 0.050 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.030), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.462 ±(99.9%) 2.759 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.462, 1.630), stdev = 0.717
[info]   CI (99.9%): [≈ 0, 3.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1494.668 ±(99.9%) 1174.576 MB/sec [Average]
[info]   (min, avg, max) = (1353.370, 1494.668, 2040.263), stdev = 305.034
[info]   CI (99.9%): [320.092, 2669.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   82439.862 ±(99.9%) 65089.928 B/op [Average]
[info]   (min, avg, max) = (74362.420, 82439.862, 112666.653), stdev = 16903.648
[info]   CI (99.9%): [17349.933, 147529.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.997), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   51.459 ±(99.9%) 369.376 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 51.459, 220.699), stdev = 95.926
[info]   CI (99.9%): [≈ 0, 420.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.800, 10.000), stdev = 3.962
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 8.24% complete, ETA 01:43:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23690.794 ops/s
[info] # Warmup Iteration   2: 29986.934 ops/s
[info] # Warmup Iteration   3: 30857.115 ops/s
[info] # Warmup Iteration   4: 30697.874 ops/s
[info] # Warmup Iteration   5: 30714.116 ops/s
[info] Iteration   1: 30844.591 ops/s
[info]                  ·gc.alloc.rate:            1591.873 MB/sec
[info]                  ·gc.alloc.rate.norm:       81224.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.938 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 69134.638 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 30886.302 ops/s
[info]                  ·gc.alloc.rate:            1593.867 MB/sec
[info]                  ·gc.alloc.rate.norm:       81224.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.792 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 69040.644 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 30922.531 ops/s
[info]                  ·gc.alloc.rate:                                  1595.692 MB/sec
[info]                  ·gc.alloc.rate.norm:                             81224.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.164 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 8.339 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2040.139 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       103847.267 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                203.423 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 31050.258 ops/s
[info]                  ·gc.alloc.rate:                                  1602.649 MB/sec
[info]                  ·gc.alloc.rate.norm:                             81224.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.072 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1363.057 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       69081.224 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 30828.664 ops/s
[info]                  ·gc.alloc.rate:            1590.900 MB/sec
[info]                  ·gc.alloc.rate.norm:       81224.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.718 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 69574.085 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala":
[info]   30906.469 ±(99.9%) 340.202 ops/s [Average]
[info]   (min, avg, max) = (30828.664, 30906.469, 31050.258), stdev = 88.349
[info]   CI (99.9%): [30566.267, 31246.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1594.996 ±(99.9%) 17.944 MB/sec [Average]
[info]   (min, avg, max) = (1590.900, 1594.996, 1602.649), stdev = 4.660
[info]   CI (99.9%): [1577.052, 1612.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   81224.013 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (81224.013, 81224.013, 81224.014), stdev = 0.001
[info]   CI (99.9%): [81224.012, 81224.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.033 ±(99.9%) 0.282 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.164), stdev = 0.073
[info]   CI (99.9%): [≈ 0, 0.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.682 ±(99.9%) 14.331 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.682, 8.339), stdev = 3.722
[info]   CI (99.9%): [≈ 0, 16.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1495.129 ±(99.9%) 1173.277 MB/sec [Average]
[info]   (min, avg, max) = (1354.792, 1495.129, 2040.139), stdev = 304.696
[info]   CI (99.9%): [321.852, 2668.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   76135.572 ±(99.9%) 59657.215 B/op [Average]
[info]   (min, avg, max) = (69040.644, 76135.572, 103847.267), stdev = 15492.789
[info]   CI (99.9%): [16478.357, 135792.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   40.685 ±(99.9%) 350.306 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 40.685, 203.423), stdev = 90.973
[info]   CI (99.9%): [≈ 0, 390.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.000, 7.000), stdev = 2.739
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 8.47% complete, ETA 01:43:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23880.328 ops/s
[info] # Warmup Iteration   2: 30634.531 ops/s
[info] # Warmup Iteration   3: 30809.067 ops/s
[info] # Warmup Iteration   4: 30691.268 ops/s
[info] # Warmup Iteration   5: 30932.367 ops/s
[info] Iteration   1: 30821.902 ops/s
[info]                  ·gc.alloc.rate:                   1530.546 MB/sec
[info]                  ·gc.alloc.rate.norm:              78168.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2032.086 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        103782.696 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 34.016 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 30915.063 ops/s
[info]                  ·gc.alloc.rate:            1535.373 MB/sec
[info]                  ·gc.alloc.rate.norm:       78168.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.198 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 69045.949 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 30952.893 ops/s
[info]                  ·gc.alloc.rate:                                  1537.080 MB/sec
[info]                  ·gc.alloc.rate.norm:                             78168.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.063 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.225 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1358.747 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       69098.913 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                203.232 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 31014.923 ops/s
[info]                  ·gc.alloc.rate:                                  1540.337 MB/sec
[info]                  ·gc.alloc.rate.norm:                             78168.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.108 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.487 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.858 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       69161.396 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 30963.729 ops/s
[info]                  ·gc.alloc.rate:                                  1537.782 MB/sec
[info]                  ·gc.alloc.rate.norm:                             78168.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.322 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       103916.292 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc":
[info]   30933.702 ±(99.9%) 277.095 ops/s [Average]
[info]   (min, avg, max) = (30821.902, 30933.702, 31014.923), stdev = 71.961
[info]   CI (99.9%): [30656.606, 31210.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1536.223 ±(99.9%) 14.023 MB/sec [Average]
[info]   (min, avg, max) = (1530.546, 1536.223, 1540.337), stdev = 3.642
[info]   CI (99.9%): [1522.201, 1550.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   78168.013 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (78168.013, 78168.013, 78168.013), stdev = 0.001
[info]   CI (99.9%): [78168.013, 78168.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.034 ±(99.9%) 0.191 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.034, 0.108), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.743 ±(99.9%) 9.687 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.743, 5.487), stdev = 2.516
[info]   CI (99.9%): [≈ 0, 11.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   1630.842 ±(99.9%) 1432.061 MB/sec [Average]
[info]   (min, avg, max) = (1356.198, 1630.842, 2044.322), stdev = 371.902
[info]   CI (99.9%): [198.781, 3062.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   83001.049 ±(99.9%) 73285.616 B/op [Average]
[info]   (min, avg, max) = (69045.949, 83001.049, 103916.292), stdev = 19032.042
[info]   CI (99.9%): [9715.433, 156286.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm":
[info]   47.450 ±(99.9%) 340.096 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 47.450, 203.232), stdev = 88.322
[info]   CI (99.9%): [≈ 0, 387.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.000, 11.000), stdev = 3.391
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 8.71% complete, ETA 01:42:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4916.364 ops/s
[info] # Warmup Iteration   2: 7713.055 ops/s
[info] # Warmup Iteration   3: 7917.606 ops/s
[info] # Warmup Iteration   4: 8057.359 ops/s
[info] # Warmup Iteration   5: 8145.254 ops/s
[info] Iteration   1: 8015.893 ops/s
[info]                  ·gc.alloc.rate:            1043.158 MB/sec
[info]                  ·gc.alloc.rate.norm:       204776.051 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.525 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 133000.972 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 8168.474 ops/s
[info]                  ·gc.alloc.rate:            1062.677 MB/sec
[info]                  ·gc.alloc.rate.norm:       204776.054 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.725 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 261053.070 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 8214.477 ops/s
[info]                  ·gc.alloc.rate:            1068.674 MB/sec
[info]                  ·gc.alloc.rate.norm:       204776.050 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.371 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 129795.739 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 8182.394 ops/s
[info]                  ·gc.alloc.rate:            1064.590 MB/sec
[info]                  ·gc.alloc.rate.norm:       204776.054 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.676 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 260574.659 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 8200.157 ops/s
[info]                  ·gc.alloc.rate:            1066.812 MB/sec
[info]                  ·gc.alloc.rate.norm:       204776.050 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.345 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 130017.287 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson":
[info]   8156.279 ±(99.9%) 309.560 ops/s [Average]
[info]   (min, avg, max) = (8015.893, 8156.279, 8214.477), stdev = 80.392
[info]   CI (99.9%): [7846.719, 8465.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1061.182 ±(99.9%) 39.764 MB/sec [Average]
[info]   (min, avg, max) = (1043.158, 1061.182, 1068.674), stdev = 10.327
[info]   CI (99.9%): [1021.418, 1100.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   204776.052 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (204776.050, 204776.052, 204776.054), stdev = 0.002
[info]   CI (99.9%): [204776.044, 204776.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   948.328 ±(99.9%) 1428.455 MB/sec [Average]
[info]   (min, avg, max) = (677.345, 948.328, 1354.725), stdev = 370.965
[info]   CI (99.9%): [≈ 0, 2376.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   182888.346 ±(99.9%) 273963.311 B/op [Average]
[info]   (min, avg, max) = (129795.739, 182888.346, 261053.070), stdev = 71147.402
[info]   CI (99.9%): [≈ 0, 456851.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 9.000), stdev = 2.739
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 8.94% complete, ETA 01:42:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14546.157 ops/s
[info] # Warmup Iteration   2: 19364.923 ops/s
[info] # Warmup Iteration   3: 18747.996 ops/s
[info] # Warmup Iteration   4: 19460.634 ops/s
[info] # Warmup Iteration   5: 19507.819 ops/s
[info] Iteration   1: 19574.439 ops/s
[info]                  ·gc.alloc.rate:            1520.886 MB/sec
[info]                  ·gc.alloc.rate.norm:       122287.215 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.204 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 109045.905 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 19549.123 ops/s
[info]                  ·gc.alloc.rate:            1519.115 MB/sec
[info]                  ·gc.alloc.rate.norm:       122288.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2034.625 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 163786.370 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 19667.177 ops/s
[info]                  ·gc.alloc.rate:                                  1528.130 MB/sec
[info]                  ·gc.alloc.rate.norm:                             122288.022 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.025 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1359.543 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       108796.890 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                266.528 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 19651.925 ops/s
[info]                  ·gc.alloc.rate:                                  1526.626 MB/sec
[info]                  ·gc.alloc.rate.norm:                             122288.021 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.092 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 7.379 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.641 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       109152.200 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 19665.140 ops/s
[info]                  ·gc.alloc.rate:                                  1527.794 MB/sec
[info]                  ·gc.alloc.rate.norm:                             122288.022 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.315 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.712 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       109074.508 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce":
[info]   19621.561 ±(99.9%) 214.133 ops/s [Average]
[info]   (min, avg, max) = (19549.123, 19621.561, 19667.177), stdev = 55.610
[info]   CI (99.9%): [19407.428, 19835.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1524.510 ±(99.9%) 16.179 MB/sec [Average]
[info]   (min, avg, max) = (1519.115, 1524.510, 1528.130), stdev = 4.202
[info]   CI (99.9%): [1508.331, 1540.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   122287.860 ±(99.9%) 1.389 B/op [Average]
[info]   (min, avg, max) = (122287.215, 122287.860, 122288.022), stdev = 0.361
[info]   CI (99.9%): [122286.471, 122289.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.024 ±(99.9%) 0.152 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.092), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.940 ±(99.9%) 12.139 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.940, 7.379), stdev = 3.153
[info]   CI (99.9%): [≈ 0, 14.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1495.145 ±(99.9%) 1161.317 MB/sec [Average]
[info]   (min, avg, max) = (1356.204, 1495.145, 2034.625), stdev = 301.590
[info]   CI (99.9%): [333.828, 2656.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   119971.175 ±(99.9%) 94316.904 B/op [Average]
[info]   (min, avg, max) = (108796.890, 119971.175, 163786.370), stdev = 24493.800
[info]   CI (99.9%): [25654.271, 214288.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   53.306 ±(99.9%) 458.978 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 53.306, 266.528), stdev = 119.195
[info]   CI (99.9%): [≈ 0, 512.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.400, 10.000), stdev = 3.209
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9.18% complete, ETA 01:42:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26247.070 ops/s
[info] # Warmup Iteration   2: 39212.136 ops/s
[info] # Warmup Iteration   3: 39096.056 ops/s
[info] # Warmup Iteration   4: 39777.160 ops/s
[info] # Warmup Iteration   5: 40131.109 ops/s
[info] Iteration   1: 39928.015 ops/s
[info]                  ·gc.alloc.rate:                   984.774 MB/sec
[info]                  ·gc.alloc.rate.norm:              38824.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.003 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        53380.619 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 26.257 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 40047.364 ops/s
[info]                  ·gc.alloc.rate:            987.758 MB/sec
[info]                  ·gc.alloc.rate.norm:       38824.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.352 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26623.438 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 39972.265 ops/s
[info]                  ·gc.alloc.rate:                   985.917 MB/sec
[info]                  ·gc.alloc.rate.norm:              38824.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.083 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        53321.869 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 26.228 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 40153.804 ops/s
[info]                  ·gc.alloc.rate:            990.420 MB/sec
[info]                  ·gc.alloc.rate.norm:       38824.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.368 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26552.507 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 39924.195 ops/s
[info]                  ·gc.alloc.rate:            984.752 MB/sec
[info]                  ·gc.alloc.rate.norm:       38824.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.776 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 53412.226 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala":
[info]   40005.129 ±(99.9%) 372.662 ops/s [Average]
[info]   (min, avg, max) = (39924.195, 40005.129, 40153.804), stdev = 96.779
[info]   CI (99.9%): [39632.466, 40377.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   986.724 ±(99.9%) 9.248 MB/sec [Average]
[info]   (min, avg, max) = (984.752, 986.724, 990.420), stdev = 2.402
[info]   CI (99.9%): [977.477, 995.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   38824.011 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (38824.010, 38824.011, 38824.011), stdev = 0.001
[info]   CI (99.9%): [38824.009, 38824.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1083.516 ±(99.9%) 1427.698 MB/sec [Average]
[info]   (min, avg, max) = (677.352, 1083.516, 1354.776), stdev = 370.769
[info]   CI (99.9%): [≈ 0, 2511.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   42658.132 ±(99.9%) 56489.095 B/op [Average]
[info]   (min, avg, max) = (26552.507, 42658.132, 53412.226), stdev = 14670.039
[info]   CI (99.9%): [≈ 0, 99147.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   10.497 ±(99.9%) 55.348 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.497, 26.257), stdev = 14.374
[info]   CI (99.9%): [≈ 0, 65.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.000, 9.000), stdev = 2.739
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9.41% complete, ETA 01:42:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 51280.782 ops/s
[info] # Warmup Iteration   2: 56289.483 ops/s
[info] # Warmup Iteration   3: 56255.496 ops/s
[info] # Warmup Iteration   4: 56681.448 ops/s
[info] # Warmup Iteration   5: 56471.113 ops/s
[info] Iteration   1: 56446.974 ops/s
[info]                  ·gc.alloc.rate:            729.250 MB/sec
[info]                  ·gc.alloc.rate.norm:       20336.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.005 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18906.982 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 56521.132 ops/s
[info]                  ·gc.alloc.rate:            730.233 MB/sec
[info]                  ·gc.alloc.rate.norm:       20336.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.006 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18881.565 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 56456.614 ops/s
[info]                  ·gc.alloc.rate:            729.449 MB/sec
[info]                  ·gc.alloc.rate.norm:       20336.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.070 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18903.633 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 56565.101 ops/s
[info]                  ·gc.alloc.rate:            730.747 MB/sec
[info]                  ·gc.alloc.rate.norm:       20336.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.980 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18867.548 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 56491.268 ops/s
[info]                  ·gc.alloc.rate:            729.855 MB/sec
[info]                  ·gc.alloc.rate.norm:       20336.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.039 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18892.258 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala":
[info]   56496.218 ±(99.9%) 186.503 ops/s [Average]
[info]   (min, avg, max) = (56446.974, 56496.218, 56565.101), stdev = 48.434
[info]   CI (99.9%): [56309.714, 56682.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   729.907 ±(99.9%) 2.323 MB/sec [Average]
[info]   (min, avg, max) = (729.250, 729.907, 730.747), stdev = 0.603
[info]   CI (99.9%): [727.584, 732.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   20336.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (20336.007, 20336.007, 20336.008), stdev = 0.001
[info]   CI (99.9%): [20336.006, 20336.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   678.020 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (677.980, 678.020, 678.070), stdev = 0.035
[info]   CI (99.9%): [677.886, 678.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   18890.397 ±(99.9%) 62.501 B/op [Average]
[info]   (min, avg, max) = (18867.548, 18890.397, 18906.982), stdev = 16.231
[info]   CI (99.9%): [18827.896, 18952.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 9.65% complete, ETA 01:41:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12918.093 ops/s
[info] # Warmup Iteration   2: 29345.301 ops/s
[info] # Warmup Iteration   3: 29704.806 ops/s
[info] # Warmup Iteration   4: 29892.979 ops/s
[info] # Warmup Iteration   5: 29689.198 ops/s
[info] Iteration   1: 29435.945 ops/s
[info]                  ·gc.alloc.rate:                   1965.865 MB/sec
[info]                  ·gc.alloc.rate.norm:              105128.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.004 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        72407.697 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 249.313 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 29555.193 ops/s
[info]                  ·gc.alloc.rate:                                  1974.800 MB/sec
[info]                  ·gc.alloc.rate.norm:                             105128.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.057 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.057 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.948 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       108862.344 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 29531.187 ops/s
[info]                  ·gc.alloc.rate:                                  1972.737 MB/sec
[info]                  ·gc.alloc.rate.norm:                             105128.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.115 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.195 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       108936.046 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 29497.759 ops/s
[info]                  ·gc.alloc.rate:                                  1970.222 MB/sec
[info]                  ·gc.alloc.rate.norm:                             105128.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.012 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.630 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.149 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       109072.659 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 29490.207 ops/s
[info]                  ·gc.alloc.rate:            1970.517 MB/sec
[info]                  ·gc.alloc.rate.norm:       105128.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2045.010 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 109102.242 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson":
[info]   29502.058 ±(99.9%) 174.364 ops/s [Average]
[info]   (min, avg, max) = (29435.945, 29502.058, 29555.193), stdev = 45.282
[info]   CI (99.9%): [29327.694, 29676.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1970.828 ±(99.9%) 12.846 MB/sec [Average]
[info]   (min, avg, max) = (1965.865, 1970.828, 1974.800), stdev = 3.336
[info]   CI (99.9%): [1957.982, 1983.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   105128.014 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (105128.014, 105128.014, 105128.015), stdev = 0.001
[info]   CI (99.9%): [105128.012, 105128.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.014 ±(99.9%) 0.095 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.057), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.760 ±(99.9%) 5.044 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.760, 3.057), stdev = 1.310
[info]   CI (99.9%): [≈ 0, 5.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1906.461 ±(99.9%) 1189.208 MB/sec [Average]
[info]   (min, avg, max) = (1354.004, 1906.461, 2045.010), stdev = 308.833
[info]   CI (99.9%): [717.254, 3095.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   101676.198 ±(99.9%) 63003.790 B/op [Average]
[info]   (min, avg, max) = (72407.697, 101676.198, 109102.242), stdev = 16361.884
[info]   CI (99.9%): [38672.408, 164679.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   49.863 ±(99.9%) 429.332 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 49.863, 249.313), stdev = 111.496
[info]   CI (99.9%): [≈ 0, 479.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 10.000), stdev = 2.490
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9.88% complete, ETA 01:41:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17524.883 ops/s
[info] # Warmup Iteration   2: 32154.248 ops/s
[info] # Warmup Iteration   3: 32569.919 ops/s
[info] # Warmup Iteration   4: 32070.553 ops/s
[info] # Warmup Iteration   5: 32391.165 ops/s
[info] Iteration   1: 32338.725 ops/s
[info]                  ·gc.alloc.rate:                   1831.460 MB/sec
[info]                  ·gc.alloc.rate.norm:              89144.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2030.808 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        98847.026 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      5.328 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 259.356 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   2: 32793.319 ops/s
[info]                  ·gc.alloc.rate:                                  1856.963 MB/sec
[info]                  ·gc.alloc.rate.norm:                             89144.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.014 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.654 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.561 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       65410.119 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 32612.831 ops/s
[info]                  ·gc.alloc.rate:                                  1847.145 MB/sec
[info]                  ·gc.alloc.rate.norm:                             89144.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.027 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.298 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.254 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       98656.603 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   4: 32814.525 ops/s
[info]                  ·gc.alloc.rate:            1858.510 MB/sec
[info]                  ·gc.alloc.rate.norm:       89144.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.174 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 98049.412 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 32567.275 ops/s
[info]                  ·gc.alloc.rate:            1844.284 MB/sec
[info]                  ·gc.alloc.rate.norm:       89144.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.564 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 65859.908 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala":
[info]   32625.335 ±(99.9%) 744.889 ops/s [Average]
[info]   (min, avg, max) = (32338.725, 32625.335, 32814.525), stdev = 193.445
[info]   CI (99.9%): [31880.446, 33370.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1847.672 ±(99.9%) 42.109 MB/sec [Average]
[info]   (min, avg, max) = (1831.460, 1847.672, 1858.510), stdev = 10.936
[info]   CI (99.9%): [1805.563, 1889.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   89144.013 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (89144.012, 89144.013, 89144.013), stdev = 0.001
[info]   CI (99.9%): [89144.011, 89144.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.008 ±(99.9%) 0.046 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.027), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.390 ±(99.9%) 2.237 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.390, 1.298), stdev = 0.581
[info]   CI (99.9%): [≈ 0, 2.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1768.872 ±(99.9%) 1428.392 MB/sec [Average]
[info]   (min, avg, max) = (1362.561, 1768.872, 2044.254), stdev = 370.949
[info]   CI (99.9%): [340.481, 3197.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   85364.614 ±(99.9%) 69364.302 B/op [Average]
[info]   (min, avg, max) = (65410.119, 85364.614, 98847.026), stdev = 18013.689
[info]   CI (99.9%): [16000.312, 154728.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 9.176 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 5.328), stdev = 2.383
[info]   CI (99.9%): [≈ 0, 10.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   51.871 ±(99.9%) 446.627 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 51.871, 259.356), stdev = 115.987
[info]   CI (99.9%): [≈ 0, 498.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.000, 15.000), stdev = 5.050
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 10.12% complete, ETA 01:41:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37987.821 ops/s
[info] # Warmup Iteration   2: 45724.118 ops/s
[info] # Warmup Iteration   3: 45539.161 ops/s
[info] # Warmup Iteration   4: 45916.795 ops/s
[info] # Warmup Iteration   5: 45176.921 ops/s
[info] Iteration   1: 45671.109 ops/s
[info]                  ·gc.alloc.rate:            1755.227 MB/sec
[info]                  ·gc.alloc.rate.norm:       60480.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2032.577 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 70036.677 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 44696.339 ops/s
[info]                  ·gc.alloc.rate:                                  1717.407 MB/sec
[info]                  ·gc.alloc.rate.norm:                             60480.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.070 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.458 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1358.798 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       47851.264 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                140.739 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 45638.732 ops/s
[info]                  ·gc.alloc.rate:                                  1753.479 MB/sec
[info]                  ·gc.alloc.rate.norm:                             60480.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.032 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.113 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.009 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       70500.805 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 46034.009 ops/s
[info]                  ·gc.alloc.rate:            1769.062 MB/sec
[info]                  ·gc.alloc.rate.norm:       60480.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.958 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 46596.292 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 46041.093 ops/s
[info]                  ·gc.alloc.rate:            1769.448 MB/sec
[info]                  ·gc.alloc.rate.norm:       60480.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.572 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 69883.814 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala":
[info]   45616.256 ±(99.9%) 2113.269 ops/s [Average]
[info]   (min, avg, max) = (44696.339, 45616.256, 46041.093), stdev = 548.809
[info]   CI (99.9%): [43502.988, 47729.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1752.924 ±(99.9%) 81.697 MB/sec [Average]
[info]   (min, avg, max) = (1717.407, 1752.924, 1769.448), stdev = 21.216
[info]   CI (99.9%): [1671.228, 1834.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   60480.009 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (60480.009, 60480.009, 60480.010), stdev = 0.001
[info]   CI (99.9%): [60480.008, 60480.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.020 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.070), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.714 ±(99.9%) 4.188 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.714, 2.458), stdev = 1.088
[info]   CI (99.9%): [≈ 0, 4.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1768.583 ±(99.9%) 1433.270 MB/sec [Average]
[info]   (min, avg, max) = (1358.798, 1768.583, 2044.572), stdev = 372.216
[info]   CI (99.9%): [335.313, 3201.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   60973.770 ±(99.9%) 48371.261 B/op [Average]
[info]   (min, avg, max) = (46596.292, 60973.770, 70500.805), stdev = 12561.863
[info]   CI (99.9%): [12602.509, 109345.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   28.148 ±(99.9%) 242.361 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 28.148, 140.739), stdev = 62.940
[info]   CI (99.9%): [≈ 0, 270.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 11.000), stdev = 3.464
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 10.35% complete, ETA 01:41:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38168.911 ops/s
[info] # Warmup Iteration   2: 46250.586 ops/s
[info] # Warmup Iteration   3: 46023.265 ops/s
[info] # Warmup Iteration   4: 45946.650 ops/s
[info] # Warmup Iteration   5: 46031.493 ops/s
[info] Iteration   1: 46121.814 ops/s
[info]                  ·gc.alloc.rate:            1691.681 MB/sec
[info]                  ·gc.alloc.rate.norm:       57736.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.383 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 46258.366 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 45873.902 ops/s
[info]                  ·gc.alloc.rate:                                  1683.272 MB/sec
[info]                  ·gc.alloc.rate.norm:                             57736.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.053 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.801 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2036.857 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       69863.930 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                137.123 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   3: 46313.274 ops/s
[info]                  ·gc.alloc.rate:                                  1698.607 MB/sec
[info]                  ·gc.alloc.rate.norm:                             57736.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.029 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.646 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       46316.634 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 46289.571 ops/s
[info]                  ·gc.alloc.rate:            1697.935 MB/sec
[info]                  ·gc.alloc.rate.norm:       57736.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.175 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 69509.466 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 46359.195 ops/s
[info]                  ·gc.alloc.rate:            1700.647 MB/sec
[info]                  ·gc.alloc.rate.norm:       57736.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.900 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 46269.685 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   46191.551 ±(99.9%) 766.009 ops/s [Average]
[info]   (min, avg, max) = (45873.902, 46191.551, 46359.195), stdev = 198.930
[info]   CI (99.9%): [45425.542, 46957.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1694.428 ±(99.9%) 27.258 MB/sec [Average]
[info]   (min, avg, max) = (1683.272, 1694.428, 1700.647), stdev = 7.079
[info]   CI (99.9%): [1667.171, 1721.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   57736.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (57736.009, 57736.009, 57736.009), stdev = 0.001
[info]   CI (99.9%): [57736.009, 57736.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.016 ±(99.9%) 0.092 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.053), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.560 ±(99.9%) 3.149 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.560, 1.801), stdev = 0.818
[info]   CI (99.9%): [≈ 0, 3.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   1632.392 ±(99.9%) 1434.695 MB/sec [Average]
[info]   (min, avg, max) = (1355.383, 1632.392, 2044.175), stdev = 372.586
[info]   CI (99.9%): [197.697, 3067.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   55643.616 ±(99.9%) 49365.841 B/op [Average]
[info]   (min, avg, max) = (46258.366, 55643.616, 69863.930), stdev = 12820.152
[info]   CI (99.9%): [6277.775, 105009.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space":
[info]   0.800 ±(99.9%) 6.884 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.800, 3.998), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm":
[info]   27.425 ±(99.9%) 236.133 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 27.425, 137.123), stdev = 61.323
[info]   CI (99.9%): [≈ 0, 263.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.000, 9.000), stdev = 2.915
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 10.59% complete, ETA 01:40:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 293641.649 ops/s
[info] # Warmup Iteration   2: 370138.826 ops/s
[info] # Warmup Iteration   3: 374744.964 ops/s
[info] # Warmup Iteration   4: 373885.682 ops/s
[info] # Warmup Iteration   5: 373923.036 ops/s
[info] Iteration   1: 372595.181 ops/s
[info]                  ·gc.alloc.rate:                   1884.772 MB/sec
[info]                  ·gc.alloc.rate.norm:              7960.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2034.772 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        8593.501 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 14.069 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 376126.403 ops/s
[info]                  ·gc.alloc.rate:                                  1902.659 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7960.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.062 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.260 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1363.147 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5702.888 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   3: 375549.905 ops/s
[info]                  ·gc.alloc.rate:                                  1899.312 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7960.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.016 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.065 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.325 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8567.746 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 373447.465 ops/s
[info]                  ·gc.alloc.rate:            1888.538 MB/sec
[info]                  ·gc.alloc.rate.norm:       7960.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.119 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8615.756 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 375795.794 ops/s
[info]                  ·gc.alloc.rate:                                  1900.649 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7960.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.315 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8561.683 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce":
[info]   374702.949 ±(99.9%) 6075.235 ops/s [Average]
[info]   (min, avg, max) = (372595.181, 374702.949, 376126.403), stdev = 1577.719
[info]   CI (99.9%): [368627.715, 380778.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1895.186 ±(99.9%) 30.767 MB/sec [Average]
[info]   (min, avg, max) = (1884.772, 1895.186, 1902.659), stdev = 7.990
[info]   CI (99.9%): [1864.419, 1925.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   7960.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7960.001, 7960.001, 7960.001), stdev = 0.001
[info]   CI (99.9%): [7960.001, 7960.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.016 ±(99.9%) 0.103 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.066 ±(99.9%) 0.431 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.066, 0.260), stdev = 0.112
[info]   CI (99.9%): [≈ 0, 0.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1906.136 ±(99.9%) 1168.931 MB/sec [Average]
[info]   (min, avg, max) = (1363.147, 1906.136, 2044.325), stdev = 303.568
[info]   CI (99.9%): [737.205, 3075.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   8008.315 ±(99.9%) 4963.300 B/op [Average]
[info]   (min, avg, max) = (5702.888, 8008.315, 8615.756), stdev = 1288.953
[info]   CI (99.9%): [3045.015, 12971.615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.737 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   2.814 ±(99.9%) 24.228 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.814, 14.069), stdev = 6.292
[info]   CI (99.9%): [≈ 0, 27.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 10.000), stdev = 2.950
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 10.82% complete, ETA 01:40:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 134752.923 ops/s
[info] # Warmup Iteration   2: 1474995.491 ops/s
[info] # Warmup Iteration   3: 1480940.855 ops/s
[info] # Warmup Iteration   4: 1471532.823 ops/s
[info] # Warmup Iteration   5: 1487612.916 ops/s
[info] Iteration   1: 1448310.098 ops/s
[info]                  ·gc.alloc.rate:            456.402 MB/sec
[info]                  ·gc.alloc.rate.norm:       496.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.729 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 733.270 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 1447619.645 ops/s
[info]                  ·gc.alloc.rate:            456.261 MB/sec
[info]                  ·gc.alloc.rate.norm:       496.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.861 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 733.640 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 1493892.779 ops/s
[info]                  ·gc.alloc.rate:      470.777 MB/sec
[info]                  ·gc.alloc.rate.norm: 496.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1514820.485 ops/s
[info]                  ·gc.alloc.rate:            477.441 MB/sec
[info]                  ·gc.alloc.rate.norm:       496.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.864 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 701.098 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 1515749.173 ops/s
[info]                  ·gc.alloc.rate:            477.827 MB/sec
[info]                  ·gc.alloc.rate.norm:       496.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.992 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 700.665 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava":
[info]   1484078.436 ±(99.9%) 131332.474 ops/s [Average]
[info]   (min, avg, max) = (1447619.645, 1484078.436, 1515749.173), stdev = 34106.627
[info]   CI (99.9%): [1352745.961, 1615410.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   467.742 ±(99.9%) 41.535 MB/sec [Average]
[info]   (min, avg, max) = (456.261, 467.742, 477.827), stdev = 10.787
[info]   CI (99.9%): [426.207, 509.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   496.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (496.000, 496.000, 496.000), stdev = 0.001
[info]   CI (99.9%): [496.000, 496.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   539.889 ±(99.9%) 1162.153 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.889, 674.992), stdev = 301.807
[info]   CI (99.9%): [≈ 0, 1702.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   573.735 ±(99.9%) 1236.599 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 573.735, 733.640), stdev = 321.141
[info]   CI (99.9%): [≈ 0, 1810.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.200, 6.000), stdev = 2.387
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 11.06% complete, ETA 01:40:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 394168.955 ops/s
[info] # Warmup Iteration   2: 590468.073 ops/s
[info] # Warmup Iteration   3: 597029.611 ops/s
[info] # Warmup Iteration   4: 593088.066 ops/s
[info] # Warmup Iteration   5: 592101.720 ops/s
[info] Iteration   1: 594251.370 ops/s
[info]                  ·gc.alloc.rate:            504.364 MB/sec
[info]                  ·gc.alloc.rate.norm:       1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.345 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1794.208 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 596725.712 ops/s
[info]                  ·gc.alloc.rate:      506.458 MB/sec
[info]                  ·gc.alloc.rate.norm: 1336.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 593319.998 ops/s
[info]                  ·gc.alloc.rate:            503.553 MB/sec
[info]                  ·gc.alloc.rate.norm:       1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.329 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1797.056 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 592614.135 ops/s
[info]                  ·gc.alloc.rate:            503.105 MB/sec
[info]                  ·gc.alloc.rate.norm:       1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.532 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1799.194 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 586540.571 ops/s
[info]                  ·gc.alloc.rate:            497.831 MB/sec
[info]                  ·gc.alloc.rate.norm:       1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.328 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1817.708 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala":
[info]   592690.357 ±(99.9%) 14528.589 ops/s [Average]
[info]   (min, avg, max) = (586540.571, 592690.357, 596725.712), stdev = 3773.029
[info]   CI (99.9%): [578161.768, 607218.947] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   503.062 ±(99.9%) 12.303 MB/sec [Average]
[info]   (min, avg, max) = (497.831, 503.062, 506.458), stdev = 3.195
[info]   CI (99.9%): [490.759, 515.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1336.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1336.001, 1336.001, 1336.001), stdev = 0.001
[info]   CI (99.9%): [1336.001, 1336.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   541.907 ±(99.9%) 1166.495 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 541.907, 677.532), stdev = 302.935
[info]   CI (99.9%): [≈ 0, 1708.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1441.633 ±(99.9%) 3103.427 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1441.633, 1817.708), stdev = 805.950
[info]   CI (99.9%): [≈ 0, 4545.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.600, 5.000), stdev = 2.074
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 11.29% complete, ETA 01:40:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1662779.285 ops/s
[info] # Warmup Iteration   2: 1739114.036 ops/s
[info] # Warmup Iteration   3: 1657412.495 ops/s
[info] # Warmup Iteration   4: 1706878.986 ops/s
[info] # Warmup Iteration   5: 1691821.512 ops/s
[info] Iteration   1: 1703440.000 ops/s
[info]                  ·gc.alloc.rate:      328.988 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1737795.818 ops/s
[info]                  ·gc.alloc.rate:            335.696 MB/sec
[info]                  ·gc.alloc.rate.norm:       304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.187 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 614.153 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 1747119.888 ops/s
[info]                  ·gc.alloc.rate:      337.442 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1737816.235 ops/s
[info]                  ·gc.alloc.rate:            335.745 MB/sec
[info]                  ·gc.alloc.rate.norm:       304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.282 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 614.150 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 1744714.520 ops/s
[info]                  ·gc.alloc.rate:      337.005 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala":
[info]   1734177.292 ±(99.9%) 68061.172 ops/s [Average]
[info]   (min, avg, max) = (1703440.000, 1734177.292, 1747119.888), stdev = 17675.270
[info]   CI (99.9%): [1666116.120, 1802238.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   334.975 ±(99.9%) 13.222 MB/sec [Average]
[info]   (min, avg, max) = (328.988, 334.975, 337.442), stdev = 3.434
[info]   CI (99.9%): [321.754, 348.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   304.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (304.000, 304.000, 304.000), stdev = 0.001
[info]   CI (99.9%): [304.000, 304.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   271.294 ±(99.9%) 1430.454 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 271.294, 678.282), stdev = 371.484
[info]   CI (99.9%): [≈ 0, 1701.748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   245.661 ±(99.9%) 1295.298 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 245.661, 614.153), stdev = 336.385
[info]   CI (99.9%): [≈ 0, 1540.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 4.000), stdev = 2.191
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 11.53% complete, ETA 01:39:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 54607.413 ops/s
[info] # Warmup Iteration   2: 88788.218 ops/s
[info] # Warmup Iteration   3: 90519.296 ops/s
[info] # Warmup Iteration   4: 92182.826 ops/s
[info] # Warmup Iteration   5: 91318.111 ops/s
[info] Iteration   1: 93032.174 ops/s
[info]                  ·gc.alloc.rate:                                  3379.287 MB/sec
[info]                  ·gc.alloc.rate.norm:                             57176.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.036 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3406.825 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       57641.929 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 92525.752 ops/s
[info]                  ·gc.alloc.rate:            3360.421 MB/sec
[info]                  ·gc.alloc.rate.norm:       57176.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      3406.402 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 57958.356 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 93358.841 ops/s
[info]                  ·gc.alloc.rate:                                  3391.215 MB/sec
[info]                  ·gc.alloc.rate.norm:                             57176.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.025 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3407.060 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       57443.143 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 93324.349 ops/s
[info]                  ·gc.alloc.rate:                                  3390.573 MB/sec
[info]                  ·gc.alloc.rate.norm:                             57176.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3407.545 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       57462.221 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 92790.436 ops/s
[info]                  ·gc.alloc.rate:            3371.898 MB/sec
[info]                  ·gc.alloc.rate.norm:       57176.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      3408.313 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 57793.481 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson":
[info]   93006.310 ±(99.9%) 1366.345 ops/s [Average]
[info]   (min, avg, max) = (92525.752, 93006.310, 93358.841), stdev = 354.836
[info]   CI (99.9%): [91639.965, 94372.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3378.679 ±(99.9%) 50.145 MB/sec [Average]
[info]   (min, avg, max) = (3360.421, 3378.679, 3391.215), stdev = 13.022
[info]   CI (99.9%): [3328.534, 3428.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   57176.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (57176.004, 57176.004, 57176.005), stdev = 0.001
[info]   CI (99.9%): [57176.004, 57176.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.004 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.002), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.017 ±(99.9%) 0.062 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.036), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   3407.229 ±(99.9%) 2.824 MB/sec [Average]
[info]   (min, avg, max) = (3406.402, 3407.229, 3408.313), stdev = 0.733
[info]   CI (99.9%): [3404.405, 3410.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   57659.826 ±(99.9%) 846.493 B/op [Average]
[info]   (min, avg, max) = (57443.143, 57659.826, 57958.356), stdev = 219.831
[info]   CI (99.9%): [56813.333, 58506.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.000, 10.000), stdev = 1.732
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 11.76% complete, ETA 01:39:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 242559.084 ops/s
[info] # Warmup Iteration   2: 306189.914 ops/s
[info] # Warmup Iteration   3: 318856.683 ops/s
[info] # Warmup Iteration   4: 319612.726 ops/s
[info] # Warmup Iteration   5: 309230.697 ops/s
[info] Iteration   1: 319751.320 ops/s
[info]                  ·gc.alloc.rate:            497.248 MB/sec
[info]                  ·gc.alloc.rate.norm:       2448.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.983 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3337.775 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 320052.411 ops/s
[info]                  ·gc.alloc.rate:      497.759 MB/sec
[info]                  ·gc.alloc.rate.norm: 2448.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 321139.766 ops/s
[info]                  ·gc.alloc.rate:            499.654 MB/sec
[info]                  ·gc.alloc.rate.norm:       2448.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.327 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3323.392 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 312505.494 ops/s
[info]                  ·gc.alloc.rate:            486.024 MB/sec
[info]                  ·gc.alloc.rate.norm:       2448.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.056 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3415.229 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 318663.332 ops/s
[info]                  ·gc.alloc.rate:            495.653 MB/sec
[info]                  ·gc.alloc.rate.norm:       2448.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.121 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3349.200 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce":
[info]   318422.464 ±(99.9%) 13181.758 ops/s [Average]
[info]   (min, avg, max) = (312505.494, 318422.464, 321139.766), stdev = 3423.261
[info]   CI (99.9%): [305240.706, 331604.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   495.268 ±(99.9%) 20.644 MB/sec [Average]
[info]   (min, avg, max) = (486.024, 495.268, 499.654), stdev = 5.361
[info]   CI (99.9%): [474.624, 515.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2448.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2448.001, 2448.001, 2448.001), stdev = 0.001
[info]   CI (99.9%): [2448.001, 2448.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   542.498 ±(99.9%) 1167.767 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 542.498, 678.327), stdev = 303.265
[info]   CI (99.9%): [≈ 0, 1710.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2685.119 ±(99.9%) 5781.508 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2685.119, 3415.229), stdev = 1501.439
[info]   CI (99.9%): [≈ 0, 8466.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 4.000), stdev = 1.732
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 12.00% complete, ETA 01:39:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 101398.854 ops/s
[info] # Warmup Iteration   2: 1225491.752 ops/s
[info] # Warmup Iteration   3: 1195552.306 ops/s
[info] # Warmup Iteration   4: 1166724.264 ops/s
[info] # Warmup Iteration   5: 1227151.293 ops/s
[info] Iteration   1: 1226053.758 ops/s
[info]                  ·gc.alloc.rate:            567.056 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.713 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 866.213 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 1220821.613 ops/s
[info]                  ·gc.alloc.rate:            564.622 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.724 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 869.961 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 1197140.769 ops/s
[info]                  ·gc.alloc.rate:      553.778 MB/sec
[info]                  ·gc.alloc.rate.norm: 728.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1224250.094 ops/s
[info]                  ·gc.alloc.rate:            566.245 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.730 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 867.476 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 1245381.527 ops/s
[info]                  ·gc.alloc.rate:            575.981 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.703 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 852.778 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava":
[info]   1222729.552 ±(99.9%) 66274.169 ops/s [Average]
[info]   (min, avg, max) = (1197140.769, 1222729.552, 1245381.527), stdev = 17211.191
[info]   CI (99.9%): [1156455.383, 1289003.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   565.537 ±(99.9%) 30.503 MB/sec [Average]
[info]   (min, avg, max) = (553.778, 565.537, 575.981), stdev = 7.921
[info]   CI (99.9%): [535.034, 596.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   728.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (728.000, 728.000, 728.000), stdev = 0.001
[info]   CI (99.9%): [728.000, 728.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   539.774 ±(99.9%) 1161.904 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.774, 674.730), stdev = 301.743
[info]   CI (99.9%): [≈ 0, 1701.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   691.286 ±(99.9%) 1488.266 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 691.286, 869.961), stdev = 386.498
[info]   CI (99.9%): [≈ 0, 2179.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.000, 5.000), stdev = 2.236
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 12.24% complete, ETA 01:39:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 648014.300 ops/s
[info] # Warmup Iteration   2: 992092.506 ops/s
[info] # Warmup Iteration   3: 997262.257 ops/s
[info] # Warmup Iteration   4: 996655.890 ops/s
[info] # Warmup Iteration   5: 997937.679 ops/s
[info] Iteration   1: 1000199.526 ops/s
[info]                  ·gc.alloc.rate:            706.623 MB/sec
[info]                  ·gc.alloc.rate.norm:       1112.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.399 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1066.011 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 996327.829 ops/s
[info]                  ·gc.alloc.rate:                   703.816 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.667 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1069.106 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.052 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 996175.665 ops/s
[info]                  ·gc.alloc.rate:            703.692 MB/sec
[info]                  ·gc.alloc.rate.norm:       1112.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.316 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1070.319 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 991871.863 ops/s
[info]                  ·gc.alloc.rate:            700.720 MB/sec
[info]                  ·gc.alloc.rate.norm:       1112.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.772 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2149.943 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 975413.297 ops/s
[info]                  ·gc.alloc.rate:            689.070 MB/sec
[info]                  ·gc.alloc.rate.norm:       1112.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.334 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1093.060 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala":
[info]   991997.636 ±(99.9%) 37458.948 ops/s [Average]
[info]   (min, avg, max) = (975413.297, 991997.636, 1000199.526), stdev = 9727.970
[info]   CI (99.9%): [954538.688, 1029456.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   700.784 ±(99.9%) 26.466 MB/sec [Average]
[info]   (min, avg, max) = (689.070, 700.784, 706.623), stdev = 6.873
[info]   CI (99.9%): [674.318, 727.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1112.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1112.000, 1112.000, 1112.000), stdev = 0.001
[info]   CI (99.9%): [1112.000, 1112.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   812.698 ±(99.9%) 1166.857 MB/sec [Average]
[info]   (min, avg, max) = (676.667, 812.698, 1354.772), stdev = 303.029
[info]   CI (99.9%): [≈ 0, 1979.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1289.688 ±(99.9%) 1852.228 B/op [Average]
[info]   (min, avg, max) = (1066.011, 1289.688, 2149.943), stdev = 481.018
[info]   CI (99.9%): [≈ 0, 3141.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.210 ±(99.9%) 1.812 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.210, 1.052), stdev = 0.471
[info]   CI (99.9%): [≈ 0, 2.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 9.000), stdev = 2.168
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 12.47% complete, ETA 01:38:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2208903.651 ops/s
[info] # Warmup Iteration   2: 2434293.032 ops/s
[info] # Warmup Iteration   3: 2503655.613 ops/s
[info] # Warmup Iteration   4: 2491297.887 ops/s
[info] # Warmup Iteration   5: 2490543.583 ops/s
[info] Iteration   1: 2488451.361 ops/s
[info]                  ·gc.alloc.rate:            1150.830 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.336 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 857.368 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 2439728.305 ops/s
[info]                  ·gc.alloc.rate:            1128.443 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.427 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 437.033 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 2438517.510 ops/s
[info]                  ·gc.alloc.rate:            1127.806 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.747 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 874.491 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 2433735.884 ops/s
[info]                  ·gc.alloc.rate:            1125.630 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.855 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 876.252 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 2459670.330 ops/s
[info]                  ·gc.alloc.rate:                   1137.605 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             677.338 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        433.457 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.557 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala":
[info]   2452020.678 ±(99.9%) 87246.693 ops/s [Average]
[info]   (min, avg, max) = (2433735.884, 2452020.678, 2488451.361), stdev = 22657.689
[info]   CI (99.9%): [2364773.985, 2539267.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1134.062 ±(99.9%) 40.181 MB/sec [Average]
[info]   (min, avg, max) = (1125.630, 1134.062, 1150.830), stdev = 10.435
[info]   CI (99.9%): [1093.882, 1174.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   728.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (728.000, 728.000, 728.000), stdev = 0.001
[info]   CI (99.9%): [728.000, 728.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1083.941 ±(99.9%) 1429.109 MB/sec [Average]
[info]   (min, avg, max) = (677.338, 1083.941, 1355.336), stdev = 371.135
[info]   CI (99.9%): [≈ 0, 2513.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   695.720 ±(99.9%) 916.060 B/op [Average]
[info]   (min, avg, max) = (433.457, 695.720, 876.252), stdev = 237.898
[info]   CI (99.9%): [≈ 0, 1611.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.511 ±(99.9%) 4.404 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.511, 2.557), stdev = 1.144
[info]   CI (99.9%): [≈ 0, 4.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 7.000), stdev = 1.789
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 12.71% complete, ETA 01:38:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1802336.732 ops/s
[info] # Warmup Iteration   2: 1982290.501 ops/s
[info] # Warmup Iteration   3: 1982763.443 ops/s
[info] # Warmup Iteration   4: 1985179.759 ops/s
[info] # Warmup Iteration   5: 1976318.647 ops/s
[info] Iteration   1: 1984430.735 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1983441.190 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1984144.436 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1983279.460 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1984652.700 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   1983989.704 ±(99.9%) 2329.025 ops/s [Average]
[info]   (min, avg, max) = (1983279.460, 1983989.704, 1984652.700), stdev = 604.840
[info]   CI (99.9%): [1981660.679, 1986318.729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 12.94% complete, ETA 01:38:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 314617.394 ops/s
[info] # Warmup Iteration   2: 400693.792 ops/s
[info] # Warmup Iteration   3: 413101.601 ops/s
[info] # Warmup Iteration   4: 409720.437 ops/s
[info] # Warmup Iteration   5: 403235.094 ops/s
[info] Iteration   1: 410683.554 ops/s
[info]                  ·gc.alloc.rate:            480.049 MB/sec
[info]                  ·gc.alloc.rate.norm:       1840.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.345 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2596.224 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 412578.997 ops/s
[info]                  ·gc.alloc.rate:      482.303 MB/sec
[info]                  ·gc.alloc.rate.norm: 1840.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 410552.391 ops/s
[info]                  ·gc.alloc.rate:            480.012 MB/sec
[info]                  ·gc.alloc.rate.norm:       1840.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.502 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2597.027 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 410890.984 ops/s
[info]                  ·gc.alloc.rate:            480.365 MB/sec
[info]                  ·gc.alloc.rate.norm:       1840.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.429 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2594.841 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 412641.656 ops/s
[info]                  ·gc.alloc.rate:      482.460 MB/sec
[info]                  ·gc.alloc.rate.norm: 1840.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson":
[info]   411469.516 ±(99.9%) 4037.861 ops/s [Average]
[info]   (min, avg, max) = (410552.391, 411469.516, 412641.656), stdev = 1048.620
[info]   CI (99.9%): [407431.655, 415507.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   481.038 ±(99.9%) 4.758 MB/sec [Average]
[info]   (min, avg, max) = (480.012, 481.038, 482.460), stdev = 1.236
[info]   CI (99.9%): [476.280, 485.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1840.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1840.001, 1840.001, 1840.001), stdev = 0.001
[info]   CI (99.9%): [1840.001, 1840.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   406.455 ±(99.9%) 1428.747 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 406.455, 677.502), stdev = 371.041
[info]   CI (99.9%): [≈ 0, 1835.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   1557.619 ±(99.9%) 5475.250 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1557.619, 2597.027), stdev = 1421.905
[info]   CI (99.9%): [≈ 0, 7032.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 5.000), stdev = 2.408
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 13.18% complete, ETA 01:38:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 115966.869 ops/s
[info] # Warmup Iteration   2: 142015.222 ops/s
[info] # Warmup Iteration   3: 141994.636 ops/s
[info] # Warmup Iteration   4: 142665.280 ops/s
[info] # Warmup Iteration   5: 141135.598 ops/s
[info] Iteration   1: 139231.133 ops/s
[info]                  ·gc.alloc.rate:            1673.501 MB/sec
[info]                  ·gc.alloc.rate.norm:       18920.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.106 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 15331.644 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 139457.125 ops/s
[info]                  ·gc.alloc.rate:                                  1676.400 MB/sec
[info]                  ·gc.alloc.rate.norm:                             18920.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.076 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.858 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2037.696 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       22997.627 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                37.590 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   3: 140627.767 ops/s
[info]                  ·gc.alloc.rate:                                  1690.395 MB/sec
[info]                  ·gc.alloc.rate.norm:                             18920.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.036 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.405 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.851 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       15253.912 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   4: 140644.732 ops/s
[info]                  ·gc.alloc.rate:                                  1691.089 MB/sec
[info]                  ·gc.alloc.rate.norm:                             18920.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.044 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.853 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       22877.940 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 139947.236 ops/s
[info]                  ·gc.alloc.rate:            1682.283 MB/sec
[info]                  ·gc.alloc.rate.norm:       18920.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.909 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 15328.131 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce":
[info]   139981.598 ±(99.9%) 2507.899 ops/s [Average]
[info]   (min, avg, max) = (139231.133, 139981.598, 140644.732), stdev = 651.293
[info]   CI (99.9%): [137473.700, 142489.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate":
[info]   1682.734 ±(99.9%) 30.689 MB/sec [Average]
[info]   (min, avg, max) = (1673.501, 1682.734, 1691.089), stdev = 7.970
[info]   CI (99.9%): [1652.045, 1713.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   18920.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (18920.003, 18920.003, 18920.003), stdev = 0.001
[info]   CI (99.9%): [18920.003, 18920.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.023 ±(99.9%) 0.128 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.076), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.261 ±(99.9%) 1.441 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.261, 0.858), stdev = 0.374
[info]   CI (99.9%): [≈ 0, 1.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1632.883 ±(99.9%) 1435.627 MB/sec [Average]
[info]   (min, avg, max) = (1356.106, 1632.883, 2044.853), stdev = 372.828
[info]   CI (99.9%): [197.256, 3068.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   18357.851 ±(99.9%) 16100.377 B/op [Average]
[info]   (min, avg, max) = (15253.912, 18357.851, 22997.627), stdev = 4181.217
[info]   CI (99.9%): [2257.474, 34458.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   7.518 ±(99.9%) 64.732 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.518, 37.590), stdev = 16.811
[info]   CI (99.9%): [≈ 0, 72.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.800, 9.000), stdev = 3.114
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 13.41% complete, ETA 01:37:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 222392.910 ops/s
[info] # Warmup Iteration   2: 362088.589 ops/s
[info] # Warmup Iteration   3: 361600.271 ops/s
[info] # Warmup Iteration   4: 362772.326 ops/s
[info] # Warmup Iteration   5: 360180.458 ops/s
[info] Iteration   1: 363904.857 ops/s
[info]                  ·gc.alloc.rate:      308.862 MB/sec
[info]                  ·gc.alloc.rate.norm: 1336.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 361365.559 ops/s
[info]                  ·gc.alloc.rate:            306.821 MB/sec
[info]                  ·gc.alloc.rate.norm:       1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.584 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2950.425 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 363547.618 ops/s
[info]                  ·gc.alloc.rate:      308.580 MB/sec
[info]                  ·gc.alloc.rate.norm: 1336.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 364249.544 ops/s
[info]                  ·gc.alloc.rate:      309.158 MB/sec
[info]                  ·gc.alloc.rate.norm: 1336.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 360861.146 ops/s
[info]                  ·gc.alloc.rate:            306.295 MB/sec
[info]                  ·gc.alloc.rate.norm:       1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.359 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2954.513 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala":
[info]   362785.745 ±(99.9%) 5995.324 ops/s [Average]
[info]   (min, avg, max) = (360861.146, 362785.745, 364249.544), stdev = 1556.967
[info]   CI (99.9%): [356790.420, 368781.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   307.943 ±(99.9%) 4.984 MB/sec [Average]
[info]   (min, avg, max) = (306.295, 307.943, 309.158), stdev = 1.294
[info]   CI (99.9%): [302.959, 312.927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1336.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1336.001, 1336.001, 1336.001), stdev = 0.001
[info]   CI (99.9%): [1336.001, 1336.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   270.989 ±(99.9%) 1428.845 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 270.989, 677.584), stdev = 371.066
[info]   CI (99.9%): [≈ 0, 1699.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1180.988 ±(99.9%) 6227.009 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1180.988, 2954.513), stdev = 1617.135
[info]   CI (99.9%): [≈ 0, 7407.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 7.000), stdev = 3.362
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 13.65% complete, ETA 01:37:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 788500.311 ops/s
[info] # Warmup Iteration   2: 833427.305 ops/s
[info] # Warmup Iteration   3: 827654.303 ops/s
[info] # Warmup Iteration   4: 820788.771 ops/s
[info] # Warmup Iteration   5: 809511.365 ops/s
[info] Iteration   1: 822692.881 ops/s
[info]                  ·gc.alloc.rate:      158.910 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 823124.338 ops/s
[info]                  ·gc.alloc.rate:      158.950 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 822449.495 ops/s
[info]                  ·gc.alloc.rate:      158.864 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 830138.505 ops/s
[info]                  ·gc.alloc.rate:            160.322 MB/sec
[info]                  ·gc.alloc.rate.norm:       304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.025 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1285.662 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 833206.283 ops/s
[info]                  ·gc.alloc.rate:      160.920 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala":
[info]   826322.300 ±(99.9%) 19286.971 ops/s [Average]
[info]   (min, avg, max) = (822449.495, 826322.300, 833206.283), stdev = 5008.765
[info]   CI (99.9%): [807035.329, 845609.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   159.593 ±(99.9%) 3.706 MB/sec [Average]
[info]   (min, avg, max) = (158.864, 159.593, 160.920), stdev = 0.962
[info]   CI (99.9%): [155.888, 163.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   304.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (304.000, 304.001, 304.001), stdev = 0.001
[info]   CI (99.9%): [304.000, 304.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   135.605 ±(99.9%) 1167.601 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 135.605, 678.025), stdev = 303.222
[info]   CI (99.9%): [≈ 0, 1303.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   257.132 ±(99.9%) 2213.987 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 257.132, 1285.662), stdev = 574.965
[info]   CI (99.9%): [≈ 0, 2471.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.count":
[info]   1.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.200, 1.000), stdev = 0.447
[info]   CI (99.9%): [1.000, 1.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.time":
[info]   3.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 3.000), stdev = 1.342
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 13.88% complete, ETA 01:37:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 44692.788 ops/s
[info] # Warmup Iteration   2: 76139.945 ops/s
[info] # Warmup Iteration   3: 76812.709 ops/s
[info] # Warmup Iteration   4: 77224.862 ops/s
[info] # Warmup Iteration   5: 77857.761 ops/s
[info] Iteration   1: 77938.999 ops/s
[info]                  ·gc.alloc.rate:                                  3319.944 MB/sec
[info]                  ·gc.alloc.rate.norm:                             67048.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.033 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3406.973 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       68805.612 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 79392.825 ops/s
[info]                  ·gc.alloc.rate:                                  3381.624 MB/sec
[info]                  ·gc.alloc.rate.norm:                             67048.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.012 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.234 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3406.511 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       67541.446 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 79247.640 ops/s
[info]                  ·gc.alloc.rate:                                  3375.366 MB/sec
[info]                  ·gc.alloc.rate.norm:                             67048.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.011 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.215 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.279 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       54134.732 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 79087.003 ops/s
[info]                  ·gc.alloc.rate:                                  3368.892 MB/sec
[info]                  ·gc.alloc.rate.norm:                             67048.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.131 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3406.986 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       67806.147 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   5: 78510.896 ops/s
[info]                  ·gc.alloc.rate:                                  3345.001 MB/sec
[info]                  ·gc.alloc.rate.norm:                             67048.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.026 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3407.682 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       68304.398 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        15.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson":
[info]   78835.472 ±(99.9%) 2320.637 ops/s [Average]
[info]   (min, avg, max) = (77938.999, 78835.472, 79392.825), stdev = 602.662
[info]   CI (99.9%): [76514.835, 81156.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3358.165 ±(99.9%) 98.087 MB/sec [Average]
[info]   (min, avg, max) = (3319.944, 3358.165, 3381.624), stdev = 25.473
[info]   CI (99.9%): [3260.079, 3456.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   67048.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (67048.005, 67048.005, 67048.006), stdev = 0.001
[info]   CI (99.9%): [67048.005, 67048.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.006 ±(99.9%) 0.019 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.006, 0.012), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.128 ±(99.9%) 0.376 B/op [Average]
[info]   (min, avg, max) = (0.026, 0.128, 0.234), stdev = 0.098
[info]   CI (99.9%): [≈ 0, 0.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   3270.686 ±(99.9%) 1174.031 MB/sec [Average]
[info]   (min, avg, max) = (2725.279, 3270.686, 3407.682), stdev = 304.892
[info]   CI (99.9%): [2096.656, 4444.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   65318.467 ±(99.9%) 24145.877 B/op [Average]
[info]   (min, avg, max) = (54134.732, 65318.467, 68805.612), stdev = 6270.608
[info]   CI (99.9%): [41172.590, 89464.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 8.000, 15.000), stdev = 4.062
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 14.12% complete, ETA 01:36:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 194914.338 ops/s
[info] # Warmup Iteration   2: 260650.119 ops/s
[info] # Warmup Iteration   3: 266019.569 ops/s
[info] # Warmup Iteration   4: 267184.754 ops/s
[info] # Warmup Iteration   5: 265954.216 ops/s
[info] Iteration   1: 267957.446 ops/s
[info]                  ·gc.alloc.rate:            1187.274 MB/sec
[info]                  ·gc.alloc.rate.norm:       6968.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.492 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7943.521 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 268649.065 ops/s
[info]                  ·gc.alloc.rate:            1189.274 MB/sec
[info]                  ·gc.alloc.rate.norm:       6968.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.070 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3972.840 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 267593.791 ops/s
[info]                  ·gc.alloc.rate:            1184.790 MB/sec
[info]                  ·gc.alloc.rate.norm:       6968.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.312 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7976.763 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 266584.378 ops/s
[info]                  ·gc.alloc.rate:            1180.337 MB/sec
[info]                  ·gc.alloc.rate.norm:       6968.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.343 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8007.039 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 267802.304 ops/s
[info]                  ·gc.alloc.rate:                   1185.820 MB/sec
[info]                  ·gc.alloc.rate.norm:              6968.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             678.206 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3985.210 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 19.574 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce":
[info]   267717.397 ±(99.9%) 2876.311 ops/s [Average]
[info]   (min, avg, max) = (266584.378, 267717.397, 268649.065), stdev = 746.969
[info]   CI (99.9%): [264841.086, 270593.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1185.499 ±(99.9%) 12.866 MB/sec [Average]
[info]   (min, avg, max) = (1180.337, 1185.499, 1189.274), stdev = 3.341
[info]   CI (99.9%): [1172.633, 1198.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   6968.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6968.002, 6968.002, 6968.002), stdev = 0.001
[info]   CI (99.9%): [6968.001, 6968.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1084.485 ±(99.9%) 1428.373 MB/sec [Average]
[info]   (min, avg, max) = (678.070, 1084.485, 1356.343), stdev = 370.944
[info]   CI (99.9%): [≈ 0, 2512.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   6377.074 ±(99.9%) 8429.943 B/op [Average]
[info]   (min, avg, max) = (3972.840, 6377.074, 8007.039), stdev = 2189.229
[info]   CI (99.9%): [≈ 0, 14807.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   3.915 ±(99.9%) 33.707 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.915, 19.574), stdev = 8.754
[info]   CI (99.9%): [≈ 0, 37.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 8.000), stdev = 1.817
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 14.35% complete, ETA 01:36:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1165922.653 ops/s
[info] # Warmup Iteration   2: 1846673.431 ops/s
[info] # Warmup Iteration   3: 1861427.901 ops/s
[info] # Warmup Iteration   4: 1855009.751 ops/s
[info] # Warmup Iteration   5: 1864522.917 ops/s
[info] Iteration   1: 1824220.309 ops/s
[info]                  ·gc.alloc.rate:                   936.305 MB/sec
[info]                  ·gc.alloc.rate.norm:              808.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.630 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        583.909 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.575 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1862778.732 ops/s
[info]                  ·gc.alloc.rate:            956.384 MB/sec
[info]                  ·gc.alloc.rate.norm:       808.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.945 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1144.724 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 1866394.605 ops/s
[info]                  ·gc.alloc.rate:            957.969 MB/sec
[info]                  ·gc.alloc.rate.norm:       808.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.304 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 571.273 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 1835682.813 ops/s
[info]                  ·gc.alloc.rate:            942.291 MB/sec
[info]                  ·gc.alloc.rate.norm:       808.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.729 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1161.659 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 1834852.251 ops/s
[info]                  ·gc.alloc.rate:            941.874 MB/sec
[info]                  ·gc.alloc.rate.norm:       808.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.397 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 581.115 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala":
[info]   1844785.742 ±(99.9%) 71914.453 ops/s [Average]
[info]   (min, avg, max) = (1824220.309, 1844785.742, 1866394.605), stdev = 18675.955
[info]   CI (99.9%): [1772871.289, 1916700.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   946.965 ±(99.9%) 37.095 MB/sec [Average]
[info]   (min, avg, max) = (936.305, 946.965, 957.969), stdev = 9.633
[info]   CI (99.9%): [909.870, 984.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   808.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (808.000, 808.000, 808.000), stdev = 0.001
[info]   CI (99.9%): [808.000, 808.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   948.201 ±(99.9%) 1429.383 MB/sec [Average]
[info]   (min, avg, max) = (676.630, 948.201, 1354.945), stdev = 371.206
[info]   CI (99.9%): [≈ 0, 2377.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   808.536 ±(99.9%) 1211.867 B/op [Average]
[info]   (min, avg, max) = (571.273, 808.536, 1161.659), stdev = 314.718
[info]   CI (99.9%): [≈ 0, 2020.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.115 ±(99.9%) 0.990 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.115, 0.575), stdev = 0.257
[info]   CI (99.9%): [≈ 0, 1.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 9.000), stdev = 2.168
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 14.59% complete, ETA 01:36:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1921352.350 ops/s
[info] # Warmup Iteration   2: 2055937.303 ops/s
[info] # Warmup Iteration   3: 2120147.610 ops/s
[info] # Warmup Iteration   4: 2136541.495 ops/s
[info] # Warmup Iteration   5: 2133014.217 ops/s
[info] Iteration   1: 2132487.157 ops/s
[info]                  ·gc.alloc.rate:            574.356 MB/sec
[info]                  ·gc.alloc.rate.norm:       424.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.983 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 500.499 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 2144595.144 ops/s
[info]                  ·gc.alloc.rate:      577.641 MB/sec
[info]                  ·gc.alloc.rate.norm: 424.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2187626.915 ops/s
[info]                  ·gc.alloc.rate:            589.249 MB/sec
[info]                  ·gc.alloc.rate.norm:       424.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.040 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 487.891 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 2187915.980 ops/s
[info]                  ·gc.alloc.rate:            589.387 MB/sec
[info]                  ·gc.alloc.rate.norm:       424.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.109 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 487.826 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 2186861.790 ops/s
[info]                  ·gc.alloc.rate:            589.089 MB/sec
[info]                  ·gc.alloc.rate.norm:       424.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.086 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 488.057 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala":
[info]   2167897.397 ±(99.9%) 104510.155 ops/s [Average]
[info]   (min, avg, max) = (2132487.157, 2167897.397, 2187915.980), stdev = 27140.955
[info]   CI (99.9%): [2063387.242, 2272407.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   583.944 ±(99.9%) 28.290 MB/sec [Average]
[info]   (min, avg, max) = (574.356, 583.944, 589.387), stdev = 7.347
[info]   CI (99.9%): [555.655, 612.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   424.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (424.000, 424.000, 424.000), stdev = 0.001
[info]   CI (99.9%): [424.000, 424.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   542.444 ±(99.9%) 1167.651 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 542.444, 678.109), stdev = 303.235
[info]   CI (99.9%): [≈ 0, 1710.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   392.855 ±(99.9%) 845.909 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 392.855, 500.499), stdev = 219.680
[info]   CI (99.9%): [≈ 0, 1238.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 14.82% complete, ETA 01:36:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2294226.146 ops/s
[info] # Warmup Iteration   2: 2507650.938 ops/s
[info] # Warmup Iteration   3: 2522295.677 ops/s
[info] # Warmup Iteration   4: 2508356.457 ops/s
[info] # Warmup Iteration   5: 2518357.297 ops/s
[info] Iteration   1: 2337592.452 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2521751.075 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2522392.032 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2520738.782 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2519445.208 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc":
[info]   2484383.910 ±(99.9%) 316008.777 ops/s [Average]
[info]   (min, avg, max) = (2337592.452, 2484383.910, 2522392.032), stdev = 82066.476
[info]   CI (99.9%): [2168375.133, 2800392.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 15.06% complete, ETA 01:35:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25149.210 ops/s
[info] # Warmup Iteration   2: 37883.306 ops/s
[info] # Warmup Iteration   3: 38642.148 ops/s
[info] # Warmup Iteration   4: 39283.885 ops/s
[info] # Warmup Iteration   5: 39141.236 ops/s
[info] Iteration   1: 39078.184 ops/s
[info]                  ·gc.alloc.rate:            1646.483 MB/sec
[info]                  ·gc.alloc.rate.norm:       66320.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.732 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 54568.340 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 38886.459 ops/s
[info]                  ·gc.alloc.rate:                   1638.687 MB/sec
[info]                  ·gc.alloc.rate.norm:              66320.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2032.461 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        82256.585 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 161.763 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   3: 39330.251 ops/s
[info]                  ·gc.alloc.rate:                                  1657.207 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66320.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.234 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 9.373 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.814 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       54538.640 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   4: 39296.164 ops/s
[info]                  ·gc.alloc.rate:                                  1655.662 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66320.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.018 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.717 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.029 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       81876.647 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 39316.559 ops/s
[info]                  ·gc.alloc.rate:            1656.649 MB/sec
[info]                  ·gc.alloc.rate.norm:       66320.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.805 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 54556.670 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson":
[info]   39181.523 ±(99.9%) 748.747 ops/s [Average]
[info]   (min, avg, max) = (38886.459, 39181.523, 39330.251), stdev = 194.447
[info]   CI (99.9%): [38432.776, 39930.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1650.938 ±(99.9%) 31.292 MB/sec [Average]
[info]   (min, avg, max) = (1638.687, 1650.938, 1657.207), stdev = 8.126
[info]   CI (99.9%): [1619.646, 1682.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   66320.010 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (66320.010, 66320.010, 66320.010), stdev = 0.001
[info]   CI (99.9%): [66320.010, 66320.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.050 ±(99.9%) 0.397 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.234), stdev = 0.103
[info]   CI (99.9%): [≈ 0, 0.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.018 ±(99.9%) 15.877 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.018, 9.373), stdev = 4.123
[info]   CI (99.9%): [≈ 0, 17.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1631.368 ±(99.9%) 1430.373 MB/sec [Average]
[info]   (min, avg, max) = (1354.732, 1631.368, 2044.029), stdev = 371.463
[info]   CI (99.9%): [200.996, 3061.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   65559.377 ±(99.9%) 58027.593 B/op [Average]
[info]   (min, avg, max) = (54538.640, 65559.377, 82256.585), stdev = 15069.582
[info]   CI (99.9%): [7531.784, 123586.970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   32.353 ±(99.9%) 278.566 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 32.353, 161.763), stdev = 72.343
[info]   CI (99.9%): [≈ 0, 310.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.400, 14.000), stdev = 5.030
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 15.29% complete, ETA 01:35:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 185080.628 ops/s
[info] # Warmup Iteration   2: 213698.092 ops/s
[info] # Warmup Iteration   3: 217407.541 ops/s
[info] # Warmup Iteration   4: 217079.765 ops/s
[info] # Warmup Iteration   5: 216326.467 ops/s
[info] Iteration   1: 217749.066 ops/s
[info]                  ·gc.alloc.rate:                                  2240.996 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16200.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.110 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.795 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.103 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       19677.892 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                24.074 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   2: 218870.850 ops/s
[info]                  ·gc.alloc.rate:                                  2252.620 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16200.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.138 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       14700.671 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 217743.351 ops/s
[info]                  ·gc.alloc.rate:            2240.971 MB/sec
[info]                  ·gc.alloc.rate.norm:       16200.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.090 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14776.746 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 218815.098 ops/s
[info]                  ·gc.alloc.rate:                                  2251.862 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16200.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.059 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.297 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       19605.910 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 215606.088 ops/s
[info]                  ·gc.alloc.rate:            2219.102 MB/sec
[info]                  ·gc.alloc.rate.norm:       16200.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.191 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14923.113 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce":
[info]   217756.891 ±(99.9%) 5089.156 ops/s [Average]
[info]   (min, avg, max) = (215606.088, 217756.891, 218870.850), stdev = 1321.638
[info]   CI (99.9%): [212667.735, 222846.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   2241.110 ±(99.9%) 52.109 MB/sec [Average]
[info]   (min, avg, max) = (2219.102, 2241.110, 2252.620), stdev = 13.532
[info]   CI (99.9%): [2189.002, 2293.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   16200.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16200.002, 16200.002, 16200.002), stdev = 0.001
[info]   CI (99.9%): [16200.002, 16200.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.024 ±(99.9%) 0.186 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.110), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.171 ±(99.9%) 1.345 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.171, 0.795), stdev = 0.349
[info]   CI (99.9%): [≈ 0, 1.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2315.964 ±(99.9%) 1433.256 MB/sec [Average]
[info]   (min, avg, max) = (2044.090, 2315.964, 2725.297), stdev = 372.212
[info]   CI (99.9%): [882.707, 3749.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   16736.866 ±(99.9%) 10216.715 B/op [Average]
[info]   (min, avg, max) = (14700.671, 16736.866, 19677.892), stdev = 2653.249
[info]   CI (99.9%): [6520.151, 26953.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   4.815 ±(99.9%) 41.456 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.815, 24.074), stdev = 10.766
[info]   CI (99.9%): [≈ 0, 46.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 8.000), stdev = 1.817
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 15.53% complete, ETA 01:35:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 193967.261 ops/s
[info] # Warmup Iteration   2: 295282.912 ops/s
[info] # Warmup Iteration   3: 299408.265 ops/s
[info] # Warmup Iteration   4: 302096.165 ops/s
[info] # Warmup Iteration   5: 303006.320 ops/s
[info] Iteration   1: 300181.481 ops/s
[info]                  ·gc.alloc.rate:            1452.303 MB/sec
[info]                  ·gc.alloc.rate.norm:       7616.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2032.055 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10656.274 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   2: 303023.092 ops/s
[info]                  ·gc.alloc.rate:            1466.344 MB/sec
[info]                  ·gc.alloc.rate.norm:       7616.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.947 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7037.423 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 295326.698 ops/s
[info]                  ·gc.alloc.rate:                                  1428.978 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7616.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.070 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.372 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1358.766 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7241.792 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                21.299 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 304855.780 ops/s
[info]                  ·gc.alloc.rate:                                  1475.078 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7616.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.019 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.099 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.759 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7036.084 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 305387.155 ops/s
[info]                  ·gc.alloc.rate:                                  1477.883 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7616.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.941 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7023.668 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala":
[info]   301754.841 ±(99.9%) 15901.629 ops/s [Average]
[info]   (min, avg, max) = (295326.698, 301754.841, 305387.155), stdev = 4129.603
[info]   CI (99.9%): [285853.212, 317656.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1460.117 ±(99.9%) 77.229 MB/sec [Average]
[info]   (min, avg, max) = (1428.978, 1460.117, 1477.883), stdev = 20.056
[info]   CI (99.9%): [1382.889, 1537.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   7616.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7616.001, 7616.001, 7616.001), stdev = 0.001
[info]   CI (99.9%): [7616.001, 7616.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.018 ±(99.9%) 0.116 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.070), stdev = 0.030
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.094 ±(99.9%) 0.620 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.094, 0.372), stdev = 0.161
[info]   CI (99.9%): [≈ 0, 0.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1494.294 ±(99.9%) 1157.642 MB/sec [Average]
[info]   (min, avg, max) = (1354.947, 1494.294, 2032.055), stdev = 300.636
[info]   CI (99.9%): [336.652, 2651.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   7799.048 ±(99.9%) 6160.331 B/op [Average]
[info]   (min, avg, max) = (7023.668, 7799.048, 10656.274), stdev = 1599.819
[info]   CI (99.9%): [1638.717, 13959.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   4.260 ±(99.9%) 36.679 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.260, 21.299), stdev = 9.525
[info]   CI (99.9%): [≈ 0, 40.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.800, 14.000), stdev = 4.868
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 15.76% complete, ETA 01:35:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1207621.871 ops/s
[info] # Warmup Iteration   2: 1212258.403 ops/s
[info] # Warmup Iteration   3: 1233233.877 ops/s
[info] # Warmup Iteration   4: 1226712.316 ops/s
[info] # Warmup Iteration   5: 1225986.828 ops/s
[info] Iteration   1: 1233352.423 ops/s
[info]                  ·gc.alloc.rate:      426.264 MB/sec
[info]                  ·gc.alloc.rate.norm: 544.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1229212.635 ops/s
[info]                  ·gc.alloc.rate:            424.886 MB/sec
[info]                  ·gc.alloc.rate.norm:       544.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.112 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 868.217 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 1230209.500 ops/s
[info]                  ·gc.alloc.rate:            425.378 MB/sec
[info]                  ·gc.alloc.rate.norm:       544.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.371 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 867.543 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 1220131.295 ops/s
[info]                  ·gc.alloc.rate:      421.694 MB/sec
[info]                  ·gc.alloc.rate.norm: 544.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1222495.012 ops/s
[info]                  ·gc.alloc.rate:            422.487 MB/sec
[info]                  ·gc.alloc.rate.norm:       544.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.022 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 873.031 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala":
[info]   1227080.173 ±(99.9%) 21352.143 ops/s [Average]
[info]   (min, avg, max) = (1220131.295, 1227080.173, 1233352.423), stdev = 5545.084
[info]   CI (99.9%): [1205728.030, 1248432.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   424.142 ±(99.9%) 7.536 MB/sec [Average]
[info]   (min, avg, max) = (421.694, 424.142, 426.264), stdev = 1.957
[info]   CI (99.9%): [416.606, 431.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   544.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (544.000, 544.000, 544.000), stdev = 0.001
[info]   CI (99.9%): [544.000, 544.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   406.901 ±(99.9%) 1430.314 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 406.901, 678.371), stdev = 371.448
[info]   CI (99.9%): [≈ 0, 1837.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   521.758 ±(99.9%) 1834.072 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 521.758, 873.031), stdev = 476.303
[info]   CI (99.9%): [≈ 0, 2355.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 16.00% complete, ETA 01:34:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33743.393 ops/s
[info] # Warmup Iteration   2: 73582.132 ops/s
[info] # Warmup Iteration   3: 74063.987 ops/s
[info] # Warmup Iteration   4: 74691.559 ops/s
[info] # Warmup Iteration   5: 76206.747 ops/s
[info] Iteration   1: 76565.740 ops/s
[info]                  ·gc.alloc.rate:                                  3216.612 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66128.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.034 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3406.864 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       70039.257 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 76713.610 ops/s
[info]                  ·gc.alloc.rate:                                  3223.703 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66128.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.108 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3407.877 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       69905.978 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 76760.671 ops/s
[info]                  ·gc.alloc.rate:                                  3224.730 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66128.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.036 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.252 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       55885.449 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 75611.194 ops/s
[info]                  ·gc.alloc.rate:                                  3176.706 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66128.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.082 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3406.907 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       70919.992 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 74946.486 ops/s
[info]                  ·gc.alloc.rate:                                  3149.442 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66128.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.110 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3407.813 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       71552.953 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson":
[info]   76119.540 ±(99.9%) 3103.015 ops/s [Average]
[info]   (min, avg, max) = (74946.486, 76119.540, 76760.671), stdev = 805.843
[info]   CI (99.9%): [73016.525, 79222.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3198.239 ±(99.9%) 129.621 MB/sec [Average]
[info]   (min, avg, max) = (3149.442, 3198.239, 3224.730), stdev = 33.662
[info]   CI (99.9%): [3068.617, 3327.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   66128.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (66128.005, 66128.005, 66128.006), stdev = 0.001
[info]   CI (99.9%): [66128.005, 66128.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.004 ±(99.9%) 0.007 MB/sec [Average]
[info]   (min, avg, max) = (0.002, 0.004, 0.005), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.074 ±(99.9%) 0.144 B/op [Average]
[info]   (min, avg, max) = (0.034, 0.074, 0.110), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   3270.943 ±(99.9%) 1174.642 MB/sec [Average]
[info]   (min, avg, max) = (2725.252, 3270.943, 3407.877), stdev = 305.051
[info]   CI (99.9%): [2096.300, 4445.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   67660.726 ±(99.9%) 25478.926 B/op [Average]
[info]   (min, avg, max) = (55885.449, 67660.726, 71552.953), stdev = 6616.796
[info]   CI (99.9%): [42181.800, 93139.652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 7.000), stdev = 0.837
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 16.24% complete, ETA 01:34:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 149604.369 ops/s
[info] # Warmup Iteration   2: 209258.768 ops/s
[info] # Warmup Iteration   3: 215226.769 ops/s
[info] # Warmup Iteration   4: 213983.784 ops/s
[info] # Warmup Iteration   5: 215728.931 ops/s
[info] Iteration   1: 215032.218 ops/s
[info]                  ·gc.alloc.rate:            1821.799 MB/sec
[info]                  ·gc.alloc.rate.norm:       13336.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2034.051 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14889.739 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 216110.672 ops/s
[info]                  ·gc.alloc.rate:                                  1831.546 MB/sec
[info]                  ·gc.alloc.rate.norm:                             13336.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.026 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.188 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1359.834 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9901.334 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                24.256 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 217532.818 ops/s
[info]                  ·gc.alloc.rate:                                  1843.361 MB/sec
[info]                  ·gc.alloc.rate.norm:                             13336.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.115 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.835 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.460 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       14790.873 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 215144.955 ops/s
[info]                  ·gc.alloc.rate:                                  1823.124 MB/sec
[info]                  ·gc.alloc.rate.norm:                             13336.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.502 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       14955.362 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   5: 216036.011 ops/s
[info]                  ·gc.alloc.rate:            1830.270 MB/sec
[info]                  ·gc.alloc.rate.norm:       13336.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.071 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14893.829 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce":
[info]   215971.335 ±(99.9%) 3863.462 ops/s [Average]
[info]   (min, avg, max) = (215032.218, 215971.335, 217532.818), stdev = 1003.329
[info]   CI (99.9%): [212107.873, 219834.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1830.020 ±(99.9%) 33.098 MB/sec [Average]
[info]   (min, avg, max) = (1821.799, 1830.020, 1843.361), stdev = 8.595
[info]   CI (99.9%): [1796.922, 1863.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   13336.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13336.002, 13336.002, 13336.002), stdev = 0.001
[info]   CI (99.9%): [13336.002, 13336.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.028 ±(99.9%) 0.192 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.115), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.206 ±(99.9%) 1.388 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.206, 0.835), stdev = 0.361
[info]   CI (99.9%): [≈ 0, 1.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1905.383 ±(99.9%) 1174.462 MB/sec [Average]
[info]   (min, avg, max) = (1359.834, 1905.383, 2044.502), stdev = 305.004
[info]   CI (99.9%): [730.921, 3079.846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   13886.227 ±(99.9%) 8580.783 B/op [Average]
[info]   (min, avg, max) = (9901.334, 13886.227, 14955.362), stdev = 2228.402
[info]   CI (99.9%): [5305.444, 22467.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.737 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   4.851 ±(99.9%) 41.770 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.851, 24.256), stdev = 10.848
[info]   CI (99.9%): [≈ 0, 46.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.000, 12.000), stdev = 4.301
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 16.47% complete, ETA 01:34:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 713257.297 ops/s
[info] # Warmup Iteration   2: 1108793.827 ops/s
[info] # Warmup Iteration   3: 1107019.887 ops/s
[info] # Warmup Iteration   4: 1102985.431 ops/s
[info] # Warmup Iteration   5: 1117171.309 ops/s
[info] Iteration   1: 1116316.283 ops/s
[info]                  ·gc.alloc.rate:            652.445 MB/sec
[info]                  ·gc.alloc.rate.norm:       920.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.374 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 955.153 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 1063967.897 ops/s
[info]                  ·gc.alloc.rate:            621.902 MB/sec
[info]                  ·gc.alloc.rate.norm:       920.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.439 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1002.158 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 1015346.812 ops/s
[info]                  ·gc.alloc.rate:            593.423 MB/sec
[info]                  ·gc.alloc.rate.norm:       920.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.327 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1050.079 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 1118160.175 ops/s
[info]                  ·gc.alloc.rate:            653.675 MB/sec
[info]                  ·gc.alloc.rate.norm:       920.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.513 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 953.550 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 1111010.497 ops/s
[info]                  ·gc.alloc.rate:            649.569 MB/sec
[info]                  ·gc.alloc.rate.norm:       920.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.571 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 959.661 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala":
[info]   1084960.333 ±(99.9%) 172751.501 ops/s [Average]
[info]   (min, avg, max) = (1015346.812, 1084960.333, 1118160.175), stdev = 44863.016
[info]   CI (99.9%): [912208.832, 1257711.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   634.203 ±(99.9%) 101.191 MB/sec [Average]
[info]   (min, avg, max) = (593.423, 634.203, 653.675), stdev = 26.279
[info]   CI (99.9%): [533.011, 735.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   920.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (920.000, 920.000, 920.000), stdev = 0.001
[info]   CI (99.9%): [920.000, 920.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   677.445 ±(99.9%) 0.382 MB/sec [Average]
[info]   (min, avg, max) = (677.327, 677.445, 677.571), stdev = 0.099
[info]   CI (99.9%): [677.063, 677.827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   984.120 ±(99.9%) 161.634 B/op [Average]
[info]   (min, avg, max) = (953.550, 984.120, 1050.079), stdev = 41.976
[info]   CI (99.9%): [822.486, 1145.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 16.71% complete, ETA 01:34:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2576594.568 ops/s
[info] # Warmup Iteration   2: 3043500.111 ops/s
[info] # Warmup Iteration   3: 3065826.664 ops/s
[info] # Warmup Iteration   4: 3092162.202 ops/s
[info] # Warmup Iteration   5: 3032052.243 ops/s
[info] Iteration   1: 3050462.986 ops/s
[info]                  ·gc.alloc.rate:                   1038.651 MB/sec
[info]                  ·gc.alloc.rate.norm:              536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.665 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        699.080 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.344 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 3027913.025 ops/s
[info]                  ·gc.alloc.rate:            1031.512 MB/sec
[info]                  ·gc.alloc.rate.norm:       536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.364 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 352.495 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 3025157.780 ops/s
[info]                  ·gc.alloc.rate:            1030.341 MB/sec
[info]                  ·gc.alloc.rate.norm:       536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.392 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 705.617 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 3090293.478 ops/s
[info]                  ·gc.alloc.rate:            1052.573 MB/sec
[info]                  ·gc.alloc.rate.norm:       536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.561 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 345.033 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 3074094.648 ops/s
[info]                  ·gc.alloc.rate:                   1046.806 MB/sec
[info]                  ·gc.alloc.rate.norm:              536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.812 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        693.709 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.341 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala":
[info]   3053584.383 ±(99.9%) 109676.826 ops/s [Average]
[info]   (min, avg, max) = (3025157.780, 3053584.383, 3090293.478), stdev = 28482.723
[info]   CI (99.9%): [2943907.557, 3163261.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1039.976 ±(99.9%) 37.113 MB/sec [Average]
[info]   (min, avg, max) = (1030.341, 1039.976, 1052.573), stdev = 9.638
[info]   CI (99.9%): [1002.863, 1077.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   536.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (536.000, 536.000, 536.000), stdev = 0.001
[info]   CI (99.9%): [536.000, 536.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1084.359 ±(99.9%) 1428.543 MB/sec [Average]
[info]   (min, avg, max) = (677.561, 1084.359, 1356.392), stdev = 370.988
[info]   CI (99.9%): [≈ 0, 2512.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   559.187 ±(99.9%) 739.914 B/op [Average]
[info]   (min, avg, max) = (345.033, 559.187, 705.617), stdev = 192.153
[info]   CI (99.9%): [≈ 0, 1299.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.137 ±(99.9%) 0.722 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.137, 0.344), stdev = 0.188
[info]   CI (99.9%): [≈ 0, 0.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 2.191
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 16.94% complete, ETA 01:33:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2967700.652 ops/s
[info] # Warmup Iteration   2: 3263058.106 ops/s
[info] # Warmup Iteration   3: 3205563.266 ops/s
[info] # Warmup Iteration   4: 3226378.616 ops/s
[info] # Warmup Iteration   5: 3207051.341 ops/s
[info] Iteration   1: 3218699.566 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3211605.603 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3229022.558 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3227152.100 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3230991.823 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   3223494.330 ±(99.9%) 31311.477 ops/s [Average]
[info]   (min, avg, max) = (3211605.603, 3223494.330, 3230991.823), stdev = 8131.491
[info]   CI (99.9%): [3192182.853, 3254805.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 17.18% complete, ETA 01:33:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 172992.639 ops/s
[info] # Warmup Iteration   2: 302208.666 ops/s
[info] # Warmup Iteration   3: 305377.980 ops/s
[info] # Warmup Iteration   4: 303405.286 ops/s
[info] # Warmup Iteration   5: 308830.963 ops/s
[info] Iteration   1: 311145.094 ops/s
[info]                  ·gc.alloc.rate:                                  2546.134 MB/sec
[info]                  ·gc.alloc.rate.norm:                             12880.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.021 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.105 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.647 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       13788.097 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 310747.230 ops/s
[info]                  ·gc.alloc.rate:                                  2542.638 MB/sec
[info]                  ·gc.alloc.rate.norm:                             12880.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.496 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       13806.287 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 311312.655 ops/s
[info]                  ·gc.alloc.rate:                                  2547.468 MB/sec
[info]                  ·gc.alloc.rate.norm:                             12880.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.027 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.736 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       13781.321 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 307777.588 ops/s
[info]                  ·gc.alloc.rate:            2518.579 MB/sec
[info]                  ·gc.alloc.rate.norm:       12880.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.263 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10454.353 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 305161.159 ops/s
[info]                  ·gc.alloc.rate:                                  2496.938 MB/sec
[info]                  ·gc.alloc.rate.norm:                             12880.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.034 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.372 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       14058.336 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson":
[info]   309228.745 ±(99.9%) 10363.167 ops/s [Average]
[info]   (min, avg, max) = (305161.159, 309228.745, 311312.655), stdev = 2691.281
[info]   CI (99.9%): [298865.578, 319591.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2530.351 ±(99.9%) 84.979 MB/sec [Average]
[info]   (min, avg, max) = (2496.938, 2530.351, 2547.468), stdev = 22.069
[info]   CI (99.9%): [2445.373, 2615.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   12880.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (12880.001, 12880.001, 12880.001), stdev = 0.001
[info]   CI (99.9%): [12880.001, 12880.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.007 ±(99.9%) 0.031 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.021), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.036 ±(99.9%) 0.158 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.036, 0.105), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   2589.303 ±(99.9%) 1173.239 MB/sec [Average]
[info]   (min, avg, max) = (2044.263, 2589.303, 2725.736), stdev = 304.686
[info]   CI (99.9%): [1416.064, 3762.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   13177.679 ±(99.9%) 5879.079 B/op [Average]
[info]   (min, avg, max) = (10454.353, 13177.679, 14058.336), stdev = 1526.778
[info]   CI (99.9%): [7298.600, 19056.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 8.000), stdev = 1.789
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 17.41% complete, ETA 01:33:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18989.517 ops/s
[info] # Warmup Iteration   2: 25785.346 ops/s
[info] # Warmup Iteration   3: 25657.363 ops/s
[info] # Warmup Iteration   4: 26032.212 ops/s
[info] # Warmup Iteration   5: 25476.475 ops/s
[info] Iteration   1: 26030.986 ops/s
[info]                  ·gc.alloc.rate:            1524.662 MB/sec
[info]                  ·gc.alloc.rate.norm:       92192.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.075 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 81998.031 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 25860.792 ops/s
[info]                  ·gc.alloc.rate:            1515.218 MB/sec
[info]                  ·gc.alloc.rate.norm:       92192.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2034.799 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 123805.424 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 25994.579 ops/s
[info]                  ·gc.alloc.rate:                                  1522.374 MB/sec
[info]                  ·gc.alloc.rate.norm:                             92192.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.075 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.565 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1359.297 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       82316.382 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                201.657 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 26268.336 ops/s
[info]                  ·gc.alloc.rate:                                  1538.550 MB/sec
[info]                  ·gc.alloc.rate.norm:                             92192.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.071 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.266 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.744 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       81657.462 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 26309.999 ops/s
[info]                  ·gc.alloc.rate:                                  1541.224 MB/sec
[info]                  ·gc.alloc.rate.norm:                             92192.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.280 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.985 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       81530.231 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce":
[info]   26092.938 ±(99.9%) 733.860 ops/s [Average]
[info]   (min, avg, max) = (25860.792, 26092.938, 26309.999), stdev = 190.581
[info]   CI (99.9%): [25359.078, 26826.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate":
[info]   1528.406 ±(99.9%) 42.684 MB/sec [Average]
[info]   (min, avg, max) = (1515.218, 1528.406, 1541.224), stdev = 11.085
[info]   CI (99.9%): [1485.721, 1571.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   92192.016 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (92192.016, 92192.016, 92192.017), stdev = 0.001
[info]   CI (99.9%): [92192.014, 92192.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.030 ±(99.9%) 0.152 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.075), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.822 ±(99.9%) 9.136 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.822, 4.565), stdev = 2.373
[info]   CI (99.9%): [≈ 0, 10.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1495.180 ±(99.9%) 1161.622 MB/sec [Average]
[info]   (min, avg, max) = (1356.075, 1495.180, 2034.799), stdev = 301.670
[info]   CI (99.9%): [333.558, 2656.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   90261.506 ±(99.9%) 72215.468 B/op [Average]
[info]   (min, avg, max) = (81530.231, 90261.506, 123805.424), stdev = 18754.128
[info]   CI (99.9%): [18046.038, 162476.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   40.331 ±(99.9%) 347.265 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 40.331, 201.657), stdev = 90.184
[info]   CI (99.9%): [≈ 0, 387.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.800, 11.000), stdev = 3.564
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 17.65% complete, ETA 01:33:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2645.765 ops/s
[info] # Warmup Iteration   2: 88658.640 ops/s
[info] # Warmup Iteration   3: 93467.791 ops/s
[info] # Warmup Iteration   4: 89678.831 ops/s
[info] # Warmup Iteration   5: 94116.193 ops/s
[info] Iteration   1: 93650.369 ops/s
[info]                  ·gc.alloc.rate:            843.480 MB/sec
[info]                  ·gc.alloc.rate.norm:       14176.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1349.531 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 22680.991 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 94318.836 ops/s
[info]                  ·gc.alloc.rate:            849.414 MB/sec
[info]                  ·gc.alloc.rate.norm:       14176.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.694 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11260.070 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 94196.376 ops/s
[info]                  ·gc.alloc.rate:            848.337 MB/sec
[info]                  ·gc.alloc.rate.norm:       14176.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.711 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11274.652 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 94032.037 ops/s
[info]                  ·gc.alloc.rate:            846.905 MB/sec
[info]                  ·gc.alloc.rate.norm:       14176.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.725 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11293.952 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 93682.128 ops/s
[info]                  ·gc.alloc.rate:                   843.736 MB/sec
[info]                  ·gc.alloc.rate.norm:              14176.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.800 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        22661.811 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 11.191 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava":
[info]   93975.949 ±(99.9%) 1157.819 ops/s [Average]
[info]   (min, avg, max) = (93650.369, 93975.949, 94318.836), stdev = 300.682
[info]   CI (99.9%): [92818.131, 95133.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   846.374 ±(99.9%) 10.316 MB/sec [Average]
[info]   (min, avg, max) = (843.480, 846.374, 849.414), stdev = 2.679
[info]   CI (99.9%): [836.058, 856.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   14176.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (14176.004, 14176.004, 14176.005), stdev = 0.001
[info]   CI (99.9%): [14176.004, 14176.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   944.492 ±(99.9%) 1422.484 MB/sec [Average]
[info]   (min, avg, max) = (674.694, 944.492, 1349.531), stdev = 369.415
[info]   CI (99.9%): [≈ 0, 2366.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   15834.295 ±(99.9%) 24033.449 B/op [Average]
[info]   (min, avg, max) = (11260.070, 15834.295, 22680.991), stdev = 6241.410
[info]   CI (99.9%): [≈ 0, 39867.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   2.238 ±(99.9%) 19.272 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.238, 11.191), stdev = 5.005
[info]   CI (99.9%): [≈ 0, 21.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.400, 11.000), stdev = 2.881
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 17.88% complete, ETA 01:32:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 34755.983 ops/s
[info] # Warmup Iteration   2: 57670.163 ops/s
[info] # Warmup Iteration   3: 56891.802 ops/s
[info] # Warmup Iteration   4: 58243.683 ops/s
[info] # Warmup Iteration   5: 58609.012 ops/s
[info] Iteration   1: 58623.869 ops/s
[info]                  ·gc.alloc.rate:                   968.594 MB/sec
[info]                  ·gc.alloc.rate.norm:              26008.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.673 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        18169.547 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 17.883 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 58272.594 ops/s
[info]                  ·gc.alloc.rate:            962.809 MB/sec
[info]                  ·gc.alloc.rate.norm:       26008.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.673 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 36593.295 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 58646.730 ops/s
[info]                  ·gc.alloc.rate:            968.948 MB/sec
[info]                  ·gc.alloc.rate.norm:       26008.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.321 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18180.299 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 58376.259 ops/s
[info]                  ·gc.alloc.rate:                   964.653 MB/sec
[info]                  ·gc.alloc.rate.norm:              26008.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.207 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        36510.782 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 17.959 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 58390.162 ops/s
[info]                  ·gc.alloc.rate:            964.786 MB/sec
[info]                  ·gc.alloc.rate.norm:       26008.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.391 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18260.617 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala":
[info]   58461.923 ±(99.9%) 634.811 ops/s [Average]
[info]   (min, avg, max) = (58272.594, 58461.923, 58646.730), stdev = 164.858
[info]   CI (99.9%): [57827.112, 59096.734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   965.958 ±(99.9%) 10.347 MB/sec [Average]
[info]   (min, avg, max) = (962.809, 965.958, 968.948), stdev = 2.687
[info]   CI (99.9%): [955.611, 976.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   26008.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (26008.007, 26008.007, 26008.008), stdev = 0.001
[info]   CI (99.9%): [26008.006, 26008.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   948.053 ±(99.9%) 1428.509 MB/sec [Average]
[info]   (min, avg, max) = (676.673, 948.053, 1354.673), stdev = 370.979
[info]   CI (99.9%): [≈ 0, 2376.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   25542.908 ±(99.9%) 38699.044 B/op [Average]
[info]   (min, avg, max) = (18169.547, 25542.908, 36593.295), stdev = 10050.019
[info]   CI (99.9%): [≈ 0, 64241.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   7.168 ±(99.9%) 37.798 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.168, 17.959), stdev = 9.816
[info]   CI (99.9%): [≈ 0, 44.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 10.000), stdev = 2.881
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 18.12% complete, ETA 01:32:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 111544.763 ops/s
[info] # Warmup Iteration   2: 123782.606 ops/s
[info] # Warmup Iteration   3: 127572.533 ops/s
[info] # Warmup Iteration   4: 127601.429 ops/s
[info] # Warmup Iteration   5: 127599.140 ops/s
[info] Iteration   1: 127197.350 ops/s
[info]                  ·gc.alloc.rate:            819.724 MB/sec
[info]                  ·gc.alloc.rate.norm:       10144.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.087 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16781.436 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 127592.156 ops/s
[info]                  ·gc.alloc.rate:            822.276 MB/sec
[info]                  ·gc.alloc.rate.norm:       10144.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.044 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8364.681 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 127717.869 ops/s
[info]                  ·gc.alloc.rate:            823.019 MB/sec
[info]                  ·gc.alloc.rate.norm:       10144.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.993 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8356.495 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 127508.549 ops/s
[info]                  ·gc.alloc.rate:            821.819 MB/sec
[info]                  ·gc.alloc.rate.norm:       10144.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.076 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8369.731 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 127670.573 ops/s
[info]                  ·gc.alloc.rate:            823.173 MB/sec
[info]                  ·gc.alloc.rate.norm:       10144.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.337 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8359.178 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala":
[info]   127537.299 ±(99.9%) 793.290 ops/s [Average]
[info]   (min, avg, max) = (127197.350, 127537.299, 127717.869), stdev = 206.015
[info]   CI (99.9%): [126744.009, 128330.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   822.002 ±(99.9%) 5.344 MB/sec [Average]
[info]   (min, avg, max) = (819.724, 822.002, 823.173), stdev = 1.388
[info]   CI (99.9%): [816.658, 827.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10144.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10144.003, 10144.003, 10144.003), stdev = 0.001
[info]   CI (99.9%): [10144.003, 10144.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   813.707 ±(99.9%) 1167.513 MB/sec [Average]
[info]   (min, avg, max) = (677.993, 813.707, 1356.087), stdev = 303.199
[info]   CI (99.9%): [≈ 0, 1981.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   10046.304 ±(99.9%) 14497.892 B/op [Average]
[info]   (min, avg, max) = (8356.495, 10046.304, 16781.436), stdev = 3765.057
[info]   CI (99.9%): [≈ 0, 24544.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 7.000), stdev = 1.643
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 18.35% complete, ETA 01:32:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15516.593 ops/s
[info] # Warmup Iteration   2: 32692.038 ops/s
[info] # Warmup Iteration   3: 32381.511 ops/s
[info] # Warmup Iteration   4: 33210.788 ops/s
[info] # Warmup Iteration   5: 33019.309 ops/s
[info] Iteration   1: 33262.588 ops/s
[info]                  ·gc.alloc.rate:            1738.084 MB/sec
[info]                  ·gc.alloc.rate.norm:       82248.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.701 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 64105.909 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 32970.541 ops/s
[info]                  ·gc.alloc.rate:                                  1722.683 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82248.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.147 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 7.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2035.998 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       97206.964 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                190.789 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   3: 33515.883 ops/s
[info]                  ·gc.alloc.rate:                                  1751.277 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82248.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.032 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.526 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.133 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       96001.902 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 33512.787 ops/s
[info]                  ·gc.alloc.rate:                                  1751.155 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82248.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.346 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.702 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       64003.177 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 33463.624 ops/s
[info]                  ·gc.alloc.rate:                                  1748.877 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82248.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.088 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.504 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       96151.058 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson":
[info]   33345.085 ±(99.9%) 899.841 ops/s [Average]
[info]   (min, avg, max) = (32970.541, 33345.085, 33515.883), stdev = 233.686
[info]   CI (99.9%): [32445.244, 34244.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1742.415 ±(99.9%) 47.348 MB/sec [Average]
[info]   (min, avg, max) = (1722.683, 1742.415, 1751.277), stdev = 12.296
[info]   CI (99.9%): [1695.067, 1789.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   82248.012 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (82248.012, 82248.012, 82248.013), stdev = 0.001
[info]   CI (99.9%): [82248.011, 82248.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.038 ±(99.9%) 0.240 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.038, 0.147), stdev = 0.062
[info]   CI (99.9%): [≈ 0, 0.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.792 ±(99.9%) 11.455 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.792, 7.000), stdev = 2.975
[info]   CI (99.9%): [≈ 0, 13.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1768.408 ±(99.9%) 1440.277 MB/sec [Average]
[info]   (min, avg, max) = (1354.701, 1768.408, 2044.504), stdev = 374.035
[info]   CI (99.9%): [328.131, 3208.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   83493.802 ±(99.9%) 68355.284 B/op [Average]
[info]   (min, avg, max) = (64003.177, 83493.802, 97206.964), stdev = 17751.650
[info]   CI (99.9%): [15138.518, 151849.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   38.158 ±(99.9%) 328.550 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 38.158, 190.789), stdev = 85.323
[info]   CI (99.9%): [≈ 0, 366.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 12.000), stdev = 4.087
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 18.59% complete, ETA 01:31:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27643.842 ops/s
[info] # Warmup Iteration   2: 38325.929 ops/s
[info] # Warmup Iteration   3: 39475.088 ops/s
[info] # Warmup Iteration   4: 37982.786 ops/s
[info] # Warmup Iteration   5: 38986.556 ops/s
[info] Iteration   1: 39459.565 ops/s
[info]                  ·gc.alloc.rate:      442.055 MB/sec
[info]                  ·gc.alloc.rate.norm: 17632.010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 39293.279 ops/s
[info]                  ·gc.alloc.rate:            440.147 MB/sec
[info]                  ·gc.alloc.rate.norm:       17632.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.034 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 27161.587 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 39260.633 ops/s
[info]                  ·gc.alloc.rate:            439.801 MB/sec
[info]                  ·gc.alloc.rate.norm:       17632.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.070 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 27184.414 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 39412.158 ops/s
[info]                  ·gc.alloc.rate:      441.450 MB/sec
[info]                  ·gc.alloc.rate.norm: 17632.010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 39019.333 ops/s
[info]                  ·gc.alloc.rate:            437.090 MB/sec
[info]                  ·gc.alloc.rate.norm:       17632.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.069 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 27352.988 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce":
[info]   39288.994 ±(99.9%) 660.819 ops/s [Average]
[info]   (min, avg, max) = (39019.333, 39288.994, 39459.565), stdev = 171.613
[info]   CI (99.9%): [38628.174, 39949.813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate":
[info]   440.109 ±(99.9%) 7.406 MB/sec [Average]
[info]   (min, avg, max) = (437.090, 440.109, 442.055), stdev = 1.923
[info]   CI (99.9%): [432.703, 447.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   17632.011 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (17632.010, 17632.011, 17632.011), stdev = 0.001
[info]   CI (99.9%): [17632.009, 17632.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   406.835 ±(99.9%) 1430.081 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 406.835, 678.070), stdev = 371.387
[info]   CI (99.9%): [≈ 0, 1836.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   16339.798 ±(99.9%) 57437.397 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16339.798, 27352.988), stdev = 14916.310
[info]   CI (99.9%): [≈ 0, 73777.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 8.000), stdev = 3.317
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 18.82% complete, ETA 01:31:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23709.071 ops/s
[info] # Warmup Iteration   2: 41339.861 ops/s
[info] # Warmup Iteration   3: 40666.065 ops/s
[info] # Warmup Iteration   4: 41472.055 ops/s
[info] # Warmup Iteration   5: 41004.938 ops/s
[info] Iteration   1: 40773.914 ops/s
[info]                  ·gc.alloc.rate:            368.261 MB/sec
[info]                  ·gc.alloc.rate.norm:       14216.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.393 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26149.476 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 41357.550 ops/s
[info]                  ·gc.alloc.rate:      373.681 MB/sec
[info]                  ·gc.alloc.rate.norm: 14216.010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 41086.045 ops/s
[info]                  ·gc.alloc.rate:            371.113 MB/sec
[info]                  ·gc.alloc.rate.norm:       14216.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.439 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 25950.304 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 41492.971 ops/s
[info]                  ·gc.alloc.rate:      374.776 MB/sec
[info]                  ·gc.alloc.rate.norm: 14216.010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 41192.654 ops/s
[info]                  ·gc.alloc.rate:            372.100 MB/sec
[info]                  ·gc.alloc.rate.norm:       14216.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.462 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 25882.282 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala":
[info]   41180.626 ±(99.9%) 1060.442 ops/s [Average]
[info]   (min, avg, max) = (40773.914, 41180.626, 41492.971), stdev = 275.394
[info]   CI (99.9%): [40120.184, 42241.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   371.986 ±(99.9%) 9.686 MB/sec [Average]
[info]   (min, avg, max) = (368.261, 371.986, 374.776), stdev = 2.515
[info]   CI (99.9%): [362.300, 381.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   14216.010 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (14216.010, 14216.010, 14216.010), stdev = 0.001
[info]   CI (99.9%): [14216.010, 14216.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   406.459 ±(99.9%) 1428.760 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 406.459, 677.462), stdev = 371.044
[info]   CI (99.9%): [≈ 0, 1835.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   15596.412 ±(99.9%) 54824.891 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15596.412, 26149.476), stdev = 14237.850
[info]   CI (99.9%): [≈ 0, 70421.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 5.000), stdev = 2.588
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 19.06% complete, ETA 01:31:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 35964.060 ops/s
[info] # Warmup Iteration   2: 44065.165 ops/s
[info] # Warmup Iteration   3: 44716.241 ops/s
[info] # Warmup Iteration   4: 44614.192 ops/s
[info] # Warmup Iteration   5: 44839.057 ops/s
[info] Iteration   1: 44741.464 ops/s
[info]                  ·gc.alloc.rate:            393.137 MB/sec
[info]                  ·gc.alloc.rate.norm:       13832.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.293 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23829.675 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 44951.336 ops/s
[info]                  ·gc.alloc.rate:      395.019 MB/sec
[info]                  ·gc.alloc.rate.norm: 13832.009 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 44800.293 ops/s
[info]                  ·gc.alloc.rate:            393.648 MB/sec
[info]                  ·gc.alloc.rate.norm:       13832.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.311 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23799.362 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 44749.235 ops/s
[info]                  ·gc.alloc.rate:                   393.310 MB/sec
[info]                  ·gc.alloc.rate.norm:              13832.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:             677.501 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        23826.481 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 23.428 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 44884.342 ops/s
[info]                  ·gc.alloc.rate:      394.429 MB/sec
[info]                  ·gc.alloc.rate.norm: 13832.010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala":
[info]   44825.334 ±(99.9%) 348.749 ops/s [Average]
[info]   (min, avg, max) = (44741.464, 44825.334, 44951.336), stdev = 90.569
[info]   CI (99.9%): [44476.585, 45174.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   393.909 ±(99.9%) 3.061 MB/sec [Average]
[info]   (min, avg, max) = (393.137, 393.909, 395.019), stdev = 0.795
[info]   CI (99.9%): [390.848, 396.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   13832.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13832.009, 13832.009, 13832.010), stdev = 0.001
[info]   CI (99.9%): [13832.008, 13832.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   406.421 ±(99.9%) 1428.626 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 406.421, 677.501), stdev = 371.010
[info]   CI (99.9%): [≈ 0, 1835.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   14291.103 ±(99.9%) 50235.263 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14291.103, 23829.675), stdev = 13045.938
[info]   CI (99.9%): [≈ 0, 64526.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   4.686 ±(99.9%) 40.345 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.686, 23.428), stdev = 10.477
[info]   CI (99.9%): [≈ 0, 45.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 19.29% complete, ETA 01:31:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37228.052 ops/s
[info] # Warmup Iteration   2: 44574.409 ops/s
[info] # Warmup Iteration   3: 43563.149 ops/s
[info] # Warmup Iteration   4: 44772.424 ops/s
[info] # Warmup Iteration   5: 44450.569 ops/s
[info] Iteration   1: 44582.082 ops/s
[info]                  ·gc.alloc.rate:      340.861 MB/sec
[info]                  ·gc.alloc.rate.norm: 12032.009 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 44393.749 ops/s
[info]                  ·gc.alloc.rate:            339.415 MB/sec
[info]                  ·gc.alloc.rate.norm:       12032.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.488 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 24016.436 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 44719.443 ops/s
[info]                  ·gc.alloc.rate:      341.934 MB/sec
[info]                  ·gc.alloc.rate.norm: 12032.009 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 44487.556 ops/s
[info]                  ·gc.alloc.rate:            340.054 MB/sec
[info]                  ·gc.alloc.rate.norm:       12032.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.359 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23966.778 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 44733.652 ops/s
[info]                  ·gc.alloc.rate:      341.940 MB/sec
[info]                  ·gc.alloc.rate.norm: 12032.009 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc":
[info]   44583.296 ±(99.9%) 565.398 ops/s [Average]
[info]   (min, avg, max) = (44393.749, 44583.296, 44733.652), stdev = 146.832
[info]   CI (99.9%): [44017.898, 45148.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   340.841 ±(99.9%) 4.330 MB/sec [Average]
[info]   (min, avg, max) = (339.415, 340.841, 341.940), stdev = 1.124
[info]   CI (99.9%): [336.511, 345.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   12032.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (12032.009, 12032.009, 12032.009), stdev = 0.001
[info]   CI (99.9%): [12032.009, 12032.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   270.969 ±(99.9%) 1428.743 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 270.969, 677.488), stdev = 371.040
[info]   CI (99.9%): [≈ 0, 1699.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   9596.643 ±(99.9%) 50600.372 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9596.643, 24016.436), stdev = 13140.756
[info]   CI (99.9%): [≈ 0, 60197.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 4.000), stdev = 1.949
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 19.53% complete, ETA 01:30:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15735.009 ops/s
[info] # Warmup Iteration   2: 20580.597 ops/s
[info] # Warmup Iteration   3: 19416.986 ops/s
[info] # Warmup Iteration   4: 19575.242 ops/s
[info] # Warmup Iteration   5: 19608.220 ops/s
[info] Iteration   1: 19536.335 ops/s
[info]                  ·gc.alloc.rate:            732.785 MB/sec
[info]                  ·gc.alloc.rate.norm:       59040.026 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.037 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 54628.985 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 19906.585 ops/s
[info]                  ·gc.alloc.rate:                   746.651 MB/sec
[info]                  ·gc.alloc.rate.norm:              59040.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:             678.028 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        53613.780 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 52.666 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 20082.246 ops/s
[info]                  ·gc.alloc.rate:            753.241 MB/sec
[info]                  ·gc.alloc.rate.norm:       59040.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.685 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 53196.204 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 20099.786 ops/s
[info]                  ·gc.alloc.rate:            754.035 MB/sec
[info]                  ·gc.alloc.rate.norm:       59040.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.125 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 53096.417 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 19940.352 ops/s
[info]                  ·gc.alloc.rate:            747.951 MB/sec
[info]                  ·gc.alloc.rate.norm:       59040.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.051 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 53522.381 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce":
[info]   19913.061 ±(99.9%) 874.273 ops/s [Average]
[info]   (min, avg, max) = (19536.335, 19913.061, 20099.786), stdev = 227.046
[info]   CI (99.9%): [19038.788, 20787.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate":
[info]   746.933 ±(99.9%) 32.872 MB/sec [Average]
[info]   (min, avg, max) = (732.785, 746.933, 754.035), stdev = 8.537
[info]   CI (99.9%): [714.061, 779.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   59040.022 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (59040.020, 59040.022, 59040.026), stdev = 0.003
[info]   CI (99.9%): [59040.012, 59040.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   678.185 ±(99.9%) 1.085 MB/sec [Average]
[info]   (min, avg, max) = (678.028, 678.185, 678.685), stdev = 0.282
[info]   CI (99.9%): [677.100, 679.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   53611.553 ±(99.9%) 2343.050 B/op [Average]
[info]   (min, avg, max) = (53096.417, 53611.553, 54628.985), stdev = 608.483
[info]   CI (99.9%): [51268.503, 55954.604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   10.533 ±(99.9%) 90.694 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.533, 52.666), stdev = 23.553
[info]   CI (99.9%): [≈ 0, 101.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 19.76% complete, ETA 01:30:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11219.106 ops/s
[info] # Warmup Iteration   2: 18588.976 ops/s
[info] # Warmup Iteration   3: 18733.119 ops/s
[info] # Warmup Iteration   4: 18835.466 ops/s
[info] # Warmup Iteration   5: 17944.458 ops/s
[info] Iteration   1: 18725.176 ops/s
[info]                  ·gc.alloc.rate:            531.525 MB/sec
[info]                  ·gc.alloc.rate.norm:       44680.027 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.355 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 56938.533 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 18814.928 ops/s
[info]                  ·gc.alloc.rate:                   534.113 MB/sec
[info]                  ·gc.alloc.rate.norm:              44678.282 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.759 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        56610.512 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 55.719 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 18882.845 ops/s
[info]                  ·gc.alloc.rate:      536.265 MB/sec
[info]                  ·gc.alloc.rate.norm: 44680.023 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 18627.424 ops/s
[info]                  ·gc.alloc.rate:            528.909 MB/sec
[info]                  ·gc.alloc.rate.norm:       44680.024 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.531 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 57234.961 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 18743.613 ops/s
[info]                  ·gc.alloc.rate:                   532.077 MB/sec
[info]                  ·gc.alloc.rate.norm:              44680.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.670 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        56821.869 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 55.927 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala":
[info]   18758.797 ±(99.9%) 371.135 ops/s [Average]
[info]   (min, avg, max) = (18627.424, 18758.797, 18882.845), stdev = 96.383
[info]   CI (99.9%): [18387.662, 19129.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   532.578 ±(99.9%) 10.680 MB/sec [Average]
[info]   (min, avg, max) = (528.909, 532.578, 536.265), stdev = 2.774
[info]   CI (99.9%): [521.898, 543.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   44679.676 ±(99.9%) 3.000 B/op [Average]
[info]   (min, avg, max) = (44678.282, 44679.676, 44680.027), stdev = 0.779
[info]   CI (99.9%): [44676.676, 44682.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   541.663 ±(99.9%) 1165.971 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 541.663, 677.531), stdev = 302.799
[info]   CI (99.9%): [≈ 0, 1707.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   45521.175 ±(99.9%) 97991.612 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 45521.175, 57234.961), stdev = 25448.110
[info]   CI (99.9%): [≈ 0, 143512.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   22.329 ±(99.9%) 117.736 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 22.329, 55.927), stdev = 30.576
[info]   CI (99.9%): [≈ 0, 140.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.600, 5.000), stdev = 2.074
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 20.00% complete, ETA 01:30:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 70400.880 ops/s
[info] # Warmup Iteration   2: 74227.627 ops/s
[info] # Warmup Iteration   3: 74333.887 ops/s
[info] # Warmup Iteration   4: 73548.943 ops/s
[info] # Warmup Iteration   5: 74531.003 ops/s
[info] Iteration   1: 74359.479 ops/s
[info]                  ·gc.alloc.rate:      193.528 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 74217.272 ops/s
[info]                  ·gc.alloc.rate:            193.173 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      679.544 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14408.950 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 74457.759 ops/s
[info]                  ·gc.alloc.rate:      193.768 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 74317.887 ops/s
[info]                  ·gc.alloc.rate:      193.389 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 74325.467 ops/s
[info]                  ·gc.alloc.rate:      193.408 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala":
[info]   74335.573 ±(99.9%) 332.981 ops/s [Average]
[info]   (min, avg, max) = (74217.272, 74335.573, 74457.759), stdev = 86.474
[info]   CI (99.9%): [74002.592, 74668.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   193.453 ±(99.9%) 0.838 MB/sec [Average]
[info]   (min, avg, max) = (193.173, 193.453, 193.768), stdev = 0.218
[info]   CI (99.9%): [192.615, 194.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.005, 4096.005, 4096.005), stdev = 0.001
[info]   CI (99.9%): [4096.005, 4096.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   135.909 ±(99.9%) 1170.216 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 135.909, 679.544), stdev = 303.901
[info]   CI (99.9%): [≈ 0, 1306.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   2881.790 ±(99.9%) 24813.081 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2881.790, 14408.950), stdev = 6443.878
[info]   CI (99.9%): [≈ 0, 27694.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count":
[info]   1.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.200, 1.000), stdev = 0.447
[info]   CI (99.9%): [1.000, 1.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time":
[info]   3.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 3.000), stdev = 1.342
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 20.24% complete, ETA 01:30:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8872.418 ops/s
[info] # Warmup Iteration   2: 15524.042 ops/s
[info] # Warmup Iteration   3: 15894.645 ops/s
[info] # Warmup Iteration   4: 15829.168 ops/s
[info] # Warmup Iteration   5: 15867.215 ops/s
[info] Iteration   1: 15530.788 ops/s
[info]                  ·gc.alloc.rate:            1006.988 MB/sec
[info]                  ·gc.alloc.rate.norm:       102064.026 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.625 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 137299.059 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   2: 15867.213 ops/s
[info]                  ·gc.alloc.rate:            1028.858 MB/sec
[info]                  ·gc.alloc.rate.norm:       102064.032 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.371 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 67196.080 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 15787.625 ops/s
[info]                  ·gc.alloc.rate:            1023.616 MB/sec
[info]                  ·gc.alloc.rate.norm:       102064.028 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.584 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 135064.504 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 15874.081 ops/s
[info]                  ·gc.alloc.rate:            1029.640 MB/sec
[info]                  ·gc.alloc.rate.norm:       102064.026 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.544 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 67162.224 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 15877.836 ops/s
[info]                  ·gc.alloc.rate:            1029.633 MB/sec
[info]                  ·gc.alloc.rate.norm:       102064.026 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.739 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 134290.617 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson":
[info]   15787.508 ±(99.9%) 570.857 ops/s [Average]
[info]   (min, avg, max) = (15530.788, 15787.508, 15877.836), stdev = 148.250
[info]   CI (99.9%): [15216.651, 16358.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1023.747 ±(99.9%) 37.352 MB/sec [Average]
[info]   (min, avg, max) = (1006.988, 1023.747, 1029.640), stdev = 9.700
[info]   CI (99.9%): [986.395, 1061.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   102064.028 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (102064.026, 102064.028, 102064.032), stdev = 0.003
[info]   CI (99.9%): [102064.017, 102064.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1083.773 ±(99.9%) 1428.255 MB/sec [Average]
[info]   (min, avg, max) = (677.371, 1083.773, 1354.739), stdev = 370.913
[info]   CI (99.9%): [≈ 0, 2512.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   108202.497 ±(99.9%) 144265.566 B/op [Average]
[info]   (min, avg, max) = (67162.224, 108202.497, 137299.059), stdev = 37465.309
[info]   CI (99.9%): [≈ 0, 252468.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 8.200, 14.000), stdev = 3.962
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 20.47% complete, ETA 01:29:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 43006.387 ops/s
[info] # Warmup Iteration   2: 57559.692 ops/s
[info] # Warmup Iteration   3: 58805.335 ops/s
[info] # Warmup Iteration   4: 58944.657 ops/s
[info] # Warmup Iteration   5: 58326.174 ops/s
[info] Iteration   1: 58935.631 ops/s
[info]                  ·gc.alloc.rate:            892.938 MB/sec
[info]                  ·gc.alloc.rate.norm:       23848.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.086 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18109.875 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 58992.179 ops/s
[info]                  ·gc.alloc.rate:            893.773 MB/sec
[info]                  ·gc.alloc.rate.norm:       23848.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.076 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18092.686 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 58500.572 ops/s
[info]                  ·gc.alloc.rate:            886.708 MB/sec
[info]                  ·gc.alloc.rate.norm:       23848.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.746 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 36489.663 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 58914.250 ops/s
[info]                  ·gc.alloc.rate:            892.669 MB/sec
[info]                  ·gc.alloc.rate.norm:       23848.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.135 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18116.637 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 58935.047 ops/s
[info]                  ·gc.alloc.rate:            892.967 MB/sec
[info]                  ·gc.alloc.rate.norm:       23848.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.108 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18109.875 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce":
[info]   58855.536 ±(99.9%) 772.185 ops/s [Average]
[info]   (min, avg, max) = (58500.572, 58855.536, 58992.179), stdev = 200.534
[info]   CI (99.9%): [58083.351, 59627.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate":
[info]   891.811 ±(99.9%) 11.099 MB/sec [Average]
[info]   (min, avg, max) = (886.708, 891.811, 893.773), stdev = 2.882
[info]   CI (99.9%): [880.712, 902.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   23848.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (23848.007, 23848.007, 23848.007), stdev = 0.001
[info]   CI (99.9%): [23848.006, 23848.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   813.830 ±(99.9%) 1168.667 MB/sec [Average]
[info]   (min, avg, max) = (678.076, 813.830, 1356.746), stdev = 303.499
[info]   CI (99.9%): [≈ 0, 1982.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   21783.747 ±(99.9%) 31655.612 B/op [Average]
[info]   (min, avg, max) = (18092.686, 21783.747, 36489.663), stdev = 8220.862
[info]   CI (99.9%): [≈ 0, 53439.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 8.000), stdev = 1.949
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 20.71% complete, ETA 01:29:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 55754.688 ops/s
[info] # Warmup Iteration   2: 90400.130 ops/s
[info] # Warmup Iteration   3: 89984.996 ops/s
[info] # Warmup Iteration   4: 90759.273 ops/s
[info] # Warmup Iteration   5: 89533.053 ops/s
[info] Iteration   1: 90720.439 ops/s
[info]                  ·gc.alloc.rate:            1075.634 MB/sec
[info]                  ·gc.alloc.rate.norm:       18664.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.346 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11753.056 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 90362.859 ops/s
[info]                  ·gc.alloc.rate:            1071.550 MB/sec
[info]                  ·gc.alloc.rate.norm:       18664.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.864 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23598.703 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 90221.897 ops/s
[info]                  ·gc.alloc.rate:            1069.724 MB/sec
[info]                  ·gc.alloc.rate.norm:       18664.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.684 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23635.839 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 90741.061 ops/s
[info]                  ·gc.alloc.rate:            1075.960 MB/sec
[info]                  ·gc.alloc.rate.norm:       18664.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.350 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11749.560 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 92013.286 ops/s
[info]                  ·gc.alloc.rate:                   1091.039 MB/sec
[info]                  ·gc.alloc.rate.norm:              18664.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.787 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        23175.846 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 68.365 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala":
[info]   90811.908 ±(99.9%) 2727.205 ops/s [Average]
[info]   (min, avg, max) = (90221.897, 90811.908, 92013.286), stdev = 708.246
[info]   CI (99.9%): [88084.703, 93539.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1076.782 ±(99.9%) 32.357 MB/sec [Average]
[info]   (min, avg, max) = (1069.724, 1076.782, 1091.039), stdev = 8.403
[info]   CI (99.9%): [1044.424, 1109.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   18664.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (18664.004, 18664.005, 18664.005), stdev = 0.001
[info]   CI (99.9%): [18664.004, 18664.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1083.806 ±(99.9%) 1428.758 MB/sec [Average]
[info]   (min, avg, max) = (677.346, 1083.806, 1354.864), stdev = 371.044
[info]   CI (99.9%): [≈ 0, 2512.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   18782.601 ±(99.9%) 24725.777 B/op [Average]
[info]   (min, avg, max) = (11749.560, 18782.601, 23635.839), stdev = 6421.206
[info]   CI (99.9%): [≈ 0, 43508.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   13.673 ±(99.9%) 117.729 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13.673, 68.365), stdev = 30.574
[info]   CI (99.9%): [≈ 0, 131.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.400, 9.000), stdev = 2.191
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 20.94% complete, ETA 01:29:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 186340.338 ops/s
[info] # Warmup Iteration   2: 206508.103 ops/s
[info] # Warmup Iteration   3: 206888.594 ops/s
[info] # Warmup Iteration   4: 211213.242 ops/s
[info] # Warmup Iteration   5: 210452.332 ops/s
[info] Iteration   1: 211230.694 ops/s
[info]                  ·gc.alloc.rate:      334.928 MB/sec
[info]                  ·gc.alloc.rate.norm: 2496.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 207928.834 ops/s
[info]                  ·gc.alloc.rate:            329.753 MB/sec
[info]                  ·gc.alloc.rate.norm:       2496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.128 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5132.960 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 209032.496 ops/s
[info]                  ·gc.alloc.rate:      331.501 MB/sec
[info]                  ·gc.alloc.rate.norm: 2496.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 209117.105 ops/s
[info]                  ·gc.alloc.rate:            331.598 MB/sec
[info]                  ·gc.alloc.rate.norm:       2496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.366 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5098.668 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 210971.246 ops/s
[info]                  ·gc.alloc.rate:      334.592 MB/sec
[info]                  ·gc.alloc.rate.norm: 2496.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala":
[info]   209656.075 ±(99.9%) 5401.824 ops/s [Average]
[info]   (min, avg, max) = (207928.834, 209656.075, 211230.694), stdev = 1402.836
[info]   CI (99.9%): [204254.252, 215057.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   332.474 ±(99.9%) 8.529 MB/sec [Average]
[info]   (min, avg, max) = (329.753, 332.474, 334.928), stdev = 2.215
[info]   CI (99.9%): [323.945, 341.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2496.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2496.002, 2496.002, 2496.002), stdev = 0.001
[info]   CI (99.9%): [2496.002, 2496.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   271.099 ±(99.9%) 1429.426 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 271.099, 678.128), stdev = 371.217
[info]   CI (99.9%): [≈ 0, 1700.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   2046.326 ±(99.9%) 10789.786 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2046.326, 5132.960), stdev = 2802.073
[info]   CI (99.9%): [≈ 0, 12836.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 4.000), stdev = 1.949
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 21.18% complete, ETA 01:29:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 211622.567 ops/s
[info] # Warmup Iteration   2: 238502.895 ops/s
[info] # Warmup Iteration   3: 239486.961 ops/s
[info] # Warmup Iteration   4: 238912.105 ops/s
[info] # Warmup Iteration   5: 239342.888 ops/s
[info] Iteration   1: 238922.733 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 239201.823 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 239524.209 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 238971.897 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 239052.154 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc":
[info]   239134.563 ±(99.9%) 932.285 ops/s [Average]
[info]   (min, avg, max) = (238922.733, 239134.563, 239524.209), stdev = 242.111
[info]   CI (99.9%): [238202.279, 240066.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
[info]   CI (99.9%): [0.002, 0.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 21.41% complete, ETA 01:28:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 54792.308 ops/s
[info] # Warmup Iteration   2: 79749.893 ops/s
[info] # Warmup Iteration   3: 80081.675 ops/s
[info] # Warmup Iteration   4: 80936.638 ops/s
[info] # Warmup Iteration   5: 79965.716 ops/s
[info] Iteration   1: 79985.973 ops/s
[info]                  ·gc.alloc.rate:            1091.084 MB/sec
[info]                  ·gc.alloc.rate.norm:       21472.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.710 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26660.045 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 81123.249 ops/s
[info]                  ·gc.alloc.rate:            1106.523 MB/sec
[info]                  ·gc.alloc.rate.norm:       21472.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.314 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13143.224 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 80544.191 ops/s
[info]                  ·gc.alloc.rate:            1098.629 MB/sec
[info]                  ·gc.alloc.rate.norm:       21472.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.630 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26475.379 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 81086.746 ops/s
[info]                  ·gc.alloc.rate:            1106.191 MB/sec
[info]                  ·gc.alloc.rate.norm:       21472.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.771 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26297.144 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 81533.832 ops/s
[info]                  ·gc.alloc.rate:            1112.262 MB/sec
[info]                  ·gc.alloc.rate.norm:       21472.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.362 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13076.341 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson":
[info]   80854.798 ±(99.9%) 2309.011 ops/s [Average]
[info]   (min, avg, max) = (79985.973, 80854.798, 81533.832), stdev = 599.643
[info]   CI (99.9%): [78545.787, 83163.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1102.938 ±(99.9%) 31.604 MB/sec [Average]
[info]   (min, avg, max) = (1091.084, 1102.938, 1112.262), stdev = 8.208
[info]   CI (99.9%): [1071.333, 1134.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   21472.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (21472.005, 21472.005, 21472.005), stdev = 0.001
[info]   CI (99.9%): [21472.004, 21472.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1083.757 ±(99.9%) 1428.622 MB/sec [Average]
[info]   (min, avg, max) = (677.314, 1083.757, 1354.771), stdev = 371.009
[info]   CI (99.9%): [≈ 0, 2512.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   21130.427 ±(99.9%) 28198.169 B/op [Average]
[info]   (min, avg, max) = (13076.341, 21130.427, 26660.045), stdev = 7322.975
[info]   CI (99.9%): [≈ 0, 49328.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.800, 9.000), stdev = 2.168
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 21.65% complete, ETA 01:28:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19501.368 ops/s
[info] # Warmup Iteration   2: 27235.028 ops/s
[info] # Warmup Iteration   3: 27518.702 ops/s
[info] # Warmup Iteration   4: 27144.338 ops/s
[info] # Warmup Iteration   5: 27650.544 ops/s
[info] Iteration   1: 27586.476 ops/s
[info]                  ·gc.alloc.rate:      573.847 MB/sec
[info]                  ·gc.alloc.rate.norm: 32736.015 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 27666.790 ops/s
[info]                  ·gc.alloc.rate:            575.507 MB/sec
[info]                  ·gc.alloc.rate.norm:       32736.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.159 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 38575.107 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 27730.167 ops/s
[info]                  ·gc.alloc.rate:            576.739 MB/sec
[info]                  ·gc.alloc.rate.norm:       32736.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.067 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 38487.484 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 27701.449 ops/s
[info]                  ·gc.alloc.rate:            576.120 MB/sec
[info]                  ·gc.alloc.rate.norm:       32736.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.049 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 38527.769 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 27662.580 ops/s
[info]                  ·gc.alloc.rate:            575.320 MB/sec
[info]                  ·gc.alloc.rate.norm:       32736.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.062 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 38582.079 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce":
[info]   27669.492 ±(99.9%) 207.806 ops/s [Average]
[info]   (min, avg, max) = (27586.476, 27669.492, 27730.167), stdev = 53.967
[info]   CI (99.9%): [27461.687, 27877.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   575.507 ±(99.9%) 4.166 MB/sec [Average]
[info]   (min, avg, max) = (573.847, 575.507, 576.739), stdev = 1.082
[info]   CI (99.9%): [571.340, 579.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   32736.015 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (32736.015, 32736.015, 32736.016), stdev = 0.001
[info]   CI (99.9%): [32736.013, 32736.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   542.468 ±(99.9%) 1167.702 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 542.468, 678.159), stdev = 303.249
[info]   CI (99.9%): [≈ 0, 1710.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   30834.488 ±(99.9%) 66373.724 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 30834.488, 38582.079), stdev = 17237.045
[info]   CI (99.9%): [≈ 0, 97208.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 4.000), stdev = 1.732
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 21.88% complete, ETA 01:28:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18306.785 ops/s
[info] # Warmup Iteration   2: 28141.097 ops/s
[info] # Warmup Iteration   3: 27927.631 ops/s
[info] # Warmup Iteration   4: 28150.546 ops/s
[info] # Warmup Iteration   5: 27749.572 ops/s
[info] Iteration   1: 27831.473 ops/s
[info]                  ·gc.alloc.rate:            365.806 MB/sec
[info]                  ·gc.alloc.rate.norm:       20688.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.402 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 38310.166 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 28073.932 ops/s
[info]                  ·gc.alloc.rate:      369.011 MB/sec
[info]                  ·gc.alloc.rate.norm: 20688.015 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 28052.973 ops/s
[info]                  ·gc.alloc.rate:                   368.705 MB/sec
[info]                  ·gc.alloc.rate.norm:              20688.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.701 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        37969.678 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 37.372 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 28179.108 ops/s
[info]                  ·gc.alloc.rate:      370.339 MB/sec
[info]                  ·gc.alloc.rate.norm: 20688.014 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 28053.753 ops/s
[info]                  ·gc.alloc.rate:            368.812 MB/sec
[info]                  ·gc.alloc.rate.norm:       20688.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.515 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 38004.340 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala":
[info]   28038.248 ±(99.9%) 488.320 ops/s [Average]
[info]   (min, avg, max) = (27831.473, 28038.248, 28179.108), stdev = 126.815
[info]   CI (99.9%): [27549.928, 28526.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   368.535 ±(99.9%) 6.396 MB/sec [Average]
[info]   (min, avg, max) = (365.806, 368.535, 370.339), stdev = 1.661
[info]   CI (99.9%): [362.139, 374.930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   20688.015 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (20688.014, 20688.015, 20688.016), stdev = 0.001
[info]   CI (99.9%): [20688.013, 20688.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   406.324 ±(99.9%) 1428.285 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 406.324, 677.515), stdev = 370.921
[info]   CI (99.9%): [≈ 0, 1834.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   22856.837 ±(99.9%) 80346.622 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 22856.837, 38310.166), stdev = 20865.763
[info]   CI (99.9%): [≈ 0, 103203.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   7.474 ±(99.9%) 64.356 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.474, 37.372), stdev = 16.713
[info]   CI (99.9%): [≈ 0, 71.831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 5.000), stdev = 2.588
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 22.12% complete, ETA 01:28:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 105246.167 ops/s
[info] # Warmup Iteration   2: 115704.438 ops/s
[info] # Warmup Iteration   3: 114859.363 ops/s
[info] # Warmup Iteration   4: 120554.024 ops/s
[info] # Warmup Iteration   5: 119573.663 ops/s
[info] Iteration   1: 119309.652 ops/s
[info]                  ·gc.alloc.rate:            465.808 MB/sec
[info]                  ·gc.alloc.rate.norm:       6144.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.200 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8945.440 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 121502.391 ops/s
[info]                  ·gc.alloc.rate:      474.348 MB/sec
[info]                  ·gc.alloc.rate.norm: 6144.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 120904.604 ops/s
[info]                  ·gc.alloc.rate:            472.139 MB/sec
[info]                  ·gc.alloc.rate.norm:       6144.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.361 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8827.594 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 120851.768 ops/s
[info]                  ·gc.alloc.rate:            471.847 MB/sec
[info]                  ·gc.alloc.rate.norm:       6144.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.233 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8831.392 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 118805.052 ops/s
[info]                  ·gc.alloc.rate:      463.737 MB/sec
[info]                  ·gc.alloc.rate.norm: 6144.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala":
[info]   120274.693 ±(99.9%) 4444.198 ops/s [Average]
[info]   (min, avg, max) = (118805.052, 120274.693, 121502.391), stdev = 1154.144
[info]   CI (99.9%): [115830.495, 124718.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   469.576 ±(99.9%) 17.518 MB/sec [Average]
[info]   (min, avg, max) = (463.737, 469.576, 474.348), stdev = 4.549
[info]   CI (99.9%): [452.058, 487.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6144.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6144.003, 6144.003, 6144.004), stdev = 0.001
[info]   CI (99.9%): [6144.003, 6144.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   406.959 ±(99.9%) 1430.518 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 406.959, 678.361), stdev = 371.501
[info]   CI (99.9%): [≈ 0, 1837.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   5320.885 ±(99.9%) 18704.550 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5320.885, 8945.440), stdev = 4857.512
[info]   CI (99.9%): [≈ 0, 24025.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 22.35% complete, ETA 01:27:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9382.221 ops/s
[info] # Warmup Iteration   2: 20481.244 ops/s
[info] # Warmup Iteration   3: 20610.275 ops/s
[info] # Warmup Iteration   4: 20690.660 ops/s
[info] # Warmup Iteration   5: 20633.296 ops/s
[info] Iteration   1: 20612.915 ops/s
[info]                  ·gc.alloc.rate:            1138.024 MB/sec
[info]                  ·gc.alloc.rate.norm:       86904.025 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.015 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 103397.924 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 20292.334 ops/s
[info]                  ·gc.alloc.rate:                   1120.443 MB/sec
[info]                  ·gc.alloc.rate.norm:              86904.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.757 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        52490.797 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 51.664 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 20541.636 ops/s
[info]                  ·gc.alloc.rate:            1134.182 MB/sec
[info]                  ·gc.alloc.rate.norm:       86904.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.172 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 103760.283 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   4: 20543.480 ops/s
[info]                  ·gc.alloc.rate:                   1134.282 MB/sec
[info]                  ·gc.alloc.rate.norm:              86904.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.160 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        103750.183 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 51.033 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 20640.696 ops/s
[info]                  ·gc.alloc.rate:                   1139.632 MB/sec
[info]                  ·gc.alloc.rate.norm:              86904.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.744 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        51605.949 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 355.553 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson":
[info]   20526.212 ±(99.9%) 530.282 ops/s [Average]
[info]   (min, avg, max) = (20292.334, 20526.212, 20640.696), stdev = 137.713
[info]   CI (99.9%): [19995.930, 21056.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1133.313 ±(99.9%) 29.165 MB/sec [Average]
[info]   (min, avg, max) = (1120.443, 1133.313, 1139.632), stdev = 7.574
[info]   CI (99.9%): [1104.147, 1162.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   86904.021 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (86904.020, 86904.021, 86904.025), stdev = 0.002
[info]   CI (99.9%): [86904.013, 86904.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1083.170 ±(99.9%) 1428.619 MB/sec [Average]
[info]   (min, avg, max) = (676.744, 1083.170, 1354.172), stdev = 371.008
[info]   CI (99.9%): [≈ 0, 2511.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   83001.027 ±(99.9%) 108811.060 B/op [Average]
[info]   (min, avg, max) = (51605.949, 83001.027, 103760.283), stdev = 28257.887
[info]   CI (99.9%): [≈ 0, 191812.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.199 ±(99.9%) 7.565 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.199, 4.663), stdev = 1.965
[info]   CI (99.9%): [≈ 0, 8.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   91.650 ±(99.9%) 576.610 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 91.650, 355.553), stdev = 149.744
[info]   CI (99.9%): [≈ 0, 668.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 8.000, 11.000), stdev = 3.240
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 22.59% complete, ETA 01:27:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 138930.619 ops/s
[info] # Warmup Iteration   2: 178124.240 ops/s
[info] # Warmup Iteration   3: 180179.666 ops/s
[info] # Warmup Iteration   4: 181694.231 ops/s
[info] # Warmup Iteration   5: 181917.349 ops/s
[info] Iteration   1: 181182.395 ops/s
[info]                  ·gc.alloc.rate:            632.614 MB/sec
[info]                  ·gc.alloc.rate.norm:       5496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.047 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5890.714 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 180416.382 ops/s
[info]                  ·gc.alloc.rate:            630.245 MB/sec
[info]                  ·gc.alloc.rate.norm:       5496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.357 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5915.557 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 180572.872 ops/s
[info]                  ·gc.alloc.rate:            630.512 MB/sec
[info]                  ·gc.alloc.rate.norm:       5496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.061 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5910.480 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 181618.689 ops/s
[info]                  ·gc.alloc.rate:            634.196 MB/sec
[info]                  ·gc.alloc.rate.norm:       5496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.074 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5876.251 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 182303.254 ops/s
[info]                  ·gc.alloc.rate:            636.627 MB/sec
[info]                  ·gc.alloc.rate.norm:       5496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.145 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5854.432 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce":
[info]   181218.718 ±(99.9%) 2981.685 ops/s [Average]
[info]   (min, avg, max) = (180416.382, 181218.718, 182303.254), stdev = 774.334
[info]   CI (99.9%): [178237.033, 184200.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   632.839 ±(99.9%) 10.257 MB/sec [Average]
[info]   (min, avg, max) = (630.245, 632.839, 636.627), stdev = 2.664
[info]   CI (99.9%): [622.582, 643.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5496.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5496.002, 5496.002, 5496.002), stdev = 0.001
[info]   CI (99.9%): [5496.002, 5496.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   678.137 ±(99.9%) 0.496 MB/sec [Average]
[info]   (min, avg, max) = (678.047, 678.137, 678.357), stdev = 0.129
[info]   CI (99.9%): [677.641, 678.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   5889.487 ±(99.9%) 96.762 B/op [Average]
[info]   (min, avg, max) = (5854.432, 5889.487, 5915.557), stdev = 25.129
[info]   CI (99.9%): [5792.724, 5986.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 22.82% complete, ETA 01:27:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 185528.452 ops/s
[info] # Warmup Iteration   2: 271127.541 ops/s
[info] # Warmup Iteration   3: 274310.386 ops/s
[info] # Warmup Iteration   4: 275375.783 ops/s
[info] # Warmup Iteration   5: 275377.815 ops/s
[info] Iteration   1: 273476.504 ops/s
[info]                  ·gc.alloc.rate:            276.648 MB/sec
[info]                  ·gc.alloc.rate.norm:       1592.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.465 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3898.551 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 274978.068 ops/s
[info]                  ·gc.alloc.rate:      278.135 MB/sec
[info]                  ·gc.alloc.rate.norm: 1592.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 274073.146 ops/s
[info]                  ·gc.alloc.rate:            277.229 MB/sec
[info]                  ·gc.alloc.rate.norm:       1592.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.447 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3890.274 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 275959.192 ops/s
[info]                  ·gc.alloc.rate:      279.129 MB/sec
[info]                  ·gc.alloc.rate.norm: 1592.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 276240.864 ops/s
[info]                  ·gc.alloc.rate:      279.423 MB/sec
[info]                  ·gc.alloc.rate.norm: 1592.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala":
[info]   274945.555 ±(99.9%) 4566.526 ops/s [Average]
[info]   (min, avg, max) = (273476.504, 274945.555, 276240.864), stdev = 1185.912
[info]   CI (99.9%): [270379.029, 279512.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   278.113 ±(99.9%) 4.588 MB/sec [Average]
[info]   (min, avg, max) = (276.648, 278.113, 279.423), stdev = 1.191
[info]   CI (99.9%): [273.525, 282.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1592.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1592.001, 1592.002, 1592.002), stdev = 0.001
[info]   CI (99.9%): [1592.001, 1592.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   270.982 ±(99.9%) 1428.812 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 270.982, 677.465), stdev = 371.058
[info]   CI (99.9%): [≈ 0, 1699.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1557.765 ±(99.9%) 8213.652 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1557.765, 3898.551), stdev = 2133.059
[info]   CI (99.9%): [≈ 0, 9771.417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 5.000), stdev = 2.490
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 23.06% complete, ETA 01:26:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 428909.231 ops/s
[info] # Warmup Iteration   2: 465752.460 ops/s
[info] # Warmup Iteration   3: 472163.129 ops/s
[info] # Warmup Iteration   4: 470673.027 ops/s
[info] # Warmup Iteration   5: 472946.782 ops/s
[info] Iteration   1: 470903.219 ops/s
[info]                  ·gc.alloc.rate:            361.360 MB/sec
[info]                  ·gc.alloc.rate.norm:       1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.982 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2266.445 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 468357.085 ops/s
[info]                  ·gc.alloc.rate:      359.451 MB/sec
[info]                  ·gc.alloc.rate.norm: 1208.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 470775.712 ops/s
[info]                  ·gc.alloc.rate:            361.402 MB/sec
[info]                  ·gc.alloc.rate.norm:       1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.577 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2264.830 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 480438.398 ops/s
[info]                  ·gc.alloc.rate:      368.696 MB/sec
[info]                  ·gc.alloc.rate.norm: 1208.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 479604.009 ops/s
[info]                  ·gc.alloc.rate:            368.122 MB/sec
[info]                  ·gc.alloc.rate.norm:       1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.478 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2223.157 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala":
[info]   474015.685 ±(99.9%) 21498.634 ops/s [Average]
[info]   (min, avg, max) = (468357.085, 474015.685, 480438.398), stdev = 5583.127
[info]   CI (99.9%): [452517.051, 495514.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   363.806 ±(99.9%) 16.481 MB/sec [Average]
[info]   (min, avg, max) = (359.451, 363.806, 368.696), stdev = 4.280
[info]   CI (99.9%): [347.325, 380.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1208.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1208.001, 1208.001, 1208.001), stdev = 0.001
[info]   CI (99.9%): [1208.001, 1208.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   406.607 ±(99.9%) 1429.282 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 406.607, 677.982), stdev = 371.180
[info]   CI (99.9%): [≈ 0, 1835.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1350.886 ±(99.9%) 4749.026 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1350.886, 2266.445), stdev = 1233.307
[info]   CI (99.9%): [≈ 0, 6099.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 23.29% complete, ETA 01:26:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 456533.208 ops/s
[info] # Warmup Iteration   2: 500499.534 ops/s
[info] # Warmup Iteration   3: 499366.447 ops/s
[info] # Warmup Iteration   4: 500024.671 ops/s
[info] # Warmup Iteration   5: 488780.753 ops/s
[info] Iteration   1: 492678.660 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 499679.403 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 499875.637 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 499750.333 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 498782.276 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   498153.262 ±(99.9%) 11901.737 ops/s [Average]
[info]   (min, avg, max) = (492678.660, 498153.262, 499875.637), stdev = 3090.843
[info]   CI (99.9%): [486251.525, 510054.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 23.53% complete, ETA 01:26:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 156571.450 ops/s
[info] # Warmup Iteration   2: 283389.473 ops/s
[info] # Warmup Iteration   3: 288360.110 ops/s
[info] # Warmup Iteration   4: 285202.332 ops/s
[info] # Warmup Iteration   5: 288133.080 ops/s
[info] Iteration   1: 288606.732 ops/s
[info]                  ·gc.alloc.rate:            795.015 MB/sec
[info]                  ·gc.alloc.rate.norm:       4336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.707 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3690.749 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 287780.611 ops/s
[info]                  ·gc.alloc.rate:                   792.675 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.648 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3701.328 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.643 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 287566.422 ops/s
[info]                  ·gc.alloc.rate:            792.275 MB/sec
[info]                  ·gc.alloc.rate.norm:       4336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.403 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3707.328 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 287333.355 ops/s
[info]                  ·gc.alloc.rate:            791.509 MB/sec
[info]                  ·gc.alloc.rate.norm:       4336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.093 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7417.922 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 288689.364 ops/s
[info]                  ·gc.alloc.rate:            795.263 MB/sec
[info]                  ·gc.alloc.rate.norm:       4336.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.730 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3689.727 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson":
[info]   287995.297 ±(99.9%) 2376.640 ops/s [Average]
[info]   (min, avg, max) = (287333.355, 287995.297, 288689.364), stdev = 617.206
[info]   CI (99.9%): [285618.657, 290371.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   793.347 ±(99.9%) 6.511 MB/sec [Average]
[info]   (min, avg, max) = (791.509, 793.347, 795.263), stdev = 1.691
[info]   CI (99.9%): [786.836, 799.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4336.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4336.001, 4336.001, 4336.002), stdev = 0.001
[info]   CI (99.9%): [4336.001, 4336.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   812.316 ±(99.9%) 1166.216 MB/sec [Average]
[info]   (min, avg, max) = (676.648, 812.316, 1354.093), stdev = 302.862
[info]   CI (99.9%): [≈ 0, 1978.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   4441.411 ±(99.9%) 6407.228 B/op [Average]
[info]   (min, avg, max) = (3689.727, 4441.411, 7417.922), stdev = 1663.937
[info]   CI (99.9%): [≈ 0, 10848.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   0.729 ±(99.9%) 6.274 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.729, 3.643), stdev = 1.629
[info]   CI (99.9%): [≈ 0, 7.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 10.000), stdev = 2.387
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 23.76% complete, ETA 01:26:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28337.811 ops/s
[info] # Warmup Iteration   2: 36187.873 ops/s
[info] # Warmup Iteration   3: 36519.087 ops/s
[info] # Warmup Iteration   4: 36161.777 ops/s
[info] # Warmup Iteration   5: 36446.995 ops/s
[info] Iteration   1: 36566.925 ops/s
[info]                  ·gc.alloc.rate:            1631.245 MB/sec
[info]                  ·gc.alloc.rate.norm:       70200.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.436 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 58373.684 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 36447.690 ops/s
[info]                  ·gc.alloc.rate:                   1626.032 MB/sec
[info]                  ·gc.alloc.rate.norm:              70200.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2034.716 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        87843.947 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 143.818 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 36550.866 ops/s
[info]                  ·gc.alloc.rate:                                  1630.173 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70200.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.114 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.907 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.798 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       58686.065 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 36706.338 ops/s
[info]                  ·gc.alloc.rate:                                  1637.029 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70200.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.012 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.536 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2043.961 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       87650.272 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 36734.292 ops/s
[info]                  ·gc.alloc.rate:            1638.349 MB/sec
[info]                  ·gc.alloc.rate.norm:       70200.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.774 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 58392.164 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce":
[info]   36601.222 ±(99.9%) 455.780 ops/s [Average]
[info]   (min, avg, max) = (36447.690, 36601.222, 36734.292), stdev = 118.365
[info]   CI (99.9%): [36145.442, 37057.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate":
[info]   1632.566 ±(99.9%) 19.590 MB/sec [Average]
[info]   (min, avg, max) = (1626.032, 1632.566, 1638.349), stdev = 5.087
[info]   CI (99.9%): [1612.976, 1652.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   70200.011 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (70200.011, 70200.011, 70200.012), stdev = 0.001
[info]   CI (99.9%): [70200.010, 70200.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.025 ±(99.9%) 0.192 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.114), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.089 ±(99.9%) 8.268 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.089, 4.907), stdev = 2.147
[info]   CI (99.9%): [≈ 0, 9.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1632.137 ±(99.9%) 1431.461 MB/sec [Average]
[info]   (min, avg, max) = (1356.436, 1632.137, 2043.961), stdev = 371.746
[info]   CI (99.9%): [200.676, 3063.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   70189.227 ±(99.9%) 61720.842 B/op [Average]
[info]   (min, avg, max) = (58373.684, 70189.227, 87843.947), stdev = 16028.707
[info]   CI (99.9%): [8468.385, 131910.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.737 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   28.764 ±(99.9%) 247.663 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 28.764, 143.818), stdev = 64.317
[info]   CI (99.9%): [≈ 0, 276.427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.600, 10.000), stdev = 3.050
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 24.00% complete, ETA 01:25:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21370.375 ops/s
[info] # Warmup Iteration   2: 292378.327 ops/s
[info] # Warmup Iteration   3: 293665.188 ops/s
[info] # Warmup Iteration   4: 293082.882 ops/s
[info] # Warmup Iteration   5: 298009.181 ops/s
[info] Iteration   1: 295712.288 ops/s
[info]                  ·gc.alloc.rate:            306.643 MB/sec
[info]                  ·gc.alloc.rate.norm:       1632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.827 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3591.536 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 298994.278 ops/s
[info]                  ·gc.alloc.rate:      310.084 MB/sec
[info]                  ·gc.alloc.rate.norm: 1632.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 290733.984 ops/s
[info]                  ·gc.alloc.rate:            301.458 MB/sec
[info]                  ·gc.alloc.rate.norm:       1632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.745 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3652.859 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 298568.135 ops/s
[info]                  ·gc.alloc.rate:      309.617 MB/sec
[info]                  ·gc.alloc.rate.norm: 1632.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 297003.346 ops/s
[info]                  ·gc.alloc.rate:            307.957 MB/sec
[info]                  ·gc.alloc.rate.norm:       1632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.774 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3575.926 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava":
[info]   296202.406 ±(99.9%) 12796.742 ops/s [Average]
[info]   (min, avg, max) = (290733.984, 296202.406, 298994.278), stdev = 3323.273
[info]   CI (99.9%): [283405.664, 308999.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   307.152 ±(99.9%) 13.339 MB/sec [Average]
[info]   (min, avg, max) = (301.458, 307.152, 310.084), stdev = 3.464
[info]   CI (99.9%): [293.813, 320.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1632.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1632.001, 1632.001, 1632.001), stdev = 0.001
[info]   CI (99.9%): [1632.001, 1632.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   404.869 ±(99.9%) 1423.172 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 404.869, 674.827), stdev = 369.593
[info]   CI (99.9%): [≈ 0, 1828.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   2164.064 ±(99.9%) 7607.796 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2164.064, 3652.859), stdev = 1975.721
[info]   CI (99.9%): [≈ 0, 9771.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 5.000), stdev = 2.739
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 24.24% complete, ETA 01:25:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 60847.904 ops/s
[info] # Warmup Iteration   2: 96921.030 ops/s
[info] # Warmup Iteration   3: 96706.537 ops/s
[info] # Warmup Iteration   4: 98244.664 ops/s
[info] # Warmup Iteration   5: 98981.131 ops/s
[info] Iteration   1: 98394.552 ops/s
[info]                  ·gc.alloc.rate:            1088.274 MB/sec
[info]                  ·gc.alloc.rate.norm:       17392.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.486 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 21630.429 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 99573.415 ops/s
[info]                  ·gc.alloc.rate:            1100.432 MB/sec
[info]                  ·gc.alloc.rate.norm:       17392.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.494 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10707.598 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 98958.914 ops/s
[info]                  ·gc.alloc.rate:            1093.336 MB/sec
[info]                  ·gc.alloc.rate.norm:       17392.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.657 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 21548.912 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 99489.407 ops/s
[info]                  ·gc.alloc.rate:            1099.242 MB/sec
[info]                  ·gc.alloc.rate.norm:       17392.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.353 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10716.960 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 99062.964 ops/s
[info]                  ·gc.alloc.rate:                   1094.701 MB/sec
[info]                  ·gc.alloc.rate.norm:              17392.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.925 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        21526.293 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 63.499 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala":
[info]   99095.850 ±(99.9%) 1821.041 ops/s [Average]
[info]   (min, avg, max) = (98394.552, 99095.850, 99573.415), stdev = 472.918
[info]   CI (99.9%): [97274.810, 100916.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1095.197 ±(99.9%) 18.805 MB/sec [Average]
[info]   (min, avg, max) = (1088.274, 1095.197, 1100.432), stdev = 4.884
[info]   CI (99.9%): [1076.392, 1114.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   17392.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (17392.004, 17392.004, 17392.004), stdev = 0.001
[info]   CI (99.9%): [17392.004, 17392.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1083.583 ±(99.9%) 1427.709 MB/sec [Average]
[info]   (min, avg, max) = (677.353, 1083.583, 1354.925), stdev = 370.771
[info]   CI (99.9%): [≈ 0, 2511.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   17226.038 ±(99.9%) 22897.272 B/op [Average]
[info]   (min, avg, max) = (10707.598, 17226.038, 21630.429), stdev = 5946.349
[info]   CI (99.9%): [≈ 0, 40123.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   12.700 ±(99.9%) 109.350 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12.700, 63.499), stdev = 28.398
[info]   CI (99.9%): [≈ 0, 122.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.400, 10.000), stdev = 2.702
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 24.47% complete, ETA 01:25:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 400160.513 ops/s
[info] # Warmup Iteration   2: 417147.462 ops/s
[info] # Warmup Iteration   3: 409470.327 ops/s
[info] # Warmup Iteration   4: 420123.159 ops/s
[info] # Warmup Iteration   5: 418150.199 ops/s
[info] Iteration   1: 419565.104 ops/s
[info]                  ·gc.alloc.rate:      273.019 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 419896.185 ops/s
[info]                  ·gc.alloc.rate:      273.157 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 417874.745 ops/s
[info]                  ·gc.alloc.rate:            271.836 MB/sec
[info]                  ·gc.alloc.rate.norm:       1024.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.014 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2554.063 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 419145.556 ops/s
[info]                  ·gc.alloc.rate:      272.691 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 416398.308 ops/s
[info]                  ·gc.alloc.rate:            270.899 MB/sec
[info]                  ·gc.alloc.rate.norm:       1024.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.097 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2563.208 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala":
[info]   418575.980 ±(99.9%) 5540.015 ops/s [Average]
[info]   (min, avg, max) = (416398.308, 418575.980, 419896.185), stdev = 1438.724
[info]   CI (99.9%): [413035.964, 424115.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   272.320 ±(99.9%) 3.642 MB/sec [Average]
[info]   (min, avg, max) = (270.899, 272.320, 273.157), stdev = 0.946
[info]   CI (99.9%): [268.679, 275.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1024.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1024.001, 1024.001, 1024.001), stdev = 0.001
[info]   CI (99.9%): [1024.001, 1024.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   271.222 ±(99.9%) 1430.076 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 271.222, 678.097), stdev = 371.386
[info]   CI (99.9%): [≈ 0, 1701.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1023.454 ±(99.9%) 5396.393 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1023.454, 2563.208), stdev = 1401.426
[info]   CI (99.9%): [≈ 0, 6419.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 4.000), stdev = 1.949
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 24.71% complete, ETA 01:25:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20069.540 ops/s
[info] # Warmup Iteration   2: 36366.383 ops/s
[info] # Warmup Iteration   3: 36855.784 ops/s
[info] # Warmup Iteration   4: 37126.019 ops/s
[info] # Warmup Iteration   5: 36536.460 ops/s
[info] Iteration   1: 37377.834 ops/s
[info]                  ·gc.alloc.rate:                                  1995.157 MB/sec
[info]                  ·gc.alloc.rate.norm:                             84016.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.086 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.626 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2036.219 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       85745.154 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                168.293 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   2: 37651.711 ops/s
[info]                  ·gc.alloc.rate:                                  2009.544 MB/sec
[info]                  ·gc.alloc.rate.norm:                             84016.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.049 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.033 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2043.918 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       85453.139 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 37673.779 ops/s
[info]                  ·gc.alloc.rate:            2010.766 MB/sec
[info]                  ·gc.alloc.rate.norm:       84016.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2043.913 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 85400.980 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 37794.912 ops/s
[info]                  ·gc.alloc.rate:                                  2017.495 MB/sec
[info]                  ·gc.alloc.rate.norm:                             84016.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.170 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.243 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       85129.881 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 37801.261 ops/s
[info]                  ·gc.alloc.rate:                                  2017.849 MB/sec
[info]                  ·gc.alloc.rate.norm:                             84016.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁵ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.779 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       56741.246 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson":
[info]   37659.899 ±(99.9%) 661.460 ops/s [Average]
[info]   (min, avg, max) = (37377.834, 37659.899, 37801.261), stdev = 171.779
[info]   CI (99.9%): [36998.439, 38321.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2010.162 ±(99.9%) 35.437 MB/sec [Average]
[info]   (min, avg, max) = (1995.157, 2010.162, 2017.849), stdev = 9.203
[info]   CI (99.9%): [1974.725, 2045.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   84016.011 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (84016.011, 84016.011, 84016.012), stdev = 0.001
[info]   CI (99.9%): [84016.010, 84016.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.028 ±(99.9%) 0.148 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.086), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.166 ±(99.9%) 6.242 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.166, 3.626), stdev = 1.621
[info]   CI (99.9%): [≈ 0, 7.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1906.214 ±(99.9%) 1169.858 MB/sec [Average]
[info]   (min, avg, max) = (1362.779, 1906.214, 2044.243), stdev = 303.808
[info]   CI (99.9%): [736.357, 3076.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   79694.080 ±(99.9%) 49414.861 B/op [Average]
[info]   (min, avg, max) = (56741.246, 79694.080, 85745.154), stdev = 12832.883
[info]   CI (99.9%): [30279.219, 129108.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   33.659 ±(99.9%) 289.810 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 33.659, 168.293), stdev = 75.263
[info]   CI (99.9%): [≈ 0, 323.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 11.000), stdev = 3.391
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 24.94% complete, ETA 01:24:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 65423.370 ops/s
[info] # Warmup Iteration   2: 89117.858 ops/s
[info] # Warmup Iteration   3: 90613.645 ops/s
[info] # Warmup Iteration   4: 90910.943 ops/s
[info] # Warmup Iteration   5: 90459.497 ops/s
[info] Iteration   1: 91392.167 ops/s
[info]                  ·gc.alloc.rate:      441.310 MB/sec
[info]                  ·gc.alloc.rate.norm: 7600.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 87983.592 ops/s
[info]                  ·gc.alloc.rate:            424.855 MB/sec
[info]                  ·gc.alloc.rate.norm:       7600.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.096 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12130.118 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 91036.808 ops/s
[info]                  ·gc.alloc.rate:            439.736 MB/sec
[info]                  ·gc.alloc.rate.norm:       7600.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.323 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11723.525 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 91407.818 ops/s
[info]                  ·gc.alloc.rate:      441.399 MB/sec
[info]                  ·gc.alloc.rate.norm: 7600.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 91007.694 ops/s
[info]                  ·gc.alloc.rate:            439.603 MB/sec
[info]                  ·gc.alloc.rate.norm:       7600.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.333 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11727.260 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce":
[info]   90565.616 ±(99.9%) 5605.561 ops/s [Average]
[info]   (min, avg, max) = (87983.592, 90565.616, 91407.818), stdev = 1455.746
[info]   CI (99.9%): [84960.055, 96171.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate":
[info]   437.381 ±(99.9%) 27.159 MB/sec [Average]
[info]   (min, avg, max) = (424.855, 437.381, 441.399), stdev = 7.053
[info]   CI (99.9%): [410.222, 464.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   7600.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7600.004, 7600.005, 7600.005), stdev = 0.001
[info]   CI (99.9%): [7600.004, 7600.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   406.951 ±(99.9%) 1430.488 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 406.951, 678.333), stdev = 371.493
[info]   CI (99.9%): [≈ 0, 1837.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   7116.180 ±(99.9%) 25022.467 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7116.180, 12130.118), stdev = 6498.255
[info]   CI (99.9%): [≈ 0, 32138.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 4.000), stdev = 2.191
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 25.18% complete, ETA 01:24:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4604.962 ops/s
[info] # Warmup Iteration   2: 115101.324 ops/s
[info] # Warmup Iteration   3: 114956.877 ops/s
[info] # Warmup Iteration   4: 116140.226 ops/s
[info] # Warmup Iteration   5: 115630.190 ops/s
[info] Iteration   1: 116232.017 ops/s
[info]                  ·gc.alloc.rate:      355.653 MB/sec
[info]                  ·gc.alloc.rate.norm: 4816.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 115032.114 ops/s
[info]                  ·gc.alloc.rate:            351.988 MB/sec
[info]                  ·gc.alloc.rate.norm:       4816.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.812 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9232.974 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 116448.054 ops/s
[info]                  ·gc.alloc.rate:      356.385 MB/sec
[info]                  ·gc.alloc.rate.norm: 4816.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 115413.640 ops/s
[info]                  ·gc.alloc.rate:            353.132 MB/sec
[info]                  ·gc.alloc.rate.norm:       4816.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.747 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9202.179 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 116326.775 ops/s
[info]                  ·gc.alloc.rate:      355.955 MB/sec
[info]                  ·gc.alloc.rate.norm: 4816.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava":
[info]   115890.520 ±(99.9%) 2421.668 ops/s [Average]
[info]   (min, avg, max) = (115032.114, 115890.520, 116448.054), stdev = 628.899
[info]   CI (99.9%): [113468.852, 118312.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   354.623 ±(99.9%) 7.483 MB/sec [Average]
[info]   (min, avg, max) = (351.988, 354.623, 356.385), stdev = 1.943
[info]   CI (99.9%): [347.140, 362.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   4816.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4816.004, 4816.004, 4816.004), stdev = 0.001
[info]   CI (99.9%): [4816.003, 4816.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   269.912 ±(99.9%) 1423.168 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.912, 674.812), stdev = 369.592
[info]   CI (99.9%): [≈ 0, 1693.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   3687.031 ±(99.9%) 19440.693 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3687.031, 9232.974), stdev = 5048.686
[info]   CI (99.9%): [≈ 0, 23127.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 6.000), stdev = 3.033
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 25.41% complete, ETA 01:24:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 66592.034 ops/s
[info] # Warmup Iteration   2: 99518.674 ops/s
[info] # Warmup Iteration   3: 99070.329 ops/s
[info] # Warmup Iteration   4: 99528.424 ops/s
[info] # Warmup Iteration   5: 98869.402 ops/s
[info] Iteration   1: 99657.221 ops/s
[info]                  ·gc.alloc.rate:      329.286 MB/sec
[info]                  ·gc.alloc.rate.norm: 5200.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 98861.388 ops/s
[info]                  ·gc.alloc.rate:            326.653 MB/sec
[info]                  ·gc.alloc.rate.norm:       5200.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.505 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10785.244 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 99024.553 ops/s
[info]                  ·gc.alloc.rate:      327.178 MB/sec
[info]                  ·gc.alloc.rate.norm: 5200.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 99178.121 ops/s
[info]                  ·gc.alloc.rate:            327.622 MB/sec
[info]                  ·gc.alloc.rate.norm:       5200.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.343 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10750.777 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 99423.627 ops/s
[info]                  ·gc.alloc.rate:      328.446 MB/sec
[info]                  ·gc.alloc.rate.norm: 5200.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala":
[info]   99228.982 ±(99.9%) 1218.866 ops/s [Average]
[info]   (min, avg, max) = (98861.388, 99228.982, 99657.221), stdev = 316.536
[info]   CI (99.9%): [98010.116, 100447.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   327.837 ±(99.9%) 4.017 MB/sec [Average]
[info]   (min, avg, max) = (326.653, 327.837, 329.286), stdev = 1.043
[info]   CI (99.9%): [323.819, 331.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   5200.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5200.004, 5200.004, 5200.004), stdev = 0.001
[info]   CI (99.9%): [5200.004, 5200.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   270.970 ±(99.9%) 1428.745 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 270.970, 677.505), stdev = 371.041
[info]   CI (99.9%): [≈ 0, 1699.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   4307.204 ±(99.9%) 22710.693 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4307.204, 10785.244), stdev = 5897.895
[info]   CI (99.9%): [≈ 0, 27017.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 5.000), stdev = 2.490
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 25.65% complete, ETA 01:24:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 103816.192 ops/s
[info] # Warmup Iteration   2: 115092.606 ops/s
[info] # Warmup Iteration   3: 116008.022 ops/s
[info] # Warmup Iteration   4: 115909.577 ops/s
[info] # Warmup Iteration   5: 116287.067 ops/s
[info] Iteration   1: 115885.881 ops/s
[info]                  ·gc.alloc.rate:            354.555 MB/sec
[info]                  ·gc.alloc.rate.norm:       4816.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.331 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9200.336 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 116231.071 ops/s
[info]                  ·gc.alloc.rate:      355.663 MB/sec
[info]                  ·gc.alloc.rate.norm: 4816.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 115816.263 ops/s
[info]                  ·gc.alloc.rate:            354.385 MB/sec
[info]                  ·gc.alloc.rate.norm:       4816.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.421 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9205.976 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 116424.831 ops/s
[info]                  ·gc.alloc.rate:      356.267 MB/sec
[info]                  ·gc.alloc.rate.norm: 4816.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 116017.271 ops/s
[info]                  ·gc.alloc.rate:            355.032 MB/sec
[info]                  ·gc.alloc.rate.norm:       4816.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.453 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9189.633 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala":
[info]   116075.063 ±(99.9%) 968.005 ops/s [Average]
[info]   (min, avg, max) = (115816.263, 116075.063, 116424.831), stdev = 251.388
[info]   CI (99.9%): [115107.058, 117043.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   355.181 ±(99.9%) 3.019 MB/sec [Average]
[info]   (min, avg, max) = (354.385, 355.181, 356.267), stdev = 0.784
[info]   CI (99.9%): [352.161, 358.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   4816.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4816.004, 4816.004, 4816.004), stdev = 0.001
[info]   CI (99.9%): [4816.003, 4816.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   406.441 ±(99.9%) 1428.697 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 406.441, 677.453), stdev = 371.028
[info]   CI (99.9%): [≈ 0, 1835.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   5519.189 ±(99.9%) 19400.740 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5519.189, 9205.976), stdev = 5038.311
[info]   CI (99.9%): [≈ 0, 24919.929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 25.88% complete, ETA 01:23:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 102981.028 ops/s
[info] # Warmup Iteration   2: 115446.893 ops/s
[info] # Warmup Iteration   3: 110367.867 ops/s
[info] # Warmup Iteration   4: 115520.300 ops/s
[info] # Warmup Iteration   5: 115484.383 ops/s
[info] Iteration   1: 114978.571 ops/s
[info]                  ·gc.alloc.rate:            261.216 MB/sec
[info]                  ·gc.alloc.rate.norm:       3576.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.052 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9282.419 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 115357.576 ops/s
[info]                  ·gc.alloc.rate:      262.147 MB/sec
[info]                  ·gc.alloc.rate.norm: 3576.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 114967.250 ops/s
[info]                  ·gc.alloc.rate:            261.212 MB/sec
[info]                  ·gc.alloc.rate.norm:       3576.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.101 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9283.227 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 115224.696 ops/s
[info]                  ·gc.alloc.rate:      261.793 MB/sec
[info]                  ·gc.alloc.rate.norm: 3576.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 115568.500 ops/s
[info]                  ·gc.alloc.rate:      262.603 MB/sec
[info]                  ·gc.alloc.rate.norm: 3576.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc":
[info]   115219.319 ±(99.9%) 986.565 ops/s [Average]
[info]   (min, avg, max) = (114967.250, 115219.319, 115568.500), stdev = 256.208
[info]   CI (99.9%): [114232.754, 116205.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   261.794 ±(99.9%) 2.320 MB/sec [Average]
[info]   (min, avg, max) = (261.212, 261.794, 262.603), stdev = 0.602
[info]   CI (99.9%): [259.474, 264.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   3576.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3576.004, 3576.004, 3576.004), stdev = 0.001
[info]   CI (99.9%): [3576.004, 3576.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   271.231 ±(99.9%) 1430.121 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 271.231, 678.101), stdev = 371.398
[info]   CI (99.9%): [≈ 0, 1701.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   3713.129 ±(99.9%) 19578.258 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3713.129, 9283.227), stdev = 5084.412
[info]   CI (99.9%): [≈ 0, 23291.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 4.000), stdev = 1.949
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 26.12% complete, ETA 01:23:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5455.597 ops/s
[info] # Warmup Iteration   2: 8397.218 ops/s
[info] # Warmup Iteration   3: 8471.065 ops/s
[info] # Warmup Iteration   4: 8411.573 ops/s
[info] # Warmup Iteration   5: 8389.317 ops/s
[info] Iteration   1: 8360.058 ops/s
[info]                  ·gc.alloc.rate:            1374.824 MB/sec
[info]                  ·gc.alloc.rate.norm:       258856.056 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.989 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 255309.823 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 8221.656 ops/s
[info]                  ·gc.alloc.rate:            1352.637 MB/sec
[info]                  ·gc.alloc.rate.norm:       258856.050 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.493 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 259593.961 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 8379.779 ops/s
[info]                  ·gc.alloc.rate:            1378.472 MB/sec
[info]                  ·gc.alloc.rate.norm:       258856.091 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.343 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 254700.637 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 8389.735 ops/s
[info]                  ·gc.alloc.rate:                                  1379.731 MB/sec
[info]                  ·gc.alloc.rate.norm:                             258856.049 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.342 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1359.456 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       255052.272 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                624.822 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 8430.542 ops/s
[info]                  ·gc.alloc.rate:                                  1386.504 MB/sec
[info]                  ·gc.alloc.rate.norm:                             258856.048 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.087 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 16.212 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.656 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       254403.711 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce":
[info]   8356.354 ±(99.9%) 306.388 ops/s [Average]
[info]   (min, avg, max) = (8221.656, 8356.354, 8430.542), stdev = 79.568
[info]   CI (99.9%): [8049.966, 8662.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate":
[info]   1374.433 ±(99.9%) 49.661 MB/sec [Average]
[info]   (min, avg, max) = (1352.637, 1374.433, 1386.504), stdev = 12.897
[info]   CI (99.9%): [1324.772, 1424.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   258856.059 ±(99.9%) 0.070 B/op [Average]
[info]   (min, avg, max) = (258856.048, 258856.059, 258856.091), stdev = 0.018
[info]   CI (99.9%): [258855.989, 258856.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.019 ±(99.9%) 0.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.087), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   3.511 ±(99.9%) 27.432 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.511, 16.212), stdev = 7.124
[info]   CI (99.9%): [≈ 0, 30.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1358.187 ±(99.9%) 11.006 MB/sec [Average]
[info]   (min, avg, max) = (1355.989, 1358.187, 1362.656), stdev = 2.858
[info]   CI (99.9%): [1347.181, 1369.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   255812.081 ±(99.9%) 8247.708 B/op [Average]
[info]   (min, avg, max) = (254403.711, 255812.081, 259593.961), stdev = 2141.904
[info]   CI (99.9%): [247564.373, 264059.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   124.964 ±(99.9%) 1075.981 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 124.964, 624.822), stdev = 279.429
[info]   CI (99.9%): [≈ 0, 1200.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 8.000), stdev = 1.924
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 26.35% complete, ETA 01:23:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4275.054 ops/s
[info] # Warmup Iteration   2: 8375.582 ops/s
[info] # Warmup Iteration   3: 8518.326 ops/s
[info] # Warmup Iteration   4: 8493.026 ops/s
[info] # Warmup Iteration   5: 8529.701 ops/s
[info] Iteration   1: 8508.206 ops/s
[info]                  ·gc.alloc.rate:            1327.009 MB/sec
[info]                  ·gc.alloc.rate.norm:       245528.052 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.547 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 250623.218 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 8508.914 ops/s
[info]                  ·gc.alloc.rate:            1327.219 MB/sec
[info]                  ·gc.alloc.rate.norm:       245528.052 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.602 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 250593.771 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 8490.997 ops/s
[info]                  ·gc.alloc.rate:            1324.541 MB/sec
[info]                  ·gc.alloc.rate.norm:       245536.562 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.687 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 251124.877 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 8526.223 ops/s
[info]                  ·gc.alloc.rate:                                  1330.202 MB/sec
[info]                  ·gc.alloc.rate.norm:                             245560.227 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.075 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 13.861 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1358.759 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       250831.970 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                737.741 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 8547.084 ops/s
[info]                  ·gc.alloc.rate:                                  1333.545 MB/sec
[info]                  ·gc.alloc.rate.norm:                             245560.048 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.049 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 9.080 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.666 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       250922.397 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala":
[info]   8516.285 ±(99.9%) 81.830 ops/s [Average]
[info]   (min, avg, max) = (8490.997, 8516.285, 8547.084), stdev = 21.251
[info]   CI (99.9%): [8434.455, 8598.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1328.503 ±(99.9%) 13.323 MB/sec [Average]
[info]   (min, avg, max) = (1324.541, 1328.503, 1333.545), stdev = 3.460
[info]   CI (99.9%): [1315.180, 1341.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   245542.588 ±(99.9%) 63.123 B/op [Average]
[info]   (min, avg, max) = (245528.052, 245542.588, 245560.227), stdev = 16.393
[info]   CI (99.9%): [245479.465, 245605.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.025 ±(99.9%) 0.136 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.075), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   4.588 ±(99.9%) 25.053 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.588, 13.861), stdev = 6.506
[info]   CI (99.9%): [≈ 0, 29.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1357.052 ±(99.9%) 13.924 MB/sec [Average]
[info]   (min, avg, max) = (1354.547, 1357.052, 1362.666), stdev = 3.616
[info]   CI (99.9%): [1343.128, 1370.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   250819.247 ±(99.9%) 846.876 B/op [Average]
[info]   (min, avg, max) = (250593.771, 250819.247, 251124.877), stdev = 219.931
[info]   CI (99.9%): [249972.370, 251666.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   147.548 ±(99.9%) 1270.435 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 147.548, 737.741), stdev = 329.928
[info]   CI (99.9%): [≈ 0, 1417.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 8.000, 10.000), stdev = 2.000
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 26.59% complete, ETA 01:22:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 160229.907 ops/s
[info] # Warmup Iteration   2: 167414.420 ops/s
[info] # Warmup Iteration   3: 175050.053 ops/s
[info] # Warmup Iteration   4: 173282.602 ops/s
[info] # Warmup Iteration   5: 174002.669 ops/s
[info] Iteration   1: 175392.494 ops/s
[info]                  ·gc.alloc.rate:      456.400 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 172353.111 ops/s
[info]                  ·gc.alloc.rate:            448.522 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.743 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6198.437 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 173004.447 ops/s
[info]                  ·gc.alloc.rate:            450.194 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.715 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6175.152 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 174766.883 ops/s
[info]                  ·gc.alloc.rate:      454.856 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 174329.178 ops/s
[info]                  ·gc.alloc.rate:            453.796 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.938 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6128.155 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala":
[info]   173969.223 ±(99.9%) 4845.597 ops/s [Average]
[info]   (min, avg, max) = (172353.111, 173969.223, 175392.494), stdev = 1258.386
[info]   CI (99.9%): [169123.626, 178814.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   452.754 ±(99.9%) 12.664 MB/sec [Average]
[info]   (min, avg, max) = (448.522, 452.754, 456.400), stdev = 3.289
[info]   CI (99.9%): [440.089, 465.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.002, 4096.002, 4096.003), stdev = 0.001
[info]   CI (99.9%): [4096.002, 4096.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   407.279 ±(99.9%) 1431.644 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 407.279, 678.938), stdev = 371.793
[info]   CI (99.9%): [≈ 0, 1838.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   3700.349 ±(99.9%) 13007.613 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3700.349, 6198.437), stdev = 3378.036
[info]   CI (99.9%): [≈ 0, 16707.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 26.82% complete, ETA 01:22:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1859.046 ops/s
[info] # Warmup Iteration   2: 4592.764 ops/s
[info] # Warmup Iteration   3: 4602.098 ops/s
[info] # Warmup Iteration   4: 4781.301 ops/s
[info] # Warmup Iteration   5: 4787.599 ops/s
[info] Iteration   1: 4791.095 ops/s
[info]                  ·gc.alloc.rate:            1273.204 MB/sec
[info]                  ·gc.alloc.rate.norm:       418024.085 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.338 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 444334.080 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 4819.605 ops/s
[info]                  ·gc.alloc.rate:            1279.871 MB/sec
[info]                  ·gc.alloc.rate.norm:       418024.091 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.249 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 221199.293 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 4902.322 ops/s
[info]                  ·gc.alloc.rate:            1302.456 MB/sec
[info]                  ·gc.alloc.rate.norm:       418024.090 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.072 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 434911.008 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 4904.087 ops/s
[info]                  ·gc.alloc.rate:                   1302.423 MB/sec
[info]                  ·gc.alloc.rate.norm:              418024.083 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.760 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        434822.341 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1282.662 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 4917.710 ops/s
[info]                  ·gc.alloc.rate:                                  1306.103 MB/sec
[info]                  ·gc.alloc.rate.norm:                             418024.089 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.187 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 59.869 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.715 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       436142.813 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson":
[info]   4866.964 ±(99.9%) 221.222 ops/s [Average]
[info]   (min, avg, max) = (4791.095, 4866.964, 4917.710), stdev = 57.451
[info]   CI (99.9%): [4645.742, 5088.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1292.811 ±(99.9%) 58.207 MB/sec [Average]
[info]   (min, avg, max) = (1273.204, 1292.811, 1306.103), stdev = 15.116
[info]   CI (99.9%): [1234.604, 1351.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   418024.088 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (418024.083, 418024.088, 418024.091), stdev = 0.003
[info]   CI (99.9%): [418024.074, 418024.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.037 ±(99.9%) 0.322 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.187), stdev = 0.084
[info]   CI (99.9%): [≈ 0, 0.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   11.974 ±(99.9%) 103.098 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.974, 59.869), stdev = 26.774
[info]   CI (99.9%): [≈ 0, 115.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1220.627 ±(99.9%) 1169.746 MB/sec [Average]
[info]   (min, avg, max) = (677.249, 1220.627, 1362.715), stdev = 303.779
[info]   CI (99.9%): [50.881, 2390.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   394281.907 ±(99.9%) 372883.708 B/op [Average]
[info]   (min, avg, max) = (221199.293, 394281.907, 444334.080), stdev = 96836.715
[info]   CI (99.9%): [21398.199, 767165.615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   256.532 ±(99.9%) 2208.821 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 256.532, 1282.662), stdev = 573.624
[info]   CI (99.9%): [≈ 0, 2465.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.000, 10.000), stdev = 3.240
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 27.06% complete, ETA 01:22:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16169.456 ops/s
[info] # Warmup Iteration   2: 25084.218 ops/s
[info] # Warmup Iteration   3: 25380.915 ops/s
[info] # Warmup Iteration   4: 25357.794 ops/s
[info] # Warmup Iteration   5: 25078.936 ops/s
[info] Iteration   1: 25659.175 ops/s
[info]                  ·gc.alloc.rate:            1329.526 MB/sec
[info]                  ·gc.alloc.rate.norm:       81568.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.928 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 41591.676 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 25523.166 ops/s
[info]                  ·gc.alloc.rate:            1323.303 MB/sec
[info]                  ·gc.alloc.rate.norm:       81568.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.751 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 83629.769 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 25472.883 ops/s
[info]                  ·gc.alloc.rate:            1320.309 MB/sec
[info]                  ·gc.alloc.rate.norm:       81568.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.392 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 83797.179 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 25325.622 ops/s
[info]                  ·gc.alloc.rate:                   1312.489 MB/sec
[info]                  ·gc.alloc.rate.norm:              81568.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1356.183 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        84283.487 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 206.983 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 25370.806 ops/s
[info]                  ·gc.alloc.rate:                                  1314.770 MB/sec
[info]                  ·gc.alloc.rate.norm:                             81568.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.134 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 8.296 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.845 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       84550.583 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce":
[info]   25470.331 ±(99.9%) 506.861 ops/s [Average]
[info]   (min, avg, max) = (25325.622, 25470.331, 25659.175), stdev = 131.630
[info]   CI (99.9%): [24963.470, 25977.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1320.079 ±(99.9%) 26.221 MB/sec [Average]
[info]   (min, avg, max) = (1312.489, 1320.079, 1329.526), stdev = 6.810
[info]   CI (99.9%): [1293.858, 1346.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   81568.017 ±(99.9%) 0.003 B/op [Average]
[info]   (min, avg, max) = (81568.016, 81568.017, 81568.017), stdev = 0.001
[info]   CI (99.9%): [81568.014, 81568.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.027 ±(99.9%) 0.230 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.134), stdev = 0.060
[info]   CI (99.9%): [≈ 0, 0.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.659 ±(99.9%) 14.286 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.659, 8.296), stdev = 3.710
[info]   CI (99.9%): [≈ 0, 15.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1222.020 ±(99.9%) 1171.248 MB/sec [Average]
[info]   (min, avg, max) = (677.928, 1222.020, 1362.845), stdev = 304.169
[info]   CI (99.9%): [50.771, 2393.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   75570.539 ±(99.9%) 73155.865 B/op [Average]
[info]   (min, avg, max) = (41591.676, 75570.539, 84550.583), stdev = 18998.346
[info]   CI (99.9%): [2414.674, 148726.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   41.397 ±(99.9%) 356.437 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 41.397, 206.983), stdev = 92.566
[info]   CI (99.9%): [≈ 0, 397.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 8.000), stdev = 2.049
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 27.29% complete, ETA 01:22:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13778.523 ops/s
[info] # Warmup Iteration   2: 24824.891 ops/s
[info] # Warmup Iteration   3: 25360.753 ops/s
[info] # Warmup Iteration   4: 25299.760 ops/s
[info] # Warmup Iteration   5: 25343.239 ops/s
[info] Iteration   1: 24698.546 ops/s
[info]                  ·gc.alloc.rate:            1255.602 MB/sec
[info]                  ·gc.alloc.rate.norm:       80016.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.804 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 86337.837 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 25337.661 ops/s
[info]                  ·gc.alloc.rate:                   1287.938 MB/sec
[info]                  ·gc.alloc.rate.norm:              80016.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.987 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        84119.446 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 41.377 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 25103.315 ops/s
[info]                  ·gc.alloc.rate:            1276.146 MB/sec
[info]                  ·gc.alloc.rate.norm:       80016.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.760 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 84945.180 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 25094.775 ops/s
[info]                  ·gc.alloc.rate:                                  1275.657 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80016.018 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.097 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 6.084 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1358.722 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       85226.305 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                250.666 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 25207.107 ops/s
[info]                  ·gc.alloc.rate:                                  1281.431 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80016.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.024 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.475 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.697 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       85090.489 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala":
[info]   25088.281 ±(99.9%) 920.278 ops/s [Average]
[info]   (min, avg, max) = (24698.546, 25088.281, 25337.661), stdev = 238.993
[info]   CI (99.9%): [24168.003, 26008.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1275.355 ±(99.9%) 46.613 MB/sec [Average]
[info]   (min, avg, max) = (1255.602, 1275.355, 1287.938), stdev = 12.105
[info]   CI (99.9%): [1228.742, 1321.967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   80016.017 ±(99.9%) 0.003 B/op [Average]
[info]   (min, avg, max) = (80016.016, 80016.017, 80016.018), stdev = 0.001
[info]   CI (99.9%): [80016.014, 80016.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.024 ±(99.9%) 0.162 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.097), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.512 ±(99.9%) 10.145 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.512, 6.084), stdev = 2.635
[info]   CI (99.9%): [≈ 0, 11.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1356.994 ±(99.9%) 14.193 MB/sec [Average]
[info]   (min, avg, max) = (1353.987, 1356.994, 1362.697), stdev = 3.686
[info]   CI (99.9%): [1342.801, 1371.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   85143.852 ±(99.9%) 3058.853 B/op [Average]
[info]   (min, avg, max) = (84119.446, 85143.852, 86337.837), stdev = 794.375
[info]   CI (99.9%): [82084.998, 88202.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   58.409 ±(99.9%) 419.559 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 58.409, 250.666), stdev = 108.958
[info]   CI (99.9%): [≈ 0, 477.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.000, 9.000), stdev = 2.550
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 27.53% complete, ETA 01:21:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 317433.871 ops/s
[info] # Warmup Iteration   2: 347306.652 ops/s
[info] # Warmup Iteration   3: 358524.814 ops/s
[info] # Warmup Iteration   4: 369860.025 ops/s
[info] # Warmup Iteration   5: 370761.664 ops/s
[info] Iteration   1: 369625.021 ops/s
[info]                  ·gc.alloc.rate:            817.394 MB/sec
[info]                  ·gc.alloc.rate.norm:       3480.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.443 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5774.965 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 369648.295 ops/s
[info]                  ·gc.alloc.rate:            817.618 MB/sec
[info]                  ·gc.alloc.rate.norm:       3480.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.360 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2887.280 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 369161.714 ops/s
[info]                  ·gc.alloc.rate:                   816.155 MB/sec
[info]                  ·gc.alloc.rate.norm:              3480.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             677.369 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2888.232 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.840 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 368158.693 ops/s
[info]                  ·gc.alloc.rate:            814.269 MB/sec
[info]                  ·gc.alloc.rate.norm:       3480.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.294 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2898.876 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 369317.525 ops/s
[info]                  ·gc.alloc.rate:                   816.680 MB/sec
[info]                  ·gc.alloc.rate.norm:              3480.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             677.491 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2886.895 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.839 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala":
[info]   369182.250 ±(99.9%) 2341.966 ops/s [Average]
[info]   (min, avg, max) = (368158.693, 369182.250, 369648.295), stdev = 608.201
[info]   CI (99.9%): [366840.284, 371524.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   816.423 ±(99.9%) 5.148 MB/sec [Average]
[info]   (min, avg, max) = (814.269, 816.423, 817.618), stdev = 1.337
[info]   CI (99.9%): [811.275, 821.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3480.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3480.001, 3480.001, 3480.001), stdev = 0.001
[info]   CI (99.9%): [3480.001, 3480.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   813.591 ±(99.9%) 1168.531 MB/sec [Average]
[info]   (min, avg, max) = (677.369, 813.591, 1356.443), stdev = 303.464
[info]   CI (99.9%): [≈ 0, 1982.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   3467.250 ±(99.9%) 4967.568 B/op [Average]
[info]   (min, avg, max) = (2886.895, 3467.250, 5774.965), stdev = 1290.062
[info]   CI (99.9%): [≈ 0, 8434.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.136 ±(99.9%) 5.988 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.136, 2.840), stdev = 1.555
[info]   CI (99.9%): [≈ 0, 7.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 7.000), stdev = 1.732
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 27.76% complete, ETA 01:21:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 375847.770 ops/s
[info] # Warmup Iteration   2: 419275.414 ops/s
[info] # Warmup Iteration   3: 415579.914 ops/s
[info] # Warmup Iteration   4: 415359.192 ops/s
[info] # Warmup Iteration   5: 391655.012 ops/s
[info] Iteration   1: 414597.296 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 414444.005 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 415002.845 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 413187.576 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 414404.839 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc":
[info]   414327.312 ±(99.9%) 2617.207 ops/s [Average]
[info]   (min, avg, max) = (413187.576, 414327.312, 415002.845), stdev = 679.680
[info]   CI (99.9%): [411710.105, 416944.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 28.00% complete, ETA 01:21:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18017.106 ops/s
[info] # Warmup Iteration   2: 27232.347 ops/s
[info] # Warmup Iteration   3: 27364.355 ops/s
[info] # Warmup Iteration   4: 27430.512 ops/s
[info] # Warmup Iteration   5: 27259.876 ops/s
[info] Iteration   1: 27459.749 ops/s
[info]                  ·gc.alloc.rate:            1445.356 MB/sec
[info]                  ·gc.alloc.rate.norm:       82824.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.158 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 77655.328 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 27405.988 ops/s
[info]                  ·gc.alloc.rate:            1442.008 MB/sec
[info]                  ·gc.alloc.rate.norm:       82824.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.633 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 77805.471 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 27357.579 ops/s
[info]                  ·gc.alloc.rate:                   1440.005 MB/sec
[info]                  ·gc.alloc.rate.norm:              82824.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.124 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        77941.952 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 229.917 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 28029.212 ops/s
[info]                  ·gc.alloc.rate:                                  1474.862 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82824.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.154 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 8.661 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.651 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       76522.560 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 28039.983 ops/s
[info]                  ·gc.alloc.rate:                                  1475.411 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82824.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.203 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.672 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       76495.275 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson":
[info]   27658.502 ±(99.9%) 1329.413 ops/s [Average]
[info]   (min, avg, max) = (27357.579, 27658.502, 28039.983), stdev = 345.244
[info]   CI (99.9%): [26329.089, 28987.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1455.529 ±(99.9%) 69.321 MB/sec [Average]
[info]   (min, avg, max) = (1440.005, 1455.529, 1475.411), stdev = 18.002
[info]   CI (99.9%): [1386.208, 1524.849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   82824.015 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (82824.015, 82824.015, 82824.016), stdev = 0.001
[info]   CI (99.9%): [82824.013, 82824.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.032 ±(99.9%) 0.264 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.032, 0.154), stdev = 0.069
[info]   CI (99.9%): [≈ 0, 0.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.773 ±(99.9%) 14.831 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.773, 8.661), stdev = 3.851
[info]   CI (99.9%): [≈ 0, 16.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1358.048 ±(99.9%) 16.238 MB/sec [Average]
[info]   (min, avg, max) = (1354.633, 1358.048, 1362.672), stdev = 4.217
[info]   CI (99.9%): [1341.809, 1374.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   77284.117 ±(99.9%) 2753.005 B/op [Average]
[info]   (min, avg, max) = (76495.275, 77284.117, 77941.952), stdev = 714.947
[info]   CI (99.9%): [74531.112, 80037.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.884 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   45.983 ±(99.9%) 395.931 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 45.983, 229.917), stdev = 102.822
[info]   CI (99.9%): [≈ 0, 441.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 9.000), stdev = 3.130
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 28.24% complete, ETA 01:21:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 78154.001 ops/s
[info] # Warmup Iteration   2: 92400.786 ops/s
[info] # Warmup Iteration   3: 91852.169 ops/s
[info] # Warmup Iteration   4: 94818.340 ops/s
[info] # Warmup Iteration   5: 94917.641 ops/s
[info] Iteration   1: 94583.147 ops/s
[info]                  ·gc.alloc.rate:            1540.612 MB/sec
[info]                  ·gc.alloc.rate.norm:       25640.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2034.031 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 33851.849 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 95246.204 ops/s
[info]                  ·gc.alloc.rate:            1551.645 MB/sec
[info]                  ·gc.alloc.rate.norm:       25640.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.226 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 22410.833 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 95214.652 ops/s
[info]                  ·gc.alloc.rate:                                  1551.193 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25640.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.054 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.898 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1359.561 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       22472.474 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                55.053 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 95031.893 ops/s
[info]                  ·gc.alloc.rate:                                  1547.997 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25640.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.088 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.461 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.075 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       33856.704 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 95251.260 ops/s
[info]                  ·gc.alloc.rate:                                  1551.611 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25640.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.051 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.701 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       22518.305 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce":
[info]   95065.431 ±(99.9%) 1094.561 ops/s [Average]
[info]   (min, avg, max) = (94583.147, 95065.431, 95251.260), stdev = 284.254
[info]   CI (99.9%): [93970.871, 96159.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1548.611 ±(99.9%) 18.188 MB/sec [Average]
[info]   (min, avg, max) = (1540.612, 1548.611, 1551.645), stdev = 4.723
[info]   CI (99.9%): [1530.424, 1566.799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   25640.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (25640.004, 25640.004, 25640.005), stdev = 0.001
[info]   CI (99.9%): [25640.004, 25640.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.029 ±(99.9%) 0.155 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.088), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.482 ±(99.9%) 2.571 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.482, 1.461), stdev = 0.668
[info]   CI (99.9%): [≈ 0, 3.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1631.319 ±(99.9%) 1433.335 MB/sec [Average]
[info]   (min, avg, max) = (1356.226, 1631.319, 2044.075), stdev = 372.232
[info]   CI (99.9%): [197.984, 3064.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   27022.033 ±(99.9%) 24016.749 B/op [Average]
[info]   (min, avg, max) = (22410.833, 27022.033, 33856.704), stdev = 6237.073
[info]   CI (99.9%): [3005.284, 51038.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   11.011 ±(99.9%) 94.804 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.011, 55.053), stdev = 24.620
[info]   CI (99.9%): [≈ 0, 105.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.600, 10.000), stdev = 3.050
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 28.47% complete, ETA 01:20:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38181.145 ops/s
[info] # Warmup Iteration   2: 456604.335 ops/s
[info] # Warmup Iteration   3: 437024.879 ops/s
[info] # Warmup Iteration   4: 452467.635 ops/s
[info] # Warmup Iteration   5: 457646.850 ops/s
[info] Iteration   1: 449994.678 ops/s
[info]                  ·gc.alloc.rate:            466.730 MB/sec
[info]                  ·gc.alloc.rate.norm:       1632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.975 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2360.162 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 456452.866 ops/s
[info]                  ·gc.alloc.rate:            473.478 MB/sec
[info]                  ·gc.alloc.rate.norm:       1632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.038 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2326.744 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 459784.545 ops/s
[info]                  ·gc.alloc.rate:      476.687 MB/sec
[info]                  ·gc.alloc.rate.norm: 1632.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 455038.053 ops/s
[info]                  ·gc.alloc.rate:            471.894 MB/sec
[info]                  ·gc.alloc.rate.norm:       1632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.833 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2333.845 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 456873.390 ops/s
[info]                  ·gc.alloc.rate:            473.719 MB/sec
[info]                  ·gc.alloc.rate.norm:       1632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.724 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2324.478 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava":
[info]   455628.706 ±(99.9%) 13828.934 ops/s [Average]
[info]   (min, avg, max) = (449994.678, 455628.706, 459784.545), stdev = 3591.330
[info]   CI (99.9%): [441799.773, 469457.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   472.502 ±(99.9%) 14.100 MB/sec [Average]
[info]   (min, avg, max) = (466.730, 472.502, 476.687), stdev = 3.662
[info]   CI (99.9%): [458.402, 486.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1632.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1632.001, 1632.001, 1632.001), stdev = 0.001
[info]   CI (99.9%): [1632.001, 1632.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   539.914 ±(99.9%) 1162.206 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.914, 675.038), stdev = 301.821
[info]   CI (99.9%): [≈ 0, 1702.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   1869.046 ±(99.9%) 4023.634 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1869.046, 2360.162), stdev = 1044.925
[info]   CI (99.9%): [≈ 0, 5892.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.200, 6.000), stdev = 2.387
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 28.71% complete, ETA 01:20:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 175320.538 ops/s
[info] # Warmup Iteration   2: 272745.728 ops/s
[info] # Warmup Iteration   3: 271682.726 ops/s
[info] # Warmup Iteration   4: 268569.890 ops/s
[info] # Warmup Iteration   5: 272827.355 ops/s
[info] Iteration   1: 270131.451 ops/s
[info]                  ·gc.alloc.rate:                   387.218 MB/sec
[info]                  ·gc.alloc.rate.norm:              2256.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.785 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3943.066 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.881 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 273150.284 ops/s
[info]                  ·gc.alloc.rate:      391.474 MB/sec
[info]                  ·gc.alloc.rate.norm: 2256.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 272051.712 ops/s
[info]                  ·gc.alloc.rate:            389.959 MB/sec
[info]                  ·gc.alloc.rate.norm:       2256.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.434 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3919.111 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 273337.743 ops/s
[info]                  ·gc.alloc.rate:      391.764 MB/sec
[info]                  ·gc.alloc.rate.norm: 2256.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 271534.944 ops/s
[info]                  ·gc.alloc.rate:            389.255 MB/sec
[info]                  ·gc.alloc.rate.norm:       2256.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.457 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3926.326 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala":
[info]   272041.227 ±(99.9%) 5026.026 ops/s [Average]
[info]   (min, avg, max) = (270131.451, 272041.227, 273337.743), stdev = 1305.243
[info]   CI (99.9%): [267015.200, 277067.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   389.934 ±(99.9%) 7.089 MB/sec [Average]
[info]   (min, avg, max) = (387.218, 389.934, 391.764), stdev = 1.841
[info]   CI (99.9%): [382.845, 397.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2256.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2256.001, 2256.002, 2256.002), stdev = 0.001
[info]   CI (99.9%): [2256.001, 2256.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   406.335 ±(99.9%) 1428.326 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 406.335, 677.457), stdev = 370.932
[info]   CI (99.9%): [≈ 0, 1834.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   2357.700 ±(99.9%) 8287.717 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2357.700, 3943.066), stdev = 2152.294
[info]   CI (99.9%): [≈ 0, 10645.417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.776 ±(99.9%) 6.683 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.776, 3.881), stdev = 1.736
[info]   CI (99.9%): [≈ 0, 7.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 5.000), stdev = 2.408
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 28.94% complete, ETA 01:20:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 574460.180 ops/s
[info] # Warmup Iteration   2: 596547.115 ops/s
[info] # Warmup Iteration   3: 614565.033 ops/s
[info] # Warmup Iteration   4: 611899.125 ops/s
[info] # Warmup Iteration   5: 614276.587 ops/s
[info] Iteration   1: 608753.592 ops/s
[info]                  ·gc.alloc.rate:            396.042 MB/sec
[info]                  ·gc.alloc.rate.norm:       1024.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.074 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1753.218 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 609705.776 ops/s
[info]                  ·gc.alloc.rate:            396.636 MB/sec
[info]                  ·gc.alloc.rate.norm:       1024.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.033 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1750.490 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 611237.427 ops/s
[info]                  ·gc.alloc.rate:      397.609 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 609008.770 ops/s
[info]                  ·gc.alloc.rate:            396.256 MB/sec
[info]                  ·gc.alloc.rate.norm:       1024.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.150 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1752.470 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 614701.861 ops/s
[info]                  ·gc.alloc.rate:      399.898 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala":
[info]   610681.485 ±(99.9%) 9420.168 ops/s [Average]
[info]   (min, avg, max) = (608753.592, 610681.485, 614701.861), stdev = 2446.388
[info]   CI (99.9%): [601261.317, 620101.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   397.288 ±(99.9%) 6.076 MB/sec [Average]
[info]   (min, avg, max) = (396.042, 397.288, 399.898), stdev = 1.578
[info]   CI (99.9%): [391.212, 403.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1024.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1024.001, 1024.001, 1024.001), stdev = 0.001
[info]   CI (99.9%): [1024.001, 1024.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   406.851 ±(99.9%) 1430.140 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 406.851, 678.150), stdev = 371.403
[info]   CI (99.9%): [≈ 0, 1836.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1051.236 ±(99.9%) 3695.243 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1051.236, 1753.218), stdev = 959.643
[info]   CI (99.9%): [≈ 0, 4746.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 29.18% complete, ETA 01:20:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37528.664 ops/s
[info] # Warmup Iteration   2: 67603.663 ops/s
[info] # Warmup Iteration   3: 67996.793 ops/s
[info] # Warmup Iteration   4: 68389.320 ops/s
[info] # Warmup Iteration   5: 69151.606 ops/s
[info] Iteration   1: 69679.968 ops/s
[info]                  ·gc.alloc.rate:            3052.856 MB/sec
[info]                  ·gc.alloc.rate.norm:       68952.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2725.913 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 61567.655 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 68091.784 ops/s
[info]                  ·gc.alloc.rate:                                  2982.930 MB/sec
[info]                  ·gc.alloc.rate.norm:                             68952.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.053 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.581 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       63003.245 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   3: 68150.122 ops/s
[info]                  ·gc.alloc.rate:                                  2985.500 MB/sec
[info]                  ·gc.alloc.rate.norm:                             68952.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.041 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3406.910 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       78684.734 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 69111.463 ops/s
[info]                  ·gc.alloc.rate:                                  3027.798 MB/sec
[info]                  ·gc.alloc.rate.norm:                             68952.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.149 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.754 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       62073.563 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 69352.892 ops/s
[info]                  ·gc.alloc.rate:                                  3038.135 MB/sec
[info]                  ·gc.alloc.rate.norm:                             68952.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.119 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3406.946 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       77322.371 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson":
[info]   68877.246 ±(99.9%) 2770.805 ops/s [Average]
[info]   (min, avg, max) = (68091.784, 68877.246, 69679.968), stdev = 719.569
[info]   CI (99.9%): [66106.441, 71648.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3017.444 ±(99.9%) 121.782 MB/sec [Average]
[info]   (min, avg, max) = (2982.930, 3017.444, 3052.856), stdev = 31.626
[info]   CI (99.9%): [2895.662, 3139.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   68952.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (68952.006, 68952.006, 68952.006), stdev = 0.001
[info]   CI (99.9%): [68952.005, 68952.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.003 ±(99.9%) 0.010 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.007), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.072 ±(99.9%) 0.233 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.072, 0.149), stdev = 0.061
[info]   CI (99.9%): [≈ 0, 0.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2998.221 ±(99.9%) 1436.664 MB/sec [Average]
[info]   (min, avg, max) = (2725.581, 2998.221, 3406.946), stdev = 373.097
[info]   CI (99.9%): [1561.557, 4434.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   68530.314 ±(99.9%) 33410.259 B/op [Average]
[info]   (min, avg, max) = (61567.655, 68530.314, 78684.734), stdev = 8676.538
[info]   CI (99.9%): [35120.054, 101940.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.600, 11.000), stdev = 2.510
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 29.41% complete, ETA 01:19:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 167598.603 ops/s
[info] # Warmup Iteration   2: 214681.681 ops/s
[info] # Warmup Iteration   3: 215370.647 ops/s
[info] # Warmup Iteration   4: 215152.381 ops/s
[info] # Warmup Iteration   5: 214636.395 ops/s
[info] Iteration   1: 215808.175 ops/s
[info]                  ·gc.alloc.rate:            1278.343 MB/sec
[info]                  ·gc.alloc.rate.norm:       9320.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.327 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4945.472 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 214894.517 ops/s
[info]                  ·gc.alloc.rate:                   1272.403 MB/sec
[info]                  ·gc.alloc.rate.norm:              9320.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.413 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        9928.034 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 4.879 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 214350.811 ops/s
[info]                  ·gc.alloc.rate:            1269.180 MB/sec
[info]                  ·gc.alloc.rate.norm:       9320.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.090 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9958.210 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 214260.817 ops/s
[info]                  ·gc.alloc.rate:                   1268.883 MB/sec
[info]                  ·gc.alloc.rate.norm:              9320.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1356.367 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        9962.578 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 24.466 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 212991.265 ops/s
[info]                  ·gc.alloc.rate:                                  1261.191 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9320.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.149 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.103 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.869 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10071.386 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce":
[info]   214461.117 ±(99.9%) 3952.847 ops/s [Average]
[info]   (min, avg, max) = (212991.265, 214461.117, 215808.175), stdev = 1026.542
[info]   CI (99.9%): [210508.270, 218413.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1270.000 ±(99.9%) 23.961 MB/sec [Average]
[info]   (min, avg, max) = (1261.191, 1270.000, 1278.343), stdev = 6.223
[info]   CI (99.9%): [1246.039, 1293.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   9320.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9320.002, 9320.002, 9320.002), stdev = 0.001
[info]   CI (99.9%): [9320.002, 9320.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.030 ±(99.9%) 0.257 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.149), stdev = 0.067
[info]   CI (99.9%): [≈ 0, 0.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.221 ±(99.9%) 1.900 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.221, 1.103), stdev = 0.493
[info]   CI (99.9%): [≈ 0, 2.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1221.813 ±(99.9%) 1169.953 MB/sec [Average]
[info]   (min, avg, max) = (678.327, 1221.813, 1362.869), stdev = 303.833
[info]   CI (99.9%): [51.860, 2391.767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   8973.136 ±(99.9%) 8672.380 B/op [Average]
[info]   (min, avg, max) = (4945.472, 8973.136, 10071.386), stdev = 2252.189
[info]   CI (99.9%): [300.756, 17645.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.561 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.331), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   5.869 ±(99.9%) 40.850 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.869, 24.466), stdev = 10.609
[info]   CI (99.9%): [≈ 0, 46.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 9.000), stdev = 2.588
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 29.65% complete, ETA 01:19:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 60735.281 ops/s
[info] # Warmup Iteration   2: 991529.942 ops/s
[info] # Warmup Iteration   3: 968264.691 ops/s
[info] # Warmup Iteration   4: 993088.015 ops/s
[info] # Warmup Iteration   5: 963971.902 ops/s
[info] Iteration   1: 939515.625 ops/s
[info]                  ·gc.alloc.rate:            510.996 MB/sec
[info]                  ·gc.alloc.rate.norm:       856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.835 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1130.457 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 983911.587 ops/s
[info]                  ·gc.alloc.rate:      535.213 MB/sec
[info]                  ·gc.alloc.rate.norm: 856.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 965491.989 ops/s
[info]                  ·gc.alloc.rate:            525.061 MB/sec
[info]                  ·gc.alloc.rate.norm:       856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.713 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1099.975 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 962276.646 ops/s
[info]                  ·gc.alloc.rate:            523.318 MB/sec
[info]                  ·gc.alloc.rate.norm:       856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.738 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1103.680 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 961974.773 ops/s
[info]                  ·gc.alloc.rate:            523.153 MB/sec
[info]                  ·gc.alloc.rate.norm:       856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.737 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1104.027 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava":
[info]   962634.124 ±(99.9%) 60759.860 ops/s [Average]
[info]   (min, avg, max) = (939515.625, 962634.124, 983911.587), stdev = 15779.143
[info]   CI (99.9%): [901874.265, 1023393.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   523.548 ±(99.9%) 33.131 MB/sec [Average]
[info]   (min, avg, max) = (510.996, 523.548, 535.213), stdev = 8.604
[info]   CI (99.9%): [490.417, 556.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   856.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (856.000, 856.000, 856.000), stdev = 0.001
[info]   CI (99.9%): [856.000, 856.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   539.804 ±(99.9%) 1161.970 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.804, 674.835), stdev = 301.760
[info]   CI (99.9%): [≈ 0, 1701.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   887.628 ±(99.9%) 1911.262 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 887.628, 1130.457), stdev = 496.349
[info]   CI (99.9%): [≈ 0, 2798.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.000, 5.000), stdev = 2.236
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 29.88% complete, ETA 01:19:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 524744.015 ops/s
[info] # Warmup Iteration   2: 788280.460 ops/s
[info] # Warmup Iteration   3: 789679.365 ops/s
[info] # Warmup Iteration   4: 801370.120 ops/s
[info] # Warmup Iteration   5: 810268.458 ops/s
[info] Iteration   1: 806979.714 ops/s
[info]                  ·gc.alloc.rate:                   635.842 MB/sec
[info]                  ·gc.alloc.rate.norm:              1240.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.841 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1319.955 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.299 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 808245.236 ops/s
[info]                  ·gc.alloc.rate:            636.979 MB/sec
[info]                  ·gc.alloc.rate.norm:       1240.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.657 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1319.189 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 810407.224 ops/s
[info]                  ·gc.alloc.rate:            638.371 MB/sec
[info]                  ·gc.alloc.rate.norm:       1240.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.326 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1315.670 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 811247.809 ops/s
[info]                  ·gc.alloc.rate:            639.105 MB/sec
[info]                  ·gc.alloc.rate.norm:       1240.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.401 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1314.303 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 803601.564 ops/s
[info]                  ·gc.alloc.rate:            633.043 MB/sec
[info]                  ·gc.alloc.rate.norm:       1240.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.363 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1326.816 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala":
[info]   808096.309 ±(99.9%) 11670.687 ops/s [Average]
[info]   (min, avg, max) = (803601.564, 808096.309, 811247.809), stdev = 3030.840
[info]   CI (99.9%): [796425.622, 819766.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   636.668 ±(99.9%) 9.185 MB/sec [Average]
[info]   (min, avg, max) = (633.043, 636.668, 639.105), stdev = 2.385
[info]   CI (99.9%): [627.482, 645.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1240.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1240.001, 1240.001, 1240.001), stdev = 0.001
[info]   CI (99.9%): [1240.000, 1240.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   677.318 ±(99.9%) 1.142 MB/sec [Average]
[info]   (min, avg, max) = (676.841, 677.318, 677.657), stdev = 0.297
[info]   CI (99.9%): [676.175, 678.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1319.187 ±(99.9%) 18.767 B/op [Average]
[info]   (min, avg, max) = (1314.303, 1319.187, 1326.816), stdev = 4.874
[info]   CI (99.9%): [1300.419, 1337.954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.260 ±(99.9%) 2.237 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.260, 1.299), stdev = 0.581
[info]   CI (99.9%): [≈ 0, 2.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 30.12% complete, ETA 01:19:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 972152.448 ops/s
[info] # Warmup Iteration   2: 1040053.887 ops/s
[info] # Warmup Iteration   3: 1046839.266 ops/s
[info] # Warmup Iteration   4: 1045389.291 ops/s
[info] # Warmup Iteration   5: 1052473.542 ops/s
[info] Iteration   1: 1049043.377 ops/s
[info]                  ·gc.alloc.rate:            570.676 MB/sec
[info]                  ·gc.alloc.rate.norm:       856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.288 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1017.415 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 1058474.328 ops/s
[info]                  ·gc.alloc.rate:      575.603 MB/sec
[info]                  ·gc.alloc.rate.norm: 856.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1040249.880 ops/s
[info]                  ·gc.alloc.rate:            565.679 MB/sec
[info]                  ·gc.alloc.rate.norm:       856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.008 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1025.979 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 1046874.225 ops/s
[info]                  ·gc.alloc.rate:                   569.341 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             677.393 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1018.456 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.001 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1051374.200 ops/s
[info]                  ·gc.alloc.rate:            571.764 MB/sec
[info]                  ·gc.alloc.rate.norm:       856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.019 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1015.076 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala":
[info]   1049203.202 ±(99.9%) 25562.496 ops/s [Average]
[info]   (min, avg, max) = (1040249.880, 1049203.202, 1058474.328), stdev = 6638.499
[info]   CI (99.9%): [1023640.706, 1074765.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   570.613 ±(99.9%) 13.910 MB/sec [Average]
[info]   (min, avg, max) = (565.679, 570.613, 575.603), stdev = 3.612
[info]   CI (99.9%): [556.703, 584.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   856.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (856.000, 856.000, 856.000), stdev = 0.001
[info]   CI (99.9%): [856.000, 856.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   542.342 ±(99.9%) 1167.432 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 542.342, 678.288), stdev = 303.178
[info]   CI (99.9%): [≈ 0, 1709.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   815.385 ±(99.9%) 1755.249 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 815.385, 1025.979), stdev = 455.833
[info]   CI (99.9%): [≈ 0, 2570.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.200 ±(99.9%) 1.725 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.200, 1.001), stdev = 0.448
[info]   CI (99.9%): [≈ 0, 1.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 30.35% complete, ETA 01:18:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 992370.865 ops/s
[info] # Warmup Iteration   2: 1093130.171 ops/s
[info] # Warmup Iteration   3: 1088067.383 ops/s
[info] # Warmup Iteration   4: 1092635.535 ops/s
[info] # Warmup Iteration   5: 1087357.645 ops/s
[info] Iteration   1: 1093288.186 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1093334.998 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1093077.147 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1092842.453 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1092100.531 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   1092928.663 ±(99.9%) 1934.586 ops/s [Average]
[info]   (min, avg, max) = (1092100.531, 1092928.663, 1093334.998), stdev = 502.406
[info]   CI (99.9%): [1090994.077, 1094863.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 30.59% complete, ETA 01:18:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19166.436 ops/s
[info] # Warmup Iteration   2: 29568.800 ops/s
[info] # Warmup Iteration   3: 29485.583 ops/s
[info] # Warmup Iteration   4: 29898.916 ops/s
[info] # Warmup Iteration   5: 29560.065 ops/s
[info] Iteration   1: 29812.230 ops/s
[info]                  ·gc.alloc.rate:            1562.864 MB/sec
[info]                  ·gc.alloc.rate.norm:       82488.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2032.797 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 107291.078 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 29922.535 ops/s
[info]                  ·gc.alloc.rate:            1567.944 MB/sec
[info]                  ·gc.alloc.rate.norm:       82488.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.606 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 71264.488 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 29951.676 ops/s
[info]                  ·gc.alloc.rate:                                  1569.624 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82488.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.117 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 6.129 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1358.740 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       71405.516 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                210.016 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 30123.915 ops/s
[info]                  ·gc.alloc.rate:                                  1579.010 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82488.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.099 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.175 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1363.014 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       71204.331 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 30101.833 ops/s
[info]                  ·gc.alloc.rate:                                  1577.486 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82488.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.257 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.108 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       106888.091 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson":
[info]   29982.438 ±(99.9%) 501.237 ops/s [Average]
[info]   (min, avg, max) = (29812.230, 29982.438, 30123.915), stdev = 130.170
[info]   CI (99.9%): [29481.201, 30483.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1571.386 ±(99.9%) 26.038 MB/sec [Average]
[info]   (min, avg, max) = (1562.864, 1571.386, 1579.010), stdev = 6.762
[info]   CI (99.9%): [1545.348, 1597.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   82488.014 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (82488.014, 82488.014, 82488.015), stdev = 0.001
[info]   CI (99.9%): [82488.012, 82488.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.044 ±(99.9%) 0.225 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.044, 0.117), stdev = 0.059
[info]   CI (99.9%): [≈ 0, 0.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.312 ±(99.9%) 11.819 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.312, 6.129), stdev = 3.069
[info]   CI (99.9%): [≈ 0, 14.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1630.653 ±(99.9%) 1433.601 MB/sec [Average]
[info]   (min, avg, max) = (1354.606, 1630.653, 2044.108), stdev = 372.302
[info]   CI (99.9%): [197.052, 3064.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   85610.701 ±(99.9%) 75503.820 B/op [Average]
[info]   (min, avg, max) = (71204.331, 85610.701, 107291.078), stdev = 19608.102
[info]   CI (99.9%): [10106.881, 161114.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   42.003 ±(99.9%) 361.661 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 42.003, 210.016), stdev = 93.922
[info]   CI (99.9%): [≈ 0, 403.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.800, 13.000), stdev = 4.147
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 30.82% complete, ETA 01:18:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 85496.264 ops/s
[info] # Warmup Iteration   2: 123360.344 ops/s
[info] # Warmup Iteration   3: 125627.134 ops/s
[info] # Warmup Iteration   4: 123222.053 ops/s
[info] # Warmup Iteration   5: 125581.662 ops/s
[info] Iteration   1: 124966.416 ops/s
[info]                  ·gc.alloc.rate:                   1701.847 MB/sec
[info]                  ·gc.alloc.rate.norm:              21432.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2033.821 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        25612.674 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 8.389 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 125580.185 ops/s
[info]                  ·gc.alloc.rate:                   1709.886 MB/sec
[info]                  ·gc.alloc.rate.norm:              21432.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1356.124 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        16997.888 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 41.743 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 126074.761 ops/s
[info]                  ·gc.alloc.rate:                                  1716.979 MB/sec
[info]                  ·gc.alloc.rate.norm:                             21432.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.214 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.668 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.550 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       25520.871 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 125482.681 ops/s
[info]                  ·gc.alloc.rate:            1708.884 MB/sec
[info]                  ·gc.alloc.rate.norm:       21432.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1363.039 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 17094.577 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   5: 125482.405 ops/s
[info]                  ·gc.alloc.rate:                                  1708.490 MB/sec
[info]                  ·gc.alloc.rate.norm:                             21432.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.062 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2043.973 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       25640.435 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce":
[info]   125517.289 ±(99.9%) 1516.741 ops/s [Average]
[info]   (min, avg, max) = (124966.416, 125517.289, 126074.761), stdev = 393.893
[info]   CI (99.9%): [124000.548, 127034.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   1709.217 ±(99.9%) 20.705 MB/sec [Average]
[info]   (min, avg, max) = (1701.847, 1709.217, 1716.979), stdev = 5.377
[info]   CI (99.9%): [1688.512, 1729.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   21432.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (21432.003, 21432.003, 21432.003), stdev = 0.001
[info]   CI (99.9%): [21432.003, 21432.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.044 ±(99.9%) 0.366 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.044, 0.214), stdev = 0.095
[info]   CI (99.9%): [≈ 0, 0.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.546 ±(99.9%) 4.569 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.546, 2.668), stdev = 1.187
[info]   CI (99.9%): [≈ 0, 5.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1768.301 ±(99.9%) 1436.833 MB/sec [Average]
[info]   (min, avg, max) = (1356.124, 1768.301, 2044.550), stdev = 373.141
[info]   CI (99.9%): [331.468, 3205.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   22173.289 ±(99.9%) 18023.612 B/op [Average]
[info]   (min, avg, max) = (16997.888, 22173.289, 25640.435), stdev = 4680.675
[info]   CI (99.9%): [4149.677, 40196.901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   10.027 ±(99.9%) 69.691 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.027, 41.743), stdev = 18.099
[info]   CI (99.9%): [≈ 0, 79.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.200, 12.000), stdev = 3.899
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 31.06% complete, ETA 01:17:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 99839.781 ops/s
[info] # Warmup Iteration   2: 166387.165 ops/s
[info] # Warmup Iteration   3: 163258.003 ops/s
[info] # Warmup Iteration   4: 165098.582 ops/s
[info] # Warmup Iteration   5: 164051.227 ops/s
[info] Iteration   1: 162705.822 ops/s
[info]                  ·gc.alloc.rate:            868.253 MB/sec
[info]                  ·gc.alloc.rate.norm:       8400.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.353 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6553.117 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 167587.193 ops/s
[info]                  ·gc.alloc.rate:            894.318 MB/sec
[info]                  ·gc.alloc.rate.norm:       8400.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.341 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6362.020 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 169757.303 ops/s
[info]                  ·gc.alloc.rate:            905.877 MB/sec
[info]                  ·gc.alloc.rate.norm:       8400.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.348 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6280.895 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 168736.003 ops/s
[info]                  ·gc.alloc.rate:            900.524 MB/sec
[info]                  ·gc.alloc.rate.norm:       8400.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.788 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12637.338 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 169363.272 ops/s
[info]                  ·gc.alloc.rate:            903.811 MB/sec
[info]                  ·gc.alloc.rate.norm:       8400.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.354 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6295.319 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala":
[info]   167629.919 ±(99.9%) 11060.510 ops/s [Average]
[info]   (min, avg, max) = (162705.822, 167629.919, 169757.303), stdev = 2872.379
[info]   CI (99.9%): [156569.409, 178690.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   894.556 ±(99.9%) 59.071 MB/sec [Average]
[info]   (min, avg, max) = (868.253, 894.556, 905.877), stdev = 15.341
[info]   CI (99.9%): [835.485, 953.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   8400.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8400.002, 8400.002, 8400.003), stdev = 0.001
[info]   CI (99.9%): [8400.002, 8400.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   812.837 ±(99.9%) 1166.591 MB/sec [Average]
[info]   (min, avg, max) = (677.341, 812.837, 1354.788), stdev = 302.960
[info]   CI (99.9%): [≈ 0, 1979.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   7625.738 ±(99.9%) 10795.934 B/op [Average]
[info]   (min, avg, max) = (6280.895, 7625.738, 12637.338), stdev = 2803.670
[info]   CI (99.9%): [≈ 0, 18421.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 9.000), stdev = 1.949
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 31.29% complete, ETA 01:17:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 245238.937 ops/s
[info] # Warmup Iteration   2: 254966.780 ops/s
[info] # Warmup Iteration   3: 262395.142 ops/s
[info] # Warmup Iteration   4: 263124.969 ops/s
[info] # Warmup Iteration   5: 263645.221 ops/s
[info] Iteration   1: 262336.351 ops/s
[info]                  ·gc.alloc.rate:            683.531 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.270 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8109.353 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 263386.152 ops/s
[info]                  ·gc.alloc.rate:            685.636 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.299 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4052.168 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 255302.082 ops/s
[info]                  ·gc.alloc.rate:      664.287 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 261417.081 ops/s
[info]                  ·gc.alloc.rate:            680.250 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.051 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8165.212 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 263641.932 ops/s
[info]                  ·gc.alloc.rate:            686.144 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.114 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4048.065 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala":
[info]   261216.720 ±(99.9%) 13180.337 ops/s [Average]
[info]   (min, avg, max) = (255302.082, 261216.720, 263641.932), stdev = 3422.892
[info]   CI (99.9%): [248036.383, 274397.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   679.970 ±(99.9%) 34.919 MB/sec [Average]
[info]   (min, avg, max) = (664.287, 679.970, 686.144), stdev = 9.068
[info]   CI (99.9%): [645.051, 714.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.002, 4096.002, 4096.002), stdev = 0.001
[info]   CI (99.9%): [4096.001, 4096.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   813.147 ±(99.9%) 2181.742 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 813.147, 1356.051), stdev = 566.592
[info]   CI (99.9%): [≈ 0, 2994.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   4874.959 ±(99.9%) 13116.662 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4874.959, 8165.212), stdev = 3406.356
[info]   CI (99.9%): [≈ 0, 17991.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.800, 7.000), stdev = 2.775
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 31.53% complete, ETA 01:17:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28001.058 ops/s
[info] # Warmup Iteration   2: 61106.701 ops/s
[info] # Warmup Iteration   3: 62280.292 ops/s
[info] # Warmup Iteration   4: 63143.816 ops/s
[info] # Warmup Iteration   5: 63307.754 ops/s
[info] Iteration   1: 63505.077 ops/s
[info]                  ·gc.alloc.rate:                                  2681.023 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66448.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.040 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.987 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.784 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       67557.398 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 64088.001 ops/s
[info]                  ·gc.alloc.rate:                                  2705.267 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66448.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.373 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       66941.869 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 63578.395 ops/s
[info]                  ·gc.alloc.rate:            2684.104 MB/sec
[info]                  ·gc.alloc.rate.norm:       66448.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2725.570 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 67474.532 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 63776.584 ops/s
[info]                  ·gc.alloc.rate:                                  2692.225 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66448.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.032 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.415 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       67267.202 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 64280.996 ops/s
[info]                  ·gc.alloc.rate:                                  2714.179 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66448.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.064 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.931 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       66735.718 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson":
[info]   63845.811 ±(99.9%) 1277.761 ops/s [Average]
[info]   (min, avg, max) = (63505.077, 63845.811, 64280.996), stdev = 331.830
[info]   CI (99.9%): [62568.050, 65123.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2695.360 ±(99.9%) 54.265 MB/sec [Average]
[info]   (min, avg, max) = (2681.023, 2695.360, 2714.179), stdev = 14.092
[info]   CI (99.9%): [2641.094, 2749.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   66448.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (66448.006, 66448.007, 66448.007), stdev = 0.001
[info]   CI (99.9%): [66448.006, 66448.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.009 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.040), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.217 ±(99.9%) 1.659 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.217, 0.987), stdev = 0.431
[info]   CI (99.9%): [≈ 0, 1.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2725.615 ±(99.9%) 0.922 MB/sec [Average]
[info]   (min, avg, max) = (2725.373, 2725.615, 2725.931), stdev = 0.239
[info]   CI (99.9%): [2724.693, 2726.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   67195.344 ±(99.9%) 1347.310 B/op [Average]
[info]   (min, avg, max) = (66735.718, 67195.344, 67557.398), stdev = 349.892
[info]   CI (99.9%): [65848.034, 68542.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 31.76% complete, ETA 01:17:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 137950.089 ops/s
[info] # Warmup Iteration   2: 170636.864 ops/s
[info] # Warmup Iteration   3: 180094.684 ops/s
[info] # Warmup Iteration   4: 180003.619 ops/s
[info] # Warmup Iteration   5: 180477.839 ops/s
[info] Iteration   1: 180498.851 ops/s
[info]                  ·gc.alloc.rate:            630.219 MB/sec
[info]                  ·gc.alloc.rate.norm:       5496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.009 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5912.771 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 180177.006 ops/s
[info]                  ·gc.alloc.rate:            629.298 MB/sec
[info]                  ·gc.alloc.rate.norm:       5496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.243 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5923.468 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 179663.349 ops/s
[info]                  ·gc.alloc.rate:                   627.529 MB/sec
[info]                  ·gc.alloc.rate.norm:              5496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             677.609 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5934.609 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 5.835 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 180434.702 ops/s
[info]                  ·gc.alloc.rate:            630.012 MB/sec
[info]                  ·gc.alloc.rate.norm:       5496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.027 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5914.868 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 180241.763 ops/s
[info]                  ·gc.alloc.rate:            629.372 MB/sec
[info]                  ·gc.alloc.rate.norm:       5496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.094 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5921.463 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce":
[info]   180203.134 ±(99.9%) 1269.275 ops/s [Average]
[info]   (min, avg, max) = (179663.349, 180203.134, 180498.851), stdev = 329.627
[info]   CI (99.9%): [178933.859, 181472.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   629.286 ±(99.9%) 4.080 MB/sec [Average]
[info]   (min, avg, max) = (627.529, 629.286, 630.219), stdev = 1.060
[info]   CI (99.9%): [625.206, 633.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5496.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5496.002, 5496.002, 5496.002), stdev = 0.001
[info]   CI (99.9%): [5496.002, 5496.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   677.996 ±(99.9%) 0.906 MB/sec [Average]
[info]   (min, avg, max) = (677.609, 677.996, 678.243), stdev = 0.235
[info]   CI (99.9%): [677.090, 678.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   5921.436 ±(99.9%) 33.117 B/op [Average]
[info]   (min, avg, max) = (5912.771, 5921.436, 5934.609), stdev = 8.600
[info]   CI (99.9%): [5888.319, 5954.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   1.167 ±(99.9%) 10.049 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.167, 5.835), stdev = 2.610
[info]   CI (99.9%): [≈ 0, 11.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 32.00% complete, ETA 01:16:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 329040.848 ops/s
[info] # Warmup Iteration   2: 540854.308 ops/s
[info] # Warmup Iteration   3: 530050.267 ops/s
[info] # Warmup Iteration   4: 540423.799 ops/s
[info] # Warmup Iteration   5: 539898.108 ops/s
[info] Iteration   1: 534761.531 ops/s
[info]                  ·gc.alloc.rate:            540.839 MB/sec
[info]                  ·gc.alloc.rate.norm:       1592.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.346 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1993.822 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 535409.050 ops/s
[info]                  ·gc.alloc.rate:            541.518 MB/sec
[info]                  ·gc.alloc.rate.norm:       1592.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.379 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1991.417 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 539301.749 ops/s
[info]                  ·gc.alloc.rate:            545.396 MB/sec
[info]                  ·gc.alloc.rate.norm:       1592.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.308 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1977.051 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 541349.940 ops/s
[info]                  ·gc.alloc.rate:      547.491 MB/sec
[info]                  ·gc.alloc.rate.norm: 1592.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 539863.817 ops/s
[info]                  ·gc.alloc.rate:            546.100 MB/sec
[info]                  ·gc.alloc.rate.norm:       1592.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.451 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1974.917 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala":
[info]   538137.217 ±(99.9%) 11143.111 ops/s [Average]
[info]   (min, avg, max) = (534761.531, 538137.217, 541349.940), stdev = 2893.830
[info]   CI (99.9%): [526994.106, 549280.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   544.269 ±(99.9%) 11.282 MB/sec [Average]
[info]   (min, avg, max) = (540.839, 544.269, 547.491), stdev = 2.930
[info]   CI (99.9%): [532.987, 555.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1592.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1592.001, 1592.001, 1592.001), stdev = 0.001
[info]   CI (99.9%): [1592.001, 1592.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   541.897 ±(99.9%) 1166.474 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 541.897, 677.451), stdev = 302.930
[info]   CI (99.9%): [≈ 0, 1708.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1587.442 ±(99.9%) 3417.240 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1587.442, 1993.822), stdev = 887.446
[info]   CI (99.9%): [≈ 0, 5004.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.000, 6.000), stdev = 2.345
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 32.24% complete, ETA 01:16:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 444178.074 ops/s
[info] # Warmup Iteration   2: 468959.706 ops/s
[info] # Warmup Iteration   3: 475076.733 ops/s
[info] # Warmup Iteration   4: 474110.044 ops/s
[info] # Warmup Iteration   5: 477333.817 ops/s
[info] Iteration   1: 474720.521 ops/s
[info]                  ·gc.alloc.rate:            364.294 MB/sec
[info]                  ·gc.alloc.rate.norm:       1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.005 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2248.267 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 474946.527 ops/s
[info]                  ·gc.alloc.rate:      364.569 MB/sec
[info]                  ·gc.alloc.rate.norm: 1208.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 473893.746 ops/s
[info]                  ·gc.alloc.rate:            363.643 MB/sec
[info]                  ·gc.alloc.rate.norm:       1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.975 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2252.190 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 471185.564 ops/s
[info]                  ·gc.alloc.rate:      361.603 MB/sec
[info]                  ·gc.alloc.rate.norm: 1208.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 473957.310 ops/s
[info]                  ·gc.alloc.rate:            363.728 MB/sec
[info]                  ·gc.alloc.rate.norm:       1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.040 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2251.881 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala":
[info]   473740.734 ±(99.9%) 5780.178 ops/s [Average]
[info]   (min, avg, max) = (471185.564, 473740.734, 474946.527), stdev = 1501.094
[info]   CI (99.9%): [467960.556, 479520.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   363.567 ±(99.9%) 4.483 MB/sec [Average]
[info]   (min, avg, max) = (361.603, 363.567, 364.569), stdev = 1.164
[info]   CI (99.9%): [359.084, 368.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1208.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1208.001, 1208.001, 1208.001), stdev = 0.001
[info]   CI (99.9%): [1208.001, 1208.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   406.804 ±(99.9%) 1429.973 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 406.804, 678.040), stdev = 371.359
[info]   CI (99.9%): [≈ 0, 1836.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1350.468 ±(99.9%) 4747.088 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1350.468, 2252.190), stdev = 1232.804
[info]   CI (99.9%): [≈ 0, 6097.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 32.47% complete, ETA 01:16:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 450327.874 ops/s
[info] # Warmup Iteration   2: 497609.518 ops/s
[info] # Warmup Iteration   3: 499603.990 ops/s
[info] # Warmup Iteration   4: 499149.434 ops/s
[info] # Warmup Iteration   5: 490196.912 ops/s
[info] Iteration   1: 499109.579 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 499241.907 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 499273.008 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 499578.487 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 500649.455 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   499570.487 ±(99.9%) 2414.825 ops/s [Average]
[info]   (min, avg, max) = (499109.579, 499570.487, 500649.455), stdev = 627.122
[info]   CI (99.9%): [497155.662, 501985.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 32.71% complete, ETA 01:16:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 176828.365 ops/s
[info] # Warmup Iteration   2: 287645.618 ops/s
[info] # Warmup Iteration   3: 301090.143 ops/s
[info] # Warmup Iteration   4: 308473.187 ops/s
[info] # Warmup Iteration   5: 309186.231 ops/s
[info] Iteration   1: 306606.864 ops/s
[info]                  ·gc.alloc.rate:            841.541 MB/sec
[info]                  ·gc.alloc.rate.norm:       4320.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.701 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3473.804 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 306385.494 ops/s
[info]                  ·gc.alloc.rate:            840.783 MB/sec
[info]                  ·gc.alloc.rate.norm:       4320.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.268 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6953.186 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 308174.006 ops/s
[info]                  ·gc.alloc.rate:                   845.749 MB/sec
[info]                  ·gc.alloc.rate.norm:              4320.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.682 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3456.425 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.402 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 308903.033 ops/s
[info]                  ·gc.alloc.rate:            847.939 MB/sec
[info]                  ·gc.alloc.rate.norm:       4320.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.474 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3451.529 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 308858.333 ops/s
[info]                  ·gc.alloc.rate:                   847.699 MB/sec
[info]                  ·gc.alloc.rate.norm:              4320.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.749 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3448.817 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.395 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson":
[info]   307785.546 ±(99.9%) 4676.587 ops/s [Average]
[info]   (min, avg, max) = (306385.494, 307785.546, 308903.033), stdev = 1214.495
[info]   CI (99.9%): [303108.960, 312462.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   844.742 ±(99.9%) 13.044 MB/sec [Average]
[info]   (min, avg, max) = (840.783, 844.742, 847.939), stdev = 3.388
[info]   CI (99.9%): [831.698, 857.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4320.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4320.001, 4320.001, 4320.001), stdev = 0.001
[info]   CI (99.9%): [4320.001, 4320.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   812.175 ±(99.9%) 1164.744 MB/sec [Average]
[info]   (min, avg, max) = (676.682, 812.175, 1353.268), stdev = 302.480
[info]   CI (99.9%): [≈ 0, 1976.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   4156.752 ±(99.9%) 6019.650 B/op [Average]
[info]   (min, avg, max) = (3448.817, 4156.752, 6953.186), stdev = 1563.284
[info]   CI (99.9%): [≈ 0, 10176.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   1.359 ±(99.9%) 7.167 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.359, 3.402), stdev = 1.861
[info]   CI (99.9%): [≈ 0, 8.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 11.000), stdev = 2.915
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 32.94% complete, ETA 01:15:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6498.656 ops/s
[info] # Warmup Iteration   2: 9015.281 ops/s
[info] # Warmup Iteration   3: 9031.194 ops/s
[info] # Warmup Iteration   4: 8934.953 ops/s
[info] # Warmup Iteration   5: 9185.378 ops/s
[info] Iteration   1: 9133.289 ops/s
[info]                  ·gc.alloc.rate:            1108.505 MB/sec
[info]                  ·gc.alloc.rate.norm:       191040.045 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.070 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 233705.609 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 9186.735 ops/s
[info]                  ·gc.alloc.rate:            1115.048 MB/sec
[info]                  ·gc.alloc.rate.norm:       191040.044 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.029 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 116166.108 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 9121.493 ops/s
[info]                  ·gc.alloc.rate:            1107.082 MB/sec
[info]                  ·gc.alloc.rate.norm:       191040.083 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.962 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 233987.367 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 9132.651 ops/s
[info]                  ·gc.alloc.rate:            1108.801 MB/sec
[info]                  ·gc.alloc.rate.norm:       191040.045 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.581 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 233731.195 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 9204.620 ops/s
[info]                  ·gc.alloc.rate:            1117.220 MB/sec
[info]                  ·gc.alloc.rate.norm:       191040.044 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.022 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 115938.999 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce":
[info]   9155.758 ±(99.9%) 143.562 ops/s [Average]
[info]   (min, avg, max) = (9121.493, 9155.758, 9204.620), stdev = 37.283
[info]   CI (99.9%): [9012.195, 9299.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1111.331 ±(99.9%) 17.322 MB/sec [Average]
[info]   (min, avg, max) = (1107.082, 1111.331, 1117.220), stdev = 4.499
[info]   CI (99.9%): [1094.009, 1128.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   191040.052 ±(99.9%) 0.067 B/op [Average]
[info]   (min, avg, max) = (191040.044, 191040.052, 191040.083), stdev = 0.017
[info]   CI (99.9%): [191039.985, 191040.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1084.933 ±(99.9%) 1430.336 MB/sec [Average]
[info]   (min, avg, max) = (678.022, 1084.933, 1356.581), stdev = 371.454
[info]   CI (99.9%): [≈ 0, 2515.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   186705.856 ±(99.9%) 248356.866 B/op [Average]
[info]   (min, avg, max) = (115938.999, 186705.856, 233987.367), stdev = 64497.489
[info]   CI (99.9%): [≈ 0, 435062.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 8.000), stdev = 2.345
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 33.18% complete, ETA 01:15:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5077.889 ops/s
[info] # Warmup Iteration   2: 8990.739 ops/s
[info] # Warmup Iteration   3: 9261.303 ops/s
[info] # Warmup Iteration   4: 9300.489 ops/s
[info] # Warmup Iteration   5: 9268.340 ops/s
[info] Iteration   1: 9318.680 ops/s
[info]                  ·gc.alloc.rate:            1104.499 MB/sec
[info]                  ·gc.alloc.rate.norm:       186576.047 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.279 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 114408.518 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 9275.075 ops/s
[info]                  ·gc.alloc.rate:                   1099.466 MB/sec
[info]                  ·gc.alloc.rate.norm:              186576.047 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.116 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        229789.265 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 113.030 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 9199.957 ops/s
[info]                  ·gc.alloc.rate:            1090.481 MB/sec
[info]                  ·gc.alloc.rate.norm:       186576.044 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.661 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 231776.090 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 9305.052 ops/s
[info]                  ·gc.alloc.rate:            1103.012 MB/sec
[info]                  ·gc.alloc.rate.norm:       186576.047 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.312 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 114568.306 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 9201.919 ops/s
[info]                  ·gc.alloc.rate:                   1090.922 MB/sec
[info]                  ·gc.alloc.rate.norm:              186576.048 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.915 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        231725.726 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 683.557 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala":
[info]   9260.137 ±(99.9%) 216.791 ops/s [Average]
[info]   (min, avg, max) = (9199.957, 9260.137, 9318.680), stdev = 56.300
[info]   CI (99.9%): [9043.345, 9476.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1097.676 ±(99.9%) 25.515 MB/sec [Average]
[info]   (min, avg, max) = (1090.481, 1097.676, 1104.499), stdev = 6.626
[info]   CI (99.9%): [1072.161, 1123.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   186576.047 ±(99.9%) 0.005 B/op [Average]
[info]   (min, avg, max) = (186576.044, 186576.047, 186576.048), stdev = 0.001
[info]   CI (99.9%): [186576.041, 186576.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1083.657 ±(99.9%) 1428.416 MB/sec [Average]
[info]   (min, avg, max) = (677.279, 1083.657, 1354.915), stdev = 370.955
[info]   CI (99.9%): [≈ 0, 2512.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   184453.581 ±(99.9%) 245956.866 B/op [Average]
[info]   (min, avg, max) = (114408.518, 184453.581, 231776.090), stdev = 63874.217
[info]   CI (99.9%): [≈ 0, 430410.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.689 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.997), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   159.317 ±(99.9%) 1144.094 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 159.317, 683.557), stdev = 297.118
[info]   CI (99.9%): [≈ 0, 1303.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.600, 10.000), stdev = 2.408
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 33.41% complete, ETA 01:15:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 176519.483 ops/s
[info] # Warmup Iteration   2: 193225.034 ops/s
[info] # Warmup Iteration   3: 195057.151 ops/s
[info] # Warmup Iteration   4: 196800.167 ops/s
[info] # Warmup Iteration   5: 195516.685 ops/s
[info] Iteration   1: 196333.953 ops/s
[info]                  ·gc.alloc.rate:            1277.651 MB/sec
[info]                  ·gc.alloc.rate.norm:       10240.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1357.844 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10882.729 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 196092.466 ops/s
[info]                  ·gc.alloc.rate:            1276.026 MB/sec
[info]                  ·gc.alloc.rate.norm:       10240.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.889 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5448.023 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 195557.448 ops/s
[info]                  ·gc.alloc.rate:            1272.373 MB/sec
[info]                  ·gc.alloc.rate.norm:       10240.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1357.600 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10925.906 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 195535.663 ops/s
[info]                  ·gc.alloc.rate:                   1272.646 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1358.030 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        10927.023 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.665 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 21.447 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 195849.269 ops/s
[info]                  ·gc.alloc.rate:                                  1274.269 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10240.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.094 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.755 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.967 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10952.779 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala":
[info]   195873.760 ±(99.9%) 1326.340 ops/s [Average]
[info]   (min, avg, max) = (195535.663, 195873.760, 196333.953), stdev = 344.446
[info]   CI (99.9%): [194547.420, 197200.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1274.593 ±(99.9%) 8.659 MB/sec [Average]
[info]   (min, avg, max) = (1272.373, 1274.593, 1277.651), stdev = 2.249
[info]   CI (99.9%): [1265.934, 1283.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10240.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10240.002, 10240.002, 10240.002), stdev = 0.001
[info]   CI (99.9%): [10240.002, 10240.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.019 ±(99.9%) 0.162 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.094), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.151 ±(99.9%) 1.300 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.151, 0.755), stdev = 0.338
[info]   CI (99.9%): [≈ 0, 1.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1223.066 ±(99.9%) 1171.414 MB/sec [Average]
[info]   (min, avg, max) = (678.889, 1223.066, 1362.967), stdev = 304.213
[info]   CI (99.9%): [51.652, 2394.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   9827.292 ±(99.9%) 9427.204 B/op [Average]
[info]   (min, avg, max) = (5448.023, 9827.292, 10952.779), stdev = 2448.215
[info]   CI (99.9%): [400.088, 19254.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.533 ±(99.9%) 4.590 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.533, 2.665), stdev = 1.192
[info]   CI (99.9%): [≈ 0, 5.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   4.289 ±(99.9%) 36.932 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.289, 21.447), stdev = 9.591
[info]   CI (99.9%): [≈ 0, 41.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 7.000), stdev = 1.789
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 33.65% complete, ETA 01:15:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3452.391 ops/s
[info] # Warmup Iteration   2: 6721.494 ops/s
[info] # Warmup Iteration   3: 7024.721 ops/s
[info] # Warmup Iteration   4: 7050.750 ops/s
[info] # Warmup Iteration   5: 7081.475 ops/s
[info] Iteration   1: 6900.083 ops/s
[info]                  ·gc.alloc.rate:                   1285.120 MB/sec
[info]                  ·gc.alloc.rate.norm:              293112.059 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.167 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        308860.476 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 151.924 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 6909.441 ops/s
[info]                  ·gc.alloc.rate:            1286.576 MB/sec
[info]                  ·gc.alloc.rate.norm:       293112.064 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.602 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 308609.982 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 7059.790 ops/s
[info]                  ·gc.alloc.rate:                   1314.825 MB/sec
[info]                  ·gc.alloc.rate.norm:              293112.062 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.079 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        301862.788 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 148.481 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 6991.851 ops/s
[info]                  ·gc.alloc.rate:                                  1302.059 MB/sec
[info]                  ·gc.alloc.rate.norm:                             293112.058 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.072 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 16.270 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1358.631 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       305847.160 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                899.550 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 6997.610 ops/s
[info]                  ·gc.alloc.rate:                                  1303.118 MB/sec
[info]                  ·gc.alloc.rate.norm:                             293114.062 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.017 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.913 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.557 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       306483.785 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson":
[info]   6971.755 ±(99.9%) 257.176 ops/s [Average]
[info]   (min, avg, max) = (6900.083, 6971.755, 7059.790), stdev = 66.788
[info]   CI (99.9%): [6714.579, 7228.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1298.340 ±(99.9%) 48.001 MB/sec [Average]
[info]   (min, avg, max) = (1285.120, 1298.340, 1314.825), stdev = 12.466
[info]   CI (99.9%): [1250.338, 1346.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   293112.461 ±(99.9%) 3.446 B/op [Average]
[info]   (min, avg, max) = (293112.058, 293112.461, 293114.062), stdev = 0.895
[info]   CI (99.9%): [293109.015, 293115.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.018 ±(99.9%) 0.121 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.072), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   4.037 ±(99.9%) 27.129 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.037, 16.270), stdev = 7.045
[info]   CI (99.9%): [≈ 0, 31.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1356.807 ±(99.9%) 14.364 MB/sec [Average]
[info]   (min, avg, max) = (1354.079, 1356.807, 1362.557), stdev = 3.730
[info]   CI (99.9%): [1342.443, 1371.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   306332.838 ±(99.9%) 10859.628 B/op [Average]
[info]   (min, avg, max) = (301862.788, 306332.838, 308860.476), stdev = 2820.211
[info]   CI (99.9%): [295473.211, 317192.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 6.437 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 3.996), stdev = 1.672
[info]   CI (99.9%): [≈ 0, 7.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   239.991 ±(99.9%) 1448.912 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 239.991, 899.550), stdev = 376.278
[info]   CI (99.9%): [≈ 0, 1688.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.200, 9.000), stdev = 2.683
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 33.88% complete, ETA 01:14:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14772.598 ops/s
[info] # Warmup Iteration   2: 20073.395 ops/s
[info] # Warmup Iteration   3: 20775.577 ops/s
[info] # Warmup Iteration   4: 20500.122 ops/s
[info] # Warmup Iteration   5: 20322.485 ops/s
[info] Iteration   1: 20493.575 ops/s
[info]                  ·gc.alloc.rate:            860.747 MB/sec
[info]                  ·gc.alloc.rate.norm:       66093.377 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.227 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 52078.371 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 20798.383 ops/s
[info]                  ·gc.alloc.rate:            873.142 MB/sec
[info]                  ·gc.alloc.rate.norm:       66080.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.043 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 51314.795 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 20709.178 ops/s
[info]                  ·gc.alloc.rate:            869.420 MB/sec
[info]                  ·gc.alloc.rate.norm:       66080.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.054 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 51535.285 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 20823.720 ops/s
[info]                  ·gc.alloc.rate:            874.238 MB/sec
[info]                  ·gc.alloc.rate.norm:       66080.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.159 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 102506.397 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 20770.554 ops/s
[info]                  ·gc.alloc.rate:            871.993 MB/sec
[info]                  ·gc.alloc.rate.norm:       66080.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.064 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 51383.959 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce":
[info]   20719.082 ±(99.9%) 512.434 ops/s [Average]
[info]   (min, avg, max) = (20493.575, 20719.082, 20823.720), stdev = 133.078
[info]   CI (99.9%): [20206.648, 21231.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   869.908 ±(99.9%) 20.889 MB/sec [Average]
[info]   (min, avg, max) = (860.747, 869.908, 874.238), stdev = 5.425
[info]   CI (99.9%): [849.019, 890.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   66082.691 ±(99.9%) 23.002 B/op [Average]
[info]   (min, avg, max) = (66080.020, 66082.691, 66093.377), stdev = 5.974
[info]   CI (99.9%): [66059.690, 66105.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   813.709 ±(99.9%) 1167.663 MB/sec [Average]
[info]   (min, avg, max) = (678.043, 813.709, 1356.159), stdev = 303.238
[info]   CI (99.9%): [≈ 0, 1981.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   61763.762 ±(99.9%) 87709.184 B/op [Average]
[info]   (min, avg, max) = (51314.795, 61763.762, 102506.397), stdev = 22777.797
[info]   CI (99.9%): [≈ 0, 149472.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 7.000), stdev = 1.342
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 34.12% complete, ETA 01:14:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14644.488 ops/s
[info] # Warmup Iteration   2: 25231.542 ops/s
[info] # Warmup Iteration   3: 25236.353 ops/s
[info] # Warmup Iteration   4: 25717.137 ops/s
[info] # Warmup Iteration   5: 25796.121 ops/s
[info] Iteration   1: 25664.590 ops/s
[info]                  ·gc.alloc.rate:                   987.237 MB/sec
[info]                  ·gc.alloc.rate.norm:              60552.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.007 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        83047.840 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 40.850 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 25752.607 ops/s
[info]                  ·gc.alloc.rate:            990.611 MB/sec
[info]                  ·gc.alloc.rate.norm:       60552.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.303 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 41400.799 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 25623.840 ops/s
[info]                  ·gc.alloc.rate:            985.669 MB/sec
[info]                  ·gc.alloc.rate.norm:       60552.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.686 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 83221.616 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 25621.775 ops/s
[info]                  ·gc.alloc.rate:                   985.616 MB/sec
[info]                  ·gc.alloc.rate.norm:              60552.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.693 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        41573.137 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 40.918 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 25710.786 ops/s
[info]                  ·gc.alloc.rate:            989.139 MB/sec
[info]                  ·gc.alloc.rate.norm:       60552.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.402 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 41468.416 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala":
[info]   25674.719 ±(99.9%) 218.350 ops/s [Average]
[info]   (min, avg, max) = (25621.775, 25674.719, 25752.607), stdev = 56.705
[info]   CI (99.9%): [25456.369, 25893.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   987.654 ±(99.9%) 8.440 MB/sec [Average]
[info]   (min, avg, max) = (985.616, 987.654, 990.611), stdev = 2.192
[info]   CI (99.9%): [979.215, 996.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   60552.016 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (60552.016, 60552.016, 60552.017), stdev = 0.001
[info]   CI (99.9%): [60552.014, 60552.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   948.018 ±(99.9%) 1428.302 MB/sec [Average]
[info]   (min, avg, max) = (676.693, 948.018, 1354.686), stdev = 370.925
[info]   CI (99.9%): [≈ 0, 2376.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   58142.362 ±(99.9%) 87852.326 B/op [Average]
[info]   (min, avg, max) = (41400.799, 58142.362, 83221.616), stdev = 22814.970
[info]   CI (99.9%): [≈ 0, 145994.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   16.354 ±(99.9%) 86.228 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16.354, 40.918), stdev = 22.393
[info]   CI (99.9%): [≈ 0, 102.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 9.000), stdev = 2.739
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 34.35% complete, ETA 01:14:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 748463.339 ops/s
[info] # Warmup Iteration   2: 896471.410 ops/s
[info] # Warmup Iteration   3: 884808.382 ops/s
[info] # Warmup Iteration   4: 883763.479 ops/s
[info] # Warmup Iteration   5: 892216.021 ops/s
[info] Iteration   1: 898083.266 ops/s
[info]                  ·gc.alloc.rate:            1620.488 MB/sec
[info]                  ·gc.alloc.rate.norm:       2840.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.850 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2374.454 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 901114.756 ops/s
[info]                  ·gc.alloc.rate:                   1625.878 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2032.170 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3549.691 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 6.981 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 903067.506 ops/s
[info]                  ·gc.alloc.rate:                                  1629.787 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2840.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.120 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.209 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1363.097 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2375.278 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 904185.915 ops/s
[info]                  ·gc.alloc.rate:                                  1631.305 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2840.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.021 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.036 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.029 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3558.528 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 905912.157 ops/s
[info]                  ·gc.alloc.rate:                                  1634.554 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2840.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.754 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2367.754 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala":
[info]   902472.720 ±(99.9%) 11588.760 ops/s [Average]
[info]   (min, avg, max) = (898083.266, 902472.720, 905912.157), stdev = 3009.564
[info]   CI (99.9%): [890883.960, 914061.481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1628.402 ±(99.9%) 20.843 MB/sec [Average]
[info]   (min, avg, max) = (1620.488, 1628.402, 1634.554), stdev = 5.413
[info]   CI (99.9%): [1607.560, 1649.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2840.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2840.000, 2840.000, 2840.000), stdev = 0.001
[info]   CI (99.9%): [2840.000, 2840.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.028 ±(99.9%) 0.201 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.120), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.049 ±(99.9%) 0.350 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.049, 0.209), stdev = 0.091
[info]   CI (99.9%): [≈ 0, 0.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1631.380 ±(99.9%) 1429.824 MB/sec [Average]
[info]   (min, avg, max) = (1354.850, 1631.380, 2044.029), stdev = 371.321
[info]   CI (99.9%): [201.556, 3061.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   2845.141 ±(99.9%) 2492.178 B/op [Average]
[info]   (min, avg, max) = (2367.754, 2845.141, 3558.528), stdev = 647.211
[info]   CI (99.9%): [352.963, 5337.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.396 ±(99.9%) 12.021 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.396, 6.981), stdev = 3.122
[info]   CI (99.9%): [≈ 0, 13.417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.200, 10.000), stdev = 3.271
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 34.59% complete, ETA 01:13:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 526712.411 ops/s
[info] # Warmup Iteration   2: 578880.789 ops/s
[info] # Warmup Iteration   3: 557537.204 ops/s
[info] # Warmup Iteration   4: 557742.754 ops/s
[info] # Warmup Iteration   5: 554074.453 ops/s
[info] Iteration   1: 557623.703 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 557495.074 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 557524.569 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 557871.112 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 557423.846 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   557587.661 ±(99.9%) 669.812 ops/s [Average]
[info]   (min, avg, max) = (557423.846, 557587.661, 557871.112), stdev = 173.948
[info]   CI (99.9%): [556917.849, 558257.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 34.82% complete, ETA 01:13:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16991.094 ops/s
[info] # Warmup Iteration   2: 23770.442 ops/s
[info] # Warmup Iteration   3: 23657.627 ops/s
[info] # Warmup Iteration   4: 23500.339 ops/s
[info] # Warmup Iteration   5: 23719.568 ops/s
[info] Iteration   1: 23818.872 ops/s
[info]                  ·gc.alloc.rate:            1004.912 MB/sec
[info]                  ·gc.alloc.rate.norm:       66416.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.298 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 44763.539 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 23842.435 ops/s
[info]                  ·gc.alloc.rate:            1006.257 MB/sec
[info]                  ·gc.alloc.rate.norm:       66416.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.522 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 44718.488 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 23714.876 ops/s
[info]                  ·gc.alloc.rate:            1000.527 MB/sec
[info]                  ·gc.alloc.rate.norm:       66416.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.484 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 89912.044 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 23855.749 ops/s
[info]                  ·gc.alloc.rate:            1006.597 MB/sec
[info]                  ·gc.alloc.rate.norm:       66416.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.381 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 44694.124 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 23737.038 ops/s
[info]                  ·gc.alloc.rate:            1001.607 MB/sec
[info]                  ·gc.alloc.rate.norm:       66416.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.690 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 89828.732 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson":
[info]   23793.794 ±(99.9%) 245.677 ops/s [Average]
[info]   (min, avg, max) = (23714.876, 23793.794, 23855.749), stdev = 63.802
[info]   CI (99.9%): [23548.117, 24039.472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1003.980 ±(99.9%) 10.625 MB/sec [Average]
[info]   (min, avg, max) = (1000.527, 1003.980, 1006.597), stdev = 2.759
[info]   CI (99.9%): [993.355, 1014.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   66416.018 ±(99.9%) 0.003 B/op [Average]
[info]   (min, avg, max) = (66416.017, 66416.018, 66416.019), stdev = 0.001
[info]   CI (99.9%): [66416.015, 66416.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   948.275 ±(99.9%) 1428.244 MB/sec [Average]
[info]   (min, avg, max) = (677.298, 948.275, 1354.690), stdev = 370.910
[info]   CI (99.9%): [≈ 0, 2376.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   62783.385 ±(99.9%) 95214.746 B/op [Average]
[info]   (min, avg, max) = (44694.124, 62783.385, 89912.044), stdev = 24726.967
[info]   CI (99.9%): [≈ 0, 157998.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 10.000), stdev = 2.881
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 35.06% complete, ETA 01:13:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18111.949 ops/s
[info] # Warmup Iteration   2: 23958.978 ops/s
[info] # Warmup Iteration   3: 24019.099 ops/s
[info] # Warmup Iteration   4: 24551.504 ops/s
[info] # Warmup Iteration   5: 24492.242 ops/s
[info] Iteration   1: 24578.958 ops/s
[info]                  ·gc.alloc.rate:            1334.278 MB/sec
[info]                  ·gc.alloc.rate.norm:       85440.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.158 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 86841.065 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 24560.373 ops/s
[info]                  ·gc.alloc.rate:            1333.406 MB/sec
[info]                  ·gc.alloc.rate.norm:       85440.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.319 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 86908.233 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 24538.648 ops/s
[info]                  ·gc.alloc.rate:            1332.020 MB/sec
[info]                  ·gc.alloc.rate.norm:       85440.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.124 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 86986.136 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 24594.962 ops/s
[info]                  ·gc.alloc.rate:                                  1335.270 MB/sec
[info]                  ·gc.alloc.rate.norm:                             85440.018 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.024 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.537 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1359.559 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       86994.172 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                213.117 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 24674.031 ops/s
[info]                  ·gc.alloc.rate:                                  1339.580 MB/sec
[info]                  ·gc.alloc.rate.norm:                             85440.017 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.061 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.860 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1363.022 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       86935.185 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce":
[info]   24589.395 ±(99.9%) 199.349 ops/s [Average]
[info]   (min, avg, max) = (24538.648, 24589.395, 24674.031), stdev = 51.770
[info]   CI (99.9%): [24390.045, 24788.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate":
[info]   1334.911 ±(99.9%) 11.052 MB/sec [Average]
[info]   (min, avg, max) = (1332.020, 1334.911, 1339.580), stdev = 2.870
[info]   CI (99.9%): [1323.859, 1345.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   85440.017 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (85440.017, 85440.017, 85440.018), stdev = 0.001
[info]   CI (99.9%): [85440.015, 85440.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.017 ±(99.9%) 0.102 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.061), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.079 ±(99.9%) 6.511 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.079, 3.860), stdev = 1.691
[info]   CI (99.9%): [≈ 0, 7.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1358.237 ±(99.9%) 11.728 MB/sec [Average]
[info]   (min, avg, max) = (1356.124, 1358.237, 1363.022), stdev = 3.046
[info]   CI (99.9%): [1346.508, 1369.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   86932.958 ±(99.9%) 240.747 B/op [Average]
[info]   (min, avg, max) = (86841.065, 86932.958, 86994.172), stdev = 62.521
[info]   CI (99.9%): [86692.211, 87173.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   42.623 ±(99.9%) 367.000 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 42.623, 213.117), stdev = 95.309
[info]   CI (99.9%): [≈ 0, 409.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.000, 8.000), stdev = 2.345
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 35.29% complete, ETA 01:13:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14259.156 ops/s
[info] # Warmup Iteration   2: 26157.288 ops/s
[info] # Warmup Iteration   3: 26411.619 ops/s
[info] # Warmup Iteration   4: 26593.421 ops/s
[info] # Warmup Iteration   5: 26889.374 ops/s
[info] Iteration   1: 27161.758 ops/s
[info]                  ·gc.alloc.rate:            1240.531 MB/sec
[info]                  ·gc.alloc.rate.norm:       71888.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.377 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 39253.572 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 26941.635 ops/s
[info]                  ·gc.alloc.rate:            1230.882 MB/sec
[info]                  ·gc.alloc.rate.norm:       71888.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.191 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 79148.090 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 26970.492 ops/s
[info]                  ·gc.alloc.rate:            1232.395 MB/sec
[info]                  ·gc.alloc.rate.norm:       71888.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.397 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 79063.004 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 27000.361 ops/s
[info]                  ·gc.alloc.rate:                   1233.318 MB/sec
[info]                  ·gc.alloc.rate.norm:              71888.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.906 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        78975.175 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 232.965 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 27174.507 ops/s
[info]                  ·gc.alloc.rate:                                  1241.015 MB/sec
[info]                  ·gc.alloc.rate.norm:                             71888.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.191 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 11.041 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.677 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       78935.446 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala":
[info]   27049.751 ±(99.9%) 424.095 ops/s [Average]
[info]   (min, avg, max) = (26941.635, 27049.751, 27174.507), stdev = 110.136
[info]   CI (99.9%): [26625.655, 27473.846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1235.628 ±(99.9%) 18.405 MB/sec [Average]
[info]   (min, avg, max) = (1230.882, 1235.628, 1241.015), stdev = 4.780
[info]   CI (99.9%): [1217.224, 1254.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   71888.015 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (71888.015, 71888.015, 71888.016), stdev = 0.001
[info]   CI (99.9%): [71888.013, 71888.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.038 ±(99.9%) 0.328 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.038, 0.191), stdev = 0.085
[info]   CI (99.9%): [≈ 0, 0.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.208 ±(99.9%) 19.014 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.208, 11.041), stdev = 4.938
[info]   CI (99.9%): [≈ 0, 21.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1221.110 ±(99.9%) 1170.493 MB/sec [Average]
[info]   (min, avg, max) = (677.377, 1221.110, 1362.677), stdev = 303.973
[info]   CI (99.9%): [50.617, 2391.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   71075.057 ±(99.9%) 68498.877 B/op [Average]
[info]   (min, avg, max) = (39253.572, 71075.057, 79148.090), stdev = 17788.941
[info]   CI (99.9%): [2576.181, 139573.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   46.593 ±(99.9%) 401.180 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 46.593, 232.965), stdev = 104.185
[info]   CI (99.9%): [≈ 0, 447.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.000, 10.000), stdev = 3.240
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 35.53% complete, ETA 01:12:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 313098.941 ops/s
[info] # Warmup Iteration   2: 343178.917 ops/s
[info] # Warmup Iteration   3: 345758.361 ops/s
[info] # Warmup Iteration   4: 344113.303 ops/s
[info] # Warmup Iteration   5: 346312.181 ops/s
[info] Iteration   1: 346293.080 ops/s
[info]                  ·gc.alloc.rate:            901.132 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.699 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3084.955 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 343226.398 ops/s
[info]                  ·gc.alloc.rate:            893.403 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1357.810 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6225.178 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 342068.740 ops/s
[info]                  ·gc.alloc.rate:            890.251 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.804 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3123.143 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 342019.907 ops/s
[info]                  ·gc.alloc.rate:            890.054 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.713 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3123.417 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 339948.327 ops/s
[info]                  ·gc.alloc.rate:            884.599 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1357.392 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6285.195 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala":
[info]   342711.290 ±(99.9%) 8952.105 ops/s [Average]
[info]   (min, avg, max) = (339948.327, 342711.290, 346293.080), stdev = 2324.833
[info]   CI (99.9%): [333759.185, 351663.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   891.888 ±(99.9%) 23.336 MB/sec [Average]
[info]   (min, avg, max) = (884.599, 891.888, 901.132), stdev = 6.060
[info]   CI (99.9%): [868.552, 915.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.001, 4096.001, 4096.001), stdev = 0.001
[info]   CI (99.9%): [4096.001, 4096.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   950.284 ±(99.9%) 1431.778 MB/sec [Average]
[info]   (min, avg, max) = (678.699, 950.284, 1357.810), stdev = 371.828
[info]   CI (99.9%): [≈ 0, 2382.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   4368.378 ±(99.9%) 6633.177 B/op [Average]
[info]   (min, avg, max) = (3084.955, 4368.378, 6285.195), stdev = 1722.615
[info]   CI (99.9%): [≈ 0, 11001.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 8.000), stdev = 2.490
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 35.76% complete, ETA 01:12:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7363.872 ops/s
[info] # Warmup Iteration   2: 15426.857 ops/s
[info] # Warmup Iteration   3: 15802.707 ops/s
[info] # Warmup Iteration   4: 15734.814 ops/s
[info] # Warmup Iteration   5: 15685.192 ops/s
[info] Iteration   1: 15693.898 ops/s
[info]                  ·gc.alloc.rate:                   1615.638 MB/sec
[info]                  ·gc.alloc.rate.norm:              162040.026 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2031.444 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        203743.187 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 66.801 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 15604.861 ops/s
[info]                  ·gc.alloc.rate:                   1606.610 MB/sec
[info]                  ·gc.alloc.rate.norm:              162040.033 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.012 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        136563.421 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 470.213 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 15588.009 ops/s
[info]                  ·gc.alloc.rate:                                  1604.678 MB/sec
[info]                  ·gc.alloc.rate.norm:                             162040.028 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.066 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 6.617 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.690 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       137604.162 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 15792.946 ops/s
[info]                  ·gc.alloc.rate:                                  1625.960 MB/sec
[info]                  ·gc.alloc.rate.norm:                             162040.026 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.015 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.456 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.136 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       203714.613 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 15897.717 ops/s
[info]                  ·gc.alloc.rate:            1636.635 MB/sec
[info]                  ·gc.alloc.rate.norm:       162040.026 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.818 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 134929.968 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson":
[info]   15715.486 ±(99.9%) 502.662 ops/s [Average]
[info]   (min, avg, max) = (15588.009, 15715.486, 15897.717), stdev = 130.540
[info]   CI (99.9%): [15212.824, 16218.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1617.904 ±(99.9%) 51.782 MB/sec [Average]
[info]   (min, avg, max) = (1604.678, 1617.904, 1636.635), stdev = 13.448
[info]   CI (99.9%): [1566.122, 1669.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   162040.028 ±(99.9%) 0.012 B/op [Average]
[info]   (min, avg, max) = (162040.026, 162040.028, 162040.033), stdev = 0.003
[info]   CI (99.9%): [162040.016, 162040.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.016 ±(99.9%) 0.109 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.066), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.615 ±(99.9%) 11.039 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.615, 6.617), stdev = 2.867
[info]   CI (99.9%): [≈ 0, 12.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1631.020 ±(99.9%) 1430.024 MB/sec [Average]
[info]   (min, avg, max) = (1354.012, 1631.020, 2044.136), stdev = 371.373
[info]   CI (99.9%): [200.996, 3061.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   163311.070 ±(99.9%) 142121.773 B/op [Average]
[info]   (min, avg, max) = (134929.968, 163311.070, 203743.187), stdev = 36908.573
[info]   CI (99.9%): [21189.297, 305432.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.821 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.662), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   107.403 ±(99.9%) 788.880 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 107.403, 470.213), stdev = 204.870
[info]   CI (99.9%): [≈ 0, 896.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.600, 13.000), stdev = 4.615
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 36.00% complete, ETA 01:12:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37795.034 ops/s
[info] # Warmup Iteration   2: 53282.991 ops/s
[info] # Warmup Iteration   3: 53074.086 ops/s
[info] # Warmup Iteration   4: 54166.200 ops/s
[info] # Warmup Iteration   5: 54089.893 ops/s
[info] Iteration   1: 54153.258 ops/s
[info]                  ·gc.alloc.rate:            1313.334 MB/sec
[info]                  ·gc.alloc.rate.norm:       38176.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.025 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 39416.948 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 54337.775 ops/s
[info]                  ·gc.alloc.rate:            1317.899 MB/sec
[info]                  ·gc.alloc.rate.norm:       38176.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.053 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19641.385 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 52802.446 ops/s
[info]                  ·gc.alloc.rate:            1281.155 MB/sec
[info]                  ·gc.alloc.rate.norm:       38176.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.665 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 40426.070 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 53962.124 ops/s
[info]                  ·gc.alloc.rate:                   1308.826 MB/sec
[info]                  ·gc.alloc.rate.norm:              38176.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1356.128 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        39555.709 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 97.141 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 54228.584 ops/s
[info]                  ·gc.alloc.rate:                                  1315.238 MB/sec
[info]                  ·gc.alloc.rate.norm:                             38176.008 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.174 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.053 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.748 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       39555.044 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce":
[info]   53896.837 ±(99.9%) 2414.102 ops/s [Average]
[info]   (min, avg, max) = (52802.446, 53896.837, 54337.775), stdev = 626.935
[info]   CI (99.9%): [51482.735, 56310.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1307.290 ±(99.9%) 57.684 MB/sec [Average]
[info]   (min, avg, max) = (1281.155, 1307.290, 1317.899), stdev = 14.980
[info]   CI (99.9%): [1249.606, 1364.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   38176.008 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (38176.008, 38176.008, 38176.008), stdev = 0.001
[info]   CI (99.9%): [38176.007, 38176.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.035 ±(99.9%) 0.300 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.035, 0.174), stdev = 0.078
[info]   CI (99.9%): [≈ 0, 0.335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.011 ±(99.9%) 8.701 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.011, 5.053), stdev = 2.260
[info]   CI (99.9%): [≈ 0, 9.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1221.924 ±(99.9%) 1170.773 MB/sec [Average]
[info]   (min, avg, max) = (678.053, 1221.924, 1362.748), stdev = 304.046
[info]   CI (99.9%): [51.151, 2392.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   35719.031 ±(99.9%) 34642.775 B/op [Average]
[info]   (min, avg, max) = (19641.385, 35719.031, 40426.070), stdev = 8996.619
[info]   CI (99.9%): [1076.256, 70361.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   19.428 ±(99.9%) 167.282 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 19.428, 97.141), stdev = 43.443
[info]   CI (99.9%): [≈ 0, 186.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 8.000), stdev = 2.049
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 36.24% complete, ETA 01:12:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 85039.667 ops/s
[info] # Warmup Iteration   2: 127453.443 ops/s
[info] # Warmup Iteration   3: 124906.813 ops/s
[info] # Warmup Iteration   4: 125400.318 ops/s
[info] # Warmup Iteration   5: 123566.831 ops/s
[info] Iteration   1: 128080.614 ops/s
[info]                  ·gc.alloc.rate:                   1085.155 MB/sec
[info]                  ·gc.alloc.rate.norm:              13336.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.701 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        8316.315 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 8.185 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 128765.290 ops/s
[info]                  ·gc.alloc.rate:            1090.963 MB/sec
[info]                  ·gc.alloc.rate.norm:       13336.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.825 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16561.477 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 128733.468 ops/s
[info]                  ·gc.alloc.rate:            1090.686 MB/sec
[info]                  ·gc.alloc.rate.norm:       13336.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.818 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16565.593 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 129457.031 ops/s
[info]                  ·gc.alloc.rate:            1096.866 MB/sec
[info]                  ·gc.alloc.rate.norm:       13336.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.417 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8236.226 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 128954.452 ops/s
[info]                  ·gc.alloc.rate:                   1092.683 MB/sec
[info]                  ·gc.alloc.rate.norm:              13336.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.888 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        16536.181 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 48.779 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala":
[info]   128798.171 ±(99.9%) 1904.682 ops/s [Average]
[info]   (min, avg, max) = (128080.614, 128798.171, 129457.031), stdev = 494.640
[info]   CI (99.9%): [126893.489, 130702.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1091.270 ±(99.9%) 16.239 MB/sec [Average]
[info]   (min, avg, max) = (1085.155, 1091.270, 1096.866), stdev = 4.217
[info]   CI (99.9%): [1075.032, 1107.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   13336.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13336.003, 13336.003, 13336.003), stdev = 0.001
[info]   CI (99.9%): [13336.003, 13336.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1083.730 ±(99.9%) 1429.505 MB/sec [Average]
[info]   (min, avg, max) = (676.701, 1083.730, 1354.888), stdev = 371.238
[info]   CI (99.9%): [≈ 0, 2513.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   13243.158 ±(99.9%) 17459.706 B/op [Average]
[info]   (min, avg, max) = (8236.226, 13243.158, 16565.593), stdev = 4534.230
[info]   CI (99.9%): [≈ 0, 30702.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.689 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.997), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   11.393 ±(99.9%) 81.626 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.393, 48.779), stdev = 21.198
[info]   CI (99.9%): [≈ 0, 93.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.200, 9.000), stdev = 2.490
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 36.47% complete, ETA 01:11:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1256321.542 ops/s
[info] # Warmup Iteration   2: 1464324.013 ops/s
[info] # Warmup Iteration   3: 1468846.704 ops/s
[info] # Warmup Iteration   4: 1470038.278 ops/s
[info] # Warmup Iteration   5: 1471257.701 ops/s
[info] Iteration   1: 1475223.635 ops/s
[info]                  ·gc.alloc.rate:            1581.876 MB/sec
[info]                  ·gc.alloc.rate.norm:       1688.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.963 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1446.931 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 1470074.821 ops/s
[info]                  ·gc.alloc.rate:                   1576.598 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2032.298 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2175.899 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 4.279 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 1486767.397 ops/s
[info]                  ·gc.alloc.rate:                                  1594.478 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1688.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.056 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.059 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.882 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1442.820 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 1486748.121 ops/s
[info]                  ·gc.alloc.rate:                                  1594.303 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1688.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.020 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.738 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1442.827 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 1483819.861 ops/s
[info]                  ·gc.alloc.rate:            1591.284 MB/sec
[info]                  ·gc.alloc.rate.norm:       1688.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.226 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2168.472 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala":
[info]   1480526.767 ±(99.9%) 28935.069 ops/s [Average]
[info]   (min, avg, max) = (1470074.821, 1480526.767, 1486767.397), stdev = 7514.346
[info]   CI (99.9%): [1451591.698, 1509461.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1587.708 ±(99.9%) 31.018 MB/sec [Average]
[info]   (min, avg, max) = (1576.598, 1587.708, 1594.478), stdev = 8.055
[info]   CI (99.9%): [1556.690, 1618.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1688.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1688.000, 1688.000, 1688.000), stdev = 0.001
[info]   CI (99.9%): [1688.000, 1688.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.015 ±(99.9%) 0.094 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.056), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.016 ±(99.9%) 0.099 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.059), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1631.621 ±(99.9%) 1429.531 MB/sec [Average]
[info]   (min, avg, max) = (1355.963, 1631.621, 2044.226), stdev = 371.245
[info]   CI (99.9%): [202.090, 3061.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1735.390 ±(99.9%) 1535.446 B/op [Average]
[info]   (min, avg, max) = (1442.820, 1735.390, 2175.899), stdev = 398.750
[info]   CI (99.9%): [199.944, 3270.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.856 ±(99.9%) 7.369 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.856, 4.279), stdev = 1.914
[info]   CI (99.9%): [≈ 0, 8.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 12.000), stdev = 3.834
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 36.71% complete, ETA 01:11:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 726632.638 ops/s
[info] # Warmup Iteration   2: 801164.082 ops/s
[info] # Warmup Iteration   3: 827305.233 ops/s
[info] # Warmup Iteration   4: 827507.719 ops/s
[info] # Warmup Iteration   5: 827489.259 ops/s
[info] Iteration   1: 827573.592 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 825866.324 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 827541.909 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 827308.652 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 826975.307 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc":
[info]   827053.157 ±(99.9%) 2715.757 ops/s [Average]
[info]   (min, avg, max) = (825866.324, 827053.157, 827573.592), stdev = 705.273
[info]   CI (99.9%): [824337.400, 829768.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 36.94% complete, ETA 01:11:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 43004.542 ops/s
[info] # Warmup Iteration   2: 58368.550 ops/s
[info] # Warmup Iteration   3: 59454.065 ops/s
[info] # Warmup Iteration   4: 60101.099 ops/s
[info] # Warmup Iteration   5: 59992.938 ops/s
[info] Iteration   1: 61193.095 ops/s
[info]                  ·gc.alloc.rate:            1423.132 MB/sec
[info]                  ·gc.alloc.rate.norm:       36608.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.735 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 34848.593 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 60857.321 ops/s
[info]                  ·gc.alloc.rate:            1415.666 MB/sec
[info]                  ·gc.alloc.rate.norm:       36608.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.023 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 35039.817 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 60752.586 ops/s
[info]                  ·gc.alloc.rate:                   1412.996 MB/sec
[info]                  ·gc.alloc.rate.norm:              36608.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2032.139 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        52648.817 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 103.537 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   4: 62037.374 ops/s
[info]                  ·gc.alloc.rate:                                  1443.076 MB/sec
[info]                  ·gc.alloc.rate.norm:                             36608.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.202 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.112 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.962 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       34575.682 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 61656.817 ops/s
[info]                  ·gc.alloc.rate:            1434.645 MB/sec
[info]                  ·gc.alloc.rate.norm:       36608.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1363.415 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 34790.427 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson":
[info]   61299.439 ±(99.9%) 2089.744 ops/s [Average]
[info]   (min, avg, max) = (60752.586, 61299.439, 62037.374), stdev = 542.700
[info]   CI (99.9%): [59209.695, 63389.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1425.903 ±(99.9%) 49.101 MB/sec [Average]
[info]   (min, avg, max) = (1412.996, 1425.903, 1443.076), stdev = 12.751
[info]   CI (99.9%): [1376.802, 1475.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   36608.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (36608.007, 36608.007, 36608.007), stdev = 0.001
[info]   CI (99.9%): [36608.006, 36608.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.040 ±(99.9%) 0.347 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.040, 0.202), stdev = 0.090
[info]   CI (99.9%): [≈ 0, 0.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.022 ±(99.9%) 8.803 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.022, 5.112), stdev = 2.286
[info]   CI (99.9%): [≈ 0, 9.825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1493.655 ±(99.9%) 1159.239 MB/sec [Average]
[info]   (min, avg, max) = (1354.735, 1493.655, 2032.139), stdev = 301.051
[info]   CI (99.9%): [334.415, 2652.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   38380.667 ±(99.9%) 30719.878 B/op [Average]
[info]   (min, avg, max) = (34575.682, 38380.667, 52648.817), stdev = 7977.855
[info]   CI (99.9%): [7660.789, 69100.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   20.707 ±(99.9%) 178.298 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 20.707, 103.537), stdev = 46.303
[info]   CI (99.9%): [≈ 0, 199.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.400, 14.000), stdev = 4.930
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 37.18% complete, ETA 01:11:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9700.324 ops/s
[info] # Warmup Iteration   2: 13407.959 ops/s
[info] # Warmup Iteration   3: 13621.136 ops/s
[info] # Warmup Iteration   4: 13141.835 ops/s
[info] # Warmup Iteration   5: 13619.170 ops/s
[info] Iteration   1: 13662.604 ops/s
[info]                  ·gc.alloc.rate:            1219.436 MB/sec
[info]                  ·gc.alloc.rate.norm:       140480.030 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.165 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 156231.302 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 13658.489 ops/s
[info]                  ·gc.alloc.rate:            1219.363 MB/sec
[info]                  ·gc.alloc.rate.norm:       140480.032 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.480 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 156277.047 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 13538.894 ops/s
[info]                  ·gc.alloc.rate:            1208.371 MB/sec
[info]                  ·gc.alloc.rate.norm:       140480.038 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.083 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 78830.985 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 13654.051 ops/s
[info]                  ·gc.alloc.rate:            1218.809 MB/sec
[info]                  ·gc.alloc.rate.norm:       140480.030 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.261 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 156322.819 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 13701.119 ops/s
[info]                  ·gc.alloc.rate:                                  1222.782 MB/sec
[info]                  ·gc.alloc.rate.norm:                             140480.030 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.048 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.469 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1359.346 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       156169.266 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                382.580 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce":
[info]   13643.031 ±(99.9%) 235.506 ops/s [Average]
[info]   (min, avg, max) = (13538.894, 13643.031, 13701.119), stdev = 61.160
[info]   CI (99.9%): [13407.525, 13878.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1217.752 ±(99.9%) 21.078 MB/sec [Average]
[info]   (min, avg, max) = (1208.371, 1217.752, 1222.782), stdev = 5.474
[info]   CI (99.9%): [1196.674, 1238.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   140480.032 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (140480.030, 140480.032, 140480.038), stdev = 0.003
[info]   CI (99.9%): [140480.019, 140480.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.010 ±(99.9%) 0.082 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.048), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.094 ±(99.9%) 9.418 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.094, 5.469), stdev = 2.446
[info]   CI (99.9%): [≈ 0, 10.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1221.267 ±(99.9%) 1169.256 MB/sec [Average]
[info]   (min, avg, max) = (678.083, 1221.267, 1359.346), stdev = 303.652
[info]   CI (99.9%): [52.011, 2390.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   140766.284 ±(99.9%) 133320.579 B/op [Average]
[info]   (min, avg, max) = (78830.985, 140766.284, 156322.819), stdev = 34622.931
[info]   CI (99.9%): [7445.704, 274086.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   76.516 ±(99.9%) 658.826 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 76.516, 382.580), stdev = 171.095
[info]   CI (99.9%): [≈ 0, 735.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 8.000), stdev = 2.168
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 37.41% complete, ETA 01:10:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8265.568 ops/s
[info] # Warmup Iteration   2: 13726.724 ops/s
[info] # Warmup Iteration   3: 14192.096 ops/s
[info] # Warmup Iteration   4: 14220.126 ops/s
[info] # Warmup Iteration   5: 14163.640 ops/s
[info] Iteration   1: 14185.183 ops/s
[info]                  ·gc.alloc.rate:            1146.166 MB/sec
[info]                  ·gc.alloc.rate.norm:       127184.029 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.609 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 150313.876 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 14200.956 ops/s
[info]                  ·gc.alloc.rate:            1147.626 MB/sec
[info]                  ·gc.alloc.rate.norm:       127184.029 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.902 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 150155.138 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 14276.176 ops/s
[info]                  ·gc.alloc.rate:            1153.553 MB/sec
[info]                  ·gc.alloc.rate.norm:       127184.036 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.373 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 74683.227 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 14194.076 ops/s
[info]                  ·gc.alloc.rate:            1146.851 MB/sec
[info]                  ·gc.alloc.rate.norm:       127181.723 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.584 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 150218.593 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   5: 13924.310 ops/s
[info]                  ·gc.alloc.rate:                                  1125.432 MB/sec
[info]                  ·gc.alloc.rate.norm:                             127184.034 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.024 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.757 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1358.361 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       153507.070 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                526.998 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala":
[info]   14156.140 ±(99.9%) 518.212 ops/s [Average]
[info]   (min, avg, max) = (13924.310, 14156.140, 14276.176), stdev = 134.578
[info]   CI (99.9%): [13637.928, 14674.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1143.926 ±(99.9%) 41.381 MB/sec [Average]
[info]   (min, avg, max) = (1125.432, 1143.926, 1153.553), stdev = 10.747
[info]   CI (99.9%): [1102.544, 1185.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   127183.570 ±(99.9%) 3.976 B/op [Average]
[info]   (min, avg, max) = (127181.723, 127183.570, 127184.036), stdev = 1.033
[info]   CI (99.9%): [127179.594, 127187.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.005 ±(99.9%) 0.042 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.024), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.551 ±(99.9%) 4.748 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.551, 2.757), stdev = 1.233
[info]   CI (99.9%): [≈ 0, 5.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1219.966 ±(99.9%) 1167.987 MB/sec [Average]
[info]   (min, avg, max) = (677.373, 1219.966, 1358.361), stdev = 303.323
[info]   CI (99.9%): [51.979, 2387.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   135775.581 ±(99.9%) 131619.602 B/op [Average]
[info]   (min, avg, max) = (74683.227, 135775.581, 153507.070), stdev = 34181.193
[info]   CI (99.9%): [4155.979, 267395.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.031 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.663), stdev = 2.086
[info]   CI (99.9%): [≈ 0, 8.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   105.400 ±(99.9%) 907.523 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 105.400, 526.998), stdev = 235.681
[info]   CI (99.9%): [≈ 0, 1012.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 8.000, 11.000), stdev = 2.449
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 37.65% complete, ETA 01:10:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 375648.051 ops/s
[info] # Warmup Iteration   2: 399005.423 ops/s
[info] # Warmup Iteration   3: 409572.716 ops/s
[info] # Warmup Iteration   4: 411950.369 ops/s
[info] # Warmup Iteration   5: 413388.777 ops/s
[info] Iteration   1: 413348.848 ops/s
[info]                  ·gc.alloc.rate:            1075.549 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1357.331 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5169.110 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 414272.433 ops/s
[info]                  ·gc.alloc.rate:            1078.105 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.794 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2578.916 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 412917.820 ops/s
[info]                  ·gc.alloc.rate:            1074.476 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1357.461 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5174.768 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 412274.438 ops/s
[info]                  ·gc.alloc.rate:            1073.006 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1357.712 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5182.812 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 413984.084 ops/s
[info]                  ·gc.alloc.rate:            1077.445 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.842 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2580.678 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala":
[info]   413359.525 ±(99.9%) 3102.162 ops/s [Average]
[info]   (min, avg, max) = (412274.438, 413359.525, 414272.433), stdev = 805.622
[info]   CI (99.9%): [410257.362, 416461.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1075.716 ±(99.9%) 8.079 MB/sec [Average]
[info]   (min, avg, max) = (1073.006, 1075.716, 1078.105), stdev = 2.098
[info]   CI (99.9%): [1067.638, 1083.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.001, 4096.001, 4096.001), stdev = 0.001
[info]   CI (99.9%): [4096.001, 4096.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1086.028 ±(99.9%) 1431.400 MB/sec [Average]
[info]   (min, avg, max) = (678.794, 1086.028, 1357.712), stdev = 371.730
[info]   CI (99.9%): [≈ 0, 2517.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   4137.257 ±(99.9%) 5474.723 B/op [Average]
[info]   (min, avg, max) = (2578.916, 4137.257, 5182.812), stdev = 1421.768
[info]   CI (99.9%): [≈ 0, 9611.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 2.049
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 37.88% complete, ETA 01:10:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5702.472 ops/s
[info] # Warmup Iteration   2: 10390.020 ops/s
[info] # Warmup Iteration   3: 10789.962 ops/s
[info] # Warmup Iteration   4: 10751.133 ops/s
[info] # Warmup Iteration   5: 10614.888 ops/s
[info] Iteration   1: 10617.341 ops/s
[info]                  ·gc.alloc.rate:            1465.953 MB/sec
[info]                  ·gc.alloc.rate.norm:       217336.038 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2032.108 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 301271.812 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   2: 10625.149 ops/s
[info]                  ·gc.alloc.rate:            1466.967 MB/sec
[info]                  ·gc.alloc.rate.norm:       217336.663 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.652 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 200696.677 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 10767.101 ops/s
[info]                  ·gc.alloc.rate:                                  1486.651 MB/sec
[info]                  ·gc.alloc.rate.norm:                             217336.041 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.083 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 12.207 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1358.727 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       198634.510 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                584.219 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 10849.432 ops/s
[info]                  ·gc.alloc.rate:                                  1498.016 MB/sec
[info]                  ·gc.alloc.rate.norm:                             217336.041 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.037 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.440 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.638 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       197695.033 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 10844.684 ops/s
[info]                  ·gc.alloc.rate:                                  1497.467 MB/sec
[info]                  ·gc.alloc.rate.norm:                             217336.047 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.715 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.641 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       197767.929 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson":
[info]   10740.741 ±(99.9%) 438.627 ops/s [Average]
[info]   (min, avg, max) = (10617.341, 10740.741, 10849.432), stdev = 113.910
[info]   CI (99.9%): [10302.114, 11179.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1483.011 ±(99.9%) 60.755 MB/sec [Average]
[info]   (min, avg, max) = (1465.953, 1483.011, 1498.016), stdev = 15.778
[info]   CI (99.9%): [1422.256, 1543.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   217336.166 ±(99.9%) 1.070 B/op [Average]
[info]   (min, avg, max) = (217336.038, 217336.166, 217336.663), stdev = 0.278
[info]   CI (99.9%): [217335.096, 217337.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.025 ±(99.9%) 0.139 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.083), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   3.673 ±(99.9%) 20.347 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.673, 12.207), stdev = 5.284
[info]   CI (99.9%): [≈ 0, 24.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1494.153 ±(99.9%) 1158.058 MB/sec [Average]
[info]   (min, avg, max) = (1354.652, 1494.153, 2032.108), stdev = 300.744
[info]   CI (99.9%): [336.095, 2652.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   219213.192 ±(99.9%) 176698.946 B/op [Average]
[info]   (min, avg, max) = (197695.033, 219213.192, 301271.812), stdev = 45888.155
[info]   CI (99.9%): [42514.246, 395912.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   116.844 ±(99.9%) 1006.061 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 116.844, 584.219), stdev = 261.271
[info]   CI (99.9%): [≈ 0, 1122.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.000, 14.000), stdev = 5.000
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 38.12% complete, ETA 01:09:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26407.616 ops/s
[info] # Warmup Iteration   2: 37967.755 ops/s
[info] # Warmup Iteration   3: 36734.256 ops/s
[info] # Warmup Iteration   4: 37037.483 ops/s
[info] # Warmup Iteration   5: 36944.513 ops/s
[info] Iteration   1: 37731.375 ops/s
[info]                  ·gc.alloc.rate:            1172.926 MB/sec
[info]                  ·gc.alloc.rate.norm:       48928.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.082 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 28285.822 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 37970.299 ops/s
[info]                  ·gc.alloc.rate:            1180.560 MB/sec
[info]                  ·gc.alloc.rate.norm:       48928.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.399 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 56215.624 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 37817.416 ops/s
[info]                  ·gc.alloc.rate:            1175.567 MB/sec
[info]                  ·gc.alloc.rate.norm:       48928.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.126 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 56443.019 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 37960.447 ops/s
[info]                  ·gc.alloc.rate:            1180.072 MB/sec
[info]                  ·gc.alloc.rate.norm:       48928.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.231 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 56231.911 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 38149.041 ops/s
[info]                  ·gc.alloc.rate:                   1185.860 MB/sec
[info]                  ·gc.alloc.rate.norm:              48928.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:             678.066 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        27976.684 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 137.410 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce":
[info]   37925.715 ±(99.9%) 616.600 ops/s [Average]
[info]   (min, avg, max) = (37731.375, 37925.715, 38149.041), stdev = 160.129
[info]   CI (99.9%): [37309.115, 38542.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1178.997 ±(99.9%) 19.188 MB/sec [Average]
[info]   (min, avg, max) = (1172.926, 1178.997, 1185.860), stdev = 4.983
[info]   CI (99.9%): [1159.809, 1198.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   48928.011 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48928.011, 48928.011, 48928.012), stdev = 0.001
[info]   CI (99.9%): [48928.009, 48928.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1084.981 ±(99.9%) 1430.335 MB/sec [Average]
[info]   (min, avg, max) = (678.066, 1084.981, 1356.399), stdev = 371.453
[info]   CI (99.9%): [≈ 0, 2515.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   45030.612 ±(99.9%) 59406.122 B/op [Average]
[info]   (min, avg, max) = (27976.684, 45030.612, 56443.019), stdev = 15427.581
[info]   CI (99.9%): [≈ 0, 104436.734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   27.482 ±(99.9%) 236.628 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 27.482, 137.410), stdev = 61.452
[info]   CI (99.9%): [≈ 0, 264.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 8.000), stdev = 2.049
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 38.35% complete, ETA 01:09:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27862.577 ops/s
[info] # Warmup Iteration   2: 44690.816 ops/s
[info] # Warmup Iteration   3: 43775.539 ops/s
[info] # Warmup Iteration   4: 44555.320 ops/s
[info] # Warmup Iteration   5: 44744.221 ops/s
[info] Iteration   1: 44685.630 ops/s
[info]                  ·gc.alloc.rate:            1185.349 MB/sec
[info]                  ·gc.alloc.rate.norm:       41752.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.377 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23859.532 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 44601.850 ops/s
[info]                  ·gc.alloc.rate:            1183.386 MB/sec
[info]                  ·gc.alloc.rate.norm:       41752.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.058 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 47808.917 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 43649.136 ops/s
[info]                  ·gc.alloc.rate:            1157.831 MB/sec
[info]                  ·gc.alloc.rate.norm:       41752.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.737 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 48852.526 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 43822.724 ops/s
[info]                  ·gc.alloc.rate:                   1162.414 MB/sec
[info]                  ·gc.alloc.rate.norm:              41752.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.762 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        48660.816 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 143.542 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 44000.892 ops/s
[info]                  ·gc.alloc.rate:                                  1167.115 MB/sec
[info]                  ·gc.alloc.rate.norm:                             41752.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.067 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.404 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            681.350 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       24374.406 B/op
[info]                  ·gc.count:                                       1.000 counts
[info]                  ·gc.time:                                        1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala":
[info]   44152.046 ±(99.9%) 1797.115 ops/s [Average]
[info]   (min, avg, max) = (43649.136, 44152.046, 44685.630), stdev = 466.705
[info]   CI (99.9%): [42354.931, 45949.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1171.219 ±(99.9%) 47.990 MB/sec [Average]
[info]   (min, avg, max) = (1157.831, 1171.219, 1185.349), stdev = 12.463
[info]   CI (99.9%): [1123.229, 1219.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   41752.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (41752.009, 41752.009, 41752.010), stdev = 0.001
[info]   CI (99.9%): [41752.008, 41752.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.013 ±(99.9%) 0.116 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.067), stdev = 0.030
[info]   CI (99.9%): [≈ 0, 0.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.481 ±(99.9%) 4.140 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.481, 2.404), stdev = 1.075
[info]   CI (99.9%): [≈ 0, 4.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1084.657 ±(99.9%) 1424.673 MB/sec [Average]
[info]   (min, avg, max) = (677.377, 1084.657, 1355.058), stdev = 369.983
[info]   CI (99.9%): [≈ 0, 2509.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   38711.240 ±(99.9%) 51327.997 B/op [Average]
[info]   (min, avg, max) = (23859.532, 38711.240, 48852.526), stdev = 13329.718
[info]   CI (99.9%): [≈ 0, 90039.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   28.708 ±(99.9%) 247.188 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 28.708, 143.542), stdev = 64.194
[info]   CI (99.9%): [≈ 0, 275.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 6.800, 10.000), stdev = 3.768
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 38.59% complete, ETA 01:09:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1522636.436 ops/s
[info] # Warmup Iteration   2: 1712442.426 ops/s
[info] # Warmup Iteration   3: 1717743.817 ops/s
[info] # Warmup Iteration   4: 1688277.480 ops/s
[info] # Warmup Iteration   5: 1689236.582 ops/s
[info] Iteration   1: 1687654.088 ops/s
[info]                  ·gc.alloc.rate:                   1535.629 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.665 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1264.181 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.621 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 1732406.932 ops/s
[info]                  ·gc.alloc.rate:                   1576.319 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.637 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1231.523 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.605 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 1709405.521 ops/s
[info]                  ·gc.alloc.rate:                                  1555.425 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1432.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.075 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.069 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.176 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1879.207 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                3.067 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 1708652.134 ops/s
[info]                  ·gc.alloc.rate:                                  1554.713 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1432.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.017 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.965 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1255.387 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 1714888.430 ops/s
[info]                  ·gc.alloc.rate:            1560.435 MB/sec
[info]                  ·gc.alloc.rate.norm:       1432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.956 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1250.775 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala":
[info]   1710601.421 ±(99.9%) 61660.483 ops/s [Average]
[info]   (min, avg, max) = (1687654.088, 1710601.421, 1732406.932), stdev = 16013.032
[info]   CI (99.9%): [1648940.938, 1772261.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1556.504 ±(99.9%) 56.073 MB/sec [Average]
[info]   (min, avg, max) = (1535.629, 1556.504, 1576.319), stdev = 14.562
[info]   CI (99.9%): [1500.431, 1612.578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1432.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1432.000, 1432.000, 1432.000), stdev = 0.001
[info]   CI (99.9%): [1432.000, 1432.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.018 ±(99.9%) 0.125 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.075), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.017 ±(99.9%) 0.115 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.069), stdev = 0.030
[info]   CI (99.9%): [≈ 0, 0.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1495.680 ±(99.9%) 1174.307 MB/sec [Average]
[info]   (min, avg, max) = (1355.637, 1495.680, 2041.176), stdev = 304.964
[info]   CI (99.9%): [321.373, 2669.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1376.214 ±(99.9%) 1083.707 B/op [Average]
[info]   (min, avg, max) = (1231.523, 1376.214, 1879.207), stdev = 281.435
[info]   CI (99.9%): [292.507, 2459.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 5.319 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.331), stdev = 1.381
[info]   CI (99.9%): [≈ 0, 6.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.859 ±(99.9%) 4.897 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.859, 3.067), stdev = 1.272
[info]   CI (99.9%): [≈ 0, 5.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 7.000), stdev = 1.643
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 38.82% complete, ETA 01:09:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1630428.215 ops/s
[info] # Warmup Iteration   2: 1815717.789 ops/s
[info] # Warmup Iteration   3: 1831721.031 ops/s
[info] # Warmup Iteration   4: 1831987.193 ops/s
[info] # Warmup Iteration   5: 1832267.382 ops/s
[info] Iteration   1: 1837514.094 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1833335.974 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1837689.280 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1838180.282 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1832679.589 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   1835879.844 ±(99.9%) 10178.700 ops/s [Average]
[info]   (min, avg, max) = (1832679.589, 1835879.844, 1838180.282), stdev = 2643.376
[info]   CI (99.9%): [1825701.143, 1846058.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 39.06% complete, ETA 01:08:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23238.782 ops/s
[info] # Warmup Iteration   2: 34463.848 ops/s
[info] # Warmup Iteration   3: 34177.173 ops/s
[info] # Warmup Iteration   4: 34764.687 ops/s
[info] # Warmup Iteration   5: 34840.177 ops/s
[info] Iteration   1: 34964.819 ops/s
[info]                  ·gc.alloc.rate:            1057.185 MB/sec
[info]                  ·gc.alloc.rate.norm:       47592.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.356 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 30493.017 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 34764.623 ops/s
[info]                  ·gc.alloc.rate:            1051.063 MB/sec
[info]                  ·gc.alloc.rate.norm:       47592.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.615 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 61336.811 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 35017.271 ops/s
[info]                  ·gc.alloc.rate:            1058.885 MB/sec
[info]                  ·gc.alloc.rate.norm:       47592.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.438 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 30447.744 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 34830.388 ops/s
[info]                  ·gc.alloc.rate:            1053.082 MB/sec
[info]                  ·gc.alloc.rate.norm:       47592.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.685 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 61222.367 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 34876.685 ops/s
[info]                  ·gc.alloc.rate:            1054.543 MB/sec
[info]                  ·gc.alloc.rate.norm:       47592.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.737 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 61139.880 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson":
[info]   34890.757 ±(99.9%) 391.004 ops/s [Average]
[info]   (min, avg, max) = (34764.623, 34890.757, 35017.271), stdev = 101.542
[info]   CI (99.9%): [34499.753, 35281.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1054.952 ±(99.9%) 12.061 MB/sec [Average]
[info]   (min, avg, max) = (1051.063, 1054.952, 1058.885), stdev = 3.132
[info]   CI (99.9%): [1042.891, 1067.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   47592.012 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (47592.012, 47592.012, 47592.013), stdev = 0.001
[info]   CI (99.9%): [47592.010, 47592.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1083.766 ±(99.9%) 1428.444 MB/sec [Average]
[info]   (min, avg, max) = (677.356, 1083.766, 1354.737), stdev = 370.962
[info]   CI (99.9%): [≈ 0, 2512.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   48927.964 ±(99.9%) 64881.594 B/op [Average]
[info]   (min, avg, max) = (30447.744, 48927.964, 61336.811), stdev = 16849.544
[info]   CI (99.9%): [≈ 0, 113809.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.200, 9.000), stdev = 2.049
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 39.29% complete, ETA 01:08:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 62738.163 ops/s
[info] # Warmup Iteration   2: 74303.111 ops/s
[info] # Warmup Iteration   3: 75368.008 ops/s
[info] # Warmup Iteration   4: 75539.687 ops/s
[info] # Warmup Iteration   5: 75482.309 ops/s
[info] Iteration   1: 75557.261 ops/s
[info]                  ·gc.alloc.rate:            1296.014 MB/sec
[info]                  ·gc.alloc.rate.norm:       27000.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.045 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 28250.638 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 75605.391 ops/s
[info]                  ·gc.alloc.rate:            1297.146 MB/sec
[info]                  ·gc.alloc.rate.norm:       27000.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.386 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 28233.079 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 75654.250 ops/s
[info]                  ·gc.alloc.rate:            1297.816 MB/sec
[info]                  ·gc.alloc.rate.norm:       27000.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.077 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14106.839 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 75406.814 ops/s
[info]                  ·gc.alloc.rate:                   1293.397 MB/sec
[info]                  ·gc.alloc.rate.norm:              27000.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.998 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        28306.825 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 69.516 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 75809.041 ops/s
[info]                  ·gc.alloc.rate:                                  1300.683 MB/sec
[info]                  ·gc.alloc.rate.norm:                             27000.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.152 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.153 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1363.069 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       28295.040 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce":
[info]   75606.551 ±(99.9%) 563.311 ops/s [Average]
[info]   (min, avg, max) = (75406.814, 75606.551, 75809.041), stdev = 146.290
[info]   CI (99.9%): [75043.240, 76169.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate":
[info]   1297.011 ±(99.9%) 10.225 MB/sec [Average]
[info]   (min, avg, max) = (1293.397, 1297.011, 1300.683), stdev = 2.656
[info]   CI (99.9%): [1286.786, 1307.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   27000.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (27000.005, 27000.005, 27000.005), stdev = 0.001
[info]   CI (99.9%): [27000.005, 27000.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.030 ±(99.9%) 0.262 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.152), stdev = 0.068
[info]   CI (99.9%): [≈ 0, 0.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.631 ±(99.9%) 5.429 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.631, 3.153), stdev = 1.410
[info]   CI (99.9%): [≈ 0, 6.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1221.915 ±(99.9%) 1170.710 MB/sec [Average]
[info]   (min, avg, max) = (678.077, 1221.915, 1363.069), stdev = 304.030
[info]   CI (99.9%): [51.205, 2392.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   25438.484 ±(99.9%) 24392.503 B/op [Average]
[info]   (min, avg, max) = (14106.839, 25438.484, 28306.825), stdev = 6334.656
[info]   CI (99.9%): [1045.981, 49830.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   13.903 ±(99.9%) 119.710 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13.903, 69.516), stdev = 31.088
[info]   CI (99.9%): [≈ 0, 133.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.400, 8.000), stdev = 2.702
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 39.53% complete, ETA 01:08:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26084.189 ops/s
[info] # Warmup Iteration   2: 336495.372 ops/s
[info] # Warmup Iteration   3: 337607.023 ops/s
[info] # Warmup Iteration   4: 339554.013 ops/s
[info] # Warmup Iteration   5: 338899.447 ops/s
[info] Iteration   1: 339570.084 ops/s
[info]                  ·gc.alloc.rate:            680.183 MB/sec
[info]                  ·gc.alloc.rate.norm:       3152.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.900 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3127.516 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 339234.968 ops/s
[info]                  ·gc.alloc.rate:            679.389 MB/sec
[info]                  ·gc.alloc.rate.norm:       3152.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.793 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3130.677 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 339141.643 ops/s
[info]                  ·gc.alloc.rate:            679.133 MB/sec
[info]                  ·gc.alloc.rate.norm:       3152.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.723 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3131.536 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 340099.913 ops/s
[info]                  ·gc.alloc.rate:            681.192 MB/sec
[info]                  ·gc.alloc.rate.norm:       3152.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.839 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3122.606 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 338388.022 ops/s
[info]                  ·gc.alloc.rate:            677.616 MB/sec
[info]                  ·gc.alloc.rate.norm:       3152.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.712 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3138.494 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava":
[info]   339286.926 ±(99.9%) 2414.695 ops/s [Average]
[info]   (min, avg, max) = (338388.022, 339286.926, 340099.913), stdev = 627.089
[info]   CI (99.9%): [336872.231, 341701.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   679.503 ±(99.9%) 5.103 MB/sec [Average]
[info]   (min, avg, max) = (677.616, 679.503, 681.192), stdev = 1.325
[info]   CI (99.9%): [674.400, 684.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   3152.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3152.001, 3152.001, 3152.001), stdev = 0.001
[info]   CI (99.9%): [3152.001, 3152.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   674.794 ±(99.9%) 0.303 MB/sec [Average]
[info]   (min, avg, max) = (674.712, 674.794, 674.900), stdev = 0.079
[info]   CI (99.9%): [674.490, 675.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   3130.166 ±(99.9%) 22.425 B/op [Average]
[info]   (min, avg, max) = (3122.606, 3130.166, 3138.494), stdev = 5.824
[info]   CI (99.9%): [3107.740, 3152.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 39.76% complete, ETA 01:08:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 158708.735 ops/s
[info] # Warmup Iteration   2: 233355.853 ops/s
[info] # Warmup Iteration   3: 232989.063 ops/s
[info] # Warmup Iteration   4: 230001.856 ops/s
[info] # Warmup Iteration   5: 234069.025 ops/s
[info] Iteration   1: 225778.334 ops/s
[info]                  ·gc.alloc.rate:            500.270 MB/sec
[info]                  ·gc.alloc.rate.norm:       3488.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.305 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4722.332 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 216322.752 ops/s
[info]                  ·gc.alloc.rate:            479.422 MB/sec
[info]                  ·gc.alloc.rate.norm:       3488.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.469 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4928.876 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 235677.604 ops/s
[info]                  ·gc.alloc.rate:      522.225 MB/sec
[info]                  ·gc.alloc.rate.norm: 3488.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 233673.544 ops/s
[info]                  ·gc.alloc.rate:            517.827 MB/sec
[info]                  ·gc.alloc.rate.norm:       3488.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.372 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4562.674 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 232380.097 ops/s
[info]                  ·gc.alloc.rate:            515.097 MB/sec
[info]                  ·gc.alloc.rate.norm:       3488.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.540 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4587.997 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala":
[info]   228766.466 ±(99.9%) 30361.328 ops/s [Average]
[info]   (min, avg, max) = (216322.752, 228766.466, 235677.604), stdev = 7884.740
[info]   CI (99.9%): [198405.138, 259127.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   506.968 ±(99.9%) 67.259 MB/sec [Average]
[info]   (min, avg, max) = (479.422, 506.968, 522.225), stdev = 17.467
[info]   CI (99.9%): [439.709, 574.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3488.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3488.002, 3488.002, 3488.002), stdev = 0.001
[info]   CI (99.9%): [3488.001, 3488.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   541.937 ±(99.9%) 1166.561 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 541.937, 677.540), stdev = 302.952
[info]   CI (99.9%): [≈ 0, 1708.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   3760.376 ±(99.9%) 8113.769 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3760.376, 4928.876), stdev = 2107.120
[info]   CI (99.9%): [≈ 0, 11874.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.600, 5.000), stdev = 2.074
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 40.00% complete, ETA 01:07:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 419244.508 ops/s
[info] # Warmup Iteration   2: 430560.683 ops/s
[info] # Warmup Iteration   3: 449794.175 ops/s
[info] # Warmup Iteration   4: 447000.479 ops/s
[info] # Warmup Iteration   5: 446627.535 ops/s
[info] Iteration   1: 447471.339 ops/s
[info]                  ·gc.alloc.rate:      564.037 MB/sec
[info]                  ·gc.alloc.rate.norm: 1984.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 446019.817 ops/s
[info]                  ·gc.alloc.rate:            562.199 MB/sec
[info]                  ·gc.alloc.rate.norm:       1984.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.042 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2392.812 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 448021.568 ops/s
[info]                  ·gc.alloc.rate:            564.741 MB/sec
[info]                  ·gc.alloc.rate.norm:       1984.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.067 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2382.127 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 447957.935 ops/s
[info]                  ·gc.alloc.rate:            564.616 MB/sec
[info]                  ·gc.alloc.rate.norm:       1984.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.005 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2382.441 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 448825.789 ops/s
[info]                  ·gc.alloc.rate:            565.710 MB/sec
[info]                  ·gc.alloc.rate.norm:       1984.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.033 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2377.930 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala":
[info]   447659.290 ±(99.9%) 3994.453 ops/s [Average]
[info]   (min, avg, max) = (446019.817, 447659.290, 448825.789), stdev = 1037.347
[info]   CI (99.9%): [443664.837, 451653.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   564.261 ±(99.9%) 5.005 MB/sec [Average]
[info]   (min, avg, max) = (562.199, 564.261, 565.710), stdev = 1.300
[info]   CI (99.9%): [559.255, 569.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1984.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1984.001, 1984.001, 1984.001), stdev = 0.001
[info]   CI (99.9%): [1984.001, 1984.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   542.430 ±(99.9%) 1167.621 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 542.430, 678.067), stdev = 303.227
[info]   CI (99.9%): [≈ 0, 1710.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1907.062 ±(99.9%) 4105.149 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1907.062, 2392.812), stdev = 1066.094
[info]   CI (99.9%): [≈ 0, 6012.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 40.24% complete, ETA 01:07:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38228.871 ops/s
[info] # Warmup Iteration   2: 64803.892 ops/s
[info] # Warmup Iteration   3: 64150.141 ops/s
[info] # Warmup Iteration   4: 64345.973 ops/s
[info] # Warmup Iteration   5: 65898.022 ops/s
[info] Iteration   1: 65929.998 ops/s
[info]                  ·gc.alloc.rate:                                  2941.627 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70232.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.076 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.332 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       65067.907 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   2: 66006.509 ops/s
[info]                  ·gc.alloc.rate:                                  2944.900 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70232.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.188 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3406.633 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       81243.714 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 65551.983 ops/s
[info]                  ·gc.alloc.rate:                                  2925.194 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70232.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.209 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.690 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       65442.043 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 65819.415 ops/s
[info]                  ·gc.alloc.rate:                                  2937.581 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70232.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.168 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2726.048 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       65174.649 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 64814.372 ops/s
[info]                  ·gc.alloc.rate:                                  2892.821 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70232.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.064 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3407.816 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       82735.068 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson":
[info]   65624.456 ±(99.9%) 1865.496 ops/s [Average]
[info]   (min, avg, max) = (64814.372, 65624.456, 66006.509), stdev = 484.463
[info]   CI (99.9%): [63758.959, 67489.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2928.425 ±(99.9%) 81.857 MB/sec [Average]
[info]   (min, avg, max) = (2892.821, 2928.425, 2944.900), stdev = 21.258
[info]   CI (99.9%): [2846.567, 3010.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   70232.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (70232.006, 70232.006, 70232.007), stdev = 0.001
[info]   CI (99.9%): [70232.005, 70232.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.006 ±(99.9%) 0.011 MB/sec [Average]
[info]   (min, avg, max) = (0.003, 0.006, 0.009), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.141 ±(99.9%) 0.256 B/op [Average]
[info]   (min, avg, max) = (0.064, 0.141, 0.209), stdev = 0.067
[info]   CI (99.9%): [≈ 0, 0.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2998.304 ±(99.9%) 1437.415 MB/sec [Average]
[info]   (min, avg, max) = (2725.332, 2998.304, 3407.816), stdev = 373.292
[info]   CI (99.9%): [1560.888, 4435.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   71932.676 ±(99.9%) 35412.915 B/op [Average]
[info]   (min, avg, max) = (65067.907, 71932.676, 82735.068), stdev = 9196.622
[info]   CI (99.9%): [36519.761, 107345.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 7.000), stdev = 1.342
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 40.47% complete, ETA 01:07:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 165152.380 ops/s
[info] # Warmup Iteration   2: 220177.055 ops/s
[info] # Warmup Iteration   3: 223336.220 ops/s
[info] # Warmup Iteration   4: 223368.708 ops/s
[info] # Warmup Iteration   5: 222382.803 ops/s
[info] Iteration   1: 223735.115 ops/s
[info]                  ·gc.alloc.rate:            1578.464 MB/sec
[info]                  ·gc.alloc.rate.norm:       11104.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.211 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9540.518 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 223797.100 ops/s
[info]                  ·gc.alloc.rate:            1578.819 MB/sec
[info]                  ·gc.alloc.rate.norm:       11104.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.134 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9537.832 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 222710.006 ops/s
[info]                  ·gc.alloc.rate:                                  1571.376 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11104.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.184 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.302 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.189 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       14423.899 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                23.538 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   4: 222593.689 ops/s
[info]                  ·gc.alloc.rate:                                  1570.781 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11104.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.012 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.086 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1363.164 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9636.340 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 223968.441 ops/s
[info]                  ·gc.alloc.rate:                                  1580.441 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11104.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1363.093 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9576.934 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce":
[info]   223360.870 ±(99.9%) 2518.929 ops/s [Average]
[info]   (min, avg, max) = (222593.689, 223360.870, 223968.441), stdev = 654.158
[info]   CI (99.9%): [220841.941, 225879.799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1575.976 ±(99.9%) 17.473 MB/sec [Average]
[info]   (min, avg, max) = (1570.781, 1575.976, 1580.441), stdev = 4.538
[info]   CI (99.9%): [1558.503, 1593.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   11104.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11104.002, 11104.002, 11104.002), stdev = 0.001
[info]   CI (99.9%): [11104.002, 11104.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.040 ±(99.9%) 0.312 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.040, 0.184), stdev = 0.081
[info]   CI (99.9%): [≈ 0, 0.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.281 ±(99.9%) 2.203 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.281, 1.302), stdev = 0.572
[info]   CI (99.9%): [≈ 0, 2.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1495.958 ±(99.9%) 1173.728 MB/sec [Average]
[info]   (min, avg, max) = (1356.134, 1495.958, 2041.189), stdev = 304.813
[info]   CI (99.9%): [322.230, 2669.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   10543.105 ±(99.9%) 8355.104 B/op [Average]
[info]   (min, avg, max) = (9537.832, 10543.105, 14423.899), stdev = 2169.794
[info]   CI (99.9%): [2188.001, 18898.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   4.708 ±(99.9%) 40.533 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.708, 23.538), stdev = 10.526
[info]   CI (99.9%): [≈ 0, 45.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.600, 9.000), stdev = 3.362
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 40.71% complete, ETA 01:07:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 62532.119 ops/s
[info] # Warmup Iteration   2: 705298.688 ops/s
[info] # Warmup Iteration   3: 683380.152 ops/s
[info] # Warmup Iteration   4: 662806.490 ops/s
[info] # Warmup Iteration   5: 682874.101 ops/s
[info] Iteration   1: 677597.895 ops/s
[info]                  ·gc.alloc.rate:            530.378 MB/sec
[info]                  ·gc.alloc.rate.norm:       1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.787 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1567.443 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 688044.539 ops/s
[info]                  ·gc.alloc.rate:      538.610 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 683590.430 ops/s
[info]                  ·gc.alloc.rate:            535.142 MB/sec
[info]                  ·gc.alloc.rate.norm:       1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.870 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1553.682 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 684236.270 ops/s
[info]                  ·gc.alloc.rate:            535.570 MB/sec
[info]                  ·gc.alloc.rate.norm:       1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.778 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1552.229 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 684088.062 ops/s
[info]                  ·gc.alloc.rate:            535.469 MB/sec
[info]                  ·gc.alloc.rate.norm:       1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.787 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1552.542 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava":
[info]   683511.439 ±(99.9%) 14456.991 ops/s [Average]
[info]   (min, avg, max) = (677597.895, 683511.439, 688044.539), stdev = 3754.435
[info]   CI (99.9%): [669054.449, 697968.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   535.034 ±(99.9%) 11.382 MB/sec [Average]
[info]   (min, avg, max) = (530.378, 535.034, 538.610), stdev = 2.956
[info]   CI (99.9%): [523.652, 546.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   1232.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1232.001, 1232.001, 1232.001), stdev = 0.001
[info]   CI (99.9%): [1232.001, 1232.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   539.844 ±(99.9%) 1162.056 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.844, 674.870), stdev = 301.782
[info]   CI (99.9%): [≈ 0, 1701.900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   1245.179 ±(99.9%) 2680.454 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1245.179, 1567.443), stdev = 696.105
[info]   CI (99.9%): [≈ 0, 3925.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.200, 6.000), stdev = 2.387
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 40.94% complete, ETA 01:06:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 302608.329 ops/s
[info] # Warmup Iteration   2: 456578.531 ops/s
[info] # Warmup Iteration   3: 464229.293 ops/s
[info] # Warmup Iteration   4: 443754.696 ops/s
[info] # Warmup Iteration   5: 458501.687 ops/s
[info] Iteration   1: 462147.723 ops/s
[info]                  ·gc.alloc.rate:      474.438 MB/sec
[info]                  ·gc.alloc.rate.norm: 1616.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 462523.170 ops/s
[info]                  ·gc.alloc.rate:            474.815 MB/sec
[info]                  ·gc.alloc.rate.norm:       1616.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.311 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2305.180 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 462746.574 ops/s
[info]                  ·gc.alloc.rate:            475.132 MB/sec
[info]                  ·gc.alloc.rate.norm:       1616.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.415 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2304.000 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 462766.699 ops/s
[info]                  ·gc.alloc.rate:            475.145 MB/sec
[info]                  ·gc.alloc.rate.norm:       1616.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.420 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2303.950 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 459918.319 ops/s
[info]                  ·gc.alloc.rate:      472.133 MB/sec
[info]                  ·gc.alloc.rate.norm: 1616.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala":
[info]   462020.497 ±(99.9%) 4625.593 ops/s [Average]
[info]   (min, avg, max) = (459918.319, 462020.497, 462766.699), stdev = 1201.252
[info]   CI (99.9%): [457394.904, 466646.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   474.333 ±(99.9%) 4.864 MB/sec [Average]
[info]   (min, avg, max) = (472.133, 474.333, 475.145), stdev = 1.263
[info]   CI (99.9%): [469.469, 479.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1616.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1616.001, 1616.001, 1616.001), stdev = 0.001
[info]   CI (99.9%): [1616.001, 1616.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   406.429 ±(99.9%) 1428.656 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 406.429, 677.420), stdev = 371.017
[info]   CI (99.9%): [≈ 0, 1835.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1382.626 ±(99.9%) 4860.126 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1382.626, 2305.180), stdev = 1262.159
[info]   CI (99.9%): [≈ 0, 6242.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 5.000), stdev = 2.408
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 41.18% complete, ETA 01:06:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 579520.606 ops/s
[info] # Warmup Iteration   2: 597148.356 ops/s
[info] # Warmup Iteration   3: 630032.730 ops/s
[info] # Warmup Iteration   4: 603013.830 ops/s
[info] # Warmup Iteration   5: 643447.400 ops/s
[info] Iteration   1: 647296.167 ops/s
[info]                  ·gc.alloc.rate:            506.606 MB/sec
[info]                  ·gc.alloc.rate.norm:       1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.322 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1647.161 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 644796.875 ops/s
[info]                  ·gc.alloc.rate:                   504.697 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             677.388 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1653.551 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.626 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 643568.503 ops/s
[info]                  ·gc.alloc.rate:      503.721 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 641290.324 ops/s
[info]                  ·gc.alloc.rate:            502.081 MB/sec
[info]                  ·gc.alloc.rate.norm:       1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.224 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1664.217 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 640477.102 ops/s
[info]                  ·gc.alloc.rate:            501.301 MB/sec
[info]                  ·gc.alloc.rate.norm:       1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.051 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1666.381 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala":
[info]   643485.794 ±(99.9%) 10565.972 ops/s [Average]
[info]   (min, avg, max) = (640477.102, 643485.794, 647296.167), stdev = 2743.949
[info]   CI (99.9%): [632919.822, 654051.767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   503.681 ±(99.9%) 8.125 MB/sec [Average]
[info]   (min, avg, max) = (501.301, 503.681, 506.606), stdev = 2.110
[info]   CI (99.9%): [495.556, 511.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1232.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1232.001, 1232.001, 1232.001), stdev = 0.001
[info]   CI (99.9%): [1232.001, 1232.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   542.197 ±(99.9%) 1167.121 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 542.197, 678.224), stdev = 303.098
[info]   CI (99.9%): [≈ 0, 1709.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1326.262 ±(99.9%) 2855.039 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1326.262, 1666.381), stdev = 741.445
[info]   CI (99.9%): [≈ 0, 4181.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.325 ±(99.9%) 2.800 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.325, 1.626), stdev = 0.727
[info]   CI (99.9%): [≈ 0, 3.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 41.41% complete, ETA 01:06:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 610708.245 ops/s
[info] # Warmup Iteration   2: 667197.214 ops/s
[info] # Warmup Iteration   3: 671451.000 ops/s
[info] # Warmup Iteration   4: 671850.590 ops/s
[info] # Warmup Iteration   5: 667865.261 ops/s
[info] Iteration   1: 671847.784 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 672332.734 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 671978.861 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 671822.538 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 672043.439 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc":
[info]   672005.071 ±(99.9%) 788.160 ops/s [Average]
[info]   (min, avg, max) = (671822.538, 672005.071, 672332.734), stdev = 204.683
[info]   CI (99.9%): [671216.912, 672793.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 41.65% complete, ETA 01:06:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18410.771 ops/s
[info] # Warmup Iteration   2: 27146.286 ops/s
[info] # Warmup Iteration   3: 27220.402 ops/s
[info] # Warmup Iteration   4: 27276.107 ops/s
[info] # Warmup Iteration   5: 27205.508 ops/s
[info] Iteration   1: 27311.099 ops/s
[info]                  ·gc.alloc.rate:            1400.026 MB/sec
[info]                  ·gc.alloc.rate.norm:       80688.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.755 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 78078.913 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 27316.074 ops/s
[info]                  ·gc.alloc.rate:            1400.482 MB/sec
[info]                  ·gc.alloc.rate.norm:       80688.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.948 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 78064.624 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 27297.771 ops/s
[info]                  ·gc.alloc.rate:            1399.346 MB/sec
[info]                  ·gc.alloc.rate.norm:       80688.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.742 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 78116.089 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 27114.010 ops/s
[info]                  ·gc.alloc.rate:                                  1389.949 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80688.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.059 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.427 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1358.721 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       78875.186 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                231.986 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 27159.073 ops/s
[info]                  ·gc.alloc.rate:                                  1392.266 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80688.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.120 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 6.935 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.727 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       78976.127 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson":
[info]   27239.606 ±(99.9%) 368.345 ops/s [Average]
[info]   (min, avg, max) = (27114.010, 27239.606, 27316.074), stdev = 95.658
[info]   CI (99.9%): [26871.261, 27607.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1396.414 ±(99.9%) 18.981 MB/sec [Average]
[info]   (min, avg, max) = (1389.949, 1396.414, 1400.482), stdev = 4.929
[info]   CI (99.9%): [1377.433, 1415.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   80688.015 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (80688.015, 80688.015, 80688.016), stdev = 0.001
[info]   CI (99.9%): [80688.013, 80688.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.036 ±(99.9%) 0.206 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.036, 0.120), stdev = 0.053
[info]   CI (99.9%): [≈ 0, 0.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.072 ±(99.9%) 11.925 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.072, 6.935), stdev = 3.097
[info]   CI (99.9%): [≈ 0, 13.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1357.179 ±(99.9%) 13.608 MB/sec [Average]
[info]   (min, avg, max) = (1354.742, 1357.179, 1362.727), stdev = 3.534
[info]   CI (99.9%): [1343.571, 1370.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   78422.188 ±(99.9%) 1776.564 B/op [Average]
[info]   (min, avg, max) = (78064.624, 78422.188, 78976.127), stdev = 461.368
[info]   CI (99.9%): [76645.623, 80198.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   46.397 ±(99.9%) 399.494 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 46.397, 231.986), stdev = 103.747
[info]   CI (99.9%): [≈ 0, 445.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.000, 9.000), stdev = 2.550
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 41.88% complete, ETA 01:05:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4387.089 ops/s
[info] # Warmup Iteration   2: 6195.374 ops/s
[info] # Warmup Iteration   3: 6258.892 ops/s
[info] # Warmup Iteration   4: 6246.502 ops/s
[info] # Warmup Iteration   5: 6273.807 ops/s
[info] Iteration   1: 6265.417 ops/s
[info]                  ·gc.alloc.rate:            964.468 MB/sec
[info]                  ·gc.alloc.rate.norm:       242296.070 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.999 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 340657.529 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 6376.918 ops/s
[info]                  ·gc.alloc.rate:            981.697 MB/sec
[info]                  ·gc.alloc.rate.norm:       242296.064 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.101 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 167364.435 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 6328.335 ops/s
[info]                  ·gc.alloc.rate:            974.183 MB/sec
[info]                  ·gc.alloc.rate.norm:       242296.064 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.026 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 337267.099 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 6360.232 ops/s
[info]                  ·gc.alloc.rate:            979.149 MB/sec
[info]                  ·gc.alloc.rate.norm:       242296.064 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.042 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 167785.345 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 6379.635 ops/s
[info]                  ·gc.alloc.rate:            982.390 MB/sec
[info]                  ·gc.alloc.rate.norm:       242296.064 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.154 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 167259.537 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce":
[info]   6342.107 ±(99.9%) 182.852 ops/s [Average]
[info]   (min, avg, max) = (6265.417, 6342.107, 6379.635), stdev = 47.486
[info]   CI (99.9%): [6159.255, 6524.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   976.377 ±(99.9%) 28.479 MB/sec [Average]
[info]   (min, avg, max) = (964.468, 976.377, 982.390), stdev = 7.396
[info]   CI (99.9%): [947.899, 1004.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   242296.065 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (242296.064, 242296.065, 242296.070), stdev = 0.003
[info]   CI (99.9%): [242296.055, 242296.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   949.264 ±(99.9%) 1429.777 MB/sec [Average]
[info]   (min, avg, max) = (678.042, 949.264, 1356.026), stdev = 371.309
[info]   CI (99.9%): [≈ 0, 2379.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   236066.789 ±(99.9%) 361722.512 B/op [Average]
[info]   (min, avg, max) = (167259.537, 236066.789, 340657.529), stdev = 93938.188
[info]   CI (99.9%): [≈ 0, 597789.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 9.000), stdev = 2.510
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 42.12% complete, ETA 01:05:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2953.091 ops/s
[info] # Warmup Iteration   2: 6372.188 ops/s
[info] # Warmup Iteration   3: 6632.778 ops/s
[info] # Warmup Iteration   4: 6703.485 ops/s
[info] # Warmup Iteration   5: 6679.528 ops/s
[info] Iteration   1: 6719.280 ops/s
[info]                  ·gc.alloc.rate:            968.387 MB/sec
[info]                  ·gc.alloc.rate.norm:       226864.065 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.283 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 158667.132 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 6685.326 ops/s
[info]                  ·gc.alloc.rate:            963.541 MB/sec
[info]                  ·gc.alloc.rate.norm:       226864.061 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.641 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 318947.747 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 6692.937 ops/s
[info]                  ·gc.alloc.rate:            964.778 MB/sec
[info]                  ·gc.alloc.rate.norm:       226864.066 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.380 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 159283.315 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 6696.499 ops/s
[info]                  ·gc.alloc.rate:            965.163 MB/sec
[info]                  ·gc.alloc.rate.norm:       226864.061 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.346 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 159211.973 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 6660.662 ops/s
[info]                  ·gc.alloc.rate:                   959.960 MB/sec
[info]                  ·gc.alloc.rate.norm:              226864.061 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.004 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        319987.242 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 157.397 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala":
[info]   6690.941 ±(99.9%) 81.373 ops/s [Average]
[info]   (min, avg, max) = (6660.662, 6690.941, 6719.280), stdev = 21.132
[info]   CI (99.9%): [6609.568, 6772.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   964.366 ±(99.9%) 11.722 MB/sec [Average]
[info]   (min, avg, max) = (959.960, 964.366, 968.387), stdev = 3.044
[info]   CI (99.9%): [952.644, 976.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   226864.063 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (226864.061, 226864.063, 226864.066), stdev = 0.002
[info]   CI (99.9%): [226864.053, 226864.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   948.131 ±(99.9%) 1427.821 MB/sec [Average]
[info]   (min, avg, max) = (677.283, 948.131, 1354.641), stdev = 370.801
[info]   CI (99.9%): [≈ 0, 2375.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   223219.482 ±(99.9%) 338329.532 B/op [Average]
[info]   (min, avg, max) = (158667.132, 223219.482, 319987.242), stdev = 87863.105
[info]   CI (99.9%): [≈ 0, 561549.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   31.479 ±(99.9%) 271.046 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 31.479, 157.397), stdev = 70.390
[info]   CI (99.9%): [≈ 0, 302.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.600, 10.000), stdev = 2.702
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 42.35% complete, ETA 01:05:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 130951.878 ops/s
[info] # Warmup Iteration   2: 146835.256 ops/s
[info] # Warmup Iteration   3: 149974.442 ops/s
[info] # Warmup Iteration   4: 149356.709 ops/s
[info] # Warmup Iteration   5: 150835.761 ops/s
[info] Iteration   1: 150917.847 ops/s
[info]                  ·gc.alloc.rate:            1461.787 MB/sec
[info]                  ·gc.alloc.rate.norm:       15248.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1357.258 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14157.648 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 150544.588 ops/s
[info]                  ·gc.alloc.rate:            1458.349 MB/sec
[info]                  ·gc.alloc.rate.norm:       15248.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1357.420 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14192.720 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 150087.810 ops/s
[info]                  ·gc.alloc.rate:                   1453.913 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1357.365 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        14235.454 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 27.940 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 148524.827 ops/s
[info]                  ·gc.alloc.rate:                                  1438.760 MB/sec
[info]                  ·gc.alloc.rate.norm:                             15248.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.086 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.908 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.689 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       14441.796 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 148494.271 ops/s
[info]                  ·gc.alloc.rate:                                  1438.462 MB/sec
[info]                  ·gc.alloc.rate.norm:                             15248.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.017 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.183 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.090 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       21667.798 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala":
[info]   149713.869 ±(99.9%) 4382.266 ops/s [Average]
[info]   (min, avg, max) = (148494.271, 149713.869, 150917.847), stdev = 1138.061
[info]   CI (99.9%): [145331.602, 154096.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1450.254 ±(99.9%) 42.317 MB/sec [Average]
[info]   (min, avg, max) = (1438.462, 1450.254, 1461.787), stdev = 10.990
[info]   CI (99.9%): [1407.937, 1492.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   15248.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (15248.003, 15248.003, 15248.003), stdev = 0.001
[info]   CI (99.9%): [15248.002, 15248.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.021 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.086), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.218 ±(99.9%) 1.515 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.218, 0.908), stdev = 0.393
[info]   CI (99.9%): [≈ 0, 1.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1495.764 ±(99.9%) 1180.347 MB/sec [Average]
[info]   (min, avg, max) = (1357.258, 1495.764, 2044.090), stdev = 306.532
[info]   CI (99.9%): [315.417, 2676.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   15739.083 ±(99.9%) 12769.065 B/op [Average]
[info]   (min, avg, max) = (14157.648, 15739.083, 21667.798), stdev = 3316.086
[info]   CI (99.9%): [2970.018, 28508.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.533 ±(99.9%) 4.588 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.533, 2.664), stdev = 1.191
[info]   CI (99.9%): [≈ 0, 5.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   5.588 ±(99.9%) 48.114 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.588, 27.940), stdev = 12.495
[info]   CI (99.9%): [≈ 0, 53.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 7.000), stdev = 1.643
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 42.59% complete, ETA 01:04:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2663.820 ops/s
[info] # Warmup Iteration   2: 6014.792 ops/s
[info] # Warmup Iteration   3: 6102.164 ops/s
[info] # Warmup Iteration   4: 6070.897 ops/s
[info] # Warmup Iteration   5: 6164.758 ops/s
[info] Iteration   1: 6189.616 ops/s
[info]                  ·gc.alloc.rate:            1125.795 MB/sec
[info]                  ·gc.alloc.rate.norm:       286296.066 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.336 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 172250.330 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 6191.269 ops/s
[info]                  ·gc.alloc.rate:                   1126.459 MB/sec
[info]                  ·gc.alloc.rate.norm:              286296.066 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.366 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        344220.088 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 169.316 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 6187.518 ops/s
[info]                  ·gc.alloc.rate:            1125.418 MB/sec
[info]                  ·gc.alloc.rate.norm:       286296.071 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.655 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 344611.986 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 6205.858 ops/s
[info]                  ·gc.alloc.rate:            1129.034 MB/sec
[info]                  ·gc.alloc.rate.norm:       286296.066 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.315 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 171750.973 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 6291.068 ops/s
[info]                  ·gc.alloc.rate:                   1144.427 MB/sec
[info]                  ·gc.alloc.rate.norm:              286296.065 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.771 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        338916.826 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 999.755 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson":
[info]   6213.066 ±(99.9%) 170.193 ops/s [Average]
[info]   (min, avg, max) = (6187.518, 6213.066, 6291.068), stdev = 44.199
[info]   CI (99.9%): [6042.873, 6383.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1130.227 ±(99.9%) 31.047 MB/sec [Average]
[info]   (min, avg, max) = (1125.418, 1130.227, 1144.427), stdev = 8.063
[info]   CI (99.9%): [1099.179, 1161.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   286296.067 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (286296.065, 286296.067, 286296.071), stdev = 0.003
[info]   CI (99.9%): [286296.057, 286296.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1083.689 ±(99.9%) 1428.425 MB/sec [Average]
[info]   (min, avg, max) = (677.315, 1083.689, 1354.771), stdev = 370.957
[info]   CI (99.9%): [≈ 0, 2512.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   274350.041 ±(99.9%) 359877.409 B/op [Average]
[info]   (min, avg, max) = (171750.973, 274350.041, 344611.986), stdev = 93459.020
[info]   CI (99.9%): [≈ 0, 634227.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   233.814 ±(99.9%) 1672.740 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 233.814, 999.755), stdev = 434.405
[info]   CI (99.9%): [≈ 0, 1906.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.200, 9.000), stdev = 2.049
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 42.82% complete, ETA 01:04:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12378.691 ops/s
[info] # Warmup Iteration   2: 16888.207 ops/s
[info] # Warmup Iteration   3: 17827.886 ops/s
[info] # Warmup Iteration   4: 18049.763 ops/s
[info] # Warmup Iteration   5: 18090.043 ops/s
[info] Iteration   1: 18036.706 ops/s
[info]                  ·gc.alloc.rate:            818.518 MB/sec
[info]                  ·gc.alloc.rate.norm:       71432.023 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.027 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 59171.306 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 17976.660 ops/s
[info]                  ·gc.alloc.rate:            815.645 MB/sec
[info]                  ·gc.alloc.rate.norm:       71416.726 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.092 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 118737.527 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 18172.351 ops/s
[info]                  ·gc.alloc.rate:            824.387 MB/sec
[info]                  ·gc.alloc.rate.norm:       71408.024 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.006 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 58728.563 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 18132.481 ops/s
[info]                  ·gc.alloc.rate:            822.619 MB/sec
[info]                  ·gc.alloc.rate.norm:       71408.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.044 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 58858.093 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 18134.004 ops/s
[info]                  ·gc.alloc.rate:            822.740 MB/sec
[info]                  ·gc.alloc.rate.norm:       71408.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.106 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 58854.847 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce":
[info]   18090.440 ±(99.9%) 311.688 ops/s [Average]
[info]   (min, avg, max) = (17976.660, 18090.440, 18172.351), stdev = 80.944
[info]   CI (99.9%): [17778.753, 18402.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   820.782 ±(99.9%) 13.846 MB/sec [Average]
[info]   (min, avg, max) = (815.645, 820.782, 824.387), stdev = 3.596
[info]   CI (99.9%): [806.936, 834.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   71414.564 ±(99.9%) 40.286 B/op [Average]
[info]   (min, avg, max) = (71408.022, 71414.564, 71432.023), stdev = 10.462
[info]   CI (99.9%): [71374.277, 71454.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   813.655 ±(99.9%) 1167.637 MB/sec [Average]
[info]   (min, avg, max) = (678.006, 813.655, 1356.092), stdev = 303.232
[info]   CI (99.9%): [≈ 0, 1981.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   70870.067 ±(99.9%) 103040.236 B/op [Average]
[info]   (min, avg, max) = (58728.563, 70870.067, 118737.527), stdev = 26759.222
[info]   CI (99.9%): [≈ 0, 173910.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 8.000), stdev = 1.789
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 43.06% complete, ETA 01:04:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11701.146 ops/s
[info] # Warmup Iteration   2: 19952.783 ops/s
[info] # Warmup Iteration   3: 19777.971 ops/s
[info] # Warmup Iteration   4: 19794.797 ops/s
[info] # Warmup Iteration   5: 20056.147 ops/s
[info] Iteration   1: 20005.423 ops/s
[info]                  ·gc.alloc.rate:            847.731 MB/sec
[info]                  ·gc.alloc.rate.norm:       66696.026 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.380 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 53293.443 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 19054.282 ops/s
[info]                  ·gc.alloc.rate:            807.523 MB/sec
[info]                  ·gc.alloc.rate.norm:       66696.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.967 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 111911.197 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 19967.733 ops/s
[info]                  ·gc.alloc.rate:            846.146 MB/sec
[info]                  ·gc.alloc.rate.norm:       66696.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.365 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 53392.169 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 19804.251 ops/s
[info]                  ·gc.alloc.rate:            839.101 MB/sec
[info]                  ·gc.alloc.rate.norm:       66696.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.321 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 53836.924 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 19235.549 ops/s
[info]                  ·gc.alloc.rate:            815.061 MB/sec
[info]                  ·gc.alloc.rate.norm:       66696.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.374 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 55429.169 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala":
[info]   19613.448 ±(99.9%) 1690.606 ops/s [Average]
[info]   (min, avg, max) = (19054.282, 19613.448, 20005.423), stdev = 439.045
[info]   CI (99.9%): [17922.842, 21304.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   831.113 ±(99.9%) 71.525 MB/sec [Average]
[info]   (min, avg, max) = (807.523, 831.113, 847.731), stdev = 18.575
[info]   CI (99.9%): [759.588, 902.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   66696.022 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (66696.021, 66696.022, 66696.026), stdev = 0.002
[info]   CI (99.9%): [66696.015, 66696.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   812.881 ±(99.9%) 1166.880 MB/sec [Average]
[info]   (min, avg, max) = (677.321, 812.881, 1354.967), stdev = 303.035
[info]   CI (99.9%): [≈ 0, 1979.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   65572.580 ±(99.9%) 99801.927 B/op [Average]
[info]   (min, avg, max) = (53293.443, 65572.580, 111911.197), stdev = 25918.244
[info]   CI (99.9%): [≈ 0, 165374.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.200, 12.000), stdev = 3.564
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 43.29% complete, ETA 01:04:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 530119.515 ops/s
[info] # Warmup Iteration   2: 624763.977 ops/s
[info] # Warmup Iteration   3: 619875.146 ops/s
[info] # Warmup Iteration   4: 628193.229 ops/s
[info] # Warmup Iteration   5: 625255.086 ops/s
[info] Iteration   1: 627522.630 ops/s
[info]                  ·gc.alloc.rate:                   1422.970 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.927 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3399.895 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.671 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 614267.926 ops/s
[info]                  ·gc.alloc.rate:            1392.441 MB/sec
[info]                  ·gc.alloc.rate.norm:       3568.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.454 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3473.225 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 620605.857 ops/s
[info]                  ·gc.alloc.rate:                   1407.195 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.167 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3436.082 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 10.136 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 622212.617 ops/s
[info]                  ·gc.alloc.rate:                                  1410.416 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3568.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.168 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.426 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.697 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3447.285 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 621809.726 ops/s
[info]                  ·gc.alloc.rate:                                  1409.520 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3568.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.754 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3449.618 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala":
[info]   621283.751 ±(99.9%) 18239.252 ops/s [Average]
[info]   (min, avg, max) = (614267.926, 621283.751, 627522.630), stdev = 4736.676
[info]   CI (99.9%): [603044.499, 639523.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1408.508 ±(99.9%) 41.904 MB/sec [Average]
[info]   (min, avg, max) = (1392.441, 1408.508, 1422.970), stdev = 10.882
[info]   CI (99.9%): [1366.605, 1450.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3568.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3568.001, 3568.001, 3568.001), stdev = 0.001
[info]   CI (99.9%): [3568.001, 3568.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.034 ±(99.9%) 0.289 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.034, 0.168), stdev = 0.075
[info]   CI (99.9%): [≈ 0, 0.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.086 ±(99.9%) 0.732 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.086, 0.426), stdev = 0.190
[info]   CI (99.9%): [≈ 0, 0.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1358.400 ±(99.9%) 15.241 MB/sec [Average]
[info]   (min, avg, max) = (1355.167, 1358.400, 1362.754), stdev = 3.958
[info]   CI (99.9%): [1343.159, 1373.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   3441.221 ±(99.9%) 103.069 B/op [Average]
[info]   (min, avg, max) = (3399.895, 3441.221, 3473.225), stdev = 26.767
[info]   CI (99.9%): [3338.152, 3544.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.690 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.998), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   2.361 ±(99.9%) 16.966 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.361, 10.136), stdev = 4.406
[info]   CI (99.9%): [≈ 0, 19.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 10.000), stdev = 3.000
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 43.53% complete, ETA 01:03:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 444051.684 ops/s
[info] # Warmup Iteration   2: 491078.525 ops/s
[info] # Warmup Iteration   3: 490587.734 ops/s
[info] # Warmup Iteration   4: 489978.140 ops/s
[info] # Warmup Iteration   5: 490238.146 ops/s
[info] Iteration   1: 490037.592 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 489868.704 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 490096.943 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 490436.323 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 490216.566 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   490131.226 ±(99.9%) 815.091 ops/s [Average]
[info]   (min, avg, max) = (489868.704, 490131.226, 490436.323), stdev = 211.676
[info]   CI (99.9%): [489316.135, 490946.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 43.76% complete, ETA 01:03:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12611.231 ops/s
[info] # Warmup Iteration   2: 18515.437 ops/s
[info] # Warmup Iteration   3: 18832.902 ops/s
[info] # Warmup Iteration   4: 18337.086 ops/s
[info] # Warmup Iteration   5: 18265.113 ops/s
[info] Iteration   1: 18496.025 ops/s
[info]                  ·gc.alloc.rate:            852.834 MB/sec
[info]                  ·gc.alloc.rate.norm:       72576.028 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.795 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 115292.912 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 18849.389 ops/s
[info]                  ·gc.alloc.rate:            869.038 MB/sec
[info]                  ·gc.alloc.rate.norm:       72563.833 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.385 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 56561.037 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 18851.622 ops/s
[info]                  ·gc.alloc.rate:            869.236 MB/sec
[info]                  ·gc.alloc.rate.norm:       72560.023 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.540 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 56558.037 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 18826.591 ops/s
[info]                  ·gc.alloc.rate:            867.864 MB/sec
[info]                  ·gc.alloc.rate.norm:       72560.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.737 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 113266.255 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 18866.214 ops/s
[info]                  ·gc.alloc.rate:            869.743 MB/sec
[info]                  ·gc.alloc.rate.norm:       72560.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.396 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 56513.079 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson":
[info]   18777.968 ±(99.9%) 609.356 ops/s [Average]
[info]   (min, avg, max) = (18496.025, 18777.968, 18866.214), stdev = 158.248
[info]   CI (99.9%): [18168.612, 19387.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   865.743 ±(99.9%) 27.915 MB/sec [Average]
[info]   (min, avg, max) = (852.834, 865.743, 869.743), stdev = 7.249
[info]   CI (99.9%): [837.828, 893.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   72563.985 ±(99.9%) 26.689 B/op [Average]
[info]   (min, avg, max) = (72560.022, 72563.985, 72576.028), stdev = 6.931
[info]   CI (99.9%): [72537.296, 72590.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   948.371 ±(99.9%) 1428.537 MB/sec [Average]
[info]   (min, avg, max) = (677.385, 948.371, 1354.795), stdev = 370.987
[info]   CI (99.9%): [≈ 0, 2376.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   79638.264 ±(99.9%) 121800.396 B/op [Average]
[info]   (min, avg, max) = (56513.079, 79638.264, 115292.912), stdev = 31631.176
[info]   CI (99.9%): [≈ 0, 201438.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 9.000), stdev = 2.588
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 44.00% complete, ETA 01:03:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7946.581 ops/s
[info] # Warmup Iteration   2: 10940.972 ops/s
[info] # Warmup Iteration   3: 11250.150 ops/s
[info] # Warmup Iteration   4: 10849.734 ops/s
[info] # Warmup Iteration   5: 10982.124 ops/s
[info] Iteration   1: 11197.918 ops/s
[info]                  ·gc.alloc.rate:            1124.901 MB/sec
[info]                  ·gc.alloc.rate.norm:       158112.036 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.155 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 190616.137 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 11223.759 ops/s
[info]                  ·gc.alloc.rate:            1127.717 MB/sec
[info]                  ·gc.alloc.rate.norm:       158112.036 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.280 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 190157.721 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 11232.971 ops/s
[info]                  ·gc.alloc.rate:            1128.468 MB/sec
[info]                  ·gc.alloc.rate.norm:       158112.039 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.048 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 95002.703 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 11203.867 ops/s
[info]                  ·gc.alloc.rate:            1125.743 MB/sec
[info]                  ·gc.alloc.rate.norm:       158112.036 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.321 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 190497.076 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 11196.510 ops/s
[info]                  ·gc.alloc.rate:                   1124.687 MB/sec
[info]                  ·gc.alloc.rate.norm:              158112.049 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1356.017 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        190633.158 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 468.156 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce":
[info]   11211.005 ±(99.9%) 63.200 ops/s [Average]
[info]   (min, avg, max) = (11196.510, 11211.005, 11232.971), stdev = 16.413
[info]   CI (99.9%): [11147.806, 11274.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1126.303 ±(99.9%) 6.550 MB/sec [Average]
[info]   (min, avg, max) = (1124.687, 1126.303, 1128.468), stdev = 1.701
[info]   CI (99.9%): [1119.753, 1132.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   158112.039 ±(99.9%) 0.020 B/op [Average]
[info]   (min, avg, max) = (158112.036, 158112.039, 158112.049), stdev = 0.005
[info]   CI (99.9%): [158112.019, 158112.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1220.564 ±(99.9%) 1167.808 MB/sec [Average]
[info]   (min, avg, max) = (678.048, 1220.564, 1356.321), stdev = 303.276
[info]   CI (99.9%): [52.756, 2388.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   171381.359 ±(99.9%) 164412.463 B/op [Average]
[info]   (min, avg, max) = (95002.703, 171381.359, 190633.158), stdev = 42697.395
[info]   CI (99.9%): [6968.896, 335793.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   93.631 ±(99.9%) 806.193 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 93.631, 468.156), stdev = 209.366
[info]   CI (99.9%): [≈ 0, 899.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.600, 8.000), stdev = 2.074
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 44.24% complete, ETA 01:03:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6007.327 ops/s
[info] # Warmup Iteration   2: 11118.402 ops/s
[info] # Warmup Iteration   3: 11249.223 ops/s
[info] # Warmup Iteration   4: 11189.573 ops/s
[info] # Warmup Iteration   5: 11283.187 ops/s
[info] Iteration   1: 11211.887 ops/s
[info]                  ·gc.alloc.rate:            1026.281 MB/sec
[info]                  ·gc.alloc.rate.norm:       144058.752 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.930 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 190191.152 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 11296.536 ops/s
[info]                  ·gc.alloc.rate:            1034.028 MB/sec
[info]                  ·gc.alloc.rate.norm:       144088.868 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.302 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 94380.192 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 10947.913 ops/s
[info]                  ·gc.alloc.rate:            1002.106 MB/sec
[info]                  ·gc.alloc.rate.norm:       144088.037 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.636 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 194776.583 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 11040.398 ops/s
[info]                  ·gc.alloc.rate:            1010.692 MB/sec
[info]                  ·gc.alloc.rate.norm:       144088.037 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.368 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 96568.124 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 10958.041 ops/s
[info]                  ·gc.alloc.rate:                   1003.134 MB/sec
[info]                  ·gc.alloc.rate.norm:              144088.050 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.998 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        194485.449 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 95.664 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala":
[info]   11090.955 ±(99.9%) 601.401 ops/s [Average]
[info]   (min, avg, max) = (10947.913, 11090.955, 11296.536), stdev = 156.182
[info]   CI (99.9%): [10489.555, 11692.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1015.248 ±(99.9%) 54.951 MB/sec [Average]
[info]   (min, avg, max) = (1002.106, 1015.248, 1034.028), stdev = 14.271
[info]   CI (99.9%): [960.297, 1070.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   144082.349 ±(99.9%) 50.813 B/op [Average]
[info]   (min, avg, max) = (144058.752, 144082.349, 144088.868), stdev = 13.196
[info]   CI (99.9%): [144031.535, 144133.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1083.647 ±(99.9%) 1428.244 MB/sec [Average]
[info]   (min, avg, max) = (677.302, 1083.647, 1354.930), stdev = 370.910
[info]   CI (99.9%): [≈ 0, 2511.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   154080.300 ±(99.9%) 206148.948 B/op [Average]
[info]   (min, avg, max) = (94380.192, 154080.300, 194776.583), stdev = 53536.227
[info]   CI (99.9%): [≈ 0, 360229.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   19.133 ±(99.9%) 164.740 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 19.133, 95.664), stdev = 42.782
[info]   CI (99.9%): [≈ 0, 183.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.800, 10.000), stdev = 3.033
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 44.47% complete, ETA 01:02:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 231519.540 ops/s
[info] # Warmup Iteration   2: 253237.939 ops/s
[info] # Warmup Iteration   3: 244439.469 ops/s
[info] # Warmup Iteration   4: 249340.099 ops/s
[info] # Warmup Iteration   5: 247406.425 ops/s
[info] Iteration   1: 249118.257 ops/s
[info]                  ·gc.alloc.rate:            1440.758 MB/sec
[info]                  ·gc.alloc.rate.norm:       9104.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.001 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8568.427 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 248769.149 ops/s
[info]                  ·gc.alloc.rate:            1438.888 MB/sec
[info]                  ·gc.alloc.rate.norm:       9104.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.167 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8580.618 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 249127.453 ops/s
[info]                  ·gc.alloc.rate:                   1440.864 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1356.046 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        8568.083 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 21.041 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 249824.052 ops/s
[info]                  ·gc.alloc.rate:                                  1445.104 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9104.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.104 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.653 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.331 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12879.068 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 250018.446 ops/s
[info]                  ·gc.alloc.rate:            1446.080 MB/sec
[info]                  ·gc.alloc.rate.norm:       9104.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.744 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8579.350 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala":
[info]   249371.471 ±(99.9%) 2028.324 ops/s [Average]
[info]   (min, avg, max) = (248769.149, 249371.471, 250018.446), stdev = 526.749
[info]   CI (99.9%): [247343.148, 251399.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1442.339 ±(99.9%) 11.903 MB/sec [Average]
[info]   (min, avg, max) = (1438.888, 1442.339, 1446.080), stdev = 3.091
[info]   CI (99.9%): [1430.436, 1454.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   9104.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9104.002, 9104.002, 9104.002), stdev = 0.001
[info]   CI (99.9%): [9104.001, 9104.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.021 ±(99.9%) 0.178 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.104), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.131 ±(99.9%) 1.124 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.131, 0.653), stdev = 0.292
[info]   CI (99.9%): [≈ 0, 1.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1495.058 ±(99.9%) 1182.404 MB/sec [Average]
[info]   (min, avg, max) = (1356.001, 1495.058, 2044.331), stdev = 307.067
[info]   CI (99.9%): [312.654, 2677.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   9435.109 ±(99.9%) 7413.415 B/op [Average]
[info]   (min, avg, max) = (8568.083, 9435.109, 12879.068), stdev = 1925.240
[info]   CI (99.9%): [2021.694, 16848.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   4.208 ±(99.9%) 36.235 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.208, 21.041), stdev = 9.410
[info]   CI (99.9%): [≈ 0, 40.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 1.817
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 44.71% complete, ETA 01:02:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4255.754 ops/s
[info] # Warmup Iteration   2: 10013.645 ops/s
[info] # Warmup Iteration   3: 10386.457 ops/s
[info] # Warmup Iteration   4: 10411.447 ops/s
[info] # Warmup Iteration   5: 10421.863 ops/s
[info] Iteration   1: 10419.048 ops/s
[info]                  ·gc.alloc.rate:                   1304.147 MB/sec
[info]                  ·gc.alloc.rate.norm:              197000.045 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.217 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        204563.382 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 100.621 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 10305.522 ops/s
[info]                  ·gc.alloc.rate:                   1289.981 MB/sec
[info]                  ·gc.alloc.rate.norm:              197000.040 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.525 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        206704.155 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 101.724 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 10432.546 ops/s
[info]                  ·gc.alloc.rate:            1306.030 MB/sec
[info]                  ·gc.alloc.rate.norm:       197000.039 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.889 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 204369.834 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 10393.946 ops/s
[info]                  ·gc.alloc.rate:                   1300.942 MB/sec
[info]                  ·gc.alloc.rate.norm:              197000.039 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1358.133 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        205660.491 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 706.044 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 10483.864 ops/s
[info]                  ·gc.alloc.rate:                                  1312.189 MB/sec
[info]                  ·gc.alloc.rate.norm:                             197000.039 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.013 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.780 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       204595.317 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson":
[info]   10406.985 ±(99.9%) 252.313 ops/s [Average]
[info]   (min, avg, max) = (10305.522, 10406.985, 10483.864), stdev = 65.525
[info]   CI (99.9%): [10154.672, 10659.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1302.658 ±(99.9%) 31.524 MB/sec [Average]
[info]   (min, avg, max) = (1289.981, 1302.658, 1312.189), stdev = 8.187
[info]   CI (99.9%): [1271.134, 1334.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   197000.040 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (197000.039, 197000.040, 197000.045), stdev = 0.003
[info]   CI (99.9%): [197000.030, 197000.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.003 ±(99.9%) 0.023 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.013), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.404 ±(99.9%) 3.476 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.404, 2.019), stdev = 0.903
[info]   CI (99.9%): [≈ 0, 3.880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1356.709 ±(99.9%) 14.732 MB/sec [Average]
[info]   (min, avg, max) = (1353.525, 1356.709, 1362.780), stdev = 3.826
[info]   CI (99.9%): [1341.976, 1371.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   205178.636 ±(99.9%) 3817.944 B/op [Average]
[info]   (min, avg, max) = (204369.834, 205178.636, 206704.155), stdev = 991.508
[info]   CI (99.9%): [201360.692, 208996.580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.199 ±(99.9%) 7.565 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.199, 4.663), stdev = 1.965
[info]   CI (99.9%): [≈ 0, 8.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   181.678 ±(99.9%) 1145.423 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 181.678, 706.044), stdev = 297.463
[info]   CI (99.9%): [≈ 0, 1327.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.200, 11.000), stdev = 3.633
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 44.94% complete, ETA 01:02:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20233.998 ops/s
[info] # Warmup Iteration   2: 27946.520 ops/s
[info] # Warmup Iteration   3: 27590.828 ops/s
[info] # Warmup Iteration   4: 27542.000 ops/s
[info] # Warmup Iteration   5: 27756.799 ops/s
[info] Iteration   1: 27614.114 ops/s
[info]                  ·gc.alloc.rate:                   953.133 MB/sec
[info]                  ·gc.alloc.rate.norm:              54312.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.807 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        77257.500 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 37.964 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 27678.694 ops/s
[info]                  ·gc.alloc.rate:            955.433 MB/sec
[info]                  ·gc.alloc.rate.norm:       54312.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.327 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 38559.779 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 27746.975 ops/s
[info]                  ·gc.alloc.rate:            957.697 MB/sec
[info]                  ·gc.alloc.rate.norm:       54312.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.219 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 38462.522 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 27874.865 ops/s
[info]                  ·gc.alloc.rate:            961.895 MB/sec
[info]                  ·gc.alloc.rate.norm:       54312.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.130 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 76571.885 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 27840.068 ops/s
[info]                  ·gc.alloc.rate:            960.672 MB/sec
[info]                  ·gc.alloc.rate.norm:       54312.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.054 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 38334.065 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce":
[info]   27750.943 ±(99.9%) 418.543 ops/s [Average]
[info]   (min, avg, max) = (27614.114, 27750.943, 27874.865), stdev = 108.694
[info]   CI (99.9%): [27332.400, 28169.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   957.766 ±(99.9%) 13.939 MB/sec [Average]
[info]   (min, avg, max) = (953.133, 957.766, 961.895), stdev = 3.620
[info]   CI (99.9%): [943.827, 971.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   54312.015 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (54312.015, 54312.015, 54312.016), stdev = 0.001
[info]   CI (99.9%): [54312.013, 54312.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   949.307 ±(99.9%) 1429.472 MB/sec [Average]
[info]   (min, avg, max) = (678.054, 949.307, 1356.130), stdev = 371.229
[info]   CI (99.9%): [≈ 0, 2378.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   53837.150 ±(99.9%) 81126.769 B/op [Average]
[info]   (min, avg, max) = (38334.065, 53837.150, 77257.500), stdev = 21068.364
[info]   CI (99.9%): [≈ 0, 134963.920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   7.593 ±(99.9%) 65.377 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.593, 37.964), stdev = 16.978
[info]   CI (99.9%): [≈ 0, 72.970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 9.000), stdev = 2.302
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 45.18% complete, ETA 01:02:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 48158.771 ops/s
[info] # Warmup Iteration   2: 76272.593 ops/s
[info] # Warmup Iteration   3: 75213.134 ops/s
[info] # Warmup Iteration   4: 76546.612 ops/s
[info] # Warmup Iteration   5: 76545.218 ops/s
[info] Iteration   1: 76183.250 ops/s
[info]                  ·gc.alloc.rate:            1212.857 MB/sec
[info]                  ·gc.alloc.rate.norm:       25056.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.893 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 27990.283 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 78057.421 ops/s
[info]                  ·gc.alloc.rate:            1242.853 MB/sec
[info]                  ·gc.alloc.rate.norm:       25056.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.529 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13659.034 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 77126.805 ops/s
[info]                  ·gc.alloc.rate:            1227.715 MB/sec
[info]                  ·gc.alloc.rate.norm:       25056.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.743 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 27648.478 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 77295.588 ops/s
[info]                  ·gc.alloc.rate:                   1230.858 MB/sec
[info]                  ·gc.alloc.rate.norm:              25056.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.243 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        27588.037 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 81.381 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 76281.836 ops/s
[info]                  ·gc.alloc.rate:                                  1214.450 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25056.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.126 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.601 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.942 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       28119.621 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala":
[info]   76988.980 ±(99.9%) 2985.072 ops/s [Average]
[info]   (min, avg, max) = (76183.250, 76988.980, 78057.421), stdev = 775.214
[info]   CI (99.9%): [74003.909, 79974.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1225.747 ±(99.9%) 47.801 MB/sec [Average]
[info]   (min, avg, max) = (1212.857, 1225.747, 1242.853), stdev = 12.414
[info]   CI (99.9%): [1177.946, 1273.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   25056.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (25056.005, 25056.005, 25056.006), stdev = 0.001
[info]   CI (99.9%): [25056.005, 25056.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.025 ±(99.9%) 0.217 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.126), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.520 ±(99.9%) 4.479 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.520, 2.601), stdev = 1.163
[info]   CI (99.9%): [≈ 0, 4.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1221.070 ±(99.9%) 1170.088 MB/sec [Average]
[info]   (min, avg, max) = (677.529, 1221.070, 1362.942), stdev = 303.868
[info]   CI (99.9%): [50.981, 2391.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   25001.091 ±(99.9%) 24429.877 B/op [Average]
[info]   (min, avg, max) = (13659.034, 25001.091, 28119.621), stdev = 6344.362
[info]   CI (99.9%): [571.213, 49430.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.800 ±(99.9%) 6.884 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.800, 3.998), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   16.276 ±(99.9%) 140.142 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16.276, 81.381), stdev = 36.395
[info]   CI (99.9%): [≈ 0, 156.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.000, 9.000), stdev = 2.345
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 45.41% complete, ETA 01:01:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 847262.283 ops/s
[info] # Warmup Iteration   2: 970538.052 ops/s
[info] # Warmup Iteration   3: 976098.759 ops/s
[info] # Warmup Iteration   4: 983795.341 ops/s
[info] # Warmup Iteration   5: 977431.067 ops/s
[info] Iteration   1: 975807.320 ops/s
[info]                  ·gc.alloc.rate:            1338.965 MB/sec
[info]                  ·gc.alloc.rate.norm:       2160.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.697 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2185.379 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 981718.191 ops/s
[info]                  ·gc.alloc.rate:            1347.584 MB/sec
[info]                  ·gc.alloc.rate.norm:       2160.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.146 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2172.121 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 980418.342 ops/s
[info]                  ·gc.alloc.rate:            1345.381 MB/sec
[info]                  ·gc.alloc.rate.norm:       2160.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.753 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2175.047 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 980792.688 ops/s
[info]                  ·gc.alloc.rate:                                  1345.901 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2160.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.084 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.135 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1358.711 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2180.558 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                6.413 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 983425.577 ops/s
[info]                  ·gc.alloc.rate:                                  1349.488 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2160.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.108 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.172 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.680 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2181.115 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala":
[info]   980432.424 ±(99.9%) 10914.001 ops/s [Average]
[info]   (min, avg, max) = (975807.320, 980432.424, 983425.577), stdev = 2834.331
[info]   CI (99.9%): [969518.423, 991346.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1345.464 ±(99.9%) 15.298 MB/sec [Average]
[info]   (min, avg, max) = (1338.965, 1345.464, 1349.488), stdev = 3.973
[info]   CI (99.9%): [1330.166, 1360.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2160.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2160.000, 2160.000, 2160.000), stdev = 0.001
[info]   CI (99.9%): [2160.000, 2160.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.038 ±(99.9%) 0.205 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.038, 0.108), stdev = 0.053
[info]   CI (99.9%): [≈ 0, 0.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.062 ±(99.9%) 0.328 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.172), stdev = 0.085
[info]   CI (99.9%): [≈ 0, 0.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1357.197 ±(99.9%) 13.448 MB/sec [Average]
[info]   (min, avg, max) = (1354.697, 1357.197, 1362.680), stdev = 3.492
[info]   CI (99.9%): [1343.750, 1370.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   2178.844 ±(99.9%) 20.232 B/op [Average]
[info]   (min, avg, max) = (2172.121, 2178.844, 2185.379), stdev = 5.254
[info]   CI (99.9%): [2158.613, 2199.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.283 ±(99.9%) 11.044 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.283, 6.413), stdev = 2.868
[info]   CI (99.9%): [≈ 0, 12.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 7.000), stdev = 1.789
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 45.65% complete, ETA 01:01:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1025064.777 ops/s
[info] # Warmup Iteration   2: 1112928.499 ops/s
[info] # Warmup Iteration   3: 1093950.160 ops/s
[info] # Warmup Iteration   4: 1112820.128 ops/s
[info] # Warmup Iteration   5: 1031390.954 ops/s
[info] Iteration   1: 1112459.629 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1113324.170 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1113522.121 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1111769.967 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1112214.115 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   1112658.000 ±(99.9%) 2865.740 ops/s [Average]
[info]   (min, avg, max) = (1111769.967, 1112658.000, 1113522.121), stdev = 744.224
[info]   CI (99.9%): [1109792.260, 1115523.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 45.88% complete, ETA 01:01:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33496.183 ops/s
[info] # Warmup Iteration   2: 64871.140 ops/s
[info] # Warmup Iteration   3: 66416.917 ops/s
[info] # Warmup Iteration   4: 65843.695 ops/s
[info] # Warmup Iteration   5: 64856.561 ops/s
[info] Iteration   1: 66651.139 ops/s
[info]                  ·gc.alloc.rate:                   1306.798 MB/sec
[info]                  ·gc.alloc.rate.norm:              30856.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.613 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        31961.396 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 15.729 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 66587.833 ops/s
[info]                  ·gc.alloc.rate:                   1305.191 MB/sec
[info]                  ·gc.alloc.rate.norm:              30856.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.954 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        32008.814 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 15.745 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 66409.922 ops/s
[info]                  ·gc.alloc.rate:                   1301.861 MB/sec
[info]                  ·gc.alloc.rate.norm:              30856.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.119 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        32094.594 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 15.787 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   4: 66013.003 ops/s
[info]                  ·gc.alloc.rate:                                  1294.088 MB/sec
[info]                  ·gc.alloc.rate.norm:                             30856.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.021 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.490 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1358.810 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       32399.240 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                95.292 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 66228.027 ops/s
[info]                  ·gc.alloc.rate:                                  1298.304 MB/sec
[info]                  ·gc.alloc.rate.norm:                             30856.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.160 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.801 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.768 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       32388.081 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson":
[info]   66377.985 ±(99.9%) 1010.323 ops/s [Average]
[info]   (min, avg, max) = (66013.003, 66377.985, 66651.139), stdev = 262.378
[info]   CI (99.9%): [65367.662, 67388.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1301.248 ±(99.9%) 19.885 MB/sec [Average]
[info]   (min, avg, max) = (1294.088, 1301.248, 1306.798), stdev = 5.164
[info]   CI (99.9%): [1281.364, 1321.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   30856.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (30856.006, 30856.006, 30856.007), stdev = 0.001
[info]   CI (99.9%): [30856.005, 30856.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.036 ±(99.9%) 0.269 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.036, 0.160), stdev = 0.070
[info]   CI (99.9%): [≈ 0, 0.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.858 ±(99.9%) 6.388 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.858, 3.801), stdev = 1.659
[info]   CI (99.9%): [≈ 0, 7.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1356.653 ±(99.9%) 15.521 MB/sec [Average]
[info]   (min, avg, max) = (1353.613, 1356.653, 1362.768), stdev = 4.031
[info]   CI (99.9%): [1341.132, 1372.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   32170.425 ±(99.9%) 806.093 B/op [Average]
[info]   (min, avg, max) = (31961.396, 32170.425, 32399.240), stdev = 209.340
[info]   CI (99.9%): [31364.332, 32976.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.199 ±(99.9%) 6.124 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.199, 3.997), stdev = 1.590
[info]   CI (99.9%): [≈ 0, 7.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   28.510 ±(99.9%) 146.132 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 28.510, 95.292), stdev = 37.950
[info]   CI (99.9%): [≈ 0, 174.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.200, 13.000), stdev = 4.087
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 46.12% complete, ETA 01:00:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7239.861 ops/s
[info] # Warmup Iteration   2: 19038.417 ops/s
[info] # Warmup Iteration   3: 19250.787 ops/s
[info] # Warmup Iteration   4: 19399.846 ops/s
[info] # Warmup Iteration   5: 19581.685 ops/s
[info] Iteration   1: 19572.261 ops/s
[info]                  ·gc.alloc.rate:                   707.748 MB/sec
[info]                  ·gc.alloc.rate.norm:              56920.026 B/op
[info]                  ·gc.churn.G1_Old_Gen:             678.012 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        54528.523 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 53.564 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 19736.907 ops/s
[info]                  ·gc.alloc.rate:            713.819 MB/sec
[info]                  ·gc.alloc.rate.norm:       56920.024 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.778 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 54125.877 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 19146.856 ops/s
[info]                  ·gc.alloc.rate:            692.636 MB/sec
[info]                  ·gc.alloc.rate.norm:       56920.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.260 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 55738.623 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 19430.722 ops/s
[info]                  ·gc.alloc.rate:            702.687 MB/sec
[info]                  ·gc.alloc.rate.norm:       56920.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.047 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 54924.125 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 19463.281 ops/s
[info]                  ·gc.alloc.rate:            704.021 MB/sec
[info]                  ·gc.alloc.rate.norm:       56920.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.218 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 54833.840 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce":
[info]   19470.006 ±(99.9%) 834.148 ops/s [Average]
[info]   (min, avg, max) = (19146.856, 19470.006, 19736.907), stdev = 216.626
[info]   CI (99.9%): [18635.858, 20304.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate":
[info]   704.182 ±(99.9%) 29.899 MB/sec [Average]
[info]   (min, avg, max) = (692.636, 704.182, 713.819), stdev = 7.765
[info]   CI (99.9%): [674.283, 734.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   56920.023 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (56920.021, 56920.023, 56920.026), stdev = 0.002
[info]   CI (99.9%): [56920.014, 56920.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   678.263 ±(99.9%) 1.183 MB/sec [Average]
[info]   (min, avg, max) = (678.012, 678.263, 678.778), stdev = 0.307
[info]   CI (99.9%): [677.080, 679.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   54830.198 ±(99.9%) 2295.212 B/op [Average]
[info]   (min, avg, max) = (54125.877, 54830.198, 55738.623), stdev = 596.059
[info]   CI (99.9%): [52534.986, 57125.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   10.713 ±(99.9%) 92.241 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.713, 53.564), stdev = 23.955
[info]   CI (99.9%): [≈ 0, 102.954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 46.35% complete, ETA 01:00:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5781.518 ops/s
[info] # Warmup Iteration   2: 14891.929 ops/s
[info] # Warmup Iteration   3: 14990.259 ops/s
[info] # Warmup Iteration   4: 14937.484 ops/s
[info] # Warmup Iteration   5: 15142.944 ops/s
[info] Iteration   1: 14627.411 ops/s
[info]                  ·gc.alloc.rate:            409.800 MB/sec
[info]                  ·gc.alloc.rate.norm:       44088.030 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.529 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 72891.442 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 15101.225 ops/s
[info]                  ·gc.alloc.rate:      422.967 MB/sec
[info]                  ·gc.alloc.rate.norm: 44088.027 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 14761.220 ops/s
[info]                  ·gc.alloc.rate:            413.510 MB/sec
[info]                  ·gc.alloc.rate.norm:       44088.035 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.458 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 72229.869 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 15083.770 ops/s
[info]                  ·gc.alloc.rate:            422.485 MB/sec
[info]                  ·gc.alloc.rate.norm:       44088.942 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.329 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 70683.489 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 15172.619 ops/s
[info]                  ·gc.alloc.rate:      424.973 MB/sec
[info]                  ·gc.alloc.rate.norm: 44088.027 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala":
[info]   14949.249 ±(99.9%) 923.394 ops/s [Average]
[info]   (min, avg, max) = (14627.411, 14949.249, 15172.619), stdev = 239.803
[info]   CI (99.9%): [14025.855, 15872.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   418.747 ±(99.9%) 25.688 MB/sec [Average]
[info]   (min, avg, max) = (409.800, 418.747, 424.973), stdev = 6.671
[info]   CI (99.9%): [393.059, 444.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   44088.212 ±(99.9%) 1.571 B/op [Average]
[info]   (min, avg, max) = (44088.027, 44088.212, 44088.942), stdev = 0.408
[info]   CI (99.9%): [44086.641, 44089.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   406.463 ±(99.9%) 1428.776 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 406.463, 677.529), stdev = 371.048
[info]   CI (99.9%): [≈ 0, 1835.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   43160.960 ±(99.9%) 151748.224 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 43160.960, 72891.442), stdev = 39408.532
[info]   CI (99.9%): [≈ 0, 194909.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 5.000), stdev = 2.588
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 46.59% complete, ETA 01:00:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 96748.683 ops/s
[info] # Warmup Iteration   2: 102358.165 ops/s
[info] # Warmup Iteration   3: 101575.695 ops/s
[info] # Warmup Iteration   4: 102343.979 ops/s
[info] # Warmup Iteration   5: 102166.175 ops/s
[info] Iteration   1: 100698.489 ops/s
[info]                  ·gc.alloc.rate:            252.828 MB/sec
[info]                  ·gc.alloc.rate.norm:       3952.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.735 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10609.450 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 100689.857 ops/s
[info]                  ·gc.alloc.rate:      252.814 MB/sec
[info]                  ·gc.alloc.rate.norm: 3952.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 100076.040 ops/s
[info]                  ·gc.alloc.rate:            251.258 MB/sec
[info]                  ·gc.alloc.rate.norm:       3952.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.685 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10674.955 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 100615.745 ops/s
[info]                  ·gc.alloc.rate:      252.668 MB/sec
[info]                  ·gc.alloc.rate.norm: 3952.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 100940.562 ops/s
[info]                  ·gc.alloc.rate:      253.449 MB/sec
[info]                  ·gc.alloc.rate.norm: 3952.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala":
[info]   100604.139 ±(99.9%) 1230.479 ops/s [Average]
[info]   (min, avg, max) = (100076.040, 100604.139, 100940.562), stdev = 319.552
[info]   CI (99.9%): [99373.660, 101834.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   252.603 ±(99.9%) 3.119 MB/sec [Average]
[info]   (min, avg, max) = (251.258, 252.603, 253.449), stdev = 0.810
[info]   CI (99.9%): [249.484, 255.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3952.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3952.004, 3952.004, 3952.004), stdev = 0.001
[info]   CI (99.9%): [3952.004, 3952.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   271.484 ±(99.9%) 1431.457 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 271.484, 678.735), stdev = 371.745
[info]   CI (99.9%): [≈ 0, 1702.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   4256.881 ±(99.9%) 22445.482 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4256.881, 10674.955), stdev = 5829.020
[info]   CI (99.9%): [≈ 0, 26702.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.643
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 46.82% complete, ETA 01:00:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3513.518 ops/s
[info] # Warmup Iteration   2: 13044.575 ops/s
[info] # Warmup Iteration   3: 13657.072 ops/s
[info] # Warmup Iteration   4: 13482.210 ops/s
[info] # Warmup Iteration   5: 13675.707 ops/s
[info] Iteration   1: 13626.621 ops/s
[info]                  ·gc.alloc.rate:            860.432 MB/sec
[info]                  ·gc.alloc.rate.norm:       99392.030 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.314 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 78239.310 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 13559.941 ops/s
[info]                  ·gc.alloc.rate:            856.291 MB/sec
[info]                  ·gc.alloc.rate.norm:       99392.032 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.434 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 78631.602 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 13630.628 ops/s
[info]                  ·gc.alloc.rate:            860.694 MB/sec
[info]                  ·gc.alloc.rate.norm:       99392.030 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.742 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 156444.186 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 13591.256 ops/s
[info]                  ·gc.alloc.rate:            858.204 MB/sec
[info]                  ·gc.alloc.rate.norm:       99392.038 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.349 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 78446.505 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 13707.419 ops/s
[info]                  ·gc.alloc.rate:            865.547 MB/sec
[info]                  ·gc.alloc.rate.norm:       99392.030 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.365 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 77782.771 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson":
[info]   13623.173 ±(99.9%) 212.501 ops/s [Average]
[info]   (min, avg, max) = (13559.941, 13623.173, 13707.419), stdev = 55.186
[info]   CI (99.9%): [13410.672, 13835.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   860.234 ±(99.9%) 13.360 MB/sec [Average]
[info]   (min, avg, max) = (856.291, 860.234, 865.547), stdev = 3.470
[info]   CI (99.9%): [846.873, 873.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   99392.032 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (99392.030, 99392.032, 99392.038), stdev = 0.003
[info]   CI (99.9%): [99392.019, 99392.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   812.841 ±(99.9%) 1166.484 MB/sec [Average]
[info]   (min, avg, max) = (677.314, 812.841, 1354.742), stdev = 302.932
[info]   CI (99.9%): [≈ 0, 1979.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   93908.875 ±(99.9%) 134617.481 B/op [Average]
[info]   (min, avg, max) = (77782.771, 93908.875, 156444.186), stdev = 34959.732
[info]   CI (99.9%): [≈ 0, 228526.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 9.000), stdev = 1.949
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 47.06% complete, ETA 00:59:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42150.276 ops/s
[info] # Warmup Iteration   2: 58088.778 ops/s
[info] # Warmup Iteration   3: 58077.072 ops/s
[info] # Warmup Iteration   4: 58794.806 ops/s
[info] # Warmup Iteration   5: 58479.878 ops/s
[info] Iteration   1: 58545.094 ops/s
[info]                  ·gc.alloc.rate:            1043.993 MB/sec
[info]                  ·gc.alloc.rate.norm:       28072.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.966 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18229.876 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 58372.250 ops/s
[info]                  ·gc.alloc.rate:            1041.074 MB/sec
[info]                  ·gc.alloc.rate.norm:       28072.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.147 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 36567.790 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 58528.364 ops/s
[info]                  ·gc.alloc.rate:            1044.246 MB/sec
[info]                  ·gc.alloc.rate.norm:       28072.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.327 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18235.170 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 58313.753 ops/s
[info]                  ·gc.alloc.rate:            1040.251 MB/sec
[info]                  ·gc.alloc.rate.norm:       28072.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.423 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 36604.155 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 58468.366 ops/s
[info]                  ·gc.alloc.rate:            1043.559 MB/sec
[info]                  ·gc.alloc.rate.norm:       28072.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.513 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 36436.727 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce":
[info]   58445.566 ±(99.9%) 385.213 ops/s [Average]
[info]   (min, avg, max) = (58313.753, 58445.566, 58545.094), stdev = 100.039
[info]   CI (99.9%): [58060.352, 58830.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1042.625 ±(99.9%) 7.052 MB/sec [Average]
[info]   (min, avg, max) = (1040.251, 1042.625, 1044.246), stdev = 1.831
[info]   CI (99.9%): [1035.573, 1049.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   28072.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (28072.007, 28072.007, 28072.008), stdev = 0.001
[info]   CI (99.9%): [28072.006, 28072.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1084.675 ±(99.9%) 1429.008 MB/sec [Average]
[info]   (min, avg, max) = (677.966, 1084.675, 1356.423), stdev = 371.109
[info]   CI (99.9%): [≈ 0, 2513.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   29214.744 ±(99.9%) 38604.799 B/op [Average]
[info]   (min, avg, max) = (18229.876, 29214.744, 36604.155), stdev = 10025.544
[info]   CI (99.9%): [≈ 0, 67819.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 9.000), stdev = 2.302
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 47.29% complete, ETA 00:59:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 52494.349 ops/s
[info] # Warmup Iteration   2: 81468.277 ops/s
[info] # Warmup Iteration   3: 81287.062 ops/s
[info] # Warmup Iteration   4: 81245.986 ops/s
[info] # Warmup Iteration   5: 81323.722 ops/s
[info] Iteration   1: 79971.222 ops/s
[info]                  ·gc.alloc.rate:            1143.823 MB/sec
[info]                  ·gc.alloc.rate.norm:       22512.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.418 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13332.522 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 81324.424 ops/s
[info]                  ·gc.alloc.rate:            1163.083 MB/sec
[info]                  ·gc.alloc.rate.norm:       22512.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.717 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26221.168 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 81356.514 ops/s
[info]                  ·gc.alloc.rate:            1163.972 MB/sec
[info]                  ·gc.alloc.rate.norm:       22512.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.269 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26211.823 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 81800.154 ops/s
[info]                  ·gc.alloc.rate:            1169.841 MB/sec
[info]                  ·gc.alloc.rate.norm:       22512.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.306 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13033.829 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 81437.575 ops/s
[info]                  ·gc.alloc.rate:                                  1165.161 MB/sec
[info]                  ·gc.alloc.rate.norm:                             22512.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.122 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.367 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1359.236 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       26261.710 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                77.240 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala":
[info]   81177.978 ±(99.9%) 2698.252 ops/s [Average]
[info]   (min, avg, max) = (79971.222, 81177.978, 81800.154), stdev = 700.727
[info]   CI (99.9%): [78479.726, 83876.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1161.176 ±(99.9%) 38.677 MB/sec [Average]
[info]   (min, avg, max) = (1143.823, 1161.176, 1169.841), stdev = 10.044
[info]   CI (99.9%): [1122.499, 1199.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   22512.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (22512.005, 22512.005, 22512.005), stdev = 0.001
[info]   CI (99.9%): [22512.004, 22512.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.024 ±(99.9%) 0.211 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.122), stdev = 0.055
[info]   CI (99.9%): [≈ 0, 0.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.473 ±(99.9%) 4.075 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.473, 2.367), stdev = 1.058
[info]   CI (99.9%): [≈ 0, 4.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1084.789 ±(99.9%) 1432.179 MB/sec [Average]
[info]   (min, avg, max) = (677.306, 1084.789, 1359.236), stdev = 371.932
[info]   CI (99.9%): [≈ 0, 2516.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   21012.210 ±(99.9%) 27523.259 B/op [Average]
[info]   (min, avg, max) = (13033.829, 21012.210, 26261.710), stdev = 7147.703
[info]   CI (99.9%): [≈ 0, 48535.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.800 ±(99.9%) 6.884 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.800, 3.998), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   15.448 ±(99.9%) 133.012 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15.448, 77.240), stdev = 34.543
[info]   CI (99.9%): [≈ 0, 148.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.600, 9.000), stdev = 2.302
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 47.53% complete, ETA 00:59:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 230661.119 ops/s
[info] # Warmup Iteration   2: 241046.244 ops/s
[info] # Warmup Iteration   3: 252599.020 ops/s
[info] # Warmup Iteration   4: 254794.197 ops/s
[info] # Warmup Iteration   5: 252714.171 ops/s
[info] Iteration   1: 251881.312 ops/s
[info]                  ·gc.alloc.rate:            482.580 MB/sec
[info]                  ·gc.alloc.rate.norm:       3016.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.984 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4237.226 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 251939.575 ops/s
[info]                  ·gc.alloc.rate:      482.709 MB/sec
[info]                  ·gc.alloc.rate.norm: 3016.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 242731.455 ops/s
[info]                  ·gc.alloc.rate:            465.052 MB/sec
[info]                  ·gc.alloc.rate.norm:       3016.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.334 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4392.715 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 253845.934 ops/s
[info]                  ·gc.alloc.rate:            486.391 MB/sec
[info]                  ·gc.alloc.rate.norm:       3016.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.377 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4200.268 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 254606.670 ops/s
[info]                  ·gc.alloc.rate:            487.849 MB/sec
[info]                  ·gc.alloc.rate.norm:       3016.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.380 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4187.732 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala":
[info]   251000.989 ±(99.9%) 18380.095 ops/s [Average]
[info]   (min, avg, max) = (242731.455, 251000.989, 254606.670), stdev = 4773.252
[info]   CI (99.9%): [232620.894, 269381.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   480.916 ±(99.9%) 35.275 MB/sec [Average]
[info]   (min, avg, max) = (465.052, 480.916, 487.849), stdev = 9.161
[info]   CI (99.9%): [445.641, 516.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3016.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3016.002, 3016.002, 3016.002), stdev = 0.001
[info]   CI (99.9%): [3016.002, 3016.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   542.015 ±(99.9%) 1166.729 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 542.015, 677.984), stdev = 302.996
[info]   CI (99.9%): [≈ 0, 1708.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   3403.588 ±(99.9%) 7333.257 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3403.588, 4392.715), stdev = 1904.424
[info]   CI (99.9%): [≈ 0, 10736.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 47.76% complete, ETA 00:59:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 278004.441 ops/s
[info] # Warmup Iteration   2: 308688.386 ops/s
[info] # Warmup Iteration   3: 310253.407 ops/s
[info] # Warmup Iteration   4: 312332.705 ops/s
[info] # Warmup Iteration   5: 310923.123 ops/s
[info] Iteration   1: 311058.609 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 311666.746 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 310892.425 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 310836.105 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 310794.686 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc":
[info]   311049.714 ±(99.9%) 1383.307 ops/s [Average]
[info]   (min, avg, max) = (310794.686, 311049.714, 311666.746), stdev = 359.241
[info]   CI (99.9%): [309666.407, 312433.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 48.00% complete, ETA 00:58:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 53197.983 ops/s
[info] # Warmup Iteration   2: 73052.965 ops/s
[info] # Warmup Iteration   3: 73597.185 ops/s
[info] # Warmup Iteration   4: 73606.682 ops/s
[info] # Warmup Iteration   5: 73321.879 ops/s
[info] Iteration   1: 73156.621 ops/s
[info]                  ·gc.alloc.rate:            1177.210 MB/sec
[info]                  ·gc.alloc.rate.norm:       25320.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.233 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 29149.006 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 73710.346 ops/s
[info]                  ·gc.alloc.rate:            1185.693 MB/sec
[info]                  ·gc.alloc.rate.norm:       25320.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.389 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14465.373 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 73385.309 ops/s
[info]                  ·gc.alloc.rate:            1180.715 MB/sec
[info]                  ·gc.alloc.rate.norm:       25320.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.027 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 29058.061 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 73429.724 ops/s
[info]                  ·gc.alloc.rate:            1181.342 MB/sec
[info]                  ·gc.alloc.rate.norm:       25320.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.842 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 29038.675 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 73518.876 ops/s
[info]                  ·gc.alloc.rate:                                  1182.640 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25320.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.021 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.456 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1358.741 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       29090.273 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                85.560 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson":
[info]   73440.175 ±(99.9%) 776.621 ops/s [Average]
[info]   (min, avg, max) = (73156.621, 73440.175, 73710.346), stdev = 201.686
[info]   CI (99.9%): [72663.555, 74216.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1181.520 ±(99.9%) 11.856 MB/sec [Average]
[info]   (min, avg, max) = (1177.210, 1181.520, 1185.693), stdev = 3.079
[info]   CI (99.9%): [1169.664, 1193.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   25320.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (25320.006, 25320.006, 25320.006), stdev = 0.001
[info]   CI (99.9%): [25320.005, 25320.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.004 ±(99.9%) 0.037 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.091 ±(99.9%) 0.785 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.091, 0.456), stdev = 0.204
[info]   CI (99.9%): [≈ 0, 0.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1220.246 ±(99.9%) 1168.558 MB/sec [Average]
[info]   (min, avg, max) = (677.389, 1220.246, 1358.741), stdev = 303.471
[info]   CI (99.9%): [51.688, 2388.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   26160.278 ±(99.9%) 25174.678 B/op [Average]
[info]   (min, avg, max) = (14465.373, 26160.278, 29149.006), stdev = 6537.784
[info]   CI (99.9%): [985.600, 51334.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   17.112 ±(99.9%) 147.339 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17.112, 85.560), stdev = 38.263
[info]   CI (99.9%): [≈ 0, 164.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.400, 9.000), stdev = 2.074
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 48.24% complete, ETA 00:58:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 102727.144 ops/s
[info] # Warmup Iteration   2: 122972.703 ops/s
[info] # Warmup Iteration   3: 123990.693 ops/s
[info] # Warmup Iteration   4: 121393.692 ops/s
[info] # Warmup Iteration   5: 124524.552 ops/s
[info] Iteration   1: 123676.673 ops/s
[info]                  ·gc.alloc.rate:            1791.359 MB/sec
[info]                  ·gc.alloc.rate.norm:       22800.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2034.080 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 25889.300 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 124167.760 ops/s
[info]                  ·gc.alloc.rate:                                  1798.785 MB/sec
[info]                  ·gc.alloc.rate.norm:                             22800.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.056 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.711 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.099 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       25871.376 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                42.218 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 122965.915 ops/s
[info]                  ·gc.alloc.rate:                                  1781.109 MB/sec
[info]                  ·gc.alloc.rate.norm:                             22800.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.017 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.221 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.706 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       17444.010 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 122873.102 ops/s
[info]                  ·gc.alloc.rate:                                  1780.177 MB/sec
[info]                  ·gc.alloc.rate.norm:                             22800.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.034 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.417 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       26184.325 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 122868.098 ops/s
[info]                  ·gc.alloc.rate:            1779.857 MB/sec
[info]                  ·gc.alloc.rate.norm:       22800.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.767 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 17457.069 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce":
[info]   123310.309 ±(99.9%) 2257.437 ops/s [Average]
[info]   (min, avg, max) = (122868.098, 123310.309, 124167.760), stdev = 586.249
[info]   CI (99.9%): [121052.873, 125567.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate":
[info]   1786.258 ±(99.9%) 32.641 MB/sec [Average]
[info]   (min, avg, max) = (1779.857, 1786.258, 1798.785), stdev = 8.477
[info]   CI (99.9%): [1753.617, 1818.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   22800.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (22800.003, 22800.003, 22800.004), stdev = 0.001
[info]   CI (99.9%): [22800.003, 22800.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.015 ±(99.9%) 0.092 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.056), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.193 ±(99.9%) 1.169 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.193, 0.711), stdev = 0.304
[info]   CI (99.9%): [≈ 0, 1.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1769.014 ±(99.9%) 1428.195 MB/sec [Average]
[info]   (min, avg, max) = (1362.706, 1769.014, 2044.417), stdev = 370.898
[info]   CI (99.9%): [340.819, 3197.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   22569.216 ±(99.9%) 17999.239 B/op [Average]
[info]   (min, avg, max) = (17444.010, 22569.216, 26184.325), stdev = 4674.345
[info]   CI (99.9%): [4569.977, 40568.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   8.444 ±(99.9%) 72.702 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.444, 42.218), stdev = 18.881
[info]   CI (99.9%): [≈ 0, 81.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 10.000), stdev = 3.194
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 48.47% complete, ETA 00:58:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 52814.524 ops/s
[info] # Warmup Iteration   2: 617539.293 ops/s
[info] # Warmup Iteration   3: 607620.372 ops/s
[info] # Warmup Iteration   4: 620992.527 ops/s
[info] # Warmup Iteration   5: 628636.664 ops/s
[info] Iteration   1: 637434.422 ops/s
[info]                  ·gc.alloc.rate:      353.136 MB/sec
[info]                  ·gc.alloc.rate.norm: 872.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 634085.435 ops/s
[info]                  ·gc.alloc.rate:            351.341 MB/sec
[info]                  ·gc.alloc.rate.norm:       872.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.844 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1674.912 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 639023.337 ops/s
[info]                  ·gc.alloc.rate:      354.058 MB/sec
[info]                  ·gc.alloc.rate.norm: 872.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 633633.755 ops/s
[info]                  ·gc.alloc.rate:            351.092 MB/sec
[info]                  ·gc.alloc.rate.norm:       872.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.851 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1676.112 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 637776.876 ops/s
[info]                  ·gc.alloc.rate:      353.330 MB/sec
[info]                  ·gc.alloc.rate.norm: 872.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava":
[info]   636390.765 ±(99.9%) 9204.692 ops/s [Average]
[info]   (min, avg, max) = (633633.755, 636390.765, 639023.337), stdev = 2390.429
[info]   CI (99.9%): [627186.073, 645595.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   352.591 ±(99.9%) 5.022 MB/sec [Average]
[info]   (min, avg, max) = (351.092, 352.591, 354.058), stdev = 1.304
[info]   CI (99.9%): [347.569, 357.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   872.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (872.001, 872.001, 872.001), stdev = 0.001
[info]   CI (99.9%): [872.001, 872.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   269.939 ±(99.9%) 1423.310 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.939, 674.851), stdev = 369.629
[info]   CI (99.9%): [≈ 0, 1693.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   670.205 ±(99.9%) 3533.797 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 670.205, 1676.112), stdev = 917.716
[info]   CI (99.9%): [≈ 0, 4204.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 6.000), stdev = 3.033
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 48.71% complete, ETA 00:58:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 208409.105 ops/s
[info] # Warmup Iteration   2: 340789.385 ops/s
[info] # Warmup Iteration   3: 332484.452 ops/s
[info] # Warmup Iteration   4: 342005.827 ops/s
[info] # Warmup Iteration   5: 327319.918 ops/s
[info] Iteration   1: 341130.546 ops/s
[info]                  ·gc.alloc.rate:      355.406 MB/sec
[info]                  ·gc.alloc.rate.norm: 1640.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 339616.513 ops/s
[info]                  ·gc.alloc.rate:            353.973 MB/sec
[info]                  ·gc.alloc.rate.norm:       1640.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.621 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3139.505 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 342545.521 ops/s
[info]                  ·gc.alloc.rate:      356.935 MB/sec
[info]                  ·gc.alloc.rate.norm: 1640.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 340218.798 ops/s
[info]                  ·gc.alloc.rate:            354.515 MB/sec
[info]                  ·gc.alloc.rate.norm:       1640.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.457 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3133.941 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 340266.013 ops/s
[info]                  ·gc.alloc.rate:            354.557 MB/sec
[info]                  ·gc.alloc.rate.norm:       1640.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.366 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3133.149 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala":
[info]   340755.478 ±(99.9%) 4377.631 ops/s [Average]
[info]   (min, avg, max) = (339616.513, 340755.478, 342545.521), stdev = 1136.857
[info]   CI (99.9%): [336377.847, 345133.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   355.077 ±(99.9%) 4.459 MB/sec [Average]
[info]   (min, avg, max) = (353.973, 355.077, 356.935), stdev = 1.158
[info]   CI (99.9%): [350.618, 359.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1640.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1640.001, 1640.001, 1640.001), stdev = 0.001
[info]   CI (99.9%): [1640.001, 1640.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   406.489 ±(99.9%) 1428.865 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 406.489, 677.621), stdev = 371.072
[info]   CI (99.9%): [≈ 0, 1835.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1881.319 ±(99.9%) 6613.108 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1881.319, 3139.505), stdev = 1717.403
[info]   CI (99.9%): [≈ 0, 8494.427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 5.000), stdev = 2.588
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 48.94% complete, ETA 00:57:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 709569.129 ops/s
[info] # Warmup Iteration   2: 756429.757 ops/s
[info] # Warmup Iteration   3: 742420.057 ops/s
[info] # Warmup Iteration   4: 759336.495 ops/s
[info] # Warmup Iteration   5: 760269.443 ops/s
[info] Iteration   1: 755781.257 ops/s
[info]                  ·gc.alloc.rate:            261.201 MB/sec
[info]                  ·gc.alloc.rate.norm:       544.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.711 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1413.543 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 760541.229 ops/s
[info]                  ·gc.alloc.rate:      262.849 MB/sec
[info]                  ·gc.alloc.rate.norm: 544.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 756552.495 ops/s
[info]                  ·gc.alloc.rate:            261.451 MB/sec
[info]                  ·gc.alloc.rate.norm:       544.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.999 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1410.714 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 760188.391 ops/s
[info]                  ·gc.alloc.rate:      262.734 MB/sec
[info]                  ·gc.alloc.rate.norm: 544.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 760074.949 ops/s
[info]                  ·gc.alloc.rate:      262.798 MB/sec
[info]                  ·gc.alloc.rate.norm: 544.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala":
[info]   758627.664 ±(99.9%) 8738.627 ops/s [Average]
[info]   (min, avg, max) = (755781.257, 758627.664, 760541.229), stdev = 2269.394
[info]   CI (99.9%): [749889.037, 767366.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   262.207 ±(99.9%) 3.118 MB/sec [Average]
[info]   (min, avg, max) = (261.201, 262.207, 262.849), stdev = 0.810
[info]   CI (99.9%): [259.088, 265.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   544.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (544.001, 544.001, 544.001), stdev = 0.001
[info]   CI (99.9%): [544.000, 544.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   271.342 ±(99.9%) 1430.709 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 271.342, 678.711), stdev = 371.550
[info]   CI (99.9%): [≈ 0, 1702.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   564.851 ±(99.9%) 2978.301 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 564.851, 1413.543), stdev = 773.455
[info]   CI (99.9%): [≈ 0, 3543.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 4.000), stdev = 1.949
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 49.18% complete, ETA 00:57:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37858.215 ops/s
[info] # Warmup Iteration   2: 71363.203 ops/s
[info] # Warmup Iteration   3: 73303.436 ops/s
[info] # Warmup Iteration   4: 73673.496 ops/s
[info] # Warmup Iteration   5: 73935.327 ops/s
[info] Iteration   1: 73394.557 ops/s
[info]                  ·gc.alloc.rate:                                  3146.656 MB/sec
[info]                  ·gc.alloc.rate.norm:                             67472.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.084 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3407.391 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       73062.788 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   2: 73386.700 ops/s
[info]                  ·gc.alloc.rate:                                  3145.608 MB/sec
[info]                  ·gc.alloc.rate.norm:                             67472.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.066 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3406.720 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       73072.743 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        14.000 ms
[info] Iteration   3: 74004.021 ops/s
[info]                  ·gc.alloc.rate:                                  3172.145 MB/sec
[info]                  ·gc.alloc.rate.norm:                             67472.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.084 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.347 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       57968.535 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 74098.953 ops/s
[info]                  ·gc.alloc.rate:            3176.238 MB/sec
[info]                  ·gc.alloc.rate.norm:       67472.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      3406.707 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 72367.788 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 73973.292 ops/s
[info]                  ·gc.alloc.rate:                                  3170.992 MB/sec
[info]                  ·gc.alloc.rate.norm:                             67472.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.112 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3406.780 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       72489.069 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson":
[info]   73771.505 ±(99.9%) 1350.704 ops/s [Average]
[info]   (min, avg, max) = (73386.700, 73771.505, 74098.953), stdev = 350.774
[info]   CI (99.9%): [72420.801, 75122.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3162.328 ±(99.9%) 57.441 MB/sec [Average]
[info]   (min, avg, max) = (3145.608, 3162.328, 3176.238), stdev = 14.917
[info]   CI (99.9%): [3104.887, 3219.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   67472.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (67472.006, 67472.006, 67472.006), stdev = 0.001
[info]   CI (99.9%): [67472.005, 67472.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.003 ±(99.9%) 0.008 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.005), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.069 ±(99.9%) 0.161 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.069, 0.112), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   3270.589 ±(99.9%) 1173.675 MB/sec [Average]
[info]   (min, avg, max) = (2725.347, 3270.589, 3407.391), stdev = 304.800
[info]   CI (99.9%): [2096.914, 4444.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   69792.185 ±(99.9%) 25481.585 B/op [Average]
[info]   (min, avg, max) = (57968.535, 69792.185, 73072.743), stdev = 6617.487
[info]   CI (99.9%): [44310.600, 95273.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 8.800, 14.000), stdev = 3.899
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 49.41% complete, ETA 00:57:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 206471.074 ops/s
[info] # Warmup Iteration   2: 283394.491 ops/s
[info] # Warmup Iteration   3: 282596.076 ops/s
[info] # Warmup Iteration   4: 280326.701 ops/s
[info] # Warmup Iteration   5: 280688.605 ops/s
[info] Iteration   1: 279935.820 ops/s
[info]                  ·gc.alloc.rate:                   1462.783 MB/sec
[info]                  ·gc.alloc.rate.norm:              8224.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.589 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        7621.336 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.745 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 279727.645 ops/s
[info]                  ·gc.alloc.rate:            1461.981 MB/sec
[info]                  ·gc.alloc.rate.norm:       8224.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.514 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7630.723 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 279678.265 ops/s
[info]                  ·gc.alloc.rate:                   1461.663 MB/sec
[info]                  ·gc.alloc.rate.norm:              8224.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1356.466 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        7632.114 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 18.743 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 280477.670 ops/s
[info]                  ·gc.alloc.rate:                                  1465.347 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8224.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.133 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.745 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.667 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7647.728 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 280368.123 ops/s
[info]                  ·gc.alloc.rate:                                  1464.881 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8224.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.012 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.065 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.079 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11475.683 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce":
[info]   280037.505 ±(99.9%) 1412.798 ops/s [Average]
[info]   (min, avg, max) = (279678.265, 280037.505, 280477.670), stdev = 366.899
[info]   CI (99.9%): [278624.707, 281450.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1463.331 ±(99.9%) 6.493 MB/sec [Average]
[info]   (min, avg, max) = (1461.663, 1463.331, 1465.347), stdev = 1.686
[info]   CI (99.9%): [1456.838, 1469.825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   8224.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8224.001, 8224.001, 8224.002), stdev = 0.001
[info]   CI (99.9%): [8224.001, 8224.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.029 ±(99.9%) 0.224 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.133), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.162 ±(99.9%) 1.260 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.162, 0.745), stdev = 0.327
[info]   CI (99.9%): [≈ 0, 1.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1495.063 ±(99.9%) 1181.849 MB/sec [Average]
[info]   (min, avg, max) = (1355.589, 1495.063, 2044.079), stdev = 306.923
[info]   CI (99.9%): [313.214, 2676.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   8401.517 ±(99.9%) 6617.474 B/op [Average]
[info]   (min, avg, max) = (7621.336, 8401.517, 11475.683), stdev = 1718.537
[info]   CI (99.9%): [1784.042, 15018.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.562 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.331), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   4.498 ±(99.9%) 31.293 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.498, 18.743), stdev = 8.127
[info]   CI (99.9%): [≈ 0, 35.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 8.000), stdev = 2.345
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 49.65% complete, ETA 00:56:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 116570.919 ops/s
[info] # Warmup Iteration   2: 1510914.121 ops/s
[info] # Warmup Iteration   3: 1509655.471 ops/s
[info] # Warmup Iteration   4: 1468870.494 ops/s
[info] # Warmup Iteration   5: 1491589.651 ops/s
[info] Iteration   1: 1497436.718 ops/s
[info]                  ·gc.alloc.rate:      509.933 MB/sec
[info]                  ·gc.alloc.rate.norm: 536.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1492899.999 ops/s
[info]                  ·gc.alloc.rate:            508.419 MB/sec
[info]                  ·gc.alloc.rate.norm:       536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.784 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 711.390 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 1507319.433 ops/s
[info]                  ·gc.alloc.rate:            513.274 MB/sec
[info]                  ·gc.alloc.rate.norm:       536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.716 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 704.591 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 1511479.244 ops/s
[info]                  ·gc.alloc.rate:            514.757 MB/sec
[info]                  ·gc.alloc.rate.norm:       536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.804 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 702.652 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 1520747.782 ops/s
[info]                  ·gc.alloc.rate:      517.859 MB/sec
[info]                  ·gc.alloc.rate.norm: 536.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava":
[info]   1505976.635 ±(99.9%) 42800.960 ops/s [Average]
[info]   (min, avg, max) = (1492899.999, 1505976.635, 1520747.782), stdev = 11115.273
[info]   CI (99.9%): [1463175.675, 1548777.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   512.848 ±(99.9%) 14.541 MB/sec [Average]
[info]   (min, avg, max) = (508.419, 512.848, 517.859), stdev = 3.776
[info]   CI (99.9%): [498.307, 527.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   536.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (536.000, 536.000, 536.000), stdev = 0.001
[info]   CI (99.9%): [536.000, 536.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   404.861 ±(99.9%) 1423.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 404.861, 674.804), stdev = 369.586
[info]   CI (99.9%): [≈ 0, 1828.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   423.727 ±(99.9%) 1489.511 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 423.727, 711.390), stdev = 386.821
[info]   CI (99.9%): [≈ 0, 1913.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.200, 6.000), stdev = 2.950
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 49.88% complete, ETA 00:56:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 965531.998 ops/s
[info] # Warmup Iteration   2: 1445043.938 ops/s
[info] # Warmup Iteration   3: 1478273.423 ops/s
[info] # Warmup Iteration   4: 1496441.728 ops/s
[info] # Warmup Iteration   5: 1513662.338 ops/s
[info] Iteration   1: 1500781.483 ops/s
[info]                  ·gc.alloc.rate:            877.097 MB/sec
[info]                  ·gc.alloc.rate.norm:       920.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.639 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1420.901 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 1520756.076 ops/s
[info]                  ·gc.alloc.rate:            888.991 MB/sec
[info]                  ·gc.alloc.rate.norm:       920.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.484 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 701.115 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 1510987.041 ops/s
[info]                  ·gc.alloc.rate:            883.265 MB/sec
[info]                  ·gc.alloc.rate.norm:       920.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.467 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 705.644 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 1499769.984 ops/s
[info]                  ·gc.alloc.rate:            876.897 MB/sec
[info]                  ·gc.alloc.rate.norm:       920.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.175 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1421.788 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 1498998.714 ops/s
[info]                  ·gc.alloc.rate:            876.554 MB/sec
[info]                  ·gc.alloc.rate.norm:       920.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.703 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 711.293 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala":
[info]   1506258.660 ±(99.9%) 36395.300 ops/s [Average]
[info]   (min, avg, max) = (1498998.714, 1506258.660, 1520756.076), stdev = 9451.744
[info]   CI (99.9%): [1469863.359, 1542653.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   880.561 ±(99.9%) 21.078 MB/sec [Average]
[info]   (min, avg, max) = (876.554, 880.561, 888.991), stdev = 5.474
[info]   CI (99.9%): [859.483, 901.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   920.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (920.000, 920.000, 920.000), stdev = 0.001
[info]   CI (99.9%): [920.000, 920.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   948.494 ±(99.9%) 1428.600 MB/sec [Average]
[info]   (min, avg, max) = (677.467, 948.494, 1355.175), stdev = 371.003
[info]   CI (99.9%): [≈ 0, 2377.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   992.148 ±(99.9%) 1508.750 B/op [Average]
[info]   (min, avg, max) = (701.115, 992.148, 1421.788), stdev = 391.818
[info]   CI (99.9%): [≈ 0, 2500.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 10.000), stdev = 2.881
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 50.12% complete, ETA 00:56:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1440569.709 ops/s
[info] # Warmup Iteration   2: 1581323.117 ops/s
[info] # Warmup Iteration   3: 1604507.501 ops/s
[info] # Warmup Iteration   4: 1590879.603 ops/s
[info] # Warmup Iteration   5: 1609036.982 ops/s
[info] Iteration   1: 1599856.879 ops/s
[info]                  ·gc.alloc.rate:                   544.727 MB/sec
[info]                  ·gc.alloc.rate.norm:              536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             677.302 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        666.452 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.655 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1592142.662 ops/s
[info]                  ·gc.alloc.rate:            542.278 MB/sec
[info]                  ·gc.alloc.rate.norm:       536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.191 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 670.341 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 1601776.623 ops/s
[info]                  ·gc.alloc.rate:            545.408 MB/sec
[info]                  ·gc.alloc.rate.norm:       536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.340 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 665.656 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 1602144.836 ops/s
[info]                  ·gc.alloc.rate:            545.539 MB/sec
[info]                  ·gc.alloc.rate.norm:       536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.328 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 665.485 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 1606605.500 ops/s
[info]                  ·gc.alloc.rate:            547.408 MB/sec
[info]                  ·gc.alloc.rate.norm:       536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.125 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 663.014 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala":
[info]   1600505.300 ±(99.9%) 20363.950 ops/s [Average]
[info]   (min, avg, max) = (1592142.662, 1600505.300, 1606605.500), stdev = 5288.453
[info]   CI (99.9%): [1580141.350, 1620869.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   545.072 ±(99.9%) 7.130 MB/sec [Average]
[info]   (min, avg, max) = (542.278, 545.072, 547.408), stdev = 1.852
[info]   CI (99.9%): [537.942, 552.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   536.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (536.000, 536.000, 536.000), stdev = 0.001
[info]   CI (99.9%): [536.000, 536.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   677.457 ±(99.9%) 1.615 MB/sec [Average]
[info]   (min, avg, max) = (677.125, 677.457, 678.191), stdev = 0.419
[info]   CI (99.9%): [675.843, 679.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   666.190 ±(99.9%) 10.217 B/op [Average]
[info]   (min, avg, max) = (663.014, 666.190, 670.341), stdev = 2.653
[info]   CI (99.9%): [655.973, 676.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.131 ±(99.9%) 1.128 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.131, 0.655), stdev = 0.293
[info]   CI (99.9%): [≈ 0, 1.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 50.35% complete, ETA 00:56:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1658509.895 ops/s
[info] # Warmup Iteration   2: 1816424.934 ops/s
[info] # Warmup Iteration   3: 1722087.670 ops/s
[info] # Warmup Iteration   4: 1814655.127 ops/s
[info] # Warmup Iteration   5: 1712379.974 ops/s
[info] Iteration   1: 1810156.240 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1817652.781 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1817291.493 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1816416.851 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1817186.110 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc":
[info]   1815740.695 ±(99.9%) 12145.348 ops/s [Average]
[info]   (min, avg, max) = (1810156.240, 1815740.695, 1817652.781), stdev = 3154.108
[info]   CI (99.9%): [1803595.348, 1827886.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 50.59% complete, ETA 00:55:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22330.083 ops/s
[info] # Warmup Iteration   2: 35041.206 ops/s
[info] # Warmup Iteration   3: 35018.422 ops/s
[info] # Warmup Iteration   4: 34829.675 ops/s
[info] # Warmup Iteration   5: 34996.586 ops/s
[info] Iteration   1: 35143.754 ops/s
[info]                  ·gc.alloc.rate:            1629.347 MB/sec
[info]                  ·gc.alloc.rate.norm:       72976.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.750 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 60677.200 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 35248.680 ops/s
[info]                  ·gc.alloc.rate:            1634.827 MB/sec
[info]                  ·gc.alloc.rate.norm:       72976.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.257 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 60496.485 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 34865.762 ops/s
[info]                  ·gc.alloc.rate:                                  1616.270 MB/sec
[info]                  ·gc.alloc.rate.norm:                             72976.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.210 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 9.463 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2039.935 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       92104.852 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                180.421 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   4: 35082.429 ops/s
[info]                  ·gc.alloc.rate:                                  1626.506 MB/sec
[info]                  ·gc.alloc.rate.norm:                             72976.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.250 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.692 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       61139.541 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 34934.783 ops/s
[info]                  ·gc.alloc.rate:            1619.711 MB/sec
[info]                  ·gc.alloc.rate.norm:       72976.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.179 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 92100.390 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson":
[info]   35055.082 ±(99.9%) 597.794 ops/s [Average]
[info]   (min, avg, max) = (34865.762, 35055.082, 35248.680), stdev = 155.245
[info]   CI (99.9%): [34457.287, 35652.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1625.332 ±(99.9%) 28.645 MB/sec [Average]
[info]   (min, avg, max) = (1616.270, 1625.332, 1634.827), stdev = 7.439
[info]   CI (99.9%): [1596.687, 1653.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   72976.012 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (72976.012, 72976.012, 72976.012), stdev = 0.001
[info]   CI (99.9%): [72976.010, 72976.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.043 ±(99.9%) 0.359 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.043, 0.210), stdev = 0.093
[info]   CI (99.9%): [≈ 0, 0.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.943 ±(99.9%) 16.194 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.943, 9.463), stdev = 4.205
[info]   CI (99.9%): [≈ 0, 18.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1631.363 ±(99.9%) 1443.711 MB/sec [Average]
[info]   (min, avg, max) = (1354.750, 1631.363, 2044.179), stdev = 374.927
[info]   CI (99.9%): [187.652, 3075.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   73303.694 ±(99.9%) 66087.049 B/op [Average]
[info]   (min, avg, max) = (60496.485, 73303.694, 92104.852), stdev = 17162.597
[info]   CI (99.9%): [7216.645, 139390.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   36.084 ±(99.9%) 310.696 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 36.084, 180.421), stdev = 80.687
[info]   CI (99.9%): [≈ 0, 346.780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.600, 9.000), stdev = 2.793
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 50.82% complete, ETA 00:55:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 35845.148 ops/s
[info] # Warmup Iteration   2: 46069.974 ops/s
[info] # Warmup Iteration   3: 45645.275 ops/s
[info] # Warmup Iteration   4: 46146.956 ops/s
[info] # Warmup Iteration   5: 46213.624 ops/s
[info] Iteration   1: 46253.674 ops/s
[info]                  ·gc.alloc.rate:            923.412 MB/sec
[info]                  ·gc.alloc.rate.norm:       31424.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.043 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23074.021 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 46104.330 ops/s
[info]                  ·gc.alloc.rate:            920.414 MB/sec
[info]                  ·gc.alloc.rate.norm:       31424.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.080 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 46298.160 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 46267.350 ops/s
[info]                  ·gc.alloc.rate:            923.781 MB/sec
[info]                  ·gc.alloc.rate.norm:       31424.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.123 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23067.539 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 45892.238 ops/s
[info]                  ·gc.alloc.rate:            916.215 MB/sec
[info]                  ·gc.alloc.rate.norm:       31424.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.034 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23254.986 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 45607.502 ops/s
[info]                  ·gc.alloc.rate:            910.516 MB/sec
[info]                  ·gc.alloc.rate.norm:       31424.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.084 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 46801.577 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce":
[info]   46025.019 ±(99.9%) 1070.674 ops/s [Average]
[info]   (min, avg, max) = (45607.502, 46025.019, 46267.350), stdev = 278.051
[info]   CI (99.9%): [44954.344, 47095.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate":
[info]   918.868 ±(99.9%) 21.437 MB/sec [Average]
[info]   (min, avg, max) = (910.516, 918.868, 923.781), stdev = 5.567
[info]   CI (99.9%): [897.431, 940.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   31424.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (31424.009, 31424.009, 31424.010), stdev = 0.001
[info]   CI (99.9%): [31424.008, 31424.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   949.273 ±(99.9%) 1429.991 MB/sec [Average]
[info]   (min, avg, max) = (678.034, 949.273, 1356.084), stdev = 371.364
[info]   CI (99.9%): [≈ 0, 2379.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   32499.257 ±(99.9%) 49395.485 B/op [Average]
[info]   (min, avg, max) = (23067.539, 32499.257, 46801.577), stdev = 12827.850
[info]   CI (99.9%): [≈ 0, 81894.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.871
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 51.06% complete, ETA 00:55:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 49565.291 ops/s
[info] # Warmup Iteration   2: 80724.886 ops/s
[info] # Warmup Iteration   3: 79561.010 ops/s
[info] # Warmup Iteration   4: 79718.876 ops/s
[info] # Warmup Iteration   5: 81176.167 ops/s
[info] Iteration   1: 80935.648 ops/s
[info]                  ·gc.alloc.rate:            853.105 MB/sec
[info]                  ·gc.alloc.rate.norm:       16592.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.733 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26348.149 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 81740.352 ops/s
[info]                  ·gc.alloc.rate:            861.567 MB/sec
[info]                  ·gc.alloc.rate.norm:       16592.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.316 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13043.713 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 80996.882 ops/s
[info]                  ·gc.alloc.rate:            853.829 MB/sec
[info]                  ·gc.alloc.rate.norm:       16592.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.414 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13163.829 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 78966.123 ops/s
[info]                  ·gc.alloc.rate:            832.439 MB/sec
[info]                  ·gc.alloc.rate.norm:       16592.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.419 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13502.175 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 79347.920 ops/s
[info]                  ·gc.alloc.rate:                   836.544 MB/sec
[info]                  ·gc.alloc.rate.norm:              16592.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.299 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        26861.155 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 13.213 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala":
[info]   80397.385 ±(99.9%) 4557.190 ops/s [Average]
[info]   (min, avg, max) = (78966.123, 80397.385, 81740.352), stdev = 1183.488
[info]   CI (99.9%): [75840.195, 84954.575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   847.497 ±(99.9%) 47.794 MB/sec [Average]
[info]   (min, avg, max) = (832.439, 847.497, 861.567), stdev = 12.412
[info]   CI (99.9%): [799.702, 895.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   16592.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16592.005, 16592.005, 16592.006), stdev = 0.001
[info]   CI (99.9%): [16592.004, 16592.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   948.236 ±(99.9%) 1428.131 MB/sec [Average]
[info]   (min, avg, max) = (677.316, 948.236, 1354.733), stdev = 370.881
[info]   CI (99.9%): [≈ 0, 2376.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   18583.804 ±(99.9%) 28210.486 B/op [Average]
[info]   (min, avg, max) = (13043.713, 18583.804, 26861.155), stdev = 7326.174
[info]   CI (99.9%): [≈ 0, 46794.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   2.643 ±(99.9%) 22.753 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.643, 13.213), stdev = 5.909
[info]   CI (99.9%): [≈ 0, 25.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 9.000), stdev = 2.345
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 51.29% complete, ETA 00:55:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 243651.615 ops/s
[info] # Warmup Iteration   2: 259857.514 ops/s
[info] # Warmup Iteration   3: 262581.471 ops/s
[info] # Warmup Iteration   4: 252975.764 ops/s
[info] # Warmup Iteration   5: 261726.270 ops/s
[info] Iteration   1: 262498.236 ops/s
[info]                  ·gc.alloc.rate:            854.148 MB/sec
[info]                  ·gc.alloc.rate.norm:       5120.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.287 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4065.843 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 261506.503 ops/s
[info]                  ·gc.alloc.rate:            850.561 MB/sec
[info]                  ·gc.alloc.rate.norm:       5120.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.996 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4081.232 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 258074.024 ops/s
[info]                  ·gc.alloc.rate:            839.366 MB/sec
[info]                  ·gc.alloc.rate.norm:       5120.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.973 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4135.529 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 257209.613 ops/s
[info]                  ·gc.alloc.rate:            836.627 MB/sec
[info]                  ·gc.alloc.rate.norm:       5120.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.065 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8298.869 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 261861.128 ops/s
[info]                  ·gc.alloc.rate:            851.748 MB/sec
[info]                  ·gc.alloc.rate.norm:       5120.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.024 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4075.716 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala":
[info]   260229.901 ±(99.9%) 9274.757 ops/s [Average]
[info]   (min, avg, max) = (257209.613, 260229.901, 262498.236), stdev = 2408.625
[info]   CI (99.9%): [250955.144, 269504.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   846.490 ±(99.9%) 30.497 MB/sec [Average]
[info]   (min, avg, max) = (836.627, 846.490, 854.148), stdev = 7.920
[info]   CI (99.9%): [815.993, 876.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5120.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5120.002, 5120.002, 5120.002), stdev = 0.001
[info]   CI (99.9%): [5120.001, 5120.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   813.669 ±(99.9%) 1167.548 MB/sec [Average]
[info]   (min, avg, max) = (677.973, 813.669, 1356.065), stdev = 303.209
[info]   CI (99.9%): [≈ 0, 1981.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   4931.438 ±(99.9%) 7249.401 B/op [Average]
[info]   (min, avg, max) = (4065.843, 4931.438, 8298.869), stdev = 1882.646
[info]   CI (99.9%): [≈ 0, 12180.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 8.000), stdev = 2.168
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 51.53% complete, ETA 00:54:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12281.901 ops/s
[info] # Warmup Iteration   2: 23450.023 ops/s
[info] # Warmup Iteration   3: 24260.199 ops/s
[info] # Warmup Iteration   4: 24167.852 ops/s
[info] # Warmup Iteration   5: 24191.175 ops/s
[info] Iteration   1: 24125.341 ops/s
[info]                  ·gc.alloc.rate:            1133.872 MB/sec
[info]                  ·gc.alloc.rate.norm:       73976.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.773 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 88388.047 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 24383.321 ops/s
[info]                  ·gc.alloc.rate:            1145.866 MB/sec
[info]                  ·gc.alloc.rate.norm:       73976.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.310 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 43726.496 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 24219.863 ops/s
[info]                  ·gc.alloc.rate:            1138.186 MB/sec
[info]                  ·gc.alloc.rate.norm:       73976.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.651 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 88045.062 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 24225.935 ops/s
[info]                  ·gc.alloc.rate:            1138.625 MB/sec
[info]                  ·gc.alloc.rate.norm:       73976.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.781 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 88019.627 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 24412.339 ops/s
[info]                  ·gc.alloc.rate:                   1147.402 MB/sec
[info]                  ·gc.alloc.rate.norm:              73976.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:             677.440 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        43676.351 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 257.678 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson":
[info]   24273.360 ±(99.9%) 465.384 ops/s [Average]
[info]   (min, avg, max) = (24125.341, 24273.360, 24412.339), stdev = 120.859
[info]   CI (99.9%): [23807.975, 24738.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1140.790 ±(99.9%) 21.851 MB/sec [Average]
[info]   (min, avg, max) = (1133.872, 1140.790, 1147.402), stdev = 5.675
[info]   CI (99.9%): [1118.939, 1162.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   73976.017 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (73976.017, 73976.017, 73976.018), stdev = 0.001
[info]   CI (99.9%): [73976.015, 73976.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1083.791 ±(99.9%) 1428.610 MB/sec [Average]
[info]   (min, avg, max) = (677.310, 1083.791, 1354.781), stdev = 371.005
[info]   CI (99.9%): [≈ 0, 2512.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   70371.117 ±(99.9%) 93749.428 B/op [Average]
[info]   (min, avg, max) = (43676.351, 70371.117, 88388.047), stdev = 24346.429
[info]   CI (99.9%): [≈ 0, 164120.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   51.536 ±(99.9%) 443.736 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 51.536, 257.678), stdev = 115.237
[info]   CI (99.9%): [≈ 0, 495.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 8.000, 13.000), stdev = 3.937
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 51.76% complete, ETA 00:54:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42515.953 ops/s
[info] # Warmup Iteration   2: 55592.803 ops/s
[info] # Warmup Iteration   3: 57810.675 ops/s
[info] # Warmup Iteration   4: 57980.692 ops/s
[info] # Warmup Iteration   5: 57865.729 ops/s
[info] Iteration   1: 58091.250 ops/s
[info]                  ·gc.alloc.rate:            861.813 MB/sec
[info]                  ·gc.alloc.rate.norm:       23352.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.024 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18372.007 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 58123.047 ops/s
[info]                  ·gc.alloc.rate:            862.271 MB/sec
[info]                  ·gc.alloc.rate.norm:       23352.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.035 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18362.526 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 58119.643 ops/s
[info]                  ·gc.alloc.rate:            862.252 MB/sec
[info]                  ·gc.alloc.rate.norm:       23352.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.067 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18363.790 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 57811.090 ops/s
[info]                  ·gc.alloc.rate:            857.702 MB/sec
[info]                  ·gc.alloc.rate.norm:       23352.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.093 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 36921.307 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 58154.694 ops/s
[info]                  ·gc.alloc.rate:            862.767 MB/sec
[info]                  ·gc.alloc.rate.norm:       23352.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.063 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18352.739 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce":
[info]   58059.945 ±(99.9%) 542.625 ops/s [Average]
[info]   (min, avg, max) = (57811.090, 58059.945, 58154.694), stdev = 140.918
[info]   CI (99.9%): [57517.320, 58602.570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate":
[info]   861.361 ±(99.9%) 7.983 MB/sec [Average]
[info]   (min, avg, max) = (857.702, 861.361, 862.767), stdev = 2.073
[info]   CI (99.9%): [853.378, 869.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   23352.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (23352.007, 23352.007, 23352.008), stdev = 0.001
[info]   CI (99.9%): [23352.006, 23352.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   813.656 ±(99.9%) 1167.635 MB/sec [Average]
[info]   (min, avg, max) = (678.024, 813.656, 1356.093), stdev = 303.231
[info]   CI (99.9%): [≈ 0, 1981.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   22074.474 ±(99.9%) 31958.939 B/op [Average]
[info]   (min, avg, max) = (18352.739, 22074.474, 36921.307), stdev = 8299.635
[info]   CI (99.9%): [≈ 0, 54033.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 8.000), stdev = 1.949
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 52.00% complete, ETA 00:54:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 56545.937 ops/s
[info] # Warmup Iteration   2: 90434.557 ops/s
[info] # Warmup Iteration   3: 87677.420 ops/s
[info] # Warmup Iteration   4: 90484.070 ops/s
[info] # Warmup Iteration   5: 88841.026 ops/s
[info] Iteration   1: 89904.623 ops/s
[info]                  ·gc.alloc.rate:            1231.396 MB/sec
[info]                  ·gc.alloc.rate.norm:       21559.982 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.717 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23719.165 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   2: 90446.927 ops/s
[info]                  ·gc.alloc.rate:            1238.735 MB/sec
[info]                  ·gc.alloc.rate.norm:       21560.027 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.623 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23577.051 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 90544.368 ops/s
[info]                  ·gc.alloc.rate:            1240.178 MB/sec
[info]                  ·gc.alloc.rate.norm:       21560.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.375 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11775.898 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 90136.600 ops/s
[info]                  ·gc.alloc.rate:                   1234.569 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.726 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        23658.387 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 69.789 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 90725.037 ops/s
[info]                  ·gc.alloc.rate:                                  1242.662 MB/sec
[info]                  ·gc.alloc.rate.norm:                             21559.983 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.066 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.146 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.750 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       23643.488 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala":
[info]   90351.511 ±(99.9%) 1265.034 ops/s [Average]
[info]   (min, avg, max) = (89904.623, 90351.511, 90725.037), stdev = 328.525
[info]   CI (99.9%): [89086.476, 91616.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1237.508 ±(99.9%) 17.348 MB/sec [Average]
[info]   (min, avg, max) = (1231.396, 1237.508, 1242.662), stdev = 4.505
[info]   CI (99.9%): [1220.160, 1254.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   21560.000 ±(99.9%) 0.071 B/op [Average]
[info]   (min, avg, max) = (21559.982, 21560.000, 21560.027), stdev = 0.018
[info]   CI (99.9%): [21559.929, 21560.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.013 ±(99.9%) 0.114 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.066), stdev = 0.030
[info]   CI (99.9%): [≈ 0, 0.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.229 ±(99.9%) 1.974 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.229, 1.146), stdev = 0.513
[info]   CI (99.9%): [≈ 0, 2.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1220.838 ±(99.9%) 1169.923 MB/sec [Average]
[info]   (min, avg, max) = (677.375, 1220.838, 1362.750), stdev = 303.825
[info]   CI (99.9%): [50.915, 2390.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   21274.798 ±(99.9%) 20448.024 B/op [Average]
[info]   (min, avg, max) = (11775.898, 21274.798, 23719.165), stdev = 5310.287
[info]   CI (99.9%): [826.774, 41722.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   13.958 ±(99.9%) 120.180 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13.958, 69.789), stdev = 31.210
[info]   CI (99.9%): [≈ 0, 134.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.400, 14.000), stdev = 4.722
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 52.24% complete, ETA 00:54:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 256401.081 ops/s
[info] # Warmup Iteration   2: 284759.578 ops/s
[info] # Warmup Iteration   3: 287729.779 ops/s
[info] # Warmup Iteration   4: 290818.009 ops/s
[info] # Warmup Iteration   5: 292217.131 ops/s
[info] Iteration   1: 291546.635 ops/s
[info]                  ·gc.alloc.rate:            929.043 MB/sec
[info]                  ·gc.alloc.rate.norm:       5016.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.792 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7314.668 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 292216.735 ops/s
[info]                  ·gc.alloc.rate:            931.209 MB/sec
[info]                  ·gc.alloc.rate.norm:       5016.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.398 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3648.837 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 292315.180 ops/s
[info]                  ·gc.alloc.rate:            931.478 MB/sec
[info]                  ·gc.alloc.rate.norm:       5016.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.344 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3647.489 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 291322.839 ops/s
[info]                  ·gc.alloc.rate:                   928.372 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.780 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        7319.890 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.599 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 286776.079 ops/s
[info]                  ·gc.alloc.rate:            914.197 MB/sec
[info]                  ·gc.alloc.rate.norm:       5016.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.321 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3721.803 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala":
[info]   290835.494 ±(99.9%) 8889.772 ops/s [Average]
[info]   (min, avg, max) = (286776.079, 290835.494, 292315.180), stdev = 2308.646
[info]   CI (99.9%): [281945.722, 299725.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   926.860 ±(99.9%) 27.745 MB/sec [Average]
[info]   (min, avg, max) = (914.197, 926.860, 931.478), stdev = 7.205
[info]   CI (99.9%): [899.115, 954.604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5016.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5016.001, 5016.001, 5016.002), stdev = 0.001
[info]   CI (99.9%): [5016.001, 5016.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   948.527 ±(99.9%) 1428.059 MB/sec [Average]
[info]   (min, avg, max) = (677.344, 948.527, 1354.792), stdev = 370.862
[info]   CI (99.9%): [≈ 0, 2376.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   5130.537 ±(99.9%) 7687.580 B/op [Average]
[info]   (min, avg, max) = (3647.489, 5130.537, 7319.890), stdev = 1996.440
[info]   CI (99.9%): [≈ 0, 12818.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.720 ±(99.9%) 6.197 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.720, 3.599), stdev = 1.609
[info]   CI (99.9%): [≈ 0, 6.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.871
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 52.47% complete, ETA 00:53:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 296409.161 ops/s
[info] # Warmup Iteration   2: 322608.885 ops/s
[info] # Warmup Iteration   3: 323141.135 ops/s
[info] # Warmup Iteration   4: 323205.652 ops/s
[info] # Warmup Iteration   5: 323248.783 ops/s
[info] Iteration   1: 322919.268 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 323051.318 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 323208.789 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 306914.448 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 323938.937 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc":
[info]   320006.552 ±(99.9%) 28222.597 ops/s [Average]
[info]   (min, avg, max) = (306914.448, 320006.552, 323938.937), stdev = 7329.319
[info]   CI (99.9%): [291783.955, 348229.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 52.71% complete, ETA 00:53:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 58523.616 ops/s
[info] # Warmup Iteration   2: 77430.666 ops/s
[info] # Warmup Iteration   3: 78074.045 ops/s
[info] # Warmup Iteration   4: 78297.075 ops/s
[info] # Warmup Iteration   5: 78417.815 ops/s
[info] Iteration   1: 78665.563 ops/s
[info]                  ·gc.alloc.rate:            1165.697 MB/sec
[info]                  ·gc.alloc.rate.norm:       23327.980 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.266 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13553.485 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 78343.183 ops/s
[info]                  ·gc.alloc.rate:            1161.325 MB/sec
[info]                  ·gc.alloc.rate.norm:       23328.031 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.995 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 27218.361 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 78392.399 ops/s
[info]                  ·gc.alloc.rate:            1162.006 MB/sec
[info]                  ·gc.alloc.rate.norm:       23327.980 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.963 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 27201.699 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 78127.019 ops/s
[info]                  ·gc.alloc.rate:            1157.918 MB/sec
[info]                  ·gc.alloc.rate.norm:       23328.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.808 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 27294.645 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 78415.953 ops/s
[info]                  ·gc.alloc.rate:                   1162.457 MB/sec
[info]                  ·gc.alloc.rate.norm:              23328.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:             677.579 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        13597.554 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 80.222 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson":
[info]   78388.823 ±(99.9%) 740.582 ops/s [Average]
[info]   (min, avg, max) = (78127.019, 78388.823, 78665.563), stdev = 192.327
[info]   CI (99.9%): [77648.242, 79129.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1161.881 ±(99.9%) 10.706 MB/sec [Average]
[info]   (min, avg, max) = (1157.918, 1161.881, 1165.697), stdev = 2.780
[info]   CI (99.9%): [1151.175, 1172.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   23328.000 ±(99.9%) 0.083 B/op [Average]
[info]   (min, avg, max) = (23327.980, 23328.000, 23328.031), stdev = 0.021
[info]   CI (99.9%): [23327.917, 23328.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1083.922 ±(99.9%) 1428.903 MB/sec [Average]
[info]   (min, avg, max) = (677.266, 1083.922, 1354.995), stdev = 371.082
[info]   CI (99.9%): [≈ 0, 2512.825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   21773.149 ±(99.9%) 28816.200 B/op [Average]
[info]   (min, avg, max) = (13553.485, 21773.149, 27294.645), stdev = 7483.476
[info]   CI (99.9%): [≈ 0, 50589.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.800 ±(99.9%) 6.884 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.800, 3.998), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   16.044 ±(99.9%) 138.146 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16.044, 80.222), stdev = 35.876
[info]   CI (99.9%): [≈ 0, 154.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.200, 9.000), stdev = 2.490
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 52.94% complete, ETA 00:53:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16720.480 ops/s
[info] # Warmup Iteration   2: 23568.180 ops/s
[info] # Warmup Iteration   3: 23689.159 ops/s
[info] # Warmup Iteration   4: 23601.630 ops/s
[info] # Warmup Iteration   5: 23254.329 ops/s
[info] Iteration   1: 23412.970 ops/s
[info]                  ·gc.alloc.rate:            1219.928 MB/sec
[info]                  ·gc.alloc.rate.norm:       81984.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.599 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 91168.840 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 23347.316 ops/s
[info]                  ·gc.alloc.rate:            1216.110 MB/sec
[info]                  ·gc.alloc.rate.norm:       81984.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.175 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 91426.523 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 23416.076 ops/s
[info]                  ·gc.alloc.rate:            1219.570 MB/sec
[info]                  ·gc.alloc.rate.norm:       81984.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.013 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 45578.581 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 23347.381 ops/s
[info]                  ·gc.alloc.rate:            1216.130 MB/sec
[info]                  ·gc.alloc.rate.norm:       81984.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.197 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 91426.523 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 23656.828 ops/s
[info]                  ·gc.alloc.rate:                                  1232.535 MB/sec
[info]                  ·gc.alloc.rate.norm:                             81984.019 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.039 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.570 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1359.816 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       90450.261 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                221.583 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce":
[info]   23436.114 ±(99.9%) 492.411 ops/s [Average]
[info]   (min, avg, max) = (23347.316, 23436.114, 23656.828), stdev = 127.878
[info]   CI (99.9%): [22943.703, 23928.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate":
[info]   1220.854 ±(99.9%) 26.101 MB/sec [Average]
[info]   (min, avg, max) = (1216.110, 1220.854, 1232.535), stdev = 6.778
[info]   CI (99.9%): [1194.753, 1246.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   81984.018 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (81984.017, 81984.018, 81984.019), stdev = 0.001
[info]   CI (99.9%): [81984.016, 81984.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.008 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.039), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.514 ±(99.9%) 4.425 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.514, 2.570), stdev = 1.149
[info]   CI (99.9%): [≈ 0, 4.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1221.360 ±(99.9%) 1169.609 MB/sec [Average]
[info]   (min, avg, max) = (678.013, 1221.360, 1359.816), stdev = 303.744
[info]   CI (99.9%): [51.751, 2390.970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   82010.146 ±(99.9%) 78436.786 B/op [Average]
[info]   (min, avg, max) = (45578.581, 82010.146, 91426.523), stdev = 20369.784
[info]   CI (99.9%): [3573.359, 160446.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.737 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   44.317 ±(99.9%) 381.580 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 44.317, 221.583), stdev = 99.095
[info]   CI (99.9%): [≈ 0, 425.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 8.000), stdev = 1.517
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 53.18% complete, ETA 00:52:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14913.855 ops/s
[info] # Warmup Iteration   2: 26610.671 ops/s
[info] # Warmup Iteration   3: 26781.755 ops/s
[info] # Warmup Iteration   4: 26257.570 ops/s
[info] # Warmup Iteration   5: 26574.492 ops/s
[info] Iteration   1: 26742.876 ops/s
[info]                  ·gc.alloc.rate:            1047.377 MB/sec
[info]                  ·gc.alloc.rate.norm:       61648.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.376 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 39869.959 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 26343.268 ops/s
[info]                  ·gc.alloc.rate:                   1031.684 MB/sec
[info]                  ·gc.alloc.rate.norm:              61648.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.047 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        80910.730 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 39.799 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 26445.460 ops/s
[info]                  ·gc.alloc.rate:            1035.834 MB/sec
[info]                  ·gc.alloc.rate.norm:       61648.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.458 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 40319.172 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 26166.428 ops/s
[info]                  ·gc.alloc.rate:            1024.808 MB/sec
[info]                  ·gc.alloc.rate.norm:       61648.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.120 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 81457.967 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 26496.662 ops/s
[info]                  ·gc.alloc.rate:                   1037.806 MB/sec
[info]                  ·gc.alloc.rate.norm:              61648.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.725 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        40198.974 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 39.566 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala":
[info]   26438.939 ±(99.9%) 814.953 ops/s [Average]
[info]   (min, avg, max) = (26166.428, 26438.939, 26742.876), stdev = 211.641
[info]   CI (99.9%): [25623.986, 27253.892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1035.502 ±(99.9%) 31.950 MB/sec [Average]
[info]   (min, avg, max) = (1024.808, 1035.502, 1047.377), stdev = 8.297
[info]   CI (99.9%): [1003.552, 1067.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   61648.016 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (61648.015, 61648.016, 61648.017), stdev = 0.001
[info]   CI (99.9%): [61648.013, 61648.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   947.945 ±(99.9%) 1427.633 MB/sec [Average]
[info]   (min, avg, max) = (676.725, 947.945, 1354.120), stdev = 370.752
[info]   CI (99.9%): [≈ 0, 2375.578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   56551.361 ±(99.9%) 86593.944 B/op [Average]
[info]   (min, avg, max) = (39869.959, 56551.361, 81457.967), stdev = 22488.172
[info]   CI (99.9%): [≈ 0, 143145.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   15.873 ±(99.9%) 83.694 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15.873, 39.799), stdev = 21.735
[info]   CI (99.9%): [≈ 0, 99.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 9.000), stdev = 2.408
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 53.41% complete, ETA 00:52:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 443354.589 ops/s
[info] # Warmup Iteration   2: 474400.830 ops/s
[info] # Warmup Iteration   3: 476544.157 ops/s
[info] # Warmup Iteration   4: 477204.882 ops/s
[info] # Warmup Iteration   5: 476637.706 ops/s
[info] Iteration   1: 479577.862 ops/s
[info]                  ·gc.alloc.rate:            1247.782 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.961 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2225.492 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 467055.629 ops/s
[info]                  ·gc.alloc.rate:            1215.846 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.641 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4570.318 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 478046.712 ops/s
[info]                  ·gc.alloc.rate:            1243.954 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.091 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4465.236 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 476810.017 ops/s
[info]                  ·gc.alloc.rate:                   1241.025 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1356.342 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4476.603 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 10.994 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 477078.645 ops/s
[info]                  ·gc.alloc.rate:                                  1241.486 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4096.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.159 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.525 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.761 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4496.120 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala":
[info]   475713.773 ±(99.9%) 19098.755 ops/s [Average]
[info]   (min, avg, max) = (467055.629, 475713.773, 479577.862), stdev = 4959.886
[info]   CI (99.9%): [456615.018, 494812.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1238.019 ±(99.9%) 48.831 MB/sec [Average]
[info]   (min, avg, max) = (1215.846, 1238.019, 1247.782), stdev = 12.681
[info]   CI (99.9%): [1189.188, 1286.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.001, 4096.001, 4096.001), stdev = 0.001
[info]   CI (99.9%): [4096.001, 4096.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.032 ±(99.9%) 0.274 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.032, 0.159), stdev = 0.071
[info]   CI (99.9%): [≈ 0, 0.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.105 ±(99.9%) 0.904 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.105, 0.525), stdev = 0.235
[info]   CI (99.9%): [≈ 0, 1.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1221.959 ±(99.9%) 1171.046 MB/sec [Average]
[info]   (min, avg, max) = (677.961, 1221.959, 1362.761), stdev = 304.117
[info]   CI (99.9%): [50.913, 2393.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   4046.754 ±(99.9%) 3923.569 B/op [Average]
[info]   (min, avg, max) = (2225.492, 4046.754, 4570.318), stdev = 1018.939
[info]   CI (99.9%): [123.184, 7970.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   2.199 ±(99.9%) 18.932 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.199, 10.994), stdev = 4.916
[info]   CI (99.9%): [≈ 0, 21.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 1.817
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 53.65% complete, ETA 00:52:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7756.168 ops/s
[info] # Warmup Iteration   2: 20030.045 ops/s
[info] # Warmup Iteration   3: 20457.784 ops/s
[info] # Warmup Iteration   4: 20357.239 ops/s
[info] # Warmup Iteration   5: 20356.406 ops/s
[info] Iteration   1: 20492.700 ops/s
[info]                  ·gc.alloc.rate:            1558.280 MB/sec
[info]                  ·gc.alloc.rate.norm:       119680.025 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.097 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 103998.195 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 20527.756 ops/s
[info]                  ·gc.alloc.rate:                   1560.931 MB/sec
[info]                  ·gc.alloc.rate.norm:              119680.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.220 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        103831.036 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 51.073 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 20625.876 ops/s
[info]                  ·gc.alloc.rate:                   1568.394 MB/sec
[info]                  ·gc.alloc.rate.norm:              119680.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1358.894 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        103693.589 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 304.981 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 20637.081 ops/s
[info]                  ·gc.alloc.rate:                                  1569.250 MB/sec
[info]                  ·gc.alloc.rate.norm:                             119680.020 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.058 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.420 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.361 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       155914.716 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 20454.302 ops/s
[info]                  ·gc.alloc.rate:                                  1555.964 MB/sec
[info]                  ·gc.alloc.rate.norm:                             119680.020 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.026 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1363.391 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       104867.851 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson":
[info]   20547.543 ±(99.9%) 311.916 ops/s [Average]
[info]   (min, avg, max) = (20454.302, 20547.543, 20637.081), stdev = 81.004
[info]   CI (99.9%): [20235.627, 20859.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1562.564 ±(99.9%) 23.045 MB/sec [Average]
[info]   (min, avg, max) = (1555.964, 1562.564, 1569.250), stdev = 5.985
[info]   CI (99.9%): [1539.518, 1585.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   119680.021 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (119680.020, 119680.021, 119680.025), stdev = 0.002
[info]   CI (99.9%): [119680.012, 119680.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.012 ±(99.9%) 0.100 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.058), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.889 ±(99.9%) 7.600 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.889, 4.420), stdev = 1.974
[info]   CI (99.9%): [≈ 0, 8.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1494.992 ±(99.9%) 1182.650 MB/sec [Average]
[info]   (min, avg, max) = (1354.097, 1494.992, 2044.361), stdev = 307.130
[info]   CI (99.9%): [312.343, 2677.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   114461.078 ±(99.9%) 89249.476 B/op [Average]
[info]   (min, avg, max) = (103693.589, 114461.078, 155914.716), stdev = 23177.805
[info]   CI (99.9%): [25211.602, 203710.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.689 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.997), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   71.211 ±(99.9%) 510.363 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 71.211, 304.981), stdev = 132.540
[info]   CI (99.9%): [≈ 0, 581.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.000, 10.000), stdev = 3.317
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 53.88% complete, ETA 00:52:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 47867.281 ops/s
[info] # Warmup Iteration   2: 67647.014 ops/s
[info] # Warmup Iteration   3: 67573.997 ops/s
[info] # Warmup Iteration   4: 69009.388 ops/s
[info] # Warmup Iteration   5: 68577.439 ops/s
[info] Iteration   1: 68837.061 ops/s
[info]                  ·gc.alloc.rate:            1457.106 MB/sec
[info]                  ·gc.alloc.rate.norm:       33312.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.346 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 31008.449 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 68829.788 ops/s
[info]                  ·gc.alloc.rate:            1457.039 MB/sec
[info]                  ·gc.alloc.rate.norm:       33312.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.441 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 31012.053 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 67936.917 ops/s
[info]                  ·gc.alloc.rate:                   1437.834 MB/sec
[info]                  ·gc.alloc.rate.norm:              33312.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1356.154 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        31419.626 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 77.160 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 69034.162 ops/s
[info]                  ·gc.alloc.rate:                                  1461.186 MB/sec
[info]                  ·gc.alloc.rate.norm:                             33312.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.148 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.380 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.885 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       31070.943 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 69215.172 ops/s
[info]                  ·gc.alloc.rate:            1464.818 MB/sec
[info]                  ·gc.alloc.rate.norm:       33312.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.740 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 30990.603 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce":
[info]   68770.620 ±(99.9%) 1896.278 ops/s [Average]
[info]   (min, avg, max) = (67936.917, 68770.620, 69215.172), stdev = 492.457
[info]   CI (99.9%): [66874.342, 70666.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1455.597 ±(99.9%) 40.209 MB/sec [Average]
[info]   (min, avg, max) = (1437.834, 1455.597, 1464.818), stdev = 10.442
[info]   CI (99.9%): [1415.387, 1495.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   33312.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (33312.006, 33312.006, 33312.006), stdev = 0.001
[info]   CI (99.9%): [33312.005, 33312.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.030 ±(99.9%) 0.255 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.148), stdev = 0.066
[info]   CI (99.9%): [≈ 0, 0.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.676 ±(99.9%) 5.821 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.676, 3.380), stdev = 1.512
[info]   CI (99.9%): [≈ 0, 6.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1358.913 ±(99.9%) 13.714 MB/sec [Average]
[info]   (min, avg, max) = (1356.154, 1358.913, 1362.885), stdev = 3.561
[info]   CI (99.9%): [1345.199, 1372.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   31100.335 ±(99.9%) 697.084 B/op [Average]
[info]   (min, avg, max) = (30990.603, 31100.335, 31419.626), stdev = 181.031
[info]   CI (99.9%): [30403.251, 31797.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   15.432 ±(99.9%) 132.874 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15.432, 77.160), stdev = 34.507
[info]   CI (99.9%): [≈ 0, 148.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.600, 8.000), stdev = 2.881
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 54.12% complete, ETA 00:51:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 105897.423 ops/s
[info] # Warmup Iteration   2: 156021.403 ops/s
[info] # Warmup Iteration   3: 155545.779 ops/s
[info] # Warmup Iteration   4: 155543.146 ops/s
[info] # Warmup Iteration   5: 155962.968 ops/s
[info] Iteration   1: 156643.411 ops/s
[info]                  ·gc.alloc.rate:            1187.031 MB/sec
[info]                  ·gc.alloc.rate.norm:       11928.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.376 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6806.675 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 154596.368 ops/s
[info]                  ·gc.alloc.rate:            1171.630 MB/sec
[info]                  ·gc.alloc.rate.norm:       11928.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.876 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13793.573 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 156478.956 ops/s
[info]                  ·gc.alloc.rate:            1185.996 MB/sec
[info]                  ·gc.alloc.rate.norm:       11928.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.996 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13627.703 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 158672.407 ops/s
[info]                  ·gc.alloc.rate:                   1202.388 MB/sec
[info]                  ·gc.alloc.rate.norm:              11928.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.698 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        13438.962 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 39.643 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 156076.151 ops/s
[info]                  ·gc.alloc.rate:                                  1182.898 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11928.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.068 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.690 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            681.461 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6871.658 B/op
[info]                  ·gc.count:                                       1.000 counts
[info]                  ·gc.time:                                        1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala":
[info]   156493.459 ±(99.9%) 5627.611 ops/s [Average]
[info]   (min, avg, max) = (154596.368, 156493.459, 158672.407), stdev = 1461.473
[info]   CI (99.9%): [150865.847, 162121.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1185.988 ±(99.9%) 42.434 MB/sec [Average]
[info]   (min, avg, max) = (1171.630, 1185.988, 1202.388), stdev = 11.020
[info]   CI (99.9%): [1143.555, 1228.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   11928.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11928.003, 11928.003, 11928.003), stdev = 0.001
[info]   CI (99.9%): [11928.003, 11928.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.014 ±(99.9%) 0.118 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.068), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.138 ±(99.9%) 1.188 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.138, 0.690), stdev = 0.308
[info]   CI (99.9%): [≈ 0, 1.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1084.681 ±(99.9%) 1424.568 MB/sec [Average]
[info]   (min, avg, max) = (677.376, 1084.681, 1354.996), stdev = 369.956
[info]   CI (99.9%): [≈ 0, 2509.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   10907.714 ±(99.9%) 14309.949 B/op [Average]
[info]   (min, avg, max) = (6806.675, 10907.714, 13793.573), stdev = 3716.248
[info]   CI (99.9%): [≈ 0, 25217.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   7.929 ±(99.9%) 68.268 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.929, 39.643), stdev = 17.729
[info]   CI (99.9%): [≈ 0, 76.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 6.600, 10.000), stdev = 3.647
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 54.35% complete, ETA 00:51:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1571537.474 ops/s
[info] # Warmup Iteration   2: 1758901.864 ops/s
[info] # Warmup Iteration   3: 1787159.316 ops/s
[info] # Warmup Iteration   4: 1788245.077 ops/s
[info] # Warmup Iteration   5: 1789298.352 ops/s
[info] Iteration   1: 1757597.796 ops/s
[info]                  ·gc.alloc.rate:                   1456.269 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.950 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1213.275 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.596 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 1749878.036 ops/s
[info]                  ·gc.alloc.rate:            1449.795 MB/sec
[info]                  ·gc.alloc.rate.norm:       1304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.208 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1219.825 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 1723842.630 ops/s
[info]                  ·gc.alloc.rate:                                  1428.059 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1304.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.074 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.068 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2036.139 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1859.255 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                3.649 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   4: 1748825.117 ops/s
[info]                  ·gc.alloc.rate:                                  1448.826 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1304.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.097 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.088 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.856 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1226.624 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 1748939.987 ops/s
[info]                  ·gc.alloc.rate:            1448.970 MB/sec
[info]                  ·gc.alloc.rate.norm:       1304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.863 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1226.508 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala":
[info]   1745816.713 ±(99.9%) 49348.144 ops/s [Average]
[info]   (min, avg, max) = (1723842.630, 1745816.713, 1757597.796), stdev = 12815.556
[info]   CI (99.9%): [1696468.569, 1795164.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1446.384 ±(99.9%) 41.195 MB/sec [Average]
[info]   (min, avg, max) = (1428.059, 1446.384, 1456.269), stdev = 10.698
[info]   CI (99.9%): [1405.189, 1487.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1304.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1304.000, 1304.000, 1304.000), stdev = 0.001
[info]   CI (99.9%): [1304.000, 1304.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.034 ±(99.9%) 0.183 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.034, 0.097), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.031 ±(99.9%) 0.166 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.031, 0.088), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1494.603 ±(99.9%) 1165.782 MB/sec [Average]
[info]   (min, avg, max) = (1354.950, 1494.603, 2036.139), stdev = 302.750
[info]   CI (99.9%): [328.821, 2660.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1349.097 ±(99.9%) 1098.358 B/op [Average]
[info]   (min, avg, max) = (1213.275, 1349.097, 1859.255), stdev = 285.240
[info]   CI (99.9%): [250.739, 2447.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.849 ±(99.9%) 6.109 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.849, 3.649), stdev = 1.586
[info]   CI (99.9%): [≈ 0, 6.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.800, 9.000), stdev = 3.114
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 54.59% complete, ETA 00:51:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1775487.848 ops/s
[info] # Warmup Iteration   2: 1962534.052 ops/s
[info] # Warmup Iteration   3: 1942496.380 ops/s
[info] # Warmup Iteration   4: 1939016.923 ops/s
[info] # Warmup Iteration   5: 1942448.473 ops/s
[info] Iteration   1: 1941613.125 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1942644.543 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1942695.892 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1940562.423 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1942809.237 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc":
[info]   1942065.044 ±(99.9%) 3728.228 ops/s [Average]
[info]   (min, avg, max) = (1940562.423, 1942065.044, 1942809.237), stdev = 968.209
[info]   CI (99.9%): [1938336.816, 1945793.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 54.82% complete, ETA 00:51:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 69984.891 ops/s
[info] # Warmup Iteration   2: 117147.524 ops/s
[info] # Warmup Iteration   3: 119422.744 ops/s
[info] # Warmup Iteration   4: 119384.151 ops/s
[info] # Warmup Iteration   5: 118456.855 ops/s
[info] Iteration   1: 119504.575 ops/s
[info]                  ·gc.alloc.rate:                   1346.181 MB/sec
[info]                  ·gc.alloc.rate.norm:              17728.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.288 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        17834.775 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 8.773 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 119411.621 ops/s
[info]                  ·gc.alloc.rate:            1345.111 MB/sec
[info]                  ·gc.alloc.rate.norm:       17728.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.311 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 17849.260 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 119285.094 ops/s
[info]                  ·gc.alloc.rate:                   1343.440 MB/sec
[info]                  ·gc.alloc.rate.norm:              17728.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.046 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        17867.961 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 61.523 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 120152.387 ops/s
[info]                  ·gc.alloc.rate:                                  1353.297 MB/sec
[info]                  ·gc.alloc.rate.norm:                             17728.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.026 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.342 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.776 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       17852.186 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 120293.086 ops/s
[info]                  ·gc.alloc.rate:                                  1355.400 MB/sec
[info]                  ·gc.alloc.rate.norm:                             17728.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.028 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.370 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1363.306 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       17831.413 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson":
[info]   119729.353 ±(99.9%) 1770.457 ops/s [Average]
[info]   (min, avg, max) = (119285.094, 119729.353, 120293.086), stdev = 459.782
[info]   CI (99.9%): [117958.896, 121499.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1348.686 ±(99.9%) 20.458 MB/sec [Average]
[info]   (min, avg, max) = (1343.440, 1348.686, 1355.400), stdev = 5.313
[info]   CI (99.9%): [1328.228, 1369.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   17728.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (17728.003, 17728.003, 17728.004), stdev = 0.001
[info]   CI (99.9%): [17728.003, 17728.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.011 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.028), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.142 ±(99.9%) 0.752 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.142, 0.370), stdev = 0.195
[info]   CI (99.9%): [≈ 0, 0.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1357.746 ±(99.9%) 18.632 MB/sec [Average]
[info]   (min, avg, max) = (1354.046, 1357.746, 1363.306), stdev = 4.839
[info]   CI (99.9%): [1339.113, 1376.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   17847.119 ±(99.9%) 56.583 B/op [Average]
[info]   (min, avg, max) = (17831.413, 17847.119, 17867.961), stdev = 14.694
[info]   CI (99.9%): [17790.536, 17903.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.821 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.662), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   14.059 ±(99.9%) 103.211 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14.059, 61.523), stdev = 26.804
[info]   CI (99.9%): [≈ 0, 117.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.800, 10.000), stdev = 3.564
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55.06% complete, ETA 00:50:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20214.773 ops/s
[info] # Warmup Iteration   2: 33152.725 ops/s
[info] # Warmup Iteration   3: 33887.348 ops/s
[info] # Warmup Iteration   4: 33349.634 ops/s
[info] # Warmup Iteration   5: 33255.513 ops/s
[info] Iteration   1: 33551.293 ops/s
[info]                  ·gc.alloc.rate:            1205.212 MB/sec
[info]                  ·gc.alloc.rate.norm:       56528.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.544 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 31778.818 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 32931.044 ops/s
[info]                  ·gc.alloc.rate:            1182.755 MB/sec
[info]                  ·gc.alloc.rate.norm:       56528.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.912 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 64755.999 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 33375.785 ops/s
[info]                  ·gc.alloc.rate:            1198.644 MB/sec
[info]                  ·gc.alloc.rate.norm:       56528.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.768 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 63890.827 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 33415.026 ops/s
[info]                  ·gc.alloc.rate:                   1200.244 MB/sec
[info]                  ·gc.alloc.rate.norm:              56528.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.034 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        63818.180 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 188.254 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 33615.078 ops/s
[info]                  ·gc.alloc.rate:                                  1207.272 MB/sec
[info]                  ·gc.alloc.rate.norm:                             56528.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.070 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.301 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.813 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       63810.907 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala":
[info]   33377.645 ±(99.9%) 1032.127 ops/s [Average]
[info]   (min, avg, max) = (32931.044, 33377.645, 33615.078), stdev = 268.040
[info]   CI (99.9%): [32345.518, 34409.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1198.825 ±(99.9%) 37.155 MB/sec [Average]
[info]   (min, avg, max) = (1182.755, 1198.825, 1207.272), stdev = 9.649
[info]   CI (99.9%): [1161.670, 1235.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   56528.013 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (56528.012, 56528.013, 56528.013), stdev = 0.001
[info]   CI (99.9%): [56528.011, 56528.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.014 ±(99.9%) 0.121 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.070), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.660 ±(99.9%) 5.684 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.660, 3.301), stdev = 1.476
[info]   CI (99.9%): [≈ 0, 6.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1221.014 ±(99.9%) 1169.936 MB/sec [Average]
[info]   (min, avg, max) = (677.544, 1221.014, 1362.813), stdev = 303.829
[info]   CI (99.9%): [51.078, 2390.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   57610.946 ±(99.9%) 55626.707 B/op [Average]
[info]   (min, avg, max) = (31778.818, 57610.946, 64755.999), stdev = 14446.079
[info]   CI (99.9%): [1984.240, 113237.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   37.651 ±(99.9%) 324.185 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 37.651, 188.254), stdev = 84.190
[info]   CI (99.9%): [≈ 0, 361.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.200, 10.000), stdev = 3.033
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55.29% complete, ETA 00:50:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 617324.256 ops/s
[info] # Warmup Iteration   2: 658077.469 ops/s
[info] # Warmup Iteration   3: 675488.295 ops/s
[info] # Warmup Iteration   4: 679833.017 ops/s
[info] # Warmup Iteration   5: 679570.722 ops/s
[info] Iteration   1: 680305.065 ops/s
[info]                  ·gc.alloc.rate:            1328.130 MB/sec
[info]                  ·gc.alloc.rate.norm:       3072.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.503 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3137.627 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 671895.786 ops/s
[info]                  ·gc.alloc.rate:            1311.488 MB/sec
[info]                  ·gc.alloc.rate.norm:       3072.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.274 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3176.907 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 667961.866 ops/s
[info]                  ·gc.alloc.rate:            1303.562 MB/sec
[info]                  ·gc.alloc.rate.norm:       3072.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.020 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3195.624 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   4: 667482.858 ops/s
[info]                  ·gc.alloc.rate:                                  1302.835 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3072.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.039 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.092 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1359.561 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3205.756 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                7.853 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 672731.114 ops/s
[info]                  ·gc.alloc.rate:                                  1312.951 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3072.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.094 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.219 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.757 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3188.535 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala":
[info]   672075.338 ±(99.9%) 19841.300 ops/s [Average]
[info]   (min, avg, max) = (667482.858, 672075.338, 680305.065), stdev = 5152.723
[info]   CI (99.9%): [652234.038, 691916.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1311.793 ±(99.9%) 39.285 MB/sec [Average]
[info]   (min, avg, max) = (1302.835, 1311.793, 1328.130), stdev = 10.202
[info]   CI (99.9%): [1272.508, 1351.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3072.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3072.001, 3072.001, 3072.001), stdev = 0.001
[info]   CI (99.9%): [3072.001, 3072.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.027 ±(99.9%) 0.159 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.094), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.062 ±(99.9%) 0.371 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.219), stdev = 0.096
[info]   CI (99.9%): [≈ 0, 0.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1358.223 ±(99.9%) 11.220 MB/sec [Average]
[info]   (min, avg, max) = (1356.020, 1358.223, 1362.757), stdev = 2.914
[info]   CI (99.9%): [1347.003, 1369.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   3180.890 ±(99.9%) 101.541 B/op [Average]
[info]   (min, avg, max) = (3137.627, 3180.890, 3205.756), stdev = 26.370
[info]   CI (99.9%): [3079.349, 3282.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.571 ±(99.9%) 13.524 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.571, 7.853), stdev = 3.512
[info]   CI (99.9%): [≈ 0, 15.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 11.000), stdev = 3.114
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 55.53% complete, ETA 00:50:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9481.806 ops/s
[info] # Warmup Iteration   2: 24583.393 ops/s
[info] # Warmup Iteration   3: 24861.193 ops/s
[info] # Warmup Iteration   4: 24596.614 ops/s
[info] # Warmup Iteration   5: 24946.561 ops/s
[info] Iteration   1: 25076.743 ops/s
[info]                  ·gc.alloc.rate:            1825.055 MB/sec
[info]                  ·gc.alloc.rate.norm:       114560.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2030.664 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 127466.240 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   2: 25162.562 ops/s
[info]                  ·gc.alloc.rate:                                  1832.110 MB/sec
[info]                  ·gc.alloc.rate.norm:                             114560.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.030 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.861 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2039.625 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       127535.707 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                291.653 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   3: 25443.849 ops/s
[info]                  ·gc.alloc.rate:                                  1852.176 MB/sec
[info]                  ·gc.alloc.rate.norm:                             114560.017 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.030 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.851 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.856 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       84294.782 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   4: 25396.233 ops/s
[info]                  ·gc.alloc.rate:            1848.730 MB/sec
[info]                  ·gc.alloc.rate.norm:       114560.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.496 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 126691.065 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 25386.812 ops/s
[info]                  ·gc.alloc.rate:            1847.936 MB/sec
[info]                  ·gc.alloc.rate.norm:       114560.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.424 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 126740.961 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson":
[info]   25293.240 ±(99.9%) 626.822 ops/s [Average]
[info]   (min, avg, max) = (25076.743, 25293.240, 25443.849), stdev = 162.784
[info]   CI (99.9%): [24666.417, 25920.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1841.201 ±(99.9%) 45.799 MB/sec [Average]
[info]   (min, avg, max) = (1825.055, 1841.201, 1852.176), stdev = 11.894
[info]   CI (99.9%): [1795.403, 1887.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   114560.017 ±(99.9%) 0.003 B/op [Average]
[info]   (min, avg, max) = (114560.016, 114560.017, 114560.018), stdev = 0.001
[info]   CI (99.9%): [114560.014, 114560.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.012 ±(99.9%) 0.063 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.030), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.742 ±(99.9%) 3.915 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.742, 1.861), stdev = 1.017
[info]   CI (99.9%): [≈ 0, 4.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1904.413 ±(99.9%) 1165.944 MB/sec [Average]
[info]   (min, avg, max) = (1362.856, 1904.413, 2044.496), stdev = 302.792
[info]   CI (99.9%): [738.469, 3070.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   118545.751 ±(99.9%) 73743.373 B/op [Average]
[info]   (min, avg, max) = (84294.782, 118545.751, 127535.707), stdev = 19150.920
[info]   CI (99.9%): [44802.378, 192289.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.032 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.664), stdev = 2.086
[info]   CI (99.9%): [≈ 0, 8.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   58.331 ±(99.9%) 502.244 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 58.331, 291.653), stdev = 130.431
[info]   CI (99.9%): [≈ 0, 560.575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.600, 14.000), stdev = 4.879
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55.76% complete, ETA 00:50:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 234422.601 ops/s
[info] # Warmup Iteration   2: 347825.064 ops/s
[info] # Warmup Iteration   3: 358966.590 ops/s
[info] # Warmup Iteration   4: 356169.726 ops/s
[info] # Warmup Iteration   5: 351734.115 ops/s
[info] Iteration   1: 358733.312 ops/s
[info]                  ·gc.alloc.rate:            997.354 MB/sec
[info]                  ·gc.alloc.rate.norm:       4376.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.816 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5944.401 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 360623.784 ops/s
[info]                  ·gc.alloc.rate:            1002.714 MB/sec
[info]                  ·gc.alloc.rate.norm:       4376.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.478 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2956.618 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 357989.135 ops/s
[info]                  ·gc.alloc.rate:            995.352 MB/sec
[info]                  ·gc.alloc.rate.norm:       4376.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.909 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5956.770 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 358224.155 ops/s
[info]                  ·gc.alloc.rate:                   995.938 MB/sec
[info]                  ·gc.alloc.rate.norm:              4376.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.699 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2973.314 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.926 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 356494.915 ops/s
[info]                  ·gc.alloc.rate:            991.084 MB/sec
[info]                  ·gc.alloc.rate.norm:       4376.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.733 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5981.646 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala":
[info]   358413.060 ±(99.9%) 5738.797 ops/s [Average]
[info]   (min, avg, max) = (356494.915, 358413.060, 360623.784), stdev = 1490.347
[info]   CI (99.9%): [352674.263, 364151.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   996.489 ±(99.9%) 16.144 MB/sec [Average]
[info]   (min, avg, max) = (991.084, 996.489, 1002.714), stdev = 4.193
[info]   CI (99.9%): [980.344, 1012.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   4376.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4376.001, 4376.001, 4376.001), stdev = 0.001
[info]   CI (99.9%): [4376.001, 4376.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1083.727 ±(99.9%) 1429.392 MB/sec [Average]
[info]   (min, avg, max) = (676.699, 1083.727, 1354.909), stdev = 371.209
[info]   CI (99.9%): [≈ 0, 2513.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   4762.550 ±(99.9%) 6319.012 B/op [Average]
[info]   (min, avg, max) = (2956.618, 4762.550, 5981.646), stdev = 1641.027
[info]   CI (99.9%): [≈ 0, 11081.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.585 ±(99.9%) 5.040 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.585, 2.926), stdev = 1.309
[info]   CI (99.9%): [≈ 0, 5.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.800, 9.000), stdev = 2.588
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 56.00% complete, ETA 00:49:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1945266.917 ops/s
[info] # Warmup Iteration   2: 2203742.794 ops/s
[info] # Warmup Iteration   3: 2234399.378 ops/s
[info] # Warmup Iteration   4: 2226996.919 ops/s
[info] # Warmup Iteration   5: 2249742.618 ops/s
[info] Iteration   1: 2250787.499 ops/s
[info]                  ·gc.alloc.rate:            1315.527 MB/sec
[info]                  ·gc.alloc.rate.norm:       920.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.754 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 947.433 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 2224654.148 ops/s
[info]                  ·gc.alloc.rate:            1300.508 MB/sec
[info]                  ·gc.alloc.rate.norm:       920.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.014 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 958.559 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 2252936.057 ops/s
[info]                  ·gc.alloc.rate:                   1316.785 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.415 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        946.990 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.465 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 2197168.133 ops/s
[info]                  ·gc.alloc.rate:                                  1284.727 MB/sec
[info]                  ·gc.alloc.rate.norm:                             920.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.065 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.047 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1359.315 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       973.413 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                2.863 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 2172090.003 ops/s
[info]                  ·gc.alloc.rate:                                  1270.038 MB/sec
[info]                  ·gc.alloc.rate.norm:                             920.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.107 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.078 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.806 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       986.475 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala":
[info]   2219527.168 ±(99.9%) 134357.392 ops/s [Average]
[info]   (min, avg, max) = (2172090.003, 2219527.168, 2252936.057), stdev = 34892.188
[info]   CI (99.9%): [2085169.776, 2353884.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1297.517 ±(99.9%) 77.570 MB/sec [Average]
[info]   (min, avg, max) = (1270.038, 1297.517, 1316.785), stdev = 20.145
[info]   CI (99.9%): [1219.947, 1375.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   920.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (920.000, 920.000, 920.000), stdev = 0.001
[info]   CI (99.9%): [920.000, 920.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.034 ±(99.9%) 0.190 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.034, 0.107), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.025 ±(99.9%) 0.138 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.078), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1357.261 ±(99.9%) 12.117 MB/sec [Average]
[info]   (min, avg, max) = (1354.754, 1357.261, 1361.806), stdev = 3.147
[info]   CI (99.9%): [1345.144, 1369.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   962.574 ±(99.9%) 66.052 B/op [Average]
[info]   (min, avg, max) = (946.990, 962.574, 986.475), stdev = 17.154
[info]   CI (99.9%): [896.522, 1028.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.691 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.998), stdev = 1.738
[info]   CI (99.9%): [≈ 0, 7.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.666 ±(99.9%) 4.793 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 2.863), stdev = 1.245
[info]   CI (99.9%): [≈ 0, 5.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 7.000), stdev = 1.414
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 56.24% complete, ETA 00:49:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2051580.998 ops/s
[info] # Warmup Iteration   2: 2249032.871 ops/s
[info] # Warmup Iteration   3: 2259094.819 ops/s
[info] # Warmup Iteration   4: 2256376.144 ops/s
[info] # Warmup Iteration   5: 2138664.000 ops/s
[info] Iteration   1: 2257970.746 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2258767.680 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2259049.134 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2257178.388 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2258530.605 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc":
[info]   2258299.311 ±(99.9%) 2855.406 ops/s [Average]
[info]   (min, avg, max) = (2257178.388, 2258299.311, 2259049.134), stdev = 741.540
[info]   CI (99.9%): [2255443.905, 2261154.716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 56.47% complete, ETA 00:49:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 137619.911 ops/s
[info] # Warmup Iteration   2: 236058.306 ops/s
[info] # Warmup Iteration   3: 239829.389 ops/s
[info] # Warmup Iteration   4: 237871.743 ops/s
[info] # Warmup Iteration   5: 237484.338 ops/s
[info] Iteration   1: 233027.511 ops/s
[info]                  ·gc.alloc.rate:            1506.581 MB/sec
[info]                  ·gc.alloc.rate.norm:       10176.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.131 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9146.298 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 236707.466 ops/s
[info]                  ·gc.alloc.rate:                   1530.137 MB/sec
[info]                  ·gc.alloc.rate.norm:              10176.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.960 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        9004.359 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 4.429 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 238970.347 ops/s
[info]                  ·gc.alloc.rate:                                  1545.161 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10176.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.090 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.590 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2040.448 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       13437.826 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                26.323 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   4: 240266.880 ops/s
[info]                  ·gc.alloc.rate:                                  1553.334 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10176.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.026 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.172 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.783 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8927.690 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 240284.259 ops/s
[info]                  ·gc.alloc.rate:            1553.424 MB/sec
[info]                  ·gc.alloc.rate.norm:       10176.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.738 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8926.873 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson":
[info]   237851.292 ±(99.9%) 11803.320 ops/s [Average]
[info]   (min, avg, max) = (233027.511, 237851.292, 240284.259), stdev = 3065.285
[info]   CI (99.9%): [226047.972, 249654.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1537.727 ±(99.9%) 76.359 MB/sec [Average]
[info]   (min, avg, max) = (1506.581, 1537.727, 1553.424), stdev = 19.830
[info]   CI (99.9%): [1461.369, 1614.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   10176.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10176.002, 10176.002, 10176.002), stdev = 0.001
[info]   CI (99.9%): [10176.002, 10176.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.023 ±(99.9%) 0.149 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.090), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.152 ±(99.9%) 0.984 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.152, 0.590), stdev = 0.256
[info]   CI (99.9%): [≈ 0, 1.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1494.812 ±(99.9%) 1174.642 MB/sec [Average]
[info]   (min, avg, max) = (1353.960, 1494.812, 2040.448), stdev = 305.051
[info]   CI (99.9%): [320.170, 2669.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   9888.609 ±(99.9%) 7647.714 B/op [Average]
[info]   (min, avg, max) = (8926.873, 9888.609, 13437.826), stdev = 1986.087
[info]   CI (99.9%): [2240.895, 17536.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.689 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.997), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   6.150 ±(99.9%) 44.046 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.150, 26.323), stdev = 11.439
[info]   CI (99.9%): [≈ 0, 50.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.600, 10.000), stdev = 3.782
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 56.71% complete, ETA 00:48:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 47565.108 ops/s
[info] # Warmup Iteration   2: 69721.186 ops/s
[info] # Warmup Iteration   3: 69230.361 ops/s
[info] # Warmup Iteration   4: 71491.694 ops/s
[info] # Warmup Iteration   5: 70938.360 ops/s
[info] Iteration   1: 69447.403 ops/s
[info]                  ·gc.alloc.rate:            1395.189 MB/sec
[info]                  ·gc.alloc.rate.norm:       31624.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.686 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 30705.936 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 71210.538 ops/s
[info]                  ·gc.alloc.rate:            1430.624 MB/sec
[info]                  ·gc.alloc.rate.norm:       31624.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.688 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 29945.433 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 70327.701 ops/s
[info]                  ·gc.alloc.rate:                   1413.004 MB/sec
[info]                  ·gc.alloc.rate.norm:              31624.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2032.199 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        45482.021 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 89.444 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   4: 70335.205 ops/s
[info]                  ·gc.alloc.rate:                                  1413.306 MB/sec
[info]                  ·gc.alloc.rate.norm:                             31624.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.189 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.238 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.929 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       30496.766 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 70788.243 ops/s
[info]                  ·gc.alloc.rate:            1422.607 MB/sec
[info]                  ·gc.alloc.rate.norm:       31624.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1363.140 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 30302.069 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce":
[info]   70421.818 ±(99.9%) 2526.644 ops/s [Average]
[info]   (min, avg, max) = (69447.403, 70421.818, 71210.538), stdev = 656.161
[info]   CI (99.9%): [67895.174, 72948.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate":
[info]   1414.946 ±(99.9%) 50.987 MB/sec [Average]
[info]   (min, avg, max) = (1395.189, 1414.946, 1430.624), stdev = 13.241
[info]   CI (99.9%): [1363.959, 1465.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   31624.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (31624.006, 31624.006, 31624.006), stdev = 0.001
[info]   CI (99.9%): [31624.005, 31624.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.038 ±(99.9%) 0.326 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.038, 0.189), stdev = 0.085
[info]   CI (99.9%): [≈ 0, 0.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.848 ±(99.9%) 7.298 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.848, 4.238), stdev = 1.895
[info]   CI (99.9%): [≈ 0, 8.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1493.528 ±(99.9%) 1159.641 MB/sec [Average]
[info]   (min, avg, max) = (1354.686, 1493.528, 2032.199), stdev = 301.155
[info]   CI (99.9%): [333.888, 2653.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   33386.445 ±(99.9%) 26058.952 B/op [Average]
[info]   (min, avg, max) = (29945.433, 33386.445, 45482.021), stdev = 6767.427
[info]   CI (99.9%): [7327.493, 59445.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   17.889 ±(99.9%) 154.027 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17.889, 89.444), stdev = 40.000
[info]   CI (99.9%): [≈ 0, 171.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.800, 18.000), stdev = 6.140
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 56.94% complete, ETA 00:48:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 41076.406 ops/s
[info] # Warmup Iteration   2: 76302.108 ops/s
[info] # Warmup Iteration   3: 77607.652 ops/s
[info] # Warmup Iteration   4: 76853.883 ops/s
[info] # Warmup Iteration   5: 77005.908 ops/s
[info] Iteration   1: 75442.101 ops/s
[info]                  ·gc.alloc.rate:            869.591 MB/sec
[info]                  ·gc.alloc.rate.norm:       18144.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.408 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 28238.856 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 76384.077 ops/s
[info]                  ·gc.alloc.rate:            880.368 MB/sec
[info]                  ·gc.alloc.rate.norm:       18144.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.626 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13944.961 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 76917.008 ops/s
[info]                  ·gc.alloc.rate:            886.733 MB/sec
[info]                  ·gc.alloc.rate.norm:       18144.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.822 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13848.886 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 76329.313 ops/s
[info]                  ·gc.alloc.rate:            879.909 MB/sec
[info]                  ·gc.alloc.rate.norm:       18144.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.503 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 27909.650 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 77495.965 ops/s
[info]                  ·gc.alloc.rate:            893.449 MB/sec
[info]                  ·gc.alloc.rate.norm:       18144.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.845 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13745.252 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala":
[info]   76513.693 ±(99.9%) 2936.749 ops/s [Average]
[info]   (min, avg, max) = (75442.101, 76513.693, 77495.965), stdev = 762.664
[info]   CI (99.9%): [73576.944, 79450.442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   882.010 ±(99.9%) 34.144 MB/sec [Average]
[info]   (min, avg, max) = (869.591, 882.010, 893.449), stdev = 8.867
[info]   CI (99.9%): [847.866, 916.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   18144.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (18144.005, 18144.005, 18144.006), stdev = 0.001
[info]   CI (99.9%): [18144.005, 18144.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   947.441 ±(99.9%) 1427.199 MB/sec [Average]
[info]   (min, avg, max) = (676.626, 947.441, 1353.503), stdev = 370.639
[info]   CI (99.9%): [≈ 0, 2374.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   19537.521 ±(99.9%) 30012.396 B/op [Average]
[info]   (min, avg, max) = (13745.252, 19537.521, 28238.856), stdev = 7794.124
[info]   CI (99.9%): [≈ 0, 49549.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.800, 10.000), stdev = 2.950
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 57.18% complete, ETA 00:48:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 81481.677 ops/s
[info] # Warmup Iteration   2: 100137.659 ops/s
[info] # Warmup Iteration   3: 101585.181 ops/s
[info] # Warmup Iteration   4: 101594.271 ops/s
[info] # Warmup Iteration   5: 103343.423 ops/s
[info] Iteration   1: 102646.456 ops/s
[info]                  ·gc.alloc.rate:            1081.233 MB/sec
[info]                  ·gc.alloc.rate.norm:       16576.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.115 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 20774.803 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 100864.184 ops/s
[info]                  ·gc.alloc.rate:            1062.177 MB/sec
[info]                  ·gc.alloc.rate.norm:       16576.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.387 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10571.098 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 101228.429 ops/s
[info]                  ·gc.alloc.rate:            1065.957 MB/sec
[info]                  ·gc.alloc.rate.norm:       16576.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.694 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 21065.975 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 101134.990 ops/s
[info]                  ·gc.alloc.rate:            1065.013 MB/sec
[info]                  ·gc.alloc.rate.norm:       16576.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.390 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10542.984 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 100879.151 ops/s
[info]                  ·gc.alloc.rate:            1062.760 MB/sec
[info]                  ·gc.alloc.rate.norm:       16576.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.316 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 21139.053 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala":
[info]   101350.642 ±(99.9%) 2855.403 ops/s [Average]
[info]   (min, avg, max) = (100864.184, 101350.642, 102646.456), stdev = 741.539
[info]   CI (99.9%): [98495.239, 104206.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1067.428 ±(99.9%) 30.316 MB/sec [Average]
[info]   (min, avg, max) = (1062.177, 1067.428, 1081.233), stdev = 7.873
[info]   CI (99.9%): [1037.112, 1097.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   16576.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16576.004, 16576.004, 16576.004), stdev = 0.001
[info]   CI (99.9%): [16576.004, 16576.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1083.981 ±(99.9%) 1429.229 MB/sec [Average]
[info]   (min, avg, max) = (677.387, 1083.981, 1355.316), stdev = 371.166
[info]   CI (99.9%): [≈ 0, 2513.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   16818.783 ±(99.9%) 22017.189 B/op [Average]
[info]   (min, avg, max) = (10542.984, 16818.783, 21139.053), stdev = 5717.794
[info]   CI (99.9%): [≈ 0, 38835.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 7.000), stdev = 1.789
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 57.41% complete, ETA 00:48:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17657.934 ops/s
[info] # Warmup Iteration   2: 35842.684 ops/s
[info] # Warmup Iteration   3: 36634.393 ops/s
[info] # Warmup Iteration   4: 36438.548 ops/s
[info] # Warmup Iteration   5: 36686.592 ops/s
[info] Iteration   1: 37161.861 ops/s
[info]                  ·gc.alloc.rate:                   1855.755 MB/sec
[info]                  ·gc.alloc.rate.norm:              78600.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1352.779 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        57296.614 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 28.211 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 36932.298 ops/s
[info]                  ·gc.alloc.rate:                                  1844.081 MB/sec
[info]                  ·gc.alloc.rate.norm:                             78600.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.112 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.780 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2039.282 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       86920.050 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                198.707 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 37162.286 ops/s
[info]                  ·gc.alloc.rate:                                  1855.831 MB/sec
[info]                  ·gc.alloc.rate.norm:                             78600.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.025 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.054 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.129 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       86575.011 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 37190.926 ops/s
[info]                  ·gc.alloc.rate:            1857.169 MB/sec
[info]                  ·gc.alloc.rate.norm:       78600.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.118 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 86512.171 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 37196.033 ops/s
[info]                  ·gc.alloc.rate:                                  1857.913 MB/sec
[info]                  ·gc.alloc.rate.norm:                             78600.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.092 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1363.108 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       57667.029 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson":
[info]   37128.681 ±(99.9%) 427.088 ops/s [Average]
[info]   (min, avg, max) = (36932.298, 37128.681, 37196.033), stdev = 110.913
[info]   CI (99.9%): [36701.593, 37555.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1854.150 ±(99.9%) 21.957 MB/sec [Average]
[info]   (min, avg, max) = (1844.081, 1854.150, 1857.913), stdev = 5.702
[info]   CI (99.9%): [1832.193, 1876.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   78600.011 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (78600.011, 78600.011, 78600.012), stdev = 0.001
[info]   CI (99.9%): [78600.010, 78600.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.028 ±(99.9%) 0.186 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.112), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.185 ±(99.9%) 7.926 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.185, 4.780), stdev = 2.058
[info]   CI (99.9%): [≈ 0, 9.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1768.684 ±(99.9%) 1443.897 MB/sec [Average]
[info]   (min, avg, max) = (1352.779, 1768.684, 2044.129), stdev = 374.975
[info]   CI (99.9%): [324.787, 3212.580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   74994.175 ±(99.9%) 61563.359 B/op [Average]
[info]   (min, avg, max) = (57296.614, 74994.175, 86920.050), stdev = 15987.809
[info]   CI (99.9%): [13430.816, 136557.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.821 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.662), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   45.384 ±(99.9%) 333.375 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 45.384, 198.707), stdev = 86.576
[info]   CI (99.9%): [≈ 0, 378.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.400, 9.000), stdev = 2.966
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 57.65% complete, ETA 00:47:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 97771.834 ops/s
[info] # Warmup Iteration   2: 125078.865 ops/s
[info] # Warmup Iteration   3: 125548.257 ops/s
[info] # Warmup Iteration   4: 128771.357 ops/s
[info] # Warmup Iteration   5: 131158.080 ops/s
[info] Iteration   1: 130667.153 ops/s
[info]                  ·gc.alloc.rate:      579.798 MB/sec
[info]                  ·gc.alloc.rate.norm: 6984.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 125056.727 ops/s
[info]                  ·gc.alloc.rate:            554.931 MB/sec
[info]                  ·gc.alloc.rate.norm:       6984.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.446 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8525.894 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 129976.134 ops/s
[info]                  ·gc.alloc.rate:                   576.700 MB/sec
[info]                  ·gc.alloc.rate.norm:              6984.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.710 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        8195.151 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 8.066 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 129081.489 ops/s
[info]                  ·gc.alloc.rate:            572.746 MB/sec
[info]                  ·gc.alloc.rate.norm:       6984.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.395 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8260.085 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 129251.355 ops/s
[info]                  ·gc.alloc.rate:                   573.491 MB/sec
[info]                  ·gc.alloc.rate.norm:              6984.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.713 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        8241.048 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 8.111 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce":
[info]   128806.572 ±(99.9%) 8428.511 ops/s [Average]
[info]   (min, avg, max) = (125056.727, 128806.572, 130667.153), stdev = 2188.857
[info]   CI (99.9%): [120378.061, 137235.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate":
[info]   571.533 ±(99.9%) 37.330 MB/sec [Average]
[info]   (min, avg, max) = (554.931, 571.533, 579.798), stdev = 9.695
[info]   CI (99.9%): [534.203, 608.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   6984.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6984.003, 6984.003, 6984.003), stdev = 0.001
[info]   CI (99.9%): [6984.003, 6984.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   541.653 ±(99.9%) 1165.949 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 541.653, 677.446), stdev = 302.793
[info]   CI (99.9%): [≈ 0, 1707.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   6644.436 ±(99.9%) 14311.324 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6644.436, 8525.894), stdev = 3716.605
[info]   CI (99.9%): [≈ 0, 20955.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   3.235 ±(99.9%) 17.060 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.235, 8.111), stdev = 4.430
[info]   CI (99.9%): [≈ 0, 20.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.400, 5.000), stdev = 1.949
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 57.88% complete, ETA 00:47:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 125250.782 ops/s
[info] # Warmup Iteration   2: 179132.763 ops/s
[info] # Warmup Iteration   3: 176485.838 ops/s
[info] # Warmup Iteration   4: 175752.976 ops/s
[info] # Warmup Iteration   5: 175539.795 ops/s
[info] Iteration   1: 173315.629 ops/s
[info]                  ·gc.alloc.rate:            257.226 MB/sec
[info]                  ·gc.alloc.rate.norm:       2336.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.763 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6146.032 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 176607.827 ops/s
[info]                  ·gc.alloc.rate:      262.080 MB/sec
[info]                  ·gc.alloc.rate.norm: 2336.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 176722.972 ops/s
[info]                  ·gc.alloc.rate:      262.253 MB/sec
[info]                  ·gc.alloc.rate.norm: 2336.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 175107.558 ops/s
[info]                  ·gc.alloc.rate:            259.865 MB/sec
[info]                  ·gc.alloc.rate.norm:       2336.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.667 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6082.762 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 177252.079 ops/s
[info]                  ·gc.alloc.rate:      263.112 MB/sec
[info]                  ·gc.alloc.rate.norm: 2336.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala":
[info]   175801.213 ±(99.9%) 6168.415 ops/s [Average]
[info]   (min, avg, max) = (173315.629, 175801.213, 177252.079), stdev = 1601.918
[info]   CI (99.9%): [169632.797, 181969.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   260.907 ±(99.9%) 9.170 MB/sec [Average]
[info]   (min, avg, max) = (257.226, 260.907, 263.112), stdev = 2.381
[info]   CI (99.9%): [251.737, 270.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   2336.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2336.002, 2336.002, 2336.002), stdev = 0.001
[info]   CI (99.9%): [2336.002, 2336.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   270.686 ±(99.9%) 1427.250 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 270.686, 676.763), stdev = 370.652
[info]   CI (99.9%): [≈ 0, 1697.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   2445.759 ±(99.9%) 12896.068 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2445.759, 6146.032), stdev = 3349.068
[info]   CI (99.9%): [≈ 0, 15341.827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 5.000), stdev = 2.490
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 58.12% complete, ETA 00:47:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 668746.735 ops/s
[info] # Warmup Iteration   2: 743009.320 ops/s
[info] # Warmup Iteration   3: 747175.744 ops/s
[info] # Warmup Iteration   4: 746365.289 ops/s
[info] # Warmup Iteration   5: 743759.665 ops/s
[info] Iteration   1: 748075.814 ops/s
[info]                  ·gc.alloc.rate:            927.774 MB/sec
[info]                  ·gc.alloc.rate.norm:       1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.873 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2850.599 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 748485.125 ops/s
[info]                  ·gc.alloc.rate:            928.269 MB/sec
[info]                  ·gc.alloc.rate.norm:       1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.422 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1424.509 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 736665.209 ops/s
[info]                  ·gc.alloc.rate:            913.734 MB/sec
[info]                  ·gc.alloc.rate.norm:       1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.513 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1447.364 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 675077.970 ops/s
[info]                  ·gc.alloc.rate:            837.321 MB/sec
[info]                  ·gc.alloc.rate.norm:       1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.987 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3158.806 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 743880.296 ops/s
[info]                  ·gc.alloc.rate:            922.600 MB/sec
[info]                  ·gc.alloc.rate.norm:       1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.450 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1433.322 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala":
[info]   730436.883 ±(99.9%) 120559.559 ops/s [Average]
[info]   (min, avg, max) = (675077.970, 730436.883, 748485.125), stdev = 31308.935
[info]   CI (99.9%): [609877.324, 850996.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   905.940 ±(99.9%) 149.411 MB/sec [Average]
[info]   (min, avg, max) = (837.321, 905.940, 928.269), stdev = 38.801
[info]   CI (99.9%): [756.529, 1055.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1952.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1952.001, 1952.001, 1952.001), stdev = 0.001
[info]   CI (99.9%): [1952.000, 1952.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   948.449 ±(99.9%) 1428.837 MB/sec [Average]
[info]   (min, avg, max) = (677.422, 948.449, 1354.987), stdev = 371.064
[info]   CI (99.9%): [≈ 0, 2377.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   2062.920 ±(99.9%) 3337.130 B/op [Average]
[info]   (min, avg, max) = (1424.509, 2062.920, 3158.806), stdev = 866.642
[info]   CI (99.9%): [≈ 0, 5400.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 7.000), stdev = 1.643
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 58.35% complete, ETA 00:47:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 703526.697 ops/s
[info] # Warmup Iteration   2: 751812.688 ops/s
[info] # Warmup Iteration   3: 762038.394 ops/s
[info] # Warmup Iteration   4: 754426.086 ops/s
[info] # Warmup Iteration   5: 752539.537 ops/s
[info] Iteration   1: 758491.861 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 747188.875 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 754927.754 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 751690.234 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 756070.131 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc":
[info]   753673.771 ±(99.9%) 16841.594 ops/s [Average]
[info]   (min, avg, max) = (747188.875, 753673.771, 758491.861), stdev = 4373.708
[info]   CI (99.9%): [736832.177, 770515.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 58.59% complete, ETA 00:46:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 138977.576 ops/s
[info] # Warmup Iteration   2: 177777.171 ops/s
[info] # Warmup Iteration   3: 186609.138 ops/s
[info] # Warmup Iteration   4: 186447.506 ops/s
[info] # Warmup Iteration   5: 187733.071 ops/s
[info] Iteration   1: 188522.423 ops/s
[info]                  ·gc.alloc.rate:            614.180 MB/sec
[info]                  ·gc.alloc.rate.norm:       5128.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.722 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5650.183 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 187299.792 ops/s
[info]                  ·gc.alloc.rate:            610.406 MB/sec
[info]                  ·gc.alloc.rate.norm:       5128.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.961 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5687.131 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 190479.754 ops/s
[info]                  ·gc.alloc.rate:            620.549 MB/sec
[info]                  ·gc.alloc.rate.norm:       5128.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.712 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5592.112 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 190233.418 ops/s
[info]                  ·gc.alloc.rate:      619.756 MB/sec
[info]                  ·gc.alloc.rate.norm: 5128.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 191443.152 ops/s
[info]                  ·gc.alloc.rate:            623.701 MB/sec
[info]                  ·gc.alloc.rate.norm:       5128.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.714 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5563.870 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson":
[info]   189595.708 ±(99.9%) 6392.658 ops/s [Average]
[info]   (min, avg, max) = (187299.792, 189595.708, 191443.152), stdev = 1660.153
[info]   CI (99.9%): [183203.050, 195988.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   617.718 ±(99.9%) 20.552 MB/sec [Average]
[info]   (min, avg, max) = (610.406, 617.718, 623.701), stdev = 5.337
[info]   CI (99.9%): [597.166, 638.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5128.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5128.002, 5128.002, 5128.002), stdev = 0.001
[info]   CI (99.9%): [5128.002, 5128.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   541.422 ±(99.9%) 1165.451 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 541.422, 676.961), stdev = 302.664
[info]   CI (99.9%): [≈ 0, 1706.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   4498.659 ±(99.9%) 9685.483 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4498.659, 5687.131), stdev = 2515.289
[info]   CI (99.9%): [≈ 0, 14184.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.800, 5.000), stdev = 2.168
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 58.82% complete, ETA 00:46:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 90483.855 ops/s
[info] # Warmup Iteration   2: 126807.548 ops/s
[info] # Warmup Iteration   3: 124168.652 ops/s
[info] # Warmup Iteration   4: 127826.736 ops/s
[info] # Warmup Iteration   5: 128065.021 ops/s
[info] Iteration   1: 126378.164 ops/s
[info]                  ·gc.alloc.rate:            1556.225 MB/sec
[info]                  ·gc.alloc.rate.norm:       19384.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2033.951 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 25334.455 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   2: 126498.938 ops/s
[info]                  ·gc.alloc.rate:            1557.890 MB/sec
[info]                  ·gc.alloc.rate.norm:       19384.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.120 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16873.484 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 127570.343 ops/s
[info]                  ·gc.alloc.rate:                                  1570.900 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19384.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.035 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.437 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1359.329 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       16773.337 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                41.091 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 127135.992 ops/s
[info]                  ·gc.alloc.rate:                                  1565.997 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19384.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.102 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.257 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.596 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       25308.123 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 127641.391 ops/s
[info]                  ·gc.alloc.rate:                                  1572.303 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19384.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.034 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1363.032 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       16804.024 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce":
[info]   127044.966 ±(99.9%) 2264.036 ops/s [Average]
[info]   (min, avg, max) = (126378.164, 127044.966, 127641.391), stdev = 587.963
[info]   CI (99.9%): [124780.930, 129309.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate":
[info]   1564.663 ±(99.9%) 28.305 MB/sec [Average]
[info]   (min, avg, max) = (1556.225, 1564.663, 1572.303), stdev = 7.351
[info]   CI (99.9%): [1536.358, 1592.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   19384.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (19384.003, 19384.003, 19384.003), stdev = 0.001
[info]   CI (99.9%): [19384.003, 19384.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.028 ±(99.9%) 0.169 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.102), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.346 ±(99.9%) 2.087 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.346, 1.257), stdev = 0.542
[info]   CI (99.9%): [≈ 0, 2.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1631.405 ±(99.9%) 1433.816 MB/sec [Average]
[info]   (min, avg, max) = (1356.120, 1631.405, 2044.596), stdev = 372.358
[info]   CI (99.9%): [197.589, 3065.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   20218.685 ±(99.9%) 17936.954 B/op [Average]
[info]   (min, avg, max) = (16773.337, 20218.685, 25334.455), stdev = 4658.170
[info]   CI (99.9%): [2281.731, 38155.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   8.218 ±(99.9%) 70.761 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.218, 41.091), stdev = 18.376
[info]   CI (99.9%): [≈ 0, 78.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.400, 17.000), stdev = 5.595
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 59.06% complete, ETA 00:46:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 103353.566 ops/s
[info] # Warmup Iteration   2: 160003.821 ops/s
[info] # Warmup Iteration   3: 161528.777 ops/s
[info] # Warmup Iteration   4: 161672.849 ops/s
[info] # Warmup Iteration   5: 160515.270 ops/s
[info] Iteration   1: 160034.605 ops/s
[info]                  ·gc.alloc.rate:            854.188 MB/sec
[info]                  ·gc.alloc.rate.norm:       8400.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.059 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13325.525 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 161546.684 ops/s
[info]                  ·gc.alloc.rate:            862.075 MB/sec
[info]                  ·gc.alloc.rate.norm:       8400.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.383 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6600.369 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 161500.128 ops/s
[info]                  ·gc.alloc.rate:            861.881 MB/sec
[info]                  ·gc.alloc.rate.norm:       8400.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.427 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6602.289 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 161746.481 ops/s
[info]                  ·gc.alloc.rate:                   863.208 MB/sec
[info]                  ·gc.alloc.rate.norm:              8400.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.755 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        6585.604 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 6.482 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 160987.823 ops/s
[info]                  ·gc.alloc.rate:            859.402 MB/sec
[info]                  ·gc.alloc.rate.norm:       8400.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.262 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13246.651 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala":
[info]   161163.144 ±(99.9%) 2657.558 ops/s [Average]
[info]   (min, avg, max) = (160034.605, 161163.144, 161746.481), stdev = 690.159
[info]   CI (99.9%): [158505.586, 163820.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   860.151 ±(99.9%) 13.905 MB/sec [Average]
[info]   (min, avg, max) = (854.188, 860.151, 863.208), stdev = 3.611
[info]   CI (99.9%): [846.245, 874.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   8400.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8400.003, 8400.003, 8400.003), stdev = 0.001
[info]   CI (99.9%): [8400.002, 8400.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   948.377 ±(99.9%) 1429.901 MB/sec [Average]
[info]   (min, avg, max) = (676.755, 948.377, 1355.262), stdev = 371.341
[info]   CI (99.9%): [≈ 0, 2378.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   9272.088 ±(99.9%) 14110.207 B/op [Average]
[info]   (min, avg, max) = (6585.604, 9272.088, 13325.525), stdev = 3664.376
[info]   CI (99.9%): [≈ 0, 23382.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.296 ±(99.9%) 11.162 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.296, 6.482), stdev = 2.899
[info]   CI (99.9%): [≈ 0, 12.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.600, 10.000), stdev = 2.702
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 59.29% complete, ETA 00:46:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 405486.955 ops/s
[info] # Warmup Iteration   2: 439648.423 ops/s
[info] # Warmup Iteration   3: 444798.040 ops/s
[info] # Warmup Iteration   4: 445232.350 ops/s
[info] # Warmup Iteration   5: 443641.981 ops/s
[info] Iteration   1: 444546.410 ops/s
[info]                  ·gc.alloc.rate:            863.003 MB/sec
[info]                  ·gc.alloc.rate.norm:       3056.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.980 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2400.810 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 445359.128 ops/s
[info]                  ·gc.alloc.rate:            864.643 MB/sec
[info]                  ·gc.alloc.rate.norm:       3056.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.026 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2396.422 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 444666.541 ops/s
[info]                  ·gc.alloc.rate:            863.269 MB/sec
[info]                  ·gc.alloc.rate.norm:       3056.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.023 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4800.367 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 445924.368 ops/s
[info]                  ·gc.alloc.rate:            865.697 MB/sec
[info]                  ·gc.alloc.rate.norm:       3056.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.975 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2393.322 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 444772.697 ops/s
[info]                  ·gc.alloc.rate:            863.526 MB/sec
[info]                  ·gc.alloc.rate.norm:       3056.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.047 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2399.595 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala":
[info]   445053.829 ±(99.9%) 2226.681 ops/s [Average]
[info]   (min, avg, max) = (444546.410, 445053.829, 445924.368), stdev = 578.262
[info]   CI (99.9%): [442827.148, 447280.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   864.028 ±(99.9%) 4.323 MB/sec [Average]
[info]   (min, avg, max) = (863.003, 864.028, 865.697), stdev = 1.123
[info]   CI (99.9%): [859.704, 868.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3056.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3056.001, 3056.001, 3056.001), stdev = 0.001
[info]   CI (99.9%): [3056.001, 3056.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   813.610 ±(99.9%) 1167.585 MB/sec [Average]
[info]   (min, avg, max) = (677.975, 813.610, 1356.023), stdev = 303.218
[info]   CI (99.9%): [≈ 0, 1981.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   2878.103 ±(99.9%) 4137.833 B/op [Average]
[info]   (min, avg, max) = (2393.322, 2878.103, 4800.367), stdev = 1074.582
[info]   CI (99.9%): [≈ 0, 7015.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 7.000), stdev = 1.643
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 59.53% complete, ETA 00:45:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28058.756 ops/s
[info] # Warmup Iteration   2: 61487.989 ops/s
[info] # Warmup Iteration   3: 62007.958 ops/s
[info] # Warmup Iteration   4: 61694.890 ops/s
[info] # Warmup Iteration   5: 62180.793 ops/s
[info] Iteration   1: 63520.080 ops/s
[info]                  ·gc.alloc.rate:                                  2682.551 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66448.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.040 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2726.394 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       67534.005 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 63862.895 ops/s
[info]                  ·gc.alloc.rate:            2696.501 MB/sec
[info]                  ·gc.alloc.rate.norm:       66448.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2726.027 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 67175.580 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 63594.710 ops/s
[info]                  ·gc.alloc.rate:            2684.789 MB/sec
[info]                  ·gc.alloc.rate.norm:       66448.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2725.580 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 67457.560 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 63558.593 ops/s
[info]                  ·gc.alloc.rate:            2682.929 MB/sec
[info]                  ·gc.alloc.rate.norm:       66448.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2725.233 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 67495.761 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 63767.147 ops/s
[info]                  ·gc.alloc.rate:            2691.909 MB/sec
[info]                  ·gc.alloc.rate.norm:       66448.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.110 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 50457.521 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson":
[info]   63660.685 ±(99.9%) 567.132 ops/s [Average]
[info]   (min, avg, max) = (63520.080, 63660.685, 63862.895), stdev = 147.282
[info]   CI (99.9%): [63093.553, 64227.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2687.736 ±(99.9%) 23.809 MB/sec [Average]
[info]   (min, avg, max) = (2682.551, 2687.736, 2696.501), stdev = 6.183
[info]   CI (99.9%): [2663.927, 2711.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   66448.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (66448.006, 66448.007, 66448.007), stdev = 0.001
[info]   CI (99.9%): [66448.006, 66448.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.008 ±(99.9%) 0.070 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.040), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.201 ±(99.9%) 1.726 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.201, 1.003), stdev = 0.448
[info]   CI (99.9%): [≈ 0, 1.927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2589.469 ±(99.9%) 1173.926 MB/sec [Average]
[info]   (min, avg, max) = (2044.110, 2589.469, 2726.394), stdev = 304.865
[info]   CI (99.9%): [1415.543, 3763.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   64024.085 ±(99.9%) 29208.118 B/op [Average]
[info]   (min, avg, max) = (50457.521, 64024.085, 67534.005), stdev = 7585.256
[info]   CI (99.9%): [34815.967, 93232.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 59.76% complete, ETA 00:45:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 141378.176 ops/s
[info] # Warmup Iteration   2: 177066.004 ops/s
[info] # Warmup Iteration   3: 182840.682 ops/s
[info] # Warmup Iteration   4: 178560.181 ops/s
[info] # Warmup Iteration   5: 183108.411 ops/s
[info] Iteration   1: 182466.599 ops/s
[info]                  ·gc.alloc.rate:            627.788 MB/sec
[info]                  ·gc.alloc.rate.norm:       5416.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.009 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5849.267 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 183246.610 ops/s
[info]                  ·gc.alloc.rate:            630.518 MB/sec
[info]                  ·gc.alloc.rate.norm:       5416.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.049 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5824.278 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 183426.222 ops/s
[info]                  ·gc.alloc.rate:            631.127 MB/sec
[info]                  ·gc.alloc.rate.norm:       5416.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.034 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5818.532 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 183286.194 ops/s
[info]                  ·gc.alloc.rate:            630.745 MB/sec
[info]                  ·gc.alloc.rate.norm:       5416.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.123 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5822.817 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 183554.938 ops/s
[info]                  ·gc.alloc.rate:            631.763 MB/sec
[info]                  ·gc.alloc.rate.norm:       5416.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.233 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5814.380 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce":
[info]   183196.113 ±(99.9%) 1638.856 ops/s [Average]
[info]   (min, avg, max) = (182466.599, 183196.113, 183554.938), stdev = 425.606
[info]   CI (99.9%): [181557.257, 184834.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate":
[info]   630.388 ±(99.9%) 5.884 MB/sec [Average]
[info]   (min, avg, max) = (627.788, 630.388, 631.763), stdev = 1.528
[info]   CI (99.9%): [624.504, 636.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5416.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5416.002, 5416.002, 5416.002), stdev = 0.001
[info]   CI (99.9%): [5416.002, 5416.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   678.090 ±(99.9%) 0.348 MB/sec [Average]
[info]   (min, avg, max) = (678.009, 678.090, 678.233), stdev = 0.090
[info]   CI (99.9%): [677.741, 678.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   5825.855 ±(99.9%) 52.557 B/op [Average]
[info]   (min, avg, max) = (5814.380, 5825.855, 5849.267), stdev = 13.649
[info]   CI (99.9%): [5773.298, 5878.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 60.00% complete, ETA 00:45:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 196565.885 ops/s
[info] # Warmup Iteration   2: 307047.600 ops/s
[info] # Warmup Iteration   3: 305738.862 ops/s
[info] # Warmup Iteration   4: 307327.211 ops/s
[info] # Warmup Iteration   5: 303286.820 ops/s
[info] Iteration   1: 306641.766 ops/s
[info]                  ·gc.alloc.rate:      302.350 MB/sec
[info]                  ·gc.alloc.rate.norm: 1552.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 307425.020 ops/s
[info]                  ·gc.alloc.rate:      303.112 MB/sec
[info]                  ·gc.alloc.rate.norm: 1552.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 305377.008 ops/s
[info]                  ·gc.alloc.rate:            301.234 MB/sec
[info]                  ·gc.alloc.rate.norm:       1552.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.710 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3491.660 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 306975.151 ops/s
[info]                  ·gc.alloc.rate:      302.684 MB/sec
[info]                  ·gc.alloc.rate.norm: 1552.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 304569.528 ops/s
[info]                  ·gc.alloc.rate:            300.374 MB/sec
[info]                  ·gc.alloc.rate.norm:       1552.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.527 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3500.715 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala":
[info]   306197.695 ±(99.9%) 4569.311 ops/s [Average]
[info]   (min, avg, max) = (304569.528, 306197.695, 307425.020), stdev = 1186.636
[info]   CI (99.9%): [301628.383, 310767.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   301.951 ±(99.9%) 4.325 MB/sec [Average]
[info]   (min, avg, max) = (300.374, 301.951, 303.112), stdev = 1.123
[info]   CI (99.9%): [297.626, 306.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1552.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1552.001, 1552.001, 1552.001), stdev = 0.001
[info]   CI (99.9%): [1552.001, 1552.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   271.047 ±(99.9%) 1429.155 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 271.047, 677.710), stdev = 371.147
[info]   CI (99.9%): [≈ 0, 1700.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1398.475 ±(99.9%) 7373.765 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1398.475, 3500.715), stdev = 1914.943
[info]   CI (99.9%): [≈ 0, 8772.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 5.000), stdev = 2.739
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 60.24% complete, ETA 00:44:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1362715.916 ops/s
[info] # Warmup Iteration   2: 1521090.041 ops/s
[info] # Warmup Iteration   3: 1504787.750 ops/s
[info] # Warmup Iteration   4: 1539693.978 ops/s
[info] # Warmup Iteration   5: 1539637.894 ops/s
[info] Iteration   1: 1549965.417 ops/s
[info]                  ·gc.alloc.rate:                   1150.358 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             677.544 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        687.935 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.676 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1541521.013 ops/s
[info]                  ·gc.alloc.rate:            1143.942 MB/sec
[info]                  ·gc.alloc.rate.norm:       1168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.576 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1384.085 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 1524111.957 ops/s
[info]                  ·gc.alloc.rate:            1130.947 MB/sec
[info]                  ·gc.alloc.rate.norm:       1168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.819 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1399.207 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 1542657.207 ops/s
[info]                  ·gc.alloc.rate:            1146.140 MB/sec
[info]                  ·gc.alloc.rate.norm:       1168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1352.240 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1378.031 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 1545718.364 ops/s
[info]                  ·gc.alloc.rate:                   1146.923 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             677.343 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        689.791 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 4.070 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala":
[info]   1540794.792 ±(99.9%) 38053.973 ops/s [Average]
[info]   (min, avg, max) = (1524111.957, 1540794.792, 1549965.417), stdev = 9882.496
[info]   CI (99.9%): [1502740.819, 1578848.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1143.662 ±(99.9%) 28.774 MB/sec [Average]
[info]   (min, avg, max) = (1130.947, 1143.662, 1150.358), stdev = 7.473
[info]   CI (99.9%): [1114.888, 1172.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1168.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1168.000, 1168.000, 1168.000), stdev = 0.001
[info]   CI (99.9%): [1168.000, 1168.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1083.504 ±(99.9%) 1427.369 MB/sec [Average]
[info]   (min, avg, max) = (677.343, 1083.504, 1355.576), stdev = 370.683
[info]   CI (99.9%): [≈ 0, 2510.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1107.810 ±(99.9%) 1472.958 B/op [Average]
[info]   (min, avg, max) = (687.935, 1107.810, 1399.207), stdev = 382.523
[info]   CI (99.9%): [≈ 0, 2580.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.949 ±(99.9%) 6.811 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.949, 4.070), stdev = 1.769
[info]   CI (99.9%): [≈ 0, 7.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 8.000), stdev = 2.408
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 60.47% complete, ETA 00:44:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1456222.732 ops/s
[info] # Warmup Iteration   2: 1616232.617 ops/s
[info] # Warmup Iteration   3: 1538846.281 ops/s
[info] # Warmup Iteration   4: 1605165.943 ops/s
[info] # Warmup Iteration   5: 1624602.013 ops/s
[info] Iteration   1: 1600593.458 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1624359.789 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1624250.398 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1623755.556 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1623082.596 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc":
[info]   1619208.360 ±(99.9%) 40117.013 ops/s [Average]
[info]   (min, avg, max) = (1600593.458, 1619208.360, 1624359.789), stdev = 10418.261
[info]   CI (99.9%): [1579091.346, 1659325.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 60.71% complete, ETA 00:44:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 153870.524 ops/s
[info] # Warmup Iteration   2: 280007.037 ops/s
[info] # Warmup Iteration   3: 280459.082 ops/s
[info] # Warmup Iteration   4: 279103.761 ops/s
[info] # Warmup Iteration   5: 280701.445 ops/s
[info] Iteration   1: 280974.228 ops/s
[info]                  ·gc.alloc.rate:            764.252 MB/sec
[info]                  ·gc.alloc.rate.norm:       4280.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.950 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3791.090 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 280856.836 ops/s
[info]                  ·gc.alloc.rate:                   763.749 MB/sec
[info]                  ·gc.alloc.rate.norm:              4280.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.774 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3792.602 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.733 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 280765.488 ops/s
[info]                  ·gc.alloc.rate:            763.520 MB/sec
[info]                  ·gc.alloc.rate.norm:       4280.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.448 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3797.511 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 280690.279 ops/s
[info]                  ·gc.alloc.rate:                   763.469 MB/sec
[info]                  ·gc.alloc.rate.norm:              4280.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.905 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3794.723 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.735 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 280082.058 ops/s
[info]                  ·gc.alloc.rate:            761.590 MB/sec
[info]                  ·gc.alloc.rate.norm:       4280.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.375 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3806.729 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson":
[info]   280673.778 ±(99.9%) 1337.505 ops/s [Average]
[info]   (min, avg, max) = (280082.058, 280673.778, 280974.228), stdev = 347.346
[info]   CI (99.9%): [279336.273, 282011.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   763.316 ±(99.9%) 3.903 MB/sec [Average]
[info]   (min, avg, max) = (761.590, 763.316, 764.252), stdev = 1.014
[info]   CI (99.9%): [759.413, 767.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4280.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4280.001, 4280.001, 4280.002), stdev = 0.001
[info]   CI (99.9%): [4280.001, 4280.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   677.090 ±(99.9%) 1.159 MB/sec [Average]
[info]   (min, avg, max) = (676.774, 677.090, 677.448), stdev = 0.301
[info]   CI (99.9%): [675.931, 678.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   3796.531 ±(99.9%) 23.836 B/op [Average]
[info]   (min, avg, max) = (3791.090, 3796.531, 3806.729), stdev = 6.190
[info]   CI (99.9%): [3772.695, 3820.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   1.494 ±(99.9%) 7.875 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.494, 3.735), stdev = 2.045
[info]   CI (99.9%): [≈ 0, 9.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 60.94% complete, ETA 00:44:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2703.147 ops/s
[info] # Warmup Iteration   2: 4090.421 ops/s
[info] # Warmup Iteration   3: 4379.200 ops/s
[info] # Warmup Iteration   4: 4372.138 ops/s
[info] # Warmup Iteration   5: 4509.451 ops/s
[info] Iteration   1: 4456.403 ops/s
[info]                  ·gc.alloc.rate:            877.287 MB/sec
[info]                  ·gc.alloc.rate.norm:       309840.099 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1350.615 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 477010.347 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 4503.685 ops/s
[info]                  ·gc.alloc.rate:            886.542 MB/sec
[info]                  ·gc.alloc.rate.norm:       309840.091 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.313 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 236016.884 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 4493.288 ops/s
[info]                  ·gc.alloc.rate:            884.601 MB/sec
[info]                  ·gc.alloc.rate.norm:       309840.091 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.333 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 236541.950 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 4463.954 ops/s
[info]                  ·gc.alloc.rate:            878.757 MB/sec
[info]                  ·gc.alloc.rate.norm:       309840.099 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1350.758 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 476262.515 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 4514.971 ops/s
[info]                  ·gc.alloc.rate:            888.813 MB/sec
[info]                  ·gc.alloc.rate.norm:       309840.090 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.244 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 235389.875 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce":
[info]   4486.460 ±(99.9%) 97.531 ops/s [Average]
[info]   (min, avg, max) = (4456.403, 4486.460, 4514.971), stdev = 25.329
[info]   CI (99.9%): [4388.929, 4583.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   883.200 ±(99.9%) 19.190 MB/sec [Average]
[info]   (min, avg, max) = (877.287, 883.200, 888.813), stdev = 4.984
[info]   CI (99.9%): [864.010, 902.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   309840.094 ±(99.9%) 0.017 B/op [Average]
[info]   (min, avg, max) = (309840.090, 309840.094, 309840.099), stdev = 0.004
[info]   CI (99.9%): [309840.077, 309840.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   945.453 ±(99.9%) 1424.455 MB/sec [Average]
[info]   (min, avg, max) = (675.244, 945.453, 1350.758), stdev = 369.926
[info]   CI (99.9%): [≈ 0, 2369.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   332244.314 ±(99.9%) 507562.086 B/op [Average]
[info]   (min, avg, max) = (235389.875, 332244.314, 477010.347), stdev = 131812.262
[info]   CI (99.9%): [≈ 0, 839806.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 9.000), stdev = 2.408
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 61.18% complete, ETA 00:43:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2027.970 ops/s
[info] # Warmup Iteration   2: 4275.906 ops/s
[info] # Warmup Iteration   3: 4257.885 ops/s
[info] # Warmup Iteration   4: 4432.729 ops/s
[info] # Warmup Iteration   5: 4417.222 ops/s
[info] Iteration   1: 4476.725 ops/s
[info]                  ·gc.alloc.rate:            831.613 MB/sec
[info]                  ·gc.alloc.rate.norm:       292424.098 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.580 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 237205.781 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 4485.756 ops/s
[info]                  ·gc.alloc.rate:            833.464 MB/sec
[info]                  ·gc.alloc.rate.norm:       292424.091 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.726 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 236729.995 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 4456.903 ops/s
[info]                  ·gc.alloc.rate:            828.153 MB/sec
[info]                  ·gc.alloc.rate.norm:       292424.099 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1349.574 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 476539.923 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   4: 4474.187 ops/s
[info]                  ·gc.alloc.rate:            831.417 MB/sec
[info]                  ·gc.alloc.rate.norm:       292424.091 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.723 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 237311.771 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 4443.261 ops/s
[info]                  ·gc.alloc.rate:            825.471 MB/sec
[info]                  ·gc.alloc.rate.norm:       292424.099 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.569 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 238966.814 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala":
[info]   4467.367 ±(99.9%) 65.654 ops/s [Average]
[info]   (min, avg, max) = (4443.261, 4467.367, 4485.756), stdev = 17.050
[info]   CI (99.9%): [4401.713, 4533.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   830.024 ±(99.9%) 12.257 MB/sec [Average]
[info]   (min, avg, max) = (825.471, 830.024, 833.464), stdev = 3.183
[info]   CI (99.9%): [817.766, 842.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   292424.096 ±(99.9%) 0.016 B/op [Average]
[info]   (min, avg, max) = (292424.091, 292424.096, 292424.099), stdev = 0.004
[info]   CI (99.9%): [292424.080, 292424.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   809.634 ±(99.9%) 1162.261 MB/sec [Average]
[info]   (min, avg, max) = (674.569, 809.634, 1349.574), stdev = 301.835
[info]   CI (99.9%): [≈ 0, 1971.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   285350.857 ±(99.9%) 411561.737 B/op [Average]
[info]   (min, avg, max) = (236729.995, 285350.857, 476539.923), stdev = 106881.276
[info]   CI (99.9%): [≈ 0, 696912.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.800, 12.000), stdev = 2.950
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 61.41% complete, ETA 00:43:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33898.872 ops/s
[info] # Warmup Iteration   2: 41301.053 ops/s
[info] # Warmup Iteration   3: 41940.035 ops/s
[info] # Warmup Iteration   4: 43154.187 ops/s
[info] # Warmup Iteration   5: 44154.598 ops/s
[info] Iteration   1: 42905.091 ops/s
[info]                  ·gc.alloc.rate:            703.203 MB/sec
[info]                  ·gc.alloc.rate.norm:       25800.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1351.338 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 49579.621 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 43460.513 ops/s
[info]                  ·gc.alloc.rate:                   712.347 MB/sec
[info]                  ·gc.alloc.rate.norm:              25800.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:             675.367 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        24460.662 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 24.123 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 43303.072 ops/s
[info]                  ·gc.alloc.rate:            709.730 MB/sec
[info]                  ·gc.alloc.rate.norm:       25800.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.991 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 24573.541 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 43135.737 ops/s
[info]                  ·gc.alloc.rate:            706.983 MB/sec
[info]                  ·gc.alloc.rate.norm:       25800.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.997 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 24669.231 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 43171.988 ops/s
[info]                  ·gc.alloc.rate:            707.643 MB/sec
[info]                  ·gc.alloc.rate.norm:       25800.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.382 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 24623.809 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala":
[info]   43195.280 ±(99.9%) 794.449 ops/s [Average]
[info]   (min, avg, max) = (42905.091, 43195.280, 43460.513), stdev = 206.316
[info]   CI (99.9%): [42400.831, 43989.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   707.981 ±(99.9%) 13.067 MB/sec [Average]
[info]   (min, avg, max) = (703.203, 707.981, 712.347), stdev = 3.393
[info]   CI (99.9%): [694.914, 721.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   25800.010 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (25800.009, 25800.010, 25800.010), stdev = 0.001
[info]   CI (99.9%): [25800.008, 25800.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   810.815 ±(99.9%) 1163.517 MB/sec [Average]
[info]   (min, avg, max) = (675.367, 810.815, 1351.338), stdev = 302.162
[info]   CI (99.9%): [≈ 0, 1974.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   29581.373 ±(99.9%) 43048.777 B/op [Average]
[info]   (min, avg, max) = (24460.662, 29581.373, 49579.621), stdev = 11179.631
[info]   CI (99.9%): [≈ 0, 72630.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   4.825 ±(99.9%) 41.541 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.825, 24.123), stdev = 10.788
[info]   CI (99.9%): [≈ 0, 46.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 8.000), stdev = 1.732
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 61.65% complete, ETA 00:43:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1500.884 ops/s
[info] # Warmup Iteration   2: 3831.628 ops/s
[info] # Warmup Iteration   3: 3944.340 ops/s
[info] # Warmup Iteration   4: 3993.955 ops/s
[info] # Warmup Iteration   5: 4012.288 ops/s
[info] Iteration   1: 4006.328 ops/s
[info]                  ·gc.alloc.rate:            1020.545 MB/sec
[info]                  ·gc.alloc.rate.norm:       400992.102 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1349.324 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 530175.936 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 3995.651 ops/s
[info]                  ·gc.alloc.rate:            1018.006 MB/sec
[info]                  ·gc.alloc.rate.norm:       400992.110 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.668 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 265751.185 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 3955.456 ops/s
[info]                  ·gc.alloc.rate:            1008.075 MB/sec
[info]                  ·gc.alloc.rate.norm:       400992.103 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1349.678 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 536875.152 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 3995.309 ops/s
[info]                  ·gc.alloc.rate:            1018.168 MB/sec
[info]                  ·gc.alloc.rate.norm:       400992.102 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.775 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 265751.185 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 3963.863 ops/s
[info]                  ·gc.alloc.rate:            1009.858 MB/sec
[info]                  ·gc.alloc.rate.norm:       400992.103 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1349.337 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 535791.923 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson":
[info]   3983.321 ±(99.9%) 85.674 ops/s [Average]
[info]   (min, avg, max) = (3955.456, 3983.321, 4006.328), stdev = 22.249
[info]   CI (99.9%): [3897.647, 4068.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1014.930 ±(99.9%) 21.456 MB/sec [Average]
[info]   (min, avg, max) = (1008.075, 1014.930, 1020.545), stdev = 5.572
[info]   CI (99.9%): [993.474, 1036.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   400992.104 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (400992.102, 400992.104, 400992.110), stdev = 0.003
[info]   CI (99.9%): [400992.091, 400992.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1079.556 ±(99.9%) 1423.053 MB/sec [Average]
[info]   (min, avg, max) = (674.668, 1079.556, 1349.678), stdev = 369.562
[info]   CI (99.9%): [≈ 0, 2502.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   426869.076 ±(99.9%) 566436.725 B/op [Average]
[info]   (min, avg, max) = (265751.185, 426869.076, 536875.152), stdev = 147101.819
[info]   CI (99.9%): [≈ 0, 993305.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 9.000, 11.000), stdev = 2.345
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 61.88% complete, ETA 00:43:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9846.439 ops/s
[info] # Warmup Iteration   2: 13931.214 ops/s
[info] # Warmup Iteration   3: 14233.183 ops/s
[info] # Warmup Iteration   4: 14264.986 ops/s
[info] # Warmup Iteration   5: 14265.219 ops/s
[info] Iteration   1: 14275.798 ops/s
[info]                  ·gc.alloc.rate:            794.865 MB/sec
[info]                  ·gc.alloc.rate.norm:       87648.029 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.292 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 74462.922 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 14043.917 ops/s
[info]                  ·gc.alloc.rate:            781.955 MB/sec
[info]                  ·gc.alloc.rate.norm:       87648.029 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.296 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 75692.750 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 14349.279 ops/s
[info]                  ·gc.alloc.rate:            799.152 MB/sec
[info]                  ·gc.alloc.rate.norm:       87648.036 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.480 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 74084.174 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 14370.083 ops/s
[info]                  ·gc.alloc.rate:            800.010 MB/sec
[info]                  ·gc.alloc.rate.norm:       87621.745 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.420 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 73975.932 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 14365.542 ops/s
[info]                  ·gc.alloc.rate:            800.034 MB/sec
[info]                  ·gc.alloc.rate.norm:       87624.031 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.610 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 73996.525 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce":
[info]   14280.924 ±(99.9%) 530.707 ops/s [Average]
[info]   (min, avg, max) = (14043.917, 14280.924, 14370.083), stdev = 137.823
[info]   CI (99.9%): [13750.217, 14811.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   795.203 ±(99.9%) 29.681 MB/sec [Average]
[info]   (min, avg, max) = (781.955, 795.203, 800.034), stdev = 7.708
[info]   CI (99.9%): [765.522, 824.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   87637.974 ±(99.9%) 53.121 B/op [Average]
[info]   (min, avg, max) = (87621.745, 87637.974, 87648.036), stdev = 13.795
[info]   CI (99.9%): [87584.853, 87691.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   675.420 ±(99.9%) 0.516 MB/sec [Average]
[info]   (min, avg, max) = (675.292, 675.420, 675.610), stdev = 0.134
[info]   CI (99.9%): [674.904, 675.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   74442.461 ±(99.9%) 2795.711 B/op [Average]
[info]   (min, avg, max) = (73975.932, 74442.461, 75692.750), stdev = 726.037
[info]   CI (99.9%): [71646.749, 77238.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 62.12% complete, ETA 00:42:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9747.769 ops/s
[info] # Warmup Iteration   2: 16066.260 ops/s
[info] # Warmup Iteration   3: 15341.425 ops/s
[info] # Warmup Iteration   4: 15823.271 ops/s
[info] # Warmup Iteration   5: 16140.009 ops/s
[info] Iteration   1: 16109.644 ops/s
[info]                  ·gc.alloc.rate:            834.636 MB/sec
[info]                  ·gc.alloc.rate.norm:       81536.027 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.808 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 65922.391 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 16041.713 ops/s
[info]                  ·gc.alloc.rate:            830.930 MB/sec
[info]                  ·gc.alloc.rate.norm:       81536.048 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1349.319 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 132403.551 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 16125.484 ops/s
[info]                  ·gc.alloc.rate:            835.386 MB/sec
[info]                  ·gc.alloc.rate.norm:       81536.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.703 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 65852.913 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 16146.668 ops/s
[info]                  ·gc.alloc.rate:            836.426 MB/sec
[info]                  ·gc.alloc.rate.norm:       81535.921 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.666 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 65767.289 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 16050.733 ops/s
[info]                  ·gc.alloc.rate:            831.494 MB/sec
[info]                  ·gc.alloc.rate.norm:       81536.147 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.696 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 66160.541 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala":
[info]   16094.848 ±(99.9%) 178.674 ops/s [Average]
[info]   (min, avg, max) = (16041.713, 16094.848, 16146.668), stdev = 46.401
[info]   CI (99.9%): [15916.174, 16273.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   833.774 ±(99.9%) 9.366 MB/sec [Average]
[info]   (min, avg, max) = (830.930, 833.774, 836.426), stdev = 2.432
[info]   CI (99.9%): [824.409, 843.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   81536.031 ±(99.9%) 0.312 B/op [Average]
[info]   (min, avg, max) = (81535.921, 81536.031, 81536.147), stdev = 0.081
[info]   CI (99.9%): [81535.719, 81536.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   809.638 ±(99.9%) 1161.703 MB/sec [Average]
[info]   (min, avg, max) = (674.666, 809.638, 1349.319), stdev = 301.690
[info]   CI (99.9%): [≈ 0, 1971.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   79221.337 ±(99.9%) 114480.110 B/op [Average]
[info]   (min, avg, max) = (65767.289, 79221.337, 132403.551), stdev = 29730.121
[info]   CI (99.9%): [≈ 0, 193701.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.000, 12.000), stdev = 2.828
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 62.35% complete, ETA 00:42:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 254603.115 ops/s
[info] # Warmup Iteration   2: 262242.869 ops/s
[info] # Warmup Iteration   3: 286999.611 ops/s
[info] # Warmup Iteration   4: 287572.699 ops/s
[info] # Warmup Iteration   5: 288292.474 ops/s
[info] Iteration   1: 286283.821 ops/s
[info]                  ·gc.alloc.rate:            1009.844 MB/sec
[info]                  ·gc.alloc.rate.norm:       5552.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.421 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3713.381 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 292072.048 ops/s
[info]                  ·gc.alloc.rate:                   1030.445 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1351.050 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        7279.410 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.589 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 291561.656 ops/s
[info]                  ·gc.alloc.rate:            1028.444 MB/sec
[info]                  ·gc.alloc.rate.norm:       5552.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.054 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3649.641 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 283957.441 ops/s
[info]                  ·gc.alloc.rate:                   1001.867 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1351.784 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        7491.121 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.692 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 286507.079 ops/s
[info]                  ·gc.alloc.rate:            1010.624 MB/sec
[info]                  ·gc.alloc.rate.norm:       5552.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.094 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3714.215 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala":
[info]   288076.409 ±(99.9%) 13716.367 ops/s [Average]
[info]   (min, avg, max) = (283957.441, 288076.409, 292072.048), stdev = 3562.097
[info]   CI (99.9%): [274360.042, 301792.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1016.245 ±(99.9%) 48.315 MB/sec [Average]
[info]   (min, avg, max) = (1001.867, 1016.245, 1030.445), stdev = 12.547
[info]   CI (99.9%): [967.929, 1064.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5552.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5552.001, 5552.001, 5552.001), stdev = 0.001
[info]   CI (99.9%): [5552.001, 5552.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   946.080 ±(99.9%) 1424.816 MB/sec [Average]
[info]   (min, avg, max) = (675.421, 946.080, 1351.784), stdev = 370.020
[info]   CI (99.9%): [≈ 0, 2370.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   5169.554 ±(99.9%) 7794.523 B/op [Average]
[info]   (min, avg, max) = (3649.641, 5169.554, 7491.121), stdev = 2024.213
[info]   CI (99.9%): [≈ 0, 12964.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.456 ±(99.9%) 7.680 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.456, 3.692), stdev = 1.994
[info]   CI (99.9%): [≈ 0, 9.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 9.000), stdev = 2.739
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 62.59% complete, ETA 00:42:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 286923.634 ops/s
[info] # Warmup Iteration   2: 313588.969 ops/s
[info] # Warmup Iteration   3: 307053.770 ops/s
[info] # Warmup Iteration   4: 298090.897 ops/s
[info] # Warmup Iteration   5: 307376.898 ops/s
[info] Iteration   1: 301060.344 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 308539.745 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 300115.560 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 307179.460 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 309289.732 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   305236.968 ±(99.9%) 16649.250 ops/s [Average]
[info]   (min, avg, max) = (300115.560, 305236.968, 309289.732), stdev = 4323.757
[info]   CI (99.9%): [288587.718, 321886.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 62.82% complete, ETA 00:42:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10536.724 ops/s
[info] # Warmup Iteration   2: 15083.323 ops/s
[info] # Warmup Iteration   3: 15339.967 ops/s
[info] # Warmup Iteration   4: 15133.883 ops/s
[info] # Warmup Iteration   5: 14942.814 ops/s
[info] Iteration   1: 15067.063 ops/s
[info]                  ·gc.alloc.rate:            856.366 MB/sec
[info]                  ·gc.alloc.rate.norm:       89440.139 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.541 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 70554.483 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 14996.479 ops/s
[info]                  ·gc.alloc.rate:            852.050 MB/sec
[info]                  ·gc.alloc.rate.norm:       89439.915 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.653 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 70818.554 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 14868.805 ops/s
[info]                  ·gc.alloc.rate:                   844.798 MB/sec
[info]                  ·gc.alloc.rate.norm:              89433.125 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.720 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        71428.114 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 70.511 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 14907.710 ops/s
[info]                  ·gc.alloc.rate:            846.927 MB/sec
[info]                  ·gc.alloc.rate.norm:       89424.145 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1350.013 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 142543.327 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   5: 14900.819 ops/s
[info]                  ·gc.alloc.rate:            846.551 MB/sec
[info]                  ·gc.alloc.rate.norm:       89424.027 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.692 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 71269.960 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson":
[info]   14948.175 ±(99.9%) 314.289 ops/s [Average]
[info]   (min, avg, max) = (14868.805, 14948.175, 15067.063), stdev = 81.620
[info]   CI (99.9%): [14633.887, 15262.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   849.338 ±(99.9%) 18.360 MB/sec [Average]
[info]   (min, avg, max) = (844.798, 849.338, 856.366), stdev = 4.768
[info]   CI (99.9%): [830.978, 867.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   89432.270 ±(99.9%) 30.748 B/op [Average]
[info]   (min, avg, max) = (89424.027, 89432.270, 89440.139), stdev = 7.985
[info]   CI (99.9%): [89401.522, 89463.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   809.924 ±(99.9%) 1162.584 MB/sec [Average]
[info]   (min, avg, max) = (674.653, 809.924, 1350.013), stdev = 301.919
[info]   CI (99.9%): [≈ 0, 1972.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   85322.888 ±(99.9%) 123178.628 B/op [Average]
[info]   (min, avg, max) = (70554.483, 85322.888, 142543.327), stdev = 31989.098
[info]   CI (99.9%): [≈ 0, 208501.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   14.102 ±(99.9%) 121.425 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14.102, 70.511), stdev = 31.534
[info]   CI (99.9%): [≈ 0, 135.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.600, 11.000), stdev = 2.510
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 63.06% complete, ETA 00:41:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 822535.790 ops/s
[info] # Warmup Iteration   2: 880268.652 ops/s
[info] # Warmup Iteration   3: 880418.772 ops/s
[info] # Warmup Iteration   4: 882530.334 ops/s
[info] # Warmup Iteration   5: 883990.071 ops/s
[info] Iteration   1: 883460.069 ops/s
[info]                  ·gc.alloc.rate:      35.924 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 883519.723 ops/s
[info]                  ·gc.alloc.rate:      35.926 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 883410.276 ops/s
[info]                  ·gc.alloc.rate:      35.923 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 883584.948 ops/s
[info]                  ·gc.alloc.rate:      35.931 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 883882.407 ops/s
[info]                  ·gc.alloc.rate:      35.944 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala":
[info]   883571.485 ±(99.9%) 715.057 ops/s [Average]
[info]   (min, avg, max) = (883410.276, 883571.485, 883882.407), stdev = 185.698
[info]   CI (99.9%): [882856.427, 884286.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   35.930 ±(99.9%) 0.034 MB/sec [Average]
[info]   (min, avg, max) = (35.923, 35.930, 35.944), stdev = 0.009
[info]   CI (99.9%): [35.896, 35.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   64.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (64.000, 64.000, 64.000), stdev = 0.001
[info]   CI (99.9%): [64.000, 64.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 63.29% complete, ETA 00:41:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29429.208 ops/s
[info] # Warmup Iteration   2: 65933.960 ops/s
[info] # Warmup Iteration   3: 66466.601 ops/s
[info] # Warmup Iteration   4: 66972.865 ops/s
[info] # Warmup Iteration   5: 67710.142 ops/s
[info] Iteration   1: 68233.435 ops/s
[info]                  ·gc.alloc.rate:                                  3079.481 MB/sec
[info]                  ·gc.alloc.rate.norm:                             71040.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.161 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3406.621 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       78586.737 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   2: 68534.404 ops/s
[info]                  ·gc.alloc.rate:            3092.937 MB/sec
[info]                  ·gc.alloc.rate.norm:       71040.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2725.225 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 62594.246 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 68332.756 ops/s
[info]                  ·gc.alloc.rate:                                  3084.249 MB/sec
[info]                  ·gc.alloc.rate.norm:                             71040.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.011 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.246 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3407.003 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       78474.055 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   4: 66750.130 ops/s
[info]                  ·gc.alloc.rate:                                  3012.417 MB/sec
[info]                  ·gc.alloc.rate.norm:                             71040.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.011 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.267 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.203 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       64266.801 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 68418.914 ops/s
[info]                  ·gc.alloc.rate:                                  3087.978 MB/sec
[info]                  ·gc.alloc.rate.norm:                             71040.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.181 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3406.886 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       78376.582 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson":
[info]   68053.928 ±(99.9%) 2838.742 ops/s [Average]
[info]   (min, avg, max) = (66750.130, 68053.928, 68534.404), stdev = 737.212
[info]   CI (99.9%): [65215.186, 70892.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3071.413 ±(99.9%) 128.406 MB/sec [Average]
[info]   (min, avg, max) = (3012.417, 3071.413, 3092.937), stdev = 33.347
[info]   CI (99.9%): [2943.006, 3199.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   71040.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (71040.006, 71040.006, 71040.006), stdev = 0.001
[info]   CI (99.9%): [71040.005, 71040.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.007 ±(99.9%) 0.017 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.011), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.171 ±(99.9%) 0.405 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.171, 0.267), stdev = 0.105
[info]   CI (99.9%): [≈ 0, 0.576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   3134.188 ±(99.9%) 1437.600 MB/sec [Average]
[info]   (min, avg, max) = (2725.203, 3134.188, 3407.003), stdev = 373.340
[info]   CI (99.9%): [1696.588, 4571.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   72459.684 ±(99.9%) 31821.635 B/op [Average]
[info]   (min, avg, max) = (62594.246, 72459.684, 78586.737), stdev = 8263.978
[info]   CI (99.9%): [40638.049, 104281.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 8.000), stdev = 1.581
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 63.53% complete, ETA 00:41:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 624202.921 ops/s
[info] # Warmup Iteration   2: 997443.245 ops/s
[info] # Warmup Iteration   3: 977761.055 ops/s
[info] # Warmup Iteration   4: 999531.911 ops/s
[info] # Warmup Iteration   5: 987016.010 ops/s
[info] Iteration   1: 1003318.486 ops/s
[info]                  ·gc.alloc.rate:            576.353 MB/sec
[info]                  ·gc.alloc.rate.norm:       904.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.549 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1062.724 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 1004720.964 ops/s
[info]                  ·gc.alloc.rate:            577.149 MB/sec
[info]                  ·gc.alloc.rate.norm:       904.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.871 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1060.197 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 1002758.467 ops/s
[info]                  ·gc.alloc.rate:            575.946 MB/sec
[info]                  ·gc.alloc.rate.norm:       904.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.751 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1062.222 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 1006217.136 ops/s
[info]                  ·gc.alloc.rate:                   577.927 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.734 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1058.555 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.042 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 1005307.256 ops/s
[info]                  ·gc.alloc.rate:            577.404 MB/sec
[info]                  ·gc.alloc.rate.norm:       904.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.445 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1060.627 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala":
[info]   1004464.462 ±(99.9%) 5469.963 ops/s [Average]
[info]   (min, avg, max) = (1002758.467, 1004464.462, 1006217.136), stdev = 1420.532
[info]   CI (99.9%): [998994.499, 1009934.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   576.956 ±(99.9%) 3.083 MB/sec [Average]
[info]   (min, avg, max) = (575.946, 576.956, 577.927), stdev = 0.801
[info]   CI (99.9%): [573.873, 580.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   904.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (904.000, 904.000, 904.000), stdev = 0.001
[info]   CI (99.9%): [904.000, 904.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   677.070 ±(99.9%) 1.521 MB/sec [Average]
[info]   (min, avg, max) = (676.734, 677.070, 677.549), stdev = 0.395
[info]   CI (99.9%): [675.549, 678.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1060.865 ±(99.9%) 6.424 B/op [Average]
[info]   (min, avg, max) = (1058.555, 1060.865, 1062.724), stdev = 1.668
[info]   CI (99.9%): [1054.441, 1067.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.208 ±(99.9%) 1.794 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.208, 1.042), stdev = 0.466
[info]   CI (99.9%): [≈ 0, 2.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 63.76% complete, ETA 00:41:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 646925.912 ops/s
[info] # Warmup Iteration   2: 686954.352 ops/s
[info] # Warmup Iteration   3: 680644.804 ops/s
[info] # Warmup Iteration   4: 685671.691 ops/s
[info] # Warmup Iteration   5: 691642.288 ops/s
[info] Iteration   1: 691548.135 ops/s
[info]                  ·gc.alloc.rate:      186.344 MB/sec
[info]                  ·gc.alloc.rate.norm: 424.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 691400.468 ops/s
[info]                  ·gc.alloc.rate:      186.295 MB/sec
[info]                  ·gc.alloc.rate.norm: 424.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 679475.274 ops/s
[info]                  ·gc.alloc.rate:            183.053 MB/sec
[info]                  ·gc.alloc.rate.norm:       424.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.138 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1570.748 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 678966.883 ops/s
[info]                  ·gc.alloc.rate:      182.891 MB/sec
[info]                  ·gc.alloc.rate.norm: 424.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 678412.503 ops/s
[info]                  ·gc.alloc.rate:      182.780 MB/sec
[info]                  ·gc.alloc.rate.norm: 424.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala":
[info]   683960.653 ±(99.9%) 26451.925 ops/s [Average]
[info]   (min, avg, max) = (678412.503, 683960.653, 691548.135), stdev = 6869.481
[info]   CI (99.9%): [657508.728, 710412.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   184.273 ±(99.9%) 7.205 MB/sec [Average]
[info]   (min, avg, max) = (182.780, 184.273, 186.344), stdev = 1.871
[info]   CI (99.9%): [177.068, 191.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   424.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (424.001, 424.001, 424.001), stdev = 0.001
[info]   CI (99.9%): [424.001, 424.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   135.628 ±(99.9%) 1167.794 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 135.628, 678.138), stdev = 303.272
[info]   CI (99.9%): [≈ 0, 1303.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   314.150 ±(99.9%) 2704.922 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 314.150, 1570.748), stdev = 702.460
[info]   CI (99.9%): [≈ 0, 3019.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.count":
[info]   1.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.200, 1.000), stdev = 0.447
[info]   CI (99.9%): [1.000, 1.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 4.000), stdev = 1.789
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 64.00% complete, ETA 00:40:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 809027.447 ops/s
[info] # Warmup Iteration   2: 867742.474 ops/s
[info] # Warmup Iteration   3: 852486.206 ops/s
[info] # Warmup Iteration   4: 872645.382 ops/s
[info] # Warmup Iteration   5: 827214.187 ops/s
[info] Iteration   1: 872630.830 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 873002.959 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 873233.275 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 873284.023 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 873168.429 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc":
[info]   873063.903 ±(99.9%) 1017.569 ops/s [Average]
[info]   (min, avg, max) = (872630.830, 873063.903, 873284.023), stdev = 264.259
[info]   CI (99.9%): [872046.334, 874081.472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 64.24% complete, ETA 00:40:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19450.294 ops/s
[info] # Warmup Iteration   2: 39734.610 ops/s
[info] # Warmup Iteration   3: 39533.617 ops/s
[info] # Warmup Iteration   4: 39460.876 ops/s
[info] # Warmup Iteration   5: 39697.838 ops/s
[info] Iteration   1: 39786.081 ops/s
[info]                  ·gc.alloc.rate:            1669.864 MB/sec
[info]                  ·gc.alloc.rate.norm:       66064.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.388 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 53543.409 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 39623.743 ops/s
[info]                  ·gc.alloc.rate:                                  1662.983 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66064.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.026 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2034.640 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       80828.560 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.660 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                185.144 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   3: 40186.462 ops/s
[info]                  ·gc.alloc.rate:                                  1687.053 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66064.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.057 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.213 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1363.004 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       53374.462 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 40160.912 ops/s
[info]                  ·gc.alloc.rate:                                  1685.651 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66064.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.787 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       53410.339 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 39783.398 ops/s
[info]                  ·gc.alloc.rate:            1669.673 MB/sec
[info]                  ·gc.alloc.rate.norm:       66064.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.040 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 80876.596 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson":
[info]   39908.119 ±(99.9%) 967.841 ops/s [Average]
[info]   (min, avg, max) = (39623.743, 39908.119, 40186.462), stdev = 251.345
[info]   CI (99.9%): [38940.278, 40875.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1675.045 ±(99.9%) 41.198 MB/sec [Average]
[info]   (min, avg, max) = (1662.983, 1675.045, 1687.053), stdev = 10.699
[info]   CI (99.9%): [1633.846, 1716.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   66064.010 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (66064.010, 66064.010, 66064.011), stdev = 0.001
[info]   CI (99.9%): [66064.009, 66064.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.017 ±(99.9%) 0.096 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.057), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.650 ±(99.9%) 3.763 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.650, 2.213), stdev = 0.977
[info]   CI (99.9%): [≈ 0, 4.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1631.572 ±(99.9%) 1433.498 MB/sec [Average]
[info]   (min, avg, max) = (1353.388, 1631.572, 2044.040), stdev = 372.275
[info]   CI (99.9%): [198.074, 3065.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   64406.673 ±(99.9%) 57810.217 B/op [Average]
[info]   (min, avg, max) = (53374.462, 64406.673, 80876.596), stdev = 15013.130
[info]   CI (99.9%): [6596.456, 122216.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.026 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.660), stdev = 2.084
[info]   CI (99.9%): [≈ 0, 8.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   37.029 ±(99.9%) 318.829 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 37.029, 185.144), stdev = 82.799
[info]   CI (99.9%): [≈ 0, 355.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.000, 12.000), stdev = 4.301
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce
[info] # Run progress: 64.47% complete, ETA 00:40:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 352818.142 ops/s
[info] # Warmup Iteration   2: 642011.749 ops/s
[info] # Warmup Iteration   3: 648586.134 ops/s
[info] # Warmup Iteration   4: 646716.994 ops/s
[info] # Warmup Iteration   5: 634135.712 ops/s
[info] Iteration   1: 631357.478 ops/s
[info]                  ·gc.alloc.rate:                   2014.900 MB/sec
[info]                  ·gc.alloc.rate.norm:              5024.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2033.881 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5071.328 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 8.303 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 636154.276 ops/s
[info]                  ·gc.alloc.rate:                                  2030.467 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5024.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.165 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.409 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.184 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5057.941 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 632718.881 ops/s
[info]                  ·gc.alloc.rate:                                  2019.751 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5024.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.366 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5085.228 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   4: 638275.460 ops/s
[info]                  ·gc.alloc.rate:            2037.231 MB/sec
[info]                  ·gc.alloc.rate.norm:       5024.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.071 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5040.868 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 637071.630 ops/s
[info]                  ·gc.alloc.rate:            2033.393 MB/sec
[info]                  ·gc.alloc.rate.norm:       5024.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.058 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5050.353 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce":
[info]   635115.545 ±(99.9%) 11350.807 ops/s [Average]
[info]   (min, avg, max) = (631357.478, 635115.545, 638275.460), stdev = 2947.769
[info]   CI (99.9%): [623764.738, 646466.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate":
[info]   2027.149 ±(99.9%) 36.348 MB/sec [Average]
[info]   (min, avg, max) = (2014.900, 2027.149, 2037.231), stdev = 9.439
[info]   CI (99.9%): [1990.801, 2063.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5024.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5024.001, 5024.001, 5024.001), stdev = 0.001
[info]   CI (99.9%): [5024.001, 5024.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.033 ±(99.9%) 0.284 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.165), stdev = 0.074
[info]   CI (99.9%): [≈ 0, 0.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.082 ±(99.9%) 0.704 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.082, 0.409), stdev = 0.183
[info]   CI (99.9%): [≈ 0, 0.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2042.112 ±(99.9%) 17.724 MB/sec [Average]
[info]   (min, avg, max) = (2033.881, 2042.112, 2044.366), stdev = 4.603
[info]   CI (99.9%): [2024.388, 2059.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   5061.144 ±(99.9%) 67.293 B/op [Average]
[info]   (min, avg, max) = (5040.868, 5061.144, 5085.228), stdev = 17.476
[info]   CI (99.9%): [4993.851, 5128.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   1.661 ±(99.9%) 14.298 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.661, 8.303), stdev = 3.713
[info]   CI (99.9%): [≈ 0, 15.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.800, 11.000), stdev = 3.421
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava
[info] # Run progress: 64.71% complete, ETA 00:39:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.931 ops/s
[info] # Warmup Iteration   2: 5058363.169 ops/s
[info] # Warmup Iteration   3: 5267508.838 ops/s
[info] # Warmup Iteration   4: 5316146.789 ops/s
[info] # Warmup Iteration   5: 5370446.365 ops/s
[info] Iteration   1: 5148172.571 ops/s
[info]                  ·gc.alloc.rate:            313.988 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.731 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 206.295 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 5171595.838 ops/s
[info]                  ·gc.alloc.rate:      315.423 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 5130700.217 ops/s
[info]                  ·gc.alloc.rate:            312.946 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.797 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 207.003 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 5225924.032 ops/s
[info]                  ·gc.alloc.rate:      318.732 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 5178314.761 ops/s
[info]                  ·gc.alloc.rate:            315.843 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.770 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 205.096 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava":
[info]   5170941.484 ±(99.9%) 139045.800 ops/s [Average]
[info]   (min, avg, max) = (5130700.217, 5170941.484, 5225924.032), stdev = 36109.753
[info]   CI (99.9%): [5031895.684, 5309987.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   315.386 ±(99.9%) 8.461 MB/sec [Average]
[info]   (min, avg, max) = (312.946, 315.386, 318.732), stdev = 2.197
[info]   CI (99.9%): [306.925, 323.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   96.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (96.000, 96.000, 96.000), stdev = 0.001
[info]   CI (99.9%): [96.000, 96.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   404.860 ±(99.9%) 1423.138 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 404.860, 674.797), stdev = 369.584
[info]   CI (99.9%): [≈ 0, 1827.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   123.679 ±(99.9%) 434.756 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 123.679, 207.003), stdev = 112.905
[info]   CI (99.9%): [≈ 0, 558.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 5.000), stdev = 2.739
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala
[info] # Run progress: 64.94% complete, ETA 00:39:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 168402.043 ops/s
[info] # Warmup Iteration   2: 790290.853 ops/s
[info] # Warmup Iteration   3: 761874.557 ops/s
[info] # Warmup Iteration   4: 793303.117 ops/s
[info] # Warmup Iteration   5: 788475.524 ops/s
[info] Iteration   1: 794614.862 ops/s
[info]                  ·gc.alloc.rate:            985.357 MB/sec
[info]                  ·gc.alloc.rate.norm:       1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.689 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1340.527 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 795079.663 ops/s
[info]                  ·gc.alloc.rate:            985.873 MB/sec
[info]                  ·gc.alloc.rate.norm:       1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.647 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1339.742 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 790559.994 ops/s
[info]                  ·gc.alloc.rate:            980.324 MB/sec
[info]                  ·gc.alloc.rate.norm:       1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.369 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2694.801 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 795552.206 ops/s
[info]                  ·gc.alloc.rate:                   986.605 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.696 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1338.844 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.318 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 791608.470 ops/s
[info]                  ·gc.alloc.rate:                   981.697 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.141 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2692.565 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.324 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala":
[info]   793483.039 ±(99.9%) 8646.793 ops/s [Average]
[info]   (min, avg, max) = (790559.994, 793483.039, 795552.206), stdev = 2245.545
[info]   CI (99.9%): [784836.246, 802129.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   983.971 ±(99.9%) 10.712 MB/sec [Average]
[info]   (min, avg, max) = (980.324, 983.971, 986.605), stdev = 2.782
[info]   CI (99.9%): [973.260, 994.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1952.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1952.001, 1952.001, 1952.001), stdev = 0.001
[info]   CI (99.9%): [1952.000, 1952.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   947.508 ±(99.9%) 1428.014 MB/sec [Average]
[info]   (min, avg, max) = (676.647, 947.508, 1354.141), stdev = 370.851
[info]   CI (99.9%): [≈ 0, 2375.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1881.296 ±(99.9%) 2855.658 B/op [Average]
[info]   (min, avg, max) = (1338.844, 1881.296, 2694.801), stdev = 741.605
[info]   CI (99.9%): [≈ 0, 4736.954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.528 ±(99.9%) 2.786 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.528, 1.324), stdev = 0.724
[info]   CI (99.9%): [≈ 0, 3.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.600, 10.000), stdev = 2.702
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala
[info] # Run progress: 65.18% complete, ETA 00:39:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6716205.239 ops/s
[info] # Warmup Iteration   2: 7858736.619 ops/s
[info] # Warmup Iteration   3: 7505495.036 ops/s
[info] # Warmup Iteration   4: 7840431.283 ops/s
[info] # Warmup Iteration   5: 7977458.397 ops/s
[info] Iteration   1: 7935723.488 ops/s
[info]                  ·gc.alloc.rate:            362.971 MB/sec
[info]                  ·gc.alloc.rate.norm:       72.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.997 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 134.490 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 7917074.430 ops/s
[info]                  ·gc.alloc.rate:      362.204 MB/sec
[info]                  ·gc.alloc.rate.norm: 72.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 7890367.614 ops/s
[info]                  ·gc.alloc.rate:            361.046 MB/sec
[info]                  ·gc.alloc.rate.norm:       72.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.284 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 135.264 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 7924655.665 ops/s
[info]                  ·gc.alloc.rate:      362.545 MB/sec
[info]                  ·gc.alloc.rate.norm: 72.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 7890299.111 ops/s
[info]                  ·gc.alloc.rate:            360.934 MB/sec
[info]                  ·gc.alloc.rate.norm:       72.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.075 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 135.264 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala":
[info]   7911624.062 ±(99.9%) 79076.647 ops/s [Average]
[info]   (min, avg, max) = (7890299.111, 7911624.062, 7935723.488), stdev = 20535.954
[info]   CI (99.9%): [7832547.415, 7990700.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   361.940 ±(99.9%) 3.503 MB/sec [Average]
[info]   (min, avg, max) = (360.934, 361.940, 362.971), stdev = 0.910
[info]   CI (99.9%): [358.437, 365.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   72.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (72.000, 72.000, 72.000), stdev = 0.001
[info]   CI (99.9%): [72.000, 72.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   406.871 ±(99.9%) 1430.210 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 406.871, 678.284), stdev = 371.421
[info]   CI (99.9%): [≈ 0, 1837.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   81.004 ±(99.9%) 284.741 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 81.004, 135.264), stdev = 73.946
[info]   CI (99.9%): [≈ 0, 365.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson
[info] # Run progress: 65.41% complete, ETA 00:39:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26235.561 ops/s
[info] # Warmup Iteration   2: 250601.542 ops/s
[info] # Warmup Iteration   3: 263237.650 ops/s
[info] # Warmup Iteration   4: 264377.646 ops/s
[info] # Warmup Iteration   5: 263248.003 ops/s
[info] Iteration   1: 261840.616 ops/s
[info]                  ·gc.alloc.rate:                   1456.261 MB/sec
[info]                  ·gc.alloc.rate.norm:              8752.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.811 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        8136.287 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 4.004 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 261325.319 ops/s
[info]                  ·gc.alloc.rate:            1453.183 MB/sec
[info]                  ·gc.alloc.rate.norm:       8752.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2031.781 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12236.690 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   3: 264263.728 ops/s
[info]                  ·gc.alloc.rate:                   1469.436 MB/sec
[info]                  ·gc.alloc.rate.norm:              8752.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.515 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        8061.575 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 27.771 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 266479.690 ops/s
[info]                  ·gc.alloc.rate:                                  1481.804 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8752.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.157 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.927 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.926 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8049.868 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 265793.241 ops/s
[info]                  ·gc.alloc.rate:                                  1477.951 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8752.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.879 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8070.581 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson":
[info]   263940.519 ±(99.9%) 8871.807 ops/s [Average]
[info]   (min, avg, max) = (261325.319, 263940.519, 266479.690), stdev = 2303.980
[info]   CI (99.9%): [255068.712, 272812.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1467.727 ±(99.9%) 49.033 MB/sec [Average]
[info]   (min, avg, max) = (1453.183, 1467.727, 1481.804), stdev = 12.734
[info]   CI (99.9%): [1418.694, 1516.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8752.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8752.002, 8752.002, 8752.002), stdev = 0.001
[info]   CI (99.9%): [8752.001, 8752.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.032 ±(99.9%) 0.270 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.032, 0.157), stdev = 0.070
[info]   CI (99.9%): [≈ 0, 0.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.187 ±(99.9%) 1.593 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.187, 0.927), stdev = 0.414
[info]   CI (99.9%): [≈ 0, 1.780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1492.982 ±(99.9%) 1159.941 MB/sec [Average]
[info]   (min, avg, max) = (1353.515, 1492.982, 2031.781), stdev = 301.233
[info]   CI (99.9%): [333.042, 2652.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   8911.000 ±(99.9%) 7159.964 B/op [Average]
[info]   (min, avg, max) = (8049.868, 8911.000, 12236.690), stdev = 1859.420
[info]   CI (99.9%): [1751.037, 16070.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.822 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.663), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   6.355 ±(99.9%) 46.581 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.355, 27.771), stdev = 12.097
[info]   CI (99.9%): [≈ 0, 52.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.000, 14.000), stdev = 4.899
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce
[info] # Run progress: 65.65% complete, ETA 00:38:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2022.030 ops/s
[info] # Warmup Iteration   2: 3514.174 ops/s
[info] # Warmup Iteration   3: 3518.453 ops/s
[info] # Warmup Iteration   4: 3577.979 ops/s
[info] # Warmup Iteration   5: 3595.750 ops/s
[info] Iteration   1: 3607.155 ops/s
[info]                  ·gc.alloc.rate:            1703.568 MB/sec
[info]                  ·gc.alloc.rate.norm:       743328.113 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.719 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 591549.109 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 3600.326 ops/s
[info]                  ·gc.alloc.rate:                                  1700.305 MB/sec
[info]                  ·gc.alloc.rate.norm:                             743328.122 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.092 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 40.244 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2037.523 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       890750.898 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1455.951 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   3: 3625.326 ops/s
[info]                  ·gc.alloc.rate:                                  1712.575 MB/sec
[info]                  ·gc.alloc.rate.norm:                             743328.112 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.143 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 62.258 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.784 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       591504.410 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 3614.660 ops/s
[info]                  ·gc.alloc.rate:                                  1707.353 MB/sec
[info]                  ·gc.alloc.rate.norm:                             743328.113 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.134 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 58.389 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.142 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       889955.681 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 3624.052 ops/s
[info]                  ·gc.alloc.rate:                                  1711.461 MB/sec
[info]                  ·gc.alloc.rate.norm:                             743328.113 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.148 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 64.380 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.649 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       591830.758 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce":
[info]   3614.304 ±(99.9%) 41.434 ops/s [Average]
[info]   (min, avg, max) = (3600.326, 3614.304, 3625.326), stdev = 10.760
[info]   CI (99.9%): [3572.869, 3655.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.alloc.rate":
[info]   1707.052 ±(99.9%) 19.981 MB/sec [Average]
[info]   (min, avg, max) = (1700.305, 1707.052, 1712.575), stdev = 5.189
[info]   CI (99.9%): [1687.072, 1727.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   743328.115 ±(99.9%) 0.016 B/op [Average]
[info]   (min, avg, max) = (743328.112, 743328.115, 743328.122), stdev = 0.004
[info]   CI (99.9%): [743328.098, 743328.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.104 ±(99.9%) 0.239 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.104, 0.148), stdev = 0.062
[info]   CI (99.9%): [≈ 0, 0.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   45.054 ±(99.9%) 103.687 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 45.054, 64.380), stdev = 26.927
[info]   CI (99.9%): [≈ 0, 148.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1632.564 ±(99.9%) 1435.194 MB/sec [Average]
[info]   (min, avg, max) = (1355.719, 1632.564, 2044.142), stdev = 372.715
[info]   CI (99.9%): [197.370, 3067.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   711118.171 ±(99.9%) 630037.810 B/op [Average]
[info]   (min, avg, max) = (591504.410, 711118.171, 890750.898), stdev = 163618.818
[info]   CI (99.9%): [81080.361, 1341155.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   291.190 ±(99.9%) 2507.236 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 291.190, 1455.951), stdev = 651.121
[info]   CI (99.9%): [≈ 0, 2798.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.600, 10.000), stdev = 3.362
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala
[info] # Run progress: 65.88% complete, ETA 00:38:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1955.934 ops/s
[info] # Warmup Iteration   2: 4335.172 ops/s
[info] # Warmup Iteration   3: 4555.740 ops/s
[info] # Warmup Iteration   4: 4578.889 ops/s
[info] # Warmup Iteration   5: 4577.850 ops/s
[info] Iteration   1: 4566.966 ops/s
[info]                  ·gc.alloc.rate:                   1888.076 MB/sec
[info]                  ·gc.alloc.rate.norm:              650472.096 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2030.858 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        699662.795 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1377.289 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   2: 4638.130 ops/s
[info]                  ·gc.alloc.rate:                                  1916.723 MB/sec
[info]                  ·gc.alloc.rate.norm:                             650472.088 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.022 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 7.615 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.070 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       462241.414 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                226.035 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   3: 4641.594 ops/s
[info]                  ·gc.alloc.rate:                                  1918.185 MB/sec
[info]                  ·gc.alloc.rate.norm:                             650472.088 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.018 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.969 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2043.901 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       693103.542 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 4623.721 ops/s
[info]                  ·gc.alloc.rate:            1910.892 MB/sec
[info]                  ·gc.alloc.rate.norm:       650472.088 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.055 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 695801.026 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 4626.562 ops/s
[info]                  ·gc.alloc.rate:                                  1911.996 MB/sec
[info]                  ·gc.alloc.rate.norm:                             650472.095 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.021 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 7.032 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2043.910 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       695349.988 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala":
[info]   4619.395 ±(99.9%) 116.520 ops/s [Average]
[info]   (min, avg, max) = (4566.966, 4619.395, 4641.594), stdev = 30.260
[info]   CI (99.9%): [4502.875, 4735.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1909.174 ±(99.9%) 46.933 MB/sec [Average]
[info]   (min, avg, max) = (1888.076, 1909.174, 1918.185), stdev = 12.188
[info]   CI (99.9%): [1862.241, 1956.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   650472.091 ±(99.9%) 0.016 B/op [Average]
[info]   (min, avg, max) = (650472.088, 650472.091, 650472.096), stdev = 0.004
[info]   CI (99.9%): [650472.075, 650472.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.012 ±(99.9%) 0.043 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.022), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   4.123 ±(99.9%) 14.671 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.123, 7.615), stdev = 3.810
[info]   CI (99.9%): [≈ 0, 18.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1904.959 ±(99.9%) 1168.813 MB/sec [Average]
[info]   (min, avg, max) = (1362.070, 1904.959, 2044.055), stdev = 303.537
[info]   CI (99.9%): [736.146, 3073.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   649231.753 ±(99.9%) 402613.317 B/op [Average]
[info]   (min, avg, max) = (462241.414, 649231.753, 699662.795), stdev = 104557.400
[info]   CI (99.9%): [246618.436, 1051845.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.690 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.998), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   320.665 ±(99.9%) 2305.477 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 320.665, 1377.289), stdev = 598.725
[info]   CI (99.9%): [≈ 0, 2626.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.000, 17.000), stdev = 5.788
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala
[info] # Run progress: 66.12% complete, ETA 00:38:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38560.281 ops/s
[info] # Warmup Iteration   2: 41851.188 ops/s
[info] # Warmup Iteration   3: 41922.676 ops/s
[info] # Warmup Iteration   4: 42058.637 ops/s
[info] # Warmup Iteration   5: 41901.188 ops/s
[info] Iteration   1: 42086.411 ops/s
[info]                  ·gc.alloc.rate:            700.116 MB/sec
[info]                  ·gc.alloc.rate.norm:       26184.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.700 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 25383.037 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 42074.338 ops/s
[info]                  ·gc.alloc.rate:            700.137 MB/sec
[info]                  ·gc.alloc.rate.norm:       26184.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.962 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 25392.085 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 41970.763 ops/s
[info]                  ·gc.alloc.rate:            698.236 MB/sec
[info]                  ·gc.alloc.rate.norm:       26184.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.795 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 25454.997 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 41965.635 ops/s
[info]                  ·gc.alloc.rate:            698.085 MB/sec
[info]                  ·gc.alloc.rate.norm:       26184.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.730 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 25458.029 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 42076.274 ops/s
[info]                  ·gc.alloc.rate:            699.966 MB/sec
[info]                  ·gc.alloc.rate.norm:       26184.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.763 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 25390.878 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala":
[info]   42034.684 ±(99.9%) 234.474 ops/s [Average]
[info]   (min, avg, max) = (41965.635, 42034.684, 42086.411), stdev = 60.892
[info]   CI (99.9%): [41800.210, 42269.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   699.308 ±(99.9%) 4.048 MB/sec [Average]
[info]   (min, avg, max) = (698.085, 699.308, 700.137), stdev = 1.051
[info]   CI (99.9%): [695.260, 703.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   26184.010 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (26184.010, 26184.010, 26184.010), stdev = 0.001
[info]   CI (99.9%): [26184.009, 26184.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   678.790 ±(99.9%) 0.395 MB/sec [Average]
[info]   (min, avg, max) = (678.700, 678.790, 678.962), stdev = 0.103
[info]   CI (99.9%): [678.395, 679.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   25415.805 ±(99.9%) 143.776 B/op [Average]
[info]   (min, avg, max) = (25383.037, 25415.805, 25458.029), stdev = 37.338
[info]   CI (99.9%): [25272.029, 25559.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce
[info] # Run progress: 66.35% complete, ETA 00:38:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2712.620 ops/s
[info] # Warmup Iteration   2: 3916.216 ops/s
[info] # Warmup Iteration   3: 3998.344 ops/s
[info] # Warmup Iteration   4: 4082.466 ops/s
[info] # Warmup Iteration   5: 4103.962 ops/s
[info] Iteration   1: 4107.279 ops/s
[info]                  ·gc.alloc.rate:            755.689 MB/sec
[info]                  ·gc.alloc.rate.norm:       289616.099 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.012 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 259846.730 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 4100.395 ops/s
[info]                  ·gc.alloc.rate:            754.455 MB/sec
[info]                  ·gc.alloc.rate.norm:       289616.107 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.895 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 260226.808 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 4103.002 ops/s
[info]                  ·gc.alloc.rate:            754.960 MB/sec
[info]                  ·gc.alloc.rate.norm:       289616.099 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.018 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 260099.992 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 4080.654 ops/s
[info]                  ·gc.alloc.rate:            750.881 MB/sec
[info]                  ·gc.alloc.rate.norm:       289616.108 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.989 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 261501.805 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 4114.530 ops/s
[info]                  ·gc.alloc.rate:            757.169 MB/sec
[info]                  ·gc.alloc.rate.norm:       289616.099 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.020 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 259341.683 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce":
[info]   4101.172 ±(99.9%) 48.733 ops/s [Average]
[info]   (min, avg, max) = (4080.654, 4101.172, 4114.530), stdev = 12.656
[info]   CI (99.9%): [4052.439, 4149.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.alloc.rate":
[info]   754.631 ±(99.9%) 8.982 MB/sec [Average]
[info]   (min, avg, max) = (750.881, 754.631, 757.169), stdev = 2.333
[info]   CI (99.9%): [745.648, 763.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   289616.103 ±(99.9%) 0.017 B/op [Average]
[info]   (min, avg, max) = (289616.099, 289616.103, 289616.108), stdev = 0.005
[info]   CI (99.9%): [289616.085, 289616.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   677.987 ±(99.9%) 0.204 MB/sec [Average]
[info]   (min, avg, max) = (677.895, 677.987, 678.020), stdev = 0.053
[info]   CI (99.9%): [677.783, 678.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   260203.404 ±(99.9%) 3084.643 B/op [Average]
[info]   (min, avg, max) = (259341.683, 260203.404, 261501.805), stdev = 801.072
[info]   CI (99.9%): [257118.761, 263288.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala
[info] # Run progress: 66.59% complete, ETA 00:37:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_456a8d2b/target/1bdf7fe1/jackson-module-afterburner-2.9.5.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 2038.022 ops/s
[info] # Warmup Iteration   2: 4011.808 ops/s
[info] # Warmup Iteration   3: 4202.110 ops/s
[info] # Warmup Iteration   4: 4167.947 ops/s
[info] # Warmup Iteration   5: 4171.863 ops/s
[info] Iteration   1: 4160.703 ops/s
[info]                  ·gc.alloc.rate:                   509.715 MB/sec
[info]                  ·gc.alloc.rate.norm:              192740.329 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.267 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        255719.519 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 251.940 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 4213.522 ops/s
[info]                  ·gc.alloc.rate:      515.941 MB/sec
[info]                  ·gc.alloc.rate.norm: 192741.954 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 4191.163 ops/s
[info]                  ·gc.alloc.rate:            513.222 MB/sec
[info]                  ·gc.alloc.rate.norm:       192741.226 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.549 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 254078.993 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 4189.648 ops/s
[info]                  ·gc.alloc.rate:                   513.037 MB/sec
[info]                  ·gc.alloc.rate.norm:              192741.247 B/op
[info]                  ·gc.churn.G1_Old_Gen:             675.962 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        253950.045 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 250.197 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 4191.829 ops/s
[info]                  ·gc.alloc.rate:            513.472 MB/sec
[info]                  ·gc.alloc.rate.norm:       192741.674 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.877 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 254078.993 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala":
[info]   4189.373 ±(99.9%) 72.410 ops/s [Average]
[info]   (min, avg, max) = (4160.703, 4189.373, 4213.522), stdev = 18.805
[info]   CI (99.9%): [4116.964, 4261.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   513.077 ±(99.9%) 8.543 MB/sec [Average]
[info]   (min, avg, max) = (509.715, 513.077, 515.941), stdev = 2.218
[info]   CI (99.9%): [504.535, 521.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   192741.286 ±(99.9%) 2.372 B/op [Average]
[info]   (min, avg, max) = (192740.329, 192741.286, 192741.954), stdev = 0.616
[info]   CI (99.9%): [192738.914, 192743.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   541.131 ±(99.9%) 1164.827 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 541.131, 676.877), stdev = 302.502
[info]   CI (99.9%): [≈ 0, 1705.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   203565.510 ±(99.9%) 438199.146 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 203565.510, 255719.519), stdev = 113798.927
[info]   CI (99.9%): [≈ 0, 641764.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   100.428 ±(99.9%) 529.531 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 100.428, 251.940), stdev = 137.517
[info]   CI (99.9%): [≈ 0, 629.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.000, 5.000), stdev = 2.236
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala
[info] # Run progress: 66.82% complete, ETA 00:37:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5604.470 ops/s
[info] # Warmup Iteration   2: 6444.514 ops/s
[info] # Warmup Iteration   3: 6430.848 ops/s
[info] # Warmup Iteration   4: 6324.263 ops/s
[info] # Warmup Iteration   5: 6540.105 ops/s
[info] Iteration   1: 6536.890 ops/s
[info]                  ·gc.alloc.rate:      174.846 MB/sec
[info]                  ·gc.alloc.rate.norm: 42096.062 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 6538.887 ops/s
[info]                  ·gc.alloc.rate:      174.913 MB/sec
[info]                  ·gc.alloc.rate.norm: 42096.062 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 6508.857 ops/s
[info]                  ·gc.alloc.rate:            174.087 MB/sec
[info]                  ·gc.alloc.rate.norm:       42096.063 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.429 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 163809.799 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 6531.858 ops/s
[info]                  ·gc.alloc.rate:      174.723 MB/sec
[info]                  ·gc.alloc.rate.norm: 42096.067 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 6514.465 ops/s
[info]                  ·gc.alloc.rate:      174.236 MB/sec
[info]                  ·gc.alloc.rate.norm: 42096.063 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala":
[info]   6526.191 ±(99.9%) 52.577 ops/s [Average]
[info]   (min, avg, max) = (6508.857, 6526.191, 6538.887), stdev = 13.654
[info]   CI (99.9%): [6473.614, 6578.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   174.561 ±(99.9%) 1.444 MB/sec [Average]
[info]   (min, avg, max) = (174.087, 174.561, 174.913), stdev = 0.375
[info]   CI (99.9%): [173.117, 176.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   42096.063 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (42096.062, 42096.063, 42096.067), stdev = 0.002
[info]   CI (99.9%): [42096.055, 42096.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   135.486 ±(99.9%) 1166.573 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 135.486, 677.429), stdev = 302.955
[info]   CI (99.9%): [≈ 0, 1302.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   32761.960 ±(99.9%) 282090.354 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 32761.960, 163809.799), stdev = 73257.969
[info]   CI (99.9%): [≈ 0, 314852.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.count":
[info]   1.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.200, 1.000), stdev = 0.447
[info]   CI (99.9%): [1.000, 1.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 5.000), stdev = 2.236
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 67.06% complete, ETA 00:37:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5848.051 ops/s
[info] # Warmup Iteration   2: 6552.937 ops/s
[info] # Warmup Iteration   3: 6552.166 ops/s
[info] # Warmup Iteration   4: 6569.759 ops/s
[info] # Warmup Iteration   5: 6223.882 ops/s
[info] Iteration   1: 6444.471 ops/s
[info]                  ·gc.alloc.rate:            125.281 MB/sec
[info]                  ·gc.alloc.rate.norm:       30592.063 B/op
[info]                  ·gc.churn.G1_Old_Gen:      682.162 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 166574.903 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 6546.258 ops/s
[info]                  ·gc.alloc.rate:      127.225 MB/sec
[info]                  ·gc.alloc.rate.norm: 30592.062 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 6549.221 ops/s
[info]                  ·gc.alloc.rate:      127.282 MB/sec
[info]                  ·gc.alloc.rate.norm: 30592.062 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 6544.904 ops/s
[info]                  ·gc.alloc.rate:      127.207 MB/sec
[info]                  ·gc.alloc.rate.norm: 30592.062 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 6539.734 ops/s
[info]                  ·gc.alloc.rate:      127.140 MB/sec
[info]                  ·gc.alloc.rate.norm: 30592.062 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc":
[info]   6524.918 ±(99.9%) 173.671 ops/s [Average]
[info]   (min, avg, max) = (6444.471, 6524.918, 6549.221), stdev = 45.102
[info]   CI (99.9%): [6351.247, 6698.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   126.827 ±(99.9%) 3.333 MB/sec [Average]
[info]   (min, avg, max) = (125.281, 126.827, 127.282), stdev = 0.866
[info]   CI (99.9%): [123.494, 130.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   30592.063 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (30592.062, 30592.063, 30592.063), stdev = 0.001
[info]   CI (99.9%): [30592.061, 30592.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   136.432 ±(99.9%) 1174.723 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 136.432, 682.162), stdev = 305.072
[info]   CI (99.9%): [≈ 0, 1311.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   33314.981 ±(99.9%) 286852.030 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 33314.981, 166574.903), stdev = 74494.561
[info]   CI (99.9%): [≈ 0, 320167.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   1.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.200, 1.000), stdev = 0.447
[info]   CI (99.9%): [1.000, 1.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   3.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 3.000), stdev = 1.342
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce
[info] # Run progress: 67.29% complete, ETA 00:37:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5098.090 ops/s
[info] # Warmup Iteration   2: 7169.232 ops/s
[info] # Warmup Iteration   3: 7379.026 ops/s
[info] # Warmup Iteration   4: 7304.670 ops/s
[info] # Warmup Iteration   5: 7362.611 ops/s
[info] Iteration   1: 7387.900 ops/s
[info]                  ·gc.alloc.rate:            1720.484 MB/sec
[info]                  ·gc.alloc.rate.norm:       366544.055 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2033.991 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 433335.738 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 7440.498 ops/s
[info]                  ·gc.alloc.rate:                   1732.741 MB/sec
[info]                  ·gc.alloc.rate.norm:              366544.055 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1356.112 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        286871.908 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 704.499 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 7410.283 ops/s
[info]                  ·gc.alloc.rate:                                  1725.749 MB/sec
[info]                  ·gc.alloc.rate.norm:                             366544.059 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.163 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 34.522 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.150 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       434171.579 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 7457.793 ops/s
[info]                  ·gc.alloc.rate:                                  1736.752 MB/sec
[info]                  ·gc.alloc.rate.norm:                             366552.424 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.087 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 18.407 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.174 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       431435.815 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 7490.554 ops/s
[info]                  ·gc.alloc.rate:            1745.009 MB/sec
[info]                  ·gc.alloc.rate.norm:       366568.054 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1363.173 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 286356.980 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce":
[info]   7437.406 ±(99.9%) 154.463 ops/s [Average]
[info]   (min, avg, max) = (7387.900, 7437.406, 7490.554), stdev = 40.114
[info]   CI (99.9%): [7282.943, 7591.869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1732.147 ±(99.9%) 36.730 MB/sec [Average]
[info]   (min, avg, max) = (1720.484, 1732.147, 1745.009), stdev = 9.539
[info]   CI (99.9%): [1695.417, 1768.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   366550.530 ±(99.9%) 40.221 B/op [Average]
[info]   (min, avg, max) = (366544.055, 366550.530, 366568.054), stdev = 10.445
[info]   CI (99.9%): [366510.309, 366590.750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.050 ±(99.9%) 0.283 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.163), stdev = 0.073
[info]   CI (99.9%): [≈ 0, 0.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   10.586 ±(99.9%) 59.973 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.586, 34.522), stdev = 15.575
[info]   CI (99.9%): [≈ 0, 70.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1768.320 ±(99.9%) 1436.681 MB/sec [Average]
[info]   (min, avg, max) = (1356.112, 1768.320, 2044.174), stdev = 373.101
[info]   CI (99.9%): [331.639, 3205.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   374434.404 ±(99.9%) 308723.930 B/op [Average]
[info]   (min, avg, max) = (286356.980, 374434.404, 434171.579), stdev = 80174.624
[info]   CI (99.9%): [65710.474, 683158.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   140.900 ±(99.9%) 1213.189 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 140.900, 704.499), stdev = 315.061
[info]   CI (99.9%): [≈ 0, 1354.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 11.000), stdev = 3.271
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava
[info] # Run progress: 67.53% complete, ETA 00:36:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 906.345 ops/s
[info] # Warmup Iteration   2: 11287.311 ops/s
[info] # Warmup Iteration   3: 11295.363 ops/s
[info] # Warmup Iteration   4: 11013.202 ops/s
[info] # Warmup Iteration   5: 10987.159 ops/s
[info] Iteration   1: 10994.483 ops/s
[info]                  ·gc.alloc.rate:      253.514 MB/sec
[info]                  ·gc.alloc.rate.norm: 36280.037 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 11221.428 ops/s
[info]                  ·gc.alloc.rate:            258.700 MB/sec
[info]                  ·gc.alloc.rate.norm:       36280.036 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.764 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 94628.729 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 11362.721 ops/s
[info]                  ·gc.alloc.rate:      261.892 MB/sec
[info]                  ·gc.alloc.rate.norm: 36280.042 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 11310.744 ops/s
[info]                  ·gc.alloc.rate:            260.699 MB/sec
[info]                  ·gc.alloc.rate.norm:       36280.036 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.628 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 93884.346 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 11375.590 ops/s
[info]                  ·gc.alloc.rate:      262.299 MB/sec
[info]                  ·gc.alloc.rate.norm: 36280.045 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava":
[info]   11252.993 ±(99.9%) 603.426 ops/s [Average]
[info]   (min, avg, max) = (10994.483, 11252.993, 11375.590), stdev = 156.708
[info]   CI (99.9%): [10649.567, 11856.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   259.421 ±(99.9%) 13.808 MB/sec [Average]
[info]   (min, avg, max) = (253.514, 259.421, 262.299), stdev = 3.586
[info]   CI (99.9%): [245.612, 273.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   36280.039 ±(99.9%) 0.015 B/op [Average]
[info]   (min, avg, max) = (36280.036, 36280.039, 36280.045), stdev = 0.004
[info]   CI (99.9%): [36280.024, 36280.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   269.878 ±(99.9%) 1422.990 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.878, 674.764), stdev = 369.546
[info]   CI (99.9%): [≈ 0, 1692.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   37702.615 ±(99.9%) 198797.589 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 37702.615, 94628.729), stdev = 51627.103
[info]   CI (99.9%): [≈ 0, 236500.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 5.000), stdev = 2.739
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala
[info] # Run progress: 67.76% complete, ETA 00:36:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6182.046 ops/s
[info] # Warmup Iteration   2: 13048.765 ops/s
[info] # Warmup Iteration   3: 13049.892 ops/s
[info] # Warmup Iteration   4: 13174.355 ops/s
[info] # Warmup Iteration   5: 13107.291 ops/s
[info] Iteration   1: 13497.390 ops/s
[info]                  ·gc.alloc.rate:      342.931 MB/sec
[info]                  ·gc.alloc.rate.norm: 39992.030 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 13431.785 ops/s
[info]                  ·gc.alloc.rate:            341.372 MB/sec
[info]                  ·gc.alloc.rate.norm:       39992.030 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.878 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 79296.853 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 13564.826 ops/s
[info]                  ·gc.alloc.rate:      344.612 MB/sec
[info]                  ·gc.alloc.rate.norm: 39992.030 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 13417.137 ops/s
[info]                  ·gc.alloc.rate:            340.954 MB/sec
[info]                  ·gc.alloc.rate.norm:       39992.038 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.804 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 79385.486 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 13522.317 ops/s
[info]                  ·gc.alloc.rate:      343.579 MB/sec
[info]                  ·gc.alloc.rate.norm: 39992.035 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala":
[info]   13486.691 ±(99.9%) 238.469 ops/s [Average]
[info]   (min, avg, max) = (13417.137, 13486.691, 13564.826), stdev = 61.930
[info]   CI (99.9%): [13248.222, 13725.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   342.690 ±(99.9%) 5.870 MB/sec [Average]
[info]   (min, avg, max) = (340.954, 342.690, 344.612), stdev = 1.524
[info]   CI (99.9%): [336.820, 348.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   39992.033 ±(99.9%) 0.014 B/op [Average]
[info]   (min, avg, max) = (39992.030, 39992.033, 39992.038), stdev = 0.004
[info]   CI (99.9%): [39992.019, 39992.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   270.736 ±(99.9%) 1427.515 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 270.736, 676.878), stdev = 370.721
[info]   CI (99.9%): [≈ 0, 1698.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   31736.468 ±(99.9%) 167337.277 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 31736.468, 79385.486), stdev = 43456.959
[info]   CI (99.9%): [≈ 0, 199073.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 5.000), stdev = 2.739
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala
[info] # Run progress: 68.00% complete, ETA 00:36:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18411.419 ops/s
[info] # Warmup Iteration   2: 22802.434 ops/s
[info] # Warmup Iteration   3: 23147.963 ops/s
[info] # Warmup Iteration   4: 22730.697 ops/s
[info] # Warmup Iteration   5: 22673.267 ops/s
[info] Iteration   1: 22807.127 ops/s
[info]                  ·gc.alloc.rate:      427.406 MB/sec
[info]                  ·gc.alloc.rate.norm: 29496.019 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 22686.099 ops/s
[info]                  ·gc.alloc.rate:            425.144 MB/sec
[info]                  ·gc.alloc.rate.norm:       29496.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.059 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 47042.897 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 22846.243 ops/s
[info]                  ·gc.alloc.rate:      428.091 MB/sec
[info]                  ·gc.alloc.rate.norm: 29496.018 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 22576.074 ops/s
[info]                  ·gc.alloc.rate:            423.051 MB/sec
[info]                  ·gc.alloc.rate.norm:       29496.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.036 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 47274.153 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 23088.133 ops/s
[info]                  ·gc.alloc.rate:            432.677 MB/sec
[info]                  ·gc.alloc.rate.norm:       29496.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.059 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 46223.980 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala":
[info]   22800.735 ±(99.9%) 741.495 ops/s [Average]
[info]   (min, avg, max) = (22576.074, 22800.735, 23088.133), stdev = 192.564
[info]   CI (99.9%): [22059.240, 23542.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   427.274 ±(99.9%) 13.917 MB/sec [Average]
[info]   (min, avg, max) = (423.051, 427.274, 432.677), stdev = 3.614
[info]   CI (99.9%): [413.357, 441.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   29496.018 ±(99.9%) 0.003 B/op [Average]
[info]   (min, avg, max) = (29496.018, 29496.018, 29496.019), stdev = 0.001
[info]   CI (99.9%): [29496.015, 29496.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   406.831 ±(99.9%) 1430.068 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 406.831, 678.059), stdev = 371.384
[info]   CI (99.9%): [≈ 0, 1836.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   28108.206 ±(99.9%) 98815.727 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 28108.206, 47274.153), stdev = 25662.131
[info]   CI (99.9%): [≈ 0, 126923.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson
[info] # Run progress: 68.24% complete, ETA 00:35:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 744.638 ops/s
[info] # Warmup Iteration   2: 2081.068 ops/s
[info] # Warmup Iteration   3: 2143.732 ops/s
[info] # Warmup Iteration   4: 2130.369 ops/s
[info] # Warmup Iteration   5: 2141.495 ops/s
[info] Iteration   1: 2124.893 ops/s
[info]                  ·gc.alloc.rate:            1350.063 MB/sec
[info]                  ·gc.alloc.rate.norm:       1000008.192 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.041 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1002213.750 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 2132.032 ops/s
[info]                  ·gc.alloc.rate:            1354.558 MB/sec
[info]                  ·gc.alloc.rate.norm:       1000008.191 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.090 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 998924.722 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 2151.071 ops/s
[info]                  ·gc.alloc.rate:            1366.678 MB/sec
[info]                  ·gc.alloc.rate.norm:       1000008.204 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.144 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 990105.219 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   4: 2141.649 ops/s
[info]                  ·gc.alloc.rate:                   1360.847 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000008.190 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1357.024 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        997199.201 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.661 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3425.120 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 2148.900 ops/s
[info]                  ·gc.alloc.rate:                                  1365.419 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1000008.190 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.145 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 105.942 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.478 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       997854.184 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson":
[info]   2139.709 ±(99.9%) 42.868 ops/s [Average]
[info]   (min, avg, max) = (2124.893, 2139.709, 2151.071), stdev = 11.133
[info]   CI (99.9%): [2096.841, 2182.578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1359.513 ±(99.9%) 27.354 MB/sec [Average]
[info]   (min, avg, max) = (1350.063, 1359.513, 1366.678), stdev = 7.104
[info]   CI (99.9%): [1332.159, 1386.867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   1000008.194 ±(99.9%) 0.024 B/op [Average]
[info]   (min, avg, max) = (1000008.190, 1000008.194, 1000008.204), stdev = 0.006
[info]   CI (99.9%): [1000008.170, 1000008.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.029 ±(99.9%) 0.249 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.145), stdev = 0.065
[info]   CI (99.9%): [≈ 0, 0.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   21.188 ±(99.9%) 182.439 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21.188, 105.942), stdev = 47.379
[info]   CI (99.9%): [≈ 0, 203.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1355.755 ±(99.9%) 15.888 MB/sec [Average]
[info]   (min, avg, max) = (1353.041, 1355.755, 1362.478), stdev = 4.126
[info]   CI (99.9%): [1339.868, 1371.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   997259.415 ±(99.9%) 17097.311 B/op [Average]
[info]   (min, avg, max) = (990105.219, 997259.415, 1002213.750), stdev = 4440.117
[info]   CI (99.9%): [980162.104, 1014356.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.027 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.661), stdev = 2.084
[info]   CI (99.9%): [≈ 0, 8.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   685.024 ±(99.9%) 5898.263 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 685.024, 3425.120), stdev = 1531.760
[info]   CI (99.9%): [≈ 0, 6583.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 9.200, 11.000), stdev = 1.643
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce
[info] # Run progress: 68.47% complete, ETA 00:35:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4738.878 ops/s
[info] # Warmup Iteration   2: 7123.648 ops/s
[info] # Warmup Iteration   3: 7244.623 ops/s
[info] # Warmup Iteration   4: 7247.596 ops/s
[info] # Warmup Iteration   5: 7238.573 ops/s
[info] Iteration   1: 7195.708 ops/s
[info]                  ·gc.alloc.rate:                   1419.795 MB/sec
[info]                  ·gc.alloc.rate.norm:              310576.057 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.409 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        296491.894 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 145.696 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 7246.491 ops/s
[info]                  ·gc.alloc.rate:                   1429.894 MB/sec
[info]                  ·gc.alloc.rate.norm:              310576.061 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2034.553 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        441909.185 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 144.651 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   3: 7363.655 ops/s
[info]                  ·gc.alloc.rate:                                  1452.907 MB/sec
[info]                  ·gc.alloc.rate.norm:                             310576.055 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.074 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 15.832 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1358.711 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       290440.603 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                854.237 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 7372.305 ops/s
[info]                  ·gc.alloc.rate:                                  1454.828 MB/sec
[info]                  ·gc.alloc.rate.norm:                             310580.413 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.022 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.659 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.825 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       290939.313 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 7398.821 ops/s
[info]                  ·gc.alloc.rate:                                  1460.037 MB/sec
[info]                  ·gc.alloc.rate.norm:                             310600.055 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.812 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       289917.094 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce":
[info]   7315.396 ±(99.9%) 342.256 ops/s [Average]
[info]   (min, avg, max) = (7195.708, 7315.396, 7398.821), stdev = 88.883
[info]   CI (99.9%): [6973.141, 7657.652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate":
[info]   1443.492 ±(99.9%) 67.724 MB/sec [Average]
[info]   (min, avg, max) = (1419.795, 1443.492, 1460.037), stdev = 17.588
[info]   CI (99.9%): [1375.768, 1511.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   310581.728 ±(99.9%) 40.113 B/op [Average]
[info]   (min, avg, max) = (310576.055, 310581.728, 310600.055), stdev = 10.417
[info]   CI (99.9%): [310541.615, 310621.841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.021 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.074), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   4.501 ±(99.9%) 25.478 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.501, 15.832), stdev = 6.617
[info]   CI (99.9%): [≈ 0, 29.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1494.862 ±(99.9%) 1161.787 MB/sec [Average]
[info]   (min, avg, max) = (1355.409, 1494.862, 2034.553), stdev = 301.712
[info]   CI (99.9%): [333.075, 2656.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   321939.618 ±(99.9%) 258444.857 B/op [Average]
[info]   (min, avg, max) = (289917.094, 321939.618, 441909.185), stdev = 67117.309
[info]   CI (99.9%): [63494.761, 580384.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 6.437 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 3.996), stdev = 1.672
[info]   CI (99.9%): [≈ 0, 7.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   228.917 ±(99.9%) 1374.763 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 228.917, 854.237), stdev = 357.022
[info]   CI (99.9%): [≈ 0, 1603.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 4.000), stdev = 0.894
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.200, 15.000), stdev = 4.919
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava
[info] # Run progress: 68.71% complete, ETA 00:35:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4230.859 ops/s
[info] # Warmup Iteration   2: 53473.291 ops/s
[info] # Warmup Iteration   3: 54054.132 ops/s
[info] # Warmup Iteration   4: 52975.330 ops/s
[info] # Warmup Iteration   5: 53186.854 ops/s
[info] Iteration   1: 53707.218 ops/s
[info]                  ·gc.alloc.rate:      502.063 MB/sec
[info]                  ·gc.alloc.rate.norm: 14712.008 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 54496.123 ops/s
[info]                  ·gc.alloc.rate:            509.418 MB/sec
[info]                  ·gc.alloc.rate.norm:       14712.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.812 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19488.615 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 54143.320 ops/s
[info]                  ·gc.alloc.rate:            506.084 MB/sec
[info]                  ·gc.alloc.rate.norm:       14712.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.729 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19614.571 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 53975.664 ops/s
[info]                  ·gc.alloc.rate:                   504.449 MB/sec
[info]                  ·gc.alloc.rate.norm:              14712.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.001 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        19656.915 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 19.424 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 54891.665 ops/s
[info]                  ·gc.alloc.rate:      513.066 MB/sec
[info]                  ·gc.alloc.rate.norm: 14712.007 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava":
[info]   54242.798 ±(99.9%) 1778.505 ops/s [Average]
[info]   (min, avg, max) = (53707.218, 54242.798, 54891.665), stdev = 461.872
[info]   CI (99.9%): [52464.293, 56021.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   507.016 ±(99.9%) 16.603 MB/sec [Average]
[info]   (min, avg, max) = (502.063, 507.016, 513.066), stdev = 4.312
[info]   CI (99.9%): [490.413, 523.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   14712.008 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (14712.007, 14712.008, 14712.008), stdev = 0.001
[info]   CI (99.9%): [14712.007, 14712.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   404.708 ±(99.9%) 1422.608 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 404.708, 674.812), stdev = 369.447
[info]   CI (99.9%): [≈ 0, 1827.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   11752.020 ±(99.9%) 41310.695 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11752.020, 19656.915), stdev = 10728.256
[info]   CI (99.9%): [≈ 0, 53062.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   3.885 ±(99.9%) 33.449 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.885, 19.424), stdev = 8.687
[info]   CI (99.9%): [≈ 0, 37.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 5.000), stdev = 2.739
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala
[info] # Run progress: 68.94% complete, ETA 00:35:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_456a8d2b/target/1bdf7fe1/jackson-module-afterburner-2.9.5.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 19004.020 ops/s
[info] # Warmup Iteration   2: 36021.840 ops/s
[info] # Warmup Iteration   3: 35983.725 ops/s
[info] # Warmup Iteration   4: 36228.531 ops/s
[info] # Warmup Iteration   5: 36113.731 ops/s
[info] Iteration   1: 36088.036 ops/s
[info]                  ·gc.alloc.rate:            537.218 MB/sec
[info]                  ·gc.alloc.rate.norm:       23431.749 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.065 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 29487.841 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 36058.468 ops/s
[info]                  ·gc.alloc.rate:                   536.800 MB/sec
[info]                  ·gc.alloc.rate.norm:              23431.996 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.075 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        29511.553 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 29.075 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 35968.010 ops/s
[info]                  ·gc.alloc.rate:            535.409 MB/sec
[info]                  ·gc.alloc.rate.norm:       23431.708 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.685 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 29614.533 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 36300.459 ops/s
[info]                  ·gc.alloc.rate:      540.411 MB/sec
[info]                  ·gc.alloc.rate.norm: 23432.028 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 36185.129 ops/s
[info]                  ·gc.alloc.rate:            538.809 MB/sec
[info]                  ·gc.alloc.rate.norm:       23431.779 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.859 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 29435.339 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala":
[info]   36120.020 ±(99.9%) 489.790 ops/s [Average]
[info]   (min, avg, max) = (35968.010, 36120.020, 36300.459), stdev = 127.197
[info]   CI (99.9%): [35630.230, 36609.811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   537.729 ±(99.9%) 7.424 MB/sec [Average]
[info]   (min, avg, max) = (535.409, 537.729, 540.411), stdev = 1.928
[info]   CI (99.9%): [530.305, 545.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   23431.852 ±(99.9%) 0.572 B/op [Average]
[info]   (min, avg, max) = (23431.708, 23431.852, 23432.028), stdev = 0.149
[info]   CI (99.9%): [23431.280, 23432.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   541.137 ±(99.9%) 1164.839 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 541.137, 676.859), stdev = 302.505
[info]   CI (99.9%): [≈ 0, 1705.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   23609.853 ±(99.9%) 50822.608 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 23609.853, 29614.533), stdev = 13198.470
[info]   CI (99.9%): [≈ 0, 74432.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   5.815 ±(99.9%) 50.070 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.815, 29.075), stdev = 13.003
[info]   CI (99.9%): [≈ 0, 55.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.000, 5.000), stdev = 2.236
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala
[info] # Run progress: 69.18% complete, ETA 00:34:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 64947.495 ops/s
[info] # Warmup Iteration   2: 72979.978 ops/s
[info] # Warmup Iteration   3: 73756.549 ops/s
[info] # Warmup Iteration   4: 72126.613 ops/s
[info] # Warmup Iteration   5: 73114.191 ops/s
[info] Iteration   1: 73388.835 ops/s
[info]                  ·gc.alloc.rate:      551.618 MB/sec
[info]                  ·gc.alloc.rate.norm: 11832.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 72773.706 ops/s
[info]                  ·gc.alloc.rate:            547.061 MB/sec
[info]                  ·gc.alloc.rate.norm:       11832.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.408 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14651.194 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 74048.236 ops/s
[info]                  ·gc.alloc.rate:            556.588 MB/sec
[info]                  ·gc.alloc.rate.norm:       11832.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.350 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14399.160 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 74174.963 ops/s
[info]                  ·gc.alloc.rate:            557.746 MB/sec
[info]                  ·gc.alloc.rate.norm:       11832.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.560 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14373.735 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 73994.785 ops/s
[info]                  ·gc.alloc.rate:            556.228 MB/sec
[info]                  ·gc.alloc.rate.norm:       11832.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.369 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14408.888 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala":
[info]   73676.105 ±(99.9%) 2266.446 ops/s [Average]
[info]   (min, avg, max) = (72773.706, 73676.105, 74174.963), stdev = 588.589
[info]   CI (99.9%): [71409.659, 75942.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   553.848 ±(99.9%) 17.157 MB/sec [Average]
[info]   (min, avg, max) = (547.061, 553.848, 557.746), stdev = 4.456
[info]   CI (99.9%): [536.691, 571.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   11832.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11832.005, 11832.006, 11832.006), stdev = 0.001
[info]   CI (99.9%): [11832.005, 11832.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   541.937 ±(99.9%) 1166.561 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 541.937, 677.560), stdev = 302.952
[info]   CI (99.9%): [≈ 0, 1708.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   11566.595 ±(99.9%) 24901.713 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11566.595, 14651.194), stdev = 6466.896
[info]   CI (99.9%): [≈ 0, 36468.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 69.41% complete, ETA 00:34:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 84084.591 ops/s
[info] # Warmup Iteration   2: 95710.984 ops/s
[info] # Warmup Iteration   3: 88677.898 ops/s
[info] # Warmup Iteration   4: 95891.963 ops/s
[info] # Warmup Iteration   5: 95913.823 ops/s
[info] Iteration   1: 95900.031 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 95886.949 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 95865.005 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 95968.978 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 95918.357 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   95907.864 ±(99.9%) 151.365 ops/s [Average]
[info]   (min, avg, max) = (95865.005, 95907.864, 95968.978), stdev = 39.309
[info]   CI (99.9%): [95756.498, 96059.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.004, 0.004, 0.004), stdev = 0.001
[info]   CI (99.9%): [0.004, 0.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson
[info] # Run progress: 69.65% complete, ETA 00:34:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2075.766 ops/s
[info] # Warmup Iteration   2: 5434.962 ops/s
[info] # Warmup Iteration   3: 5539.455 ops/s
[info] # Warmup Iteration   4: 5640.327 ops/s
[info] # Warmup Iteration   5: 5651.976 ops/s
[info] Iteration   1: 5672.143 ops/s
[info]                  ·gc.alloc.rate:            1630.050 MB/sec
[info]                  ·gc.alloc.rate.norm:       452351.023 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.193 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 375521.049 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 5583.346 ops/s
[info]                  ·gc.alloc.rate:                   1604.620 MB/sec
[info]                  ·gc.alloc.rate.norm:              452351.944 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2029.959 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        572257.770 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1126.492 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   3: 5678.063 ops/s
[info]                  ·gc.alloc.rate:                                  1631.843 MB/sec
[info]                  ·gc.alloc.rate.norm:                             452352.862 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.193 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 53.439 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.902 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       377524.282 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                184.608 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 5691.015 ops/s
[info]                  ·gc.alloc.rate:                                  1635.623 MB/sec
[info]                  ·gc.alloc.rate.norm:                             452351.127 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.552 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.611 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       376846.390 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 5679.996 ops/s
[info]                  ·gc.alloc.rate:                                  1632.401 MB/sec
[info]                  ·gc.alloc.rate.norm:                             452352.056 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.051 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 14.158 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2043.835 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       566363.911 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson":
[info]   5660.912 ±(99.9%) 169.024 ops/s [Average]
[info]   (min, avg, max) = (5583.346, 5660.912, 5691.015), stdev = 43.895
[info]   CI (99.9%): [5491.888, 5829.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1626.907 ±(99.9%) 48.597 MB/sec [Average]
[info]   (min, avg, max) = (1604.620, 1626.907, 1635.623), stdev = 12.621
[info]   CI (99.9%): [1578.310, 1675.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   452351.803 ±(99.9%) 2.901 B/op [Average]
[info]   (min, avg, max) = (452351.023, 452351.803, 452352.862), stdev = 0.753
[info]   CI (99.9%): [452348.901, 452354.704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.049 ±(99.9%) 0.320 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.049, 0.193), stdev = 0.083
[info]   CI (99.9%): [≈ 0, 0.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   13.630 ±(99.9%) 88.808 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13.630, 53.439), stdev = 23.063
[info]   CI (99.9%): [≈ 0, 102.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1630.300 ±(99.9%) 1429.442 MB/sec [Average]
[info]   (min, avg, max) = (1353.193, 1630.300, 2043.835), stdev = 371.222
[info]   CI (99.9%): [200.858, 3059.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   453702.680 ±(99.9%) 406467.650 B/op [Average]
[info]   (min, avg, max) = (375521.049, 453702.680, 572257.770), stdev = 105558.358
[info]   CI (99.9%): [47235.030, 860170.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.687 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   262.220 ±(99.9%) 1885.702 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 262.220, 1126.492), stdev = 489.711
[info]   CI (99.9%): [≈ 0, 2147.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.000, 14.000), stdev = 4.796
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce
[info] # Run progress: 69.88% complete, ETA 00:34:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3311768.519 ops/s
[info] # Warmup Iteration   2: 4907589.754 ops/s
[info] # Warmup Iteration   3: 4887503.083 ops/s
[info] # Warmup Iteration   4: 4868575.309 ops/s
[info] # Warmup Iteration   5: 4949463.848 ops/s
[info] Iteration   1: 4958369.798 ops/s
[info]                  ·gc.alloc.rate:            3075.188 MB/sec
[info]                  ·gc.alloc.rate.norm:       976.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2726.130 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 865.217 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 4938477.493 ops/s
[info]                  ·gc.alloc.rate:                                  3062.634 MB/sec
[info]                  ·gc.alloc.rate.norm:                             976.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3407.392 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1085.868 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   3: 4955024.070 ops/s
[info]                  ·gc.alloc.rate:                                  3073.099 MB/sec
[info]                  ·gc.alloc.rate.norm:                             976.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2726.012 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       865.767 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 4951089.190 ops/s
[info]                  ·gc.alloc.rate:                                  3070.236 MB/sec
[info]                  ·gc.alloc.rate.norm:                             976.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3407.155 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1083.104 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 4960635.263 ops/s
[info]                  ·gc.alloc.rate:                                  3076.489 MB/sec
[info]                  ·gc.alloc.rate.norm:                             976.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.949 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       864.793 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce":
[info]   4952719.163 ±(99.9%) 33645.733 ops/s [Average]
[info]   (min, avg, max) = (4938477.493, 4952719.163, 4960635.263), stdev = 8737.690
[info]   CI (99.9%): [4919073.430, 4986364.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.alloc.rate":
[info]   3071.529 ±(99.9%) 21.200 MB/sec [Average]
[info]   (min, avg, max) = (3062.634, 3071.529, 3076.489), stdev = 5.506
[info]   CI (99.9%): [3050.329, 3092.729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   976.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (976.000, 976.000, 976.000), stdev = 0.001
[info]   CI (99.9%): [976.000, 976.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.005 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2998.528 ±(99.9%) 1436.799 MB/sec [Average]
[info]   (min, avg, max) = (2725.949, 2998.528, 3407.392), stdev = 373.132
[info]   CI (99.9%): [1561.728, 4435.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   952.950 ±(99.9%) 462.385 B/op [Average]
[info]   (min, avg, max) = (864.793, 952.950, 1085.868), stdev = 120.080
[info]   CI (99.9%): [490.565, 1415.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 9.000), stdev = 1.924
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava
[info] # Run progress: 70.12% complete, ETA 00:33:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.916 ops/s
[info] # Warmup Iteration   2: 31511995.436 ops/s
[info] # Warmup Iteration   3: 37299272.117 ops/s
[info] # Warmup Iteration   4: 37690088.948 ops/s
[info] # Warmup Iteration   5: 37850921.778 ops/s
[info] Iteration   1: 38038427.347 ops/s
[info]                  ·gc.alloc.rate:      386.724 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 38007759.500 ops/s
[info]                  ·gc.alloc.rate:            386.345 MB/sec
[info]                  ·gc.alloc.rate.norm:       16.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.719 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 27.943 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 37508933.995 ops/s
[info]                  ·gc.alloc.rate:      381.283 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 37193465.379 ops/s
[info]                  ·gc.alloc.rate:            378.034 MB/sec
[info]                  ·gc.alloc.rate.norm:       16.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.684 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 28.556 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 37216225.970 ops/s
[info]                  ·gc.alloc.rate:            378.377 MB/sec
[info]                  ·gc.alloc.rate.norm:       16.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.853 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 28.537 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava":
[info]   37592962.438 ±(99.9%) 1586592.207 ops/s [Average]
[info]   (min, avg, max) = (37193465.379, 37592962.438, 38038427.347), stdev = 412032.958
[info]   CI (99.9%): [36006370.231, 39179554.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   382.153 ±(99.9%) 16.160 MB/sec [Average]
[info]   (min, avg, max) = (378.034, 382.153, 386.724), stdev = 4.197
[info]   CI (99.9%): [365.993, 398.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   16.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16.000, 16.000, 16.000), stdev = 0.001
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   404.851 ±(99.9%) 1423.109 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 404.851, 674.853), stdev = 369.577
[info]   CI (99.9%): [≈ 0, 1827.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   17.007 ±(99.9%) 59.789 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17.007, 28.556), stdev = 15.527
[info]   CI (99.9%): [≈ 0, 76.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 5.000), stdev = 2.739
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala
[info] # Run progress: 70.35% complete, ETA 00:33:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2733171.404 ops/s
[info] # Warmup Iteration   2: 7148946.234 ops/s
[info] # Warmup Iteration   3: 7240332.842 ops/s
[info] # Warmup Iteration   4: 7138543.047 ops/s
[info] # Warmup Iteration   5: 7257798.463 ops/s
[info] Iteration   1: 7228683.093 ops/s
[info]                  ·gc.alloc.rate:                                  2719.602 MB/sec
[info]                  ·gc.alloc.rate.norm:                             592.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.042 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2726.514 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       593.505 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 7230800.477 ops/s
[info]                  ·gc.alloc.rate:            2719.362 MB/sec
[info]                  ·gc.alloc.rate.norm:       592.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2725.472 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 593.330 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 7230084.266 ops/s
[info]                  ·gc.alloc.rate:            2719.353 MB/sec
[info]                  ·gc.alloc.rate.norm:       592.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2725.657 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 593.372 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 7324810.473 ops/s
[info]                  ·gc.alloc.rate:            2755.892 MB/sec
[info]                  ·gc.alloc.rate.norm:       592.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2726.523 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 585.691 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   5: 7381599.831 ops/s
[info]                  ·gc.alloc.rate:                                  2776.186 MB/sec
[info]                  ·gc.alloc.rate.norm:                             592.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.432 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       581.177 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala":
[info]   7279195.628 ±(99.9%) 271414.868 ops/s [Average]
[info]   (min, avg, max) = (7228683.093, 7279195.628, 7381599.831), stdev = 70485.579
[info]   CI (99.9%): [7007780.761, 7550610.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2738.079 ±(99.9%) 102.093 MB/sec [Average]
[info]   (min, avg, max) = (2719.353, 2738.079, 2776.186), stdev = 26.513
[info]   CI (99.9%): [2635.986, 2840.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   592.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (592.000, 592.000, 592.000), stdev = 0.001
[info]   CI (99.9%): [592.000, 592.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.009 ±(99.9%) 0.071 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.042), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.002 ±(99.9%) 0.015 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.009), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   2725.919 ±(99.9%) 2.130 MB/sec [Average]
[info]   (min, avg, max) = (2725.432, 2725.919, 2726.523), stdev = 0.553
[info]   CI (99.9%): [2723.789, 2728.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   589.415 ±(99.9%) 21.905 B/op [Average]
[info]   (min, avg, max) = (581.177, 589.415, 593.505), stdev = 5.689
[info]   CI (99.9%): [567.510, 611.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.600, 13.000), stdev = 3.647
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala
[info] # Run progress: 70.59% complete, ETA 00:33:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33891220.770 ops/s
[info] # Warmup Iteration   2: 35671617.779 ops/s
[info] # Warmup Iteration   3: 35486311.233 ops/s
[info] # Warmup Iteration   4: 35594850.674 ops/s
[info] # Warmup Iteration   5: 35626752.804 ops/s
[info] Iteration   1: 35620030.964 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 35552482.790 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 35650774.221 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 35616079.435 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 35641887.737 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala":
[info]   35616251.030 ±(99.9%) 148259.758 ops/s [Average]
[info]   (min, avg, max) = (35552482.790, 35616251.030, 35650774.221), stdev = 38502.588
[info]   CI (99.9%): [35467991.271, 35764510.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala
[info] # Run progress: 70.82% complete, ETA 00:33:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22735809.686 ops/s
[info] # Warmup Iteration   2: 27946978.448 ops/s
[info] # Warmup Iteration   3: 27697165.534 ops/s
[info] # Warmup Iteration   4: 27831876.945 ops/s
[info] # Warmup Iteration   5: 28014598.785 ops/s
[info] Iteration   1: 28108000.302 ops/s
[info]                  ·gc.alloc.rate:            1000.028 MB/sec
[info]                  ·gc.alloc.rate.norm:       56.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.081 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 37.972 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 28119843.019 ops/s
[info]                  ·gc.alloc.rate:            1000.451 MB/sec
[info]                  ·gc.alloc.rate.norm:       56.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.145 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 75.910 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 27658663.163 ops/s
[info]                  ·gc.alloc.rate:            984.153 MB/sec
[info]                  ·gc.alloc.rate.norm:       56.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.145 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 38.588 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 28409058.483 ops/s
[info]                  ·gc.alloc.rate:            1010.870 MB/sec
[info]                  ·gc.alloc.rate.norm:       56.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.142 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 37.568 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 27920630.666 ops/s
[info]                  ·gc.alloc.rate:            993.326 MB/sec
[info]                  ·gc.alloc.rate.norm:       56.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.082 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 76.451 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala":
[info]   28043239.127 ±(99.9%) 1066457.150 ops/s [Average]
[info]   (min, avg, max) = (27658663.163, 28043239.127, 28409058.483), stdev = 276955.535
[info]   CI (99.9%): [26976781.977, 29109696.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.alloc.rate":
[info]   997.766 ±(99.9%) 37.977 MB/sec [Average]
[info]   (min, avg, max) = (984.153, 997.766, 1010.870), stdev = 9.862
[info]   CI (99.9%): [959.789, 1035.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.alloc.rate.norm":
[info]   56.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (56.000, 56.000, 56.000), stdev = 0.001
[info]   CI (99.9%): [56.000, 56.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.G1_Old_Gen":
[info]   949.319 ±(99.9%) 1429.940 MB/sec [Average]
[info]   (min, avg, max) = (678.081, 949.319, 1356.145), stdev = 371.351
[info]   CI (99.9%): [≈ 0, 2379.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.G1_Old_Gen.norm":
[info]   53.297 ±(99.9%) 80.452 B/op [Average]
[info]   (min, avg, max) = (37.568, 53.297, 76.451), stdev = 20.893
[info]   CI (99.9%): [≈ 0, 133.750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 7.000), stdev = 1.817
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson
[info] # Run progress: 71.06% complete, ETA 00:32:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3136736.075 ops/s
[info] # Warmup Iteration   2: 6097161.474 ops/s
[info] # Warmup Iteration   3: 6155813.092 ops/s
[info] # Warmup Iteration   4: 6176416.104 ops/s
[info] # Warmup Iteration   5: 6218084.173 ops/s
[info] Iteration   1: 6219727.140 ops/s
[info]                  ·gc.alloc.rate:                                  3003.078 MB/sec
[info]                  ·gc.alloc.rate.norm:                             760.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3406.795 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       862.170 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 6266016.891 ops/s
[info]                  ·gc.alloc.rate:            3025.737 MB/sec
[info]                  ·gc.alloc.rate.norm:       760.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2725.704 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 684.638 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 6133662.069 ops/s
[info]                  ·gc.alloc.rate:                                  2961.639 MB/sec
[info]                  ·gc.alloc.rate.norm:                             760.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3406.906 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       874.262 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        13.000 ms
[info] Iteration   4: 6258946.325 ops/s
[info]                  ·gc.alloc.rate:            3021.964 MB/sec
[info]                  ·gc.alloc.rate.norm:       760.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2725.432 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 685.425 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 6252454.029 ops/s
[info]                  ·gc.alloc.rate:                                  3019.163 MB/sec
[info]                  ·gc.alloc.rate.norm:                             760.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.651 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       686.116 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson":
[info]   6226161.291 ±(99.9%) 210487.445 ops/s [Average]
[info]   (min, avg, max) = (6133662.069, 6226161.291, 6266016.891), stdev = 54662.921
[info]   CI (99.9%): [6015673.846, 6436648.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3006.316 ±(99.9%) 101.762 MB/sec [Average]
[info]   (min, avg, max) = (2961.639, 3006.316, 3025.737), stdev = 26.427
[info]   CI (99.9%): [2904.555, 3108.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   760.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (760.000, 760.000, 760.000), stdev = 0.001
[info]   CI (99.9%): [760.000, 760.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.005 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2998.097 ±(99.9%) 1436.823 MB/sec [Average]
[info]   (min, avg, max) = (2725.432, 2998.097, 3406.906), stdev = 373.138
[info]   CI (99.9%): [1561.274, 4434.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   758.522 ±(99.9%) 385.946 B/op [Average]
[info]   (min, avg, max) = (684.638, 758.522, 874.262), stdev = 100.229
[info]   CI (99.9%): [372.576, 1144.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.600, 13.000), stdev = 3.647
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce
[info] # Run progress: 71.29% complete, ETA 00:32:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14067677.787 ops/s
[info] # Warmup Iteration   2: 21223898.773 ops/s
[info] # Warmup Iteration   3: 21945699.313 ops/s
[info] # Warmup Iteration   4: 21843752.592 ops/s
[info] # Warmup Iteration   5: 22029807.851 ops/s
[info] Iteration   1: 21324573.726 ops/s
[info]                  ·gc.alloc.rate:                   1950.965 MB/sec
[info]                  ·gc.alloc.rate.norm:              144.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2034.221 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        150.145 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.246 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 22182086.210 ops/s
[info]                  ·gc.alloc.rate:                                  2029.211 MB/sec
[info]                  ·gc.alloc.rate.norm:                             144.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.141 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.050 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       145.053 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 22252366.835 ops/s
[info]                  ·gc.alloc.rate:            2036.276 MB/sec
[info]                  ·gc.alloc.rate.norm:       144.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.697 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 144.596 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 22257162.352 ops/s
[info]                  ·gc.alloc.rate:                                  2036.177 MB/sec
[info]                  ·gc.alloc.rate.norm:                             144.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.130 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       144.563 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 22238509.911 ops/s
[info]                  ·gc.alloc.rate:            2034.440 MB/sec
[info]                  ·gc.alloc.rate.norm:       144.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.057 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 144.681 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce":
[info]   22050939.807 ±(99.9%) 1567796.416 ops/s [Average]
[info]   (min, avg, max) = (21324573.726, 22050939.807, 22257162.352), stdev = 407151.750
[info]   CI (99.9%): [20483143.391, 23618736.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.alloc.rate":
[info]   2017.414 ±(99.9%) 143.463 MB/sec [Average]
[info]   (min, avg, max) = (1950.965, 2017.414, 2036.276), stdev = 37.257
[info]   CI (99.9%): [1873.950, 2160.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   144.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (144.000, 144.000, 144.000), stdev = 0.001
[info]   CI (99.9%): [144.000, 144.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.029 ±(99.9%) 0.242 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.141), stdev = 0.063
[info]   CI (99.9%): [≈ 0, 0.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.002 ±(99.9%) 0.017 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.010), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   2042.231 ±(99.9%) 17.273 MB/sec [Average]
[info]   (min, avg, max) = (2034.221, 2042.231, 2044.697), stdev = 4.486
[info]   CI (99.9%): [2024.958, 2059.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   145.807 ±(99.9%) 9.368 B/op [Average]
[info]   (min, avg, max) = (144.563, 145.807, 150.145), stdev = 2.433
[info]   CI (99.9%): [136.440, 155.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   0.049 ±(99.9%) 0.423 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.049, 0.246), stdev = 0.110
[info]   CI (99.9%): [≈ 0, 0.472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 12.000), stdev = 3.715
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava
[info] # Run progress: 71.53% complete, ETA 00:32:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.935 ops/s
[info] # Warmup Iteration   2: 52938670.883 ops/s
[info] # Warmup Iteration   3: 54049967.555 ops/s
[info] # Warmup Iteration   4: 54938694.852 ops/s
[info] # Warmup Iteration   5: 55348976.623 ops/s
[info] Iteration   1: 54703247.253 ops/s
[info]                  ·gc.alloc.rate:            1668.593 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2024.686 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 58.244 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   2: 53190529.936 ops/s
[info]                  ·gc.alloc.rate:            1622.361 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1349.661 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 39.932 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 53960375.153 ops/s
[info]                  ·gc.alloc.rate:                                  1645.745 MB/sec
[info]                  ·gc.alloc.rate.norm:                             48.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.476 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2035.061 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       59.355 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     6.661 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                0.194 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   4: 54747047.119 ops/s
[info]                  ·gc.alloc.rate:                                  1669.897 MB/sec
[info]                  ·gc.alloc.rate.norm:                             48.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.050 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1363.054 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       39.180 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 54692133.010 ops/s
[info]                  ·gc.alloc.rate:                                  1667.845 MB/sec
[info]                  ·gc.alloc.rate.norm:                             48.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.180 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       58.831 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava":
[info]   54258666.494 ±(99.9%) 2621518.229 ops/s [Average]
[info]   (min, avg, max) = (53190529.936, 54258666.494, 54747047.119), stdev = 680799.959
[info]   CI (99.9%): [51637148.265, 56880184.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   1654.888 ±(99.9%) 79.908 MB/sec [Average]
[info]   (min, avg, max) = (1622.361, 1654.888, 1669.897), stdev = 20.752
[info]   CI (99.9%): [1574.980, 1734.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.105 ±(99.9%) 0.802 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.105, 0.476), stdev = 0.208
[info]   CI (99.9%): [≈ 0, 0.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.003 ±(99.9%) 0.023 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.014), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   1763.328 ±(99.9%) 1430.924 MB/sec [Average]
[info]   (min, avg, max) = (1349.661, 1763.328, 2044.180), stdev = 371.606
[info]   CI (99.9%): [332.405, 3194.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   51.108 ±(99.9%) 40.649 B/op [Average]
[info]   (min, avg, max) = (39.180, 51.108, 59.355), stdev = 10.556
[info]   CI (99.9%): [10.459, 91.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   1.332 ±(99.9%) 11.471 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.332, 6.661), stdev = 2.979
[info]   CI (99.9%): [≈ 0, 12.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.039 ±(99.9%) 0.335 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.039, 0.194), stdev = 0.087
[info]   CI (99.9%): [≈ 0, 0.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.200, 15.000), stdev = 5.167
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala
[info] # Run progress: 71.76% complete, ETA 00:31:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2960407.349 ops/s
[info] # Warmup Iteration   2: 8636015.590 ops/s
[info] # Warmup Iteration   3: 8780577.497 ops/s
[info] # Warmup Iteration   4: 8827065.702 ops/s
[info] # Warmup Iteration   5: 8777346.016 ops/s
[info] Iteration   1: 8777460.395 ops/s
[info]                  ·gc.alloc.rate:                                  2141.223 MB/sec
[info]                  ·gc.alloc.rate.norm:                             384.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.028 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2034.653 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       364.888 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                0.836 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   2: 8913446.997 ops/s
[info]                  ·gc.alloc.rate:                                  2175.001 MB/sec
[info]                  ·gc.alloc.rate.norm:                             384.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.049 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2726.101 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       481.298 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 8885060.079 ops/s
[info]                  ·gc.alloc.rate:                                  2167.489 MB/sec
[info]                  ·gc.alloc.rate.norm:                             384.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.036 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       362.129 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 8915074.084 ops/s
[info]                  ·gc.alloc.rate:                                  2174.915 MB/sec
[info]                  ·gc.alloc.rate.norm:                             384.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.064 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       360.897 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 8941658.353 ops/s
[info]                  ·gc.alloc.rate:                                  2181.309 MB/sec
[info]                  ·gc.alloc.rate.norm:                             384.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2043.948 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       359.819 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala":
[info]   8886539.982 ±(99.9%) 247137.883 ops/s [Average]
[info]   (min, avg, max) = (8777460.395, 8886539.982, 8941658.353), stdev = 64180.924
[info]   CI (99.9%): [8639402.098, 9133677.865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   2167.987 ±(99.9%) 60.616 MB/sec [Average]
[info]   (min, avg, max) = (2141.223, 2167.987, 2181.309), stdev = 15.742
[info]   CI (99.9%): [2107.371, 2228.604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   384.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (384.000, 384.000, 384.000), stdev = 0.001
[info]   CI (99.9%): [384.000, 384.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.016 ±(99.9%) 0.083 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0.016, 0.049), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.003 ±(99.9%) 0.015 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.003, 0.009), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   2178.560 ±(99.9%) 1178.726 MB/sec [Average]
[info]   (min, avg, max) = (2034.653, 2178.560, 2726.101), stdev = 306.111
[info]   CI (99.9%): [999.834, 3357.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   385.806 ±(99.9%) 205.682 B/op [Average]
[info]   (min, avg, max) = (359.819, 385.806, 481.298), stdev = 53.415
[info]   CI (99.9%): [180.124, 591.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.167 ±(99.9%) 1.440 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.167, 0.836), stdev = 0.374
[info]   CI (99.9%): [≈ 0, 1.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 11.000), stdev = 3.209
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala
[info] # Run progress: 72.00% complete, ETA 00:31:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32231681.083 ops/s
[info] # Warmup Iteration   2: 42876017.676 ops/s
[info] # Warmup Iteration   3: 44876242.139 ops/s
[info] # Warmup Iteration   4: 44993987.909 ops/s
[info] # Warmup Iteration   5: 45909533.847 ops/s
[info] Iteration   1: 45441304.569 ops/s
[info]                  ·gc.alloc.rate:                   924.175 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             677.665 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        23.464 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.023 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 45627435.844 ops/s
[info]                  ·gc.alloc.rate:            927.734 MB/sec
[info]                  ·gc.alloc.rate.norm:       32.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.596 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 46.758 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 44775269.574 ops/s
[info]                  ·gc.alloc.rate:            910.530 MB/sec
[info]                  ·gc.alloc.rate.norm:       32.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.535 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23.812 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 44817987.200 ops/s
[info]                  ·gc.alloc.rate:            911.276 MB/sec
[info]                  ·gc.alloc.rate.norm:       32.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.445 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23.789 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 44569726.651 ops/s
[info]                  ·gc.alloc.rate:            906.098 MB/sec
[info]                  ·gc.alloc.rate.norm:       32.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.768 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 47.845 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala":
[info]   45046344.768 ±(99.9%) 1771352.556 ops/s [Average]
[info]   (min, avg, max) = (44569726.651, 45046344.768, 45627435.844), stdev = 460014.634
[info]   CI (99.9%): [43274992.212, 46817697.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   915.963 ±(99.9%) 36.265 MB/sec [Average]
[info]   (min, avg, max) = (906.098, 915.963, 927.734), stdev = 9.418
[info]   CI (99.9%): [879.697, 952.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   32.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (32.000, 32.000, 32.000), stdev = 0.001
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   948.602 ±(99.9%) 1429.187 MB/sec [Average]
[info]   (min, avg, max) = (677.445, 948.602, 1355.596), stdev = 371.155
[info]   CI (99.9%): [≈ 0, 2377.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   33.134 ±(99.9%) 49.827 B/op [Average]
[info]   (min, avg, max) = (23.464, 33.134, 47.845), stdev = 12.940
[info]   CI (99.9%): [≈ 0, 82.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.005 ±(99.9%) 0.040 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.023), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 7.000), stdev = 2.049
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 72.24% complete, ETA 00:31:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 34978230.159 ops/s
[info] # Warmup Iteration   2: 49447849.059 ops/s
[info] # Warmup Iteration   3: 49516772.706 ops/s
[info] # Warmup Iteration   4: 50916022.534 ops/s
[info] # Warmup Iteration   5: 50235147.575 ops/s
[info] Iteration   1: 50892281.254 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 50513893.755 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 50773442.748 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 50920183.207 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 50865258.715 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc":
[info]   50793011.936 ±(99.9%) 637210.134 ops/s [Average]
[info]   (min, avg, max) = (50513893.755, 50793011.936, 50920183.207), stdev = 165481.448
[info]   CI (99.9%): [50155801.801, 51430222.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala
[info] # Run progress: 72.47% complete, ETA 00:31:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42302054.670 ops/s
[info] # Warmup Iteration   2: 40222378.409 ops/s
[info] # Warmup Iteration   3: 40483016.991 ops/s
[info] # Warmup Iteration   4: 40489163.514 ops/s
[info] # Warmup Iteration   5: 40387142.413 ops/s
[info] Iteration   1: 40529675.360 ops/s
[info]                  ·gc.alloc.rate:                                  2060.263 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.077 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.215 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       79.260 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                0.129 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 40701215.486 ops/s
[info]                  ·gc.alloc.rate:                                  2069.571 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2045.178 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       79.057 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   3: 40684757.883 ops/s
[info]                  ·gc.alloc.rate:            2068.444 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.695 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 79.082 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 40722411.076 ops/s
[info]                  ·gc.alloc.rate:            2069.703 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.168 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 79.013 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 40689496.437 ops/s
[info]                  ·gc.alloc.rate:            2067.900 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.021 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 79.076 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala":
[info]   40665511.248 ±(99.9%) 297706.663 ops/s [Average]
[info]   (min, avg, max) = (40529675.360, 40665511.248, 40722411.076), stdev = 77313.475
[info]   CI (99.9%): [40367804.585, 40963217.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.alloc.rate":
[info]   2067.176 ±(99.9%) 15.166 MB/sec [Average]
[info]   (min, avg, max) = (2060.263, 2067.176, 2069.703), stdev = 3.938
[info]   CI (99.9%): [2052.010, 2082.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.alloc.rate.norm":
[info]   80.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (80.000, 80.000, 80.000), stdev = 0.001
[info]   CI (99.9%): [80.000, 80.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.016 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.077), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.001 ±(99.9%) 0.005 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.G1_Old_Gen":
[info]   2043.855 ±(99.9%) 5.949 MB/sec [Average]
[info]   (min, avg, max) = (2041.215, 2043.855, 2045.178), stdev = 1.545
[info]   CI (99.9%): [2037.906, 2049.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.G1_Old_Gen.norm":
[info]   79.098 ±(99.9%) 0.365 B/op [Average]
[info]   (min, avg, max) = (79.013, 79.098, 79.260), stdev = 0.095
[info]   CI (99.9%): [78.732, 79.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.026 ±(99.9%) 0.223 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.129), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 6.000), stdev = 1.225
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson
[info] # Run progress: 72.71% complete, ETA 00:30:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1352500.503 ops/s
[info] # Warmup Iteration   2: 2084704.238 ops/s
[info] # Warmup Iteration   3: 2136821.873 ops/s
[info] # Warmup Iteration   4: 2152879.678 ops/s
[info] # Warmup Iteration   5: 2172783.556 ops/s
[info] Iteration   1: 2148414.451 ops/s
[info]                  ·gc.alloc.rate:            1725.908 MB/sec
[info]                  ·gc.alloc.rate.norm:       1264.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2032.993 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1488.899 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 2173114.402 ops/s
[info]                  ·gc.alloc.rate:                   1744.990 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.697 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        981.288 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.895 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 2185374.921 ops/s
[info]                  ·gc.alloc.rate:                                  1755.129 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1264.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.228 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.164 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.438 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1472.353 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 2187292.494 ops/s
[info]                  ·gc.alloc.rate:                                  1756.519 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1264.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.160 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1470.988 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 2189389.555 ops/s
[info]                  ·gc.alloc.rate:            1758.262 MB/sec
[info]                  ·gc.alloc.rate.norm:       1264.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.801 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 979.707 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson":
[info]   2176717.164 ±(99.9%) 65613.869 ops/s [Average]
[info]   (min, avg, max) = (2148414.451, 2176717.164, 2189389.555), stdev = 17039.713
[info]   CI (99.9%): [2111103.296, 2242331.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1748.161 ±(99.9%) 51.865 MB/sec [Average]
[info]   (min, avg, max) = (1725.908, 1748.161, 1758.262), stdev = 13.469
[info]   CI (99.9%): [1696.296, 1800.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1264.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1264.000, 1264.000, 1264.000), stdev = 0.001
[info]   CI (99.9%): [1264.000, 1264.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.046 ±(99.9%) 0.392 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.228), stdev = 0.102
[info]   CI (99.9%): [≈ 0, 0.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.033 ±(99.9%) 0.282 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.164), stdev = 0.073
[info]   CI (99.9%): [≈ 0, 0.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1767.818 ±(99.9%) 1438.086 MB/sec [Average]
[info]   (min, avg, max) = (1354.697, 1767.818, 2044.438), stdev = 373.466
[info]   CI (99.9%): [329.732, 3205.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   1278.647 ±(99.9%) 1048.392 B/op [Average]
[info]   (min, avg, max) = (979.707, 1278.647, 1488.899), stdev = 272.264
[info]   CI (99.9%): [230.255, 2327.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   0.579 ±(99.9%) 4.985 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.579, 2.895), stdev = 1.295
[info]   CI (99.9%): [≈ 0, 5.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 13.000), stdev = 4.324
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 72.94% complete, ETA 00:30:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 128459.338 ops/s
[info] # Warmup Iteration   2: 139314.677 ops/s
[info] # Warmup Iteration   3: 138007.088 ops/s
[info] # Warmup Iteration   4: 140251.059 ops/s
[info] # Warmup Iteration   5: 140800.059 ops/s
[info] Iteration   1: 139506.326 ops/s
[info]                  ·gc.alloc.rate:                                  2558.836 MB/sec
[info]                  ·gc.alloc.rate.norm:                             28872.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.053 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.440 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       30751.836 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   2: 141858.146 ops/s
[info]                  ·gc.alloc.rate:            2603.169 MB/sec
[info]                  ·gc.alloc.rate.norm:       28872.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2726.696 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 30242.055 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 142060.664 ops/s
[info]                  ·gc.alloc.rate:            2605.798 MB/sec
[info]                  ·gc.alloc.rate.norm:       28872.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2725.474 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 30197.997 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 141789.755 ops/s
[info]                  ·gc.alloc.rate:                                  2600.630 MB/sec
[info]                  ·gc.alloc.rate.norm:                             28872.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.044 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2043.877 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       22690.977 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 141998.810 ops/s
[info]                  ·gc.alloc.rate:                                  2605.281 MB/sec
[info]                  ·gc.alloc.rate.norm:                             28872.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.042 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2726.084 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       30210.754 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala":
[info]   141442.740 ±(99.9%) 4188.946 ops/s [Average]
[info]   (min, avg, max) = (139506.326, 141442.740, 142060.664), stdev = 1087.856
[info]   CI (99.9%): [137253.794, 145631.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2594.743 ±(99.9%) 77.689 MB/sec [Average]
[info]   (min, avg, max) = (2558.836, 2594.743, 2605.798), stdev = 20.176
[info]   CI (99.9%): [2517.054, 2672.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   28872.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (28872.003, 28872.003, 28872.003), stdev = 0.001
[info]   CI (99.9%): [28872.003, 28872.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.009 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.005), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.028 ±(99.9%) 0.099 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.053), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   2589.514 ±(99.9%) 1174.526 MB/sec [Average]
[info]   (min, avg, max) = (2043.877, 2589.514, 2726.696), stdev = 305.021
[info]   CI (99.9%): [1414.988, 3764.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   28818.724 ±(99.9%) 13220.700 B/op [Average]
[info]   (min, avg, max) = (22690.977, 28818.724, 30751.836), stdev = 3433.374
[info]   CI (99.9%): [15598.024, 42039.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 12.000), stdev = 3.564
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 73.18% complete, ETA 00:30:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7001.784 ops/s
[info] # Warmup Iteration   2: 15221.950 ops/s
[info] # Warmup Iteration   3: 15706.785 ops/s
[info] # Warmup Iteration   4: 15714.960 ops/s
[info] # Warmup Iteration   5: 15642.836 ops/s
[info] Iteration   1: 15771.166 ops/s
[info]                  ·gc.alloc.rate:            1246.915 MB/sec
[info]                  ·gc.alloc.rate.norm:       124440.028 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.373 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 67600.748 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 15733.926 ops/s
[info]                  ·gc.alloc.rate:            1244.117 MB/sec
[info]                  ·gc.alloc.rate.norm:       124440.026 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.639 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 135394.702 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 15385.644 ops/s
[info]                  ·gc.alloc.rate:            1216.398 MB/sec
[info]                  ·gc.alloc.rate.norm:       124440.033 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.320 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 138447.461 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 15772.857 ops/s
[info]                  ·gc.alloc.rate:                   1246.970 MB/sec
[info]                  ·gc.alloc.rate.norm:              124440.026 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.970 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        135117.894 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 398.774 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 15879.897 ops/s
[info]                  ·gc.alloc.rate:                                  1255.675 MB/sec
[info]                  ·gc.alloc.rate.norm:                             124440.026 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.028 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.772 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.230 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       134999.869 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                66.015 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson":
[info]   15708.698 ±(99.9%) 726.354 ops/s [Average]
[info]   (min, avg, max) = (15385.644, 15708.698, 15879.897), stdev = 188.632
[info]   CI (99.9%): [14982.344, 16435.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1242.015 ±(99.9%) 57.625 MB/sec [Average]
[info]   (min, avg, max) = (1216.398, 1242.015, 1255.675), stdev = 14.965
[info]   CI (99.9%): [1184.390, 1299.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   124440.028 ±(99.9%) 0.012 B/op [Average]
[info]   (min, avg, max) = (124440.026, 124440.028, 124440.033), stdev = 0.003
[info]   CI (99.9%): [124440.015, 124440.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.006 ±(99.9%) 0.048 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.028), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.554 ±(99.9%) 4.774 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.554, 2.772), stdev = 1.240
[info]   CI (99.9%): [≈ 0, 5.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1220.106 ±(99.9%) 1168.362 MB/sec [Average]
[info]   (min, avg, max) = (677.373, 1220.106, 1362.230), stdev = 303.420
[info]   CI (99.9%): [51.745, 2388.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   122312.135 ±(99.9%) 117898.334 B/op [Average]
[info]   (min, avg, max) = (67600.748, 122312.135, 138447.461), stdev = 30617.823
[info]   CI (99.9%): [4413.801, 240210.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.687 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   92.958 ±(99.9%) 667.431 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 92.958, 398.774), stdev = 173.330
[info]   CI (99.9%): [≈ 0, 760.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.600, 10.000), stdev = 2.881
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 73.41% complete, ETA 00:30:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 71874.458 ops/s
[info] # Warmup Iteration   2: 127354.569 ops/s
[info] # Warmup Iteration   3: 128062.716 ops/s
[info] # Warmup Iteration   4: 128009.648 ops/s
[info] # Warmup Iteration   5: 130001.239 ops/s
[info] Iteration   1: 132192.076 ops/s
[info]                  ·gc.alloc.rate:                   1468.722 MB/sec
[info]                  ·gc.alloc.rate.norm:              17488.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.450 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        16115.467 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 7.931 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 132248.690 ops/s
[info]                  ·gc.alloc.rate:            1469.113 MB/sec
[info]                  ·gc.alloc.rate.norm:       17488.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.914 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16116.693 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 130921.875 ops/s
[info]                  ·gc.alloc.rate:                                  1454.647 MB/sec
[info]                  ·gc.alloc.rate.norm:                             17488.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2034.992 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       24465.012 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                56.057 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   4: 132198.313 ops/s
[info]                  ·gc.alloc.rate:                                  1468.719 MB/sec
[info]                  ·gc.alloc.rate.norm:                             17488.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.066 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.788 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.731 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       16226.008 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 130147.707 ops/s
[info]                  ·gc.alloc.rate:            1445.965 MB/sec
[info]                  ·gc.alloc.rate.norm:       17488.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.800 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16482.180 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala":
[info]   131541.732 ±(99.9%) 3694.093 ops/s [Average]
[info]   (min, avg, max) = (130147.707, 131541.732, 132248.690), stdev = 959.344
[info]   CI (99.9%): [127847.640, 135235.825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1461.433 ±(99.9%) 40.865 MB/sec [Average]
[info]   (min, avg, max) = (1445.965, 1461.433, 1469.113), stdev = 10.613
[info]   CI (99.9%): [1420.568, 1502.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   17488.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (17488.003, 17488.003, 17488.003), stdev = 0.001
[info]   CI (99.9%): [17488.003, 17488.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.014 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.066), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.161 ±(99.9%) 1.351 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.161, 0.788), stdev = 0.351
[info]   CI (99.9%): [≈ 0, 1.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1493.578 ±(99.9%) 1165.568 MB/sec [Average]
[info]   (min, avg, max) = (1353.450, 1493.578, 2034.992), stdev = 302.694
[info]   CI (99.9%): [328.010, 2659.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   17881.072 ±(99.9%) 14184.122 B/op [Average]
[info]   (min, avg, max) = (16115.467, 17881.072, 24465.012), stdev = 3683.571
[info]   CI (99.9%): [3696.950, 32065.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.822 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.663), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   12.798 ±(99.9%) 94.054 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12.798, 56.057), stdev = 24.426
[info]   CI (99.9%): [≈ 0, 106.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.400, 11.000), stdev = 4.037
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 73.65% complete, ETA 00:29:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 437582.049 ops/s
[info] # Warmup Iteration   2: 480328.746 ops/s
[info] # Warmup Iteration   3: 488059.947 ops/s
[info] # Warmup Iteration   4: 486014.148 ops/s
[info] # Warmup Iteration   5: 490137.085 ops/s
[info] Iteration   1: 493571.074 ops/s
[info]                  ·gc.alloc.rate:            1020.893 MB/sec
[info]                  ·gc.alloc.rate.norm:       3256.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.320 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2160.221 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 491711.817 ops/s
[info]                  ·gc.alloc.rate:            1017.073 MB/sec
[info]                  ·gc.alloc.rate.norm:       3256.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.675 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4336.782 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 494034.407 ops/s
[info]                  ·gc.alloc.rate:                   1021.925 MB/sec
[info]                  ·gc.alloc.rate.norm:              3256.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             677.369 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2158.197 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.122 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 492881.945 ops/s
[info]                  ·gc.alloc.rate:                   1019.729 MB/sec
[info]                  ·gc.alloc.rate.norm:              3256.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.622 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4328.511 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.127 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 492495.827 ops/s
[info]                  ·gc.alloc.rate:            1019.051 MB/sec
[info]                  ·gc.alloc.rate.norm:       3256.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.250 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2167.095 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala":
[info]   492939.014 ±(99.9%) 3500.206 ops/s [Average]
[info]   (min, avg, max) = (491711.817, 492939.014, 494034.407), stdev = 908.992
[info]   CI (99.9%): [489438.808, 496439.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1019.734 ±(99.9%) 7.124 MB/sec [Average]
[info]   (min, avg, max) = (1017.073, 1019.734, 1021.925), stdev = 1.850
[info]   CI (99.9%): [1012.610, 1026.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3256.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3256.001, 3256.001, 3256.001), stdev = 0.001
[info]   CI (99.9%): [3256.001, 3256.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   948.647 ±(99.9%) 1428.911 MB/sec [Average]
[info]   (min, avg, max) = (677.320, 948.647, 1355.622), stdev = 371.084
[info]   CI (99.9%): [≈ 0, 2377.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   3030.161 ±(99.9%) 4578.451 B/op [Average]
[info]   (min, avg, max) = (2158.197, 3030.161, 4336.782), stdev = 1189.009
[info]   CI (99.9%): [≈ 0, 7608.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.850 ±(99.9%) 4.481 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.850, 2.127), stdev = 1.164
[info]   CI (99.9%): [≈ 0, 5.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 8.000), stdev = 2.168
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 73.88% complete, ETA 00:29:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 473086.669 ops/s
[info] # Warmup Iteration   2: 514419.385 ops/s
[info] # Warmup Iteration   3: 521806.622 ops/s
[info] # Warmup Iteration   4: 525339.188 ops/s
[info] # Warmup Iteration   5: 525861.761 ops/s
[info] Iteration   1: 517731.741 ops/s
[info]                  ·gc.alloc.rate:            505.174 MB/sec
[info]                  ·gc.alloc.rate.norm:       1536.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.988 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2061.447 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 521290.490 ops/s
[info]                  ·gc.alloc.rate:            508.892 MB/sec
[info]                  ·gc.alloc.rate.norm:       1536.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.662 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2045.403 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 527529.593 ops/s
[info]                  ·gc.alloc.rate:      514.905 MB/sec
[info]                  ·gc.alloc.rate.norm: 1536.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 526140.178 ops/s
[info]                  ·gc.alloc.rate:            513.416 MB/sec
[info]                  ·gc.alloc.rate.norm:       1536.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.376 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2026.525 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 534408.726 ops/s
[info]                  ·gc.alloc.rate:            521.489 MB/sec
[info]                  ·gc.alloc.rate.norm:       1536.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.400 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1995.221 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   525420.146 ±(99.9%) 24499.933 ops/s [Average]
[info]   (min, avg, max) = (517731.741, 525420.146, 534408.726), stdev = 6362.555
[info]   CI (99.9%): [500920.212, 549920.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   512.775 ±(99.9%) 23.872 MB/sec [Average]
[info]   (min, avg, max) = (505.174, 512.775, 521.489), stdev = 6.200
[info]   CI (99.9%): [488.903, 536.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   1536.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1536.001, 1536.001, 1536.001), stdev = 0.001
[info]   CI (99.9%): [1536.001, 1536.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   542.085 ±(99.9%) 1166.879 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 542.085, 677.988), stdev = 303.035
[info]   CI (99.9%): [≈ 0, 1708.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   1625.719 ±(99.9%) 3500.770 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1625.719, 2061.447), stdev = 909.139
[info]   CI (99.9%): [≈ 0, 5126.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.400, 6.000), stdev = 2.191
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 74.12% complete, ETA 00:29:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23998.681 ops/s
[info] # Warmup Iteration   2: 43532.766 ops/s
[info] # Warmup Iteration   3: 44657.532 ops/s
[info] # Warmup Iteration   4: 44511.020 ops/s
[info] # Warmup Iteration   5: 44425.084 ops/s
[info] Iteration   1: 44643.496 ops/s
[info]                  ·gc.alloc.rate:            762.878 MB/sec
[info]                  ·gc.alloc.rate.norm:       26888.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.635 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23883.579 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 44665.507 ops/s
[info]                  ·gc.alloc.rate:            763.055 MB/sec
[info]                  ·gc.alloc.rate.norm:       26888.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.443 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23871.282 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 44616.317 ops/s
[info]                  ·gc.alloc.rate:            762.092 MB/sec
[info]                  ·gc.alloc.rate.norm:       26888.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.316 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23896.959 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 45068.669 ops/s
[info]                  ·gc.alloc.rate:                   769.910 MB/sec
[info]                  ·gc.alloc.rate.norm:              26888.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.722 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        23633.551 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 23.261 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 45384.967 ops/s
[info]                  ·gc.alloc.rate:            775.312 MB/sec
[info]                  ·gc.alloc.rate.norm:       26888.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.408 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23492.648 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson":
[info]   44875.791 ±(99.9%) 1308.610 ops/s [Average]
[info]   (min, avg, max) = (44616.317, 44875.791, 45384.967), stdev = 339.842
[info]   CI (99.9%): [43567.181, 46184.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   766.649 ±(99.9%) 22.253 MB/sec [Average]
[info]   (min, avg, max) = (762.092, 766.649, 775.312), stdev = 5.779
[info]   CI (99.9%): [744.396, 788.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   26888.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (26888.009, 26888.009, 26888.010), stdev = 0.001
[info]   CI (99.9%): [26888.008, 26888.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   677.305 ±(99.9%) 1.332 MB/sec [Average]
[info]   (min, avg, max) = (676.722, 677.305, 677.635), stdev = 0.346
[info]   CI (99.9%): [675.973, 678.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   23755.604 ±(99.9%) 704.212 B/op [Average]
[info]   (min, avg, max) = (23492.648, 23755.604, 23896.959), stdev = 182.882
[info]   CI (99.9%): [23051.392, 24459.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   4.652 ±(99.9%) 40.057 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.652, 23.261), stdev = 10.403
[info]   CI (99.9%): [≈ 0, 44.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 7.000), stdev = 1.095
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 74.35% complete, ETA 00:29:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 295181.819 ops/s
[info] # Warmup Iteration   2: 364941.766 ops/s
[info] # Warmup Iteration   3: 365559.997 ops/s
[info] # Warmup Iteration   4: 369788.177 ops/s
[info] # Warmup Iteration   5: 372070.773 ops/s
[info] Iteration   1: 373666.116 ops/s
[info]                  ·gc.alloc.rate:                                  2535.873 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10680.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.059 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.249 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2726.064 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11481.005 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 372345.458 ops/s
[info]                  ·gc.alloc.rate:                                  2526.475 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10680.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.618 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11521.823 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 372183.320 ops/s
[info]                  ·gc.alloc.rate:            2525.871 MB/sec
[info]                  ·gc.alloc.rate.norm:       10680.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.388 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8644.176 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 368697.730 ops/s
[info]                  ·gc.alloc.rate:                                  2501.490 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10680.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.368 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11635.837 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 368973.032 ops/s
[info]                  ·gc.alloc.rate:                                  2503.943 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10680.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2726.037 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11627.292 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce":
[info]   371173.131 ±(99.9%) 8518.946 ops/s [Average]
[info]   (min, avg, max) = (368697.730, 371173.131, 373666.116), stdev = 2212.343
[info]   CI (99.9%): [362654.186, 379692.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2518.730 ±(99.9%) 58.422 MB/sec [Average]
[info]   (min, avg, max) = (2501.490, 2518.730, 2535.873), stdev = 15.172
[info]   CI (99.9%): [2460.309, 2577.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   10680.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10680.001, 10680.001, 10680.001), stdev = 0.001
[info]   CI (99.9%): [10680.001, 10680.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.012 ±(99.9%) 0.101 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.059), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.052 ±(99.9%) 0.425 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.052, 0.249), stdev = 0.110
[info]   CI (99.9%): [≈ 0, 0.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2589.495 ±(99.9%) 1173.384 MB/sec [Average]
[info]   (min, avg, max) = (2044.388, 2589.495, 2726.064), stdev = 304.724
[info]   CI (99.9%): [1416.111, 3762.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   10982.026 ±(99.9%) 5038.954 B/op [Average]
[info]   (min, avg, max) = (8644.176, 10982.026, 11635.837), stdev = 1308.600
[info]   CI (99.9%): [5943.072, 16020.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 8.000), stdev = 1.342
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 74.59% complete, ETA 00:28:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 208519.394 ops/s
[info] # Warmup Iteration   2: 380762.909 ops/s
[info] # Warmup Iteration   3: 390593.405 ops/s
[info] # Warmup Iteration   4: 388011.570 ops/s
[info] # Warmup Iteration   5: 388966.578 ops/s
[info] Iteration   1: 388445.930 ops/s
[info]                  ·gc.alloc.rate:                   1028.415 MB/sec
[info]                  ·gc.alloc.rate.norm:              4168.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.870 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5487.016 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.699 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 390209.024 ops/s
[info]                  ·gc.alloc.rate:            1033.156 MB/sec
[info]                  ·gc.alloc.rate.norm:       4168.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.313 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2732.444 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 387550.286 ops/s
[info]                  ·gc.alloc.rate:                   1026.163 MB/sec
[info]                  ·gc.alloc.rate.norm:              4168.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.993 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5499.558 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.705 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 391002.999 ops/s
[info]                  ·gc.alloc.rate:            1035.296 MB/sec
[info]                  ·gc.alloc.rate.norm:       4168.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.329 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2726.861 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 389096.412 ops/s
[info]                  ·gc.alloc.rate:            1030.281 MB/sec
[info]                  ·gc.alloc.rate.norm:       4168.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.371 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5475.058 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala":
[info]   389260.930 ±(99.9%) 5290.706 ops/s [Average]
[info]   (min, avg, max) = (387550.286, 389260.930, 391002.999), stdev = 1373.980
[info]   CI (99.9%): [383970.224, 394551.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1030.662 ±(99.9%) 14.033 MB/sec [Average]
[info]   (min, avg, max) = (1026.163, 1030.662, 1035.296), stdev = 3.644
[info]   CI (99.9%): [1016.629, 1044.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   4168.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4168.001, 4168.001, 4168.001), stdev = 0.001
[info]   CI (99.9%): [4168.001, 4168.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1083.175 ±(99.9%) 1426.635 MB/sec [Average]
[info]   (min, avg, max) = (677.313, 1083.175, 1353.993), stdev = 370.493
[info]   CI (99.9%): [≈ 0, 2509.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   4384.187 ±(99.9%) 5816.023 B/op [Average]
[info]   (min, avg, max) = (2726.861, 4384.187, 5499.558), stdev = 1510.403
[info]   CI (99.9%): [≈ 0, 10200.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.081 ±(99.9%) 5.699 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.081, 2.705), stdev = 1.480
[info]   CI (99.9%): [≈ 0, 6.780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.400, 10.000), stdev = 2.702
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 74.82% complete, ETA 00:28:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 398263.579 ops/s
[info] # Warmup Iteration   2: 419714.556 ops/s
[info] # Warmup Iteration   3: 419566.300 ops/s
[info] # Warmup Iteration   4: 419861.249 ops/s
[info] # Warmup Iteration   5: 418182.897 ops/s
[info] Iteration   1: 419729.137 ops/s
[info]                  ·gc.alloc.rate:            827.729 MB/sec
[info]                  ·gc.alloc.rate.norm:       3104.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.089 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2542.850 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 419589.574 ops/s
[info]                  ·gc.alloc.rate:            827.382 MB/sec
[info]                  ·gc.alloc.rate.norm:       3104.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.007 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2543.608 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 419534.833 ops/s
[info]                  ·gc.alloc.rate:            827.222 MB/sec
[info]                  ·gc.alloc.rate.norm:       3104.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.968 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2543.953 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 420351.936 ops/s
[info]                  ·gc.alloc.rate:            829.032 MB/sec
[info]                  ·gc.alloc.rate.norm:       3104.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.123 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2538.979 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 417733.941 ops/s
[info]                  ·gc.alloc.rate:            823.929 MB/sec
[info]                  ·gc.alloc.rate.norm:       3104.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.315 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5109.667 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala":
[info]   419387.884 ±(99.9%) 3774.638 ops/s [Average]
[info]   (min, avg, max) = (417733.941, 419387.884, 420351.936), stdev = 980.261
[info]   CI (99.9%): [415613.247, 423162.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   827.059 ±(99.9%) 7.273 MB/sec [Average]
[info]   (min, avg, max) = (823.929, 827.059, 829.032), stdev = 1.889
[info]   CI (99.9%): [819.786, 834.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3104.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3104.001, 3104.001, 3104.001), stdev = 0.001
[info]   CI (99.9%): [3104.001, 3104.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   813.701 ±(99.9%) 1168.019 MB/sec [Average]
[info]   (min, avg, max) = (677.968, 813.701, 1356.315), stdev = 303.331
[info]   CI (99.9%): [≈ 0, 1981.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   3055.811 ±(99.9%) 4421.086 B/op [Average]
[info]   (min, avg, max) = (2538.979, 3055.811, 5109.667), stdev = 1148.142
[info]   CI (99.9%): [≈ 0, 7476.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 9.000), stdev = 2.510
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 75.06% complete, ETA 00:28:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 60065.169 ops/s
[info] # Warmup Iteration   2: 95272.970 ops/s
[info] # Warmup Iteration   3: 94559.360 ops/s
[info] # Warmup Iteration   4: 96694.655 ops/s
[info] # Warmup Iteration   5: 97592.559 ops/s
[info] Iteration   1: 97465.256 ops/s
[info]                  ·gc.alloc.rate:                                  3529.865 MB/sec
[info]                  ·gc.alloc.rate.norm:                             56984.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3408.209 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       55020.068 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   2: 95442.601 ops/s
[info]                  ·gc.alloc.rate:                                  3454.947 MB/sec
[info]                  ·gc.alloc.rate.norm:                             56984.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.036 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            4087.925 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       67423.993 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 95571.899 ops/s
[info]                  ·gc.alloc.rate:                                  3460.349 MB/sec
[info]                  ·gc.alloc.rate.norm:                             56984.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.043 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3407.184 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       56108.486 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 97528.237 ops/s
[info]                  ·gc.alloc.rate:                                  3532.138 MB/sec
[info]                  ·gc.alloc.rate.norm:                             56984.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3408.201 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       54984.533 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 97847.411 ops/s
[info]                  ·gc.alloc.rate:            3542.213 MB/sec
[info]                  ·gc.alloc.rate.norm:       56984.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      3406.747 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 54804.744 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson":
[info]   96771.081 ±(99.9%) 4480.894 ops/s [Average]
[info]   (min, avg, max) = (95442.601, 96771.081, 97847.411), stdev = 1163.674
[info]   CI (99.9%): [92290.187, 101251.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3503.903 ±(99.9%) 163.737 MB/sec [Average]
[info]   (min, avg, max) = (3454.947, 3503.903, 3542.213), stdev = 42.522
[info]   CI (99.9%): [3340.165, 3667.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   56984.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (56984.004, 56984.004, 56984.004), stdev = 0.001
[info]   CI (99.9%): [56984.004, 56984.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.004 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.021 ±(99.9%) 0.074 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.043), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   3543.653 ±(99.9%) 1171.589 MB/sec [Average]
[info]   (min, avg, max) = (3406.747, 3543.653, 4087.925), stdev = 304.258
[info]   CI (99.9%): [2372.064, 4715.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   57668.364 ±(99.9%) 21092.801 B/op [Average]
[info]   (min, avg, max) = (54804.744, 57668.364, 67423.993), stdev = 5477.733
[info]   CI (99.9%): [36575.563, 78761.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.200, 9.000), stdev = 1.304
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 75.29% complete, ETA 00:27:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 238782.641 ops/s
[info] # Warmup Iteration   2: 294955.024 ops/s
[info] # Warmup Iteration   3: 302296.442 ops/s
[info] # Warmup Iteration   4: 300610.274 ops/s
[info] # Warmup Iteration   5: 300982.629 ops/s
[info] Iteration   1: 302636.178 ops/s
[info]                  ·gc.alloc.rate:      461.479 MB/sec
[info]                  ·gc.alloc.rate.norm: 2400.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 309792.326 ops/s
[info]                  ·gc.alloc.rate:            472.457 MB/sec
[info]                  ·gc.alloc.rate.norm:       2400.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.214 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3445.211 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 309957.917 ops/s
[info]                  ·gc.alloc.rate:            472.643 MB/sec
[info]                  ·gc.alloc.rate.norm:       2400.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.135 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3443.455 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 309175.131 ops/s
[info]                  ·gc.alloc.rate:            471.401 MB/sec
[info]                  ·gc.alloc.rate.norm:       2400.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.070 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3452.197 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 298155.554 ops/s
[info]                  ·gc.alloc.rate:      454.802 MB/sec
[info]                  ·gc.alloc.rate.norm: 2400.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce":
[info]   305943.421 ±(99.9%) 20463.095 ops/s [Average]
[info]   (min, avg, max) = (298155.554, 305943.421, 309957.917), stdev = 5314.201
[info]   CI (99.9%): [285480.326, 326406.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   466.556 ±(99.9%) 31.003 MB/sec [Average]
[info]   (min, avg, max) = (454.802, 466.556, 472.643), stdev = 8.051
[info]   CI (99.9%): [435.554, 497.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2400.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2400.001, 2400.001, 2400.001), stdev = 0.001
[info]   CI (99.9%): [2400.001, 2400.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   406.884 ±(99.9%) 1430.254 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 406.884, 678.214), stdev = 371.433
[info]   CI (99.9%): [≈ 0, 1837.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2068.173 ±(99.9%) 7269.929 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2068.173, 3452.197), stdev = 1887.977
[info]   CI (99.9%): [≈ 0, 9338.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 4.000), stdev = 2.049
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 75.53% complete, ETA 00:27:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 345193.452 ops/s
[info] # Warmup Iteration   2: 592987.498 ops/s
[info] # Warmup Iteration   3: 600862.122 ops/s
[info] # Warmup Iteration   4: 582597.092 ops/s
[info] # Warmup Iteration   5: 601063.619 ops/s
[info] Iteration   1: 595242.572 ops/s
[info]                  ·gc.alloc.rate:            435.666 MB/sec
[info]                  ·gc.alloc.rate.norm:       1152.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.449 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1791.333 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 585302.482 ops/s
[info]                  ·gc.alloc.rate:            428.525 MB/sec
[info]                  ·gc.alloc.rate.norm:       1152.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.661 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1821.751 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 600291.377 ops/s
[info]                  ·gc.alloc.rate:      439.358 MB/sec
[info]                  ·gc.alloc.rate.norm: 1152.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 598081.275 ops/s
[info]                  ·gc.alloc.rate:            437.708 MB/sec
[info]                  ·gc.alloc.rate.norm:       1152.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.699 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1780.997 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 583012.358 ops/s
[info]                  ·gc.alloc.rate:                   426.852 MB/sec
[info]                  ·gc.alloc.rate.norm:              1152.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.993 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1827.091 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.798 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala":
[info]   592386.013 ±(99.9%) 29897.252 ops/s [Average]
[info]   (min, avg, max) = (583012.358, 592386.013, 600291.377), stdev = 7764.221
[info]   CI (99.9%): [562488.761, 622283.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   433.622 ±(99.9%) 21.577 MB/sec [Average]
[info]   (min, avg, max) = (426.852, 433.622, 439.358), stdev = 5.603
[info]   CI (99.9%): [412.045, 455.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1152.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1152.001, 1152.001, 1152.001), stdev = 0.001
[info]   CI (99.9%): [1152.001, 1152.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   541.761 ±(99.9%) 1166.181 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 541.761, 677.661), stdev = 302.854
[info]   CI (99.9%): [≈ 0, 1707.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1444.234 ±(99.9%) 3109.736 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1444.234, 1827.091), stdev = 807.589
[info]   CI (99.9%): [≈ 0, 4553.970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.360 ±(99.9%) 3.097 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.360, 1.798), stdev = 0.804
[info]   CI (99.9%): [≈ 0, 3.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.800, 5.000), stdev = 2.168
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 75.76% complete, ETA 00:27:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2134991.029 ops/s
[info] # Warmup Iteration   2: 2329634.521 ops/s
[info] # Warmup Iteration   3: 2442317.217 ops/s
[info] # Warmup Iteration   4: 2430832.451 ops/s
[info] # Warmup Iteration   5: 2398979.021 ops/s
[info] Iteration   1: 2423170.492 ops/s
[info]                  ·gc.alloc.rate:            1120.764 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.422 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 440.024 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 2431858.476 ops/s
[info]                  ·gc.alloc.rate:                   1124.743 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.769 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        876.886 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.431 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 2384248.126 ops/s
[info]                  ·gc.alloc.rate:            1103.004 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.450 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 895.278 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 2353782.825 ops/s
[info]                  ·gc.alloc.rate:            1088.728 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.105 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 453.429 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 2384789.262 ops/s
[info]                  ·gc.alloc.rate:                   1102.989 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.471 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        894.644 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.638 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala":
[info]   2395569.836 ±(99.9%) 122817.098 ops/s [Average]
[info]   (min, avg, max) = (2353782.825, 2395569.836, 2431858.476), stdev = 31895.210
[info]   CI (99.9%): [2272752.738, 2518386.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1108.046 ±(99.9%) 56.616 MB/sec [Average]
[info]   (min, avg, max) = (1088.728, 1108.046, 1124.743), stdev = 14.703
[info]   CI (99.9%): [1051.429, 1164.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   728.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (728.000, 728.000, 728.000), stdev = 0.001
[info]   CI (99.9%): [728.000, 728.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1084.443 ±(99.9%) 1429.539 MB/sec [Average]
[info]   (min, avg, max) = (677.422, 1084.443, 1356.450), stdev = 371.247
[info]   CI (99.9%): [≈ 0, 2513.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   712.053 ±(99.9%) 933.269 B/op [Average]
[info]   (min, avg, max) = (440.024, 712.053, 895.278), stdev = 242.367
[info]   CI (99.9%): [≈ 0, 1645.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.614 ±(99.9%) 4.416 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.614, 2.638), stdev = 1.147
[info]   CI (99.9%): [≈ 0, 5.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.000, 10.000), stdev = 2.121
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 76.00% complete, ETA 00:27:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2281044.601 ops/s
[info] # Warmup Iteration   2: 2431624.000 ops/s
[info] # Warmup Iteration   3: 2461950.237 ops/s
[info] # Warmup Iteration   4: 2463477.345 ops/s
[info] # Warmup Iteration   5: 2463706.284 ops/s
[info] Iteration   1: 2464940.669 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2464258.381 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2462865.727 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2464628.200 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2465052.033 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2464349.002 ±(99.9%) 3406.564 ops/s [Average]
[info]   (min, avg, max) = (2462865.727, 2464349.002, 2465052.033), stdev = 884.674
[info]   CI (99.9%): [2460942.438, 2467755.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 76.24% complete, ETA 00:26:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 314559.666 ops/s
[info] # Warmup Iteration   2: 388094.888 ops/s
[info] # Warmup Iteration   3: 404224.092 ops/s
[info] # Warmup Iteration   4: 401562.794 ops/s
[info] # Warmup Iteration   5: 404385.052 ops/s
[info] Iteration   1: 406339.341 ops/s
[info]                  ·gc.alloc.rate:      584.434 MB/sec
[info]                  ·gc.alloc.rate.norm: 2264.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 404821.787 ops/s
[info]                  ·gc.alloc.rate:            582.211 MB/sec
[info]                  ·gc.alloc.rate.norm:       2264.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.307 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2633.793 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 403828.625 ops/s
[info]                  ·gc.alloc.rate:            580.922 MB/sec
[info]                  ·gc.alloc.rate.norm:       2264.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.472 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2640.282 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 403682.166 ops/s
[info]                  ·gc.alloc.rate:            580.602 MB/sec
[info]                  ·gc.alloc.rate.norm:       2264.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.340 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2641.223 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 402482.030 ops/s
[info]                  ·gc.alloc.rate:            579.106 MB/sec
[info]                  ·gc.alloc.rate.norm:       2264.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.589 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2649.018 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson":
[info]   404230.790 ±(99.9%) 5552.193 ops/s [Average]
[info]   (min, avg, max) = (402482.030, 404230.790, 406339.341), stdev = 1441.887
[info]   CI (99.9%): [398678.596, 409782.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   581.455 ±(99.9%) 7.695 MB/sec [Average]
[info]   (min, avg, max) = (579.106, 581.455, 584.434), stdev = 1.998
[info]   CI (99.9%): [573.760, 589.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2264.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2264.001, 2264.001, 2264.001), stdev = 0.001
[info]   CI (99.9%): [2264.001, 2264.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   541.942 ±(99.9%) 1166.570 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 541.942, 677.589), stdev = 302.955
[info]   CI (99.9%): [≈ 0, 1708.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   2112.863 ±(99.9%) 4548.145 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2112.863, 2649.018), stdev = 1181.139
[info]   CI (99.9%): [≈ 0, 6661.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.400, 5.000), stdev = 1.949
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 76.47% complete, ETA 00:26:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28846.595 ops/s
[info] # Warmup Iteration   2: 38592.396 ops/s
[info] # Warmup Iteration   3: 38646.935 ops/s
[info] # Warmup Iteration   4: 38463.326 ops/s
[info] # Warmup Iteration   5: 39372.665 ops/s
[info] Iteration   1: 39319.935 ops/s
[info]                  ·gc.alloc.rate:            1325.014 MB/sec
[info]                  ·gc.alloc.rate.norm:       53040.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.172 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 54287.259 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 39670.150 ops/s
[info]                  ·gc.alloc.rate:            1336.767 MB/sec
[info]                  ·gc.alloc.rate.norm:       53040.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.097 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 53807.010 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 39684.318 ops/s
[info]                  ·gc.alloc.rate:            1337.465 MB/sec
[info]                  ·gc.alloc.rate.norm:       53040.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.327 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 53788.031 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 39730.794 ops/s
[info]                  ·gc.alloc.rate:                                  1339.045 MB/sec
[info]                  ·gc.alloc.rate.norm:                             53040.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.031 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.238 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1359.620 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       53854.994 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                131.933 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 39865.654 ops/s
[info]                  ·gc.alloc.rate:                                  1343.672 MB/sec
[info]                  ·gc.alloc.rate.norm:                             53040.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.099 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.889 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1363.098 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       53806.844 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce":
[info]   39654.170 ±(99.9%) 778.444 ops/s [Average]
[info]   (min, avg, max) = (39319.935, 39654.170, 39865.654), stdev = 202.159
[info]   CI (99.9%): [38875.727, 40432.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1336.393 ±(99.9%) 26.593 MB/sec [Average]
[info]   (min, avg, max) = (1325.014, 1336.393, 1343.672), stdev = 6.906
[info]   CI (99.9%): [1309.799, 1362.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   53040.010 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (53040.010, 53040.010, 53040.010), stdev = 0.001
[info]   CI (99.9%): [53040.010, 53040.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.026 ±(99.9%) 0.165 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.099), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.026 ±(99.9%) 6.501 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.026, 3.889), stdev = 1.688
[info]   CI (99.9%): [≈ 0, 7.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1358.263 ±(99.9%) 11.873 MB/sec [Average]
[info]   (min, avg, max) = (1356.097, 1358.263, 1363.098), stdev = 3.083
[info]   CI (99.9%): [1346.390, 1370.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   53908.828 ±(99.9%) 820.168 B/op [Average]
[info]   (min, avg, max) = (53788.031, 53908.828, 54287.259), stdev = 212.995
[info]   CI (99.9%): [53088.660, 54728.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   26.387 ±(99.9%) 227.196 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 26.387, 131.933), stdev = 59.002
[info]   CI (99.9%): [≈ 0, 253.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.200, 9.000), stdev = 2.588
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 76.71% complete, ETA 00:26:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27898.872 ops/s
[info] # Warmup Iteration   2: 63571.414 ops/s
[info] # Warmup Iteration   3: 64712.526 ops/s
[info] # Warmup Iteration   4: 65729.945 ops/s
[info] # Warmup Iteration   5: 64756.450 ops/s
[info] Iteration   1: 65090.430 ops/s
[info]                  ·gc.alloc.rate:                   1172.387 MB/sec
[info]                  ·gc.alloc.rate.norm:              28352.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.056 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        32745.350 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 16.107 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 65073.193 ops/s
[info]                  ·gc.alloc.rate:                   1172.073 MB/sec
[info]                  ·gc.alloc.rate.norm:              28352.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.047 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        32753.903 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 16.111 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 65710.075 ops/s
[info]                  ·gc.alloc.rate:                   1183.589 MB/sec
[info]                  ·gc.alloc.rate.norm:              28352.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.695 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        16209.747 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 15.954 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 65030.713 ops/s
[info]                  ·gc.alloc.rate:            1171.488 MB/sec
[info]                  ·gc.alloc.rate.norm:       28352.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.891 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 32790.671 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 64335.242 ops/s
[info]                  ·gc.alloc.rate:                   1159.022 MB/sec
[info]                  ·gc.alloc.rate.norm:              28352.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1358.240 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        33225.275 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 114.064 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala":
[info]   65047.931 ±(99.9%) 1875.683 ops/s [Average]
[info]   (min, avg, max) = (64335.242, 65047.931, 65710.075), stdev = 487.109
[info]   CI (99.9%): [63172.248, 66923.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1171.712 ±(99.9%) 33.498 MB/sec [Average]
[info]   (min, avg, max) = (1159.022, 1171.712, 1183.589), stdev = 8.699
[info]   CI (99.9%): [1138.213, 1205.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   28352.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (28352.006, 28352.006, 28352.007), stdev = 0.001
[info]   CI (99.9%): [28352.006, 28352.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1219.586 ±(99.9%) 1168.632 MB/sec [Average]
[info]   (min, avg, max) = (676.695, 1219.586, 1358.240), stdev = 303.490
[info]   CI (99.9%): [50.954, 2388.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   29544.989 ±(99.9%) 28715.521 B/op [Average]
[info]   (min, avg, max) = (16209.747, 29544.989, 33225.275), stdev = 7457.330
[info]   CI (99.9%): [829.468, 58260.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.332 ±(99.9%) 7.255 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.332, 4.663), stdev = 1.884
[info]   CI (99.9%): [≈ 0, 8.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   32.447 ±(99.9%) 177.715 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 32.447, 114.064), stdev = 46.152
[info]   CI (99.9%): [≈ 0, 210.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 8.000, 10.000), stdev = 2.550
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 76.94% complete, ETA 00:26:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 66256.011 ops/s
[info] # Warmup Iteration   2: 71330.586 ops/s
[info] # Warmup Iteration   3: 73120.769 ops/s
[info] # Warmup Iteration   4: 72785.940 ops/s
[info] # Warmup Iteration   5: 72580.127 ops/s
[info] Iteration   1: 73099.339 ops/s
[info]                  ·gc.alloc.rate:            1120.102 MB/sec
[info]                  ·gc.alloc.rate.norm:       24120.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.996 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14599.808 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 72776.670 ops/s
[info]                  ·gc.alloc.rate:            1115.269 MB/sec
[info]                  ·gc.alloc.rate.norm:       24120.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.132 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 29329.185 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 72447.014 ops/s
[info]                  ·gc.alloc.rate:            1110.175 MB/sec
[info]                  ·gc.alloc.rate.norm:       24120.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.087 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 29462.756 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 72938.786 ops/s
[info]                  ·gc.alloc.rate:            1117.697 MB/sec
[info]                  ·gc.alloc.rate.norm:       24120.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.034 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14632.028 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 72730.598 ops/s
[info]                  ·gc.alloc.rate:                   1114.693 MB/sec
[info]                  ·gc.alloc.rate.norm:              24120.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1356.290 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        29347.732 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 72.072 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala":
[info]   72798.481 ±(99.9%) 940.878 ops/s [Average]
[info]   (min, avg, max) = (72447.014, 72798.481, 73099.339), stdev = 244.343
[info]   CI (99.9%): [71857.604, 73739.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1115.587 ±(99.9%) 14.281 MB/sec [Average]
[info]   (min, avg, max) = (1110.175, 1115.587, 1120.102), stdev = 3.709
[info]   CI (99.9%): [1101.306, 1129.869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   24120.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (24120.006, 24120.006, 24120.006), stdev = 0.001
[info]   CI (99.9%): [24120.005, 24120.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1084.908 ±(99.9%) 1430.286 MB/sec [Average]
[info]   (min, avg, max) = (677.996, 1084.908, 1356.290), stdev = 371.441
[info]   CI (99.9%): [≈ 0, 2515.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   23474.302 ±(99.9%) 31139.121 B/op [Average]
[info]   (min, avg, max) = (14599.808, 23474.302, 29462.756), stdev = 8086.731
[info]   CI (99.9%): [≈ 0, 54613.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   14.414 ±(99.9%) 124.112 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14.414, 72.072), stdev = 32.232
[info]   CI (99.9%): [≈ 0, 138.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 8.000), stdev = 1.673
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 77.18% complete, ETA 00:25:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7693.942 ops/s
[info] # Warmup Iteration   2: 18655.154 ops/s
[info] # Warmup Iteration   3: 18931.937 ops/s
[info] # Warmup Iteration   4: 18775.388 ops/s
[info] # Warmup Iteration   5: 19048.589 ops/s
[info] Iteration   1: 19209.826 ops/s
[info]                  ·gc.alloc.rate:            1454.869 MB/sec
[info]                  ·gc.alloc.rate.norm:       119216.028 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.303 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 110893.434 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 19240.235 ops/s
[info]                  ·gc.alloc.rate:            1457.704 MB/sec
[info]                  ·gc.alloc.rate.norm:       119216.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.827 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 110720.559 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 18736.295 ops/s
[info]                  ·gc.alloc.rate:                   1419.058 MB/sec
[info]                  ·gc.alloc.rate.norm:              119216.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.379 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        113698.315 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 391.677 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 19045.089 ops/s
[info]                  ·gc.alloc.rate:                                  1442.536 MB/sec
[info]                  ·gc.alloc.rate.norm:                             119216.021 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.111 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 9.196 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.779 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       112624.626 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 19076.970 ops/s
[info]                  ·gc.alloc.rate:                                  1444.833 MB/sec
[info]                  ·gc.alloc.rate.norm:                             119216.021 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.535 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.097 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       168662.460 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson":
[info]   19061.683 ±(99.9%) 770.643 ops/s [Average]
[info]   (min, avg, max) = (18736.295, 19061.683, 19240.235), stdev = 200.134
[info]   CI (99.9%): [18291.039, 19832.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1443.800 ±(99.9%) 58.736 MB/sec [Average]
[info]   (min, avg, max) = (1419.058, 1443.800, 1457.704), stdev = 15.254
[info]   CI (99.9%): [1385.064, 1502.536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   119216.023 ±(99.9%) 0.012 B/op [Average]
[info]   (min, avg, max) = (119216.021, 119216.023, 119216.028), stdev = 0.003
[info]   CI (99.9%): [119216.011, 119216.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.024 ±(99.9%) 0.189 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.111), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.946 ±(99.9%) 15.631 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.946, 9.196), stdev = 4.059
[info]   CI (99.9%): [≈ 0, 17.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1493.477 ±(99.9%) 1185.352 MB/sec [Average]
[info]   (min, avg, max) = (1353.303, 1493.477, 2044.097), stdev = 307.832
[info]   CI (99.9%): [308.125, 2678.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   123319.879 ±(99.9%) 97719.754 B/op [Average]
[info]   (min, avg, max) = (110720.559, 123319.879, 168662.460), stdev = 25377.510
[info]   CI (99.9%): [25600.124, 221039.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   78.335 ±(99.9%) 674.492 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 78.335, 391.677), stdev = 175.163
[info]   CI (99.9%): [≈ 0, 752.827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.400, 10.000), stdev = 3.130
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 77.41% complete, ETA 00:25:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 76288.646 ops/s
[info] # Warmup Iteration   2: 144316.981 ops/s
[info] # Warmup Iteration   3: 145441.800 ops/s
[info] # Warmup Iteration   4: 145959.673 ops/s
[info] # Warmup Iteration   5: 145020.142 ops/s
[info] Iteration   1: 145120.829 ops/s
[info]                  ·gc.alloc.rate:            1336.708 MB/sec
[info]                  ·gc.alloc.rate.norm:       14496.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.679 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14680.050 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 144889.232 ops/s
[info]                  ·gc.alloc.rate:                   1334.454 MB/sec
[info]                  ·gc.alloc.rate.norm:              14496.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.226 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        14710.788 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 7.236 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 141975.967 ops/s
[info]                  ·gc.alloc.rate:            1307.442 MB/sec
[info]                  ·gc.alloc.rate.norm:       14496.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.405 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 15005.609 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 144258.783 ops/s
[info]                  ·gc.alloc.rate:                   1328.530 MB/sec
[info]                  ·gc.alloc.rate.norm:              14496.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1358.079 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        14818.423 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 50.872 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 144447.880 ops/s
[info]                  ·gc.alloc.rate:                                  1330.861 MB/sec
[info]                  ·gc.alloc.rate.norm:                             14496.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.055 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.601 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1363.309 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       14849.432 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala":
[info]   144138.538 ±(99.9%) 4838.385 ops/s [Average]
[info]   (min, avg, max) = (141975.967, 144138.538, 145120.829), stdev = 1256.513
[info]   CI (99.9%): [139300.153, 148976.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1327.599 ±(99.9%) 45.060 MB/sec [Average]
[info]   (min, avg, max) = (1307.442, 1327.599, 1336.708), stdev = 11.702
[info]   CI (99.9%): [1282.539, 1372.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   14496.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (14496.003, 14496.003, 14496.003), stdev = 0.001
[info]   CI (99.9%): [14496.002, 14496.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.011 ±(99.9%) 0.095 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.055), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.120 ±(99.9%) 1.035 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.120, 0.601), stdev = 0.269
[info]   CI (99.9%): [≈ 0, 1.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1356.540 ±(99.9%) 16.287 MB/sec [Average]
[info]   (min, avg, max) = (1353.405, 1356.540, 1363.309), stdev = 4.230
[info]   CI (99.9%): [1340.253, 1372.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   14812.860 ±(99.9%) 496.785 B/op [Average]
[info]   (min, avg, max) = (14680.050, 14812.860, 15005.609), stdev = 129.013
[info]   CI (99.9%): [14316.075, 15309.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.821 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.662), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   11.622 ±(99.9%) 85.347 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.622, 50.872), stdev = 22.164
[info]   CI (99.9%): [≈ 0, 96.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.800, 10.000), stdev = 2.950
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 77.65% complete, ETA 00:25:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 457310.700 ops/s
[info] # Warmup Iteration   2: 517450.118 ops/s
[info] # Warmup Iteration   3: 535106.456 ops/s
[info] # Warmup Iteration   4: 533176.904 ops/s
[info] # Warmup Iteration   5: 533137.378 ops/s
[info] Iteration   1: 530666.385 ops/s
[info]                  ·gc.alloc.rate:                   585.349 MB/sec
[info]                  ·gc.alloc.rate.norm:              1736.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             677.475 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2009.224 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.976 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 521369.903 ops/s
[info]                  ·gc.alloc.rate:      575.002 MB/sec
[info]                  ·gc.alloc.rate.norm: 1736.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 530485.784 ops/s
[info]                  ·gc.alloc.rate:            585.078 MB/sec
[info]                  ·gc.alloc.rate.norm:       1736.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.072 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2011.924 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 533170.578 ops/s
[info]                  ·gc.alloc.rate:            588.045 MB/sec
[info]                  ·gc.alloc.rate.norm:       1736.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.398 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1999.786 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 529325.265 ops/s
[info]                  ·gc.alloc.rate:            583.802 MB/sec
[info]                  ·gc.alloc.rate.norm:       1736.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.390 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2014.295 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala":
[info]   529003.583 ±(99.9%) 17296.019 ops/s [Average]
[info]   (min, avg, max) = (521369.903, 529003.583, 533170.578), stdev = 4491.721
[info]   CI (99.9%): [511707.564, 546299.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   583.455 ±(99.9%) 19.143 MB/sec [Average]
[info]   (min, avg, max) = (575.002, 583.455, 588.045), stdev = 4.971
[info]   CI (99.9%): [564.312, 602.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1736.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1736.001, 1736.001, 1736.001), stdev = 0.001
[info]   CI (99.9%): [1736.001, 1736.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   542.067 ±(99.9%) 1166.840 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 542.067, 678.072), stdev = 303.025
[info]   CI (99.9%): [≈ 0, 1708.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1607.046 ±(99.9%) 3459.352 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1607.046, 2014.295), stdev = 898.383
[info]   CI (99.9%): [≈ 0, 5066.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.395 ±(99.9%) 3.402 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.395, 1.976), stdev = 0.884
[info]   CI (99.9%): [≈ 0, 3.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 77.88% complete, ETA 00:25:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 497357.631 ops/s
[info] # Warmup Iteration   2: 561292.773 ops/s
[info] # Warmup Iteration   3: 567677.221 ops/s
[info] # Warmup Iteration   4: 566965.961 ops/s
[info] # Warmup Iteration   5: 568022.171 ops/s
[info] Iteration   1: 567559.466 ops/s
[info]                  ·gc.alloc.rate:      5.770 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 566363.989 ops/s
[info]                  ·gc.alloc.rate:      5.757 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 568320.336 ops/s
[info]                  ·gc.alloc.rate:      5.777 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 569524.021 ops/s
[info]                  ·gc.alloc.rate:      5.790 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 569486.177 ops/s
[info]                  ·gc.alloc.rate:      5.790 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   568250.798 ±(99.9%) 5162.621 ops/s [Average]
[info]   (min, avg, max) = (566363.989, 568250.798, 569524.021), stdev = 1340.716
[info]   CI (99.9%): [563088.177, 573413.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   5.777 ±(99.9%) 0.054 MB/sec [Average]
[info]   (min, avg, max) = (5.757, 5.777, 5.790), stdev = 0.014
[info]   CI (99.9%): [5.722, 5.831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16.001, 16.001, 16.001), stdev = 0.001
[info]   CI (99.9%): [16.001, 16.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 78.12% complete, ETA 00:24:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28993.091 ops/s
[info] # Warmup Iteration   2: 58984.933 ops/s
[info] # Warmup Iteration   3: 60646.212 ops/s
[info] # Warmup Iteration   4: 59715.606 ops/s
[info] # Warmup Iteration   5: 60338.909 ops/s
[info] Iteration   1: 60827.735 ops/s
[info]                  ·gc.alloc.rate:            1091.162 MB/sec
[info]                  ·gc.alloc.rate.norm:       28240.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.617 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 17511.312 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 60541.003 ops/s
[info]                  ·gc.alloc.rate:            1086.143 MB/sec
[info]                  ·gc.alloc.rate.norm:       28240.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.417 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 35189.206 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 60811.997 ops/s
[info]                  ·gc.alloc.rate:            1090.990 MB/sec
[info]                  ·gc.alloc.rate.norm:       28240.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.700 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 17516.207 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 60355.119 ops/s
[info]                  ·gc.alloc.rate:                   1083.164 MB/sec
[info]                  ·gc.alloc.rate.norm:              28240.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.796 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        35295.881 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 17.370 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 60358.924 ops/s
[info]                  ·gc.alloc.rate:                   1083.388 MB/sec
[info]                  ·gc.alloc.rate.norm:              28240.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.698 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        35312.081 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 121.586 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson":
[info]   60578.956 ±(99.9%) 895.133 ops/s [Average]
[info]   (min, avg, max) = (60355.119, 60578.956, 60827.735), stdev = 232.463
[info]   CI (99.9%): [59683.823, 61474.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1086.969 ±(99.9%) 15.128 MB/sec [Average]
[info]   (min, avg, max) = (1083.164, 1086.969, 1091.162), stdev = 3.929
[info]   CI (99.9%): [1071.841, 1102.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   28240.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (28240.007, 28240.007, 28240.007), stdev = 0.001
[info]   CI (99.9%): [28240.006, 28240.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1083.046 ±(99.9%) 1428.509 MB/sec [Average]
[info]   (min, avg, max) = (676.617, 1083.046, 1354.698), stdev = 370.979
[info]   CI (99.9%): [≈ 0, 2511.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   28164.937 ±(99.9%) 37440.833 B/op [Average]
[info]   (min, avg, max) = (17511.312, 28164.937, 35312.081), stdev = 9723.265
[info]   CI (99.9%): [≈ 0, 65605.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.825 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.664), stdev = 2.032
[info]   CI (99.9%): [≈ 0, 8.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   27.791 ±(99.9%) 203.967 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 27.791, 121.586), stdev = 52.970
[info]   CI (99.9%): [≈ 0, 231.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.800, 10.000), stdev = 2.588
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce
[info] # Run progress: 78.35% complete, ETA 00:24:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1156490.600 ops/s
[info] # Warmup Iteration   2: 2096781.724 ops/s
[info] # Warmup Iteration   3: 2148976.741 ops/s
[info] # Warmup Iteration   4: 2124059.547 ops/s
[info] # Warmup Iteration   5: 2131275.434 ops/s
[info] Iteration   1: 2136656.084 ops/s
[info]                  ·gc.alloc.rate:                                  3051.595 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2248.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.585 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2007.840 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 2111163.509 ops/s
[info]                  ·gc.alloc.rate:                                  3015.072 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2248.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3406.861 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2540.113 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   3: 2137327.376 ops/s
[info]                  ·gc.alloc.rate:            3052.653 MB/sec
[info]                  ·gc.alloc.rate.norm:       2248.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2725.515 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2007.093 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 2133674.345 ops/s
[info]                  ·gc.alloc.rate:                                  3046.804 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2248.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3406.462 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2513.364 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   5: 2150856.366 ops/s
[info]                  ·gc.alloc.rate:                                  3073.232 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2248.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2726.779 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1994.577 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce":
[info]   2133935.536 ±(99.9%) 55262.236 ops/s [Average]
[info]   (min, avg, max) = (2111163.509, 2133935.536, 2150856.366), stdev = 14351.427
[info]   CI (99.9%): [2078673.300, 2189197.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate":
[info]   3047.871 ±(99.9%) 80.698 MB/sec [Average]
[info]   (min, avg, max) = (3015.072, 3047.871, 3073.232), stdev = 20.957
[info]   CI (99.9%): [2967.173, 3128.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2248.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2248.000, 2248.000, 2248.000), stdev = 0.001
[info]   CI (99.9%): [2248.000, 2248.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.002 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.001 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2998.240 ±(99.9%) 1435.660 MB/sec [Average]
[info]   (min, avg, max) = (2725.515, 2998.240, 3406.861), stdev = 372.836
[info]   CI (99.9%): [1562.580, 4433.900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2212.598 ±(99.9%) 1105.036 B/op [Average]
[info]   (min, avg, max) = (1994.577, 2212.598, 2540.113), stdev = 286.974
[info]   CI (99.9%): [1107.561, 3317.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.200, 11.000), stdev = 3.493
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava
[info] # Run progress: 78.59% complete, ETA 00:24:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.934 ops/s
[info] # Warmup Iteration   2: 810734.397 ops/s
[info] # Warmup Iteration   3: 860902.040 ops/s
[info] # Warmup Iteration   4: 845120.816 ops/s
[info] # Warmup Iteration   5: 862654.146 ops/s
[info] Iteration   1: 881735.263 ops/s
[info]                  ·gc.alloc.rate:            560.272 MB/sec
[info]                  ·gc.alloc.rate.norm:       1000.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.830 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1204.468 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 886274.697 ops/s
[info]                  ·gc.alloc.rate:      563.081 MB/sec
[info]                  ·gc.alloc.rate.norm: 1000.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 873386.668 ops/s
[info]                  ·gc.alloc.rate:            554.939 MB/sec
[info]                  ·gc.alloc.rate.norm:       1000.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.784 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1215.961 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 875304.223 ops/s
[info]                  ·gc.alloc.rate:                   556.097 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.067 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1212.139 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.198 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 878605.157 ops/s
[info]                  ·gc.alloc.rate:            558.181 MB/sec
[info]                  ·gc.alloc.rate.norm:       1000.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.723 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1208.789 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava":
[info]   879061.202 ±(99.9%) 19795.112 ops/s [Average]
[info]   (min, avg, max) = (873386.668, 879061.202, 886274.697), stdev = 5140.728
[info]   CI (99.9%): [859266.090, 898856.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   558.514 ±(99.9%) 12.578 MB/sec [Average]
[info]   (min, avg, max) = (554.939, 558.514, 563.081), stdev = 3.266
[info]   CI (99.9%): [545.936, 571.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1000.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1000.000, 1000.000, 1000.000), stdev = 0.001
[info]   CI (99.9%): [1000.000, 1000.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   539.681 ±(99.9%) 1161.704 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.681, 674.830), stdev = 301.691
[info]   CI (99.9%): [≈ 0, 1701.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   968.272 ±(99.9%) 2084.341 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 968.272, 1215.961), stdev = 541.297
[info]   CI (99.9%): [≈ 0, 3052.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.240 ±(99.9%) 2.063 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.240, 1.198), stdev = 0.536
[info]   CI (99.9%): [≈ 0, 2.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.200, 6.000), stdev = 2.387
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala
[info] # Run progress: 78.82% complete, ETA 00:23:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30278.455 ops/s
[info] # Warmup Iteration   2: 262242.299 ops/s
[info] # Warmup Iteration   3: 287824.348 ops/s
[info] # Warmup Iteration   4: 287287.739 ops/s
[info] # Warmup Iteration   5: 289196.199 ops/s
[info] Iteration   1: 289220.490 ops/s
[info]                  ·gc.alloc.rate:            546.832 MB/sec
[info]                  ·gc.alloc.rate.norm:       2976.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.410 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3686.642 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 287832.628 ops/s
[info]                  ·gc.alloc.rate:      544.372 MB/sec
[info]                  ·gc.alloc.rate.norm: 2976.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 290189.002 ops/s
[info]                  ·gc.alloc.rate:            548.653 MB/sec
[info]                  ·gc.alloc.rate.norm:       2976.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.330 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3673.966 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 289042.651 ops/s
[info]                  ·gc.alloc.rate:            546.585 MB/sec
[info]                  ·gc.alloc.rate.norm:       2976.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.477 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3688.670 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 289715.659 ops/s
[info]                  ·gc.alloc.rate:            547.767 MB/sec
[info]                  ·gc.alloc.rate.norm:       2976.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.683 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3676.395 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala":
[info]   289200.086 ±(99.9%) 3411.090 ops/s [Average]
[info]   (min, avg, max) = (287832.628, 289200.086, 290189.002), stdev = 885.849
[info]   CI (99.9%): [285788.997, 292611.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   546.842 ±(99.9%) 6.180 MB/sec [Average]
[info]   (min, avg, max) = (544.372, 546.842, 548.653), stdev = 1.605
[info]   CI (99.9%): [540.662, 553.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2976.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2976.001, 2976.001, 2976.001), stdev = 0.001
[info]   CI (99.9%): [2976.001, 2976.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   541.780 ±(99.9%) 1166.223 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 541.780, 677.477), stdev = 302.864
[info]   CI (99.9%): [≈ 0, 1708.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   2945.135 ±(99.9%) 6339.671 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2945.135, 3688.670), stdev = 1646.393
[info]   CI (99.9%): [≈ 0, 9284.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.800, 5.000), stdev = 2.168
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala
[info] # Run progress: 79.06% complete, ETA 00:23:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 723754.232 ops/s
[info] # Warmup Iteration   2: 756403.332 ops/s
[info] # Warmup Iteration   3: 746505.103 ops/s
[info] # Warmup Iteration   4: 743121.417 ops/s
[info] # Warmup Iteration   5: 743410.203 ops/s
[info] Iteration   1: 747263.981 ops/s
[info]                  ·gc.alloc.rate:      562.090 MB/sec
[info]                  ·gc.alloc.rate.norm: 1184.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 744701.757 ops/s
[info]                  ·gc.alloc.rate:            560.213 MB/sec
[info]                  ·gc.alloc.rate.norm:       1184.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.130 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1433.218 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 736903.642 ops/s
[info]                  ·gc.alloc.rate:            554.323 MB/sec
[info]                  ·gc.alloc.rate.norm:       1184.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.103 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1448.386 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 747392.606 ops/s
[info]                  ·gc.alloc.rate:            562.205 MB/sec
[info]                  ·gc.alloc.rate.norm:       1184.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.083 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1428.039 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 747616.286 ops/s
[info]                  ·gc.alloc.rate:            562.381 MB/sec
[info]                  ·gc.alloc.rate.norm:       1184.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.067 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1427.557 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala":
[info]   744775.654 ±(99.9%) 17549.332 ops/s [Average]
[info]   (min, avg, max) = (736903.642, 744775.654, 747616.286), stdev = 4557.506
[info]   CI (99.9%): [727226.322, 762324.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   560.242 ±(99.9%) 13.182 MB/sec [Average]
[info]   (min, avg, max) = (554.323, 560.242, 562.381), stdev = 3.423
[info]   CI (99.9%): [547.060, 573.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1184.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1184.001, 1184.001, 1184.001), stdev = 0.001
[info]   CI (99.9%): [1184.000, 1184.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   542.477 ±(99.9%) 1167.722 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 542.477, 678.130), stdev = 303.254
[info]   CI (99.9%): [≈ 0, 1710.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1147.440 ±(99.9%) 2470.164 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1147.440, 1448.386), stdev = 641.494
[info]   CI (99.9%): [≈ 0, 3617.604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless
[info] # Run progress: 79.29% complete, ETA 00:23:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3738175.004 ops/s
[info] # Warmup Iteration   2: 4062330.965 ops/s
[info] # Warmup Iteration   3: 4228339.184 ops/s
[info] # Warmup Iteration   4: 4297163.152 ops/s
[info] # Warmup Iteration   5: 4294819.094 ops/s
[info] Iteration   1: 4242624.301 ops/s
[info]                  ·gc.alloc.rate:            1358.632 MB/sec
[info]                  ·gc.alloc.rate.norm:       504.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.262 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 503.121 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 4269826.747 ops/s
[info]                  ·gc.alloc.rate:            1367.180 MB/sec
[info]                  ·gc.alloc.rate.norm:       504.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.130 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 499.926 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 4287869.353 ops/s
[info]                  ·gc.alloc.rate:            1372.839 MB/sec
[info]                  ·gc.alloc.rate.norm:       504.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.002 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 497.819 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 4213326.090 ops/s
[info]                  ·gc.alloc.rate:                                  1349.074 MB/sec
[info]                  ·gc.alloc.rate.norm:                             504.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.029 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1359.414 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       507.863 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1.244 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 4210585.375 ops/s
[info]                  ·gc.alloc.rate:                                  1348.167 MB/sec
[info]                  ·gc.alloc.rate.norm:                             504.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.094 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.035 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.695 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       509.431 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless":
[info]   4244846.373 ±(99.9%) 131251.017 ops/s [Average]
[info]   (min, avg, max) = (4210585.375, 4244846.373, 4287869.353), stdev = 34085.472
[info]   CI (99.9%): [4113595.356, 4376097.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate":
[info]   1359.178 ±(99.9%) 41.931 MB/sec [Average]
[info]   (min, avg, max) = (1348.167, 1359.178, 1372.839), stdev = 10.889
[info]   CI (99.9%): [1317.248, 1401.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm":
[info]   504.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (504.000, 504.000, 504.000), stdev = 0.001
[info]   CI (99.9%): [504.000, 504.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.025 ±(99.9%) 0.157 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.094), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.009 ±(99.9%) 0.059 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.035), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Old_Gen":
[info]   1358.100 ±(99.9%) 11.309 MB/sec [Average]
[info]   (min, avg, max) = (1356.002, 1358.100, 1362.695), stdev = 2.937
[info]   CI (99.9%): [1346.791, 1369.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Old_Gen.norm":
[info]   503.632 ±(99.9%) 19.188 B/op [Average]
[info]   (min, avg, max) = (497.819, 503.632, 509.431), stdev = 4.983
[info]   CI (99.9%): [484.444, 522.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Survivor_Space.norm":
[info]   0.249 ±(99.9%) 2.143 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.249, 1.244), stdev = 0.556
[info]   CI (99.9%): [≈ 0, 2.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 0.707
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump
[info] # Run progress: 79.53% complete, ETA 00:23:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7207357.266 ops/s
[info] # Warmup Iteration   2: 7546818.011 ops/s
[info] # Warmup Iteration   3: 7777613.292 ops/s
[info] # Warmup Iteration   4: 7818661.000 ops/s
[info] # Warmup Iteration   5: 7939801.767 ops/s
[info] Iteration   1: 7754225.131 ops/s
[info]                  ·gc.alloc.rate:            630.653 MB/sec
[info]                  ·gc.alloc.rate.norm:       128.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.139 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 137.638 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 7814173.052 ops/s
[info]                  ·gc.alloc.rate:            635.574 MB/sec
[info]                  ·gc.alloc.rate.norm:       128.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.189 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 136.582 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 7966153.256 ops/s
[info]                  ·gc.alloc.rate:            647.841 MB/sec
[info]                  ·gc.alloc.rate.norm:       128.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.065 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 133.972 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 7836885.441 ops/s
[info]                  ·gc.alloc.rate:            637.354 MB/sec
[info]                  ·gc.alloc.rate.norm:       128.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.083 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 136.180 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 7987391.757 ops/s
[info]                  ·gc.alloc.rate:            649.561 MB/sec
[info]                  ·gc.alloc.rate.norm:       128.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.082 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 133.620 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump":
[info]   7871765.727 ±(99.9%) 388074.071 ops/s [Average]
[info]   (min, avg, max) = (7754225.131, 7871765.727, 7987391.757), stdev = 100781.604
[info]   CI (99.9%): [7483691.656, 8259839.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate":
[info]   640.196 ±(99.9%) 31.440 MB/sec [Average]
[info]   (min, avg, max) = (630.653, 640.196, 649.561), stdev = 8.165
[info]   CI (99.9%): [608.756, 671.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm":
[info]   128.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (128.000, 128.000, 128.000), stdev = 0.001
[info]   CI (99.9%): [128.000, 128.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.G1_Old_Gen":
[info]   678.111 ±(99.9%) 0.198 MB/sec [Average]
[info]   (min, avg, max) = (678.065, 678.111, 678.189), stdev = 0.052
[info]   CI (99.9%): [677.913, 678.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.G1_Old_Gen.norm":
[info]   135.598 ±(99.9%) 6.677 B/op [Average]
[info]   (min, avg, max) = (133.620, 135.598, 137.638), stdev = 1.734
[info]   CI (99.9%): [128.922, 142.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 6.000), stdev = 1.342
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson
[info] # Run progress: 79.76% complete, ETA 00:22:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18886.646 ops/s
[info] # Warmup Iteration   2: 171510.018 ops/s
[info] # Warmup Iteration   3: 182354.408 ops/s
[info] # Warmup Iteration   4: 185889.533 ops/s
[info] # Warmup Iteration   5: 186856.649 ops/s
[info] Iteration   1: 187507.547 ops/s
[info]                  ·gc.alloc.rate:            1272.307 MB/sec
[info]                  ·gc.alloc.rate.norm:       10680.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.410 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11360.799 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 182528.712 ops/s
[info]                  ·gc.alloc.rate:            1238.847 MB/sec
[info]                  ·gc.alloc.rate.norm:       10680.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.801 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11671.011 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 182805.578 ops/s
[info]                  ·gc.alloc.rate:                   1240.351 MB/sec
[info]                  ·gc.alloc.rate.norm:              10680.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.399 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        11653.393 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 5.735 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 182892.171 ops/s
[info]                  ·gc.alloc.rate:            1241.117 MB/sec
[info]                  ·gc.alloc.rate.norm:       10680.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.476 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5829.785 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 185061.555 ops/s
[info]                  ·gc.alloc.rate:                   1255.666 MB/sec
[info]                  ·gc.alloc.rate.norm:              10680.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1358.109 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        11551.326 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 39.656 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson":
[info]   184159.112 ±(99.9%) 8196.043 ops/s [Average]
[info]   (min, avg, max) = (182528.712, 184159.112, 187507.547), stdev = 2128.486
[info]   CI (99.9%): [175963.069, 192355.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1249.658 ±(99.9%) 55.318 MB/sec [Average]
[info]   (min, avg, max) = (1238.847, 1249.658, 1272.307), stdev = 14.366
[info]   CI (99.9%): [1194.339, 1304.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   10680.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10680.002, 10680.002, 10680.002), stdev = 0.001
[info]   CI (99.9%): [10680.002, 10680.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1219.239 ±(99.9%) 1166.211 MB/sec [Average]
[info]   (min, avg, max) = (677.476, 1219.239, 1358.109), stdev = 302.861
[info]   CI (99.9%): [53.028, 2385.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   10413.263 ±(99.9%) 9877.696 B/op [Average]
[info]   (min, avg, max) = (5829.785, 10413.263, 11671.011), stdev = 2565.206
[info]   CI (99.9%): [535.567, 20290.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.822 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.662), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   9.078 ±(99.9%) 66.513 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.078, 39.656), stdev = 17.273
[info]   CI (99.9%): [≈ 0, 75.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 8.400, 10.000), stdev = 2.074
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 80.00% complete, ETA 00:22:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 846456.890 ops/s
[info] # Warmup Iteration   2: 905253.324 ops/s
[info] # Warmup Iteration   3: 911228.499 ops/s
[info] # Warmup Iteration   4: 911204.728 ops/s
[info] # Warmup Iteration   5: 864295.194 ops/s
[info] Iteration   1: 911254.470 ops/s
[info]                  ·gc.alloc.rate:      50.960 MB/sec
[info]                  ·gc.alloc.rate.norm: 88.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 911262.394 ops/s
[info]                  ·gc.alloc.rate:      50.954 MB/sec
[info]                  ·gc.alloc.rate.norm: 88.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 911495.469 ops/s
[info]                  ·gc.alloc.rate:      50.954 MB/sec
[info]                  ·gc.alloc.rate.norm: 88.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 911022.617 ops/s
[info]                  ·gc.alloc.rate:      50.934 MB/sec
[info]                  ·gc.alloc.rate.norm: 88.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 911638.544 ops/s
[info]                  ·gc.alloc.rate:      50.979 MB/sec
[info]                  ·gc.alloc.rate.norm: 88.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala":
[info]   911334.699 ±(99.9%) 917.772 ops/s [Average]
[info]   (min, avg, max) = (911022.617, 911334.699, 911638.544), stdev = 238.342
[info]   CI (99.9%): [910416.927, 912252.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   50.956 ±(99.9%) 0.062 MB/sec [Average]
[info]   (min, avg, max) = (50.934, 50.956, 50.979), stdev = 0.016
[info]   CI (99.9%): [50.895, 51.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   88.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (88.000, 88.000, 88.000), stdev = 0.001
[info]   CI (99.9%): [88.000, 88.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 80.24% complete, ETA 00:22:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25157.413 ops/s
[info] # Warmup Iteration   2: 59471.591 ops/s
[info] # Warmup Iteration   3: 59498.879 ops/s
[info] # Warmup Iteration   4: 59238.655 ops/s
[info] # Warmup Iteration   5: 59786.433 ops/s
[info] Iteration   1: 60272.899 ops/s
[info]                  ·gc.alloc.rate:                                  2800.179 MB/sec
[info]                  ·gc.alloc.rate.norm:                             73120.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.216 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.641 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       71173.622 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 60318.216 ops/s
[info]                  ·gc.alloc.rate:            2802.398 MB/sec
[info]                  ·gc.alloc.rate.norm:       73120.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2725.947 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 71125.251 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 60314.519 ops/s
[info]                  ·gc.alloc.rate:                                  2802.029 MB/sec
[info]                  ·gc.alloc.rate.norm:                             73120.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.239 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.317 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       71118.177 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 59744.618 ops/s
[info]                  ·gc.alloc.rate:            2775.251 MB/sec
[info]                  ·gc.alloc.rate.norm:       73120.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2725.336 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 71804.890 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 59316.094 ops/s
[info]                  ·gc.alloc.rate:                                  2755.647 MB/sec
[info]                  ·gc.alloc.rate.norm:                             73120.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.209 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.791 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       72327.776 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson":
[info]   59993.269 ±(99.9%) 1729.983 ops/s [Average]
[info]   (min, avg, max) = (59316.094, 59993.269, 60318.216), stdev = 449.271
[info]   CI (99.9%): [58263.286, 61723.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2787.101 ±(99.9%) 80.718 MB/sec [Average]
[info]   (min, avg, max) = (2755.647, 2787.101, 2802.398), stdev = 20.962
[info]   CI (99.9%): [2706.383, 2867.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   73120.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (73120.007, 73120.007, 73120.007), stdev = 0.001
[info]   CI (99.9%): [73120.006, 73120.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.005 ±(99.9%) 0.018 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.009), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.133 ±(99.9%) 0.469 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.239), stdev = 0.122
[info]   CI (99.9%): [≈ 0, 0.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2725.606 ±(99.9%) 1.069 MB/sec [Average]
[info]   (min, avg, max) = (2725.317, 2725.606, 2725.947), stdev = 0.278
[info]   CI (99.9%): [2724.537, 2726.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   71509.943 ±(99.9%) 2082.932 B/op [Average]
[info]   (min, avg, max) = (71118.177, 71509.943, 72327.776), stdev = 540.931
[info]   CI (99.9%): [69427.011, 73592.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 80.47% complete, ETA 00:22:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 659707.704 ops/s
[info] # Warmup Iteration   2: 998720.961 ops/s
[info] # Warmup Iteration   3: 1001991.799 ops/s
[info] # Warmup Iteration   4: 996189.182 ops/s
[info] # Warmup Iteration   5: 981070.718 ops/s
[info] Iteration   1: 974408.243 ops/s
[info]                  ·gc.alloc.rate:            559.757 MB/sec
[info]                  ·gc.alloc.rate.norm:       904.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.530 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1094.203 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 1006245.335 ops/s
[info]                  ·gc.alloc.rate:            577.977 MB/sec
[info]                  ·gc.alloc.rate.norm:       904.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.449 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1059.582 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 1008054.767 ops/s
[info]                  ·gc.alloc.rate:            578.882 MB/sec
[info]                  ·gc.alloc.rate.norm:       904.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.308 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1057.705 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 1007031.581 ops/s
[info]                  ·gc.alloc.rate:            578.313 MB/sec
[info]                  ·gc.alloc.rate.norm:       904.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.287 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1058.712 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 1006139.329 ops/s
[info]                  ·gc.alloc.rate:            577.836 MB/sec
[info]                  ·gc.alloc.rate.norm:       904.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.353 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1059.691 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala":
[info]   1000375.851 ±(99.9%) 55975.228 ops/s [Average]
[info]   (min, avg, max) = (974408.243, 1000375.851, 1008054.767), stdev = 14536.589
[info]   CI (99.9%): [944400.623, 1056351.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   574.553 ±(99.9%) 31.888 MB/sec [Average]
[info]   (min, avg, max) = (559.757, 574.553, 578.882), stdev = 8.281
[info]   CI (99.9%): [542.665, 606.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   904.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (904.000, 904.000, 904.000), stdev = 0.001
[info]   CI (99.9%): [904.000, 904.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   677.385 ±(99.9%) 0.393 MB/sec [Average]
[info]   (min, avg, max) = (677.287, 677.385, 677.530), stdev = 0.102
[info]   CI (99.9%): [676.992, 677.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1065.979 ±(99.9%) 60.833 B/op [Average]
[info]   (min, avg, max) = (1057.705, 1065.979, 1094.203), stdev = 15.798
[info]   CI (99.9%): [1005.146, 1126.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 80.71% complete, ETA 00:21:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 647550.169 ops/s
[info] # Warmup Iteration   2: 684803.912 ops/s
[info] # Warmup Iteration   3: 685074.617 ops/s
[info] # Warmup Iteration   4: 688133.899 ops/s
[info] # Warmup Iteration   5: 707690.380 ops/s
[info] Iteration   1: 707600.558 ops/s
[info]                  ·gc.alloc.rate:      197.821 MB/sec
[info]                  ·gc.alloc.rate.norm: 440.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 703861.249 ops/s
[info]                  ·gc.alloc.rate:            196.795 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.178 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1516.291 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 705744.193 ops/s
[info]                  ·gc.alloc.rate:      197.281 MB/sec
[info]                  ·gc.alloc.rate.norm: 440.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 705930.919 ops/s
[info]                  ·gc.alloc.rate:      197.321 MB/sec
[info]                  ·gc.alloc.rate.norm: 440.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 706405.142 ops/s
[info]                  ·gc.alloc.rate:      197.463 MB/sec
[info]                  ·gc.alloc.rate.norm: 440.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala":
[info]   705908.412 ±(99.9%) 5212.060 ops/s [Average]
[info]   (min, avg, max) = (703861.249, 705908.412, 707600.558), stdev = 1353.556
[info]   CI (99.9%): [700696.352, 711120.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   197.336 ±(99.9%) 1.424 MB/sec [Average]
[info]   (min, avg, max) = (196.795, 197.336, 197.821), stdev = 0.370
[info]   CI (99.9%): [195.913, 198.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   440.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (440.001, 440.001, 440.001), stdev = 0.001
[info]   CI (99.9%): [440.001, 440.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   135.636 ±(99.9%) 1167.864 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 135.636, 678.178), stdev = 303.291
[info]   CI (99.9%): [≈ 0, 1303.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   303.258 ±(99.9%) 2611.144 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 303.258, 1516.291), stdev = 678.106
[info]   CI (99.9%): [≈ 0, 2914.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.count":
[info]   1.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.200, 1.000), stdev = 0.447
[info]   CI (99.9%): [1.000, 1.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 4.000), stdev = 1.789
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 80.94% complete, ETA 00:21:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 702788.654 ops/s
[info] # Warmup Iteration   2: 742596.390 ops/s
[info] # Warmup Iteration   3: 738815.642 ops/s
[info] # Warmup Iteration   4: 743436.600 ops/s
[info] # Warmup Iteration   5: 703369.345 ops/s
[info] Iteration   1: 743577.320 ops/s
[info]                  ·gc.alloc.rate:      7.559 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 743713.897 ops/s
[info]                  ·gc.alloc.rate:      7.560 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 743751.594 ops/s
[info]                  ·gc.alloc.rate:      7.561 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 743370.428 ops/s
[info]                  ·gc.alloc.rate:      7.558 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 743927.147 ops/s
[info]                  ·gc.alloc.rate:      7.563 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc":
[info]   743668.077 ±(99.9%) 800.859 ops/s [Average]
[info]   (min, avg, max) = (743370.428, 743668.077, 743927.147), stdev = 207.980
[info]   CI (99.9%): [742867.219, 744468.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   7.560 ±(99.9%) 0.007 MB/sec [Average]
[info]   (min, avg, max) = (7.558, 7.560, 7.563), stdev = 0.002
[info]   CI (99.9%): [7.553, 7.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16.001, 16.001, 16.001), stdev = 0.001
[info]   CI (99.9%): [16.001, 16.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 81.18% complete, ETA 00:21:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17909.995 ops/s
[info] # Warmup Iteration   2: 38852.230 ops/s
[info] # Warmup Iteration   3: 39033.680 ops/s
[info] # Warmup Iteration   4: 39384.176 ops/s
[info] # Warmup Iteration   5: 38885.170 ops/s
[info] Iteration   1: 38710.428 ops/s
[info]                  ·gc.alloc.rate:                   1624.614 MB/sec
[info]                  ·gc.alloc.rate.norm:              66064.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2029.958 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        82547.127 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 27.082 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   2: 39128.195 ops/s
[info]                  ·gc.alloc.rate:                   1642.305 MB/sec
[info]                  ·gc.alloc.rate.norm:              66064.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.132 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        54471.828 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 187.557 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 39698.564 ops/s
[info]                  ·gc.alloc.rate:                                  1666.427 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66064.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.090 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.566 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.382 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       81047.694 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 39828.717 ops/s
[info]                  ·gc.alloc.rate:            1672.262 MB/sec
[info]                  ·gc.alloc.rate.norm:       66064.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1363.230 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 53855.470 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 39763.540 ops/s
[info]                  ·gc.alloc.rate:            1668.835 MB/sec
[info]                  ·gc.alloc.rate.norm:       66064.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.042 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 80917.268 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson":
[info]   39425.889 ±(99.9%) 1877.695 ops/s [Average]
[info]   (min, avg, max) = (38710.428, 39425.889, 39828.717), stdev = 487.631
[info]   CI (99.9%): [37548.194, 41303.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1654.889 ±(99.9%) 79.486 MB/sec [Average]
[info]   (min, avg, max) = (1624.614, 1654.889, 1672.262), stdev = 20.642
[info]   CI (99.9%): [1575.403, 1734.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   66064.011 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (66064.010, 66064.011, 66064.011), stdev = 0.001
[info]   CI (99.9%): [66064.009, 66064.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.018 ±(99.9%) 0.155 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.090), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.713 ±(99.9%) 6.141 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.713, 3.566), stdev = 1.595
[info]   CI (99.9%): [≈ 0, 6.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1767.149 ±(99.9%) 1436.050 MB/sec [Average]
[info]   (min, avg, max) = (1354.132, 1767.149, 2044.382), stdev = 372.938
[info]   CI (99.9%): [331.099, 3203.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   70567.877 ±(99.9%) 57721.981 B/op [Average]
[info]   (min, avg, max) = (53855.470, 70567.877, 82547.127), stdev = 14990.215
[info]   CI (99.9%): [12845.896, 128289.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.822 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.663), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   42.928 ±(99.9%) 314.582 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 42.928, 187.557), stdev = 81.696
[info]   CI (99.9%): [≈ 0, 357.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.000, 15.000), stdev = 5.099
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 81.41% complete, ETA 00:21:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 200463.220 ops/s
[info] # Warmup Iteration   2: 222068.977 ops/s
[info] # Warmup Iteration   3: 219024.176 ops/s
[info] # Warmup Iteration   4: 223051.585 ops/s
[info] # Warmup Iteration   5: 223918.460 ops/s
[info] Iteration   1: 226046.021 ops/s
[info]                  ·gc.alloc.rate:            884.626 MB/sec
[info]                  ·gc.alloc.rate.norm:       6160.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.066 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4721.644 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 225997.065 ops/s
[info]                  ·gc.alloc.rate:            884.655 MB/sec
[info]                  ·gc.alloc.rate.norm:       6160.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.241 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4722.709 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 225221.987 ops/s
[info]                  ·gc.alloc.rate:            881.420 MB/sec
[info]                  ·gc.alloc.rate.norm:       6160.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.143 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9477.706 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 225942.837 ops/s
[info]                  ·gc.alloc.rate:            884.267 MB/sec
[info]                  ·gc.alloc.rate.norm:       6160.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.040 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4723.378 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 226050.624 ops/s
[info]                  ·gc.alloc.rate:            884.621 MB/sec
[info]                  ·gc.alloc.rate.norm:       6160.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.026 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4721.393 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala":
[info]   225851.707 ±(99.9%) 1365.903 ops/s [Average]
[info]   (min, avg, max) = (225221.987, 225851.707, 226050.624), stdev = 354.721
[info]   CI (99.9%): [224485.804, 227217.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   883.918 ±(99.9%) 5.412 MB/sec [Average]
[info]   (min, avg, max) = (881.420, 883.918, 884.655), stdev = 1.405
[info]   CI (99.9%): [878.506, 889.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6160.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6160.002, 6160.002, 6160.002), stdev = 0.001
[info]   CI (99.9%): [6160.002, 6160.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   813.703 ±(99.9%) 1167.641 MB/sec [Average]
[info]   (min, avg, max) = (678.026, 813.703, 1356.143), stdev = 303.233
[info]   CI (99.9%): [≈ 0, 1981.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   5673.366 ±(99.9%) 8189.130 B/op [Average]
[info]   (min, avg, max) = (4721.393, 5673.366, 9477.706), stdev = 2126.691
[info]   CI (99.9%): [≈ 0, 13862.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 6.000), stdev = 1.225
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 81.65% complete, ETA 00:20:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8864.391 ops/s
[info] # Warmup Iteration   2: 22612.638 ops/s
[info] # Warmup Iteration   3: 23225.474 ops/s
[info] # Warmup Iteration   4: 23177.203 ops/s
[info] # Warmup Iteration   5: 23336.879 ops/s
[info] Iteration   1: 23052.011 ops/s
[info]                  ·gc.alloc.rate:                   1277.307 MB/sec
[info]                  ·gc.alloc.rate.norm:              87184.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.936 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        92414.401 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 45.480 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 23485.319 ops/s
[info]                  ·gc.alloc.rate:                   1300.858 MB/sec
[info]                  ·gc.alloc.rate.norm:              87184.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.089 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        90751.597 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 44.639 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 23300.816 ops/s
[info]                  ·gc.alloc.rate:            1290.773 MB/sec
[info]                  ·gc.alloc.rate.norm:       87184.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.141 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 91464.153 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   4: 23604.695 ops/s
[info]                  ·gc.alloc.rate:                   1307.830 MB/sec
[info]                  ·gc.alloc.rate.norm:              87184.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1358.425 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        90556.818 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 310.887 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 23826.810 ops/s
[info]                  ·gc.alloc.rate:                                  1319.916 MB/sec
[info]                  ·gc.alloc.rate.norm:                             87184.017 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.161 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 10.659 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            681.464 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       45012.515 B/op
[info]                  ·gc.count:                                       1.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson":
[info]   23453.930 ±(99.9%) 1135.348 ops/s [Average]
[info]   (min, avg, max) = (23052.011, 23453.930, 23826.810), stdev = 294.846
[info]   CI (99.9%): [22318.582, 24589.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1299.337 ±(99.9%) 62.583 MB/sec [Average]
[info]   (min, avg, max) = (1277.307, 1299.337, 1319.916), stdev = 16.253
[info]   CI (99.9%): [1236.754, 1361.920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   87184.018 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (87184.017, 87184.018, 87184.022), stdev = 0.002
[info]   CI (99.9%): [87184.010, 87184.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.032 ±(99.9%) 0.278 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.032, 0.161), stdev = 0.072
[info]   CI (99.9%): [≈ 0, 0.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.132 ±(99.9%) 18.356 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.132, 10.659), stdev = 4.767
[info]   CI (99.9%): [≈ 0, 20.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1220.411 ±(99.9%) 1160.148 MB/sec [Average]
[info]   (min, avg, max) = (681.464, 1220.411, 1358.425), stdev = 301.287
[info]   CI (99.9%): [60.263, 2380.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   82039.897 ±(99.9%) 79753.557 B/op [Average]
[info]   (min, avg, max) = (45012.515, 82039.897, 92414.401), stdev = 20711.745
[info]   CI (99.9%): [2286.340, 161793.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.199 ±(99.9%) 7.567 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.199, 4.664), stdev = 1.965
[info]   CI (99.9%): [≈ 0, 8.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   80.201 ±(99.9%) 504.091 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 80.201, 310.887), stdev = 130.911
[info]   CI (99.9%): [≈ 0, 584.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.000, 11.000), stdev = 3.674
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 81.88% complete, ETA 00:20:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 55448.009 ops/s
[info] # Warmup Iteration   2: 96171.435 ops/s
[info] # Warmup Iteration   3: 95982.072 ops/s
[info] # Warmup Iteration   4: 96709.293 ops/s
[info] # Warmup Iteration   5: 96478.820 ops/s
[info] Iteration   1: 97655.912 ops/s
[info]                  ·gc.alloc.rate:                   1370.601 MB/sec
[info]                  ·gc.alloc.rate.norm:              22088.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.697 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        21815.586 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 10.736 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 98485.259 ops/s
[info]                  ·gc.alloc.rate:                   1382.104 MB/sec
[info]                  ·gc.alloc.rate.norm:              22088.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.235 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        21642.622 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 10.646 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 98602.165 ops/s
[info]                  ·gc.alloc.rate:                   1383.581 MB/sec
[info]                  ·gc.alloc.rate.norm:              22088.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.033 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        21616.287 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 74.429 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 98648.834 ops/s
[info]                  ·gc.alloc.rate:                                  1384.517 MB/sec
[info]                  ·gc.alloc.rate.norm:                             22088.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.022 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.347 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.936 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       21743.709 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 99237.193 ops/s
[info]                  ·gc.alloc.rate:                                  1392.668 MB/sec
[info]                  ·gc.alloc.rate.norm:                             22088.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.027 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.421 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.838 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       21614.896 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala":
[info]   98525.872 ±(99.9%) 2182.842 ops/s [Average]
[info]   (min, avg, max) = (97655.912, 98525.872, 99237.193), stdev = 566.877
[info]   CI (99.9%): [96343.031, 100708.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1382.694 ±(99.9%) 30.454 MB/sec [Average]
[info]   (min, avg, max) = (1370.601, 1382.694, 1392.668), stdev = 7.909
[info]   CI (99.9%): [1352.240, 1413.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   22088.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (22088.004, 22088.004, 22088.004), stdev = 0.001
[info]   CI (99.9%): [22088.004, 22088.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.010 ±(99.9%) 0.051 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.027), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.154 ±(99.9%) 0.816 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.154, 0.421), stdev = 0.212
[info]   CI (99.9%): [≈ 0, 0.970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1357.548 ±(99.9%) 18.783 MB/sec [Average]
[info]   (min, avg, max) = (1353.697, 1357.548, 1362.936), stdev = 4.878
[info]   CI (99.9%): [1338.764, 1376.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   21686.620 ±(99.9%) 343.971 B/op [Average]
[info]   (min, avg, max) = (21614.896, 21686.620, 21815.586), stdev = 89.328
[info]   CI (99.9%): [21342.649, 22030.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.199 ±(99.9%) 7.565 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.199, 4.662), stdev = 1.964
[info]   CI (99.9%): [≈ 0, 8.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   19.162 ±(99.9%) 120.734 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 19.162, 74.429), stdev = 31.354
[info]   CI (99.9%): [≈ 0, 139.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.200, 11.000), stdev = 3.962
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 82.12% complete, ETA 00:20:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 305731.898 ops/s
[info] # Warmup Iteration   2: 344947.583 ops/s
[info] # Warmup Iteration   3: 344913.194 ops/s
[info] # Warmup Iteration   4: 347575.592 ops/s
[info] # Warmup Iteration   5: 348404.761 ops/s
[info] Iteration   1: 345406.094 ops/s
[info]                  ·gc.alloc.rate:                   1644.875 MB/sec
[info]                  ·gc.alloc.rate.norm:              7496.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2032.088 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        9260.604 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.035 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 347595.470 ops/s
[info]                  ·gc.alloc.rate:                   1655.382 MB/sec
[info]                  ·gc.alloc.rate.norm:              7496.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1356.119 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        6140.860 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 15.081 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 348363.500 ops/s
[info]                  ·gc.alloc.rate:                                  1659.053 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7496.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.103 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.463 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.128 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9235.864 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 347583.442 ops/s
[info]                  ·gc.alloc.rate:            1655.494 MB/sec
[info]                  ·gc.alloc.rate.norm:       7496.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.915 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6171.217 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 348786.456 ops/s
[info]                  ·gc.alloc.rate:            1661.248 MB/sec
[info]                  ·gc.alloc.rate.norm:       7496.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.292 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9224.401 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala":
[info]   347546.992 ±(99.9%) 5016.961 ops/s [Average]
[info]   (min, avg, max) = (345406.094, 347546.992, 348786.456), stdev = 1302.889
[info]   CI (99.9%): [342530.031, 352563.954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1655.210 ±(99.9%) 24.212 MB/sec [Average]
[info]   (min, avg, max) = (1644.875, 1655.210, 1661.248), stdev = 6.288
[info]   CI (99.9%): [1630.998, 1679.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   7496.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7496.001, 7496.001, 7496.001), stdev = 0.001
[info]   CI (99.9%): [7496.001, 7496.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.021 ±(99.9%) 0.177 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.103), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.093 ±(99.9%) 0.798 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.093, 0.463), stdev = 0.207
[info]   CI (99.9%): [≈ 0, 0.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1767.908 ±(99.9%) 1435.710 MB/sec [Average]
[info]   (min, avg, max) = (1356.119, 1767.908, 2044.292), stdev = 372.849
[info]   CI (99.9%): [332.198, 3203.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   8006.589 ±(99.9%) 6505.273 B/op [Average]
[info]   (min, avg, max) = (6140.860, 8006.589, 9260.604), stdev = 1689.399
[info]   CI (99.9%): [1501.316, 14511.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   3.623 ±(99.9%) 25.177 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.623, 15.081), stdev = 6.538
[info]   CI (99.9%): [≈ 0, 28.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 10.000), stdev = 3.050
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 82.35% complete, ETA 00:19:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 342560.771 ops/s
[info] # Warmup Iteration   2: 391792.045 ops/s
[info] # Warmup Iteration   3: 400774.421 ops/s
[info] # Warmup Iteration   4: 401158.881 ops/s
[info] # Warmup Iteration   5: 401569.891 ops/s
[info] Iteration   1: 401262.793 ops/s
[info]                  ·gc.alloc.rate:            1374.388 MB/sec
[info]                  ·gc.alloc.rate.norm:       5392.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.258 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5316.952 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 400976.068 ops/s
[info]                  ·gc.alloc.rate:                   1374.193 MB/sec
[info]                  ·gc.alloc.rate.norm:              5392.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1356.026 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5320.717 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.615 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 400452.937 ops/s
[info]                  ·gc.alloc.rate:            1372.004 MB/sec
[info]                  ·gc.alloc.rate.norm:       5392.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.974 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5325.073 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 396518.827 ops/s
[info]                  ·gc.alloc.rate:                                  1358.295 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5392.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.052 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.204 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1358.734 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5393.746 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                15.864 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 394348.774 ops/s
[info]                  ·gc.alloc.rate:                                  1350.882 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5392.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.106 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.425 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.764 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5439.428 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   398711.880 ±(99.9%) 11948.040 ops/s [Average]
[info]   (min, avg, max) = (394348.774, 398711.880, 401262.793), stdev = 3102.868
[info]   CI (99.9%): [386763.840, 410659.920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1365.952 ±(99.9%) 41.359 MB/sec [Average]
[info]   (min, avg, max) = (1350.882, 1365.952, 1374.388), stdev = 10.741
[info]   CI (99.9%): [1324.593, 1407.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   5392.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5392.001, 5392.001, 5392.001), stdev = 0.001
[info]   CI (99.9%): [5392.001, 5392.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.032 ±(99.9%) 0.183 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.032, 0.106), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.126 ±(99.9%) 0.728 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.126, 0.425), stdev = 0.189
[info]   CI (99.9%): [≈ 0, 0.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   1357.551 ±(99.9%) 12.595 MB/sec [Average]
[info]   (min, avg, max) = (1354.974, 1357.551, 1362.764), stdev = 3.271
[info]   CI (99.9%): [1344.956, 1370.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   5359.183 ±(99.9%) 211.439 B/op [Average]
[info]   (min, avg, max) = (5316.952, 5359.183, 5439.428), stdev = 54.910
[info]   CI (99.9%): [5147.744, 5570.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm":
[info]   3.696 ±(99.9%) 26.553 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.696, 15.864), stdev = 6.896
[info]   CI (99.9%): [≈ 0, 30.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 7.000), stdev = 1.789
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 82.59% complete, ETA 00:19:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25448.408 ops/s
[info] # Warmup Iteration   2: 50037.245 ops/s
[info] # Warmup Iteration   3: 51396.884 ops/s
[info] # Warmup Iteration   4: 52446.192 ops/s
[info] # Warmup Iteration   5: 52589.023 ops/s
[info] Iteration   1: 52212.134 ops/s
[info]                  ·gc.alloc.rate:            1177.189 MB/sec
[info]                  ·gc.alloc.rate.norm:       35488.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.118 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 40821.796 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 52117.339 ops/s
[info]                  ·gc.alloc.rate:                   1175.003 MB/sec
[info]                  ·gc.alloc.rate.norm:              35488.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.453 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        40877.646 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 20.117 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 52501.326 ops/s
[info]                  ·gc.alloc.rate:            1183.745 MB/sec
[info]                  ·gc.alloc.rate.norm:       35488.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.429 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 20308.934 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 52140.250 ops/s
[info]                  ·gc.alloc.rate:                   1175.868 MB/sec
[info]                  ·gc.alloc.rate.norm:              35488.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.492 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        40878.941 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 20.108 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   5: 52466.803 ops/s
[info]                  ·gc.alloc.rate:                                  1182.988 MB/sec
[info]                  ·gc.alloc.rate.norm:                             35488.008 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.011 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.318 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1358.199 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       40744.097 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                139.877 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson":
[info]   52287.570 ±(99.9%) 705.279 ops/s [Average]
[info]   (min, avg, max) = (52117.339, 52287.570, 52501.326), stdev = 183.159
[info]   CI (99.9%): [51582.291, 52992.849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1178.958 ±(99.9%) 15.816 MB/sec [Average]
[info]   (min, avg, max) = (1175.003, 1178.958, 1183.745), stdev = 4.107
[info]   CI (99.9%): [1163.143, 1194.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   35488.008 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (35488.008, 35488.008, 35488.008), stdev = 0.001
[info]   CI (99.9%): [35488.007, 35488.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.018 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.011), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.064 ±(99.9%) 0.548 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.064, 0.318), stdev = 0.142
[info]   CI (99.9%): [≈ 0, 0.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1219.538 ±(99.9%) 1166.953 MB/sec [Average]
[info]   (min, avg, max) = (677.429, 1219.538, 1358.199), stdev = 303.054
[info]   CI (99.9%): [52.585, 2386.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   36726.283 ±(99.9%) 35340.217 B/op [Average]
[info]   (min, avg, max) = (20308.934, 36726.283, 40878.941), stdev = 9177.742
[info]   CI (99.9%): [1386.066, 72066.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.199 ±(99.9%) 7.565 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.199, 4.663), stdev = 1.965
[info]   CI (99.9%): [≈ 0, 8.765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   36.020 ±(99.9%) 226.888 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 36.020, 139.877), stdev = 58.922
[info]   CI (99.9%): [≈ 0, 262.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 8.600, 12.000), stdev = 2.702
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 82.82% complete, ETA 00:19:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 47390.146 ops/s
[info] # Warmup Iteration   2: 58240.098 ops/s
[info] # Warmup Iteration   3: 59154.976 ops/s
[info] # Warmup Iteration   4: 59375.875 ops/s
[info] # Warmup Iteration   5: 59356.871 ops/s
[info] Iteration   1: 58241.293 ops/s
[info]                  ·gc.alloc.rate:            1310.172 MB/sec
[info]                  ·gc.alloc.rate.norm:       35400.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.436 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 36650.027 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 58349.589 ops/s
[info]                  ·gc.alloc.rate:            1312.488 MB/sec
[info]                  ·gc.alloc.rate.norm:       35400.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.273 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 36580.949 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 58175.741 ops/s
[info]                  ·gc.alloc.rate:            1308.353 MB/sec
[info]                  ·gc.alloc.rate.norm:       35400.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.089 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 36691.600 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 58489.240 ops/s
[info]                  ·gc.alloc.rate:                                  1315.712 MB/sec
[info]                  ·gc.alloc.rate.norm:                             35400.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.041 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.091 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1359.681 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       36583.026 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                89.620 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 59749.463 ops/s
[info]                  ·gc.alloc.rate:                                  1343.770 MB/sec
[info]                  ·gc.alloc.rate.norm:                             35400.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.093 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.463 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.751 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       35900.042 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce":
[info]   58601.065 ±(99.9%) 2513.927 ops/s [Average]
[info]   (min, avg, max) = (58175.741, 58601.065, 59749.463), stdev = 652.859
[info]   CI (99.9%): [56087.138, 61114.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1318.099 ±(99.9%) 56.265 MB/sec [Average]
[info]   (min, avg, max) = (1308.353, 1318.099, 1343.770), stdev = 14.612
[info]   CI (99.9%): [1261.834, 1374.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   35400.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (35400.007, 35400.007, 35400.008), stdev = 0.001
[info]   CI (99.9%): [35400.006, 35400.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.027 ±(99.9%) 0.159 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.093), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.711 ±(99.9%) 4.187 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.711, 2.463), stdev = 1.087
[info]   CI (99.9%): [≈ 0, 4.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1358.246 ±(99.9%) 11.256 MB/sec [Average]
[info]   (min, avg, max) = (1356.089, 1358.246, 1362.751), stdev = 2.923
[info]   CI (99.9%): [1346.990, 1369.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   36481.129 ±(99.9%) 1263.742 B/op [Average]
[info]   (min, avg, max) = (35900.042, 36481.129, 36691.600), stdev = 328.190
[info]   CI (99.9%): [35217.387, 37744.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   17.924 ±(99.9%) 154.332 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17.924, 89.620), stdev = 40.079
[info]   CI (99.9%): [≈ 0, 172.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 8.000), stdev = 2.000
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 83.06% complete, ETA 00:19:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42523.693 ops/s
[info] # Warmup Iteration   2: 96683.354 ops/s
[info] # Warmup Iteration   3: 95217.011 ops/s
[info] # Warmup Iteration   4: 96622.949 ops/s
[info] # Warmup Iteration   5: 98434.682 ops/s
[info] Iteration   1: 98415.942 ops/s
[info]                  ·gc.alloc.rate:                   669.276 MB/sec
[info]                  ·gc.alloc.rate.norm:              10704.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.752 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        10823.570 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 10.653 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 98455.582 ops/s
[info]                  ·gc.alloc.rate:            669.612 MB/sec
[info]                  ·gc.alloc.rate.norm:       10704.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.456 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10829.383 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 98522.099 ops/s
[info]                  ·gc.alloc.rate:            670.142 MB/sec
[info]                  ·gc.alloc.rate.norm:       10704.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.489 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10821.361 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 98204.312 ops/s
[info]                  ·gc.alloc.rate:            667.776 MB/sec
[info]                  ·gc.alloc.rate.norm:       10704.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.665 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10846.491 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 98366.799 ops/s
[info]                  ·gc.alloc.rate:                   669.021 MB/sec
[info]                  ·gc.alloc.rate.norm:              10704.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.810 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        10828.631 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 10.658 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala":
[info]   98392.947 ±(99.9%) 461.270 ops/s [Average]
[info]   (min, avg, max) = (98204.312, 98392.947, 98522.099), stdev = 119.790
[info]   CI (99.9%): [97931.677, 98854.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   669.165 ±(99.9%) 3.399 MB/sec [Average]
[info]   (min, avg, max) = (667.776, 669.165, 670.142), stdev = 0.883
[info]   CI (99.9%): [665.767, 672.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   10704.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10704.004, 10704.004, 10704.004), stdev = 0.001
[info]   CI (99.9%): [10704.004, 10704.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   677.034 ±(99.9%) 1.553 MB/sec [Average]
[info]   (min, avg, max) = (676.665, 677.034, 677.489), stdev = 0.403
[info]   CI (99.9%): [675.482, 678.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   10829.887 ±(99.9%) 38.029 B/op [Average]
[info]   (min, avg, max) = (10821.361, 10829.887, 10846.491), stdev = 9.876
[info]   CI (99.9%): [10791.859, 10867.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   4.262 ±(99.9%) 22.474 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.262, 10.658), stdev = 5.836
[info]   CI (99.9%): [≈ 0, 26.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 83.29% complete, ETA 00:18:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 166239.851 ops/s
[info] # Warmup Iteration   2: 180797.508 ops/s
[info] # Warmup Iteration   3: 174469.970 ops/s
[info] # Warmup Iteration   4: 181237.840 ops/s
[info] # Warmup Iteration   5: 178248.262 ops/s
[info] Iteration   1: 177813.209 ops/s
[info]                  ·gc.alloc.rate:            732.101 MB/sec
[info]                  ·gc.alloc.rate.norm:       6480.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.120 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6002.206 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 179185.060 ops/s
[info]                  ·gc.alloc.rate:            737.681 MB/sec
[info]                  ·gc.alloc.rate.norm:       6480.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.054 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5956.222 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 178871.960 ops/s
[info]                  ·gc.alloc.rate:            736.371 MB/sec
[info]                  ·gc.alloc.rate.norm:       6480.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.004 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5966.376 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 178871.585 ops/s
[info]                  ·gc.alloc.rate:            736.397 MB/sec
[info]                  ·gc.alloc.rate.norm:       6480.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.020 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5966.310 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 178937.800 ops/s
[info]                  ·gc.alloc.rate:            736.710 MB/sec
[info]                  ·gc.alloc.rate.norm:       6480.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.081 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5964.310 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala":
[info]   178735.923 ±(99.9%) 2047.360 ops/s [Average]
[info]   (min, avg, max) = (177813.209, 178735.923, 179185.060), stdev = 531.693
[info]   CI (99.9%): [176688.562, 180783.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   735.852 ±(99.9%) 8.329 MB/sec [Average]
[info]   (min, avg, max) = (732.101, 735.852, 737.681), stdev = 2.163
[info]   CI (99.9%): [727.523, 744.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6480.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6480.002, 6480.002, 6480.002), stdev = 0.001
[info]   CI (99.9%): [6480.002, 6480.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   678.056 ±(99.9%) 0.180 MB/sec [Average]
[info]   (min, avg, max) = (678.004, 678.056, 678.120), stdev = 0.047
[info]   CI (99.9%): [677.875, 678.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   5971.085 ±(99.9%) 68.891 B/op [Average]
[info]   (min, avg, max) = (5956.222, 5971.085, 6002.206), stdev = 17.891
[info]   CI (99.9%): [5902.194, 6039.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 83.53% complete, ETA 00:18:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7950.376 ops/s
[info] # Warmup Iteration   2: 20951.897 ops/s
[info] # Warmup Iteration   3: 21414.314 ops/s
[info] # Warmup Iteration   4: 21372.807 ops/s
[info] # Warmup Iteration   5: 21343.387 ops/s
[info] Iteration   1: 21137.877 ops/s
[info]                  ·gc.alloc.rate:            1186.993 MB/sec
[info]                  ·gc.alloc.rate.norm:       88368.024 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.726 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 100780.741 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 21435.366 ops/s
[info]                  ·gc.alloc.rate:                   1203.642 MB/sec
[info]                  ·gc.alloc.rate.norm:              88368.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.362 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        99433.509 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 48.910 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 21362.956 ops/s
[info]                  ·gc.alloc.rate:            1199.327 MB/sec
[info]                  ·gc.alloc.rate.norm:       88368.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.118 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 99773.238 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 21622.419 ops/s
[info]                  ·gc.alloc.rate:                   1214.111 MB/sec
[info]                  ·gc.alloc.rate.norm:              88368.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.832 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        49262.611 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 48.487 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 21507.077 ops/s
[info]                  ·gc.alloc.rate:                   1207.509 MB/sec
[info]                  ·gc.alloc.rate.norm:              88368.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1358.162 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        99393.169 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 292.476 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson":
[info]   21413.139 ±(99.9%) 697.922 ops/s [Average]
[info]   (min, avg, max) = (21137.877, 21413.139, 21622.419), stdev = 181.248
[info]   CI (99.9%): [20715.217, 22111.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1202.316 ±(99.9%) 39.059 MB/sec [Average]
[info]   (min, avg, max) = (1186.993, 1202.316, 1214.111), stdev = 10.143
[info]   CI (99.9%): [1163.257, 1241.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   88368.020 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (88368.019, 88368.020, 88368.024), stdev = 0.002
[info]   CI (99.9%): [88368.012, 88368.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1219.440 ±(99.9%) 1168.026 MB/sec [Average]
[info]   (min, avg, max) = (676.832, 1219.440, 1358.162), stdev = 303.333
[info]   CI (99.9%): [51.414, 2387.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   89728.654 ±(99.9%) 87132.892 B/op [Average]
[info]   (min, avg, max) = (49262.611, 89728.654, 100780.741), stdev = 22628.135
[info]   CI (99.9%): [2595.761, 176861.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 6.438 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 3.997), stdev = 1.672
[info]   CI (99.9%): [≈ 0, 7.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   77.975 ±(99.9%) 471.155 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 77.975, 292.476), stdev = 122.357
[info]   CI (99.9%): [≈ 0, 549.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 8.600, 10.000), stdev = 1.949
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 83.76% complete, ETA 00:18:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 91510.515 ops/s
[info] # Warmup Iteration   2: 164370.293 ops/s
[info] # Warmup Iteration   3: 164966.234 ops/s
[info] # Warmup Iteration   4: 164667.855 ops/s
[info] # Warmup Iteration   5: 163244.879 ops/s
[info] Iteration   1: 163796.816 ops/s
[info]                  ·gc.alloc.rate:            1053.850 MB/sec
[info]                  ·gc.alloc.rate.norm:       10128.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.657 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6502.995 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 160697.431 ops/s
[info]                  ·gc.alloc.rate:            1034.022 MB/sec
[info]                  ·gc.alloc.rate.norm:       10128.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.463 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13256.845 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 161596.643 ops/s
[info]                  ·gc.alloc.rate:            1039.865 MB/sec
[info]                  ·gc.alloc.rate.norm:       10128.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.770 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6591.553 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 160149.513 ops/s
[info]                  ·gc.alloc.rate:            1030.500 MB/sec
[info]                  ·gc.alloc.rate.norm:       10128.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.366 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13301.203 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 161687.289 ops/s
[info]                  ·gc.alloc.rate:            1040.241 MB/sec
[info]                  ·gc.alloc.rate.norm:       10128.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.617 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6587.681 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala":
[info]   161585.538 ±(99.9%) 5360.260 ops/s [Average]
[info]   (min, avg, max) = (160149.513, 161585.538, 163796.816), stdev = 1392.042
[info]   CI (99.9%): [156225.279, 166945.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1039.696 ±(99.9%) 34.301 MB/sec [Average]
[info]   (min, avg, max) = (1030.500, 1039.696, 1053.850), stdev = 8.908
[info]   CI (99.9%): [1005.395, 1073.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   10128.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10128.002, 10128.003, 10128.003), stdev = 0.001
[info]   CI (99.9%): [10128.002, 10128.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   947.374 ±(99.9%) 1427.288 MB/sec [Average]
[info]   (min, avg, max) = (676.617, 947.374, 1353.463), stdev = 370.662
[info]   CI (99.9%): [≈ 0, 2374.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   9248.056 ±(99.9%) 14170.206 B/op [Average]
[info]   (min, avg, max) = (6502.995, 9248.056, 13301.203), stdev = 3679.958
[info]   CI (99.9%): [≈ 0, 23418.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.600, 9.000), stdev = 2.191
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 84.00% complete, ETA 00:18:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 475916.792 ops/s
[info] # Warmup Iteration   2: 505085.534 ops/s
[info] # Warmup Iteration   3: 512522.412 ops/s
[info] # Warmup Iteration   4: 518039.540 ops/s
[info] # Warmup Iteration   5: 521810.075 ops/s
[info] Iteration   1: 526629.875 ops/s
[info]                  ·gc.alloc.rate:            586.214 MB/sec
[info]                  ·gc.alloc.rate.norm:       1752.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.422 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2024.589 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 526535.073 ops/s
[info]                  ·gc.alloc.rate:      586.233 MB/sec
[info]                  ·gc.alloc.rate.norm: 1752.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 527613.785 ops/s
[info]                  ·gc.alloc.rate:            587.540 MB/sec
[info]                  ·gc.alloc.rate.norm:       1752.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.680 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2020.791 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 528236.194 ops/s
[info]                  ·gc.alloc.rate:                   588.009 MB/sec
[info]                  ·gc.alloc.rate.norm:              1752.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             677.439 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2018.462 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.985 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 527983.968 ops/s
[info]                  ·gc.alloc.rate:            587.857 MB/sec
[info]                  ·gc.alloc.rate.norm:       1752.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.219 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2021.307 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala":
[info]   527399.779 ±(99.9%) 2999.509 ops/s [Average]
[info]   (min, avg, max) = (526535.073, 527399.779, 528236.194), stdev = 778.963
[info]   CI (99.9%): [524400.270, 530399.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   587.171 ±(99.9%) 3.392 MB/sec [Average]
[info]   (min, avg, max) = (586.214, 587.171, 588.009), stdev = 0.881
[info]   CI (99.9%): [583.779, 590.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1752.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1752.001, 1752.001, 1752.001), stdev = 0.001
[info]   CI (99.9%): [1752.001, 1752.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   542.152 ±(99.9%) 1167.023 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 542.152, 678.219), stdev = 303.072
[info]   CI (99.9%): [≈ 0, 1709.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1617.030 ±(99.9%) 3480.789 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1617.030, 2024.589), stdev = 903.950
[info]   CI (99.9%): [≈ 0, 5097.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.397 ±(99.9%) 3.418 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.397, 1.985), stdev = 0.888
[info]   CI (99.9%): [≈ 0, 3.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 84.24% complete, ETA 00:17:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 505738.854 ops/s
[info] # Warmup Iteration   2: 566715.965 ops/s
[info] # Warmup Iteration   3: 568556.469 ops/s
[info] # Warmup Iteration   4: 568206.040 ops/s
[info] # Warmup Iteration   5: 569078.549 ops/s
[info] Iteration   1: 567793.523 ops/s
[info]                  ·gc.alloc.rate:      11.544 MB/sec
[info]                  ·gc.alloc.rate.norm: 32.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 568412.218 ops/s
[info]                  ·gc.alloc.rate:      11.555 MB/sec
[info]                  ·gc.alloc.rate.norm: 32.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 569185.563 ops/s
[info]                  ·gc.alloc.rate:      11.572 MB/sec
[info]                  ·gc.alloc.rate.norm: 32.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 569110.208 ops/s
[info]                  ·gc.alloc.rate:      11.573 MB/sec
[info]                  ·gc.alloc.rate.norm: 32.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 568965.690 ops/s
[info]                  ·gc.alloc.rate:      11.568 MB/sec
[info]                  ·gc.alloc.rate.norm: 32.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   568693.440 ±(99.9%) 2260.871 ops/s [Average]
[info]   (min, avg, max) = (567793.523, 568693.440, 569185.563), stdev = 587.141
[info]   CI (99.9%): [566432.569, 570954.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   11.562 ±(99.9%) 0.047 MB/sec [Average]
[info]   (min, avg, max) = (11.544, 11.562, 11.573), stdev = 0.012
[info]   CI (99.9%): [11.515, 11.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   32.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (32.001, 32.001, 32.001), stdev = 0.001
[info]   CI (99.9%): [32.001, 32.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 84.47% complete, ETA 00:17:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33549.221 ops/s
[info] # Warmup Iteration   2: 61723.846 ops/s
[info] # Warmup Iteration   3: 62854.347 ops/s
[info] # Warmup Iteration   4: 63579.900 ops/s
[info] # Warmup Iteration   5: 63373.012 ops/s
[info] Iteration   1: 63226.185 ops/s
[info]                  ·gc.alloc.rate:                   1134.430 MB/sec
[info]                  ·gc.alloc.rate.norm:              28240.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.501 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        33693.451 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 16.581 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 63735.111 ops/s
[info]                  ·gc.alloc.rate:            1143.374 MB/sec
[info]                  ·gc.alloc.rate.norm:       28240.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.316 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16728.921 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 62165.649 ops/s
[info]                  ·gc.alloc.rate:            1115.490 MB/sec
[info]                  ·gc.alloc.rate.norm:       28240.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.946 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 34302.131 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 63241.853 ops/s
[info]                  ·gc.alloc.rate:            1134.634 MB/sec
[info]                  ·gc.alloc.rate.norm:       28240.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.422 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 33685.460 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 63540.748 ops/s
[info]                  ·gc.alloc.rate:                   1140.126 MB/sec
[info]                  ·gc.alloc.rate.norm:              28240.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.766 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        16762.961 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 115.493 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson":
[info]   63181.909 ±(99.9%) 2336.818 ops/s [Average]
[info]   (min, avg, max) = (62165.649, 63181.909, 63735.111), stdev = 606.864
[info]   CI (99.9%): [60845.091, 65518.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1133.611 ±(99.9%) 41.643 MB/sec [Average]
[info]   (min, avg, max) = (1115.490, 1133.611, 1143.374), stdev = 10.815
[info]   CI (99.9%): [1091.967, 1175.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   28240.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (28240.006, 28240.007, 28240.007), stdev = 0.001
[info]   CI (99.9%): [28240.006, 28240.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1083.190 ±(99.9%) 1427.674 MB/sec [Average]
[info]   (min, avg, max) = (676.766, 1083.190, 1354.946), stdev = 370.762
[info]   CI (99.9%): [≈ 0, 2510.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   27034.585 ±(99.9%) 36178.886 B/op [Average]
[info]   (min, avg, max) = (16728.921, 27034.585, 34302.131), stdev = 9395.542
[info]   CI (99.9%): [≈ 0, 63213.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.822 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.663), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   26.415 ±(99.9%) 193.730 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 26.415, 115.493), stdev = 50.311
[info]   CI (99.9%): [≈ 0, 220.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.800, 10.000), stdev = 3.033
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 84.71% complete, ETA 00:17:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 63980.604 ops/s
[info] # Warmup Iteration   2: 77292.003 ops/s
[info] # Warmup Iteration   3: 77804.010 ops/s
[info] # Warmup Iteration   4: 78088.052 ops/s
[info] # Warmup Iteration   5: 77934.232 ops/s
[info] Iteration   1: 78056.729 ops/s
[info]                  ·gc.alloc.rate:            1365.512 MB/sec
[info]                  ·gc.alloc.rate.norm:       27528.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.518 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 27346.682 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 77665.384 ops/s
[info]                  ·gc.alloc.rate:            1358.567 MB/sec
[info]                  ·gc.alloc.rate.norm:       27528.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.429 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 27484.689 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 76885.647 ops/s
[info]                  ·gc.alloc.rate:            1344.665 MB/sec
[info]                  ·gc.alloc.rate.norm:       27528.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.149 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 27763.121 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 76721.496 ops/s
[info]                  ·gc.alloc.rate:                   1342.057 MB/sec
[info]                  ·gc.alloc.rate.norm:              27528.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1359.655 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        27888.968 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 68.322 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 77026.431 ops/s
[info]                  ·gc.alloc.rate:                                  1347.103 MB/sec
[info]                  ·gc.alloc.rate.norm:                             27528.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.050 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.030 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.712 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       27846.973 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce":
[info]   77271.137 ±(99.9%) 2180.952 ops/s [Average]
[info]   (min, avg, max) = (76721.496, 77271.137, 78056.729), stdev = 566.386
[info]   CI (99.9%): [75090.185, 79452.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1351.581 ±(99.9%) 38.578 MB/sec [Average]
[info]   (min, avg, max) = (1342.057, 1351.581, 1365.512), stdev = 10.019
[info]   CI (99.9%): [1313.003, 1390.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   27528.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (27528.005, 27528.005, 27528.006), stdev = 0.001
[info]   CI (99.9%): [27528.005, 27528.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.010 ±(99.9%) 0.087 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.050), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.206 ±(99.9%) 1.774 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.206, 1.030), stdev = 0.461
[info]   CI (99.9%): [≈ 0, 1.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1358.293 ±(99.9%) 10.992 MB/sec [Average]
[info]   (min, avg, max) = (1356.149, 1358.293, 1362.712), stdev = 2.855
[info]   CI (99.9%): [1347.300, 1369.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   27666.087 ±(99.9%) 916.777 B/op [Average]
[info]   (min, avg, max) = (27346.682, 27666.087, 27888.968), stdev = 238.084
[info]   CI (99.9%): [26749.309, 28582.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   13.664 ±(99.9%) 117.654 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13.664, 68.322), stdev = 30.554
[info]   CI (99.9%): [≈ 0, 131.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 8.000), stdev = 1.924
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 84.94% complete, ETA 00:17:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 75322.310 ops/s
[info] # Warmup Iteration   2: 152440.039 ops/s
[info] # Warmup Iteration   3: 153190.103 ops/s
[info] # Warmup Iteration   4: 153138.070 ops/s
[info] # Warmup Iteration   5: 149871.359 ops/s
[info] Iteration   1: 153412.704 ops/s
[info]                  ·gc.alloc.rate:            655.700 MB/sec
[info]                  ·gc.alloc.rate.norm:       6728.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.335 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6950.005 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 153543.439 ops/s
[info]                  ·gc.alloc.rate:            656.390 MB/sec
[info]                  ·gc.alloc.rate.norm:       6728.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.466 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6944.031 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 153529.765 ops/s
[info]                  ·gc.alloc.rate:            656.358 MB/sec
[info]                  ·gc.alloc.rate.norm:       6728.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.833 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6937.881 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 153548.553 ops/s
[info]                  ·gc.alloc.rate:            656.606 MB/sec
[info]                  ·gc.alloc.rate.norm:       6728.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.969 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6936.661 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 153560.078 ops/s
[info]                  ·gc.alloc.rate:            656.359 MB/sec
[info]                  ·gc.alloc.rate.norm:       6728.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.697 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6936.480 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala":
[info]   153518.908 ±(99.9%) 232.420 ops/s [Average]
[info]   (min, avg, max) = (153412.704, 153518.908, 153560.078), stdev = 60.359
[info]   CI (99.9%): [153286.488, 153751.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   656.282 ±(99.9%) 1.316 MB/sec [Average]
[info]   (min, avg, max) = (655.700, 656.282, 656.606), stdev = 0.342
[info]   CI (99.9%): [654.966, 657.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   6728.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6728.003, 6728.003, 6728.003), stdev = 0.001
[info]   CI (99.9%): [6728.002, 6728.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   677.060 ±(99.9%) 1.265 MB/sec [Average]
[info]   (min, avg, max) = (676.697, 677.060, 677.466), stdev = 0.329
[info]   CI (99.9%): [675.795, 678.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   6941.012 ±(99.9%) 22.720 B/op [Average]
[info]   (min, avg, max) = (6936.480, 6941.012, 6950.005), stdev = 5.900
[info]   CI (99.9%): [6918.291, 6963.732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 85.18% complete, ETA 00:16:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 187976.627 ops/s
[info] # Warmup Iteration   2: 207402.627 ops/s
[info] # Warmup Iteration   3: 209568.655 ops/s
[info] # Warmup Iteration   4: 208855.294 ops/s
[info] # Warmup Iteration   5: 211181.747 ops/s
[info] Iteration   1: 211093.940 ops/s
[info]                  ·gc.alloc.rate:            752.031 MB/sec
[info]                  ·gc.alloc.rate.norm:       5608.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.993 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5055.891 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 211693.197 ops/s
[info]                  ·gc.alloc.rate:            754.354 MB/sec
[info]                  ·gc.alloc.rate.norm:       5608.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.166 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5041.612 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 211468.964 ops/s
[info]                  ·gc.alloc.rate:            753.363 MB/sec
[info]                  ·gc.alloc.rate.norm:       5608.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.993 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5046.951 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 211792.466 ops/s
[info]                  ·gc.alloc.rate:            754.550 MB/sec
[info]                  ·gc.alloc.rate.norm:       5608.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.026 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5039.255 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 211607.131 ops/s
[info]                  ·gc.alloc.rate:            753.903 MB/sec
[info]                  ·gc.alloc.rate.norm:       5608.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.014 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5043.494 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala":
[info]   211531.140 ±(99.9%) 1046.317 ops/s [Average]
[info]   (min, avg, max) = (211093.940, 211531.140, 211792.466), stdev = 271.725
[info]   CI (99.9%): [210484.823, 212577.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   753.640 ±(99.9%) 3.886 MB/sec [Average]
[info]   (min, avg, max) = (752.031, 753.640, 754.550), stdev = 1.009
[info]   CI (99.9%): [749.754, 757.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5608.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5608.002, 5608.002, 5608.002), stdev = 0.001
[info]   CI (99.9%): [5608.002, 5608.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   678.038 ±(99.9%) 0.280 MB/sec [Average]
[info]   (min, avg, max) = (677.993, 678.038, 678.166), stdev = 0.073
[info]   CI (99.9%): [677.758, 678.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   5045.441 ±(99.9%) 24.971 B/op [Average]
[info]   (min, avg, max) = (5039.255, 5045.441, 5055.891), stdev = 6.485
[info]   CI (99.9%): [5020.470, 5070.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 6.000), stdev = 1.304
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 85.41% complete, ETA 00:16:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25022.663 ops/s
[info] # Warmup Iteration   2: 40981.244 ops/s
[info] # Warmup Iteration   3: 41227.964 ops/s
[info] # Warmup Iteration   4: 41092.090 ops/s
[info] # Warmup Iteration   5: 41642.177 ops/s
[info] Iteration   1: 40768.480 ops/s
[info]                  ·gc.alloc.rate:            1689.879 MB/sec
[info]                  ·gc.alloc.rate.norm:       65248.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2032.010 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 78458.048 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 41656.543 ops/s
[info]                  ·gc.alloc.rate:                                  1726.589 MB/sec
[info]                  ·gc.alloc.rate.norm:                             65248.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.059 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.229 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1358.597 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       51341.567 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                151.005 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 41599.633 ops/s
[info]                  ·gc.alloc.rate:                                  1724.742 MB/sec
[info]                  ·gc.alloc.rate.norm:                             65248.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.036 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.376 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.452 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       77342.813 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 41683.698 ops/s
[info]                  ·gc.alloc.rate:            1728.433 MB/sec
[info]                  ·gc.alloc.rate.norm:       65248.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1363.133 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 51457.989 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   5: 41663.476 ops/s
[info]                  ·gc.alloc.rate:                                  1726.880 MB/sec
[info]                  ·gc.alloc.rate.norm:                             65248.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.050 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2043.891 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       77225.882 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson":
[info]   41474.366 ±(99.9%) 1524.215 ops/s [Average]
[info]   (min, avg, max) = (40768.480, 41474.366, 41683.698), stdev = 395.834
[info]   CI (99.9%): [39950.151, 42998.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1719.305 ±(99.9%) 63.541 MB/sec [Average]
[info]   (min, avg, max) = (1689.879, 1719.305, 1728.433), stdev = 16.501
[info]   CI (99.9%): [1655.763, 1782.846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   65248.010 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (65248.010, 65248.010, 65248.011), stdev = 0.001
[info]   CI (99.9%): [65248.009, 65248.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.019 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.059), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.731 ±(99.9%) 3.942 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.731, 2.229), stdev = 1.024
[info]   CI (99.9%): [≈ 0, 4.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1768.417 ±(99.9%) 1432.742 MB/sec [Average]
[info]   (min, avg, max) = (1358.597, 1768.417, 2044.452), stdev = 372.079
[info]   CI (99.9%): [335.674, 3201.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   67165.260 ±(99.9%) 55449.051 B/op [Average]
[info]   (min, avg, max) = (51341.567, 67165.260, 78458.048), stdev = 14399.943
[info]   CI (99.9%): [11716.209, 122614.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   30.201 ±(99.9%) 260.039 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 30.201, 151.005), stdev = 67.531
[info]   CI (99.9%): [≈ 0, 290.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.200, 13.000), stdev = 4.087
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 85.65% complete, ETA 00:16:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 184769.236 ops/s
[info] # Warmup Iteration   2: 244273.460 ops/s
[info] # Warmup Iteration   3: 252787.573 ops/s
[info] # Warmup Iteration   4: 248435.634 ops/s
[info] # Warmup Iteration   5: 248684.119 ops/s
[info] Iteration   1: 251636.323 ops/s
[info]                  ·gc.alloc.rate:            1188.523 MB/sec
[info]                  ·gc.alloc.rate.norm:       7432.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.529 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8482.566 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 252808.546 ops/s
[info]                  ·gc.alloc.rate:            1193.864 MB/sec
[info]                  ·gc.alloc.rate.norm:       7432.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.157 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4221.641 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 251251.388 ops/s
[info]                  ·gc.alloc.rate:            1186.298 MB/sec
[info]                  ·gc.alloc.rate.norm:       7432.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.091 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8495.731 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 245502.625 ops/s
[info]                  ·gc.alloc.rate:            1159.132 MB/sec
[info]                  ·gc.alloc.rate.norm:       7432.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.021 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8694.398 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 246129.835 ops/s
[info]                  ·gc.alloc.rate:                   1162.583 MB/sec
[info]                  ·gc.alloc.rate.norm:              7432.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             678.311 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4336.215 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 21.298 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce":
[info]   249465.743 ±(99.9%) 13045.226 ops/s [Average]
[info]   (min, avg, max) = (245502.625, 249465.743, 252808.546), stdev = 3387.804
[info]   CI (99.9%): [236420.517, 262510.970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1178.080 ±(99.9%) 61.638 MB/sec [Average]
[info]   (min, avg, max) = (1159.132, 1178.080, 1193.864), stdev = 16.007
[info]   CI (99.9%): [1116.442, 1239.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   7432.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7432.002, 7432.002, 7432.002), stdev = 0.001
[info]   CI (99.9%): [7432.001, 7432.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1085.022 ±(99.9%) 1429.916 MB/sec [Average]
[info]   (min, avg, max) = (678.157, 1085.022, 1356.529), stdev = 371.345
[info]   CI (99.9%): [≈ 0, 2514.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   6846.110 ±(99.9%) 9031.139 B/op [Average]
[info]   (min, avg, max) = (4221.641, 6846.110, 8694.398), stdev = 2345.358
[info]   CI (99.9%): [≈ 0, 15877.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.737 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.332), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   4.260 ±(99.9%) 36.676 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.260, 21.298), stdev = 9.525
[info]   CI (99.9%): [≈ 0, 40.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 8.000), stdev = 1.871
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 85.88% complete, ETA 00:15:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 281083.998 ops/s
[info] # Warmup Iteration   2: 501105.640 ops/s
[info] # Warmup Iteration   3: 500446.469 ops/s
[info] # Warmup Iteration   4: 494434.819 ops/s
[info] # Warmup Iteration   5: 506448.232 ops/s
[info] Iteration   1: 498224.754 ops/s
[info]                  ·gc.alloc.rate:            400.123 MB/sec
[info]                  ·gc.alloc.rate.norm:       1264.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.437 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2140.045 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 503682.021 ops/s
[info]                  ·gc.alloc.rate:      404.492 MB/sec
[info]                  ·gc.alloc.rate.norm: 1264.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 505288.056 ops/s
[info]                  ·gc.alloc.rate:            405.762 MB/sec
[info]                  ·gc.alloc.rate.norm:       1264.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.382 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2110.132 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 503311.693 ops/s
[info]                  ·gc.alloc.rate:            404.138 MB/sec
[info]                  ·gc.alloc.rate.norm:       1264.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.330 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2118.449 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 507153.741 ops/s
[info]                  ·gc.alloc.rate:      407.253 MB/sec
[info]                  ·gc.alloc.rate.norm: 1264.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala":
[info]   503532.053 ±(99.9%) 12834.642 ops/s [Average]
[info]   (min, avg, max) = (498224.754, 503532.053, 507153.741), stdev = 3333.116
[info]   CI (99.9%): [490697.411, 516366.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   404.353 ±(99.9%) 10.252 MB/sec [Average]
[info]   (min, avg, max) = (400.123, 404.353, 407.253), stdev = 2.662
[info]   CI (99.9%): [394.102, 414.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1264.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1264.001, 1264.001, 1264.001), stdev = 0.001
[info]   CI (99.9%): [1264.001, 1264.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   406.430 ±(99.9%) 1428.658 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 406.430, 677.437), stdev = 371.018
[info]   CI (99.9%): [≈ 0, 1835.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1273.725 ±(99.9%) 4477.521 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1273.725, 2140.045), stdev = 1162.798
[info]   CI (99.9%): [≈ 0, 5751.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 5.000), stdev = 2.739
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 86.12% complete, ETA 00:15:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 523181.938 ops/s
[info] # Warmup Iteration   2: 595041.229 ops/s
[info] # Warmup Iteration   3: 585410.956 ops/s
[info] # Warmup Iteration   4: 595918.870 ops/s
[info] # Warmup Iteration   5: 595338.522 ops/s
[info] Iteration   1: 596547.111 ops/s
[info]                  ·gc.alloc.rate:      315.300 MB/sec
[info]                  ·gc.alloc.rate.norm: 832.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 591888.890 ops/s
[info]                  ·gc.alloc.rate:            312.865 MB/sec
[info]                  ·gc.alloc.rate.norm:       832.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.398 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1801.400 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 595335.294 ops/s
[info]                  ·gc.alloc.rate:      314.680 MB/sec
[info]                  ·gc.alloc.rate.norm: 832.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 584868.485 ops/s
[info]                  ·gc.alloc.rate:            309.139 MB/sec
[info]                  ·gc.alloc.rate.norm:       832.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.362 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1823.018 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 594761.805 ops/s
[info]                  ·gc.alloc.rate:      314.379 MB/sec
[info]                  ·gc.alloc.rate.norm: 832.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala":
[info]   592680.317 ±(99.9%) 18059.547 ops/s [Average]
[info]   (min, avg, max) = (584868.485, 592680.317, 596547.111), stdev = 4690.007
[info]   CI (99.9%): [574620.769, 610739.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   313.273 ±(99.9%) 9.543 MB/sec [Average]
[info]   (min, avg, max) = (309.139, 313.273, 315.300), stdev = 2.478
[info]   CI (99.9%): [303.730, 322.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   832.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (832.001, 832.001, 832.001), stdev = 0.001
[info]   CI (99.9%): [832.001, 832.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   270.952 ±(99.9%) 1428.652 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 270.952, 677.398), stdev = 371.016
[info]   CI (99.9%): [≈ 0, 1699.604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   724.884 ±(99.9%) 3822.215 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 724.884, 1823.018), stdev = 992.617
[info]   CI (99.9%): [≈ 0, 4547.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 4.000), stdev = 1.949
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 86.35% complete, ETA 00:15:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 584766.138 ops/s
[info] # Warmup Iteration   2: 646871.993 ops/s
[info] # Warmup Iteration   3: 640942.811 ops/s
[info] # Warmup Iteration   4: 646341.571 ops/s
[info] # Warmup Iteration   5: 605337.631 ops/s
[info] Iteration   1: 610846.326 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 646216.015 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 644078.795 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 647366.926 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 647256.930 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   639152.998 ±(99.9%) 61144.046 ops/s [Average]
[info]   (min, avg, max) = (610846.326, 639152.998, 647366.926), stdev = 15878.915
[info]   CI (99.9%): [578008.952, 700297.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 86.59% complete, ETA 00:15:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19367.759 ops/s
[info] # Warmup Iteration   2: 28956.833 ops/s
[info] # Warmup Iteration   3: 29314.502 ops/s
[info] # Warmup Iteration   4: 29486.529 ops/s
[info] # Warmup Iteration   5: 29315.723 ops/s
[info] Iteration   1: 29292.370 ops/s
[info]                  ·gc.alloc.rate:            1459.234 MB/sec
[info]                  ·gc.alloc.rate.norm:       78416.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.668 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 72796.900 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 29594.511 ops/s
[info]                  ·gc.alloc.rate:            1474.366 MB/sec
[info]                  ·gc.alloc.rate.norm:       78416.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.751 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 72054.175 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 29657.968 ops/s
[info]                  ·gc.alloc.rate:                   1477.739 MB/sec
[info]                  ·gc.alloc.rate.norm:              78416.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.967 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        71901.142 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 212.098 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 29809.907 ops/s
[info]                  ·gc.alloc.rate:                                  1485.459 MB/sec
[info]                  ·gc.alloc.rate.norm:                             78416.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.163 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 8.601 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1363.005 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       71951.789 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 29830.551 ops/s
[info]                  ·gc.alloc.rate:                                  1486.175 MB/sec
[info]                  ·gc.alloc.rate.norm:                             78416.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.428 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.794 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       71905.969 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson":
[info]   29637.062 ±(99.9%) 835.629 ops/s [Average]
[info]   (min, avg, max) = (29292.370, 29637.062, 29830.551), stdev = 217.010
[info]   CI (99.9%): [28801.433, 30472.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1476.594 ±(99.9%) 42.095 MB/sec [Average]
[info]   (min, avg, max) = (1459.234, 1476.594, 1486.175), stdev = 10.932
[info]   CI (99.9%): [1434.499, 1518.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   78416.014 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (78416.014, 78416.014, 78416.015), stdev = 0.001
[info]   CI (99.9%): [78416.012, 78416.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.034 ±(99.9%) 0.277 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.034, 0.163), stdev = 0.072
[info]   CI (99.9%): [≈ 0, 0.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.806 ±(99.9%) 14.644 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.806, 8.601), stdev = 3.803
[info]   CI (99.9%): [≈ 0, 16.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1358.037 ±(99.9%) 17.099 MB/sec [Average]
[info]   (min, avg, max) = (1354.668, 1358.037, 1363.005), stdev = 4.441
[info]   CI (99.9%): [1340.938, 1375.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   72121.995 ±(99.9%) 1471.971 B/op [Average]
[info]   (min, avg, max) = (71901.142, 72121.995, 72796.900), stdev = 382.266
[info]   CI (99.9%): [70650.024, 73593.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   42.420 ±(99.9%) 365.245 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 42.420, 212.098), stdev = 94.853
[info]   CI (99.9%): [≈ 0, 407.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 8.000), stdev = 2.739
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce
[info] # Run progress: 86.82% complete, ETA 00:14:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 263371.850 ops/s
[info] # Warmup Iteration   2: 615860.377 ops/s
[info] # Warmup Iteration   3: 618000.942 ops/s
[info] # Warmup Iteration   4: 626362.003 ops/s
[info] # Warmup Iteration   5: 627534.071 ops/s
[info] Iteration   1: 626255.500 ops/s
[info]                  ·gc.alloc.rate:            1909.590 MB/sec
[info]                  ·gc.alloc.rate.norm:       4800.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2034.025 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5112.784 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 627338.229 ops/s
[info]                  ·gc.alloc.rate:                                  1913.251 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4800.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.149 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.374 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.026 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5120.565 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                8.356 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 629980.007 ops/s
[info]                  ·gc.alloc.rate:                                  1921.015 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4800.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.011 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.029 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.718 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3404.997 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   4: 624513.712 ops/s
[info]                  ·gc.alloc.rate:            1904.456 MB/sec
[info]                  ·gc.alloc.rate.norm:       4800.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.196 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5152.200 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 629237.359 ops/s
[info]                  ·gc.alloc.rate:            1918.832 MB/sec
[info]                  ·gc.alloc.rate.norm:       4800.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.022 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5113.168 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce":
[info]   627464.961 ±(99.9%) 8535.840 ops/s [Average]
[info]   (min, avg, max) = (624513.712, 627464.961, 629980.007), stdev = 2216.731
[info]   CI (99.9%): [618929.121, 636000.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate":
[info]   1913.429 ±(99.9%) 25.975 MB/sec [Average]
[info]   (min, avg, max) = (1904.456, 1913.429, 1921.015), stdev = 6.746
[info]   CI (99.9%): [1887.453, 1939.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4800.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4800.001, 4800.001, 4800.001), stdev = 0.001
[info]   CI (99.9%): [4800.001, 4800.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.032 ±(99.9%) 0.253 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.032, 0.149), stdev = 0.066
[info]   CI (99.9%): [≈ 0, 0.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.081 ±(99.9%) 0.634 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.081, 0.374), stdev = 0.165
[info]   CI (99.9%): [≈ 0, 0.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1905.197 ±(99.9%) 1167.834 MB/sec [Average]
[info]   (min, avg, max) = (1362.718, 1905.197, 2044.196), stdev = 303.283
[info]   CI (99.9%): [737.363, 3073.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   4780.743 ±(99.9%) 2962.052 B/op [Average]
[info]   (min, avg, max) = (3404.997, 4780.743, 5152.200), stdev = 769.236
[info]   CI (99.9%): [1818.690, 7742.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   1.671 ±(99.9%) 14.390 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.671, 8.356), stdev = 3.737
[info]   CI (99.9%): [≈ 0, 16.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.200, 10.000), stdev = 3.194
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala
[info] # Run progress: 87.06% complete, ETA 00:14:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 352094.033 ops/s
[info] # Warmup Iteration   2: 1295055.073 ops/s
[info] # Warmup Iteration   3: 1325509.617 ops/s
[info] # Warmup Iteration   4: 1335512.688 ops/s
[info] # Warmup Iteration   5: 1333526.538 ops/s
[info] Iteration   1: 1351972.508 ops/s
[info]                  ·gc.alloc.rate:            1024.301 MB/sec
[info]                  ·gc.alloc.rate.norm:       1192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.706 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 788.660 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 1300095.699 ops/s
[info]                  ·gc.alloc.rate:            984.582 MB/sec
[info]                  ·gc.alloc.rate.norm:       1192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.819 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1640.233 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 1355027.313 ops/s
[info]                  ·gc.alloc.rate:            1026.169 MB/sec
[info]                  ·gc.alloc.rate.norm:       1192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.397 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 786.866 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 1327393.594 ops/s
[info]                  ·gc.alloc.rate:            1005.218 MB/sec
[info]                  ·gc.alloc.rate.norm:       1192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.753 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1606.484 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 1336453.286 ops/s
[info]                  ·gc.alloc.rate:                   1012.048 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.669 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        796.988 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.784 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala":
[info]   1334188.480 ±(99.9%) 85327.745 ops/s [Average]
[info]   (min, avg, max) = (1300095.699, 1334188.480, 1355027.313), stdev = 22159.344
[info]   CI (99.9%): [1248860.735, 1419516.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1010.464 ±(99.9%) 64.949 MB/sec [Average]
[info]   (min, avg, max) = (984.582, 1010.464, 1026.169), stdev = 16.867
[info]   CI (99.9%): [945.514, 1075.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1192.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1192.000, 1192.000, 1192.000), stdev = 0.001
[info]   CI (99.9%): [1192.000, 1192.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   948.269 ±(99.9%) 1428.966 MB/sec [Average]
[info]   (min, avg, max) = (676.669, 948.269, 1354.819), stdev = 371.098
[info]   CI (99.9%): [≈ 0, 2377.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1123.846 ±(99.9%) 1756.519 B/op [Average]
[info]   (min, avg, max) = (786.866, 1123.846, 1640.233), stdev = 456.162
[info]   CI (99.9%): [≈ 0, 2880.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.157 ±(99.9%) 1.351 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.157, 0.784), stdev = 0.351
[info]   CI (99.9%): [≈ 0, 1.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.600, 10.000), stdev = 2.702
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala
[info] # Run progress: 87.29% complete, ETA 00:14:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6438159.595 ops/s
[info] # Warmup Iteration   2: 6932715.349 ops/s
[info] # Warmup Iteration   3: 6670648.212 ops/s
[info] # Warmup Iteration   4: 6903184.006 ops/s
[info] # Warmup Iteration   5: 7130302.313 ops/s
[info] Iteration   1: 7135604.045 ops/s
[info]                  ·gc.alloc.rate:      217.594 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 7103794.073 ops/s
[info]                  ·gc.alloc.rate:            216.633 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.727 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 150.388 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 7128537.658 ops/s
[info]                  ·gc.alloc.rate:      217.372 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 7126866.583 ops/s
[info]                  ·gc.alloc.rate:      217.335 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 6921948.780 ops/s
[info]                  ·gc.alloc.rate:            211.089 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.036 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 154.180 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala":
[info]   7083350.228 ±(99.9%) 350463.690 ops/s [Average]
[info]   (min, avg, max) = (6921948.780, 7083350.228, 7135604.045), stdev = 91014.307
[info]   CI (99.9%): [6732886.538, 7433813.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   216.005 ±(99.9%) 10.672 MB/sec [Average]
[info]   (min, avg, max) = (211.089, 216.005, 217.594), stdev = 2.771
[info]   CI (99.9%): [205.333, 226.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   271.353 ±(99.9%) 1430.764 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 271.353, 678.727), stdev = 371.565
[info]   CI (99.9%): [≈ 0, 1702.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   60.914 ±(99.9%) 321.221 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 60.914, 154.180), stdev = 83.420
[info]   CI (99.9%): [≈ 0, 382.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.643
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson
[info] # Run progress: 87.53% complete, ETA 00:14:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27848.790 ops/s
[info] # Warmup Iteration   2: 196217.088 ops/s
[info] # Warmup Iteration   3: 198523.262 ops/s
[info] # Warmup Iteration   4: 200850.161 ops/s
[info] # Warmup Iteration   5: 198977.693 ops/s
[info] Iteration   1: 201335.997 ops/s
[info]                  ·gc.alloc.rate:            1410.250 MB/sec
[info]                  ·gc.alloc.rate.norm:       11024.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.626 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10581.367 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 200501.659 ops/s
[info]                  ·gc.alloc.rate:            1404.786 MB/sec
[info]                  ·gc.alloc.rate.norm:       11024.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.016 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10625.587 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 200765.855 ops/s
[info]                  ·gc.alloc.rate:            1406.358 MB/sec
[info]                  ·gc.alloc.rate.norm:       11024.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.688 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10611.141 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 199144.323 ops/s
[info]                  ·gc.alloc.rate:                   1394.835 MB/sec
[info]                  ·gc.alloc.rate.norm:              11024.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1358.241 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        10734.782 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 36.853 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 200345.685 ops/s
[info]                  ·gc.alloc.rate:                                  1403.705 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11024.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.140 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.097 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1363.329 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10706.911 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson":
[info]   200418.704 ±(99.9%) 3103.413 ops/s [Average]
[info]   (min, avg, max) = (199144.323, 200418.704, 201335.997), stdev = 805.947
[info]   CI (99.9%): [197315.291, 203522.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1403.987 ±(99.9%) 21.895 MB/sec [Average]
[info]   (min, avg, max) = (1394.835, 1403.987, 1410.250), stdev = 5.686
[info]   CI (99.9%): [1382.091, 1425.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   11024.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11024.002, 11024.002, 11024.002), stdev = 0.001
[info]   CI (99.9%): [11024.002, 11024.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.028 ±(99.9%) 0.241 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.140), stdev = 0.062
[info]   CI (99.9%): [≈ 0, 0.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.219 ±(99.9%) 1.889 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.219, 1.097), stdev = 0.491
[info]   CI (99.9%): [≈ 0, 2.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1356.580 ±(99.9%) 16.334 MB/sec [Average]
[info]   (min, avg, max) = (1353.626, 1356.580, 1363.329), stdev = 4.242
[info]   CI (99.9%): [1340.246, 1372.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   10651.957 ±(99.9%) 252.680 B/op [Average]
[info]   (min, avg, max) = (10581.367, 10651.957, 10734.782), stdev = 65.620
[info]   CI (99.9%): [10399.277, 10904.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.030 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.663), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   7.371 ±(99.9%) 63.463 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.371, 36.853), stdev = 16.481
[info]   CI (99.9%): [≈ 0, 70.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.000, 10.000), stdev = 3.082
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce
[info] # Run progress: 87.76% complete, ETA 00:13:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 329536.340 ops/s
[info] # Warmup Iteration   2: 831387.383 ops/s
[info] # Warmup Iteration   3: 831857.655 ops/s
[info] # Warmup Iteration   4: 841516.510 ops/s
[info] # Warmup Iteration   5: 830368.062 ops/s
[info] Iteration   1: 840940.734 ops/s
[info]                  ·gc.alloc.rate:            1290.754 MB/sec
[info]                  ·gc.alloc.rate.norm:       2416.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.094 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2538.303 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 841033.895 ops/s
[info]                  ·gc.alloc.rate:            1290.956 MB/sec
[info]                  ·gc.alloc.rate.norm:       2416.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.144 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2537.998 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 839430.669 ops/s
[info]                  ·gc.alloc.rate:            1288.489 MB/sec
[info]                  ·gc.alloc.rate.norm:       2416.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.069 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2542.717 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 845501.528 ops/s
[info]                  ·gc.alloc.rate:            1298.078 MB/sec
[info]                  ·gc.alloc.rate.norm:       2416.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.173 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1262.224 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 836160.466 ops/s
[info]                  ·gc.alloc.rate:                                  1283.450 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2416.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.015 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.028 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1358.732 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2557.713 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                7.523 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce":
[info]   840613.458 ±(99.9%) 12973.474 ops/s [Average]
[info]   (min, avg, max) = (836160.466, 840613.458, 845501.528), stdev = 3369.170
[info]   CI (99.9%): [827639.984, 853586.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1290.345 ±(99.9%) 20.314 MB/sec [Average]
[info]   (min, avg, max) = (1283.450, 1290.345, 1298.078), stdev = 5.276
[info]   CI (99.9%): [1270.031, 1310.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2416.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2416.000, 2416.000, 2416.001), stdev = 0.001
[info]   CI (99.9%): [2416.000, 2416.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.003 ±(99.9%) 0.026 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.015), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.006 ±(99.9%) 0.049 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.028), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1221.042 ±(99.9%) 1168.576 MB/sec [Average]
[info]   (min, avg, max) = (678.173, 1221.042, 1358.732), stdev = 303.476
[info]   CI (99.9%): [52.466, 2389.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2287.791 ±(99.9%) 2207.827 B/op [Average]
[info]   (min, avg, max) = (1262.224, 2287.791, 2557.713), stdev = 573.366
[info]   CI (99.9%): [79.964, 4495.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   1.505 ±(99.9%) 12.955 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.505, 7.523), stdev = 3.364
[info]   CI (99.9%): [≈ 0, 14.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.800, 9.000), stdev = 2.280
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala
[info] # Run progress: 88.00% complete, ETA 00:13:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_456a8d2b/target/1bdf7fe1/jackson-module-afterburner-2.9.5.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 671187.789 ops/s
[info] # Warmup Iteration   2: 1965821.329 ops/s
[info] # Warmup Iteration   3: 2101007.856 ops/s
[info] # Warmup Iteration   4: 2106034.058 ops/s
[info] # Warmup Iteration   5: 2140100.300 ops/s
[info] Iteration   1: 2134630.867 ops/s
[info]                  ·gc.alloc.rate:            878.834 MB/sec
[info]                  ·gc.alloc.rate.norm:       648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.746 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 498.993 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 2129481.577 ops/s
[info]                  ·gc.alloc.rate:            877.019 MB/sec
[info]                  ·gc.alloc.rate.norm:       648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.995 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1000.422 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 2068759.186 ops/s
[info]                  ·gc.alloc.rate:            851.674 MB/sec
[info]                  ·gc.alloc.rate.norm:       648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.690 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 514.863 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 2124983.084 ops/s
[info]                  ·gc.alloc.rate:            874.957 MB/sec
[info]                  ·gc.alloc.rate.norm:       648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.835 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 501.270 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 2109031.630 ops/s
[info]                  ·gc.alloc.rate:            868.291 MB/sec
[info]                  ·gc.alloc.rate.norm:       648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.773 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 505.071 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala":
[info]   2113377.269 ±(99.9%) 102881.702 ops/s [Average]
[info]   (min, avg, max) = (2068759.186, 2113377.269, 2134630.867), stdev = 26718.051
[info]   CI (99.9%): [2010495.567, 2216258.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   870.155 ±(99.9%) 42.642 MB/sec [Average]
[info]   (min, avg, max) = (851.674, 870.155, 878.834), stdev = 11.074
[info]   CI (99.9%): [827.513, 912.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   648.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (648.000, 648.000, 648.000), stdev = 0.001
[info]   CI (99.9%): [648.000, 648.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   812.208 ±(99.9%) 1166.238 MB/sec [Average]
[info]   (min, avg, max) = (676.690, 812.208, 1353.995), stdev = 302.868
[info]   CI (99.9%): [≈ 0, 1978.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   604.124 ±(99.9%) 853.382 B/op [Average]
[info]   (min, avg, max) = (498.993, 604.124, 1000.422), stdev = 221.621
[info]   CI (99.9%): [≈ 0, 1457.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 9.000), stdev = 1.949
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala
[info] # Run progress: 88.24% complete, ETA 00:13:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3781958.583 ops/s
[info] # Warmup Iteration   2: 5488181.985 ops/s
[info] # Warmup Iteration   3: 5666710.828 ops/s
[info] # Warmup Iteration   4: 5677478.276 ops/s
[info] # Warmup Iteration   5: 5701995.562 ops/s
[info] Iteration   1: 5692805.735 ops/s
[info]                  ·gc.alloc.rate:                   636.562 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             677.411 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        187.294 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.184 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 5666456.180 ops/s
[info]                  ·gc.alloc.rate:            633.627 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.090 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 188.350 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 5688454.443 ops/s
[info]                  ·gc.alloc.rate:            636.214 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.220 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 187.620 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 5651479.448 ops/s
[info]                  ·gc.alloc.rate:            632.214 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.682 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 188.658 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 5660000.869 ops/s
[info]                  ·gc.alloc.rate:            633.170 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.706 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 188.380 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala":
[info]   5671839.335 ±(99.9%) 69399.895 ops/s [Average]
[info]   (min, avg, max) = (5651479.448, 5671839.335, 5692805.735), stdev = 18022.932
[info]   CI (99.9%): [5602439.440, 5741239.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   634.358 ±(99.9%) 7.418 MB/sec [Average]
[info]   (min, avg, max) = (632.214, 634.358, 636.562), stdev = 1.926
[info]   CI (99.9%): [626.939, 641.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   176.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (176.000, 176.000, 176.000), stdev = 0.001
[info]   CI (99.9%): [176.000, 176.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   677.822 ±(99.9%) 1.267 MB/sec [Average]
[info]   (min, avg, max) = (677.411, 677.822, 678.220), stdev = 0.329
[info]   CI (99.9%): [676.555, 679.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   188.060 ±(99.9%) 2.215 B/op [Average]
[info]   (min, avg, max) = (187.294, 188.060, 188.658), stdev = 0.575
[info]   CI (99.9%): [185.846, 190.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.037 ±(99.9%) 0.317 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.184), stdev = 0.082
[info]   CI (99.9%): [≈ 0, 0.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 88.47% complete, ETA 00:13:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3621593.286 ops/s
[info] # Warmup Iteration   2: 5278454.699 ops/s
[info] # Warmup Iteration   3: 5168827.892 ops/s
[info] # Warmup Iteration   4: 5389579.869 ops/s
[info] # Warmup Iteration   5: 5348375.432 ops/s
[info] Iteration   1: 5363937.094 ops/s
[info]                  ·gc.alloc.rate:      327.109 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 5303653.163 ops/s
[info]                  ·gc.alloc.rate:            323.481 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.393 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 201.031 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 5368419.511 ops/s
[info]                  ·gc.alloc.rate:      327.454 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 5216123.707 ops/s
[info]                  ·gc.alloc.rate:            318.230 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.569 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 204.402 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 5362674.177 ops/s
[info]                  ·gc.alloc.rate:      327.124 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc":
[info]   5322961.530 ±(99.9%) 251839.567 ops/s [Average]
[info]   (min, avg, max) = (5216123.707, 5322961.530, 5368419.511), stdev = 65401.936
[info]   CI (99.9%): [5071121.964, 5574801.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   324.680 ±(99.9%) 15.235 MB/sec [Average]
[info]   (min, avg, max) = (318.230, 324.680, 327.454), stdev = 3.956
[info]   CI (99.9%): [309.445, 339.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   96.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (96.000, 96.000, 96.000), stdev = 0.001
[info]   CI (99.9%): [96.000, 96.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   270.992 ±(99.9%) 1428.865 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 270.992, 677.569), stdev = 371.072
[info]   CI (99.9%): [≈ 0, 1699.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   81.087 ±(99.9%) 427.571 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 81.087, 204.402), stdev = 111.039
[info]   CI (99.9%): [≈ 0, 508.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 4.000), stdev = 1.949
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson
[info] # Run progress: 88.71% complete, ETA 00:12:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42051.495 ops/s
[info] # Warmup Iteration   2: 305062.284 ops/s
[info] # Warmup Iteration   3: 308503.703 ops/s
[info] # Warmup Iteration   4: 308508.403 ops/s
[info] # Warmup Iteration   5: 307934.705 ops/s
[info] Iteration   1: 306105.505 ops/s
[info]                  ·gc.alloc.rate:            1559.490 MB/sec
[info]                  ·gc.alloc.rate.norm:       8016.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.323 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6966.554 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 308404.846 ops/s
[info]                  ·gc.alloc.rate:            1570.492 MB/sec
[info]                  ·gc.alloc.rate.norm:       8016.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2032.015 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10371.675 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   3: 313136.618 ops/s
[info]                  ·gc.alloc.rate:                                  1594.671 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8016.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.033 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.168 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1358.002 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6826.327 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                23.435 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 315811.727 ops/s
[info]                  ·gc.alloc.rate:                                  1608.316 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8016.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.161 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.800 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.759 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6792.121 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 314832.194 ops/s
[info]                  ·gc.alloc.rate:                                  1603.325 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8016.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.124 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10219.825 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson":
[info]   311658.178 ±(99.9%) 16214.878 ops/s [Average]
[info]   (min, avg, max) = (306105.505, 311658.178, 315811.727), stdev = 4210.952
[info]   CI (99.9%): [295443.300, 327873.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1587.259 ±(99.9%) 81.881 MB/sec [Average]
[info]   (min, avg, max) = (1559.490, 1587.259, 1608.316), stdev = 21.264
[info]   CI (99.9%): [1505.378, 1669.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   8016.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8016.001, 8016.001, 8016.001), stdev = 0.001
[info]   CI (99.9%): [8016.001, 8016.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.039 ±(99.9%) 0.268 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.039, 0.161), stdev = 0.070
[info]   CI (99.9%): [≈ 0, 0.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.194 ±(99.9%) 1.335 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.194, 0.800), stdev = 0.347
[info]   CI (99.9%): [≈ 0, 1.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1630.445 ±(99.9%) 1432.991 MB/sec [Average]
[info]   (min, avg, max) = (1355.323, 1630.445, 2044.124), stdev = 372.143
[info]   CI (99.9%): [197.454, 3063.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   8235.300 ±(99.9%) 7250.090 B/op [Average]
[info]   (min, avg, max) = (6792.121, 8235.300, 10371.675), stdev = 1882.825
[info]   CI (99.9%): [985.211, 15485.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   4.687 ±(99.9%) 40.357 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.687, 23.435), stdev = 10.481
[info]   CI (99.9%): [≈ 0, 45.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.600, 15.000), stdev = 5.079
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 88.94% complete, ETA 00:12:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 44504.883 ops/s
[info] # Warmup Iteration   2: 54610.750 ops/s
[info] # Warmup Iteration   3: 55156.705 ops/s
[info] # Warmup Iteration   4: 55790.483 ops/s
[info] # Warmup Iteration   5: 55353.339 ops/s
[info] Iteration   1: 55667.190 ops/s
[info]                  ·gc.alloc.rate:            1591.494 MB/sec
[info]                  ·gc.alloc.rate.norm:       44992.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.349 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 38344.392 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 55604.061 ops/s
[info]                  ·gc.alloc.rate:            1589.682 MB/sec
[info]                  ·gc.alloc.rate.norm:       44992.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.340 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 38387.829 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 55189.517 ops/s
[info]                  ·gc.alloc.rate:                                  1577.501 MB/sec
[info]                  ·gc.alloc.rate.norm:                             44992.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.147 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.191 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2040.760 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       58204.621 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                94.981 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   4: 55956.925 ops/s
[info]                  ·gc.alloc.rate:                                  1599.843 MB/sec
[info]                  ·gc.alloc.rate.norm:                             44992.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.193 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1363.037 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       38332.377 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 55915.554 ops/s
[info]                  ·gc.alloc.rate:            1598.737 MB/sec
[info]                  ·gc.alloc.rate.norm:       44992.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1363.094 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 38360.479 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce":
[info]   55666.650 ±(99.9%) 1183.386 ops/s [Average]
[info]   (min, avg, max) = (55189.517, 55666.650, 55956.925), stdev = 307.322
[info]   CI (99.9%): [54483.263, 56850.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1591.452 ±(99.9%) 34.508 MB/sec [Average]
[info]   (min, avg, max) = (1577.501, 1591.452, 1599.843), stdev = 8.962
[info]   CI (99.9%): [1556.944, 1625.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   44992.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (44992.007, 44992.007, 44992.008), stdev = 0.001
[info]   CI (99.9%): [44992.006, 44992.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.031 ±(99.9%) 0.250 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.031, 0.147), stdev = 0.065
[info]   CI (99.9%): [≈ 0, 0.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.877 ±(99.9%) 7.141 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.877, 4.191), stdev = 1.854
[info]   CI (99.9%): [≈ 0, 8.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1495.916 ±(99.9%) 1172.889 MB/sec [Average]
[info]   (min, avg, max) = (1356.340, 1495.916, 2040.760), stdev = 304.595
[info]   CI (99.9%): [323.027, 2668.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   42325.940 ±(99.9%) 34180.152 B/op [Average]
[info]   (min, avg, max) = (38332.377, 42325.940, 58204.621), stdev = 8876.477
[info]   CI (99.9%): [8145.788, 76506.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   18.996 ±(99.9%) 163.564 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18.996, 94.981), stdev = 42.477
[info]   CI (99.9%): [≈ 0, 182.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.200, 8.000), stdev = 2.950
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 89.18% complete, ETA 00:12:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 44524.563 ops/s
[info] # Warmup Iteration   2: 80112.596 ops/s
[info] # Warmup Iteration   3: 79600.227 ops/s
[info] # Warmup Iteration   4: 80950.081 ops/s
[info] # Warmup Iteration   5: 81426.819 ops/s
[info] Iteration   1: 80752.689 ops/s
[info]                  ·gc.alloc.rate:            1243.596 MB/sec
[info]                  ·gc.alloc.rate.norm:       24240.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.148 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26394.867 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 81619.846 ops/s
[info]                  ·gc.alloc.rate:                   1257.070 MB/sec
[info]                  ·gc.alloc.rate.norm:              24240.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.516 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        26099.764 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 12.844 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 81967.247 ops/s
[info]                  ·gc.alloc.rate:            1262.433 MB/sec
[info]                  ·gc.alloc.rate.norm:       24240.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.426 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13007.279 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 79496.697 ops/s
[info]                  ·gc.alloc.rate:                   1224.654 MB/sec
[info]                  ·gc.alloc.rate.norm:              24240.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.836 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        26796.957 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 92.312 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 81964.269 ops/s
[info]                  ·gc.alloc.rate:                                  1262.342 MB/sec
[info]                  ·gc.alloc.rate.norm:                             24240.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.015 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.282 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.865 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       26170.271 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala":
[info]   81160.150 ±(99.9%) 4058.017 ops/s [Average]
[info]   (min, avg, max) = (79496.697, 81160.150, 81967.247), stdev = 1053.854
[info]   CI (99.9%): [77102.133, 85218.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1250.019 ±(99.9%) 62.099 MB/sec [Average]
[info]   (min, avg, max) = (1224.654, 1250.019, 1262.433), stdev = 16.127
[info]   CI (99.9%): [1187.919, 1312.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   24240.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (24240.005, 24240.005, 24240.006), stdev = 0.001
[info]   CI (99.9%): [24240.004, 24240.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.003 ±(99.9%) 0.025 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.015), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.056 ±(99.9%) 0.485 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.056, 0.282), stdev = 0.126
[info]   CI (99.9%): [≈ 0, 0.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1220.358 ±(99.9%) 1168.799 MB/sec [Average]
[info]   (min, avg, max) = (677.426, 1220.358, 1362.865), stdev = 303.533
[info]   CI (99.9%): [51.559, 2389.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   23693.828 ±(99.9%) 23027.417 B/op [Average]
[info]   (min, avg, max) = (13007.279, 23693.828, 26796.957), stdev = 5980.147
[info]   CI (99.9%): [666.410, 46721.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.824 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.664), stdev = 2.032
[info]   CI (99.9%): [≈ 0, 8.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   21.031 ±(99.9%) 154.925 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21.031, 92.312), stdev = 40.234
[info]   CI (99.9%): [≈ 0, 175.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.400, 10.000), stdev = 2.702
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 89.41% complete, ETA 00:11:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 78588.256 ops/s
[info] # Warmup Iteration   2: 87723.432 ops/s
[info] # Warmup Iteration   3: 88088.631 ops/s
[info] # Warmup Iteration   4: 88204.107 ops/s
[info] # Warmup Iteration   5: 88535.589 ops/s
[info] Iteration   1: 88238.896 ops/s
[info]                  ·gc.alloc.rate:            1297.011 MB/sec
[info]                  ·gc.alloc.rate.norm:       23136.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.137 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 24190.687 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 88197.119 ops/s
[info]                  ·gc.alloc.rate:            1296.372 MB/sec
[info]                  ·gc.alloc.rate.norm:       23136.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.068 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 24201.382 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 87890.972 ops/s
[info]                  ·gc.alloc.rate:            1292.248 MB/sec
[info]                  ·gc.alloc.rate.norm:       23136.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.506 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 24286.454 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 88185.382 ops/s
[info]                  ·gc.alloc.rate:                                  1296.247 MB/sec
[info]                  ·gc.alloc.rate.norm:                             23136.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.027 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.476 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1359.452 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       24264.117 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                59.442 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 88696.292 ops/s
[info]                  ·gc.alloc.rate:                                  1303.953 MB/sec
[info]                  ·gc.alloc.rate.norm:                             23136.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.079 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.394 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            681.463 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12091.180 B/op
[info]                  ·gc.count:                                       1.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala":
[info]   88241.732 ±(99.9%) 1114.080 ops/s [Average]
[info]   (min, avg, max) = (87890.972, 88241.732, 88696.292), stdev = 289.323
[info]   CI (99.9%): [87127.653, 89355.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1297.166 ±(99.9%) 16.309 MB/sec [Average]
[info]   (min, avg, max) = (1292.248, 1297.166, 1303.953), stdev = 4.235
[info]   CI (99.9%): [1280.857, 1313.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   23136.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (23136.005, 23136.005, 23136.005), stdev = 0.001
[info]   CI (99.9%): [23136.004, 23136.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.021 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.079), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.374 ±(99.9%) 2.334 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.374, 1.394), stdev = 0.606
[info]   CI (99.9%): [≈ 0, 2.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1221.925 ±(99.9%) 1163.398 MB/sec [Average]
[info]   (min, avg, max) = (681.463, 1221.925, 1359.452), stdev = 302.131
[info]   CI (99.9%): [58.527, 2385.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   21806.764 ±(99.9%) 20914.110 B/op [Average]
[info]   (min, avg, max) = (12091.180, 21806.764, 24286.454), stdev = 5431.328
[info]   CI (99.9%): [892.654, 42720.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   11.888 ±(99.9%) 102.362 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.888, 59.442), stdev = 26.583
[info]   CI (99.9%): [≈ 0, 114.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.600, 7.000), stdev = 2.191
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 89.65% complete, ETA 00:11:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23028.998 ops/s
[info] # Warmup Iteration   2: 40809.425 ops/s
[info] # Warmup Iteration   3: 41528.359 ops/s
[info] # Warmup Iteration   4: 42054.351 ops/s
[info] # Warmup Iteration   5: 41994.465 ops/s
[info] Iteration   1: 42725.745 ops/s
[info]                  ·gc.alloc.rate:                                  2194.248 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80840.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.107 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.951 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2040.107 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       75161.197 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                147.231 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   2: 42880.243 ops/s
[info]                  ·gc.alloc.rate:                                  2202.150 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80840.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.029 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.054 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.003 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       75034.503 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 42881.532 ops/s
[info]                  ·gc.alloc.rate:            2202.081 MB/sec
[info]                  ·gc.alloc.rate.norm:       80840.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2725.188 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 100043.671 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 42967.783 ops/s
[info]                  ·gc.alloc.rate:                                  2206.931 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80840.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.085 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.294 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       74882.600 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 42833.015 ops/s
[info]                  ·gc.alloc.rate:            2200.305 MB/sec
[info]                  ·gc.alloc.rate.norm:       80840.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.436 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 75113.315 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson":
[info]   42857.664 ±(99.9%) 340.166 ops/s [Average]
[info]   (min, avg, max) = (42725.745, 42857.664, 42967.783), stdev = 88.340
[info]   CI (99.9%): [42517.498, 43197.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2201.143 ±(99.9%) 17.608 MB/sec [Average]
[info]   (min, avg, max) = (2194.248, 2201.143, 2206.931), stdev = 4.573
[info]   CI (99.9%): [2183.535, 2218.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   80840.010 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (80840.009, 80840.010, 80840.010), stdev = 0.001
[info]   CI (99.9%): [80840.008, 80840.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.028 ±(99.9%) 0.178 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.107), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.018 ±(99.9%) 6.542 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.018, 3.951), stdev = 1.699
[info]   CI (99.9%): [≈ 0, 7.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2179.606 ±(99.9%) 1174.428 MB/sec [Average]
[info]   (min, avg, max) = (2040.107, 2179.606, 2725.188), stdev = 304.995
[info]   CI (99.9%): [1005.178, 3354.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   80047.057 ±(99.9%) 43046.140 B/op [Average]
[info]   (min, avg, max) = (74882.600, 80047.057, 100043.671), stdev = 11178.946
[info]   CI (99.9%): [37000.918, 123093.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   29.446 ±(99.9%) 253.540 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 29.446, 147.231), stdev = 65.844
[info]   CI (99.9%): [≈ 0, 282.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 8.000), stdev = 1.732
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 89.88% complete, ETA 00:11:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 157289.999 ops/s
[info] # Warmup Iteration   2: 200997.023 ops/s
[info] # Warmup Iteration   3: 204720.227 ops/s
[info] # Warmup Iteration   4: 203525.983 ops/s
[info] # Warmup Iteration   5: 204481.692 ops/s
[info] Iteration   1: 203608.780 ops/s
[info]                  ·gc.alloc.rate:            968.601 MB/sec
[info]                  ·gc.alloc.rate.norm:       7488.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.026 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10483.083 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 204691.036 ops/s
[info]                  ·gc.alloc.rate:            974.137 MB/sec
[info]                  ·gc.alloc.rate.norm:       7488.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.294 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5213.917 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 201836.640 ops/s
[info]                  ·gc.alloc.rate:            960.324 MB/sec
[info]                  ·gc.alloc.rate.norm:       7488.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.246 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10575.150 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 204917.443 ops/s
[info]                  ·gc.alloc.rate:            975.029 MB/sec
[info]                  ·gc.alloc.rate.norm:       7488.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.187 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5208.320 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 203778.673 ops/s
[info]                  ·gc.alloc.rate:            969.454 MB/sec
[info]                  ·gc.alloc.rate.norm:       7488.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.154 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10474.853 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce":
[info]   203766.514 ±(99.9%) 4687.999 ops/s [Average]
[info]   (min, avg, max) = (201836.640, 203766.514, 204917.443), stdev = 1217.458
[info]   CI (99.9%): [199078.515, 208454.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   969.509 ±(99.9%) 22.542 MB/sec [Average]
[info]   (min, avg, max) = (960.324, 969.509, 975.029), stdev = 5.854
[info]   CI (99.9%): [946.967, 992.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   7488.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7488.002, 7488.002, 7488.002), stdev = 0.001
[info]   CI (99.9%): [7488.002, 7488.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1084.982 ±(99.9%) 1429.752 MB/sec [Average]
[info]   (min, avg, max) = (678.187, 1084.982, 1356.246), stdev = 371.302
[info]   CI (99.9%): [≈ 0, 2514.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   8391.064 ±(99.9%) 11178.990 B/op [Average]
[info]   (min, avg, max) = (5208.320, 8391.064, 10575.150), stdev = 2903.148
[info]   CI (99.9%): [≈ 0, 19570.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 8.000), stdev = 2.191
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 90.12% complete, ETA 00:11:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 249824.398 ops/s
[info] # Warmup Iteration   2: 457910.623 ops/s
[info] # Warmup Iteration   3: 456071.501 ops/s
[info] # Warmup Iteration   4: 450780.187 ops/s
[info] # Warmup Iteration   5: 455084.019 ops/s
[info] Iteration   1: 454711.518 ops/s
[info]                  ·gc.alloc.rate:                   399.802 MB/sec
[info]                  ·gc.alloc.rate.norm:              1384.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.701 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2342.548 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.306 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 454445.236 ops/s
[info]                  ·gc.alloc.rate:      399.561 MB/sec
[info]                  ·gc.alloc.rate.norm: 1384.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 456250.834 ops/s
[info]                  ·gc.alloc.rate:            401.184 MB/sec
[info]                  ·gc.alloc.rate.norm:       1384.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.384 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2336.832 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 456506.981 ops/s
[info]                  ·gc.alloc.rate:            401.547 MB/sec
[info]                  ·gc.alloc.rate.norm:       1384.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.975 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2333.308 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 459636.790 ops/s
[info]                  ·gc.alloc.rate:      404.140 MB/sec
[info]                  ·gc.alloc.rate.norm: 1384.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala":
[info]   456310.272 ±(99.9%) 7971.467 ops/s [Average]
[info]   (min, avg, max) = (454445.236, 456310.272, 459636.790), stdev = 2070.165
[info]   CI (99.9%): [448338.805, 464281.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   401.247 ±(99.9%) 7.046 MB/sec [Average]
[info]   (min, avg, max) = (399.561, 401.247, 404.140), stdev = 1.830
[info]   CI (99.9%): [394.200, 408.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1384.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1384.001, 1384.001, 1384.001), stdev = 0.001
[info]   CI (99.9%): [1384.001, 1384.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   406.212 ±(99.9%) 1427.892 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 406.212, 677.384), stdev = 370.819
[info]   CI (99.9%): [≈ 0, 1834.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1402.538 ±(99.9%) 4930.133 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1402.538, 2342.548), stdev = 1280.340
[info]   CI (99.9%): [≈ 0, 6332.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.461 ±(99.9%) 3.970 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.461, 2.306), stdev = 1.031
[info]   CI (99.9%): [≈ 0, 4.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 5.000), stdev = 2.739
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 90.35% complete, ETA 00:10:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 710144.997 ops/s
[info] # Warmup Iteration   2: 760481.793 ops/s
[info] # Warmup Iteration   3: 795672.757 ops/s
[info] # Warmup Iteration   4: 805813.768 ops/s
[info] # Warmup Iteration   5: 805439.013 ops/s
[info] Iteration   1: 807249.039 ops/s
[info]                  ·gc.alloc.rate:      434.892 MB/sec
[info]                  ·gc.alloc.rate.norm: 848.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 803922.529 ops/s
[info]                  ·gc.alloc.rate:            433.204 MB/sec
[info]                  ·gc.alloc.rate.norm:       848.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.534 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1326.278 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 803785.143 ops/s
[info]                  ·gc.alloc.rate:                   433.094 MB/sec
[info]                  ·gc.alloc.rate.norm:              848.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             677.468 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1326.488 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.304 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 810533.789 ops/s
[info]                  ·gc.alloc.rate:      436.746 MB/sec
[info]                  ·gc.alloc.rate.norm: 848.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 805222.690 ops/s
[info]                  ·gc.alloc.rate:            433.873 MB/sec
[info]                  ·gc.alloc.rate.norm:       848.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.161 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1325.461 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala":
[info]   806142.638 ±(99.9%) 10863.884 ops/s [Average]
[info]   (min, avg, max) = (803785.143, 806142.638, 810533.789), stdev = 2821.316
[info]   CI (99.9%): [795278.754, 817006.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   434.362 ±(99.9%) 5.825 MB/sec [Average]
[info]   (min, avg, max) = (433.094, 434.362, 436.746), stdev = 1.513
[info]   CI (99.9%): [428.537, 440.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   848.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (848.001, 848.001, 848.001), stdev = 0.001
[info]   CI (99.9%): [848.000, 848.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   406.633 ±(99.9%) 1429.372 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 406.633, 678.161), stdev = 371.203
[info]   CI (99.9%): [≈ 0, 1836.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   795.645 ±(99.9%) 2796.805 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 795.645, 1326.488), stdev = 726.321
[info]   CI (99.9%): [≈ 0, 3592.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.261 ±(99.9%) 2.246 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.261, 1.304), stdev = 0.583
[info]   CI (99.9%): [≈ 0, 2.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 90.59% complete, ETA 00:10:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 578720.329 ops/s
[info] # Warmup Iteration   2: 617959.983 ops/s
[info] # Warmup Iteration   3: 615543.859 ops/s
[info] # Warmup Iteration   4: 616878.315 ops/s
[info] # Warmup Iteration   5: 588194.332 ops/s
[info] Iteration   1: 616142.181 ops/s
[info]                  ·gc.alloc.rate:      6.263 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 616517.374 ops/s
[info]                  ·gc.alloc.rate:      6.266 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 615550.343 ops/s
[info]                  ·gc.alloc.rate:      6.257 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 615972.701 ops/s
[info]                  ·gc.alloc.rate:      6.262 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 616625.744 ops/s
[info]                  ·gc.alloc.rate:      6.268 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   616161.669 ±(99.9%) 1669.266 ops/s [Average]
[info]   (min, avg, max) = (615550.343, 616161.669, 616625.744), stdev = 433.503
[info]   CI (99.9%): [614492.403, 617830.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   6.263 ±(99.9%) 0.018 MB/sec [Average]
[info]   (min, avg, max) = (6.257, 6.263, 6.268), stdev = 0.005
[info]   CI (99.9%): [6.246, 6.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16.001, 16.001, 16.001), stdev = 0.001
[info]   CI (99.9%): [16.001, 16.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 90.82% complete, ETA 00:10:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20028.340 ops/s
[info] # Warmup Iteration   2: 29672.895 ops/s
[info] # Warmup Iteration   3: 29556.328 ops/s
[info] # Warmup Iteration   4: 30268.802 ops/s
[info] # Warmup Iteration   5: 30543.480 ops/s
[info] Iteration   1: 30477.497 ops/s
[info]                  ·gc.alloc.rate:            1524.175 MB/sec
[info]                  ·gc.alloc.rate.norm:       78704.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.975 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 69966.984 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 30357.602 ops/s
[info]                  ·gc.alloc.rate:            1518.551 MB/sec
[info]                  ·gc.alloc.rate.norm:       78704.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.310 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 70243.506 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 30444.882 ops/s
[info]                  ·gc.alloc.rate:                                  1522.340 MB/sec
[info]                  ·gc.alloc.rate.norm:                             78704.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.074 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.834 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2036.211 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       105270.832 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                206.616 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   4: 30744.600 ops/s
[info]                  ·gc.alloc.rate:                                  1537.238 MB/sec
[info]                  ·gc.alloc.rate.norm:                             78704.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.129 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 6.591 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.714 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       69768.667 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 30747.881 ops/s
[info]                  ·gc.alloc.rate:            1537.841 MB/sec
[info]                  ·gc.alloc.rate.norm:       78704.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1363.116 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 69761.861 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson":
[info]   30554.492 ±(99.9%) 694.849 ops/s [Average]
[info]   (min, avg, max) = (30357.602, 30554.492, 30747.881), stdev = 180.450
[info]   CI (99.9%): [29859.644, 31249.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1528.029 ±(99.9%) 34.341 MB/sec [Average]
[info]   (min, avg, max) = (1518.551, 1528.029, 1537.841), stdev = 8.918
[info]   CI (99.9%): [1493.688, 1562.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   78704.014 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (78704.013, 78704.014, 78704.014), stdev = 0.001
[info]   CI (99.9%): [78704.012, 78704.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.041 ±(99.9%) 0.227 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.041, 0.129), stdev = 0.059
[info]   CI (99.9%): [≈ 0, 0.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.085 ±(99.9%) 11.617 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.085, 6.591), stdev = 3.017
[info]   CI (99.9%): [≈ 0, 13.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1494.465 ±(99.9%) 1166.245 MB/sec [Average]
[info]   (min, avg, max) = (1354.975, 1494.465, 2036.211), stdev = 302.870
[info]   CI (99.9%): [328.220, 2660.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   77002.370 ±(99.9%) 60854.681 B/op [Average]
[info]   (min, avg, max) = (69761.861, 77002.370, 105270.832), stdev = 15803.768
[info]   CI (99.9%): [16147.688, 137857.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   41.323 ±(99.9%) 355.805 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 41.323, 206.616), stdev = 92.401
[info]   CI (99.9%): [≈ 0, 397.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.600, 10.000), stdev = 3.847
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 91.06% complete, ETA 00:10:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3921996.936 ops/s
[info] # Warmup Iteration   2: 4511768.703 ops/s
[info] # Warmup Iteration   3: 4534657.673 ops/s
[info] # Warmup Iteration   4: 4453287.125 ops/s
[info] # Warmup Iteration   5: 4542708.367 ops/s
[info] Iteration   1: 4530603.132 ops/s
[info]                  ·gc.alloc.rate:                                  3338.532 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1160.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3406.443 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1183.596 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 4570078.125 ops/s
[info]                  ·gc.alloc.rate:                                  3367.802 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1160.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3406.807 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1173.435 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 4591167.805 ops/s
[info]                  ·gc.alloc.rate:                                  3384.112 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1160.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3407.527 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1168.026 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 4457719.359 ops/s
[info]                  ·gc.alloc.rate:                                  3285.157 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1160.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3406.905 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1202.990 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        13.000 ms
[info] Iteration   5: 4571206.026 ops/s
[info]                  ·gc.alloc.rate:            3368.839 MB/sec
[info]                  ·gc.alloc.rate.norm:       1160.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      3406.848 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1173.088 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce":
[info]   4544154.889 ±(99.9%) 204381.278 ops/s [Average]
[info]   (min, avg, max) = (4457719.359, 4544154.889, 4591167.805), stdev = 53077.169
[info]   CI (99.9%): [4339773.611, 4748536.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   3348.888 ±(99.9%) 151.176 MB/sec [Average]
[info]   (min, avg, max) = (3285.157, 3348.888, 3384.112), stdev = 39.260
[info]   CI (99.9%): [3197.712, 3500.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   1160.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1160.000, 1160.000, 1160.000), stdev = 0.001
[info]   CI (99.9%): [1160.000, 1160.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.004 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   3406.906 ±(99.9%) 1.508 MB/sec [Average]
[info]   (min, avg, max) = (3406.443, 3406.906, 3407.527), stdev = 0.392
[info]   CI (99.9%): [3405.398, 3408.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   1180.227 ±(99.9%) 53.614 B/op [Average]
[info]   (min, avg, max) = (1168.026, 1180.227, 1202.990), stdev = 13.923
[info]   CI (99.9%): [1126.613, 1233.841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 8.200, 13.000), stdev = 2.775
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 91.29% complete, ETA 00:09:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 857046.164 ops/s
[info] # Warmup Iteration   2: 7566304.368 ops/s
[info] # Warmup Iteration   3: 7613919.200 ops/s
[info] # Warmup Iteration   4: 7835460.221 ops/s
[info] # Warmup Iteration   5: 7784943.173 ops/s
[info] Iteration   1: 7761888.202 ops/s
[info]                  ·gc.alloc.rate:            828.451 MB/sec
[info]                  ·gc.alloc.rate.norm:       168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.068 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 136.693 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 7828704.511 ops/s
[info]                  ·gc.alloc.rate:                   835.745 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.182 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        135.523 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.134 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 7838283.313 ops/s
[info]                  ·gc.alloc.rate:            836.600 MB/sec
[info]                  ·gc.alloc.rate.norm:       168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.725 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 135.494 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 7818934.184 ops/s
[info]                  ·gc.alloc.rate:            834.530 MB/sec
[info]                  ·gc.alloc.rate.norm:       168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1349.405 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 271.650 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   5: 7807106.154 ops/s
[info]                  ·gc.alloc.rate:                   833.297 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.097 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        135.904 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.134 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava":
[info]   7810983.273 ±(99.9%) 114680.514 ops/s [Average]
[info]   (min, avg, max) = (7761888.202, 7810983.273, 7838283.313), stdev = 29782.165
[info]   CI (99.9%): [7696302.759, 7925663.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   833.724 ±(99.9%) 12.327 MB/sec [Average]
[info]   (min, avg, max) = (828.451, 833.724, 836.600), stdev = 3.201
[info]   CI (99.9%): [821.397, 846.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   168.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (168.000, 168.000, 168.000), stdev = 0.001
[info]   CI (99.9%): [168.000, 168.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   809.296 ±(99.9%) 1162.627 MB/sec [Average]
[info]   (min, avg, max) = (674.068, 809.296, 1349.405), stdev = 301.930
[info]   CI (99.9%): [≈ 0, 1971.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   163.053 ±(99.9%) 233.771 B/op [Average]
[info]   (min, avg, max) = (135.494, 163.053, 271.650), stdev = 60.710
[info]   CI (99.9%): [≈ 0, 396.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.054 ±(99.9%) 0.283 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.134), stdev = 0.073
[info]   CI (99.9%): [≈ 0, 0.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.800, 12.000), stdev = 2.950
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 91.53% complete, ETA 00:09:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2581953.103 ops/s
[info] # Warmup Iteration   2: 3810590.882 ops/s
[info] # Warmup Iteration   3: 3860895.472 ops/s
[info] # Warmup Iteration   4: 3865520.026 ops/s
[info] # Warmup Iteration   5: 3881956.390 ops/s
[info] Iteration   1: 3816401.302 ops/s
[info]                  ·gc.alloc.rate:                                  2153.821 MB/sec
[info]                  ·gc.alloc.rate.norm:                             888.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.230 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.095 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.898 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       843.092 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 3796258.239 ops/s
[info]                  ·gc.alloc.rate:            2142.065 MB/sec
[info]                  ·gc.alloc.rate.norm:       888.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.514 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 847.560 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 3830266.634 ops/s
[info]                  ·gc.alloc.rate:            2160.854 MB/sec
[info]                  ·gc.alloc.rate.norm:       888.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.171 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 840.049 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 3829115.631 ops/s
[info]                  ·gc.alloc.rate:            2160.517 MB/sec
[info]                  ·gc.alloc.rate.norm:       888.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.465 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 840.301 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 3850106.766 ops/s
[info]                  ·gc.alloc.rate:                                  2172.010 MB/sec
[info]                  ·gc.alloc.rate.norm:                             888.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.092 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       835.703 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala":
[info]   3824429.714 ±(99.9%) 76370.654 ops/s [Average]
[info]   (min, avg, max) = (3796258.239, 3824429.714, 3850106.766), stdev = 19833.216
[info]   CI (99.9%): [3748059.060, 3900800.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2157.853 ±(99.9%) 42.271 MB/sec [Average]
[info]   (min, avg, max) = (2142.065, 2157.853, 2172.010), stdev = 10.978
[info]   CI (99.9%): [2115.583, 2200.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   888.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (888.000, 888.000, 888.000), stdev = 0.001
[info]   CI (99.9%): [888.000, 888.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.047 ±(99.9%) 0.394 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.047, 0.230), stdev = 0.102
[info]   CI (99.9%): [≈ 0, 0.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.019 ±(99.9%) 0.163 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.095), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   2044.428 ±(99.9%) 1.230 MB/sec [Average]
[info]   (min, avg, max) = (2044.092, 2044.428, 2044.898), stdev = 0.320
[info]   CI (99.9%): [2043.198, 2045.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   841.341 ±(99.9%) 16.816 B/op [Average]
[info]   (min, avg, max) = (835.703, 841.341, 847.560), stdev = 4.367
[info]   CI (99.9%): [824.526, 858.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 7.000), stdev = 1.517
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 91.76% complete, ETA 00:09:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7180040.464 ops/s
[info] # Warmup Iteration   2: 7581279.862 ops/s
[info] # Warmup Iteration   3: 7750236.150 ops/s
[info] # Warmup Iteration   4: 7734452.903 ops/s
[info] # Warmup Iteration   5: 7700341.783 ops/s
[info] Iteration   1: 7744842.384 ops/s
[info]                  ·gc.alloc.rate:            826.661 MB/sec
[info]                  ·gc.alloc.rate.norm:       168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.421 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 137.670 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 7769341.521 ops/s
[info]                  ·gc.alloc.rate:            829.252 MB/sec
[info]                  ·gc.alloc.rate.norm:       168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.382 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 137.232 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 7756369.323 ops/s
[info]                  ·gc.alloc.rate:            827.875 MB/sec
[info]                  ·gc.alloc.rate.norm:       168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.419 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 137.468 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 7748481.547 ops/s
[info]                  ·gc.alloc.rate:                   826.936 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             677.312 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        137.603 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.135 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 7687161.508 ops/s
[info]                  ·gc.alloc.rate:            820.430 MB/sec
[info]                  ·gc.alloc.rate.norm:       168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.001 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 277.669 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala":
[info]   7741239.257 ±(99.9%) 121897.247 ops/s [Average]
[info]   (min, avg, max) = (7687161.508, 7741239.257, 7769341.521), stdev = 31656.328
[info]   CI (99.9%): [7619342.010, 7863136.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   826.231 ±(99.9%) 13.081 MB/sec [Average]
[info]   (min, avg, max) = (820.430, 826.231, 829.252), stdev = 3.397
[info]   CI (99.9%): [813.149, 839.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   168.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (168.000, 168.000, 168.000), stdev = 0.001
[info]   CI (99.9%): [168.000, 168.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   813.107 ±(99.9%) 1168.620 MB/sec [Average]
[info]   (min, avg, max) = (677.312, 813.107, 1356.001), stdev = 303.487
[info]   CI (99.9%): [≈ 0, 1981.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   165.529 ±(99.9%) 241.392 B/op [Average]
[info]   (min, avg, max) = (137.232, 165.529, 277.669), stdev = 62.689
[info]   CI (99.9%): [≈ 0, 406.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.027 ±(99.9%) 0.233 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.135), stdev = 0.061
[info]   CI (99.9%): [≈ 0, 0.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 8.000), stdev = 2.168
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 92.00% complete, ETA 00:09:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3170196.064 ops/s
[info] # Warmup Iteration   2: 4483889.487 ops/s
[info] # Warmup Iteration   3: 4589660.477 ops/s
[info] # Warmup Iteration   4: 4493012.749 ops/s
[info] # Warmup Iteration   5: 4607406.055 ops/s
[info] Iteration   1: 4652522.545 ops/s
[info]                  ·gc.alloc.rate:                                  2506.422 MB/sec
[info]                  ·gc.alloc.rate.norm:                             848.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.019 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.160 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       691.603 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   2: 4578755.290 ops/s
[info]                  ·gc.alloc.rate:            2467.754 MB/sec
[info]                  ·gc.alloc.rate.norm:       848.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2726.738 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 936.995 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 4645435.453 ops/s
[info]                  ·gc.alloc.rate:                                  2503.084 MB/sec
[info]                  ·gc.alloc.rate.norm:                             848.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2726.043 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       923.535 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 4648405.175 ops/s
[info]                  ·gc.alloc.rate:            2504.267 MB/sec
[info]                  ·gc.alloc.rate.norm:       848.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.046 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 692.159 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 4637673.452 ops/s
[info]                  ·gc.alloc.rate:                                  2498.408 MB/sec
[info]                  ·gc.alloc.rate.norm:                             848.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.359 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       925.031 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson":
[info]   4632558.383 ±(99.9%) 117688.118 ops/s [Average]
[info]   (min, avg, max) = (4578755.290, 4632558.383, 4652522.545), stdev = 30563.231
[info]   CI (99.9%): [4514870.265, 4750246.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2495.987 ±(99.9%) 61.813 MB/sec [Average]
[info]   (min, avg, max) = (2467.754, 2495.987, 2506.422), stdev = 16.053
[info]   CI (99.9%): [2434.174, 2557.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   848.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (848.000, 848.000, 848.000), stdev = 0.001
[info]   CI (99.9%): [848.000, 848.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.005 ±(99.9%) 0.031 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.019), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.002 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.006), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2453.269 ±(99.9%) 1438.278 MB/sec [Average]
[info]   (min, avg, max) = (2044.046, 2453.269, 2726.738), stdev = 373.516
[info]   CI (99.9%): [1014.991, 3891.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   833.864 ±(99.9%) 499.497 B/op [Average]
[info]   (min, avg, max) = (691.603, 833.864, 936.995), stdev = 129.718
[info]   CI (99.9%): [334.367, 1333.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 6.000), stdev = 1.140
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 92.24% complete, ETA 00:08:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2545147.934 ops/s
[info] # Warmup Iteration   2: 3217481.445 ops/s
[info] # Warmup Iteration   3: 3363976.297 ops/s
[info] # Warmup Iteration   4: 3364220.612 ops/s
[info] # Warmup Iteration   5: 3365565.967 ops/s
[info] Iteration   1: 3358766.539 ops/s
[info]                  ·gc.alloc.rate:            802.276 MB/sec
[info]                  ·gc.alloc.rate.norm:       376.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.306 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 317.431 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 3349199.440 ops/s
[info]                  ·gc.alloc.rate:            800.157 MB/sec
[info]                  ·gc.alloc.rate.norm:       376.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.927 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 636.691 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 3359592.959 ops/s
[info]                  ·gc.alloc.rate:            802.610 MB/sec
[info]                  ·gc.alloc.rate.norm:       376.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.441 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 317.362 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 3356431.001 ops/s
[info]                  ·gc.alloc.rate:            801.715 MB/sec
[info]                  ·gc.alloc.rate.norm:       376.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.339 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 317.668 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 3362590.957 ops/s
[info]                  ·gc.alloc.rate:            803.241 MB/sec
[info]                  ·gc.alloc.rate.norm:       376.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.392 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 317.090 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce":
[info]   3357316.179 ±(99.9%) 19423.392 ops/s [Average]
[info]   (min, avg, max) = (3349199.440, 3357316.179, 3362590.957), stdev = 5044.193
[info]   CI (99.9%): [3337892.788, 3376739.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   802.000 ±(99.9%) 4.501 MB/sec [Average]
[info]   (min, avg, max) = (800.157, 802.000, 803.241), stdev = 1.169
[info]   CI (99.9%): [797.499, 806.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   376.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (376.000, 376.000, 376.000), stdev = 0.001
[info]   CI (99.9%): [376.000, 376.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   812.881 ±(99.9%) 1166.794 MB/sec [Average]
[info]   (min, avg, max) = (677.306, 812.881, 1354.927), stdev = 303.013
[info]   CI (99.9%): [≈ 0, 1979.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   381.248 ±(99.9%) 549.859 B/op [Average]
[info]   (min, avg, max) = (317.090, 381.248, 636.691), stdev = 142.797
[info]   CI (99.9%): [≈ 0, 931.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 8.000), stdev = 1.789
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 92.47% complete, ETA 00:08:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 636814.694 ops/s
[info] # Warmup Iteration   2: 7188804.763 ops/s
[info] # Warmup Iteration   3: 7250430.302 ops/s
[info] # Warmup Iteration   4: 7327112.025 ops/s
[info] # Warmup Iteration   5: 7210067.445 ops/s
[info] Iteration   1: 7327381.634 ops/s
[info]                  ·gc.alloc.rate:            707.593 MB/sec
[info]                  ·gc.alloc.rate.norm:       152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.735 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 144.942 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 7336630.189 ops/s
[info]                  ·gc.alloc.rate:            708.638 MB/sec
[info]                  ·gc.alloc.rate.norm:       152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.882 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 144.760 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 7162346.452 ops/s
[info]                  ·gc.alloc.rate:                   691.657 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.050 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        148.131 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.146 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 7329523.885 ops/s
[info]                  ·gc.alloc.rate:            707.820 MB/sec
[info]                  ·gc.alloc.rate.norm:       152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.729 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 144.894 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 7003287.206 ops/s
[info]                  ·gc.alloc.rate:            676.366 MB/sec
[info]                  ·gc.alloc.rate.norm:       152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.790 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 151.646 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava":
[info]   7231833.873 ±(99.9%) 566964.207 ops/s [Average]
[info]   (min, avg, max) = (7003287.206, 7231833.873, 7336630.189), stdev = 147238.804
[info]   CI (99.9%): [6664869.666, 7798798.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   698.415 ±(99.9%) 54.763 MB/sec [Average]
[info]   (min, avg, max) = (676.366, 698.415, 708.638), stdev = 14.222
[info]   CI (99.9%): [643.651, 753.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   152.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (152.000, 152.000, 152.000), stdev = 0.001
[info]   CI (99.9%): [152.000, 152.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   674.637 ±(99.9%) 1.286 MB/sec [Average]
[info]   (min, avg, max) = (674.050, 674.637, 674.882), stdev = 0.334
[info]   CI (99.9%): [673.351, 675.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   146.874 ±(99.9%) 11.628 B/op [Average]
[info]   (min, avg, max) = (144.760, 146.874, 151.646), stdev = 3.020
[info]   CI (99.9%): [135.246, 158.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.029 ±(99.9%) 0.252 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.146), stdev = 0.065
[info]   CI (99.9%): [≈ 0, 0.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 92.71% complete, ETA 00:08:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2147774.047 ops/s
[info] # Warmup Iteration   2: 3168610.812 ops/s
[info] # Warmup Iteration   3: 3208792.794 ops/s
[info] # Warmup Iteration   4: 3185915.619 ops/s
[info] # Warmup Iteration   5: 3211727.202 ops/s
[info] Iteration   1: 3206769.810 ops/s
[info]                  ·gc.alloc.rate:            994.111 MB/sec
[info]                  ·gc.alloc.rate.norm:       488.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.370 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 664.357 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 3219328.741 ops/s
[info]                  ·gc.alloc.rate:            998.561 MB/sec
[info]                  ·gc.alloc.rate.norm:       488.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.068 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 330.885 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 3203045.656 ops/s
[info]                  ·gc.alloc.rate:            992.973 MB/sec
[info]                  ·gc.alloc.rate.norm:       488.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.364 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 665.116 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 3214682.672 ops/s
[info]                  ·gc.alloc.rate:            996.865 MB/sec
[info]                  ·gc.alloc.rate.norm:       488.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.887 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 331.360 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 3203942.369 ops/s
[info]                  ·gc.alloc.rate:            993.315 MB/sec
[info]                  ·gc.alloc.rate.norm:       488.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.491 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 664.949 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala":
[info]   3209553.850 ±(99.9%) 27461.969 ops/s [Average]
[info]   (min, avg, max) = (3203045.656, 3209553.850, 3219328.741), stdev = 7131.786
[info]   CI (99.9%): [3182091.881, 3237015.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   995.165 ±(99.9%) 9.385 MB/sec [Average]
[info]   (min, avg, max) = (992.973, 995.165, 998.561), stdev = 2.437
[info]   CI (99.9%): [985.780, 1004.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   488.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (488.000, 488.000, 488.000), stdev = 0.001
[info]   CI (99.9%): [488.000, 488.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1082.836 ±(99.9%) 1426.649 MB/sec [Average]
[info]   (min, avg, max) = (676.887, 1082.836, 1353.491), stdev = 370.496
[info]   CI (99.9%): [≈ 0, 2509.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   531.333 ±(99.9%) 703.770 B/op [Average]
[info]   (min, avg, max) = (330.885, 531.333, 665.116), stdev = 182.767
[info]   CI (99.9%): [≈ 0, 1235.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.000, 9.000), stdev = 2.739
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 92.94% complete, ETA 00:07:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8744984.091 ops/s
[info] # Warmup Iteration   2: 9849842.807 ops/s
[info] # Warmup Iteration   3: 9894783.457 ops/s
[info] # Warmup Iteration   4: 9987033.453 ops/s
[info] # Warmup Iteration   5: 9983824.384 ops/s
[info] Iteration   1: 9956424.916 ops/s
[info]                  ·gc.alloc.rate:            961.573 MB/sec
[info]                  ·gc.alloc.rate.norm:       152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.988 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 214.189 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 9987886.954 ops/s
[info]                  ·gc.alloc.rate:                   964.972 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             677.750 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        106.757 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.105 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 9932912.877 ops/s
[info]                  ·gc.alloc.rate:                   959.174 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.445 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        214.797 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.106 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 9969032.551 ops/s
[info]                  ·gc.alloc.rate:            962.716 MB/sec
[info]                  ·gc.alloc.rate.norm:       152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.108 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 107.064 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 9908985.236 ops/s
[info]                  ·gc.alloc.rate:                   956.860 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.436 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        215.315 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.106 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala":
[info]   9951048.507 ±(99.9%) 118803.796 ops/s [Average]
[info]   (min, avg, max) = (9908985.236, 9951048.507, 9987886.954), stdev = 30852.969
[info]   CI (99.9%): [9832244.711, 10069852.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   961.059 ±(99.9%) 12.102 MB/sec [Average]
[info]   (min, avg, max) = (956.860, 961.059, 964.972), stdev = 3.143
[info]   CI (99.9%): [948.958, 973.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   152.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (152.000, 152.000, 152.000), stdev = 0.001
[info]   CI (99.9%): [152.000, 152.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1084.345 ±(99.9%) 1428.611 MB/sec [Average]
[info]   (min, avg, max) = (677.750, 1084.345, 1355.445), stdev = 371.006
[info]   CI (99.9%): [≈ 0, 2512.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   171.625 ±(99.9%) 227.483 B/op [Average]
[info]   (min, avg, max) = (106.757, 171.625, 215.315), stdev = 59.077
[info]   CI (99.9%): [≈ 0, 399.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.400 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.400, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.063 ±(99.9%) 0.222 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.063, 0.106), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 2.191
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 93.18% complete, ETA 00:07:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7654020.534 ops/s
[info] # Warmup Iteration   2: 8020190.415 ops/s
[info] # Warmup Iteration   3: 8024553.165 ops/s
[info] # Warmup Iteration   4: 8000063.739 ops/s
[info] # Warmup Iteration   5: 7611291.275 ops/s
[info] Iteration   1: 7589435.636 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 8029834.692 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 7997166.740 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 8034160.810 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 8031210.508 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   7936361.677 ±(99.9%) 749029.701 ops/s [Average]
[info]   (min, avg, max) = (7589435.636, 7936361.677, 8034160.810), stdev = 194520.635
[info]   CI (99.9%): [7187331.976, 8685391.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 93.41% complete, ETA 00:07:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2441321.889 ops/s
[info] # Warmup Iteration   2: 3043636.731 ops/s
[info] # Warmup Iteration   3: 3003906.559 ops/s
[info] # Warmup Iteration   4: 3096656.858 ops/s
[info] # Warmup Iteration   5: 3080201.555 ops/s
[info] Iteration   1: 3164631.741 ops/s
[info]                  ·gc.alloc.rate:            1013.269 MB/sec
[info]                  ·gc.alloc.rate.norm:       504.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.728 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 336.605 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 3160632.482 ops/s
[info]                  ·gc.alloc.rate:            1012.124 MB/sec
[info]                  ·gc.alloc.rate.norm:       504.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.644 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 674.064 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 3172756.103 ops/s
[info]                  ·gc.alloc.rate:            1015.909 MB/sec
[info]                  ·gc.alloc.rate.norm:       504.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.755 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 335.743 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 3153021.250 ops/s
[info]                  ·gc.alloc.rate:            1009.822 MB/sec
[info]                  ·gc.alloc.rate.norm:       504.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.824 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 675.691 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 3172559.742 ops/s
[info]                  ·gc.alloc.rate:            1015.767 MB/sec
[info]                  ·gc.alloc.rate.norm:       504.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.677 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 335.752 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson":
[info]   3164720.264 ±(99.9%) 32194.749 ops/s [Average]
[info]   (min, avg, max) = (3153021.250, 3164720.264, 3172756.103), stdev = 8360.874
[info]   CI (99.9%): [3132525.515, 3196915.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1013.378 ±(99.9%) 9.881 MB/sec [Average]
[info]   (min, avg, max) = (1009.822, 1013.378, 1015.909), stdev = 2.566
[info]   CI (99.9%): [1003.497, 1023.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   504.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (504.000, 504.000, 504.000), stdev = 0.001
[info]   CI (99.9%): [504.000, 504.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   947.526 ±(99.9%) 1427.879 MB/sec [Average]
[info]   (min, avg, max) = (676.677, 947.526, 1353.824), stdev = 370.816
[info]   CI (99.9%): [≈ 0, 2375.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   471.571 ±(99.9%) 714.656 B/op [Average]
[info]   (min, avg, max) = (335.743, 471.571, 675.691), stdev = 185.594
[info]   CI (99.9%): [≈ 0, 1186.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 9.000), stdev = 2.168
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 93.65% complete, ETA 00:07:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 560293.844 ops/s
[info] # Warmup Iteration   2: 822197.596 ops/s
[info] # Warmup Iteration   3: 824812.155 ops/s
[info] # Warmup Iteration   4: 824961.071 ops/s
[info] # Warmup Iteration   5: 820833.203 ops/s
[info] Iteration   1: 806969.505 ops/s
[info]                  ·gc.alloc.rate:            1414.940 MB/sec
[info]                  ·gc.alloc.rate.norm:       2760.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.123 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2645.271 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 825372.957 ops/s
[info]                  ·gc.alloc.rate:            1447.314 MB/sec
[info]                  ·gc.alloc.rate.norm:       2760.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.215 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2586.276 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 825014.331 ops/s
[info]                  ·gc.alloc.rate:                   1446.807 MB/sec
[info]                  ·gc.alloc.rate.norm:              2760.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1356.332 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2587.407 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 6.354 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 825799.526 ops/s
[info]                  ·gc.alloc.rate:                                  1448.079 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2760.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.121 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.230 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.871 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2597.597 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 824174.478 ops/s
[info]                  ·gc.alloc.rate:            1445.240 MB/sec
[info]                  ·gc.alloc.rate.norm:       2760.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.881 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2602.718 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce":
[info]   821466.159 ±(99.9%) 31289.808 ops/s [Average]
[info]   (min, avg, max) = (806969.505, 821466.159, 825799.526), stdev = 8125.864
[info]   CI (99.9%): [790176.351, 852755.967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   1440.476 ±(99.9%) 55.114 MB/sec [Average]
[info]   (min, avg, max) = (1414.940, 1440.476, 1448.079), stdev = 14.313
[info]   CI (99.9%): [1385.362, 1495.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2760.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2760.000, 2760.001, 2760.001), stdev = 0.001
[info]   CI (99.9%): [2760.000, 2760.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.024 ±(99.9%) 0.208 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.121), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.046 ±(99.9%) 0.397 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.230), stdev = 0.103
[info]   CI (99.9%): [≈ 0, 0.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1358.884 ±(99.9%) 14.034 MB/sec [Average]
[info]   (min, avg, max) = (1356.123, 1358.884, 1362.881), stdev = 3.645
[info]   CI (99.9%): [1344.850, 1372.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2603.854 ±(99.9%) 93.042 B/op [Average]
[info]   (min, avg, max) = (2586.276, 2603.854, 2645.271), stdev = 24.163
[info]   CI (99.9%): [2510.812, 2696.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   1.271 ±(99.9%) 10.942 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.271, 6.354), stdev = 2.842
[info]   CI (99.9%): [≈ 0, 12.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.000, 7.000), stdev = 2.345
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 93.88% complete, ETA 00:06:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.901 ops/s
[info] # Warmup Iteration   2: 2129546.509 ops/s
[info] # Warmup Iteration   3: 2182274.795 ops/s
[info] # Warmup Iteration   4: 2104438.825 ops/s
[info] # Warmup Iteration   5: 2198176.536 ops/s
[info] Iteration   1: 2198664.388 ops/s
[info]                  ·gc.alloc.rate:            614.610 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.730 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 483.040 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 2198298.806 ops/s
[info]                  ·gc.alloc.rate:            614.529 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.753 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 483.120 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 2197736.911 ops/s
[info]                  ·gc.alloc.rate:            614.355 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.711 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 483.227 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 2197352.305 ops/s
[info]                  ·gc.alloc.rate:            614.258 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.723 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 483.312 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 2197296.390 ops/s
[info]                  ·gc.alloc.rate:            614.224 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.741 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 483.351 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava":
[info]   2197869.760 ±(99.9%) 2302.089 ops/s [Average]
[info]   (min, avg, max) = (2197296.390, 2197869.760, 2198664.388), stdev = 597.845
[info]   CI (99.9%): [2195567.672, 2200171.849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   614.395 ±(99.9%) 0.650 MB/sec [Average]
[info]   (min, avg, max) = (614.224, 614.395, 614.610), stdev = 0.169
[info]   CI (99.9%): [613.746, 615.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   440.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (440.000, 440.000, 440.000), stdev = 0.001
[info]   CI (99.9%): [440.000, 440.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   674.731 ±(99.9%) 0.062 MB/sec [Average]
[info]   (min, avg, max) = (674.711, 674.731, 674.753), stdev = 0.016
[info]   CI (99.9%): [674.669, 674.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   483.210 ±(99.9%) 0.500 B/op [Average]
[info]   (min, avg, max) = (483.040, 483.210, 483.351), stdev = 0.130
[info]   CI (99.9%): [482.710, 483.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 94.12% complete, ETA 00:06:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 490524.927 ops/s
[info] # Warmup Iteration   2: 997955.152 ops/s
[info] # Warmup Iteration   3: 1050184.743 ops/s
[info] # Warmup Iteration   4: 1047841.073 ops/s
[info] # Warmup Iteration   5: 1043146.018 ops/s
[info] Iteration   1: 1050402.243 ops/s
[info]                  ·gc.alloc.rate:            774.017 MB/sec
[info]                  ·gc.alloc.rate.norm:       1160.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.312 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1015.071 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 1046581.087 ops/s
[info]                  ·gc.alloc.rate:            771.495 MB/sec
[info]                  ·gc.alloc.rate.norm:       1160.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.567 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1018.772 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 1047461.010 ops/s
[info]                  ·gc.alloc.rate:            771.928 MB/sec
[info]                  ·gc.alloc.rate.norm:       1160.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.378 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1017.917 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 1050626.014 ops/s
[info]                  ·gc.alloc.rate:            774.223 MB/sec
[info]                  ·gc.alloc.rate.norm:       1160.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.331 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1014.830 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 1049081.725 ops/s
[info]                  ·gc.alloc.rate:            773.130 MB/sec
[info]                  ·gc.alloc.rate.norm:       1160.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.382 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1016.340 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala":
[info]   1048830.416 ±(99.9%) 6859.315 ops/s [Average]
[info]   (min, avg, max) = (1046581.087, 1048830.416, 1050626.014), stdev = 1781.342
[info]   CI (99.9%): [1041971.100, 1055689.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   772.959 ±(99.9%) 4.697 MB/sec [Average]
[info]   (min, avg, max) = (771.495, 772.959, 774.223), stdev = 1.220
[info]   CI (99.9%): [768.262, 777.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1160.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1160.000, 1160.000, 1160.000), stdev = 0.001
[info]   CI (99.9%): [1160.000, 1160.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   677.394 ±(99.9%) 0.390 MB/sec [Average]
[info]   (min, avg, max) = (677.312, 677.394, 677.567), stdev = 0.101
[info]   CI (99.9%): [677.004, 677.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1016.586 ±(99.9%) 6.667 B/op [Average]
[info]   (min, avg, max) = (1014.830, 1016.586, 1018.772), stdev = 1.731
[info]   CI (99.9%): [1009.919, 1023.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 94.35% complete, ETA 00:06:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2245007.750 ops/s
[info] # Warmup Iteration   2: 2360297.680 ops/s
[info] # Warmup Iteration   3: 2446036.289 ops/s
[info] # Warmup Iteration   4: 2420009.117 ops/s
[info] # Warmup Iteration   5: 2438599.792 ops/s
[info] Iteration   1: 2442920.535 ops/s
[info]                  ·gc.alloc.rate:            682.813 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.646 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 437.315 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 2447212.601 ops/s
[info]                  ·gc.alloc.rate:            684.108 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.038 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 436.096 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 2452743.335 ops/s
[info]                  ·gc.alloc.rate:            685.648 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.053 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 435.126 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 2427510.603 ops/s
[info]                  ·gc.alloc.rate:            678.576 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.006 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 439.630 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 2444163.407 ops/s
[info]                  ·gc.alloc.rate:            683.369 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.201 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 436.673 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala":
[info]   2442910.096 ±(99.9%) 36220.594 ops/s [Average]
[info]   (min, avg, max) = (2427510.603, 2442910.096, 2452743.335), stdev = 9406.373
[info]   CI (99.9%): [2406689.503, 2479130.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   682.903 ±(99.9%) 10.176 MB/sec [Average]
[info]   (min, avg, max) = (678.576, 682.903, 685.648), stdev = 2.643
[info]   CI (99.9%): [672.726, 693.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   440.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (440.000, 440.000, 440.000), stdev = 0.001
[info]   CI (99.9%): [440.000, 440.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   678.189 ±(99.9%) 1.025 MB/sec [Average]
[info]   (min, avg, max) = (678.006, 678.189, 678.646), stdev = 0.266
[info]   CI (99.9%): [677.163, 679.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   436.968 ±(99.9%) 6.514 B/op [Average]
[info]   (min, avg, max) = (435.126, 436.968, 439.630), stdev = 1.692
[info]   CI (99.9%): [430.454, 443.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 94.59% complete, ETA 00:06:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 630138.586 ops/s
[info] # Warmup Iteration   2: 1094656.493 ops/s
[info] # Warmup Iteration   3: 1099803.318 ops/s
[info] # Warmup Iteration   4: 1108907.264 ops/s
[info] # Warmup Iteration   5: 1108891.307 ops/s
[info] Iteration   1: 1110047.212 ops/s
[info]                  ·gc.alloc.rate:            789.815 MB/sec
[info]                  ·gc.alloc.rate.norm:       1120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.355 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 960.526 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 1111249.649 ops/s
[info]                  ·gc.alloc.rate:            790.747 MB/sec
[info]                  ·gc.alloc.rate.norm:       1120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.420 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 959.486 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 1102164.309 ops/s
[info]                  ·gc.alloc.rate:            784.321 MB/sec
[info]                  ·gc.alloc.rate.norm:       1120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.439 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 967.375 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 1110047.139 ops/s
[info]                  ·gc.alloc.rate:            790.079 MB/sec
[info]                  ·gc.alloc.rate.norm:       1120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.097 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1920.958 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 1114269.058 ops/s
[info]                  ·gc.alloc.rate:            793.008 MB/sec
[info]                  ·gc.alloc.rate.norm:       1120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.514 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 956.883 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson":
[info]   1109555.473 ±(99.9%) 17242.220 ops/s [Average]
[info]   (min, avg, max) = (1102164.309, 1109555.473, 1114269.058), stdev = 4477.750
[info]   CI (99.9%): [1092313.254, 1126797.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   789.594 ±(99.9%) 12.339 MB/sec [Average]
[info]   (min, avg, max) = (784.321, 789.594, 793.008), stdev = 3.204
[info]   CI (99.9%): [777.255, 801.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   1120.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1120.000, 1120.000, 1120.000), stdev = 0.001
[info]   CI (99.9%): [1120.000, 1120.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   812.965 ±(99.9%) 1166.980 MB/sec [Average]
[info]   (min, avg, max) = (677.355, 812.965, 1355.097), stdev = 303.061
[info]   CI (99.9%): [≈ 0, 1979.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   1153.046 ±(99.9%) 1653.058 B/op [Average]
[info]   (min, avg, max) = (956.883, 1153.046, 1920.958), stdev = 429.294
[info]   CI (99.9%): [≈ 0, 2806.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 9.000), stdev = 2.168
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 94.82% complete, ETA 00:05:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1009763.755 ops/s
[info] # Warmup Iteration   2: 1739381.642 ops/s
[info] # Warmup Iteration   3: 1764247.038 ops/s
[info] # Warmup Iteration   4: 1763750.002 ops/s
[info] # Warmup Iteration   5: 1758068.530 ops/s
[info] Iteration   1: 1757411.059 ops/s
[info]                  ·gc.alloc.rate:            1473.759 MB/sec
[info]                  ·gc.alloc.rate.norm:       1320.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.083 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1214.601 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 1757047.703 ops/s
[info]                  ·gc.alloc.rate:            1473.407 MB/sec
[info]                  ·gc.alloc.rate.norm:       1320.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.041 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1214.853 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 1757944.101 ops/s
[info]                  ·gc.alloc.rate:                   1474.153 MB/sec
[info]                  ·gc.alloc.rate.norm:              1320.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1356.065 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1214.261 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.982 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 1756471.741 ops/s
[info]                  ·gc.alloc.rate:                                  1473.529 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1320.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.119 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.107 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1363.217 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1221.182 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 1771116.372 ops/s
[info]                  ·gc.alloc.rate:                                  1485.244 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1320.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.710 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1211.099 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce":
[info]   1759998.195 ±(99.9%) 24021.640 ops/s [Average]
[info]   (min, avg, max) = (1756471.741, 1759998.195, 1771116.372), stdev = 6238.344
[info]   CI (99.9%): [1735976.555, 1784019.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1476.018 ±(99.9%) 19.888 MB/sec [Average]
[info]   (min, avg, max) = (1473.407, 1476.018, 1485.244), stdev = 5.165
[info]   CI (99.9%): [1456.130, 1495.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1320.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1320.000, 1320.000, 1320.000), stdev = 0.001
[info]   CI (99.9%): [1320.000, 1320.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.024 ±(99.9%) 0.204 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.119), stdev = 0.053
[info]   CI (99.9%): [≈ 0, 0.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.022 ±(99.9%) 0.183 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.107), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1358.823 ±(99.9%) 14.571 MB/sec [Average]
[info]   (min, avg, max) = (1356.041, 1358.823, 1363.217), stdev = 3.784
[info]   CI (99.9%): [1344.253, 1373.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   1215.199 ±(99.9%) 14.144 B/op [Average]
[info]   (min, avg, max) = (1211.099, 1215.199, 1221.182), stdev = 3.673
[info]   CI (99.9%): [1201.055, 1229.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   0.596 ±(99.9%) 5.135 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.596, 2.982), stdev = 1.334
[info]   CI (99.9%): [≈ 0, 5.732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.400, 8.000), stdev = 2.702
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 95.06% complete, ETA 00:05:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.869 ops/s
[info] # Warmup Iteration   2: 2509273.690 ops/s
[info] # Warmup Iteration   3: 2540136.747 ops/s
[info] # Warmup Iteration   4: 2603207.165 ops/s
[info] # Warmup Iteration   5: 2608839.011 ops/s
[info] Iteration   1: 2619668.116 ops/s
[info]                  ·gc.alloc.rate:            679.007 MB/sec
[info]                  ·gc.alloc.rate.norm:       408.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.696 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 405.410 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 2607513.188 ops/s
[info]                  ·gc.alloc.rate:            675.907 MB/sec
[info]                  ·gc.alloc.rate.norm:       408.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.745 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 407.299 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 2603084.816 ops/s
[info]                  ·gc.alloc.rate:            674.756 MB/sec
[info]                  ·gc.alloc.rate.norm:       408.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1349.482 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 815.982 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 2619065.929 ops/s
[info]                  ·gc.alloc.rate:                   678.886 MB/sec
[info]                  ·gc.alloc.rate.norm:              408.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.072 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        405.107 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.400 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 2621118.870 ops/s
[info]                  ·gc.alloc.rate:            679.386 MB/sec
[info]                  ·gc.alloc.rate.norm:       408.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.697 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 405.184 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava":
[info]   2614090.184 ±(99.9%) 31615.686 ops/s [Average]
[info]   (min, avg, max) = (2603084.816, 2614090.184, 2621118.870), stdev = 8210.493
[info]   CI (99.9%): [2582474.498, 2645705.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   677.588 ±(99.9%) 8.118 MB/sec [Average]
[info]   (min, avg, max) = (674.756, 677.588, 679.386), stdev = 2.108
[info]   CI (99.9%): [669.470, 685.707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   408.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (408.000, 408.000, 408.000), stdev = 0.001
[info]   CI (99.9%): [408.000, 408.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   809.538 ±(99.9%) 1162.270 MB/sec [Average]
[info]   (min, avg, max) = (674.072, 809.538, 1349.482), stdev = 301.838
[info]   CI (99.9%): [≈ 0, 1971.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   487.796 ±(99.9%) 706.453 B/op [Average]
[info]   (min, avg, max) = (405.107, 487.796, 815.982), stdev = 183.464
[info]   CI (99.9%): [≈ 0, 1194.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.080 ±(99.9%) 0.689 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.080, 0.400), stdev = 0.179
[info]   CI (99.9%): [≈ 0, 0.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 10.000), stdev = 2.168
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 95.29% complete, ETA 00:05:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1185123.998 ops/s
[info] # Warmup Iteration   2: 2325203.131 ops/s
[info] # Warmup Iteration   3: 2449509.855 ops/s
[info] # Warmup Iteration   4: 2495321.974 ops/s
[info] # Warmup Iteration   5: 2484204.831 ops/s
[info] Iteration   1: 2483589.469 ops/s
[info]                  ·gc.alloc.rate:            1173.868 MB/sec
[info]                  ·gc.alloc.rate.norm:       744.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.723 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 858.626 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 2479752.830 ops/s
[info]                  ·gc.alloc.rate:            1172.176 MB/sec
[info]                  ·gc.alloc.rate.norm:       744.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.847 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 859.944 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 2500093.687 ops/s
[info]                  ·gc.alloc.rate:            1181.583 MB/sec
[info]                  ·gc.alloc.rate.norm:       744.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.303 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 426.473 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 2475297.207 ops/s
[info]                  ·gc.alloc.rate:            1170.229 MB/sec
[info]                  ·gc.alloc.rate.norm:       744.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.019 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 861.485 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 2484966.658 ops/s
[info]                  ·gc.alloc.rate:                                  1174.561 MB/sec
[info]                  ·gc.alloc.rate.norm:                             744.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.080 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.051 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1358.757 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       860.675 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                2.531 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala":
[info]   2484739.970 ±(99.9%) 36078.551 ops/s [Average]
[info]   (min, avg, max) = (2475297.207, 2484739.970, 2500093.687), stdev = 9369.485
[info]   CI (99.9%): [2448661.419, 2520818.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1174.484 ±(99.9%) 16.586 MB/sec [Average]
[info]   (min, avg, max) = (1170.229, 1174.484, 1181.583), stdev = 4.307
[info]   CI (99.9%): [1157.897, 1191.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   744.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (744.000, 744.000, 744.000), stdev = 0.001
[info]   CI (99.9%): [744.000, 744.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.016 ±(99.9%) 0.139 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.080), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.010 ±(99.9%) 0.088 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.051), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1220.129 ±(99.9%) 1168.494 MB/sec [Average]
[info]   (min, avg, max) = (677.303, 1220.129, 1358.757), stdev = 303.454
[info]   CI (99.9%): [51.636, 2388.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   773.441 ±(99.9%) 746.885 B/op [Average]
[info]   (min, avg, max) = (426.473, 773.441, 861.485), stdev = 193.964
[info]   CI (99.9%): [26.556, 1520.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.506 ±(99.9%) 4.359 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.506, 2.531), stdev = 1.132
[info]   CI (99.9%): [≈ 0, 4.865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.200, 9.000), stdev = 1.643
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 95.53% complete, ETA 00:05:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2078862.060 ops/s
[info] # Warmup Iteration   2: 2834559.015 ops/s
[info] # Warmup Iteration   3: 2882238.995 ops/s
[info] # Warmup Iteration   4: 2903324.994 ops/s
[info] # Warmup Iteration   5: 2887059.300 ops/s
[info] Iteration   1: 2905360.679 ops/s
[info]                  ·gc.alloc.rate:            753.061 MB/sec
[info]                  ·gc.alloc.rate.norm:       408.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.046 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 367.358 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 2909828.402 ops/s
[info]                  ·gc.alloc.rate:            754.262 MB/sec
[info]                  ·gc.alloc.rate.norm:       408.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.403 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 366.425 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 2919317.486 ops/s
[info]                  ·gc.alloc.rate:            756.711 MB/sec
[info]                  ·gc.alloc.rate.norm:       408.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.388 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 365.231 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 2918466.796 ops/s
[info]                  ·gc.alloc.rate:            756.759 MB/sec
[info]                  ·gc.alloc.rate.norm:       408.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.631 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 365.339 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 2909920.876 ops/s
[info]                  ·gc.alloc.rate:            754.252 MB/sec
[info]                  ·gc.alloc.rate.norm:       408.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.349 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 366.400 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala":
[info]   2912578.848 ±(99.9%) 23328.111 ops/s [Average]
[info]   (min, avg, max) = (2905360.679, 2912578.848, 2919317.486), stdev = 6058.236
[info]   CI (99.9%): [2889250.737, 2935906.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   755.009 ±(99.9%) 6.352 MB/sec [Average]
[info]   (min, avg, max) = (753.061, 755.009, 756.759), stdev = 1.649
[info]   CI (99.9%): [748.658, 761.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   408.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (408.000, 408.000, 408.000), stdev = 0.001
[info]   CI (99.9%): [408.000, 408.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   677.563 ±(99.9%) 1.123 MB/sec [Average]
[info]   (min, avg, max) = (677.349, 677.563, 678.046), stdev = 0.292
[info]   CI (99.9%): [676.440, 678.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   366.151 ±(99.9%) 3.390 B/op [Average]
[info]   (min, avg, max) = (365.231, 366.151, 367.358), stdev = 0.880
[info]   CI (99.9%): [362.761, 369.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 95.76% complete, ETA 00:04:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2105651.832 ops/s
[info] # Warmup Iteration   2: 2962776.705 ops/s
[info] # Warmup Iteration   3: 2977089.719 ops/s
[info] # Warmup Iteration   4: 2976765.236 ops/s
[info] # Warmup Iteration   5: 2976659.355 ops/s
[info] Iteration   1: 2927186.721 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2974766.253 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2975947.856 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2976202.697 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2975952.825 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   2966011.271 ±(99.9%) 83600.460 ops/s [Average]
[info]   (min, avg, max) = (2927186.721, 2966011.271, 2976202.697), stdev = 21710.774
[info]   CI (99.9%): [2882410.811, 3049611.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 96.00% complete, ETA 00:04:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1681251.440 ops/s
[info] # Warmup Iteration   2: 2433800.417 ops/s
[info] # Warmup Iteration   3: 2431190.065 ops/s
[info] # Warmup Iteration   4: 2462772.316 ops/s
[info] # Warmup Iteration   5: 2459902.054 ops/s
[info] Iteration   1: 2458253.787 ops/s
[info]                  ·gc.alloc.rate:            1186.891 MB/sec
[info]                  ·gc.alloc.rate.norm:       760.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.726 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 867.470 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 2453312.552 ops/s
[info]                  ·gc.alloc.rate:            1184.606 MB/sec
[info]                  ·gc.alloc.rate.norm:       760.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.415 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 434.605 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 2438122.425 ops/s
[info]                  ·gc.alloc.rate:            1177.136 MB/sec
[info]                  ·gc.alloc.rate.norm:       760.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.679 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 874.628 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 2444677.791 ops/s
[info]                  ·gc.alloc.rate:            1180.525 MB/sec
[info]                  ·gc.alloc.rate.norm:       760.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.908 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 872.264 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 2460652.825 ops/s
[info]                  ·gc.alloc.rate:                                  1188.066 MB/sec
[info]                  ·gc.alloc.rate.norm:                             760.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.039 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.025 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1358.749 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       869.185 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                2.556 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson":
[info]   2451003.876 ±(99.9%) 36375.061 ops/s [Average]
[info]   (min, avg, max) = (2438122.425, 2451003.876, 2460652.825), stdev = 9446.488
[info]   CI (99.9%): [2414628.815, 2487378.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1183.445 ±(99.9%) 17.530 MB/sec [Average]
[info]   (min, avg, max) = (1177.136, 1183.445, 1188.066), stdev = 4.553
[info]   CI (99.9%): [1165.915, 1200.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   760.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (760.000, 760.000, 760.000), stdev = 0.001
[info]   CI (99.9%): [760.000, 760.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.008 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.039), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.005 ±(99.9%) 0.043 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.025), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1220.095 ±(99.9%) 1168.180 MB/sec [Average]
[info]   (min, avg, max) = (677.415, 1220.095, 1358.749), stdev = 303.373
[info]   CI (99.9%): [51.916, 2388.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   783.631 ±(99.9%) 751.379 B/op [Average]
[info]   (min, avg, max) = (434.605, 783.631, 874.628), stdev = 195.131
[info]   CI (99.9%): [32.251, 1535.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   0.511 ±(99.9%) 4.402 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.511, 2.556), stdev = 1.143
[info]   CI (99.9%): [≈ 0, 4.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.800, 8.000), stdev = 1.789
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce
[info] # Run progress: 96.24% complete, ETA 00:04:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5060.558 ops/s
[info] # Warmup Iteration   2: 8508.211 ops/s
[info] # Warmup Iteration   3: 9648.461 ops/s
[info] # Warmup Iteration   4: 9675.074 ops/s
[info] # Warmup Iteration   5: 10674.899 ops/s
[info] Iteration   1: 10816.293 ops/s
[info]                  ·gc.alloc.rate:            1574.049 MB/sec
[info]                  ·gc.alloc.rate.norm:       229064.041 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.975 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 197328.841 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 10666.791 ops/s
[info]                  ·gc.alloc.rate:            1552.510 MB/sec
[info]                  ·gc.alloc.rate.norm:       229077.603 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2034.215 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 300154.757 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   3: 10782.337 ops/s
[info]                  ·gc.alloc.rate:                   1569.443 MB/sec
[info]                  ·gc.alloc.rate.norm:              229104.038 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1356.159 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        197969.282 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 486.172 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 10839.982 ops/s
[info]                  ·gc.alloc.rate:                                  1577.929 MB/sec
[info]                  ·gc.alloc.rate.norm:                             229104.041 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.106 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 15.351 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.859 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       197877.375 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 10839.289 ops/s
[info]                  ·gc.alloc.rate:                                  1577.869 MB/sec
[info]                  ·gc.alloc.rate.norm:                             229104.038 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.049 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 7.045 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.022 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       296788.688 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce":
[info]   10788.938 ±(99.9%) 278.024 ops/s [Average]
[info]   (min, avg, max) = (10666.791, 10788.938, 10839.982), stdev = 72.202
[info]   CI (99.9%): [10510.915, 11066.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1570.360 ±(99.9%) 40.694 MB/sec [Average]
[info]   (min, avg, max) = (1552.510, 1570.360, 1577.929), stdev = 10.568
[info]   CI (99.9%): [1529.665, 1611.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   229090.752 ±(99.9%) 72.450 B/op [Average]
[info]   (min, avg, max) = (229064.041, 229090.752, 229104.041), stdev = 18.815
[info]   CI (99.9%): [229018.302, 229163.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.031 ±(99.9%) 0.180 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.031, 0.106), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   4.479 ±(99.9%) 26.186 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.479, 15.351), stdev = 6.800
[info]   CI (99.9%): [≈ 0, 30.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1630.646 ±(99.9%) 1435.940 MB/sec [Average]
[info]   (min, avg, max) = (1355.975, 1630.646, 2044.022), stdev = 372.909
[info]   CI (99.9%): [194.706, 3066.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   238023.789 ±(99.9%) 212534.507 B/op [Average]
[info]   (min, avg, max) = (197328.841, 238023.789, 300154.757), stdev = 55194.536
[info]   CI (99.9%): [25489.282, 450558.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   97.234 ±(99.9%) 837.218 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 97.234, 486.172), stdev = 217.423
[info]   CI (99.9%): [≈ 0, 934.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 8.400, 19.000), stdev = 6.189
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala
[info] # Run progress: 96.47% complete, ETA 00:03:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4299.875 ops/s
[info] # Warmup Iteration   2: 13843.205 ops/s
[info] # Warmup Iteration   3: 14245.753 ops/s
[info] # Warmup Iteration   4: 14246.730 ops/s
[info] # Warmup Iteration   5: 14370.630 ops/s
[info] Iteration   1: 14430.088 ops/s
[info]                  ·gc.alloc.rate:      204.031 MB/sec
[info]                  ·gc.alloc.rate.norm: 22255.667 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 14463.775 ops/s
[info]                  ·gc.alloc.rate:      204.498 MB/sec
[info]                  ·gc.alloc.rate.norm: 22256.028 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 14480.744 ops/s
[info]                  ·gc.alloc.rate:            204.762 MB/sec
[info]                  ·gc.alloc.rate.norm:       22256.038 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.717 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 73553.798 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 14618.852 ops/s
[info]                  ·gc.alloc.rate:      206.589 MB/sec
[info]                  ·gc.alloc.rate.norm: 22245.683 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 14696.258 ops/s
[info]                  ·gc.alloc.rate:      207.653 MB/sec
[info]                  ·gc.alloc.rate.norm: 22240.028 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala":
[info]   14537.943 ±(99.9%) 439.105 ops/s [Average]
[info]   (min, avg, max) = (14430.088, 14537.943, 14696.258), stdev = 114.034
[info]   CI (99.9%): [14098.839, 14977.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   205.507 ±(99.9%) 5.943 MB/sec [Average]
[info]   (min, avg, max) = (204.031, 205.507, 207.653), stdev = 1.543
[info]   CI (99.9%): [199.563, 211.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   22250.689 ±(99.9%) 28.597 B/op [Average]
[info]   (min, avg, max) = (22240.028, 22250.689, 22256.038), stdev = 7.427
[info]   CI (99.9%): [22222.091, 22279.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   135.343 ±(99.9%) 1165.347 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 135.343, 676.717), stdev = 302.637
[info]   CI (99.9%): [≈ 0, 1300.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   14710.760 ±(99.9%) 126664.077 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14710.760, 73553.798), stdev = 32894.259
[info]   CI (99.9%): [≈ 0, 141374.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.count":
[info]   1.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.200, 1.000), stdev = 0.447
[info]   CI (99.9%): [1.000, 1.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 5.000), stdev = 2.236
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala
[info] # Run progress: 96.71% complete, ETA 00:03:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18488.781 ops/s
[info] # Warmup Iteration   2: 23624.525 ops/s
[info] # Warmup Iteration   3: 36249.653 ops/s
[info] # Warmup Iteration   4: 37163.825 ops/s
[info] # Warmup Iteration   5: 37273.470 ops/s
[info] Iteration   1: 37330.072 ops/s
[info]                  ·gc.alloc.rate:      341.976 MB/sec
[info]                  ·gc.alloc.rate.norm: 14416.011 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 37167.629 ops/s
[info]                  ·gc.alloc.rate:            340.484 MB/sec
[info]                  ·gc.alloc.rate.norm:       14416.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.203 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 28714.972 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 37484.539 ops/s
[info]                  ·gc.alloc.rate:      343.283 MB/sec
[info]                  ·gc.alloc.rate.norm: 14416.011 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 36839.766 ops/s
[info]                  ·gc.alloc.rate:            337.439 MB/sec
[info]                  ·gc.alloc.rate.norm:       14416.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.121 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 28970.590 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 37400.122 ops/s
[info]                  ·gc.alloc.rate:      342.533 MB/sec
[info]                  ·gc.alloc.rate.norm: 14416.011 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala":
[info]   37244.426 ±(99.9%) 979.606 ops/s [Average]
[info]   (min, avg, max) = (36839.766, 37244.426, 37484.539), stdev = 254.400
[info]   CI (99.9%): [36264.820, 38224.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   341.143 ±(99.9%) 8.898 MB/sec [Average]
[info]   (min, avg, max) = (337.439, 341.143, 343.283), stdev = 2.311
[info]   CI (99.9%): [332.244, 350.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   14416.011 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (14416.011, 14416.011, 14416.012), stdev = 0.001
[info]   CI (99.9%): [14416.009, 14416.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   271.265 ±(99.9%) 1430.301 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 271.265, 678.203), stdev = 371.445
[info]   CI (99.9%): [≈ 0, 1701.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   11537.112 ±(99.9%) 60832.859 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11537.112, 28970.590), stdev = 15798.100
[info]   CI (99.9%): [≈ 0, 72369.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.643
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson
[info] # Run progress: 96.94% complete, ETA 00:03:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 547.625 ops/s
[info] # Warmup Iteration   2: 2576.038 ops/s
[info] # Warmup Iteration   3: 2545.118 ops/s
[info] # Warmup Iteration   4: 2500.540 ops/s
[info] # Warmup Iteration   5: 2933.022 ops/s
[info] Iteration   1: 3045.371 ops/s
[info]                  ·gc.alloc.rate:            998.817 MB/sec
[info]                  ·gc.alloc.rate.norm:       516024.134 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.986 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 349754.831 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 3041.035 ops/s
[info]                  ·gc.alloc.rate:            997.351 MB/sec
[info]                  ·gc.alloc.rate.norm:       516024.134 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.762 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 700429.465 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   3: 3069.525 ops/s
[info]                  ·gc.alloc.rate:            1006.805 MB/sec
[info]                  ·gc.alloc.rate.norm:       516024.143 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.845 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 346907.592 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 3031.360 ops/s
[info]                  ·gc.alloc.rate:            994.227 MB/sec
[info]                  ·gc.alloc.rate.norm:       516024.135 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.972 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 702739.588 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   5: 3066.735 ops/s
[info]                  ·gc.alloc.rate:            1005.874 MB/sec
[info]                  ·gc.alloc.rate.norm:       516024.133 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.880 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 347246.811 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson":
[info]   3050.805 ±(99.9%) 64.068 ops/s [Average]
[info]   (min, avg, max) = (3031.360, 3050.805, 3069.525), stdev = 16.638
[info]   CI (99.9%): [2986.737, 3114.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1000.615 ±(99.9%) 21.149 MB/sec [Average]
[info]   (min, avg, max) = (994.227, 1000.615, 1006.805), stdev = 5.492
[info]   CI (99.9%): [979.466, 1021.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   516024.136 ±(99.9%) 0.016 B/op [Average]
[info]   (min, avg, max) = (516024.133, 516024.136, 516024.143), stdev = 0.004
[info]   CI (99.9%): [516024.119, 516024.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   947.689 ±(99.9%) 1427.773 MB/sec [Average]
[info]   (min, avg, max) = (676.845, 947.689, 1353.972), stdev = 370.788
[info]   CI (99.9%): [≈ 0, 2375.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   489415.658 ±(99.9%) 745822.122 B/op [Average]
[info]   (min, avg, max) = (346907.592, 489415.658, 702739.588), stdev = 193687.637
[info]   CI (99.9%): [≈ 0, 1235237.780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.time":
[info]   58.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 11.600, 19.000), stdev = 5.857
[info]   CI (99.9%): [58.000, 58.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala
[info] # Run progress: 97.18% complete, ETA 00:03:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_456a8d2b/target/1bdf7fe1/jackson-module-afterburner-2.9.5.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 21530.764 ops/s
[info] # Warmup Iteration   2: 54693.378 ops/s
[info] # Warmup Iteration   3: 54179.698 ops/s
[info] # Warmup Iteration   4: 54585.703 ops/s
[info] # Warmup Iteration   5: 54452.080 ops/s
[info] Iteration   1: 54479.253 ops/s
[info]                  ·gc.alloc.rate:            695.729 MB/sec
[info]                  ·gc.alloc.rate.norm:       20099.989 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.060 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19531.751 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 55597.121 ops/s
[info]                  ·gc.alloc.rate:            709.889 MB/sec
[info]                  ·gc.alloc.rate.norm:       20100.050 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.949 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19139.072 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 55074.998 ops/s
[info]                  ·gc.alloc.rate:            703.407 MB/sec
[info]                  ·gc.alloc.rate.norm:       20099.986 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.139 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19320.783 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 55373.767 ops/s
[info]                  ·gc.alloc.rate:            707.096 MB/sec
[info]                  ·gc.alloc.rate.norm:       20100.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.001 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19216.131 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 55069.799 ops/s
[info]                  ·gc.alloc.rate:            703.211 MB/sec
[info]                  ·gc.alloc.rate.norm:       20100.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.011 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19322.537 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala":
[info]   55118.988 ±(99.9%) 1619.034 ops/s [Average]
[info]   (min, avg, max) = (54479.253, 55118.988, 55597.121), stdev = 420.458
[info]   CI (99.9%): [53499.954, 56738.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   703.866 ±(99.9%) 20.517 MB/sec [Average]
[info]   (min, avg, max) = (695.729, 703.866, 709.889), stdev = 5.328
[info]   CI (99.9%): [683.350, 724.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   20100.010 ±(99.9%) 0.101 B/op [Average]
[info]   (min, avg, max) = (20099.986, 20100.010, 20100.050), stdev = 0.026
[info]   CI (99.9%): [20099.909, 20100.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   676.032 ±(99.9%) 0.275 MB/sec [Average]
[info]   (min, avg, max) = (675.949, 676.032, 676.139), stdev = 0.072
[info]   CI (99.9%): [675.757, 676.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   19306.055 ±(99.9%) 569.182 B/op [Average]
[info]   (min, avg, max) = (19139.072, 19306.055, 19531.751), stdev = 147.815
[info]   CI (99.9%): [18736.872, 19875.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.400, 10.000), stdev = 2.074
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala
[info] # Run progress: 97.41% complete, ETA 00:02:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 70346.153 ops/s
[info] # Warmup Iteration   2: 85547.841 ops/s
[info] # Warmup Iteration   3: 86031.698 ops/s
[info] # Warmup Iteration   4: 85845.482 ops/s
[info] # Warmup Iteration   5: 85384.086 ops/s
[info] Iteration   1: 86949.839 ops/s
[info]                  ·gc.alloc.rate:      570.065 MB/sec
[info]                  ·gc.alloc.rate.norm: 10320.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 86412.773 ops/s
[info]                  ·gc.alloc.rate:            566.575 MB/sec
[info]                  ·gc.alloc.rate.norm:       10320.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.413 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12338.900 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 86542.511 ops/s
[info]                  ·gc.alloc.rate:            567.424 MB/sec
[info]                  ·gc.alloc.rate.norm:       10320.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.418 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12320.511 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 86567.567 ops/s
[info]                  ·gc.alloc.rate:            567.598 MB/sec
[info]                  ·gc.alloc.rate.norm:       10320.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.391 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12316.242 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 86554.823 ops/s
[info]                  ·gc.alloc.rate:            567.494 MB/sec
[info]                  ·gc.alloc.rate.norm:       10320.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.368 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12318.091 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala":
[info]   86605.503 ±(99.9%) 778.954 ops/s [Average]
[info]   (min, avg, max) = (86412.773, 86605.503, 86949.839), stdev = 202.292
[info]   CI (99.9%): [85826.549, 87384.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   567.831 ±(99.9%) 5.059 MB/sec [Average]
[info]   (min, avg, max) = (566.575, 567.831, 570.065), stdev = 1.314
[info]   CI (99.9%): [562.772, 572.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   10320.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10320.005, 10320.005, 10320.005), stdev = 0.001
[info]   CI (99.9%): [10320.004, 10320.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   541.918 ±(99.9%) 1166.519 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 541.918, 677.418), stdev = 302.941
[info]   CI (99.9%): [≈ 0, 1708.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   9858.749 ±(99.9%) 21221.729 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9858.749, 12338.900), stdev = 5511.216
[info]   CI (99.9%): [≈ 0, 31080.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 4.000), stdev = 1.732
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 97.65% complete, ETA 00:02:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 68900.880 ops/s
[info] # Warmup Iteration   2: 87713.864 ops/s
[info] # Warmup Iteration   3: 87843.440 ops/s
[info] # Warmup Iteration   4: 89126.127 ops/s
[info] # Warmup Iteration   5: 87877.355 ops/s
[info] Iteration   1: 89643.266 ops/s
[info]                  ·gc.alloc.rate:      3.190 MB/sec
[info]                  ·gc.alloc.rate.norm: 56.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 89694.257 ops/s
[info]                  ·gc.alloc.rate:      3.191 MB/sec
[info]                  ·gc.alloc.rate.norm: 56.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 88746.017 ops/s
[info]                  ·gc.alloc.rate:      3.157 MB/sec
[info]                  ·gc.alloc.rate.norm: 56.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 89718.918 ops/s
[info]                  ·gc.alloc.rate:      3.192 MB/sec
[info]                  ·gc.alloc.rate.norm: 56.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 89709.924 ops/s
[info]                  ·gc.alloc.rate:      3.192 MB/sec
[info]                  ·gc.alloc.rate.norm: 56.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   89502.476 ±(99.9%) 1632.230 ops/s [Average]
[info]   (min, avg, max) = (88746.017, 89502.476, 89718.918), stdev = 423.885
[info]   CI (99.9%): [87870.246, 91134.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   3.184 ±(99.9%) 0.059 MB/sec [Average]
[info]   (min, avg, max) = (3.157, 3.184, 3.192), stdev = 0.015
[info]   CI (99.9%): [3.126, 3.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   56.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (56.005, 56.005, 56.005), stdev = 0.001
[info]   CI (99.9%): [56.004, 56.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 97.88% complete, ETA 00:02:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 278339.294 ops/s
[info] # Warmup Iteration   2: 343953.272 ops/s
[info] # Warmup Iteration   3: 345194.047 ops/s
[info] # Warmup Iteration   4: 343462.250 ops/s
[info] # Warmup Iteration   5: 344846.394 ops/s
[info] Iteration   1: 344872.852 ops/s
[info]                  ·gc.alloc.rate:            1847.345 MB/sec
[info]                  ·gc.alloc.rate.norm:       8432.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.974 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6189.194 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 344436.824 ops/s
[info]                  ·gc.alloc.rate:                                  1845.160 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8432.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.040 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.184 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2040.800 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9326.033 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                15.219 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   3: 348588.324 ops/s
[info]                  ·gc.alloc.rate:                                  1867.872 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8432.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.042 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.702 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9230.248 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 348267.142 ops/s
[info]                  ·gc.alloc.rate:            1865.709 MB/sec
[info]                  ·gc.alloc.rate.norm:       8432.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.227 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9238.807 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 349125.080 ops/s
[info]                  ·gc.alloc.rate:                                  1870.077 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8432.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.610 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6143.877 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce":
[info]   347058.044 ±(99.9%) 8550.288 ops/s [Average]
[info]   (min, avg, max) = (344436.824, 347058.044, 349125.080), stdev = 2220.483
[info]   CI (99.9%): [338507.756, 355608.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1859.233 ±(99.9%) 46.110 MB/sec [Average]
[info]   (min, avg, max) = (1845.160, 1859.233, 1870.077), stdev = 11.975
[info]   CI (99.9%): [1813.123, 1905.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   8432.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8432.001, 8432.001, 8432.001), stdev = 0.001
[info]   CI (99.9%): [8432.001, 8432.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.010 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.040), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.046 ±(99.9%) 0.305 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.184), stdev = 0.079
[info]   CI (99.9%): [≈ 0, 0.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1769.662 ±(99.9%) 1442.551 MB/sec [Average]
[info]   (min, avg, max) = (1355.974, 1769.662, 2044.702), stdev = 374.626
[info]   CI (99.9%): [327.112, 3212.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   8025.632 ±(99.9%) 6536.869 B/op [Average]
[info]   (min, avg, max) = (6143.877, 8025.632, 9326.033), stdev = 1697.604
[info]   CI (99.9%): [1488.763, 14562.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   3.044 ±(99.9%) 26.208 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.044, 15.219), stdev = 6.806
[info]   CI (99.9%): [≈ 0, 29.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.800, 12.000), stdev = 3.899
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 98.12% complete, ETA 00:02:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 208709.301 ops/s
[info] # Warmup Iteration   2: 398083.357 ops/s
[info] # Warmup Iteration   3: 400479.347 ops/s
[info] # Warmup Iteration   4: 406561.062 ops/s
[info] # Warmup Iteration   5: 406763.855 ops/s
[info] Iteration   1: 396562.927 ops/s
[info]                  ·gc.alloc.rate:            483.887 MB/sec
[info]                  ·gc.alloc.rate.norm:       1920.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.629 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2688.745 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 404980.681 ops/s
[info]                  ·gc.alloc.rate:      494.119 MB/sec
[info]                  ·gc.alloc.rate.norm: 1920.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 407840.007 ops/s
[info]                  ·gc.alloc.rate:            497.466 MB/sec
[info]                  ·gc.alloc.rate.norm:       1920.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.338 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2614.230 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 407603.346 ops/s
[info]                  ·gc.alloc.rate:            497.198 MB/sec
[info]                  ·gc.alloc.rate.norm:       1920.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.390 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2615.839 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 410769.555 ops/s
[info]                  ·gc.alloc.rate:      501.023 MB/sec
[info]                  ·gc.alloc.rate.norm: 1920.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala":
[info]   405551.303 ±(99.9%) 20896.238 ops/s [Average]
[info]   (min, avg, max) = (396562.927, 405551.303, 410769.555), stdev = 5426.687
[info]   CI (99.9%): [384655.065, 426447.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   494.739 ±(99.9%) 25.186 MB/sec [Average]
[info]   (min, avg, max) = (483.887, 494.739, 501.023), stdev = 6.541
[info]   CI (99.9%): [469.553, 519.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1920.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1920.001, 1920.001, 1920.001), stdev = 0.001
[info]   CI (99.9%): [1920.001, 1920.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   406.471 ±(99.9%) 1428.804 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 406.471, 677.629), stdev = 371.056
[info]   CI (99.9%): [≈ 0, 1835.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1583.763 ±(99.9%) 5568.355 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1583.763, 2688.745), stdev = 1446.084
[info]   CI (99.9%): [≈ 0, 7152.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 5.000), stdev = 2.739
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 98.35% complete, ETA 00:01:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 945314.252 ops/s
[info] # Warmup Iteration   2: 980269.817 ops/s
[info] # Warmup Iteration   3: 1023780.142 ops/s
[info] # Warmup Iteration   4: 1011913.918 ops/s
[info] # Warmup Iteration   5: 1027317.683 ops/s
[info] Iteration   1: 1022392.892 ops/s
[info]                  ·gc.alloc.rate:            535.322 MB/sec
[info]                  ·gc.alloc.rate.norm:       824.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.158 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1043.861 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 1011320.792 ops/s
[info]                  ·gc.alloc.rate:            529.565 MB/sec
[info]                  ·gc.alloc.rate.norm:       824.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.249 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1055.353 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 1006252.152 ops/s
[info]                  ·gc.alloc.rate:            526.745 MB/sec
[info]                  ·gc.alloc.rate.norm:       824.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.057 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1060.701 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 1005828.678 ops/s
[info]                  ·gc.alloc.rate:            526.561 MB/sec
[info]                  ·gc.alloc.rate.norm:       824.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.092 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1061.127 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 1005618.240 ops/s
[info]                  ·gc.alloc.rate:      526.459 MB/sec
[info]                  ·gc.alloc.rate.norm: 824.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala":
[info]   1010282.551 ±(99.9%) 27605.061 ops/s [Average]
[info]   (min, avg, max) = (1005618.240, 1010282.551, 1022392.892), stdev = 7168.947
[info]   CI (99.9%): [982677.490, 1037887.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   528.931 ±(99.9%) 14.632 MB/sec [Average]
[info]   (min, avg, max) = (526.459, 528.931, 535.322), stdev = 3.800
[info]   CI (99.9%): [514.299, 543.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   824.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (824.000, 824.000, 824.000), stdev = 0.001
[info]   CI (99.9%): [824.000, 824.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   542.511 ±(99.9%) 1167.796 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 542.511, 678.249), stdev = 303.273
[info]   CI (99.9%): [≈ 0, 1710.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   844.208 ±(99.9%) 1817.420 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 844.208, 1061.127), stdev = 471.978
[info]   CI (99.9%): [≈ 0, 2661.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 98.59% complete, ETA 00:01:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 59358.802 ops/s
[info] # Warmup Iteration   2: 95305.607 ops/s
[info] # Warmup Iteration   3: 94339.788 ops/s
[info] # Warmup Iteration   4: 94656.607 ops/s
[info] # Warmup Iteration   5: 96213.728 ops/s
[info] Iteration   1: 96154.332 ops/s
[info]                  ·gc.alloc.rate:                                  3341.728 MB/sec
[info]                  ·gc.alloc.rate.norm:                             54704.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3406.995 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       55772.419 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 97908.931 ops/s
[info]                  ·gc.alloc.rate:                                  3403.837 MB/sec
[info]                  ·gc.alloc.rate.norm:                             54704.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.024 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3408.086 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       54772.283 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 97996.094 ops/s
[info]                  ·gc.alloc.rate:                                  3405.606 MB/sec
[info]                  ·gc.alloc.rate.norm:                             54704.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3406.621 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       54720.313 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 97386.816 ops/s
[info]                  ·gc.alloc.rate:            3384.625 MB/sec
[info]                  ·gc.alloc.rate.norm:       54704.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      3406.906 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 55064.127 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   5: 96028.822 ops/s
[info]                  ·gc.alloc.rate:            3338.332 MB/sec
[info]                  ·gc.alloc.rate.norm:       54704.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      3407.430 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 55836.287 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson":
[info]   97094.999 ±(99.9%) 3643.492 ops/s [Average]
[info]   (min, avg, max) = (96028.822, 97094.999, 97996.094), stdev = 946.203
[info]   CI (99.9%): [93451.507, 100738.490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3374.826 ±(99.9%) 126.434 MB/sec [Average]
[info]   (min, avg, max) = (3338.332, 3374.826, 3405.606), stdev = 32.834
[info]   CI (99.9%): [3248.392, 3501.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   54704.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (54704.004, 54704.004, 54704.005), stdev = 0.001
[info]   CI (99.9%): [54704.004, 54704.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.003 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.012 ±(99.9%) 0.044 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.024), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   3407.208 ±(99.9%) 2.195 MB/sec [Average]
[info]   (min, avg, max) = (3406.621, 3407.208, 3408.086), stdev = 0.570
[info]   CI (99.9%): [3405.012, 3409.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   55233.086 ±(99.9%) 2072.343 B/op [Average]
[info]   (min, avg, max) = (54720.313, 55233.086, 55836.287), stdev = 538.181
[info]   CI (99.9%): [53160.743, 57305.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.600, 14.000), stdev = 3.578
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 98.82% complete, ETA 00:01:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 259535.388 ops/s
[info] # Warmup Iteration   2: 315073.930 ops/s
[info] # Warmup Iteration   3: 324493.476 ops/s
[info] # Warmup Iteration   4: 328375.851 ops/s
[info] # Warmup Iteration   5: 324630.175 ops/s
[info] Iteration   1: 323202.050 ops/s
[info]                  ·gc.alloc.rate:            507.748 MB/sec
[info]                  ·gc.alloc.rate.norm:       2472.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.267 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3302.183 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 326381.751 ops/s
[info]                  ·gc.alloc.rate:            512.786 MB/sec
[info]                  ·gc.alloc.rate.norm:       2472.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.347 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3270.124 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 327180.552 ops/s
[info]                  ·gc.alloc.rate:      513.842 MB/sec
[info]                  ·gc.alloc.rate.norm: 2472.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 326618.276 ops/s
[info]                  ·gc.alloc.rate:            512.897 MB/sec
[info]                  ·gc.alloc.rate.norm:       2472.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.959 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3267.552 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 326318.828 ops/s
[info]                  ·gc.alloc.rate:                   512.494 MB/sec
[info]                  ·gc.alloc.rate.norm:              2472.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             677.404 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3267.443 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.213 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce":
[info]   325940.291 ±(99.9%) 6037.673 ops/s [Average]
[info]   (min, avg, max) = (323202.050, 325940.291, 327180.552), stdev = 1567.964
[info]   CI (99.9%): [319902.619, 331977.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   511.953 ±(99.9%) 9.259 MB/sec [Average]
[info]   (min, avg, max) = (507.748, 511.953, 513.842), stdev = 2.404
[info]   CI (99.9%): [502.695, 521.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2472.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2472.001, 2472.001, 2472.001), stdev = 0.001
[info]   CI (99.9%): [2472.001, 2472.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   542.396 ±(99.9%) 1167.548 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 542.396, 678.347), stdev = 303.209
[info]   CI (99.9%): [≈ 0, 1709.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2621.460 ±(99.9%) 5643.174 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2621.460, 3302.183), stdev = 1465.514
[info]   CI (99.9%): [≈ 0, 8264.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   0.643 ±(99.9%) 5.533 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.643, 3.213), stdev = 1.437
[info]   CI (99.9%): [≈ 0, 6.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 4.000), stdev = 1.732
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 99.06% complete, ETA 00:01:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 371565.956 ops/s
[info] # Warmup Iteration   2: 640343.089 ops/s
[info] # Warmup Iteration   3: 647138.857 ops/s
[info] # Warmup Iteration   4: 643703.194 ops/s
[info] # Warmup Iteration   5: 628360.390 ops/s
[info] Iteration   1: 642224.862 ops/s
[info]                  ·gc.alloc.rate:            489.630 MB/sec
[info]                  ·gc.alloc.rate.norm:       1200.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.722 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1658.532 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 628111.776 ops/s
[info]                  ·gc.alloc.rate:      478.921 MB/sec
[info]                  ·gc.alloc.rate.norm: 1200.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 641895.457 ops/s
[info]                  ·gc.alloc.rate:            489.370 MB/sec
[info]                  ·gc.alloc.rate.norm:       1200.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.705 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1659.372 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 633483.120 ops/s
[info]                  ·gc.alloc.rate:                   483.106 MB/sec
[info]                  ·gc.alloc.rate.norm:              1200.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.912 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1681.402 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.655 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 644109.541 ops/s
[info]                  ·gc.alloc.rate:      491.049 MB/sec
[info]                  ·gc.alloc.rate.norm: 1200.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala":
[info]   637964.951 ±(99.9%) 26435.418 ops/s [Average]
[info]   (min, avg, max) = (628111.776, 637964.951, 644109.541), stdev = 6865.194
[info]   CI (99.9%): [611529.533, 664400.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   486.415 ±(99.9%) 19.976 MB/sec [Average]
[info]   (min, avg, max) = (478.921, 486.415, 491.049), stdev = 5.188
[info]   CI (99.9%): [466.440, 506.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1200.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1200.001, 1200.001, 1200.001), stdev = 0.001
[info]   CI (99.9%): [1200.001, 1200.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   406.068 ±(99.9%) 1427.386 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 406.068, 676.912), stdev = 370.688
[info]   CI (99.9%): [≈ 0, 1833.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   999.861 ±(99.9%) 3514.831 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 999.861, 1681.402), stdev = 912.790
[info]   CI (99.9%): [≈ 0, 4514.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.331 ±(99.9%) 2.850 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.331, 1.655), stdev = 0.740
[info]   CI (99.9%): [≈ 0, 3.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 5.000), stdev = 2.588
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 99.29% complete, ETA 00:00:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1736937.329 ops/s
[info] # Warmup Iteration   2: 1912205.723 ops/s
[info] # Warmup Iteration   3: 1973200.422 ops/s
[info] # Warmup Iteration   4: 1950499.035 ops/s
[info] # Warmup Iteration   5: 1989447.519 ops/s
[info] Iteration   1: 1990611.288 ops/s
[info]                  ·gc.alloc.rate:            920.563 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.957 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 536.143 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 1995346.507 ops/s
[info]                  ·gc.alloc.rate:                   923.247 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1356.015 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1069.247 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.525 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 1991021.331 ops/s
[info]                  ·gc.alloc.rate:            920.828 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.362 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 535.518 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 1983581.029 ops/s
[info]                  ·gc.alloc.rate:            917.414 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.777 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1075.062 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 1995072.824 ops/s
[info]                  ·gc.alloc.rate:            922.796 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.399 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 534.405 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala":
[info]   1991126.596 ±(99.9%) 18325.239 ops/s [Average]
[info]   (min, avg, max) = (1983581.029, 1991126.596, 1995346.507), stdev = 4759.006
[info]   CI (99.9%): [1972801.356, 2009451.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   920.970 ±(99.9%) 8.896 MB/sec [Average]
[info]   (min, avg, max) = (917.414, 920.970, 923.247), stdev = 2.310
[info]   CI (99.9%): [912.073, 929.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   728.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (728.000, 728.000, 728.000), stdev = 0.001
[info]   CI (99.9%): [728.000, 728.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   948.702 ±(99.9%) 1429.587 MB/sec [Average]
[info]   (min, avg, max) = (677.362, 948.702, 1356.015), stdev = 371.259
[info]   CI (99.9%): [≈ 0, 2378.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   750.075 ±(99.9%) 1132.186 B/op [Average]
[info]   (min, avg, max) = (534.405, 750.075, 1075.062), stdev = 294.025
[info]   CI (99.9%): [≈ 0, 1882.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.105 ±(99.9%) 0.905 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.105, 0.525), stdev = 0.235
[info]   CI (99.9%): [≈ 0, 1.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 7.000), stdev = 1.643
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 99.53% complete, ETA 00:00:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1907172.796 ops/s
[info] # Warmup Iteration   2: 2104904.787 ops/s
[info] # Warmup Iteration   3: 2110715.440 ops/s
[info] # Warmup Iteration   4: 2110612.593 ops/s
[info] # Warmup Iteration   5: 2107890.907 ops/s
[info] Iteration   1: 2103386.970 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2103803.295 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2104118.616 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2102628.842 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2104452.314 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2103678.007 ±(99.9%) 2719.298 ops/s [Average]
[info]   (min, avg, max) = (2102628.842, 2103678.007, 2104452.314), stdev = 706.193
[info]   CI (99.9%): [2100958.709, 2106397.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 99.76% complete, ETA 00:00:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 261486.814 ops/s
[info] # Warmup Iteration   2: 333078.990 ops/s
[info] # Warmup Iteration   3: 343262.769 ops/s
[info] # Warmup Iteration   4: 344576.666 ops/s
[info] # Warmup Iteration   5: 335720.677 ops/s
[info] Iteration   1: 342605.059 ops/s
[info]                  ·gc.alloc.rate:            506.704 MB/sec
[info]                  ·gc.alloc.rate.norm:       2328.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.355 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3112.037 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 342542.232 ops/s
[info]                  ·gc.alloc.rate:            506.734 MB/sec
[info]                  ·gc.alloc.rate.norm:       2328.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.535 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3112.682 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 343867.013 ops/s
[info]                  ·gc.alloc.rate:      508.555 MB/sec
[info]                  ·gc.alloc.rate.norm: 2328.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 343614.773 ops/s
[info]                  ·gc.alloc.rate:            508.277 MB/sec
[info]                  ·gc.alloc.rate.norm:       2328.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.462 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3102.901 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 343309.627 ops/s
[info]                  ·gc.alloc.rate:            507.854 MB/sec
[info]                  ·gc.alloc.rate.norm:       2328.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.499 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3105.657 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson":
[info]   343187.741 ±(99.9%) 2290.100 ops/s [Average]
[info]   (min, avg, max) = (342542.232, 343187.741, 343867.013), stdev = 594.732
[info]   CI (99.9%): [340897.641, 345477.841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   507.625 ±(99.9%) 3.325 MB/sec [Average]
[info]   (min, avg, max) = (506.704, 507.625, 508.555), stdev = 0.863
[info]   CI (99.9%): [504.300, 510.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2328.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2328.001, 2328.001, 2328.001), stdev = 0.001
[info]   CI (99.9%): [2328.001, 2328.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   541.970 ±(99.9%) 1166.632 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 541.970, 677.535), stdev = 302.971
[info]   CI (99.9%): [≈ 0, 1708.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   2486.655 ±(99.9%) 5352.737 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2486.655, 3112.682), stdev = 1390.089
[info]   CI (99.9%): [≈ 0, 7839.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.400, 5.000), stdev = 1.949
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # Run complete. Total time: 01:53:12
[info] REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
[info] why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
[info] experiments, perform baseline and negative tests that provide experimental control, make sure
[info] the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
[info] Do not assume the numbers tell you what you want them to tell.
[info] Benchmark                                                                                                     (size)   Mode  Cnt         Score         Error   Units
[info] AdtBenchmark.readCirce                                                                                           N/A  thrpt    5    657060.736 ±   22207.649   ops/s
[info] AdtBenchmark.readCirce:·gc.alloc.rate                                                                            N/A  thrpt    5      1746.806 ±      58.302  MB/sec
[info] AdtBenchmark.readCirce:·gc.alloc.rate.norm                                                                       N/A  thrpt    5      4184.001 ±       0.001    B/op
[info] AdtBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                                N/A  thrpt    5         0.031 ±       0.270  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                           N/A  thrpt    5         0.075 ±       0.643    B/op
[info] AdtBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                                      N/A  thrpt    5      1768.556 ±    1437.625  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                                 N/A  thrpt    5      4238.528 ±    3492.224    B/op
[info] AdtBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                               N/A  thrpt    5         0.666 ±       5.735  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                                          N/A  thrpt    5         1.597 ±      13.746    B/op
[info] AdtBenchmark.readCirce:·gc.count                                                                                 N/A  thrpt    5        13.000                counts
[info] AdtBenchmark.readCirce:·gc.time                                                                                  N/A  thrpt    5        31.000                    ms
[info] AdtBenchmark.readJacksonScala                                                                                    N/A  thrpt    5   1439702.554 ±   78227.250   ops/s
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate                                                                     N/A  thrpt    5      1024.491 ±      55.555  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                                N/A  thrpt    5      1120.000 ±       0.001    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                               N/A  thrpt    5       947.652 ±    1427.289  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                          N/A  thrpt    5      1034.794 ±    1541.813    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                                        N/A  thrpt    5         0.133 ±       1.147  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                                   N/A  thrpt    5         0.144 ±       1.241    B/op
[info] AdtBenchmark.readJacksonScala:·gc.count                                                                          N/A  thrpt    5         7.000                counts
[info] AdtBenchmark.readJacksonScala:·gc.time                                                                           N/A  thrpt    5        33.000                    ms
[info] AdtBenchmark.readJsoniterScala                                                                                   N/A  thrpt    5   3288624.170 ±   46391.286   ops/s
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate                                                                    N/A  thrpt    5       217.277 ±       3.072  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                               N/A  thrpt    5       104.000 ±       0.001    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                              N/A  thrpt    5       271.334 ±    1430.667  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                         N/A  thrpt    5       130.171 ±     686.355    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.count                                                                         N/A  thrpt    5         2.000                counts
[info] AdtBenchmark.readJsoniterScala:·gc.time                                                                          N/A  thrpt    5         6.000                    ms
[info] AdtBenchmark.readPlayJson                                                                                        N/A  thrpt    5    157141.385 ±   10405.089   ops/s
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate                                                                         N/A  thrpt    5      1331.390 ±      88.153  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate.norm                                                                    N/A  thrpt    5     13336.003 ±       0.001    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                             N/A  thrpt    5         0.008 ±       0.073  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                        N/A  thrpt    5         0.085 ±       0.735    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                                   N/A  thrpt    5      1356.359 ±      15.886  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                              N/A  thrpt    5     13589.306 ±     910.066    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                            N/A  thrpt    5         1.066 ±       7.823  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                                       N/A  thrpt    5        10.524 ±      76.847    B/op
[info] AdtBenchmark.readPlayJson:·gc.count                                                                              N/A  thrpt    5        10.000                counts
[info] AdtBenchmark.readPlayJson:·gc.time                                                                               N/A  thrpt    5        41.000                    ms
[info] AdtBenchmark.writeCirce                                                                                          N/A  thrpt    5    557713.279 ±   30549.253   ops/s
[info] AdtBenchmark.writeCirce:·gc.alloc.rate                                                                           N/A  thrpt    5      1633.033 ±      90.067  MB/sec
[info] AdtBenchmark.writeCirce:·gc.alloc.rate.norm                                                                      N/A  thrpt    5      4608.001 ±       0.001    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                               N/A  thrpt    5         0.031 ±       0.170  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                          N/A  thrpt    5         0.089 ±       0.479    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                                     N/A  thrpt    5      1631.648 ±    1433.445  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                                N/A  thrpt    5      4600.753 ±    3957.525    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                              N/A  thrpt    5         0.666 ±       5.736  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                                         N/A  thrpt    5         1.912 ±      16.459    B/op
[info] AdtBenchmark.writeCirce:·gc.count                                                                                N/A  thrpt    5        12.000                counts
[info] AdtBenchmark.writeCirce:·gc.time                                                                                 N/A  thrpt    5        37.000                    ms
[info] AdtBenchmark.writeJacksonScala                                                                                   N/A  thrpt    5   1689763.588 ±  114385.315   ops/s
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate                                                                    N/A  thrpt    5       704.269 ±      47.280  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                               N/A  thrpt    5       656.000 ±       0.001    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                              N/A  thrpt    5       676.759 ±       0.472  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                         N/A  thrpt    5       630.534 ±      43.710    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.count                                                                         N/A  thrpt    5         5.000                counts
[info] AdtBenchmark.writeJacksonScala:·gc.time                                                                          N/A  thrpt    5        24.000                    ms
[info] AdtBenchmark.writeJsoniterScala                                                                                  N/A  thrpt    5   5984584.884 ±  443725.172   ops/s
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate                                                                   N/A  thrpt    5       304.184 ±      22.508  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                              N/A  thrpt    5        80.000 ±       0.001    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                             N/A  thrpt    5       271.094 ±    1429.402  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                        N/A  thrpt    5        71.774 ±     378.527    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                                      N/A  thrpt    5         0.133 ±       1.147  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                                 N/A  thrpt    5         0.036 ±       0.309    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.count                                                                        N/A  thrpt    5         2.000                counts
[info] AdtBenchmark.writeJsoniterScala:·gc.time                                                                         N/A  thrpt    5         8.000                    ms
[info] AdtBenchmark.writeJsoniterScalaPrealloc                                                                          N/A  thrpt    5   7474127.624 ±   43555.216   ops/s
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                           N/A  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                                      N/A  thrpt    5        ≈ 10⁻⁴                  B/op
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                                N/A  thrpt    5           ≈ 0                counts
[info] AdtBenchmark.writePlayJson                                                                                       N/A  thrpt    5    299482.944 ±    5114.056   ops/s
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate                                                                        N/A  thrpt    5       969.694 ±      16.615  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate.norm                                                                   N/A  thrpt    5      5096.001 ±       0.001    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                                  N/A  thrpt    5      1083.269 ±    1428.916  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                             N/A  thrpt    5      5698.588 ±    7578.962    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                           N/A  thrpt    5         0.400 ±       1.405  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                                      N/A  thrpt    5         2.099 ±       7.378    B/op
[info] AdtBenchmark.writePlayJson:·gc.count                                                                             N/A  thrpt    5         8.000                counts
[info] AdtBenchmark.writePlayJson:·gc.time                                                                              N/A  thrpt    5        39.000                    ms
[info] AnyRefsBenchmark.readCirce                                                                                       N/A  thrpt    5   1507691.645 ±   59993.342   ops/s
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate                                                                        N/A  thrpt    5      2329.673 ±      92.447  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm                                                                   N/A  thrpt    5      2432.000 ±       0.001    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                            N/A  thrpt    5         0.019 ±       0.152  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                       N/A  thrpt    5         0.020 ±       0.160    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                                  N/A  thrpt    5      2316.220 ±    1432.648  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                             N/A  thrpt    5      2417.928 ±    1492.247    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                           N/A  thrpt    5         0.666 ±       5.735  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                                      N/A  thrpt    5         0.704 ±       6.065    B/op
[info] AnyRefsBenchmark.readCirce:·gc.count                                                                             N/A  thrpt    5        17.000                counts
[info] AnyRefsBenchmark.readCirce:·gc.time                                                                              N/A  thrpt    5        28.000                    ms
[info] AnyRefsBenchmark.readDslJsonJava                                                                                 N/A  thrpt    5   9420554.518 ±  440575.753   ops/s
[info] AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate                                                                  N/A  thrpt    5      1149.135 ±      53.646  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                             N/A  thrpt    5       192.000 ±       0.001    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                            N/A  thrpt    5      1214.523 ±    1161.892  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                       N/A  thrpt    5       202.922 ±     194.093    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space                                                     N/A  thrpt    5         0.799 ±       6.882  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                                N/A  thrpt    5         0.132 ±       1.135    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.count                                                                       N/A  thrpt    5         9.000                counts
[info] AnyRefsBenchmark.readDslJsonJava:·gc.time                                                                        N/A  thrpt    5        47.000                    ms
[info] AnyRefsBenchmark.readJacksonScala                                                                                N/A  thrpt    5   2179822.763 ±  100916.209   ops/s
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate                                                                 N/A  thrpt    5      1529.038 ±      71.151  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                            N/A  thrpt    5      1104.000 ±       0.001    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                     N/A  thrpt    5         0.037 ±       0.305  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                N/A  thrpt    5         0.026 ±       0.218    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                           N/A  thrpt    5      1630.313 ±    1432.552  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                      N/A  thrpt    5      1176.918 ±    1027.659    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                                    N/A  thrpt    5         1.066 ±       7.822  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                               N/A  thrpt    5         0.783 ±       5.763    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.count                                                                      N/A  thrpt    5        12.000                counts
[info] AnyRefsBenchmark.readJacksonScala:·gc.time                                                                       N/A  thrpt    5        37.000                    ms
[info] AnyRefsBenchmark.readJsoniterScala                                                                               N/A  thrpt    5   9927679.885 ± 1031560.872   ops/s
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate                                                                N/A  thrpt    5      1261.535 ±     131.213  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                           N/A  thrpt    5       200.000 ±       0.001    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                    N/A  thrpt    5         0.023 ±       0.198  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                               N/A  thrpt    5         0.004 ±       0.033    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                          N/A  thrpt    5      1221.919 ±    1170.278  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                     N/A  thrpt    5       194.321 ±     193.102    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                                   N/A  thrpt    5         0.666 ±       5.736  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                              N/A  thrpt    5         0.106 ±       0.914    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.count                                                                     N/A  thrpt    5         9.000                counts
[info] AnyRefsBenchmark.readJsoniterScala:·gc.time                                                                      N/A  thrpt    5        26.000                    ms
[info] AnyRefsBenchmark.readPlayJson                                                                                    N/A  thrpt    5    617079.956 ±   25821.592   ops/s
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate                                                                     N/A  thrpt    5      1586.985 ±      66.221  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                                N/A  thrpt    5      4048.001 ±       0.001    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                         N/A  thrpt    5         0.028 ±       0.207  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                    N/A  thrpt    5         0.072 ±       0.535    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                               N/A  thrpt    5      1629.867 ±    1424.431  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                          N/A  thrpt    5      4159.787 ±    3683.461    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                        N/A  thrpt    5         0.932 ±       6.687  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                                   N/A  thrpt    5         2.396 ±      17.252    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.count                                                                          N/A  thrpt    5        12.000                counts
[info] AnyRefsBenchmark.readPlayJson:·gc.time                                                                           N/A  thrpt    5        38.000                    ms
[info] AnyRefsBenchmark.writeCirce                                                                                      N/A  thrpt    5   1658493.735 ±   22122.375   ops/s
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate                                                                       N/A  thrpt    5      1441.378 ±      19.195  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm                                                                  N/A  thrpt    5      1368.000 ±       0.001    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                           N/A  thrpt    5         0.039 ±       0.328  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                      N/A  thrpt    5         0.037 ±       0.310    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                                 N/A  thrpt    5      1494.224 ±    1176.570  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                            N/A  thrpt    5      1417.887 ±    1108.416    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                          N/A  thrpt    5         0.799 ±       5.560  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                                     N/A  thrpt    5         0.758 ±       5.266    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.count                                                                            N/A  thrpt    5        11.000                counts
[info] AnyRefsBenchmark.writeCirce:·gc.time                                                                             N/A  thrpt    5        33.000                    ms
[info] AnyRefsBenchmark.writeDslJsonJava                                                                                N/A  thrpt    5  16588970.149 ±  679427.598   ops/s
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                                 N/A  thrpt    5       505.893 ±      20.705  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                            N/A  thrpt    5        48.000 ±       0.001    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                                           N/A  thrpt    5       404.843 ±    1423.081  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                      N/A  thrpt    5        38.644 ±     135.849    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.count                                                                      N/A  thrpt    5         3.000                counts
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.time                                                                       N/A  thrpt    5        17.000                    ms
[info] AnyRefsBenchmark.writeJacksonScala                                                                               N/A  thrpt    5   4981762.736 ±   46190.588   ops/s
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate                                                                N/A  thrpt    5      1367.366 ±      12.805  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                           N/A  thrpt    5       432.000 ±       0.001    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                    N/A  thrpt    5         0.035 ±       0.304  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                               N/A  thrpt    5         0.011 ±       0.096    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                          N/A  thrpt    5      1356.191 ±      15.337  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                     N/A  thrpt    5       428.474 ±       8.531    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                                   N/A  thrpt    5         0.932 ±       8.029  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                              N/A  thrpt    5         0.295 ±       2.544    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.count                                                                     N/A  thrpt    5        10.000                counts
[info] AnyRefsBenchmark.writeJacksonScala:·gc.time                                                                      N/A  thrpt    5        38.000                    ms
[info] AnyRefsBenchmark.writeJsoniterScala                                                                              N/A  thrpt    5  21236726.331 ±  622389.606   ops/s
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                               N/A  thrpt    5       647.645 ±      19.164  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                          N/A  thrpt    5        48.000 ±       0.001    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                         N/A  thrpt    5       677.547 ±       1.098  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                    N/A  thrpt    5        50.219 ±       1.504    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                                  N/A  thrpt    5         0.133 ±       1.147  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                             N/A  thrpt    5         0.010 ±       0.085    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.count                                                                    N/A  thrpt    5         5.000                counts
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.time                                                                     N/A  thrpt    5        17.000                    ms
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc                                                                      N/A  thrpt    5  20662473.919 ±  158045.259   ops/s
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                       N/A  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                                  N/A  thrpt    5        ≈ 10⁻⁵                  B/op
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                            N/A  thrpt    5           ≈ 0                counts
[info] AnyRefsBenchmark.writePlayJson                                                                                   N/A  thrpt    5   1249591.930 ±   41347.946   ops/s
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate                                                                    N/A  thrpt    5      1848.217 ±      61.285  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                               N/A  thrpt    5      2328.000 ±       0.001    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                        N/A  thrpt    5         0.040 ±       0.325  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                   N/A  thrpt    5         0.050 ±       0.410    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                              N/A  thrpt    5      1904.214 ±    1176.201  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                         N/A  thrpt    5      2397.768 ±    1462.047    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                       N/A  thrpt    5         0.932 ±       8.028  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                                  N/A  thrpt    5         1.180 ±      10.164    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.count                                                                         N/A  thrpt    5        14.000                counts
[info] AnyRefsBenchmark.writePlayJson:·gc.time                                                                          N/A  thrpt    5        33.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readCirce                                                                         128  thrpt    5    357467.823 ±   12899.837   ops/s
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                          128  thrpt    5      1967.706 ±      71.480  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                                     128  thrpt    5      8664.001 ±       0.001    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                              128  thrpt    5         0.017 ±       0.137  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         128  thrpt    5         0.076 ±       0.600    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                    128  thrpt    5      1906.681 ±    1185.463  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5      8385.815 ±    4984.946    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         0.666 ±       5.734  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5         2.981 ±      25.671    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.count                                                               128  thrpt    5        14.000                counts
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.time                                                                128  thrpt    5        29.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala                                                                  128  thrpt    5    432132.823 ±   15138.660   ops/s
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                                   128  thrpt    5       575.459 ±      19.871  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                              128  thrpt    5      2096.001 ±       0.001    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                             128  thrpt    5       676.732 ±       0.432  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                        128  thrpt    5      2465.031 ±      87.328    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                      128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                 128  thrpt    5         0.483 ±       4.155    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.count                                                        128  thrpt    5         5.000                counts
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.time                                                         128  thrpt    5        24.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala                                                                 128  thrpt    5    983535.172 ±    5557.865   ops/s
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                                  128  thrpt    5       654.923 ±       3.786  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                             128  thrpt    5      1048.000 ±       0.001    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                            128  thrpt    5       678.159 ±       0.369  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                       128  thrpt    5      1085.185 ±       6.130    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.count                                                       128  thrpt    5         5.000                counts
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.time                                                        128  thrpt    5        16.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readPlayJson                                                                      128  thrpt    5     98749.811 ±    4287.350   ops/s
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                       128  thrpt    5      3419.003 ±     149.506  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                                  128  thrpt    5     54496.004 ±       0.001    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                           128  thrpt    5         0.002 ±       0.004  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      128  thrpt    5         0.025 ±       0.071    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                 128  thrpt    5      3407.010 ±       2.130  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5     54310.416 ±    2359.290    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.count                                                            128  thrpt    5        25.000                counts
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.time                                                             128  thrpt    5        42.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeCirce                                                                        128  thrpt    5    333881.768 ±    6204.445   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                         128  thrpt    5       510.852 ±       9.516  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                                    128  thrpt    5      2408.001 ±       0.001    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       542.466 ±    1167.700  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5      2560.350 ±    5511.565    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.count                                                              128  thrpt    5         4.000                counts
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.time                                                               128  thrpt    5        15.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala                                                                 128  thrpt    5    538179.280 ±   48540.445   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                                  128  thrpt    5       396.640 ±      35.754  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                             128  thrpt    5      1160.001 ±       0.001    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                            128  thrpt    5       406.186 ±    1427.801  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                       128  thrpt    5      1181.201 ±    4153.098    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                     128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                128  thrpt    5         0.395 ±       3.403    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.count                                                       128  thrpt    5         3.000                counts
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.time                                                        128  thrpt    5        14.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala                                                                128  thrpt    5   2737268.821 ±  111328.102   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                                 128  thrpt    5      1266.088 ±      51.573  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                            128  thrpt    5       728.000 ±       0.001    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                     128  thrpt    5         0.036 ±       0.308  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                128  thrpt    5         0.021 ±       0.179    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                           128  thrpt    5      1221.245 ±    1169.356  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                      128  thrpt    5       703.630 ±     690.041    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                    128  thrpt    5         1.066 ±       6.440  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                               128  thrpt    5         0.613 ±       3.695    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.count                                                      128  thrpt    5         9.000                counts
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.time                                                       128  thrpt    5        30.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                        128  thrpt    5   3007345.568 ±    3518.961   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                         128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                    128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                              128  thrpt    5           ≈ 0                counts
[info] ArrayBufferOfBooleansBenchmark.writePlayJson                                                                     128  thrpt    5    410660.912 ±    4843.365   ops/s
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                                      128  thrpt    5       590.730 ±       7.197  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                                 128  thrpt    5      2264.001 ±       0.001    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                128  thrpt    5       541.942 ±    1166.572  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5      2078.746 ±    4474.726    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.count                                                           128  thrpt    5         4.000                counts
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.time                                                            128  thrpt    5        16.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readCirce                                                                            128  thrpt    5     19162.428 ±     756.481   ops/s
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate                                                             128  thrpt    5      1223.980 ±      48.210  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm                                                        128  thrpt    5    100512.036 ±       0.123    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                 128  thrpt    5         0.006 ±       0.053  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                            128  thrpt    5         0.513 ±       4.418    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                       128  thrpt    5      1221.443 ±    1169.224  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5    100313.530 ±   96144.498    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                128  thrpt    5         0.666 ±       5.736  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                           128  thrpt    5        55.023 ±     473.766    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.count                                                                  128  thrpt    5         9.000                counts
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.time                                                                   128  thrpt    5        31.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala                                                                     128  thrpt    5     34576.587 ±     976.355   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate                                                      128  thrpt    5       866.768 ±      24.578  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                 128  thrpt    5     39456.012 ±       0.001    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5       948.338 ±    1428.588  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5     43268.156 ±   66400.281    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count                                                           128  thrpt    5         7.000                counts
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time                                                            128  thrpt    5        32.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala                                                                    128  thrpt    5     41622.799 ±    2724.969   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate                                                     128  thrpt    5       559.154 ±      36.679  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                128  thrpt    5     21144.010 ±       0.001    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5       542.442 ±    1167.648  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5     20580.317 ±   44328.170    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count                                                          128  thrpt    5         4.000                counts
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time                                                           128  thrpt    5        13.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readPlayJson                                                                         128  thrpt    5     24789.766 ±     250.912   ops/s
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate                                                          128  thrpt    5      1313.490 ±      13.377  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                     128  thrpt    5     83400.017 ±       0.003    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                              128  thrpt    5         0.020 ±       0.135  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         128  thrpt    5         1.283 ±       8.579    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                    128  thrpt    5      1356.978 ±      14.408  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5     86161.290 ±     324.572    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         0.933 ±       6.689  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5        59.194 ±     424.500    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count                                                               128  thrpt    5        10.000                counts
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time                                                                128  thrpt    5        36.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeCirce                                                                           128  thrpt    5     28431.903 ±    1161.200   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate                                                            128  thrpt    5      1615.227 ±      65.996  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm                                                       128  thrpt    5     89408.015 ±       0.002    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                128  thrpt    5         0.032 ±       0.259  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           128  thrpt    5         1.783 ±      14.492    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                      128  thrpt    5      1631.344 ±    1427.797  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5     90439.747 ±   82089.454    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                               128  thrpt    5         0.799 ±       5.560  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                          128  thrpt    5        44.628 ±     310.663    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count                                                                 128  thrpt    5        12.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time                                                                  128  thrpt    5        34.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala                                                                    128  thrpt    5     28538.941 ±     855.266   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate                                                     128  thrpt    5      1563.227 ±      46.542  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                128  thrpt    5     86208.015 ±       0.002    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                         128  thrpt    5         0.008 ±       0.050  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    128  thrpt    5         0.462 ±       2.759    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5      1494.668 ±    1174.576  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5     82439.862 ±   65089.928    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                        128  thrpt    5         0.933 ±       6.688  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                   128  thrpt    5        51.459 ±     369.376    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count                                                          128  thrpt    5        11.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time                                                           128  thrpt    5        34.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala                                                                   128  thrpt    5     30906.469 ±     340.202   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                    128  thrpt    5      1594.996 ±      17.944  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                               128  thrpt    5     81224.013 ±       0.002    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                        128  thrpt    5         0.033 ±       0.282  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   128  thrpt    5         1.682 ±      14.331    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                              128  thrpt    5      1495.129 ±    1173.277  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5     76135.572 ±   59657.215    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                       128  thrpt    5         0.799 ±       6.882  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                  128  thrpt    5        40.685 ±     350.306    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count                                                         128  thrpt    5        11.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time                                                          128  thrpt    5        25.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc                                                           128  thrpt    5     30933.702 ±     277.095   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                            128  thrpt    5      1536.223 ±      14.023  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                       128  thrpt    5     78168.013 ±       0.001    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'                128  thrpt    5         0.034 ±       0.191  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           128  thrpt    5         1.743 ±       9.687    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                                      128  thrpt    5      1630.842 ±    1432.061  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                                 128  thrpt    5     83001.049 ±   73285.616    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space                               128  thrpt    5         0.932 ±       6.688  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm                          128  thrpt    5        47.450 ±     340.096    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                 128  thrpt    5        12.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                                  128  thrpt    5        30.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writePlayJson                                                                        128  thrpt    5      8156.279 ±     309.560   ops/s
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate                                                         128  thrpt    5      1061.182 ±      39.764  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                    128  thrpt    5    204776.052 ±       0.008    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       948.328 ±    1428.455  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5    182888.346 ±  273963.311    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count                                                              128  thrpt    5         7.000                counts
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time                                                               128  thrpt    5        30.000                    ms
[info] ArrayOfBigIntsBenchmark.readCirce                                                                                128  thrpt    5     19621.561 ±     214.133   ops/s
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate                                                                 128  thrpt    5      1524.510 ±      16.179  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm                                                            128  thrpt    5    122287.860 ±       1.389    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                     128  thrpt    5         0.024 ±       0.152  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                128  thrpt    5         1.940 ±      12.139    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                           128  thrpt    5      1495.145 ±    1161.317  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                      128  thrpt    5    119971.175 ±   94316.904    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                    128  thrpt    5         0.666 ±       5.735  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                               128  thrpt    5        53.306 ±     458.978    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.count                                                                      128  thrpt    5        11.000                counts
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.time                                                                       128  thrpt    5        27.000                    ms
[info] ArrayOfBigIntsBenchmark.readJacksonScala                                                                         128  thrpt    5     40005.129 ±     372.662   ops/s
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate                                                          128  thrpt    5       986.724 ±       9.248  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                     128  thrpt    5     38824.011 ±       0.002    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5      1083.516 ±    1427.698  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5     42658.132 ±   56489.095    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         0.266 ±       1.405  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5        10.497 ±      55.348    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count                                                               128  thrpt    5         8.000                counts
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time                                                                128  thrpt    5        35.000                    ms
[info] ArrayOfBigIntsBenchmark.readJsoniterScala                                                                        128  thrpt    5     56496.218 ±     186.503   ops/s
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                                         128  thrpt    5       729.907 ±       2.323  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                    128  thrpt    5     20336.007 ±       0.001    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       678.020 ±       0.134  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5     18890.397 ±      62.501    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count                                                              128  thrpt    5         5.000                counts
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time                                                               128  thrpt    5        17.000                    ms
[info] ArrayOfBigIntsBenchmark.readPlayJson                                                                             128  thrpt    5     29502.058 ±     174.364   ops/s
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate                                                              128  thrpt    5      1970.828 ±      12.846  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                         128  thrpt    5    105128.014 ±       0.002    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  128  thrpt    5         0.014 ±       0.095  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             128  thrpt    5         0.760 ±       5.044    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                        128  thrpt    5      1906.461 ±    1189.208  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5    101676.198 ±   63003.790    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                 128  thrpt    5         0.932 ±       8.028  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                            128  thrpt    5        49.863 ±     429.332    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.count                                                                   128  thrpt    5        14.000                counts
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.time                                                                    128  thrpt    5        31.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJacksonScala                                                                        128  thrpt    5     32625.335 ±     744.889   ops/s
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                                         128  thrpt    5      1847.672 ±      42.109  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                    128  thrpt    5     89144.013 ±       0.002    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                             128  thrpt    5         0.008 ±       0.046  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        128  thrpt    5         0.390 ±       2.237    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                   128  thrpt    5      1768.872 ±    1428.392  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5     85364.614 ±   69364.302    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         1.066 ±       9.176  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5        51.871 ±     446.627    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count                                                              128  thrpt    5        13.000                counts
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time                                                               128  thrpt    5        35.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala                                                                       128  thrpt    5     45616.256 ±    2113.269   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                        128  thrpt    5      1752.924 ±      81.697  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                   128  thrpt    5     60480.009 ±       0.002    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                            128  thrpt    5         0.020 ±       0.119  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       128  thrpt    5         0.714 ±       4.188    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                  128  thrpt    5      1768.583 ±    1433.270  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5     60973.770 ±   48371.261    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                           128  thrpt    5         0.799 ±       6.882  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                      128  thrpt    5        28.148 ±     242.361    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count                                                             128  thrpt    5        13.000                counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time                                                              128  thrpt    5        25.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc                                                               128  thrpt    5     46191.551 ±     766.009   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                128  thrpt    5      1694.428 ±      27.258  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                           128  thrpt    5     57736.009 ±       0.001    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'                    128  thrpt    5         0.016 ±       0.092  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               128  thrpt    5         0.560 ±       3.149    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                                          128  thrpt    5      1632.392 ±    1434.695  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                                     128  thrpt    5     55643.616 ±   49365.841    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space                                   128  thrpt    5         0.800 ±       6.884  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm                              128  thrpt    5        27.425 ±     236.133    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                     128  thrpt    5        12.000                counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                                      128  thrpt    5        25.000                    ms
[info] ArrayOfBooleansBenchmark.readCirce                                                                               128  thrpt    5    374702.949 ±    6075.235   ops/s
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                                128  thrpt    5      1895.186 ±      30.767  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                                           128  thrpt    5      7960.001 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                    128  thrpt    5         0.016 ±       0.103  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                               128  thrpt    5         0.066 ±       0.431    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                          128  thrpt    5      1906.136 ±    1168.931  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                     128  thrpt    5      8008.315 ±    4963.300    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                   128  thrpt    5         0.666 ±       5.737  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                              128  thrpt    5         2.814 ±      24.228    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.count                                                                     128  thrpt    5        14.000                counts
[info] ArrayOfBooleansBenchmark.readCirce:·gc.time                                                                      128  thrpt    5        24.000                    ms
[info] ArrayOfBooleansBenchmark.readDslJsonJava                                                                         128  thrpt    5   1484078.436 ±  131332.474   ops/s
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate                                                          128  thrpt    5       467.742 ±      41.535  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                     128  thrpt    5       496.000 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       539.889 ±    1162.153  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5       573.735 ±    1236.599    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.count                                                               128  thrpt    5         4.000                counts
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.time                                                                128  thrpt    5        21.000                    ms
[info] ArrayOfBooleansBenchmark.readJacksonScala                                                                        128  thrpt    5    592690.357 ±   14528.589   ops/s
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                                         128  thrpt    5       503.062 ±      12.303  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                    128  thrpt    5      1336.001 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       541.907 ±    1166.495  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5      1441.633 ±    3103.427    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.count                                                              128  thrpt    5         4.000                counts
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.time                                                               128  thrpt    5        18.000                    ms
[info] ArrayOfBooleansBenchmark.readJsoniterScala                                                                       128  thrpt    5   1734177.292 ±   68061.172   ops/s
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                                        128  thrpt    5       334.975 ±      13.222  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                   128  thrpt    5       304.000 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                  128  thrpt    5       271.294 ±    1430.454  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5       245.661 ±    1295.298    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count                                                             128  thrpt    5         2.000                counts
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time                                                              128  thrpt    5         8.000                    ms
[info] ArrayOfBooleansBenchmark.readPlayJson                                                                            128  thrpt    5     93006.310 ±    1366.345   ops/s
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                             128  thrpt    5      3378.679 ±      50.145  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                                        128  thrpt    5     57176.004 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                 128  thrpt    5         0.001 ±       0.004  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                            128  thrpt    5         0.017 ±       0.062    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                       128  thrpt    5      3407.229 ±       2.824  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5     57659.826 ±     846.493    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.count                                                                  128  thrpt    5        25.000                counts
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.time                                                                   128  thrpt    5        35.000                    ms
[info] ArrayOfBooleansBenchmark.writeCirce                                                                              128  thrpt    5    318422.464 ±   13181.758   ops/s
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                               128  thrpt    5       495.268 ±      20.644  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                                          128  thrpt    5      2448.001 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                         128  thrpt    5       542.498 ±    1167.767  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5      2685.119 ±    5781.508    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.count                                                                    128  thrpt    5         4.000                counts
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.time                                                                     128  thrpt    5        15.000                    ms
[info] ArrayOfBooleansBenchmark.writeDslJsonJava                                                                        128  thrpt    5   1222729.552 ±   66274.169   ops/s
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate                                                         128  thrpt    5       565.537 ±      30.503  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                    128  thrpt    5       728.000 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       539.774 ±    1161.904  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5       691.286 ±    1488.266    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.count                                                              128  thrpt    5         4.000                counts
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.time                                                               128  thrpt    5        20.000                    ms
[info] ArrayOfBooleansBenchmark.writeJacksonScala                                                                       128  thrpt    5    991997.636 ±   37458.948   ops/s
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                                        128  thrpt    5       700.784 ±      26.466  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                   128  thrpt    5      1112.000 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                  128  thrpt    5       812.698 ±    1166.857  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5      1289.688 ±    1852.228    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                           128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                      128  thrpt    5         0.210 ±       1.812    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count                                                             128  thrpt    5         6.000                counts
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time                                                              128  thrpt    5        26.000                    ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScala                                                                      128  thrpt    5   2452020.678 ±   87246.693   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                                       128  thrpt    5      1134.062 ±      40.181  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                  128  thrpt    5       728.000 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                 128  thrpt    5      1083.941 ±    1429.109  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5       695.720 ±     916.060    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                          128  thrpt    5         0.799 ±       6.882  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                     128  thrpt    5         0.511 ±       4.404    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count                                                            128  thrpt    5         8.000                counts
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time                                                             128  thrpt    5        29.000                    ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                              128  thrpt    5   1983989.704 ±    2329.025   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                               128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                          128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                    128  thrpt    5           ≈ 0                counts
[info] ArrayOfBooleansBenchmark.writePlayJson                                                                           128  thrpt    5    411469.516 ±    4037.861   ops/s
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                                            128  thrpt    5       481.038 ±       4.758  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                                       128  thrpt    5      1840.001 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                      128  thrpt    5       406.455 ±    1428.747  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5      1557.619 ±    5475.250    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.count                                                                 128  thrpt    5         3.000                counts
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.time                                                                  128  thrpt    5        13.000                    ms
[info] ArrayOfBytesBenchmark.readCirce                                                                                  128  thrpt    5    139981.598 ±    2507.899   ops/s
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate                                                                   128  thrpt    5      1682.734 ±      30.689  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm                                                              128  thrpt    5     18920.003 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                       128  thrpt    5         0.023 ±       0.128  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                  128  thrpt    5         0.261 ±       1.441    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                             128  thrpt    5      1632.883 ±    1435.627  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                        128  thrpt    5     18357.851 ±   16100.377    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                      128  thrpt    5         0.666 ±       5.736  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                                 128  thrpt    5         7.518 ±      64.732    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.count                                                                        128  thrpt    5        12.000                counts
[info] ArrayOfBytesBenchmark.readCirce:·gc.time                                                                         128  thrpt    5        24.000                    ms
[info] ArrayOfBytesBenchmark.readJacksonScala                                                                           128  thrpt    5    362785.745 ±    5995.324   ops/s
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate                                                            128  thrpt    5       307.943 ±       4.984  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                       128  thrpt    5      1336.001 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                      128  thrpt    5       270.989 ±    1428.845  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5      1180.988 ±    6227.009    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.count                                                                 128  thrpt    5         2.000                counts
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.time                                                                  128  thrpt    5        12.000                    ms
[info] ArrayOfBytesBenchmark.readJsoniterScala                                                                          128  thrpt    5    826322.300 ±   19286.971   ops/s
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate                                                           128  thrpt    5       159.593 ±       3.706  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                      128  thrpt    5       304.001 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       135.605 ±    1167.601  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5       257.132 ±    2213.987    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.count                                                                128  thrpt    5         1.000                counts
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.time                                                                 128  thrpt    5         3.000                    ms
[info] ArrayOfBytesBenchmark.readPlayJson                                                                               128  thrpt    5     78835.472 ±    2320.637   ops/s
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate                                                                128  thrpt    5      3358.165 ±      98.087  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                           128  thrpt    5     67048.005 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                    128  thrpt    5         0.006 ±       0.019  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                               128  thrpt    5         0.128 ±       0.376    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                          128  thrpt    5      3270.686 ±    1174.031  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                     128  thrpt    5     65318.467 ±   24145.877    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.count                                                                     128  thrpt    5        24.000                counts
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.time                                                                      128  thrpt    5        40.000                    ms
[info] ArrayOfBytesBenchmark.writeCirce                                                                                 128  thrpt    5    267717.397 ±    2876.311   ops/s
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate                                                                  128  thrpt    5      1185.499 ±      12.866  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm                                                             128  thrpt    5      6968.002 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                            128  thrpt    5      1084.485 ±    1428.373  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                       128  thrpt    5      6377.074 ±    8429.943    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                     128  thrpt    5         0.666 ±       5.736  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                                128  thrpt    5         3.915 ±      33.707    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.count                                                                       128  thrpt    5         8.000                counts
[info] ArrayOfBytesBenchmark.writeCirce:·gc.time                                                                        128  thrpt    5        32.000                    ms
[info] ArrayOfBytesBenchmark.writeJacksonScala                                                                          128  thrpt    5   1844785.742 ±   71914.453   ops/s
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate                                                           128  thrpt    5       946.965 ±      37.095  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                      128  thrpt    5       808.000 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       948.201 ±    1429.383  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5       808.536 ±    1211.867    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5         0.115 ±       0.990    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.count                                                                128  thrpt    5         7.000                counts
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.time                                                                 128  thrpt    5        31.000                    ms
[info] ArrayOfBytesBenchmark.writeJsoniterScala                                                                         128  thrpt    5   2167897.397 ±  104510.155   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate                                                          128  thrpt    5       583.944 ±      28.290  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                     128  thrpt    5       424.000 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       542.444 ±    1167.651  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5       392.855 ±     845.909    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count                                                               128  thrpt    5         4.000                counts
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time                                                                128  thrpt    5        14.000                    ms
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc                                                                 128  thrpt    5   2484383.910 ±  316008.777   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                  128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                             128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                       128  thrpt    5           ≈ 0                counts
[info] ArrayOfBytesBenchmark.writePlayJson                                                                              128  thrpt    5     39181.523 ±     748.747   ops/s
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate                                                               128  thrpt    5      1650.938 ±      31.292  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm                                                          128  thrpt    5     66320.010 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   128  thrpt    5         0.050 ±       0.397  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              128  thrpt    5         2.018 ±      15.877    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                         128  thrpt    5      1631.368 ±    1430.373  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5     65559.377 ±   58027.593    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                  128  thrpt    5         0.799 ±       6.883  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                             128  thrpt    5        32.353 ±     278.566    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.count                                                                    128  thrpt    5        12.000                counts
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.time                                                                     128  thrpt    5        32.000                    ms
[info] ArrayOfCharsBenchmark.readCirce                                                                                  128  thrpt    5    217756.891 ±    5089.156   ops/s
[info] ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate                                                                   128  thrpt    5      2241.110 ±      52.109  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate.norm                                                              128  thrpt    5     16200.002 ±       0.001    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                       128  thrpt    5         0.024 ±       0.186  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                  128  thrpt    5         0.171 ±       1.345    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                             128  thrpt    5      2315.964 ±    1433.256  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                        128  thrpt    5     16736.866 ±   10216.715    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                      128  thrpt    5         0.666 ±       5.735  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                                 128  thrpt    5         4.815 ±      41.456    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.count                                                                        128  thrpt    5        17.000                counts
[info] ArrayOfCharsBenchmark.readCirce:·gc.time                                                                         128  thrpt    5        28.000                    ms
[info] ArrayOfCharsBenchmark.readJacksonScala                                                                           128  thrpt    5    301754.841 ±   15901.629   ops/s
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate                                                            128  thrpt    5      1460.117 ±      77.229  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                       128  thrpt    5      7616.001 ±       0.001    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                128  thrpt    5         0.018 ±       0.116  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           128  thrpt    5         0.094 ±       0.620    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                      128  thrpt    5      1494.294 ±    1157.642  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5      7799.048 ±    6160.331    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                               128  thrpt    5         0.799 ±       6.882  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                          128  thrpt    5         4.260 ±      36.679    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.count                                                                 128  thrpt    5        11.000                counts
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.time                                                                  128  thrpt    5        34.000                    ms
[info] ArrayOfCharsBenchmark.readJsoniterScala                                                                          128  thrpt    5   1227080.173 ±   21352.143   ops/s
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                                           128  thrpt    5       424.142 ±       7.536  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                      128  thrpt    5       544.000 ±       0.001    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       406.901 ±    1430.314  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5       521.758 ±    1834.072    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.count                                                                128  thrpt    5         3.000                counts
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.time                                                                 128  thrpt    5         9.000                    ms
[info] ArrayOfCharsBenchmark.readPlayJson                                                                               128  thrpt    5     76119.540 ±    3103.015   ops/s
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate                                                                128  thrpt    5      3198.239 ±     129.621  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                           128  thrpt    5     66128.005 ±       0.001    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                    128  thrpt    5         0.004 ±       0.007  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                               128  thrpt    5         0.074 ±       0.144    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                          128  thrpt    5      3270.943 ±    1174.642  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                     128  thrpt    5     67660.726 ±   25478.926    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.count                                                                     128  thrpt    5        24.000                counts
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.time                                                                      128  thrpt    5        31.000                    ms
[info] ArrayOfCharsBenchmark.writeCirce                                                                                 128  thrpt    5    215971.335 ±    3863.462   ops/s
[info] ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate                                                                  128  thrpt    5      1830.020 ±      33.098  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                                             128  thrpt    5     13336.002 ±       0.001    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                      128  thrpt    5         0.028 ±       0.192  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                 128  thrpt    5         0.206 ±       1.388    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                            128  thrpt    5      1905.383 ±    1174.462  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                       128  thrpt    5     13886.227 ±    8580.783    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                     128  thrpt    5         0.666 ±       5.737  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                                128  thrpt    5         4.851 ±      41.770    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.count                                                                       128  thrpt    5        14.000                counts
[info] ArrayOfCharsBenchmark.writeCirce:·gc.time                                                                        128  thrpt    5        35.000                    ms
[info] ArrayOfCharsBenchmark.writeJacksonScala                                                                          128  thrpt    5   1084960.333 ±  172751.501   ops/s
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                                           128  thrpt    5       634.203 ±     101.191  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                      128  thrpt    5       920.000 ±       0.001    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       677.445 ±       0.382  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5       984.120 ±     161.634    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.count                                                                128  thrpt    5         5.000                counts
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.time                                                                 128  thrpt    5        23.000                    ms
[info] ArrayOfCharsBenchmark.writeJsoniterScala                                                                         128  thrpt    5   3053584.383 ±  109676.826   ops/s
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                          128  thrpt    5      1039.976 ±      37.113  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                     128  thrpt    5       536.000 ±       0.001    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5      1084.359 ±    1428.543  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5       559.187 ±     739.914    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         0.266 ±       1.405  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5         0.137 ±       0.722    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.count                                                               128  thrpt    5         8.000                counts
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.time                                                                128  thrpt    5        27.000                    ms
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc                                                                 128  thrpt    5   3223494.330 ±   31311.477   ops/s
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                  128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                             128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                       128  thrpt    5           ≈ 0                counts
[info] ArrayOfCharsBenchmark.writePlayJson                                                                              128  thrpt    5    309228.745 ±   10363.167   ops/s
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate                                                               128  thrpt    5      2530.351 ±      84.979  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                          128  thrpt    5     12880.001 ±       0.001    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   128  thrpt    5         0.007 ±       0.031  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              128  thrpt    5         0.036 ±       0.158    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                         128  thrpt    5      2589.303 ±    1173.239  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5     13177.679 ±    5879.079    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.count                                                                    128  thrpt    5        19.000                counts
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.time                                                                     128  thrpt    5        26.000                    ms
[info] ArrayOfDoublesBenchmark.readCirce                                                                                128  thrpt    5     26092.938 ±     733.860   ops/s
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate                                                                 128  thrpt    5      1528.406 ±      42.684  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm                                                            128  thrpt    5     92192.016 ±       0.002    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                     128  thrpt    5         0.030 ±       0.152  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                128  thrpt    5         1.822 ±       9.136    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                           128  thrpt    5      1495.180 ±    1161.622  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                      128  thrpt    5     90261.506 ±   72215.468    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                    128  thrpt    5         0.666 ±       5.734  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                               128  thrpt    5        40.331 ±     347.265    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.count                                                                      128  thrpt    5        11.000                counts
[info] ArrayOfDoublesBenchmark.readCirce:·gc.time                                                                       128  thrpt    5        29.000                    ms
[info] ArrayOfDoublesBenchmark.readDslJsonJava                                                                          128  thrpt    5     93975.949 ±    1157.819   ops/s
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate                                                           128  thrpt    5       846.374 ±      10.316  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                      128  thrpt    5     14176.004 ±       0.001    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       944.492 ±    1422.484  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5     15834.295 ±   24033.449    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5         2.238 ±      19.272    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.count                                                                128  thrpt    5         7.000                counts
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.time                                                                 128  thrpt    5        37.000                    ms
[info] ArrayOfDoublesBenchmark.readJacksonScala                                                                         128  thrpt    5     58461.923 ±     634.811   ops/s
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate                                                          128  thrpt    5       965.958 ±      10.347  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                     128  thrpt    5     26008.007 ±       0.001    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       948.053 ±    1428.509  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5     25542.908 ±   38699.044    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         0.266 ±       1.405  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5         7.168 ±      37.798    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.count                                                               128  thrpt    5         7.000                counts
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.time                                                                128  thrpt    5        32.000                    ms
[info] ArrayOfDoublesBenchmark.readJsoniterScala                                                                        128  thrpt    5    127537.299 ±     793.290   ops/s
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate                                                         128  thrpt    5       822.002 ±       5.344  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                    128  thrpt    5     10144.003 ±       0.001    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       813.707 ±    1167.513  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5     10046.304 ±   14497.892    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count                                                              128  thrpt    5         6.000                counts
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time                                                               128  thrpt    5        21.000                    ms
[info] ArrayOfDoublesBenchmark.readPlayJson                                                                             128  thrpt    5     33345.085 ±     899.841   ops/s
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate                                                              128  thrpt    5      1742.415 ±      47.348  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                         128  thrpt    5     82248.012 ±       0.002    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  128  thrpt    5         0.038 ±       0.240  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             128  thrpt    5         1.792 ±      11.455    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                        128  thrpt    5      1768.408 ±    1440.277  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5     83493.802 ±   68355.284    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                 128  thrpt    5         0.799 ±       6.881  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                            128  thrpt    5        38.158 ±     328.550    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.count                                                                   128  thrpt    5        13.000                counts
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.time                                                                    128  thrpt    5        31.000                    ms
[info] ArrayOfDoublesBenchmark.writeCirce                                                                               128  thrpt    5     39288.994 ±     660.819   ops/s
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate                                                                128  thrpt    5       440.109 ±       7.406  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm                                                           128  thrpt    5     17632.011 ±       0.001    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                          128  thrpt    5       406.835 ±    1430.081  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                     128  thrpt    5     16339.798 ±   57437.397    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.count                                                                     128  thrpt    5         3.000                counts
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.time                                                                      128  thrpt    5        15.000                    ms
[info] ArrayOfDoublesBenchmark.writeJacksonScala                                                                        128  thrpt    5     41180.626 ±    1060.442   ops/s
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate                                                         128  thrpt    5       371.986 ±       9.686  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                    128  thrpt    5     14216.010 ±       0.001    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       406.459 ±    1428.760  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5     15596.412 ±   54824.891    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count                                                              128  thrpt    5         3.000                counts
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time                                                               128  thrpt    5        14.000                    ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScala                                                                       128  thrpt    5     44825.334 ±     348.749   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate                                                        128  thrpt    5       393.909 ±       3.061  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                   128  thrpt    5     13832.009 ±       0.001    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                  128  thrpt    5       406.421 ±    1428.626  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5     14291.103 ±   50235.263    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                           128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                      128  thrpt    5         4.686 ±      40.345    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count                                                             128  thrpt    5         3.000                counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time                                                              128  thrpt    5        10.000                    ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc                                                               128  thrpt    5     44583.296 ±     565.398   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                128  thrpt    5       340.841 ±       4.330  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                           128  thrpt    5     12032.009 ±       0.001    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                                          128  thrpt    5       270.969 ±    1428.743  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                                     128  thrpt    5      9596.643 ±   50600.372    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                     128  thrpt    5         2.000                counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                                      128  thrpt    5         7.000                    ms
[info] ArrayOfDurationsBenchmark.readCirce                                                                              128  thrpt    5     19913.061 ±     874.273   ops/s
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate                                                               128  thrpt    5       746.933 ±      32.872  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm                                                          128  thrpt    5     59040.022 ±       0.010    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                         128  thrpt    5       678.185 ±       1.085  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5     53611.553 ±    2343.050    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                  128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                             128  thrpt    5        10.533 ±      90.694    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.count                                                                    128  thrpt    5         5.000                counts
[info] ArrayOfDurationsBenchmark.readCirce:·gc.time                                                                     128  thrpt    5        18.000                    ms
[info] ArrayOfDurationsBenchmark.readJacksonScala                                                                       128  thrpt    5     18758.797 ±     371.135   ops/s
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate                                                        128  thrpt    5       532.578 ±      10.680  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                   128  thrpt    5     44679.676 ±       3.000    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                  128  thrpt    5       541.663 ±    1165.971  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5     45521.175 ±   97991.612    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                           128  thrpt    5         0.266 ±       1.405  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                      128  thrpt    5        22.329 ±     117.736    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.count                                                             128  thrpt    5         4.000                counts
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.time                                                              128  thrpt    5        18.000                    ms
[info] ArrayOfDurationsBenchmark.readJsoniterScala                                                                      128  thrpt    5     74335.573 ±     332.981   ops/s
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate                                                       128  thrpt    5       193.453 ±       0.838  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                  128  thrpt    5      4096.005 ±       0.001    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                 128  thrpt    5       135.909 ±    1170.216  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5      2881.790 ±   24813.081    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count                                                            128  thrpt    5         1.000                counts
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time                                                             128  thrpt    5         3.000                    ms
[info] ArrayOfDurationsBenchmark.readPlayJson                                                                           128  thrpt    5     15787.508 ±     570.857   ops/s
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate                                                            128  thrpt    5      1023.747 ±      37.352  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                       128  thrpt    5    102064.028 ±       0.011    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                      128  thrpt    5      1083.773 ±    1428.255  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5    108202.497 ±  144265.566    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.count                                                                 128  thrpt    5         8.000                counts
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.time                                                                  128  thrpt    5        41.000                    ms
[info] ArrayOfDurationsBenchmark.writeCirce                                                                             128  thrpt    5     58855.536 ±     772.185   ops/s
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate                                                              128  thrpt    5       891.811 ±      11.099  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm                                                         128  thrpt    5     23848.007 ±       0.001    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                        128  thrpt    5       813.830 ±    1168.667  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5     21783.747 ±   31655.612    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.count                                                                   128  thrpt    5         6.000                counts
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.time                                                                    128  thrpt    5        23.000                    ms
[info] ArrayOfDurationsBenchmark.writeJacksonScala                                                                      128  thrpt    5     90811.908 ±    2727.205   ops/s
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate                                                       128  thrpt    5      1076.782 ±      32.357  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                  128  thrpt    5     18664.005 ±       0.001    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                 128  thrpt    5      1083.806 ±    1428.758  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5     18782.601 ±   24725.777    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                          128  thrpt    5         0.799 ±       6.882  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                     128  thrpt    5        13.673 ±     117.729    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.count                                                            128  thrpt    5         8.000                counts
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.time                                                             128  thrpt    5        37.000                    ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScala                                                                     128  thrpt    5    209656.075 ±    5401.824   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                      128  thrpt    5       332.474 ±       8.529  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                 128  thrpt    5      2496.002 ±       0.001    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5       271.099 ±    1429.426  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5      2046.326 ±   10789.786    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count                                                           128  thrpt    5         2.000                counts
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time                                                            128  thrpt    5         7.000                    ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc                                                             128  thrpt    5    239134.563 ±     932.285   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                              128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                         128  thrpt    5         0.002 ±       0.001    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                   128  thrpt    5           ≈ 0                counts
[info] ArrayOfDurationsBenchmark.writePlayJson                                                                          128  thrpt    5     80854.798 ±    2309.011   ops/s
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate                                                           128  thrpt    5      1102.938 ±      31.604  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                      128  thrpt    5     21472.005 ±       0.001    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                     128  thrpt    5      1083.757 ±    1428.622  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5     21130.427 ±   28198.169    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.count                                                                128  thrpt    5         8.000                counts
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.time                                                                 128  thrpt    5        34.000                    ms
[info] ArrayOfEnumsBenchmark.readCirce                                                                                  128  thrpt    5     27669.492 ±     207.806   ops/s
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate                                                                   128  thrpt    5       575.507 ±       4.166  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                                              128  thrpt    5     32736.015 ±       0.002    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                             128  thrpt    5       542.468 ±    1167.702  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                        128  thrpt    5     30834.488 ±   66373.724    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.count                                                                        128  thrpt    5         4.000                counts
[info] ArrayOfEnumsBenchmark.readCirce:·gc.time                                                                         128  thrpt    5        15.000                    ms
[info] ArrayOfEnumsBenchmark.readJacksonScala                                                                           128  thrpt    5     28038.248 ±     488.320   ops/s
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                                            128  thrpt    5       368.535 ±       6.396  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                       128  thrpt    5     20688.015 ±       0.002    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                      128  thrpt    5       406.324 ±    1428.285  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5     22856.837 ±   80346.622    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                               128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                          128  thrpt    5         7.474 ±      64.356    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.count                                                                 128  thrpt    5         3.000                counts
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.time                                                                  128  thrpt    5        14.000                    ms
[info] ArrayOfEnumsBenchmark.readJsoniterScala                                                                          128  thrpt    5    120274.693 ±    4444.198   ops/s
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                                                           128  thrpt    5       469.576 ±      17.518  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                      128  thrpt    5      6144.003 ±       0.001    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       406.959 ±    1430.518  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5      5320.885 ±   18704.550    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count                                                                128  thrpt    5         3.000                counts
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time                                                                 128  thrpt    5        10.000                    ms
[info] ArrayOfEnumsBenchmark.readPlayJson                                                                               128  thrpt    5     20526.212 ±     530.282   ops/s
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate                                                                128  thrpt    5      1133.313 ±      29.165  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                           128  thrpt    5     86904.021 ±       0.008    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                          128  thrpt    5      1083.170 ±    1428.619  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                     128  thrpt    5     83001.027 ±  108811.060    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                   128  thrpt    5         1.199 ±       7.565  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                              128  thrpt    5        91.650 ±     576.610    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.count                                                                     128  thrpt    5         8.000                counts
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.time                                                                      128  thrpt    5        40.000                    ms
[info] ArrayOfEnumsBenchmark.writeCirce                                                                                 128  thrpt    5    181218.718 ±    2981.685   ops/s
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate                                                                  128  thrpt    5       632.839 ±      10.257  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                                             128  thrpt    5      5496.002 ±       0.001    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                            128  thrpt    5       678.137 ±       0.496  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                       128  thrpt    5      5889.487 ±      96.762    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.count                                                                       128  thrpt    5         5.000                counts
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.time                                                                        128  thrpt    5        19.000                    ms
[info] ArrayOfEnumsBenchmark.writeJacksonScala                                                                          128  thrpt    5    274945.555 ±    4566.526   ops/s
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                                                           128  thrpt    5       278.113 ±       4.588  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                      128  thrpt    5      1592.002 ±       0.001    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       270.982 ±    1428.812  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5      1557.765 ±    8213.652    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.count                                                                128  thrpt    5         2.000                counts
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.time                                                                 128  thrpt    5         9.000                    ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScala                                                                         128  thrpt    5    474015.685 ±   21498.634   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                          128  thrpt    5       363.806 ±      16.481  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                     128  thrpt    5      1208.001 ±       0.001    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       406.607 ±    1429.282  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5      1350.886 ±    4749.026    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count                                                               128  thrpt    5         3.000                counts
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time                                                                128  thrpt    5        10.000                    ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc                                                                 128  thrpt    5    498153.262 ±   11901.737   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                  128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                             128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                       128  thrpt    5           ≈ 0                counts
[info] ArrayOfEnumsBenchmark.writePlayJson                                                                              128  thrpt    5    287995.297 ±    2376.640   ops/s
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate                                                               128  thrpt    5       793.347 ±       6.511  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                          128  thrpt    5      4336.001 ±       0.001    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                         128  thrpt    5       812.316 ±    1166.216  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5      4441.411 ±    6407.228    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                  128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                             128  thrpt    5         0.729 ±       6.274    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.count                                                                    128  thrpt    5         6.000                counts
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.time                                                                     128  thrpt    5        29.000                    ms
[info] ArrayOfFloatsBenchmark.readCirce                                                                                 128  thrpt    5     36601.222 ±     455.780   ops/s
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate                                                                  128  thrpt    5      1632.566 ±      19.590  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm                                                             128  thrpt    5     70200.011 ±       0.002    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                      128  thrpt    5         0.025 ±       0.192  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                 128  thrpt    5         1.089 ±       8.268    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                            128  thrpt    5      1632.137 ±    1431.461  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                       128  thrpt    5     70189.227 ±   61720.842    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                     128  thrpt    5         0.666 ±       5.737  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                                128  thrpt    5        28.764 ±     247.663    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.count                                                                       128  thrpt    5        12.000                counts
[info] ArrayOfFloatsBenchmark.readCirce:·gc.time                                                                        128  thrpt    5        28.000                    ms
[info] ArrayOfFloatsBenchmark.readDslJsonJava                                                                           128  thrpt    5    296202.406 ±   12796.742   ops/s
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate                                                            128  thrpt    5       307.152 ±      13.339  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                       128  thrpt    5      1632.001 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                      128  thrpt    5       404.869 ±    1423.172  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5      2164.064 ±    7607.796    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.count                                                                 128  thrpt    5         3.000                counts
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.time                                                                  128  thrpt    5        15.000                    ms
[info] ArrayOfFloatsBenchmark.readJacksonScala                                                                          128  thrpt    5     99095.850 ±    1821.041   ops/s
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate                                                           128  thrpt    5      1095.197 ±      18.805  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                      128  thrpt    5     17392.004 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                     128  thrpt    5      1083.583 ±    1427.709  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5     17226.038 ±   22897.272    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         0.799 ±       6.883  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5        12.700 ±     109.350    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.count                                                                128  thrpt    5         8.000                counts
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.time                                                                 128  thrpt    5        37.000                    ms
[info] ArrayOfFloatsBenchmark.readJsoniterScala                                                                         128  thrpt    5    418575.980 ±    5540.015   ops/s
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate                                                          128  thrpt    5       272.320 ±       3.642  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                     128  thrpt    5      1024.001 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       271.222 ±    1430.076  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5      1023.454 ±    5396.393    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count                                                               128  thrpt    5         2.000                counts
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time                                                                128  thrpt    5         7.000                    ms
[info] ArrayOfFloatsBenchmark.readPlayJson                                                                              128  thrpt    5     37659.899 ±     661.460   ops/s
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate                                                               128  thrpt    5      2010.162 ±      35.437  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                          128  thrpt    5     84016.011 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   128  thrpt    5         0.028 ±       0.148  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              128  thrpt    5         1.166 ±       6.242    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                         128  thrpt    5      1906.214 ±    1169.858  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5     79694.080 ±   49414.861    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                  128  thrpt    5         0.799 ±       6.882  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                             128  thrpt    5        33.659 ±     289.810    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.count                                                                    128  thrpt    5        14.000                counts
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.time                                                                     128  thrpt    5        25.000                    ms
[info] ArrayOfFloatsBenchmark.writeCirce                                                                                128  thrpt    5     90565.616 ±    5605.561   ops/s
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate                                                                 128  thrpt    5       437.381 ±      27.159  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm                                                            128  thrpt    5      7600.005 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                           128  thrpt    5       406.951 ±    1430.488  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                      128  thrpt    5      7116.180 ±   25022.467    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.count                                                                      128  thrpt    5         3.000                counts
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.time                                                                       128  thrpt    5        12.000                    ms
[info] ArrayOfFloatsBenchmark.writeDslJsonJava                                                                          128  thrpt    5    115890.520 ±    2421.668   ops/s
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                           128  thrpt    5       354.623 ±       7.483  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                      128  thrpt    5      4816.004 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       269.912 ±    1423.168  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5      3687.031 ±   19440.693    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.count                                                                128  thrpt    5         2.000                counts
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.time                                                                 128  thrpt    5        11.000                    ms
[info] ArrayOfFloatsBenchmark.writeJacksonScala                                                                         128  thrpt    5     99228.982 ±    1218.866   ops/s
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate                                                          128  thrpt    5       327.837 ±       4.017  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                     128  thrpt    5      5200.004 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       270.970 ±    1428.745  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5      4307.204 ±   22710.693    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count                                                               128  thrpt    5         2.000                counts
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time                                                                128  thrpt    5         9.000                    ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScala                                                                        128  thrpt    5    116075.063 ±     968.005   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                         128  thrpt    5       355.181 ±       3.019  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                    128  thrpt    5      4816.004 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       406.441 ±    1428.697  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5      5519.189 ±   19400.740    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count                                                              128  thrpt    5         3.000                counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time                                                               128  thrpt    5        10.000                    ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc                                                                128  thrpt    5    115219.319 ±     986.565   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                 128  thrpt    5       261.794 ±       2.320  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                            128  thrpt    5      3576.004 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                                           128  thrpt    5       271.231 ±    1430.121  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                                      128  thrpt    5      3713.129 ±   19578.258    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                      128  thrpt    5         2.000                counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                                       128  thrpt    5         7.000                    ms
[info] ArrayOfInstantsBenchmark.readCirce                                                                               128  thrpt    5      8356.354 ±     306.388   ops/s
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate                                                                128  thrpt    5      1374.433 ±      49.661  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm                                                           128  thrpt    5    258856.059 ±       0.070    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                    128  thrpt    5         0.019 ±       0.147  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                               128  thrpt    5         3.511 ±      27.432    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                          128  thrpt    5      1358.187 ±      11.006  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                     128  thrpt    5    255812.081 ±    8247.708    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                   128  thrpt    5         0.666 ±       5.735  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                              128  thrpt    5       124.964 ±    1075.981    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.count                                                                     128  thrpt    5        10.000                counts
[info] ArrayOfInstantsBenchmark.readCirce:·gc.time                                                                      128  thrpt    5        31.000                    ms
[info] ArrayOfInstantsBenchmark.readJacksonScala                                                                        128  thrpt    5      8516.285 ±      81.830   ops/s
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate                                                         128  thrpt    5      1328.503 ±      13.323  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                    128  thrpt    5    245542.588 ±      63.123    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                             128  thrpt    5         0.025 ±       0.136  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        128  thrpt    5         4.588 ±      25.053    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                   128  thrpt    5      1357.052 ±      13.924  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5    250819.247 ±     846.876    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         0.799 ±       6.882  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5       147.548 ±    1270.435    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.count                                                              128  thrpt    5        10.000                counts
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.time                                                               128  thrpt    5        40.000                    ms
[info] ArrayOfInstantsBenchmark.readJsoniterScala                                                                       128  thrpt    5    173969.223 ±    4845.597   ops/s
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate                                                        128  thrpt    5       452.754 ±      12.664  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                   128  thrpt    5      4096.002 ±       0.001    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                  128  thrpt    5       407.279 ±    1431.644  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5      3700.349 ±   13007.613    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count                                                             128  thrpt    5         3.000                counts
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time                                                              128  thrpt    5        10.000                    ms
[info] ArrayOfInstantsBenchmark.readPlayJson                                                                            128  thrpt    5      4866.964 ±     221.222   ops/s
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate                                                             128  thrpt    5      1292.811 ±      58.207  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                        128  thrpt    5    418024.088 ±       0.013    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                 128  thrpt    5         0.037 ±       0.322  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                            128  thrpt    5        11.974 ±     103.098    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                       128  thrpt    5      1220.627 ±    1169.746  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5    394281.907 ±  372883.708    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                128  thrpt    5         0.799 ±       6.882  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                           128  thrpt    5       256.532 ±    2208.821    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.count                                                                  128  thrpt    5         9.000                counts
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.time                                                                   128  thrpt    5        35.000                    ms
[info] ArrayOfInstantsBenchmark.writeCirce                                                                              128  thrpt    5     25470.331 ±     506.861   ops/s
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate                                                               128  thrpt    5      1320.079 ±      26.221  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm                                                          128  thrpt    5     81568.017 ±       0.003    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   128  thrpt    5         0.027 ±       0.230  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              128  thrpt    5         1.659 ±      14.286    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                         128  thrpt    5      1222.020 ±    1171.248  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5     75570.539 ±   73155.865    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                  128  thrpt    5         0.666 ±       5.735  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                             128  thrpt    5        41.397 ±     356.437    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.count                                                                    128  thrpt    5         9.000                counts
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.time                                                                     128  thrpt    5        31.000                    ms
[info] ArrayOfInstantsBenchmark.writeJacksonScala                                                                       128  thrpt    5     25088.281 ±     920.278   ops/s
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate                                                        128  thrpt    5      1275.355 ±      46.613  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                   128  thrpt    5     80016.017 ±       0.003    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                            128  thrpt    5         0.024 ±       0.162  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       128  thrpt    5         1.512 ±      10.145    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                  128  thrpt    5      1356.994 ±      14.193  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5     85143.852 ±    3058.853    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                           128  thrpt    5         0.932 ±       6.688  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                      128  thrpt    5        58.409 ±     419.559    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.count                                                             128  thrpt    5        10.000                counts
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.time                                                              128  thrpt    5        35.000                    ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScala                                                                      128  thrpt    5    369182.250 ±    2341.966   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                       128  thrpt    5       816.423 ±       5.148  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                  128  thrpt    5      3480.001 ±       0.001    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                 128  thrpt    5       813.591 ±    1168.531  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5      3467.250 ±    4967.568    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                          128  thrpt    5         0.266 ±       1.405  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                     128  thrpt    5         1.136 ±       5.988    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count                                                            128  thrpt    5         6.000                counts
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time                                                             128  thrpt    5        20.000                    ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc                                                              128  thrpt    5    414327.312 ±    2617.207   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                               128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                          128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                    128  thrpt    5           ≈ 0                counts
[info] ArrayOfInstantsBenchmark.writePlayJson                                                                           128  thrpt    5     27658.502 ±    1329.413   ops/s
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate                                                            128  thrpt    5      1455.529 ±      69.321  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                       128  thrpt    5     82824.015 ±       0.002    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                128  thrpt    5         0.032 ±       0.264  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           128  thrpt    5         1.773 ±      14.831    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                      128  thrpt    5      1358.048 ±      16.238  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5     77284.117 ±    2753.005    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                               128  thrpt    5         0.799 ±       6.884  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                          128  thrpt    5        45.983 ±     395.931    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.count                                                                 128  thrpt    5        10.000                counts
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.time                                                                  128  thrpt    5        32.000                    ms
[info] ArrayOfIntsBenchmark.readCirce                                                                                   128  thrpt    5     95065.431 ±    1094.561   ops/s
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate                                                                    128  thrpt    5      1548.611 ±      18.188  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                                               128  thrpt    5     25640.004 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                        128  thrpt    5         0.029 ±       0.155  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                   128  thrpt    5         0.482 ±       2.571    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                              128  thrpt    5      1631.319 ±    1433.335  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                         128  thrpt    5     27022.033 ±   24016.749    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                       128  thrpt    5         0.666 ±       5.736  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                                  128  thrpt    5        11.011 ±      94.804    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.count                                                                         128  thrpt    5        12.000                counts
[info] ArrayOfIntsBenchmark.readCirce:·gc.time                                                                          128  thrpt    5        28.000                    ms
[info] ArrayOfIntsBenchmark.readDslJsonJava                                                                             128  thrpt    5    455628.706 ±   13828.934   ops/s
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate                                                              128  thrpt    5       472.502 ±      14.100  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                         128  thrpt    5      1632.001 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                        128  thrpt    5       539.914 ±    1162.206  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5      1869.046 ±    4023.634    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.count                                                                   128  thrpt    5         4.000                counts
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.time                                                                    128  thrpt    5        21.000                    ms
[info] ArrayOfIntsBenchmark.readJacksonScala                                                                            128  thrpt    5    272041.227 ±    5026.026   ops/s
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                                             128  thrpt    5       389.934 ±       7.089  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                        128  thrpt    5      2256.002 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                       128  thrpt    5       406.335 ±    1428.326  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5      2357.700 ±    8287.717    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                                128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                           128  thrpt    5         0.776 ±       6.683    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.count                                                                  128  thrpt    5         3.000                counts
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.time                                                                   128  thrpt    5        13.000                    ms
[info] ArrayOfIntsBenchmark.readJsoniterScala                                                                           128  thrpt    5    610681.485 ±    9420.168   ops/s
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                                            128  thrpt    5       397.288 ±       6.076  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                       128  thrpt    5      1024.001 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                      128  thrpt    5       406.851 ±    1430.140  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5      1051.236 ±    3695.243    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.count                                                                 128  thrpt    5         3.000                counts
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.time                                                                  128  thrpt    5        10.000                    ms
[info] ArrayOfIntsBenchmark.readPlayJson                                                                                128  thrpt    5     68877.246 ±    2770.805   ops/s
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                                                 128  thrpt    5      3017.444 ±     121.782  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                            128  thrpt    5     68952.006 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                     128  thrpt    5         0.003 ±       0.010  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                128  thrpt    5         0.072 ±       0.233    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                           128  thrpt    5      2998.221 ±    1436.664  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                      128  thrpt    5     68530.314 ±   33410.259    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.count                                                                      128  thrpt    5        22.000                counts
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.time                                                                       128  thrpt    5        33.000                    ms
[info] ArrayOfIntsBenchmark.writeCirce                                                                                  128  thrpt    5    214461.117 ±    3952.847   ops/s
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate                                                                   128  thrpt    5      1270.000 ±      23.961  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                                              128  thrpt    5      9320.002 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                       128  thrpt    5         0.030 ±       0.257  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                  128  thrpt    5         0.221 ±       1.900    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                             128  thrpt    5      1221.813 ±    1169.953  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                        128  thrpt    5      8973.136 ±    8672.380    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                      128  thrpt    5         0.799 ±       5.561  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                                 128  thrpt    5         5.869 ±      40.850    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.count                                                                        128  thrpt    5         9.000                counts
[info] ArrayOfIntsBenchmark.writeCirce:·gc.time                                                                         128  thrpt    5        31.000                    ms
[info] ArrayOfIntsBenchmark.writeDslJsonJava                                                                            128  thrpt    5    962634.124 ±   60759.860   ops/s
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                             128  thrpt    5       523.548 ±      33.131  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                        128  thrpt    5       856.000 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                                       128  thrpt    5       539.804 ±    1161.970  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5       887.628 ±    1911.262    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.count                                                                  128  thrpt    5         4.000                counts
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.time                                                                   128  thrpt    5        20.000                    ms
[info] ArrayOfIntsBenchmark.writeJacksonScala                                                                           128  thrpt    5    808096.309 ±   11670.687   ops/s
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                                            128  thrpt    5       636.668 ±       9.185  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                       128  thrpt    5      1240.001 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                      128  thrpt    5       677.318 ±       1.142  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5      1319.187 ±      18.767    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                               128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                          128  thrpt    5         0.260 ±       2.237    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.count                                                                 128  thrpt    5         5.000                counts
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.time                                                                  128  thrpt    5        23.000                    ms
[info] ArrayOfIntsBenchmark.writeJsoniterScala                                                                          128  thrpt    5   1049203.202 ±   25562.496   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                           128  thrpt    5       570.613 ±      13.910  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                      128  thrpt    5       856.000 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       542.342 ±    1167.432  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5       815.385 ±    1755.249    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5         0.200 ±       1.725    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count                                                                128  thrpt    5         4.000                counts
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time                                                                 128  thrpt    5        14.000                    ms
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc                                                                  128  thrpt    5   1092928.663 ±    1934.586   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                   128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                              128  thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                        128  thrpt    5           ≈ 0                counts
[info] ArrayOfIntsBenchmark.writePlayJson                                                                               128  thrpt    5     29982.438 ±     501.237   ops/s
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                                                128  thrpt    5      1571.386 ±      26.038  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                           128  thrpt    5     82488.014 ±       0.002    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                    128  thrpt    5         0.044 ±       0.225  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                               128  thrpt    5         2.312 ±      11.819    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                          128  thrpt    5      1630.653 ±    1433.601  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                     128  thrpt    5     85610.701 ±   75503.820    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                   128  thrpt    5         0.799 ±       6.882  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                              128  thrpt    5        42.003 ±     361.661    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.count                                                                     128  thrpt    5        12.000                counts
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.time                                                                      128  thrpt    5        34.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readCirce                                                                              128  thrpt    5    125517.289 ±    1516.741   ops/s
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate                                                               128  thrpt    5      1709.217 ±      20.705  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                                          128  thrpt    5     21432.003 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   128  thrpt    5         0.044 ±       0.366  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              128  thrpt    5         0.546 ±       4.569    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                         128  thrpt    5      1768.301 ±    1436.833  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5     22173.289 ±   18023.612    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                  128  thrpt    5         0.799 ±       5.560  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                             128  thrpt    5        10.027 ±      69.691    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.count                                                                    128  thrpt    5        13.000                counts
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.time                                                                     128  thrpt    5        31.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala                                                                       128  thrpt    5    167629.919 ±   11060.510   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                                        128  thrpt    5       894.556 ±      59.071  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                   128  thrpt    5      8400.002 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                  128  thrpt    5       812.837 ±    1166.591  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5      7625.738 ±   10795.934    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count                                                             128  thrpt    5         6.000                counts
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time                                                              128  thrpt    5        28.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala                                                                      128  thrpt    5    261216.720 ±   13180.337   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                                                       128  thrpt    5       679.970 ±      34.919  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                  128  thrpt    5      4096.002 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                 128  thrpt    5       813.147 ±    2181.742  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5      4874.959 ±   13116.662    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count                                                            128  thrpt    5         6.000                counts
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time                                                             128  thrpt    5        19.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readPlayJson                                                                           128  thrpt    5     63845.811 ±    1277.761   ops/s
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate                                                            128  thrpt    5      2695.360 ±      54.265  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                       128  thrpt    5     66448.007 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                128  thrpt    5         0.009 ±       0.067  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           128  thrpt    5         0.217 ±       1.659    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                      128  thrpt    5      2725.615 ±       0.922  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5     67195.344 ±    1347.310    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count                                                                 128  thrpt    5        20.000                counts
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time                                                                  128  thrpt    5        25.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeCirce                                                                             128  thrpt    5    180203.134 ±    1269.275   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate                                                              128  thrpt    5       629.286 ±       4.080  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                                         128  thrpt    5      5496.002 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                        128  thrpt    5       677.996 ±       0.906  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5      5921.436 ±      33.117    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                 128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                            128  thrpt    5         1.167 ±      10.049    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.count                                                                   128  thrpt    5         5.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.time                                                                    128  thrpt    5        20.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala                                                                      128  thrpt    5    538137.217 ±   11143.111   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                                                       128  thrpt    5       544.269 ±      11.282  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                  128  thrpt    5      1592.001 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                 128  thrpt    5       541.897 ±    1166.474  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5      1587.442 ±    3417.240    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count                                                            128  thrpt    5         4.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time                                                             128  thrpt    5        20.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala                                                                     128  thrpt    5    473740.734 ±    5780.178   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                      128  thrpt    5       363.567 ±       4.483  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                 128  thrpt    5      1208.001 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5       406.804 ±    1429.973  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5      1350.468 ±    4747.088    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count                                                           128  thrpt    5         3.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time                                                            128  thrpt    5        10.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc                                                             128  thrpt    5    499570.487 ±    2414.825   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                              128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                         128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                   128  thrpt    5           ≈ 0                counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson                                                                          128  thrpt    5    307785.546 ±    4676.587   ops/s
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate                                                           128  thrpt    5       844.742 ±      13.044  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                      128  thrpt    5      4320.001 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       812.175 ±    1164.744  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5      4156.752 ±    6019.650    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         0.266 ±       1.405  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5         1.359 ±       7.167    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count                                                                128  thrpt    5         6.000                counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time                                                                 128  thrpt    5        30.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readCirce                                                                         128  thrpt    5      9155.758 ±     143.562   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate                                                          128  thrpt    5      1111.331 ±      17.322  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                                     128  thrpt    5    191040.052 ±       0.067    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                    128  thrpt    5      1084.933 ±    1430.336  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5    186705.856 ±  248356.866    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count                                                               128  thrpt    5         8.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time                                                                128  thrpt    5        30.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala                                                                  128  thrpt    5      9260.137 ±     216.791   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                                   128  thrpt    5      1097.676 ±      25.515  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                              128  thrpt    5    186576.047 ±       0.005    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                             128  thrpt    5      1083.657 ±    1428.416  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                        128  thrpt    5    184453.581 ±  245956.866    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                      128  thrpt    5         0.933 ±       6.689  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                 128  thrpt    5       159.317 ±    1144.094    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count                                                        128  thrpt    5         8.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time                                                         128  thrpt    5        38.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala                                                                 128  thrpt    5    195873.760 ±    1326.340   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                                  128  thrpt    5      1274.593 ±       8.659  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                             128  thrpt    5     10240.002 ±       0.001    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                      128  thrpt    5         0.019 ±       0.162  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 128  thrpt    5         0.151 ±       1.300    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                            128  thrpt    5      1223.066 ±    1171.414  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                       128  thrpt    5      9827.292 ±    9427.204    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                     128  thrpt    5         0.533 ±       4.590  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                128  thrpt    5         4.289 ±      36.932    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count                                                       128  thrpt    5         9.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time                                                        128  thrpt    5        31.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson                                                                      128  thrpt    5      6971.755 ±     257.176   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                                       128  thrpt    5      1298.340 ±      48.001  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                  128  thrpt    5    293112.461 ±       3.446    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                           128  thrpt    5         0.018 ±       0.121  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      128  thrpt    5         4.037 ±      27.129    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                 128  thrpt    5      1356.807 ±      14.364  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5    306332.838 ±   10859.628    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                          128  thrpt    5         1.066 ±       6.437  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                     128  thrpt    5       239.991 ±    1448.912    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count                                                            128  thrpt    5        10.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time                                                             128  thrpt    5        36.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeCirce                                                                        128  thrpt    5     20719.082 ±     512.434   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate                                                         128  thrpt    5       869.908 ±      20.889  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                                    128  thrpt    5     66082.691 ±      23.002    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       813.709 ±    1167.663  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5     61763.762 ±   87709.184    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count                                                              128  thrpt    5         6.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time                                                               128  thrpt    5        23.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala                                                                 128  thrpt    5     25674.719 ±     218.350   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                                  128  thrpt    5       987.654 ±       8.440  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                             128  thrpt    5     60552.016 ±       0.002    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                            128  thrpt    5       948.018 ±    1428.302  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                       128  thrpt    5     58142.362 ±   87852.326    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                     128  thrpt    5         0.266 ±       1.405  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                128  thrpt    5        16.354 ±      86.228    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.count                                                       128  thrpt    5         7.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.time                                                        128  thrpt    5        30.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala                                                                128  thrpt    5    902472.720 ±   11588.760   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                                 128  thrpt    5      1628.402 ±      20.843  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                            128  thrpt    5      2840.000 ±       0.001    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                     128  thrpt    5         0.028 ±       0.201  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                128  thrpt    5         0.049 ±       0.350    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                           128  thrpt    5      1631.380 ±    1429.824  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                      128  thrpt    5      2845.141 ±    2492.178    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                    128  thrpt    5         0.799 ±       6.882  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                               128  thrpt    5         1.396 ±      12.021    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count                                                      128  thrpt    5        12.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time                                                       128  thrpt    5        26.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc                                                        128  thrpt    5    557587.661 ±     669.812   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                         128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                    128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                              128  thrpt    5           ≈ 0                counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson                                                                     128  thrpt    5     23793.794 ±     245.677   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                                      128  thrpt    5      1003.980 ±      10.625  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                                 128  thrpt    5     66416.018 ±       0.003    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                128  thrpt    5       948.275 ±    1428.244  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5     62783.385 ±   95214.746    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count                                                           128  thrpt    5         7.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time                                                            128  thrpt    5        32.000                    ms
[info] ArrayOfLocalDatesBenchmark.readCirce                                                                             128  thrpt    5     24589.395 ±     199.349   ops/s
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate                                                              128  thrpt    5      1334.911 ±      11.052  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm                                                         128  thrpt    5     85440.017 ±       0.002    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  128  thrpt    5         0.017 ±       0.102  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             128  thrpt    5         1.079 ±       6.511    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                        128  thrpt    5      1358.237 ±      11.728  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5     86932.958 ±     240.747    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                 128  thrpt    5         0.666 ±       5.736  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                            128  thrpt    5        42.623 ±     367.000    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.count                                                                   128  thrpt    5        10.000                counts
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.time                                                                    128  thrpt    5        30.000                    ms
[info] ArrayOfLocalDatesBenchmark.readJacksonScala                                                                      128  thrpt    5     27049.751 ±     424.095   ops/s
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate                                                       128  thrpt    5      1235.628 ±      18.405  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                  128  thrpt    5     71888.015 ±       0.002    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                           128  thrpt    5         0.038 ±       0.328  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      128  thrpt    5         2.208 ±      19.014    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                 128  thrpt    5      1221.110 ±    1170.493  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5     71075.057 ±   68498.877    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                          128  thrpt    5         0.799 ±       6.883  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                     128  thrpt    5        46.593 ±     401.180    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count                                                            128  thrpt    5         9.000                counts
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time                                                             128  thrpt    5        35.000                    ms
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala                                                                     128  thrpt    5    342711.290 ±    8952.105   ops/s
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate                                                      128  thrpt    5       891.888 ±      23.336  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                 128  thrpt    5      4096.001 ±       0.001    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5       950.284 ±    1431.778  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5      4368.378 ±    6633.177    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count                                                           128  thrpt    5         7.000                counts
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time                                                            128  thrpt    5        24.000                    ms
[info] ArrayOfLocalDatesBenchmark.readPlayJson                                                                          128  thrpt    5     15715.486 ±     502.662   ops/s
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate                                                           128  thrpt    5      1617.904 ±      51.782  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                      128  thrpt    5    162040.028 ±       0.012    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                               128  thrpt    5         0.016 ±       0.109  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          128  thrpt    5         1.615 ±      11.039    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                     128  thrpt    5      1631.020 ±    1430.024  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5    163311.070 ±  142121.773    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         1.066 ±       7.821  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5       107.403 ±     788.880    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count                                                                128  thrpt    5        12.000                counts
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time                                                                 128  thrpt    5        33.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeCirce                                                                            128  thrpt    5     53896.837 ±    2414.102   ops/s
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate                                                             128  thrpt    5      1307.290 ±      57.684  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm                                                        128  thrpt    5     38176.008 ±       0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                 128  thrpt    5         0.035 ±       0.300  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                            128  thrpt    5         1.011 ±       8.701    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                       128  thrpt    5      1221.924 ±    1170.773  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5     35719.031 ±   34642.775    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                128  thrpt    5         0.666 ±       5.735  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                           128  thrpt    5        19.428 ±     167.282    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.count                                                                  128  thrpt    5         9.000                counts
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.time                                                                   128  thrpt    5        31.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala                                                                     128  thrpt    5    128798.171 ±    1904.682   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate                                                      128  thrpt    5      1091.270 ±      16.239  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                 128  thrpt    5     13336.003 ±       0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5      1083.730 ±    1429.505  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5     13243.158 ±   17459.706    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         0.933 ±       6.689  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5        11.393 ±      81.626    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.count                                                           128  thrpt    5         8.000                counts
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.time                                                            128  thrpt    5        36.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala                                                                    128  thrpt    5   1480526.767 ±   28935.069   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate                                                     128  thrpt    5      1587.708 ±      31.018  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                128  thrpt    5      1688.000 ±       0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                         128  thrpt    5         0.015 ±       0.094  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    128  thrpt    5         0.016 ±       0.099    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5      1631.621 ±    1429.531  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5      1735.390 ±    1535.446    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                        128  thrpt    5         0.799 ±       6.882  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                   128  thrpt    5         0.856 ±       7.369    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count                                                          128  thrpt    5        12.000                counts
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time                                                           128  thrpt    5        29.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc                                                            128  thrpt    5    827053.157 ±    2715.757   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                             128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                        128  thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                  128  thrpt    5           ≈ 0                counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson                                                                         128  thrpt    5     61299.439 ±    2089.744   ops/s
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate                                                          128  thrpt    5      1425.903 ±      49.101  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm                                                     128  thrpt    5     36608.007 ±       0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                              128  thrpt    5         0.040 ±       0.347  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         128  thrpt    5         1.022 ±       8.803    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                    128  thrpt    5      1493.655 ±    1159.239  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5     38380.667 ±   30719.878    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         0.799 ±       6.882  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5        20.707 ±     178.298    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count                                                               128  thrpt    5        11.000                counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time                                                                128  thrpt    5        37.000                    ms
[info] ArrayOfLocalTimesBenchmark.readCirce                                                                             128  thrpt    5     13643.031 ±     235.506   ops/s
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate                                                              128  thrpt    5      1217.752 ±      21.078  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm                                                         128  thrpt    5    140480.032 ±       0.013    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  128  thrpt    5         0.010 ±       0.082  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             128  thrpt    5         1.094 ±       9.418    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                        128  thrpt    5      1221.267 ±    1169.256  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5    140766.284 ±  133320.579    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                 128  thrpt    5         0.666 ±       5.735  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                            128  thrpt    5        76.516 ±     658.826    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.count                                                                   128  thrpt    5         9.000                counts
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.time                                                                    128  thrpt    5        31.000                    ms
[info] ArrayOfLocalTimesBenchmark.readJacksonScala                                                                      128  thrpt    5     14156.140 ±     518.212   ops/s
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate                                                       128  thrpt    5      1143.926 ±      41.381  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                  128  thrpt    5    127183.570 ±       3.976    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                           128  thrpt    5         0.005 ±       0.042  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      128  thrpt    5         0.551 ±       4.748    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                 128  thrpt    5      1219.966 ±    1167.987  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5    135775.581 ±  131619.602    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                          128  thrpt    5         0.933 ±       8.031  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                     128  thrpt    5       105.400 ±     907.523    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count                                                            128  thrpt    5         9.000                counts
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time                                                             128  thrpt    5        40.000                    ms
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala                                                                     128  thrpt    5    413359.525 ±    3102.162   ops/s
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                                      128  thrpt    5      1075.716 ±       8.079  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                 128  thrpt    5      4096.001 ±       0.001    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5      1086.028 ±    1431.400  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5      4137.257 ±    5474.723    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count                                                           128  thrpt    5         8.000                counts
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time                                                            128  thrpt    5        26.000                    ms
[info] ArrayOfLocalTimesBenchmark.readPlayJson                                                                          128  thrpt    5     10740.741 ±     438.627   ops/s
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate                                                           128  thrpt    5      1483.011 ±      60.755  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                      128  thrpt    5    217336.166 ±       1.070    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                               128  thrpt    5         0.025 ±       0.139  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          128  thrpt    5         3.673 ±      20.347    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                     128  thrpt    5      1494.153 ±    1158.058  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5    219213.192 ±  176698.946    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         0.799 ±       6.882  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5       116.844 ±    1006.061    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count                                                                128  thrpt    5        11.000                counts
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time                                                                 128  thrpt    5        35.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeCirce                                                                            128  thrpt    5     37925.715 ±     616.600   ops/s
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate                                                             128  thrpt    5      1178.997 ±      19.188  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                                        128  thrpt    5     48928.011 ±       0.001    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                       128  thrpt    5      1084.981 ±    1430.335  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5     45030.612 ±   59406.122    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                128  thrpt    5         0.666 ±       5.735  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                           128  thrpt    5        27.482 ±     236.628    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.count                                                                  128  thrpt    5         8.000                counts
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.time                                                                   128  thrpt    5        31.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala                                                                     128  thrpt    5     44152.046 ±    1797.115   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                                      128  thrpt    5      1171.219 ±      47.990  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                 128  thrpt    5     41752.009 ±       0.001    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                          128  thrpt    5         0.013 ±       0.116  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     128  thrpt    5         0.481 ±       4.140    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5      1084.657 ±    1424.673  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5     38711.240 ±   51327.997    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         0.799 ±       6.882  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5        28.708 ±     247.188    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.count                                                           128  thrpt    5         8.000                counts
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.time                                                            128  thrpt    5        34.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala                                                                    128  thrpt    5   1710601.421 ±   61660.483   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                                     128  thrpt    5      1556.504 ±      56.073  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                128  thrpt    5      1432.000 ±       0.001    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                         128  thrpt    5         0.018 ±       0.125  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    128  thrpt    5         0.017 ±       0.115    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5      1495.680 ±    1174.307  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5      1376.214 ±    1083.707    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                        128  thrpt    5         0.933 ±       5.319  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                   128  thrpt    5         0.859 ±       4.897    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count                                                          128  thrpt    5        11.000                counts
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time                                                           128  thrpt    5        29.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc                                                            128  thrpt    5   1835879.844 ±   10178.700   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                             128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                        128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                  128  thrpt    5           ≈ 0                counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson                                                                         128  thrpt    5     34890.757 ±     391.004   ops/s
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate                                                          128  thrpt    5      1054.952 ±      12.061  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                                     128  thrpt    5     47592.012 ±       0.001    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                    128  thrpt    5      1083.766 ±    1428.444  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5     48927.964 ±   64881.594    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count                                                               128  thrpt    5         8.000                counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time                                                                128  thrpt    5        36.000                    ms
[info] ArrayOfLongsBenchmark.readCirce                                                                                  128  thrpt    5     75606.551 ±     563.311   ops/s
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate                                                                   128  thrpt    5      1297.011 ±      10.225  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm                                                              128  thrpt    5     27000.005 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                       128  thrpt    5         0.030 ±       0.262  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                  128  thrpt    5         0.631 ±       5.429    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                             128  thrpt    5      1221.915 ±    1170.710  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                        128  thrpt    5     25438.484 ±   24392.503    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                      128  thrpt    5         0.666 ±       5.735  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                                 128  thrpt    5        13.903 ±     119.710    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.count                                                                        128  thrpt    5         9.000                counts
[info] ArrayOfLongsBenchmark.readCirce:·gc.time                                                                         128  thrpt    5        27.000                    ms
[info] ArrayOfLongsBenchmark.readDslJsonJava                                                                            128  thrpt    5    339286.926 ±    2414.695   ops/s
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate                                                             128  thrpt    5       679.503 ±       5.103  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                        128  thrpt    5      3152.001 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                       128  thrpt    5       674.794 ±       0.303  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5      3130.166 ±      22.425    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.count                                                                  128  thrpt    5         5.000                counts
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.time                                                                   128  thrpt    5        27.000                    ms
[info] ArrayOfLongsBenchmark.readJacksonScala                                                                           128  thrpt    5    228766.466 ±   30361.328   ops/s
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate                                                            128  thrpt    5       506.968 ±      67.259  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                       128  thrpt    5      3488.002 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                      128  thrpt    5       541.937 ±    1166.561  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5      3760.376 ±    8113.769    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.count                                                                 128  thrpt    5         4.000                counts
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.time                                                                  128  thrpt    5        18.000                    ms
[info] ArrayOfLongsBenchmark.readJsoniterScala                                                                          128  thrpt    5    447659.290 ±    3994.453   ops/s
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate                                                           128  thrpt    5       564.261 ±       5.005  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                      128  thrpt    5      1984.001 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       542.430 ±    1167.621  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5      1907.062 ±    4105.149    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.count                                                                128  thrpt    5         4.000                counts
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.time                                                                 128  thrpt    5        14.000                    ms
[info] ArrayOfLongsBenchmark.readPlayJson                                                                               128  thrpt    5     65624.456 ±    1865.496   ops/s
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate                                                                128  thrpt    5      2928.425 ±      81.857  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                           128  thrpt    5     70232.006 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                    128  thrpt    5         0.006 ±       0.011  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                               128  thrpt    5         0.141 ±       0.256    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                          128  thrpt    5      2998.304 ±    1437.415  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                     128  thrpt    5     71932.676 ±   35412.915    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.count                                                                     128  thrpt    5        22.000                counts
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.time                                                                      128  thrpt    5        28.000                    ms
[info] ArrayOfLongsBenchmark.writeCirce                                                                                 128  thrpt    5    223360.870 ±    2518.929   ops/s
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate                                                                  128  thrpt    5      1575.976 ±      17.473  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm                                                             128  thrpt    5     11104.002 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                      128  thrpt    5         0.040 ±       0.312  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                 128  thrpt    5         0.281 ±       2.203    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                            128  thrpt    5      1495.958 ±    1173.728  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                       128  thrpt    5     10543.105 ±    8355.104    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                     128  thrpt    5         0.666 ±       5.736  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                                128  thrpt    5         4.708 ±      40.533    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.count                                                                       128  thrpt    5        11.000                counts
[info] ArrayOfLongsBenchmark.writeCirce:·gc.time                                                                        128  thrpt    5        28.000                    ms
[info] ArrayOfLongsBenchmark.writeDslJsonJava                                                                           128  thrpt    5    683511.439 ±   14456.991   ops/s
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                            128  thrpt    5       535.034 ±      11.382  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                       128  thrpt    5      1232.001 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                                      128  thrpt    5       539.844 ±    1162.056  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5      1245.179 ±    2680.454    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.count                                                                 128  thrpt    5         4.000                counts
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.time                                                                  128  thrpt    5        21.000                    ms
[info] ArrayOfLongsBenchmark.writeJacksonScala                                                                          128  thrpt    5    462020.497 ±    4625.593   ops/s
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate                                                           128  thrpt    5       474.333 ±       4.864  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                      128  thrpt    5      1616.001 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       406.429 ±    1428.656  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5      1382.626 ±    4860.126    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.count                                                                128  thrpt    5         3.000                counts
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.time                                                                 128  thrpt    5        13.000                    ms
[info] ArrayOfLongsBenchmark.writeJsoniterScala                                                                         128  thrpt    5    643485.794 ±   10565.972   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                          128  thrpt    5       503.681 ±       8.125  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                     128  thrpt    5      1232.001 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       542.197 ±    1167.121  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5      1326.262 ±    2855.039    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5         0.325 ±       2.800    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count                                                               128  thrpt    5         4.000                counts
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time                                                                128  thrpt    5        14.000                    ms
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc                                                                 128  thrpt    5    672005.071 ±     788.160   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                  128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                             128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                       128  thrpt    5           ≈ 0                counts
[info] ArrayOfLongsBenchmark.writePlayJson                                                                              128  thrpt    5     27239.606 ±     368.345   ops/s
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate                                                               128  thrpt    5      1396.414 ±      18.981  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                          128  thrpt    5     80688.015 ±       0.002    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   128  thrpt    5         0.036 ±       0.206  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              128  thrpt    5         2.072 ±      11.925    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                         128  thrpt    5      1357.179 ±      13.608  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5     78422.188 ±    1776.564    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                  128  thrpt    5         0.799 ±       6.882  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                             128  thrpt    5        46.397 ±     399.494    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.count                                                                    128  thrpt    5        10.000                counts
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.time                                                                     128  thrpt    5        35.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readCirce                                                                        128  thrpt    5      6342.107 ±     182.852   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate                                                         128  thrpt    5       976.377 ±      28.479  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                                    128  thrpt    5    242296.065 ±       0.011    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       949.264 ±    1429.777  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5    236066.789 ±  361722.512    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count                                                              128  thrpt    5         7.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time                                                               128  thrpt    5        27.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala                                                                 128  thrpt    5      6690.941 ±      81.373   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                                  128  thrpt    5       964.366 ±      11.722  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                             128  thrpt    5    226864.063 ±       0.010    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                            128  thrpt    5       948.131 ±    1427.821  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                       128  thrpt    5    223219.482 ±  338329.532    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                     128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                128  thrpt    5        31.479 ±     271.046    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.count                                                       128  thrpt    5         7.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.time                                                        128  thrpt    5        33.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala                                                                128  thrpt    5    149713.869 ±    4382.266   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                                 128  thrpt    5      1450.254 ±      42.317  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                            128  thrpt    5     15248.003 ±       0.001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                     128  thrpt    5         0.021 ±       0.143  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                128  thrpt    5         0.218 ±       1.515    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                           128  thrpt    5      1495.764 ±    1180.347  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                      128  thrpt    5     15739.083 ±   12769.065    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                    128  thrpt    5         0.533 ±       4.588  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                               128  thrpt    5         5.588 ±      48.114    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count                                                      128  thrpt    5        11.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time                                                       128  thrpt    5        29.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson                                                                     128  thrpt    5      6213.066 ±     170.193   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                                      128  thrpt    5      1130.227 ±      31.047  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                 128  thrpt    5    286296.067 ±       0.010    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                128  thrpt    5      1083.689 ±    1428.425  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5    274350.041 ±  359877.409    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         0.933 ±       6.688  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5       233.814 ±    1672.740    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count                                                           128  thrpt    5         8.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time                                                            128  thrpt    5        36.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce                                                                       128  thrpt    5     18090.440 ±     311.688   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate                                                        128  thrpt    5       820.782 ±      13.846  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                                   128  thrpt    5     71414.564 ±      40.286    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                  128  thrpt    5       813.655 ±    1167.637  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5     70870.067 ±  103040.236    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count                                                             128  thrpt    5         6.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time                                                              128  thrpt    5        24.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala                                                                128  thrpt    5     19613.448 ±    1690.606   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                                 128  thrpt    5       831.113 ±      71.525  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                            128  thrpt    5     66696.022 ±       0.008    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                           128  thrpt    5       812.881 ±    1166.880  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                      128  thrpt    5     65572.580 ±   99801.927    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.count                                                      128  thrpt    5         6.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.time                                                       128  thrpt    5        36.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala                                                               128  thrpt    5    621283.751 ±   18239.252   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                                128  thrpt    5      1408.508 ±      41.904  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                           128  thrpt    5      3568.001 ±       0.001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                    128  thrpt    5         0.034 ±       0.289  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               128  thrpt    5         0.086 ±       0.732    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                          128  thrpt    5      1358.400 ±      15.241  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                     128  thrpt    5      3441.221 ±     103.069    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                   128  thrpt    5         0.933 ±       6.690  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                              128  thrpt    5         2.361 ±      16.966    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count                                                     128  thrpt    5        10.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time                                                      128  thrpt    5        30.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc                                                       128  thrpt    5    490131.226 ±     815.091   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                        128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                   128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                             128  thrpt    5           ≈ 0                counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson                                                                    128  thrpt    5     18777.968 ±     609.356   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                                     128  thrpt    5       865.743 ±      27.915  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                                128  thrpt    5     72563.985 ±      26.689    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                               128  thrpt    5       948.371 ±    1428.537  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5     79638.264 ±  121800.396    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count                                                          128  thrpt    5         7.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time                                                           128  thrpt    5        31.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readCirce                                                                            128  thrpt    5     11211.005 ±      63.200   ops/s
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate                                                             128  thrpt    5      1126.303 ±       6.550  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm                                                        128  thrpt    5    158112.039 ±       0.020    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                       128  thrpt    5      1220.564 ±    1167.808  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5    171381.359 ±  164412.463    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                128  thrpt    5         0.666 ±       5.735  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                           128  thrpt    5        93.631 ±     806.193    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.count                                                                  128  thrpt    5         9.000                counts
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.time                                                                   128  thrpt    5        33.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala                                                                     128  thrpt    5     11090.955 ±     601.401   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate                                                      128  thrpt    5      1015.248 ±      54.951  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                 128  thrpt    5    144082.349 ±      50.813    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5      1083.647 ±    1428.244  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5    154080.300 ±  206148.948    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5        19.133 ±     164.740    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count                                                           128  thrpt    5         8.000                counts
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time                                                            128  thrpt    5        39.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala                                                                    128  thrpt    5    249371.471 ±    2028.324   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                                     128  thrpt    5      1442.339 ±      11.903  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                128  thrpt    5      9104.002 ±       0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                         128  thrpt    5         0.021 ±       0.178  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    128  thrpt    5         0.131 ±       1.124    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5      1495.058 ±    1182.404  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5      9435.109 ±    7413.415    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                        128  thrpt    5         0.666 ±       5.735  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                   128  thrpt    5         4.208 ±      36.235    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count                                                          128  thrpt    5        11.000                counts
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time                                                           128  thrpt    5        27.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readPlayJson                                                                         128  thrpt    5     10406.985 ±     252.313   ops/s
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate                                                          128  thrpt    5      1302.658 ±      31.524  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                     128  thrpt    5    197000.040 ±       0.011    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                              128  thrpt    5         0.003 ±       0.023  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         128  thrpt    5         0.404 ±       3.476    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                    128  thrpt    5      1356.709 ±      14.732  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5    205178.636 ±    3817.944    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         1.199 ±       7.565  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5       181.678 ±    1145.423    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.count                                                               128  thrpt    5        10.000                counts
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.time                                                                128  thrpt    5        41.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeCirce                                                                           128  thrpt    5     27750.943 ±     418.543   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate                                                            128  thrpt    5       957.766 ±      13.939  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                                       128  thrpt    5     54312.015 ±       0.002    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                      128  thrpt    5       949.307 ±    1429.472  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5     53837.150 ±   81126.769    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                               128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                          128  thrpt    5         7.593 ±      65.377    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count                                                                 128  thrpt    5         7.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time                                                                  128  thrpt    5        28.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala                                                                    128  thrpt    5     76988.980 ±    2985.072   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                                     128  thrpt    5      1225.747 ±      47.801  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                128  thrpt    5     25056.005 ±       0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                         128  thrpt    5         0.025 ±       0.217  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    128  thrpt    5         0.520 ±       4.479    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5      1221.070 ±    1170.088  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5     25001.091 ±   24429.877    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                        128  thrpt    5         0.800 ±       6.884  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                   128  thrpt    5        16.276 ±     140.142    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.count                                                          128  thrpt    5         9.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.time                                                           128  thrpt    5        35.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala                                                                   128  thrpt    5    980432.424 ±   10914.001   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                                    128  thrpt    5      1345.464 ±      15.298  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                               128  thrpt    5      2160.000 ±       0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                        128  thrpt    5         0.038 ±       0.205  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   128  thrpt    5         0.062 ±       0.328    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                              128  thrpt    5      1357.197 ±      13.448  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5      2178.844 ±      20.232    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                       128  thrpt    5         0.799 ±       6.882  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                  128  thrpt    5         1.283 ±      11.044    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count                                                         128  thrpt    5        10.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time                                                          128  thrpt    5        29.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc                                                           128  thrpt    5   1112658.000 ±    2865.740   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                            128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                       128  thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                 128  thrpt    5           ≈ 0                counts
[info] ArrayOfOffsetTimesBenchmark.writePlayJson                                                                        128  thrpt    5     66377.985 ±    1010.323   ops/s
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate                                                         128  thrpt    5      1301.248 ±      19.885  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                                    128  thrpt    5     30856.006 ±       0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                             128  thrpt    5         0.036 ±       0.269  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        128  thrpt    5         0.858 ±       6.388    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                   128  thrpt    5      1356.653 ±      15.521  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5     32170.425 ±     806.093    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         1.199 ±       6.124  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5        28.510 ±     146.132    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.count                                                              128  thrpt    5        10.000                counts
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.time                                                               128  thrpt    5        41.000                    ms
[info] ArrayOfPeriodsBenchmark.readCirce                                                                                128  thrpt    5     19470.006 ±     834.148   ops/s
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate                                                                 128  thrpt    5       704.182 ±      29.899  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm                                                            128  thrpt    5     56920.023 ±       0.009    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                           128  thrpt    5       678.263 ±       1.183  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                      128  thrpt    5     54830.198 ±    2295.212    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                    128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                               128  thrpt    5        10.713 ±      92.241    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.count                                                                      128  thrpt    5         5.000                counts
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.time                                                                       128  thrpt    5        19.000                    ms
[info] ArrayOfPeriodsBenchmark.readJacksonScala                                                                         128  thrpt    5     14949.249 ±     923.394   ops/s
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate                                                          128  thrpt    5       418.747 ±      25.688  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                     128  thrpt    5     44088.212 ±       1.571    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       406.463 ±    1428.776  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5     43160.960 ±  151748.224    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count                                                               128  thrpt    5         3.000                counts
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time                                                                128  thrpt    5        14.000                    ms
[info] ArrayOfPeriodsBenchmark.readJsoniterScala                                                                        128  thrpt    5    100604.139 ±    1230.479   ops/s
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate                                                         128  thrpt    5       252.603 ±       3.119  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                    128  thrpt    5      3952.004 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       271.484 ±    1431.457  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5      4256.881 ±   22445.482    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count                                                              128  thrpt    5         2.000                counts
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time                                                               128  thrpt    5         6.000                    ms
[info] ArrayOfPeriodsBenchmark.readPlayJson                                                                             128  thrpt    5     13623.173 ±     212.501   ops/s
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate                                                              128  thrpt    5       860.234 ±      13.360  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                         128  thrpt    5     99392.032 ±       0.013    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                        128  thrpt    5       812.841 ±    1166.484  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5     93908.875 ±  134617.481    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.count                                                                   128  thrpt    5         6.000                counts
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.time                                                                    128  thrpt    5        28.000                    ms
[info] ArrayOfPeriodsBenchmark.writeCirce                                                                               128  thrpt    5     58445.566 ±     385.213   ops/s
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate                                                                128  thrpt    5      1042.625 ±       7.052  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm                                                           128  thrpt    5     28072.007 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                          128  thrpt    5      1084.675 ±    1429.008  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                     128  thrpt    5     29214.744 ±   38604.799    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.count                                                                     128  thrpt    5         8.000                counts
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.time                                                                      128  thrpt    5        32.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJacksonScala                                                                        128  thrpt    5     81177.978 ±    2698.252   ops/s
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate                                                         128  thrpt    5      1161.176 ±      38.677  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                    128  thrpt    5     22512.005 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                             128  thrpt    5         0.024 ±       0.211  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        128  thrpt    5         0.473 ±       4.075    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                   128  thrpt    5      1084.789 ±    1432.179  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5     21012.210 ±   27523.259    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         0.800 ±       6.884  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5        15.448 ±     133.012    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count                                                              128  thrpt    5         8.000                counts
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time                                                               128  thrpt    5        33.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala                                                                       128  thrpt    5    251000.989 ±   18380.095   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                        128  thrpt    5       480.916 ±      35.275  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                   128  thrpt    5      3016.002 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                  128  thrpt    5       542.015 ±    1166.729  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5      3403.588 ±    7333.257    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count                                                             128  thrpt    5         4.000                counts
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time                                                              128  thrpt    5        14.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc                                                               128  thrpt    5    311049.714 ±    1383.307   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                           128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                     128  thrpt    5           ≈ 0                counts
[info] ArrayOfPeriodsBenchmark.writePlayJson                                                                            128  thrpt    5     73440.175 ±     776.621   ops/s
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate                                                             128  thrpt    5      1181.520 ±      11.856  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                        128  thrpt    5     25320.006 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                 128  thrpt    5         0.004 ±       0.037  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                            128  thrpt    5         0.091 ±       0.785    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                       128  thrpt    5      1220.246 ±    1168.558  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5     26160.278 ±   25174.678    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                128  thrpt    5         0.799 ±       6.882  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                           128  thrpt    5        17.112 ±     147.339    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.count                                                                  128  thrpt    5         9.000                counts
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.time                                                                   128  thrpt    5        37.000                    ms
[info] ArrayOfShortsBenchmark.readCirce                                                                                 128  thrpt    5    123310.309 ±    2257.437   ops/s
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate                                                                  128  thrpt    5      1786.258 ±      32.641  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm                                                             128  thrpt    5     22800.003 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                      128  thrpt    5         0.015 ±       0.092  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                 128  thrpt    5         0.193 ±       1.169    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                            128  thrpt    5      1769.014 ±    1428.195  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                       128  thrpt    5     22569.216 ±   17999.239    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                     128  thrpt    5         0.666 ±       5.736  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                                128  thrpt    5         8.444 ±      72.702    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.count                                                                       128  thrpt    5        13.000                counts
[info] ArrayOfShortsBenchmark.readCirce:·gc.time                                                                        128  thrpt    5        26.000                    ms
[info] ArrayOfShortsBenchmark.readDslJsonJava                                                                           128  thrpt    5    636390.765 ±    9204.692   ops/s
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate                                                            128  thrpt    5       352.591 ±       5.022  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                       128  thrpt    5       872.001 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                      128  thrpt    5       269.939 ±    1423.310  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5       670.205 ±    3533.797    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.count                                                                 128  thrpt    5         2.000                counts
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.time                                                                  128  thrpt    5        11.000                    ms
[info] ArrayOfShortsBenchmark.readJacksonScala                                                                          128  thrpt    5    340755.478 ±    4377.631   ops/s
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate                                                           128  thrpt    5       355.077 ±       4.459  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                      128  thrpt    5      1640.001 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       406.489 ±    1428.865  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5      1881.319 ±    6613.108    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.count                                                                128  thrpt    5         3.000                counts
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.time                                                                 128  thrpt    5        14.000                    ms
[info] ArrayOfShortsBenchmark.readJsoniterScala                                                                         128  thrpt    5    758627.664 ±    8738.627   ops/s
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate                                                          128  thrpt    5       262.207 ±       3.118  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                     128  thrpt    5       544.001 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       271.342 ±    1430.709  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5       564.851 ±    2978.301    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.count                                                               128  thrpt    5         2.000                counts
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.time                                                                128  thrpt    5         7.000                    ms
[info] ArrayOfShortsBenchmark.readPlayJson                                                                              128  thrpt    5     73771.505 ±    1350.704   ops/s
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate                                                               128  thrpt    5      3162.328 ±      57.441  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                          128  thrpt    5     67472.006 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   128  thrpt    5         0.003 ±       0.008  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              128  thrpt    5         0.069 ±       0.161    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                         128  thrpt    5      3270.589 ±    1173.675  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5     69792.185 ±   25481.585    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.count                                                                    128  thrpt    5        24.000                counts
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.time                                                                     128  thrpt    5        44.000                    ms
[info] ArrayOfShortsBenchmark.writeCirce                                                                                128  thrpt    5    280037.505 ±    1412.798   ops/s
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate                                                                 128  thrpt    5      1463.331 ±       6.493  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm                                                            128  thrpt    5      8224.001 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                     128  thrpt    5         0.029 ±       0.224  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                128  thrpt    5         0.162 ±       1.260    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                           128  thrpt    5      1495.063 ±    1181.849  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                      128  thrpt    5      8401.517 ±    6617.474    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                    128  thrpt    5         0.799 ±       5.562  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                               128  thrpt    5         4.498 ±      31.293    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.count                                                                      128  thrpt    5        11.000                counts
[info] ArrayOfShortsBenchmark.writeCirce:·gc.time                                                                       128  thrpt    5        30.000                    ms
[info] ArrayOfShortsBenchmark.writeDslJsonJava                                                                          128  thrpt    5   1505976.635 ±   42800.960   ops/s
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                           128  thrpt    5       512.848 ±      14.541  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                      128  thrpt    5       536.000 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       404.861 ±    1423.143  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5       423.727 ±    1489.511    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.count                                                                128  thrpt    5         3.000                counts
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.time                                                                 128  thrpt    5        16.000                    ms
[info] ArrayOfShortsBenchmark.writeJacksonScala                                                                         128  thrpt    5   1506258.660 ±   36395.300   ops/s
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate                                                          128  thrpt    5       880.561 ±      21.078  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                     128  thrpt    5       920.000 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       948.494 ±    1428.600  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5       992.148 ±    1508.750    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.count                                                               128  thrpt    5         7.000                counts
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.time                                                                128  thrpt    5        32.000                    ms
[info] ArrayOfShortsBenchmark.writeJsoniterScala                                                                        128  thrpt    5   1600505.300 ±   20363.950   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                         128  thrpt    5       545.072 ±       7.130  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                    128  thrpt    5       536.000 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       677.457 ±       1.615  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5       666.190 ±      10.217    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5         0.131 ±       1.128    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count                                                              128  thrpt    5         5.000                counts
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time                                                               128  thrpt    5        17.000                    ms
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc                                                                128  thrpt    5   1815740.695 ±   12145.348   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                 128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                            128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                      128  thrpt    5           ≈ 0                counts
[info] ArrayOfShortsBenchmark.writePlayJson                                                                             128  thrpt    5     35055.082 ±     597.794   ops/s
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate                                                              128  thrpt    5      1625.332 ±      28.645  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                         128  thrpt    5     72976.012 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  128  thrpt    5         0.043 ±       0.359  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             128  thrpt    5         1.943 ±      16.194    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                        128  thrpt    5      1631.363 ±    1443.711  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5     73303.694 ±   66087.049    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                 128  thrpt    5         0.799 ±       6.881  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                            128  thrpt    5        36.084 ±     310.696    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.count                                                                   128  thrpt    5        12.000                counts
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.time                                                                    128  thrpt    5        33.000                    ms
[info] ArrayOfUUIDsBenchmark.readCirce                                                                                  128  thrpt    5     46025.019 ±    1070.674   ops/s
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate                                                                   128  thrpt    5       918.868 ±      21.437  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm                                                              128  thrpt    5     31424.009 ±       0.001    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                             128  thrpt    5       949.273 ±    1429.991  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                        128  thrpt    5     32499.257 ±   49395.485    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.count                                                                        128  thrpt    5         7.000                counts
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.time                                                                         128  thrpt    5        25.000                    ms
[info] ArrayOfUUIDsBenchmark.readJacksonScala                                                                           128  thrpt    5     80397.385 ±    4557.190   ops/s
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate                                                            128  thrpt    5       847.497 ±      47.794  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                       128  thrpt    5     16592.005 ±       0.001    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                      128  thrpt    5       948.236 ±    1428.131  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5     18583.804 ±   28210.486    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                               128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                          128  thrpt    5         2.643 ±      22.753    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count                                                                 128  thrpt    5         7.000                counts
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time                                                                  128  thrpt    5        30.000                    ms
[info] ArrayOfUUIDsBenchmark.readJsoniterScala                                                                          128  thrpt    5    260229.901 ±    9274.757   ops/s
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate                                                           128  thrpt    5       846.490 ±      30.497  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                      128  thrpt    5      5120.002 ±       0.001    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       813.669 ±    1167.548  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5      4931.438 ±    7249.401    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count                                                                128  thrpt    5         6.000                counts
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time                                                                 128  thrpt    5        21.000                    ms
[info] ArrayOfUUIDsBenchmark.readPlayJson                                                                               128  thrpt    5     24273.360 ±     465.384   ops/s
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate                                                                128  thrpt    5      1140.790 ±      21.851  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                           128  thrpt    5     73976.017 ±       0.002    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                          128  thrpt    5      1083.791 ±    1428.610  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                     128  thrpt    5     70371.117 ±   93749.428    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                   128  thrpt    5         0.799 ±       6.883  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                              128  thrpt    5        51.536 ±     443.736    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.count                                                                     128  thrpt    5         8.000                counts
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.time                                                                      128  thrpt    5        40.000                    ms
[info] ArrayOfUUIDsBenchmark.writeCirce                                                                                 128  thrpt    5     58059.945 ±     542.625   ops/s
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate                                                                  128  thrpt    5       861.361 ±       7.983  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm                                                             128  thrpt    5     23352.007 ±       0.001    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                            128  thrpt    5       813.656 ±    1167.635  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                       128  thrpt    5     22074.474 ±   31958.939    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.count                                                                       128  thrpt    5         6.000                counts
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.time                                                                        128  thrpt    5        23.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJacksonScala                                                                          128  thrpt    5     90351.511 ±    1265.034   ops/s
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate                                                           128  thrpt    5      1237.508 ±      17.348  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                      128  thrpt    5     21560.000 ±       0.071    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                               128  thrpt    5         0.013 ±       0.114  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          128  thrpt    5         0.229 ±       1.974    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                     128  thrpt    5      1220.838 ±    1169.923  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5     21274.798 ±   20448.024    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         0.799 ±       6.882  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5        13.958 ±     120.180    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count                                                                128  thrpt    5         9.000                counts
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time                                                                 128  thrpt    5        42.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala                                                                         128  thrpt    5    290835.494 ±    8889.772   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                          128  thrpt    5       926.860 ±      27.745  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                     128  thrpt    5      5016.001 ±       0.001    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       948.527 ±    1428.059  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5      5130.537 ±    7687.580    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5         0.720 ±       6.197    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count                                                               128  thrpt    5         7.000                counts
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time                                                                128  thrpt    5        25.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc                                                                 128  thrpt    5    320006.552 ±   28222.597   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                  128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                             128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                       128  thrpt    5           ≈ 0                counts
[info] ArrayOfUUIDsBenchmark.writePlayJson                                                                              128  thrpt    5     78388.823 ±     740.582   ops/s
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate                                                               128  thrpt    5      1161.881 ±      10.706  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                          128  thrpt    5     23328.000 ±       0.083    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                         128  thrpt    5      1083.922 ±    1428.903  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5     21773.149 ±   28816.200    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                  128  thrpt    5         0.800 ±       6.884  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                             128  thrpt    5        16.044 ±     138.146    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.count                                                                    128  thrpt    5         8.000                counts
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.time                                                                     128  thrpt    5        36.000                    ms
[info] ArrayOfYearMonthsBenchmark.readCirce                                                                             128  thrpt    5     23436.114 ±     492.411   ops/s
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate                                                              128  thrpt    5      1220.854 ±      26.101  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate.norm                                                         128  thrpt    5     81984.018 ±       0.002    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  128  thrpt    5         0.008 ±       0.067  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             128  thrpt    5         0.514 ±       4.425    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                        128  thrpt    5      1221.360 ±    1169.609  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5     82010.146 ±   78436.786    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                 128  thrpt    5         0.666 ±       5.737  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                            128  thrpt    5        44.317 ±     381.580    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.count                                                                   128  thrpt    5         9.000                counts
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.time                                                                    128  thrpt    5        32.000                    ms
[info] ArrayOfYearMonthsBenchmark.readJacksonScala                                                                      128  thrpt    5     26438.939 ±     814.953   ops/s
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate                                                       128  thrpt    5      1035.502 ±      31.950  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                  128  thrpt    5     61648.016 ±       0.002    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                 128  thrpt    5       947.945 ±    1427.633  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5     56551.361 ±   86593.944    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                          128  thrpt    5         0.266 ±       1.405  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                     128  thrpt    5        15.873 ±      83.694    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.count                                                            128  thrpt    5         7.000                counts
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.time                                                             128  thrpt    5        32.000                    ms
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala                                                                     128  thrpt    5    475713.773 ±   19098.755   ops/s
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate                                                      128  thrpt    5      1238.019 ±      48.831  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                 128  thrpt    5      4096.001 ±       0.001    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                          128  thrpt    5         0.032 ±       0.274  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     128  thrpt    5         0.105 ±       0.904    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5      1221.959 ±    1171.046  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5      4046.754 ±    3923.569    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         0.666 ±       5.736  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5         2.199 ±      18.932    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.count                                                           128  thrpt    5         9.000                counts
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.time                                                            128  thrpt    5        27.000                    ms
[info] ArrayOfYearMonthsBenchmark.readPlayJson                                                                          128  thrpt    5     20547.543 ±     311.916   ops/s
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate                                                           128  thrpt    5      1562.564 ±      23.045  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                      128  thrpt    5    119680.021 ±       0.009    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                               128  thrpt    5         0.012 ±       0.100  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          128  thrpt    5         0.889 ±       7.600    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                     128  thrpt    5      1494.992 ±    1182.650  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5    114461.078 ±   89249.476    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         0.933 ±       6.689  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5        71.211 ±     510.363    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.count                                                                128  thrpt    5        11.000                counts
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.time                                                                 128  thrpt    5        35.000                    ms
[info] ArrayOfYearMonthsBenchmark.writeCirce                                                                            128  thrpt    5     68770.620 ±    1896.278   ops/s
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate                                                             128  thrpt    5      1455.597 ±      40.209  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate.norm                                                        128  thrpt    5     33312.006 ±       0.001    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                 128  thrpt    5         0.030 ±       0.255  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                            128  thrpt    5         0.676 ±       5.821    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                       128  thrpt    5      1358.913 ±      13.714  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5     31100.335 ±     697.084    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                128  thrpt    5         0.666 ±       5.735  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                           128  thrpt    5        15.432 ±     132.874    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.count                                                                  128  thrpt    5        10.000                counts
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.time                                                                   128  thrpt    5        28.000                    ms
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala                                                                     128  thrpt    5    156493.459 ±    5627.611   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate                                                      128  thrpt    5      1185.988 ±      42.434  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                 128  thrpt    5     11928.003 ±       0.001    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                          128  thrpt    5         0.014 ±       0.118  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     128  thrpt    5         0.138 ±       1.188    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5      1084.681 ±    1424.568  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5     10907.714 ±   14309.949    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         0.799 ±       6.882  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5         7.929 ±      68.268    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.count                                                           128  thrpt    5         8.000                counts
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.time                                                            128  thrpt    5        33.000                    ms
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala                                                                    128  thrpt    5   1745816.713 ±   49348.144   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                     128  thrpt    5      1446.384 ±      41.195  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                128  thrpt    5      1304.000 ±       0.001    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                         128  thrpt    5         0.034 ±       0.183  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    128  thrpt    5         0.031 ±       0.166    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5      1494.603 ±    1165.782  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5      1349.097 ±    1098.358    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                        128  thrpt    5         0.932 ±       6.688  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                   128  thrpt    5         0.849 ±       6.109    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.count                                                          128  thrpt    5        11.000                counts
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.time                                                           128  thrpt    5        29.000                    ms
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc                                                            128  thrpt    5   1942065.044 ±    3728.228   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                             128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                        128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                  128  thrpt    5           ≈ 0                counts
[info] ArrayOfYearMonthsBenchmark.writePlayJson                                                                         128  thrpt    5    119729.353 ±    1770.457   ops/s
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate                                                          128  thrpt    5      1348.686 ±      20.458  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                     128  thrpt    5     17728.003 ±       0.001    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                              128  thrpt    5         0.011 ±       0.057  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         128  thrpt    5         0.142 ±       0.752    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                    128  thrpt    5      1357.746 ±      18.632  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5     17847.119 ±      56.583    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         1.066 ±       7.821  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5        14.059 ±     103.211    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.count                                                               128  thrpt    5        10.000                counts
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.time                                                                128  thrpt    5        34.000                    ms
[info] ArrayOfYearsBenchmark.readJacksonScala                                                                           128  thrpt    5     33377.645 ±    1032.127   ops/s
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate                                                            128  thrpt    5      1198.825 ±      37.155  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                       128  thrpt    5     56528.013 ±       0.002    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                128  thrpt    5         0.014 ±       0.121  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           128  thrpt    5         0.660 ±       5.684    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                      128  thrpt    5      1221.014 ±    1169.936  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5     57610.946 ±   55626.707    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                               128  thrpt    5         0.799 ±       6.883  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                          128  thrpt    5        37.651 ±     324.185    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.count                                                                 128  thrpt    5         9.000                counts
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.time                                                                  128  thrpt    5        36.000                    ms
[info] ArrayOfYearsBenchmark.readJsoniterScala                                                                          128  thrpt    5    672075.338 ±   19841.300   ops/s
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate                                                           128  thrpt    5      1311.793 ±      39.285  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                      128  thrpt    5      3072.001 ±       0.001    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                               128  thrpt    5         0.027 ±       0.159  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          128  thrpt    5         0.062 ±       0.371    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                     128  thrpt    5      1358.223 ±      11.220  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5      3180.890 ±     101.541    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         0.666 ±       5.736  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5         1.571 ±      13.524    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.count                                                                128  thrpt    5        10.000                counts
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.time                                                                 128  thrpt    5        31.000                    ms
[info] ArrayOfYearsBenchmark.readPlayJson                                                                               128  thrpt    5     25293.240 ±     626.822   ops/s
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate                                                                128  thrpt    5      1841.201 ±      45.799  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                           128  thrpt    5    114560.017 ±       0.003    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                    128  thrpt    5         0.012 ±       0.063  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                               128  thrpt    5         0.742 ±       3.915    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                          128  thrpt    5      1904.413 ±    1165.944  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                     128  thrpt    5    118545.751 ±   73743.373    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                   128  thrpt    5         0.933 ±       8.032  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                              128  thrpt    5        58.331 ±     502.244    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.count                                                                     128  thrpt    5        14.000                counts
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.time                                                                      128  thrpt    5        33.000                    ms
[info] ArrayOfYearsBenchmark.writeJacksonScala                                                                          128  thrpt    5    358413.060 ±    5738.797   ops/s
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate                                                           128  thrpt    5       996.489 ±      16.144  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                      128  thrpt    5      4376.001 ±       0.001    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                     128  thrpt    5      1083.727 ±    1429.392  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5      4762.550 ±    6319.012    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5         0.585 ±       5.040    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.count                                                                128  thrpt    5         8.000                counts
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.time                                                                 128  thrpt    5        34.000                    ms
[info] ArrayOfYearsBenchmark.writeJsoniterScala                                                                         128  thrpt    5   2219527.168 ±  134357.392   ops/s
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                          128  thrpt    5      1297.517 ±      77.570  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                     128  thrpt    5       920.000 ±       0.001    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                              128  thrpt    5         0.034 ±       0.190  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         128  thrpt    5         0.025 ±       0.138    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5      1357.261 ±      12.117  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5       962.574 ±      66.052    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         0.933 ±       6.691  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5         0.666 ±       4.793    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.count                                                               128  thrpt    5        10.000                counts
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.time                                                                128  thrpt    5        30.000                    ms
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc                                                                 128  thrpt    5   2258299.311 ±    2855.406   ops/s
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                  128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                             128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                       128  thrpt    5           ≈ 0                counts
[info] ArrayOfYearsBenchmark.writePlayJson                                                                              128  thrpt    5    237851.292 ±   11803.320   ops/s
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate                                                               128  thrpt    5      1537.727 ±      76.359  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                          128  thrpt    5     10176.002 ±       0.001    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   128  thrpt    5         0.023 ±       0.149  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              128  thrpt    5         0.152 ±       0.984    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                         128  thrpt    5      1494.812 ±    1174.642  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5      9888.609 ±    7647.714    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                  128  thrpt    5         0.933 ±       6.689  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                             128  thrpt    5         6.150 ±      44.046    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.count                                                                    128  thrpt    5        11.000                counts
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.time                                                                     128  thrpt    5        33.000                    ms
[info] ArrayOfZoneIdsBenchmark.readCirce                                                                                128  thrpt    5     70421.818 ±    2526.644   ops/s
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate                                                                 128  thrpt    5      1414.946 ±      50.987  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm                                                            128  thrpt    5     31624.006 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                     128  thrpt    5         0.038 ±       0.326  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                128  thrpt    5         0.848 ±       7.298    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                           128  thrpt    5      1493.528 ±    1159.641  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                      128  thrpt    5     33386.445 ±   26058.952    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                    128  thrpt    5         0.799 ±       6.882  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                               128  thrpt    5        17.889 ±     154.027    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.count                                                                      128  thrpt    5        11.000                counts
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.time                                                                       128  thrpt    5        39.000                    ms
[info] ArrayOfZoneIdsBenchmark.readJacksonScala                                                                         128  thrpt    5     76513.693 ±    2936.749   ops/s
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate                                                          128  thrpt    5       882.010 ±      34.144  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                     128  thrpt    5     18144.005 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       947.441 ±    1427.199  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5     19537.521 ±   30012.396    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count                                                               128  thrpt    5         7.000                counts
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time                                                                128  thrpt    5        34.000                    ms
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala                                                                        128  thrpt    5    101350.642 ±    2855.403   ops/s
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate                                                         128  thrpt    5      1067.428 ±      30.316  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                    128  thrpt    5     16576.004 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                   128  thrpt    5      1083.981 ±    1429.229  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5     16818.783 ±   22017.189    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count                                                              128  thrpt    5         8.000                counts
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time                                                               128  thrpt    5        29.000                    ms
[info] ArrayOfZoneIdsBenchmark.readPlayJson                                                                             128  thrpt    5     37128.681 ±     427.088   ops/s
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate                                                              128  thrpt    5      1854.150 ±      21.957  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                         128  thrpt    5     78600.011 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  128  thrpt    5         0.028 ±       0.186  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             128  thrpt    5         1.185 ±       7.926    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                        128  thrpt    5      1768.684 ±    1443.897  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5     74994.175 ±   61563.359    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                 128  thrpt    5         1.066 ±       7.821  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                            128  thrpt    5        45.384 ±     333.375    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count                                                                   128  thrpt    5        13.000                counts
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time                                                                    128  thrpt    5        27.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeCirce                                                                               128  thrpt    5    128806.572 ±    8428.511   ops/s
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate                                                                128  thrpt    5       571.533 ±      37.330  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm                                                           128  thrpt    5      6984.003 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                          128  thrpt    5       541.653 ±    1165.949  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                     128  thrpt    5      6644.436 ±   14311.324    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                   128  thrpt    5         0.266 ±       1.405  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                              128  thrpt    5         3.235 ±      17.060    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.count                                                                     128  thrpt    5         4.000                counts
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.time                                                                      128  thrpt    5        17.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala                                                                        128  thrpt    5    175801.213 ±    6168.415   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate                                                         128  thrpt    5       260.907 ±       9.170  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                    128  thrpt    5      2336.002 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       270.686 ±    1427.250  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5      2445.759 ±   12896.068    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count                                                              128  thrpt    5         2.000                counts
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time                                                               128  thrpt    5         9.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala                                                                       128  thrpt    5    730436.883 ±  120559.559   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                        128  thrpt    5       905.940 ±     149.411  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                   128  thrpt    5      1952.001 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                  128  thrpt    5       948.449 ±    1428.837  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5      2062.920 ±    3337.130    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count                                                             128  thrpt    5         7.000                counts
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time                                                              128  thrpt    5        26.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc                                                               128  thrpt    5    753673.771 ±   16841.594   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                           128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                     128  thrpt    5           ≈ 0                counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson                                                                            128  thrpt    5    189595.708 ±    6392.658   ops/s
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate                                                             128  thrpt    5       617.718 ±      20.552  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                        128  thrpt    5      5128.002 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                       128  thrpt    5       541.422 ±    1165.451  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5      4498.659 ±    9685.483    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count                                                                  128  thrpt    5         4.000                counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time                                                                   128  thrpt    5        19.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readCirce                                                                            128  thrpt    5    127044.966 ±    2264.036   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate                                                             128  thrpt    5      1564.663 ±      28.305  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate.norm                                                        128  thrpt    5     19384.003 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                 128  thrpt    5         0.028 ±       0.169  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                            128  thrpt    5         0.346 ±       2.087    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                       128  thrpt    5      1631.405 ±    1433.816  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5     20218.685 ±   17936.954    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                128  thrpt    5         0.666 ±       5.735  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                           128  thrpt    5         8.218 ±      70.761    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.count                                                                  128  thrpt    5        12.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.time                                                                   128  thrpt    5        37.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala                                                                     128  thrpt    5    161163.144 ±    2657.558   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate                                                      128  thrpt    5       860.151 ±      13.905  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                 128  thrpt    5      8400.003 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5       948.377 ±    1429.901  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5      9272.088 ±   14110.207    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5         1.296 ±      11.162    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count                                                           128  thrpt    5         7.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time                                                            128  thrpt    5        33.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala                                                                    128  thrpt    5    445053.829 ±    2226.681   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate                                                     128  thrpt    5       864.028 ±       4.323  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                128  thrpt    5      3056.001 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5       813.610 ±    1167.585  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5      2878.103 ±    4137.833    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count                                                          128  thrpt    5         6.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time                                                           128  thrpt    5        21.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson                                                                         128  thrpt    5     63660.685 ±     567.132   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate                                                          128  thrpt    5      2687.736 ±      23.809  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                     128  thrpt    5     66448.007 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                              128  thrpt    5         0.008 ±       0.070  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         128  thrpt    5         0.201 ±       1.726    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                    128  thrpt    5      2589.469 ±    1173.926  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5     64024.085 ±   29208.118    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.count                                                               128  thrpt    5        19.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.time                                                                128  thrpt    5        24.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeCirce                                                                           128  thrpt    5    183196.113 ±    1638.856   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate                                                            128  thrpt    5       630.388 ±       5.884  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate.norm                                                       128  thrpt    5      5416.002 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                      128  thrpt    5       678.090 ±       0.348  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5      5825.855 ±      52.557    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.count                                                                 128  thrpt    5         5.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.time                                                                  128  thrpt    5        19.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala                                                                    128  thrpt    5    306197.695 ±    4569.311   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate                                                     128  thrpt    5       301.951 ±       4.325  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                128  thrpt    5      1552.001 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5       271.047 ±    1429.155  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5      1398.475 ±    7373.765    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count                                                          128  thrpt    5         2.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time                                                           128  thrpt    5        10.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala                                                                   128  thrpt    5   1540794.792 ±   38053.973   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                    128  thrpt    5      1143.662 ±      28.774  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                               128  thrpt    5      1168.000 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                              128  thrpt    5      1083.504 ±    1427.369  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5      1107.810 ±    1472.958    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                       128  thrpt    5         0.932 ±       6.688  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                  128  thrpt    5         0.949 ±       6.811    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count                                                         128  thrpt    5         8.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time                                                          128  thrpt    5        28.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc                                                           128  thrpt    5   1619208.360 ±   40117.013   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                            128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                       128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                 128  thrpt    5           ≈ 0                counts
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson                                                                        128  thrpt    5    280673.778 ±    1337.505   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate                                                         128  thrpt    5       763.316 ±       3.903  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                    128  thrpt    5      4280.001 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       677.090 ±       1.159  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5      3796.531 ±      23.836    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         0.266 ±       1.405  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5         1.494 ±       7.875    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.count                                                              128  thrpt    5         5.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.time                                                               128  thrpt    5        24.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readCirce                                                                         128  thrpt    5      4486.460 ±      97.531   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate                                                          128  thrpt    5       883.200 ±      19.190  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                                     128  thrpt    5    309840.094 ±       0.017    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       945.453 ±    1424.455  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5    332244.314 ±  507562.086    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count                                                               128  thrpt    5         7.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time                                                                128  thrpt    5        32.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala                                                                  128  thrpt    5      4467.367 ±      65.654   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                                   128  thrpt    5       830.024 ±      12.257  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                              128  thrpt    5    292424.096 ±       0.016    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                             128  thrpt    5       809.634 ±    1162.261  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                        128  thrpt    5    285350.857 ±  411561.737    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.count                                                        128  thrpt    5         6.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.time                                                         128  thrpt    5        34.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala                                                                 128  thrpt    5     43195.280 ±     794.449   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                                  128  thrpt    5       707.981 ±      13.067  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                             128  thrpt    5     25800.010 ±       0.001    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                            128  thrpt    5       810.815 ±    1163.517  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                       128  thrpt    5     29581.373 ±   43048.777    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                     128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                128  thrpt    5         4.825 ±      41.541    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count                                                       128  thrpt    5         6.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time                                                        128  thrpt    5        25.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson                                                                      128  thrpt    5      3983.321 ±      85.674   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                                       128  thrpt    5      1014.930 ±      21.456  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                  128  thrpt    5    400992.104 ±       0.013    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                 128  thrpt    5      1079.556 ±    1423.053  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5    426869.076 ±  566436.725    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count                                                            128  thrpt    5         8.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time                                                             128  thrpt    5        45.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeCirce                                                                        128  thrpt    5     14280.924 ±     530.707   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate                                                         128  thrpt    5       795.203 ±      29.681  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                                    128  thrpt    5     87637.974 ±      53.121    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       675.420 ±       0.516  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5     74442.461 ±    2795.711    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count                                                              128  thrpt    5         5.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time                                                               128  thrpt    5        23.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala                                                                 128  thrpt    5     16094.848 ±     178.674   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                                  128  thrpt    5       833.774 ±       9.366  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                             128  thrpt    5     81536.031 ±       0.312    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                            128  thrpt    5       809.638 ±    1161.703  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                       128  thrpt    5     79221.337 ±  114480.110    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.count                                                       128  thrpt    5         6.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.time                                                        128  thrpt    5        35.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala                                                                128  thrpt    5    288076.409 ±   13716.367   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                                 128  thrpt    5      1016.245 ±      48.315  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                            128  thrpt    5      5552.001 ±       0.001    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                           128  thrpt    5       946.080 ±    1424.816  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                      128  thrpt    5      5169.554 ±    7794.523    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                    128  thrpt    5         0.266 ±       1.405  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                               128  thrpt    5         1.456 ±       7.680    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count                                                      128  thrpt    5         7.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time                                                       128  thrpt    5        30.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc                                                        128  thrpt    5    305236.968 ±   16649.250   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                         128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                    128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                              128  thrpt    5           ≈ 0                counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson                                                                     128  thrpt    5     14948.175 ±     314.289   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                                      128  thrpt    5       849.338 ±      18.360  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                                 128  thrpt    5     89432.270 ±      30.748    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                128  thrpt    5       809.924 ±    1162.584  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5     85322.888 ±  123178.628    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5        14.102 ±     121.425    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count                                                           128  thrpt    5         6.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time                                                            128  thrpt    5        33.000                    ms
[info] BitSetBenchmark.readJsoniterScala                                                                                128  thrpt    5    883571.485 ±     715.057   ops/s
[info] BitSetBenchmark.readJsoniterScala:·gc.alloc.rate                                                                 128  thrpt    5        35.930 ±       0.034  MB/sec
[info] BitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                            128  thrpt    5        64.000 ±       0.001    B/op
[info] BitSetBenchmark.readJsoniterScala:·gc.count                                                                      128  thrpt    5           ≈ 0                counts
[info] BitSetBenchmark.readPlayJson                                                                                     128  thrpt    5     68053.928 ±    2838.742   ops/s
[info] BitSetBenchmark.readPlayJson:·gc.alloc.rate                                                                      128  thrpt    5      3071.413 ±     128.406  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.alloc.rate.norm                                                                 128  thrpt    5     71040.006 ±       0.001    B/op
[info] BitSetBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                          128  thrpt    5         0.007 ±       0.017  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                     128  thrpt    5         0.171 ±       0.405    B/op
[info] BitSetBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                                128  thrpt    5      3134.188 ±    1437.600  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                           128  thrpt    5     72459.684 ±   31821.635    B/op
[info] BitSetBenchmark.readPlayJson:·gc.count                                                                           128  thrpt    5        23.000                counts
[info] BitSetBenchmark.readPlayJson:·gc.time                                                                            128  thrpt    5        30.000                    ms
[info] BitSetBenchmark.writeJacksonScala                                                                                128  thrpt    5   1004464.462 ±    5469.963   ops/s
[info] BitSetBenchmark.writeJacksonScala:·gc.alloc.rate                                                                 128  thrpt    5       576.956 ±       3.083  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                            128  thrpt    5       904.000 ±       0.001    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                           128  thrpt    5       677.070 ±       1.521  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                      128  thrpt    5      1060.865 ±       6.424    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                                    128  thrpt    5         0.133 ±       1.147  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                               128  thrpt    5         0.208 ±       1.794    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.count                                                                      128  thrpt    5         5.000                counts
[info] BitSetBenchmark.writeJacksonScala:·gc.time                                                                       128  thrpt    5        24.000                    ms
[info] BitSetBenchmark.writeJsoniterScala                                                                               128  thrpt    5    683960.653 ±   26451.925   ops/s
[info] BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate                                                                128  thrpt    5       184.273 ±       7.205  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                           128  thrpt    5       424.001 ±       0.001    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                          128  thrpt    5       135.628 ±    1167.794  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                     128  thrpt    5       314.150 ±    2704.922    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.count                                                                     128  thrpt    5         1.000                counts
[info] BitSetBenchmark.writeJsoniterScala:·gc.time                                                                      128  thrpt    5         4.000                    ms
[info] BitSetBenchmark.writeJsoniterScalaPrealloc                                                                       128  thrpt    5    873063.903 ±    1017.569   ops/s
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                        128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                                   128  thrpt    5        ≈ 10⁻³                  B/op
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                             128  thrpt    5           ≈ 0                counts
[info] BitSetBenchmark.writePlayJson                                                                                    128  thrpt    5     39908.119 ±     967.841   ops/s
[info] BitSetBenchmark.writePlayJson:·gc.alloc.rate                                                                     128  thrpt    5      1675.045 ±      41.198  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.alloc.rate.norm                                                                128  thrpt    5     66064.010 ±       0.001    B/op
[info] BitSetBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                         128  thrpt    5         0.017 ±       0.096  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                    128  thrpt    5         0.650 ±       3.763    B/op
[info] BitSetBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                               128  thrpt    5      1631.572 ±    1433.498  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                          128  thrpt    5     64406.673 ±   57810.217    B/op
[info] BitSetBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                        128  thrpt    5         0.932 ±       8.026  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                                   128  thrpt    5        37.029 ±     318.829    B/op
[info] BitSetBenchmark.writePlayJson:·gc.count                                                                          128  thrpt    5        12.000                counts
[info] BitSetBenchmark.writePlayJson:·gc.time                                                                           128  thrpt    5        30.000                    ms
[info] ExtractFieldsBenchmark.readCirce                                                                                 N/A  thrpt    5    635115.545 ±   11350.807   ops/s
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate                                                                  N/A  thrpt    5      2027.149 ±      36.348  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm                                                             N/A  thrpt    5      5024.001 ±       0.001    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                      N/A  thrpt    5         0.033 ±       0.284  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                 N/A  thrpt    5         0.082 ±       0.704    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                            N/A  thrpt    5      2042.112 ±      17.724  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                       N/A  thrpt    5      5061.144 ±      67.293    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                     N/A  thrpt    5         0.666 ±       5.734  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                                N/A  thrpt    5         1.661 ±      14.298    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.count                                                                       N/A  thrpt    5        15.000                counts
[info] ExtractFieldsBenchmark.readCirce:·gc.time                                                                        N/A  thrpt    5        34.000                    ms
[info] ExtractFieldsBenchmark.readDslJsonJava                                                                           N/A  thrpt    5   5170941.484 ±  139045.800   ops/s
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate                                                            N/A  thrpt    5       315.386 ±       8.461  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                       N/A  thrpt    5        96.000 ±       0.001    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                      N/A  thrpt    5       404.860 ±    1423.138  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                 N/A  thrpt    5       123.679 ±     434.756    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.count                                                                 N/A  thrpt    5         3.000                counts
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.time                                                                  N/A  thrpt    5        15.000                    ms
[info] ExtractFieldsBenchmark.readJacksonScala                                                                          N/A  thrpt    5    793483.039 ±    8646.793   ops/s
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate                                                           N/A  thrpt    5       983.971 ±      10.712  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                      N/A  thrpt    5      1952.001 ±       0.001    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                     N/A  thrpt    5       947.508 ±    1428.014  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                N/A  thrpt    5      1881.296 ±    2855.658    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                              N/A  thrpt    5         0.266 ±       1.405  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                         N/A  thrpt    5         0.528 ±       2.786    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.count                                                                N/A  thrpt    5         7.000                counts
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.time                                                                 N/A  thrpt    5        33.000                    ms
[info] ExtractFieldsBenchmark.readJsoniterScala                                                                         N/A  thrpt    5   7911624.062 ±   79076.647   ops/s
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate                                                          N/A  thrpt    5       361.940 ±       3.503  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                     N/A  thrpt    5        72.000 ±       0.001    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                    N/A  thrpt    5       406.871 ±    1430.210  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                               N/A  thrpt    5        81.004 ±     284.741    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.count                                                               N/A  thrpt    5         3.000                counts
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.time                                                                N/A  thrpt    5         9.000                    ms
[info] ExtractFieldsBenchmark.readPlayJson                                                                              N/A  thrpt    5    263940.519 ±    8871.807   ops/s
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate                                                               N/A  thrpt    5      1467.727 ±      49.033  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                          N/A  thrpt    5      8752.002 ±       0.001    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   N/A  thrpt    5         0.032 ±       0.270  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              N/A  thrpt    5         0.187 ±       1.593    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                         N/A  thrpt    5      1492.982 ±    1159.941  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                    N/A  thrpt    5      8911.000 ±    7159.964    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                  N/A  thrpt    5         1.066 ±       7.822  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                             N/A  thrpt    5         6.355 ±      46.581    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.count                                                                    N/A  thrpt    5        11.000                counts
[info] ExtractFieldsBenchmark.readPlayJson:·gc.time                                                                     N/A  thrpt    5        40.000                    ms
[info] GeoJSONBenchmark.readCirce                                                                                       N/A  thrpt    5      3614.304 ±      41.434   ops/s
[info] GeoJSONBenchmark.readCirce:·gc.alloc.rate                                                                        N/A  thrpt    5      1707.052 ±      19.981  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.alloc.rate.norm                                                                   N/A  thrpt    5    743328.115 ±       0.016    B/op
[info] GeoJSONBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                            N/A  thrpt    5         0.104 ±       0.239  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                       N/A  thrpt    5        45.054 ±     103.687    B/op
[info] GeoJSONBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                                  N/A  thrpt    5      1632.564 ±    1435.194  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                             N/A  thrpt    5    711118.171 ±  630037.810    B/op
[info] GeoJSONBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                           N/A  thrpt    5         0.666 ±       5.735  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                                      N/A  thrpt    5       291.190 ±    2507.236    B/op
[info] GeoJSONBenchmark.readCirce:·gc.count                                                                             N/A  thrpt    5        12.000                counts
[info] GeoJSONBenchmark.readCirce:·gc.time                                                                              N/A  thrpt    5        28.000                    ms
[info] GeoJSONBenchmark.readJacksonScala                                                                                N/A  thrpt    5      4619.395 ±     116.520   ops/s
[info] GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate                                                                 N/A  thrpt    5      1909.174 ±      46.933  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                            N/A  thrpt    5    650472.091 ±       0.016    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                     N/A  thrpt    5         0.012 ±       0.043  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                N/A  thrpt    5         4.123 ±      14.671    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                           N/A  thrpt    5      1904.959 ±    1168.813  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                      N/A  thrpt    5    649231.753 ±  402613.317    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                                    N/A  thrpt    5         0.933 ±       6.690  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                               N/A  thrpt    5       320.665 ±    2305.477    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.count                                                                      N/A  thrpt    5        14.000                counts
[info] GeoJSONBenchmark.readJacksonScala:·gc.time                                                                       N/A  thrpt    5        35.000                    ms
[info] GeoJSONBenchmark.readJsoniterScala                                                                               N/A  thrpt    5     42034.684 ±     234.474   ops/s
[info] GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate                                                                N/A  thrpt    5       699.308 ±       4.048  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                           N/A  thrpt    5     26184.010 ±       0.001    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                          N/A  thrpt    5       678.790 ±       0.395  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                     N/A  thrpt    5     25415.805 ±     143.776    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.count                                                                     N/A  thrpt    5         5.000                counts
[info] GeoJSONBenchmark.readJsoniterScala:·gc.time                                                                      N/A  thrpt    5        17.000                    ms
[info] GeoJSONBenchmark.writeCirce                                                                                      N/A  thrpt    5      4101.172 ±      48.733   ops/s
[info] GeoJSONBenchmark.writeCirce:·gc.alloc.rate                                                                       N/A  thrpt    5       754.631 ±       8.982  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.alloc.rate.norm                                                                  N/A  thrpt    5    289616.103 ±       0.017    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                                 N/A  thrpt    5       677.987 ±       0.204  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                            N/A  thrpt    5    260203.404 ±    3084.643    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.count                                                                            N/A  thrpt    5         5.000                counts
[info] GeoJSONBenchmark.writeCirce:·gc.time                                                                             N/A  thrpt    5        20.000                    ms
[info] GeoJSONBenchmark.writeJacksonScala                                                                               N/A  thrpt    5      4189.373 ±      72.410   ops/s
[info] GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate                                                                N/A  thrpt    5       513.077 ±       8.543  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                           N/A  thrpt    5    192741.286 ±       2.372    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                          N/A  thrpt    5       541.131 ±    1164.827  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                     N/A  thrpt    5    203565.510 ±  438199.146    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                                   N/A  thrpt    5         0.266 ±       1.405  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                              N/A  thrpt    5       100.428 ±     529.531    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.count                                                                     N/A  thrpt    5         4.000                counts
[info] GeoJSONBenchmark.writeJacksonScala:·gc.time                                                                      N/A  thrpt    5        20.000                    ms
[info] GeoJSONBenchmark.writeJsoniterScala                                                                              N/A  thrpt    5      6526.191 ±      52.577   ops/s
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate                                                               N/A  thrpt    5       174.561 ±       1.444  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                          N/A  thrpt    5     42096.063 ±       0.008    B/op
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                         N/A  thrpt    5       135.486 ±    1166.573  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                    N/A  thrpt    5     32761.960 ±  282090.354    B/op
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.count                                                                    N/A  thrpt    5         1.000                counts
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.time                                                                     N/A  thrpt    5         5.000                    ms
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc                                                                      N/A  thrpt    5      6524.918 ±     173.671   ops/s
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                       N/A  thrpt    5       126.827 ±       3.333  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                                  N/A  thrpt    5     30592.063 ±       0.002    B/op
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                                                 N/A  thrpt    5       136.432 ±    1174.723  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                                            N/A  thrpt    5     33314.981 ±  286852.030    B/op
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                            N/A  thrpt    5         1.000                counts
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.time                                                             N/A  thrpt    5         3.000                    ms
[info] GoogleMapsAPIBenchmark.readCirce                                                                                 N/A  thrpt    5      7437.406 ±     154.463   ops/s
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate                                                                  N/A  thrpt    5      1732.147 ±      36.730  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm                                                             N/A  thrpt    5    366550.530 ±      40.221    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                      N/A  thrpt    5         0.050 ±       0.283  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                 N/A  thrpt    5        10.586 ±      59.973    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                            N/A  thrpt    5      1768.320 ±    1436.681  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                       N/A  thrpt    5    374434.404 ±  308723.930    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                     N/A  thrpt    5         0.666 ±       5.735  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                                N/A  thrpt    5       140.900 ±    1213.189    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.count                                                                       N/A  thrpt    5        13.000                counts
[info] GoogleMapsAPIBenchmark.readCirce:·gc.time                                                                        N/A  thrpt    5        31.000                    ms
[info] GoogleMapsAPIBenchmark.readDslJsonJava                                                                           N/A  thrpt    5     11252.993 ±     603.426   ops/s
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate                                                            N/A  thrpt    5       259.421 ±      13.808  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                       N/A  thrpt    5     36280.039 ±       0.015    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                      N/A  thrpt    5       269.878 ±    1422.990  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                 N/A  thrpt    5     37702.615 ±  198797.589    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.count                                                                 N/A  thrpt    5         2.000                counts
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.time                                                                  N/A  thrpt    5        10.000                    ms
[info] GoogleMapsAPIBenchmark.readJacksonScala                                                                          N/A  thrpt    5     13486.691 ±     238.469   ops/s
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate                                                           N/A  thrpt    5       342.690 ±       5.870  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                      N/A  thrpt    5     39992.033 ±       0.014    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                     N/A  thrpt    5       270.736 ±    1427.515  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                N/A  thrpt    5     31736.468 ±  167337.277    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.count                                                                N/A  thrpt    5         2.000                counts
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.time                                                                 N/A  thrpt    5        10.000                    ms
[info] GoogleMapsAPIBenchmark.readJsoniterScala                                                                         N/A  thrpt    5     22800.735 ±     741.495   ops/s
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                                          N/A  thrpt    5       427.274 ±      13.917  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                     N/A  thrpt    5     29496.018 ±       0.003    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                    N/A  thrpt    5       406.831 ±    1430.068  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                               N/A  thrpt    5     28108.206 ±   98815.727    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count                                                               N/A  thrpt    5         3.000                counts
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time                                                                N/A  thrpt    5        10.000                    ms
[info] GoogleMapsAPIBenchmark.readPlayJson                                                                              N/A  thrpt    5      2139.709 ±      42.868   ops/s
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate                                                               N/A  thrpt    5      1359.513 ±      27.354  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                                          N/A  thrpt    5   1000008.194 ±       0.024    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   N/A  thrpt    5         0.029 ±       0.249  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              N/A  thrpt    5        21.188 ±     182.439    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                         N/A  thrpt    5      1355.755 ±      15.888  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                    N/A  thrpt    5    997259.415 ±   17097.311    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                  N/A  thrpt    5         0.932 ±       8.027  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                             N/A  thrpt    5       685.024 ±    5898.263    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.count                                                                    N/A  thrpt    5        10.000                counts
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.time                                                                     N/A  thrpt    5        46.000                    ms
[info] GoogleMapsAPIBenchmark.writeCirce                                                                                N/A  thrpt    5      7315.396 ±     342.256   ops/s
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate                                                                 N/A  thrpt    5      1443.492 ±      67.724  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm                                                            N/A  thrpt    5    310581.728 ±      40.113    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                     N/A  thrpt    5         0.021 ±       0.119  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                N/A  thrpt    5         4.501 ±      25.478    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                           N/A  thrpt    5      1494.862 ±    1161.787  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                      N/A  thrpt    5    321939.618 ±  258444.857    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                    N/A  thrpt    5         1.066 ±       6.437  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                               N/A  thrpt    5       228.917 ±    1374.763    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.count                                                                      N/A  thrpt    5        12.000                counts
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.time                                                                       N/A  thrpt    5        36.000                    ms
[info] GoogleMapsAPIBenchmark.writeDslJsonJava                                                                          N/A  thrpt    5     54242.798 ±    1778.505   ops/s
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate                                                           N/A  thrpt    5       507.016 ±      16.603  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                      N/A  thrpt    5     14712.008 ±       0.001    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                                     N/A  thrpt    5       404.708 ±    1422.608  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                N/A  thrpt    5     11752.020 ±   41310.695    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space                                              N/A  thrpt    5         0.133 ±       1.147  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                         N/A  thrpt    5         3.885 ±      33.449    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.count                                                                N/A  thrpt    5         3.000                counts
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.time                                                                 N/A  thrpt    5        15.000                    ms
[info] GoogleMapsAPIBenchmark.writeJacksonScala                                                                         N/A  thrpt    5     36120.020 ±     489.790   ops/s
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                                          N/A  thrpt    5       537.729 ±       7.424  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                     N/A  thrpt    5     23431.852 ±       0.572    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                    N/A  thrpt    5       541.137 ±    1164.839  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                               N/A  thrpt    5     23609.853 ±   50822.608    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                             N/A  thrpt    5         0.133 ±       1.147  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                        N/A  thrpt    5         5.815 ±      50.070    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count                                                               N/A  thrpt    5         4.000                counts
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time                                                                N/A  thrpt    5        20.000                    ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScala                                                                        N/A  thrpt    5     73676.105 ±    2266.446   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                                         N/A  thrpt    5       553.848 ±      17.157  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                    N/A  thrpt    5     11832.006 ±       0.001    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                   N/A  thrpt    5       541.937 ±    1166.561  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                              N/A  thrpt    5     11566.595 ±   24901.713    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count                                                              N/A  thrpt    5         4.000                counts
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time                                                               N/A  thrpt    5        14.000                    ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc                                                                N/A  thrpt    5     95907.864 ±     151.365   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                 N/A  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                            N/A  thrpt    5         0.004 ±       0.001    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                      N/A  thrpt    5           ≈ 0                counts
[info] GoogleMapsAPIBenchmark.writePlayJson                                                                             N/A  thrpt    5      5660.912 ±     169.024   ops/s
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate                                                              N/A  thrpt    5      1626.907 ±      48.597  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm                                                         N/A  thrpt    5    452351.803 ±       2.901    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  N/A  thrpt    5         0.049 ±       0.320  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             N/A  thrpt    5        13.630 ±      88.808    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                        N/A  thrpt    5      1630.300 ±    1429.442  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                   N/A  thrpt    5    453702.680 ±  406467.650    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                 N/A  thrpt    5         0.932 ±       6.687  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                            N/A  thrpt    5       262.220 ±    1885.702    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.count                                                                   N/A  thrpt    5        12.000                counts
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.time                                                                    N/A  thrpt    5        35.000                    ms
[info] IntBenchmark.readCirce                                                                                           N/A  thrpt    5   4952719.163 ±   33645.733   ops/s
[info] IntBenchmark.readCirce:·gc.alloc.rate                                                                            N/A  thrpt    5      3071.529 ±      21.200  MB/sec
[info] IntBenchmark.readCirce:·gc.alloc.rate.norm                                                                       N/A  thrpt    5       976.000 ±       0.001    B/op
[info] IntBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                                N/A  thrpt    5         0.001 ±       0.005  MB/sec
[info] IntBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                           N/A  thrpt    5        ≈ 10⁻³                  B/op
[info] IntBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                                      N/A  thrpt    5      2998.528 ±    1436.799  MB/sec
[info] IntBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                                 N/A  thrpt    5       952.950 ±     462.385    B/op
[info] IntBenchmark.readCirce:·gc.count                                                                                 N/A  thrpt    5        22.000                counts
[info] IntBenchmark.readCirce:·gc.time                                                                                  N/A  thrpt    5        29.000                    ms
[info] IntBenchmark.readDslJsonJava                                                                                     N/A  thrpt    5  37592962.438 ± 1586592.207   ops/s
[info] IntBenchmark.readDslJsonJava:·gc.alloc.rate                                                                      N/A  thrpt    5       382.153 ±      16.160  MB/sec
[info] IntBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                                 N/A  thrpt    5        16.000 ±       0.001    B/op
[info] IntBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                                N/A  thrpt    5       404.851 ±    1423.109  MB/sec
[info] IntBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                           N/A  thrpt    5        17.007 ±      59.789    B/op
[info] IntBenchmark.readDslJsonJava:·gc.count                                                                           N/A  thrpt    5         3.000                counts
[info] IntBenchmark.readDslJsonJava:·gc.time                                                                            N/A  thrpt    5        15.000                    ms
[info] IntBenchmark.readJacksonScala                                                                                    N/A  thrpt    5   7279195.628 ±  271414.868   ops/s
[info] IntBenchmark.readJacksonScala:·gc.alloc.rate                                                                     N/A  thrpt    5      2738.079 ±     102.093  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                                N/A  thrpt    5       592.000 ±       0.001    B/op
[info] IntBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                         N/A  thrpt    5         0.009 ±       0.071  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                    N/A  thrpt    5         0.002 ±       0.015    B/op
[info] IntBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                               N/A  thrpt    5      2725.919 ±       2.130  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                          N/A  thrpt    5       589.415 ±      21.905    B/op
[info] IntBenchmark.readJacksonScala:·gc.count                                                                          N/A  thrpt    5        20.000                counts
[info] IntBenchmark.readJacksonScala:·gc.time                                                                           N/A  thrpt    5        33.000                    ms
[info] IntBenchmark.readJsoniterScala                                                                                   N/A  thrpt    5  35616251.030 ±  148259.758   ops/s
[info] IntBenchmark.readJsoniterScala:·gc.alloc.rate                                                                    N/A  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] IntBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                               N/A  thrpt    5        ≈ 10⁻⁵                  B/op
[info] IntBenchmark.readJsoniterScala:·gc.count                                                                         N/A  thrpt    5           ≈ 0                counts
[info] IntBenchmark.readNaiveScala                                                                                      N/A  thrpt    5  28043239.127 ± 1066457.150   ops/s
[info] IntBenchmark.readNaiveScala:·gc.alloc.rate                                                                       N/A  thrpt    5       997.766 ±      37.977  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.alloc.rate.norm                                                                  N/A  thrpt    5        56.000 ±       0.001    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.G1_Old_Gen                                                                 N/A  thrpt    5       949.319 ±    1429.940  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.G1_Old_Gen.norm                                                            N/A  thrpt    5        53.297 ±      80.452    B/op
[info] IntBenchmark.readNaiveScala:·gc.count                                                                            N/A  thrpt    5         7.000                counts
[info] IntBenchmark.readNaiveScala:·gc.time                                                                             N/A  thrpt    5        23.000                    ms
[info] IntBenchmark.readPlayJson                                                                                        N/A  thrpt    5   6226161.291 ±  210487.445   ops/s
[info] IntBenchmark.readPlayJson:·gc.alloc.rate                                                                         N/A  thrpt    5      3006.316 ±     101.762  MB/sec
[info] IntBenchmark.readPlayJson:·gc.alloc.rate.norm                                                                    N/A  thrpt    5       760.000 ±       0.001    B/op
[info] IntBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                             N/A  thrpt    5         0.001 ±       0.005  MB/sec
[info] IntBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                        N/A  thrpt    5        ≈ 10⁻³                  B/op
[info] IntBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                                   N/A  thrpt    5      2998.097 ±    1436.823  MB/sec
[info] IntBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                              N/A  thrpt    5       758.522 ±     385.946    B/op
[info] IntBenchmark.readPlayJson:·gc.count                                                                              N/A  thrpt    5        22.000                counts
[info] IntBenchmark.readPlayJson:·gc.time                                                                               N/A  thrpt    5        33.000                    ms
[info] IntBenchmark.writeCirce                                                                                          N/A  thrpt    5  22050939.807 ± 1567796.416   ops/s
[info] IntBenchmark.writeCirce:·gc.alloc.rate                                                                           N/A  thrpt    5      2017.414 ±     143.463  MB/sec
[info] IntBenchmark.writeCirce:·gc.alloc.rate.norm                                                                      N/A  thrpt    5       144.000 ±       0.001    B/op
[info] IntBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                               N/A  thrpt    5         0.029 ±       0.242  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                          N/A  thrpt    5         0.002 ±       0.017    B/op
[info] IntBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                                     N/A  thrpt    5      2042.231 ±      17.273  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                                N/A  thrpt    5       145.807 ±       9.368    B/op
[info] IntBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                              N/A  thrpt    5         0.666 ±       5.735  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                                         N/A  thrpt    5         0.049 ±       0.423    B/op
[info] IntBenchmark.writeCirce:·gc.count                                                                                N/A  thrpt    5        15.000                counts
[info] IntBenchmark.writeCirce:·gc.time                                                                                 N/A  thrpt    5        27.000                    ms
[info] IntBenchmark.writeDslJsonJava                                                                                    N/A  thrpt    5  54258666.494 ± 2621518.229   ops/s
[info] IntBenchmark.writeDslJsonJava:·gc.alloc.rate                                                                     N/A  thrpt    5      1654.888 ±      79.908  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                                N/A  thrpt    5        48.000 ±       0.001    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'                                         N/A  thrpt    5         0.105 ±       0.802  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                    N/A  thrpt    5         0.003 ±       0.023    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                                               N/A  thrpt    5      1763.328 ±    1430.924  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                          N/A  thrpt    5        51.108 ±      40.649    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space                                                        N/A  thrpt    5         1.332 ±      11.471  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                                   N/A  thrpt    5         0.039 ±       0.335    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.count                                                                          N/A  thrpt    5        13.000                counts
[info] IntBenchmark.writeDslJsonJava:·gc.time                                                                           N/A  thrpt    5        41.000                    ms
[info] IntBenchmark.writeJacksonScala                                                                                   N/A  thrpt    5   8886539.982 ±  247137.883   ops/s
[info] IntBenchmark.writeJacksonScala:·gc.alloc.rate                                                                    N/A  thrpt    5      2167.987 ±      60.616  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                               N/A  thrpt    5       384.000 ±       0.001    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                        N/A  thrpt    5         0.016 ±       0.083  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                   N/A  thrpt    5         0.003 ±       0.015    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                              N/A  thrpt    5      2178.560 ±    1178.726  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                         N/A  thrpt    5       385.806 ±     205.682    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                                       N/A  thrpt    5         0.932 ±       8.028  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                                  N/A  thrpt    5         0.167 ±       1.440    B/op
[info] IntBenchmark.writeJacksonScala:·gc.count                                                                         N/A  thrpt    5        16.000                counts
[info] IntBenchmark.writeJacksonScala:·gc.time                                                                          N/A  thrpt    5        27.000                    ms
[info] IntBenchmark.writeJsoniterScala                                                                                  N/A  thrpt    5  45046344.768 ± 1771352.556   ops/s
[info] IntBenchmark.writeJsoniterScala:·gc.alloc.rate                                                                   N/A  thrpt    5       915.963 ±      36.265  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                              N/A  thrpt    5        32.000 ±       0.001    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                             N/A  thrpt    5       948.602 ±    1429.187  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                        N/A  thrpt    5        33.134 ±      49.827    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                                      N/A  thrpt    5         0.133 ±       1.147  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                                 N/A  thrpt    5         0.005 ±       0.040    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.count                                                                        N/A  thrpt    5         7.000                counts
[info] IntBenchmark.writeJsoniterScala:·gc.time                                                                         N/A  thrpt    5        24.000                    ms
[info] IntBenchmark.writeJsoniterScalaPrealloc                                                                          N/A  thrpt    5  50793011.936 ±  637210.134   ops/s
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                           N/A  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                                      N/A  thrpt    5        ≈ 10⁻⁵                  B/op
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                                N/A  thrpt    5           ≈ 0                counts
[info] IntBenchmark.writeNaiveScala                                                                                     N/A  thrpt    5  40665511.248 ±  297706.663   ops/s
[info] IntBenchmark.writeNaiveScala:·gc.alloc.rate                                                                      N/A  thrpt    5      2067.176 ±      15.166  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.alloc.rate.norm                                                                 N/A  thrpt    5        80.000 ±       0.001    B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                          N/A  thrpt    5         0.016 ±       0.132  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                     N/A  thrpt    5         0.001 ±       0.005    B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.G1_Old_Gen                                                                N/A  thrpt    5      2043.855 ±       5.949  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.G1_Old_Gen.norm                                                           N/A  thrpt    5        79.098 ±       0.365    B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.G1_Survivor_Space                                                         N/A  thrpt    5         0.666 ±       5.736  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.G1_Survivor_Space.norm                                                    N/A  thrpt    5         0.026 ±       0.223    B/op
[info] IntBenchmark.writeNaiveScala:·gc.count                                                                           N/A  thrpt    5        15.000                counts
[info] IntBenchmark.writeNaiveScala:·gc.time                                                                            N/A  thrpt    5        20.000                    ms
[info] IntBenchmark.writePlayJson                                                                                       N/A  thrpt    5   2176717.164 ±   65613.869   ops/s
[info] IntBenchmark.writePlayJson:·gc.alloc.rate                                                                        N/A  thrpt    5      1748.161 ±      51.865  MB/sec
[info] IntBenchmark.writePlayJson:·gc.alloc.rate.norm                                                                   N/A  thrpt    5      1264.000 ±       0.001    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                            N/A  thrpt    5         0.046 ±       0.392  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                       N/A  thrpt    5         0.033 ±       0.282    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                                  N/A  thrpt    5      1767.818 ±    1438.086  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                             N/A  thrpt    5      1278.647 ±    1048.392    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                           N/A  thrpt    5         0.799 ±       6.882  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                                      N/A  thrpt    5         0.579 ±       4.985    B/op
[info] IntBenchmark.writePlayJson:·gc.count                                                                             N/A  thrpt    5        13.000                counts
[info] IntBenchmark.writePlayJson:·gc.time                                                                              N/A  thrpt    5        31.000                    ms
[info] IntMapOfBooleansBenchmark.readJsoniterScala                                                                      128  thrpt    5    141442.740 ±    4188.946   ops/s
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                                       128  thrpt    5      2594.743 ±      77.689  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                  128  thrpt    5     28872.003 ±       0.001    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                           128  thrpt    5         0.002 ±       0.009  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      128  thrpt    5         0.028 ±       0.099    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                 128  thrpt    5      2589.514 ±    1174.526  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5     28818.724 ±   13220.700    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.count                                                            128  thrpt    5        19.000                counts
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.time                                                             128  thrpt    5        29.000                    ms
[info] IntMapOfBooleansBenchmark.readPlayJson                                                                           128  thrpt    5     15708.698 ±     726.354   ops/s
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                            128  thrpt    5      1242.015 ±      57.625  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                                       128  thrpt    5    124440.028 ±       0.012    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                128  thrpt    5         0.006 ±       0.048  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           128  thrpt    5         0.554 ±       4.774    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                      128  thrpt    5      1220.106 ±    1168.362  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5    122312.135 ±  117898.334    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                               128  thrpt    5         0.932 ±       6.687  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                          128  thrpt    5        92.958 ±     667.431    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.count                                                                 128  thrpt    5         9.000                counts
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.time                                                                  128  thrpt    5        38.000                    ms
[info] IntMapOfBooleansBenchmark.writeJacksonScala                                                                      128  thrpt    5    131541.732 ±    3694.093   ops/s
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                                       128  thrpt    5      1461.433 ±      40.865  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                  128  thrpt    5     17488.003 ±       0.001    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                           128  thrpt    5         0.014 ±       0.113  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      128  thrpt    5         0.161 ±       1.351    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                 128  thrpt    5      1493.578 ±    1165.568  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5     17881.072 ±   14184.122    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                          128  thrpt    5         1.066 ±       7.822  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                     128  thrpt    5        12.798 ±      94.054    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.count                                                            128  thrpt    5        11.000                counts
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.time                                                             128  thrpt    5        37.000                    ms
[info] IntMapOfBooleansBenchmark.writeJsoniterScala                                                                     128  thrpt    5    492939.014 ±    3500.206   ops/s
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                                      128  thrpt    5      1019.734 ±       7.124  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                 128  thrpt    5      3256.001 ±       0.001    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5       948.647 ±    1428.911  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5      3030.161 ±    4578.451    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         0.266 ±       1.405  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5         0.850 ±       4.481    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.count                                                           128  thrpt    5         7.000                counts
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.time                                                            128  thrpt    5        26.000                    ms
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                             128  thrpt    5    525420.146 ±   24499.933   ops/s
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                              128  thrpt    5       512.775 ±      23.872  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                         128  thrpt    5      1536.001 ±       0.001    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                                        128  thrpt    5       542.085 ±    1166.879  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                                   128  thrpt    5      1625.719 ±    3500.770    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                   128  thrpt    5         4.000                counts
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time                                                    128  thrpt    5        17.000                    ms
[info] IntMapOfBooleansBenchmark.writePlayJson                                                                          128  thrpt    5     44875.791 ±    1308.610   ops/s
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                                           128  thrpt    5       766.649 ±      22.253  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                                      128  thrpt    5     26888.009 ±       0.001    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       677.305 ±       1.332  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5     23755.604 ±     704.212    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         0.133 ±       1.147  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5         4.652 ±      40.057    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.count                                                                128  thrpt    5         5.000                counts
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.time                                                                 128  thrpt    5        26.000                    ms
[info] ListOfBooleansBenchmark.readCirce                                                                                128  thrpt    5    371173.131 ±    8518.946   ops/s
[info] ListOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                                 128  thrpt    5      2518.730 ±      58.422  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                                            128  thrpt    5     10680.001 ±       0.001    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                     128  thrpt    5         0.012 ±       0.101  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                128  thrpt    5         0.052 ±       0.425    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                           128  thrpt    5      2589.495 ±    1173.384  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                      128  thrpt    5     10982.026 ±    5038.954    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.count                                                                      128  thrpt    5        19.000                counts
[info] ListOfBooleansBenchmark.readCirce:·gc.time                                                                       128  thrpt    5        28.000                    ms
[info] ListOfBooleansBenchmark.readJacksonScala                                                                         128  thrpt    5    389260.930 ±    5290.706   ops/s
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                                          128  thrpt    5      1030.662 ±      14.033  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                     128  thrpt    5      4168.001 ±       0.001    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5      1083.175 ±    1426.635  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5      4384.187 ±    5816.023    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         0.266 ±       1.405  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5         1.081 ±       5.699    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.count                                                               128  thrpt    5         8.000                counts
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.time                                                                128  thrpt    5        37.000                    ms
[info] ListOfBooleansBenchmark.readJsoniterScala                                                                        128  thrpt    5    419387.884 ±    3774.638   ops/s
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                                         128  thrpt    5       827.059 ±       7.273  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                    128  thrpt    5      3104.001 ±       0.001    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       813.701 ±    1168.019  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5      3055.811 ±    4421.086    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.count                                                              128  thrpt    5         6.000                counts
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.time                                                               128  thrpt    5        23.000                    ms
[info] ListOfBooleansBenchmark.readPlayJson                                                                             128  thrpt    5     96771.081 ±    4480.894   ops/s
[info] ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                              128  thrpt    5      3503.903 ±     163.737  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                                         128  thrpt    5     56984.004 ±       0.001    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  128  thrpt    5         0.001 ±       0.004  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             128  thrpt    5         0.021 ±       0.074    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                        128  thrpt    5      3543.653 ±    1171.589  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5     57668.364 ±   21092.801    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.count                                                                   128  thrpt    5        26.000                counts
[info] ListOfBooleansBenchmark.readPlayJson:·gc.time                                                                    128  thrpt    5        36.000                    ms
[info] ListOfBooleansBenchmark.writeCirce                                                                               128  thrpt    5    305943.421 ±   20463.095   ops/s
[info] ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                                128  thrpt    5       466.556 ±      31.003  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                                           128  thrpt    5      2400.001 ±       0.001    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                          128  thrpt    5       406.884 ±    1430.254  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                     128  thrpt    5      2068.173 ±    7269.929    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.count                                                                     128  thrpt    5         3.000                counts
[info] ListOfBooleansBenchmark.writeCirce:·gc.time                                                                      128  thrpt    5        11.000                    ms
[info] ListOfBooleansBenchmark.writeJacksonScala                                                                        128  thrpt    5    592386.013 ±   29897.252   ops/s
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                                         128  thrpt    5       433.622 ±      21.577  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                    128  thrpt    5      1152.001 ±       0.001    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       541.761 ±    1166.181  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5      1444.234 ±    3109.736    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5         0.360 ±       3.097    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.count                                                              128  thrpt    5         4.000                counts
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.time                                                               128  thrpt    5        19.000                    ms
[info] ListOfBooleansBenchmark.writeJsoniterScala                                                                       128  thrpt    5   2395569.836 ±  122817.098   ops/s
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                                        128  thrpt    5      1108.046 ±      56.616  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                   128  thrpt    5       728.000 ±       0.001    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                  128  thrpt    5      1084.443 ±    1429.539  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5       712.053 ±     933.269    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                           128  thrpt    5         0.933 ±       6.688  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                      128  thrpt    5         0.614 ±       4.416    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.count                                                             128  thrpt    5         8.000                counts
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.time                                                              128  thrpt    5        35.000                    ms
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                               128  thrpt    5   2464349.002 ±    3406.564   ops/s
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                           128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                     128  thrpt    5           ≈ 0                counts
[info] ListOfBooleansBenchmark.writePlayJson                                                                            128  thrpt    5    404230.790 ±    5552.193   ops/s
[info] ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                                             128  thrpt    5       581.455 ±       7.695  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                                        128  thrpt    5      2264.001 ±       0.001    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                       128  thrpt    5       541.942 ±    1166.570  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5      2112.863 ±    4548.145    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.count                                                                  128  thrpt    5         4.000                counts
[info] ListOfBooleansBenchmark.writePlayJson:·gc.time                                                                   128  thrpt    5        17.000                    ms
[info] MapOfIntsToBooleansBenchmark.readCirce                                                                           128  thrpt    5     39654.170 ±     778.444   ops/s
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate                                                            128  thrpt    5      1336.393 ±      26.593  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                                       128  thrpt    5     53040.010 ±       0.001    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                128  thrpt    5         0.026 ±       0.165  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           128  thrpt    5         1.026 ±       6.501    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                      128  thrpt    5      1358.263 ±      11.873  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5     53908.828 ±     820.168    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                               128  thrpt    5         0.666 ±       5.736  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                          128  thrpt    5        26.387 ±     227.196    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.count                                                                 128  thrpt    5        10.000                counts
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.time                                                                  128  thrpt    5        31.000                    ms
[info] MapOfIntsToBooleansBenchmark.readJacksonScala                                                                    128  thrpt    5     65047.931 ±    1875.683   ops/s
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                                     128  thrpt    5      1171.712 ±      33.498  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                128  thrpt    5     28352.006 ±       0.001    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5      1219.586 ±    1168.632  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5     29544.989 ±   28715.521    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                        128  thrpt    5         1.332 ±       7.255  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                   128  thrpt    5        32.447 ±     177.715    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count                                                          128  thrpt    5         9.000                counts
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time                                                           128  thrpt    5        40.000                    ms
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala                                                                   128  thrpt    5     72798.481 ±     940.878   ops/s
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                                    128  thrpt    5      1115.587 ±      14.281  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                               128  thrpt    5     24120.006 ±       0.001    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                              128  thrpt    5      1084.908 ±    1430.286  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5     23474.302 ±   31139.121    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                       128  thrpt    5         0.666 ±       5.736  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                  128  thrpt    5        14.414 ±     124.112    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count                                                         128  thrpt    5         8.000                counts
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time                                                          128  thrpt    5        28.000                    ms
[info] MapOfIntsToBooleansBenchmark.readPlayJson                                                                        128  thrpt    5     19061.683 ±     770.643   ops/s
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                         128  thrpt    5      1443.800 ±      58.736  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                                    128  thrpt    5    119216.023 ±       0.012    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                             128  thrpt    5         0.024 ±       0.189  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        128  thrpt    5         1.946 ±      15.631    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                   128  thrpt    5      1493.477 ±    1185.352  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5    123319.879 ±   97719.754    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         0.932 ±       8.029  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5        78.335 ±     674.492    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.count                                                              128  thrpt    5        11.000                counts
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.time                                                               128  thrpt    5        37.000                    ms
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala                                                                   128  thrpt    5    144138.538 ±    4838.385   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                                    128  thrpt    5      1327.599 ±      45.060  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                               128  thrpt    5     14496.003 ±       0.001    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                        128  thrpt    5         0.011 ±       0.095  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   128  thrpt    5         0.120 ±       1.035    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                              128  thrpt    5      1356.540 ±      16.287  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5     14812.860 ±     496.785    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                       128  thrpt    5         1.066 ±       7.821  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                  128  thrpt    5        11.622 ±      85.347    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count                                                         128  thrpt    5        10.000                counts
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time                                                          128  thrpt    5        39.000                    ms
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala                                                                  128  thrpt    5    529003.583 ±   17296.019   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                                   128  thrpt    5       583.455 ±      19.143  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                              128  thrpt    5      1736.001 ±       0.001    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                             128  thrpt    5       542.067 ±    1166.840  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                        128  thrpt    5      1607.046 ±    3459.352    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                      128  thrpt    5         0.133 ±       1.147  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                 128  thrpt    5         0.395 ±       3.402    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count                                                        128  thrpt    5         4.000                counts
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time                                                         128  thrpt    5        14.000                    ms
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc                                                          128  thrpt    5    568250.798 ±    5162.621   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                           128  thrpt    5         5.777 ±       0.054  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                      128  thrpt    5        16.001 ±       0.001    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                128  thrpt    5           ≈ 0                counts
[info] MapOfIntsToBooleansBenchmark.writePlayJson                                                                       128  thrpt    5     60578.956 ±     895.133   ops/s
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate                                                        128  thrpt    5      1086.969 ±      15.128  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                                   128  thrpt    5     28240.007 ±       0.001    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                  128  thrpt    5      1083.046 ±    1428.509  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5     28164.937 ±   37440.833    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                           128  thrpt    5         1.066 ±       7.825  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                      128  thrpt    5        27.791 ±     203.967    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.count                                                             128  thrpt    5         8.000                counts
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.time                                                              128  thrpt    5        39.000                    ms
[info] MissingReqFieldBenchmark.readCirce                                                                               N/A  thrpt    5   2133935.536 ±   55262.236   ops/s
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate                                                                N/A  thrpt    5      3047.871 ±      80.698  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm                                                           N/A  thrpt    5      2248.000 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                    N/A  thrpt    5         0.001 ±       0.002  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                               N/A  thrpt    5         0.001 ±       0.002    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                          N/A  thrpt    5      2998.240 ±    1435.660  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                     N/A  thrpt    5      2212.598 ±    1105.036    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.count                                                                     N/A  thrpt    5        22.000                counts
[info] MissingReqFieldBenchmark.readCirce:·gc.time                                                                      N/A  thrpt    5        36.000                    ms
[info] MissingReqFieldBenchmark.readDslJsonJava                                                                         N/A  thrpt    5    879061.202 ±   19795.112   ops/s
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate                                                          N/A  thrpt    5       558.514 ±      12.578  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                     N/A  thrpt    5      1000.000 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                    N/A  thrpt    5       539.681 ±    1161.704  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                               N/A  thrpt    5       968.272 ±    2084.341    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space                                             N/A  thrpt    5         0.133 ±       1.147  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                        N/A  thrpt    5         0.240 ±       2.063    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.count                                                               N/A  thrpt    5         4.000                counts
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.time                                                                N/A  thrpt    5        21.000                    ms
[info] MissingReqFieldBenchmark.readJacksonScala                                                                        N/A  thrpt    5    289200.086 ±    3411.090   ops/s
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate                                                         N/A  thrpt    5       546.842 ±       6.180  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                    N/A  thrpt    5      2976.001 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                   N/A  thrpt    5       541.780 ±    1166.223  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                              N/A  thrpt    5      2945.135 ±    6339.671    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.count                                                              N/A  thrpt    5         4.000                counts
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.time                                                               N/A  thrpt    5        19.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterScala                                                                       N/A  thrpt    5    744775.654 ±   17549.332   ops/s
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate                                                        N/A  thrpt    5       560.242 ±      13.182  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                   N/A  thrpt    5      1184.001 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                  N/A  thrpt    5       542.477 ±    1167.722  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                             N/A  thrpt    5      1147.440 ±    2470.164    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.count                                                             N/A  thrpt    5         4.000                counts
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.time                                                              N/A  thrpt    5        13.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterStackless                                                                   N/A  thrpt    5   4244846.373 ±  131251.017   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate                                                    N/A  thrpt    5      1359.178 ±      41.931  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm                                               N/A  thrpt    5       504.000 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.CodeHeap_'non-profiled_nmethods'                        N/A  thrpt    5         0.025 ±       0.157  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   N/A  thrpt    5         0.009 ±       0.059    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Old_Gen                                              N/A  thrpt    5      1358.100 ±      11.309  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Old_Gen.norm                                         N/A  thrpt    5       503.632 ±      19.188    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Survivor_Space                                       N/A  thrpt    5         0.666 ±       5.735  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Survivor_Space.norm                                  N/A  thrpt    5         0.249 ±       2.143    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.count                                                         N/A  thrpt    5        10.000                counts
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.time                                                          N/A  thrpt    5        30.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump                                                             N/A  thrpt    5   7871765.727 ±  388074.071   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate                                              N/A  thrpt    5       640.196 ±      31.440  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm                                         N/A  thrpt    5       128.000 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.G1_Old_Gen                                        N/A  thrpt    5       678.111 ±       0.198  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.G1_Old_Gen.norm                                   N/A  thrpt    5       135.598 ±       6.677    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count                                                   N/A  thrpt    5         5.000                counts
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time                                                    N/A  thrpt    5        18.000                    ms
[info] MissingReqFieldBenchmark.readPlayJson                                                                            N/A  thrpt    5    184159.112 ±    8196.043   ops/s
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate                                                             N/A  thrpt    5      1249.658 ±      55.318  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm                                                        N/A  thrpt    5     10680.002 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                       N/A  thrpt    5      1219.239 ±    1166.211  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                  N/A  thrpt    5     10413.263 ±    9877.696    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                N/A  thrpt    5         1.066 ±       7.822  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                           N/A  thrpt    5         9.078 ±      66.513    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.count                                                                  N/A  thrpt    5         9.000                counts
[info] MissingReqFieldBenchmark.readPlayJson:·gc.time                                                                   N/A  thrpt    5        42.000                    ms
[info] MutableBitSetBenchmark.readJsoniterScala                                                                         128  thrpt    5    911334.699 ±     917.772   ops/s
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate                                                          128  thrpt    5        50.956 ±       0.062  MB/sec
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                     128  thrpt    5        88.000 ±       0.001    B/op
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.count                                                               128  thrpt    5           ≈ 0                counts
[info] MutableBitSetBenchmark.readPlayJson                                                                              128  thrpt    5     59993.269 ±    1729.983   ops/s
[info] MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate                                                               128  thrpt    5      2787.101 ±      80.718  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate.norm                                                          128  thrpt    5     73120.007 ±       0.001    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   128  thrpt    5         0.005 ±       0.018  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              128  thrpt    5         0.133 ±       0.469    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                         128  thrpt    5      2725.606 ±       1.069  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5     71509.943 ±    2082.932    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.count                                                                    128  thrpt    5        20.000                counts
[info] MutableBitSetBenchmark.readPlayJson:·gc.time                                                                     128  thrpt    5        25.000                    ms
[info] MutableBitSetBenchmark.writeJacksonScala                                                                         128  thrpt    5   1000375.851 ±   55975.228   ops/s
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate                                                          128  thrpt    5       574.553 ±      31.888  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                     128  thrpt    5       904.000 ±       0.001    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       677.385 ±       0.393  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5      1065.979 ±      60.833    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.count                                                               128  thrpt    5         5.000                counts
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.time                                                                128  thrpt    5        24.000                    ms
[info] MutableBitSetBenchmark.writeJsoniterScala                                                                        128  thrpt    5    705908.412 ±    5212.060   ops/s
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate                                                         128  thrpt    5       197.336 ±       1.424  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                    128  thrpt    5       440.001 ±       0.001    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       135.636 ±    1167.864  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5       303.258 ±    2611.144    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.count                                                              128  thrpt    5         1.000                counts
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.time                                                               128  thrpt    5         4.000                    ms
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc                                                                128  thrpt    5    743668.077 ±     800.859   ops/s
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                 128  thrpt    5         7.560 ±       0.007  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                            128  thrpt    5        16.001 ±       0.001    B/op
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                      128  thrpt    5           ≈ 0                counts
[info] MutableBitSetBenchmark.writePlayJson                                                                             128  thrpt    5     39425.889 ±    1877.695   ops/s
[info] MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate                                                              128  thrpt    5      1654.889 ±      79.486  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate.norm                                                         128  thrpt    5     66064.011 ±       0.002    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  128  thrpt    5         0.018 ±       0.155  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             128  thrpt    5         0.713 ±       6.141    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                        128  thrpt    5      1767.149 ±    1436.050  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5     70567.877 ±   57721.981    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                 128  thrpt    5         1.066 ±       7.822  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                            128  thrpt    5        42.928 ±     314.582    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.count                                                                   128  thrpt    5        13.000                counts
[info] MutableBitSetBenchmark.writePlayJson:·gc.time                                                                    128  thrpt    5        35.000                    ms
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala                                                              128  thrpt    5    225851.707 ±    1365.903   ops/s
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                               128  thrpt    5       883.918 ±       5.412  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                          128  thrpt    5      6160.002 ±       0.001    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                         128  thrpt    5       813.703 ±    1167.641  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                    128  thrpt    5      5673.366 ±    8189.130    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.count                                                    128  thrpt    5         6.000                counts
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.time                                                     128  thrpt    5        20.000                    ms
[info] MutableLongMapOfBooleansBenchmark.readPlayJson                                                                   128  thrpt    5     23453.930 ±    1135.348   ops/s
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                    128  thrpt    5      1299.337 ±      62.583  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                               128  thrpt    5     87184.018 ±       0.008    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                        128  thrpt    5         0.032 ±       0.278  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   128  thrpt    5         2.132 ±      18.356    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                              128  thrpt    5      1220.411 ±    1160.148  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5     82039.897 ±   79753.557    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                       128  thrpt    5         1.199 ±       7.567  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                  128  thrpt    5        80.201 ±     504.091    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.count                                                         128  thrpt    5         9.000                counts
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.time                                                          128  thrpt    5        40.000                    ms
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala                                                              128  thrpt    5     98525.872 ±    2182.842   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                               128  thrpt    5      1382.694 ±      30.454  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5     22088.004 ±       0.001    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                   128  thrpt    5         0.010 ±       0.051  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm              128  thrpt    5         0.154 ±       0.816    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                         128  thrpt    5      1357.548 ±      18.783  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                    128  thrpt    5     21686.620 ±     343.971    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                  128  thrpt    5         1.199 ±       7.565  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                             128  thrpt    5        19.162 ±     120.734    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.count                                                    128  thrpt    5        10.000                counts
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.time                                                     128  thrpt    5        36.000                    ms
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala                                                             128  thrpt    5    347546.992 ±    5016.961   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                              128  thrpt    5      1655.210 ±      24.212  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5      7496.001 ±       0.001    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                  128  thrpt    5         0.021 ±       0.177  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm             128  thrpt    5         0.093 ±       0.798    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                        128  thrpt    5      1767.908 ±    1435.710  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                   128  thrpt    5      8006.589 ±    6505.273    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                 128  thrpt    5         0.799 ±       5.560  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                            128  thrpt    5         3.623 ±      25.177    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.count                                                   128  thrpt    5        13.000                counts
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.time                                                    128  thrpt    5        27.000                    ms
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                     128  thrpt    5    398711.880 ±   11948.040   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                      128  thrpt    5      1365.952 ±      41.359  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                 128  thrpt    5      5392.001 ±       0.001    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'          128  thrpt    5         0.032 ±       0.183  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm     128  thrpt    5         0.126 ±       0.728    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                                128  thrpt    5      1357.551 ±      12.595  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                           128  thrpt    5      5359.183 ±     211.439    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space                         128  thrpt    5         0.933 ±       6.688  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm                    128  thrpt    5         3.696 ±      26.553    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                           128  thrpt    5        10.000                counts
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time                                            128  thrpt    5        29.000                    ms
[info] MutableLongMapOfBooleansBenchmark.writePlayJson                                                                  128  thrpt    5     52287.570 ±     705.279   ops/s
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                                   128  thrpt    5      1178.958 ±      15.816  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                              128  thrpt    5     35488.008 ±       0.001    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                       128  thrpt    5         0.002 ±       0.018  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  128  thrpt    5         0.064 ±       0.548    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                             128  thrpt    5      1219.538 ±    1166.953  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                        128  thrpt    5     36726.283 ±   35340.217    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                      128  thrpt    5         1.199 ±       7.565  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                 128  thrpt    5        36.020 ±     226.888    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.count                                                        128  thrpt    5         9.000                counts
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.time                                                         128  thrpt    5        43.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readCirce                                                                    128  thrpt    5     58601.065 ±    2513.927   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate                                                     128  thrpt    5      1318.099 ±      56.265  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                                128  thrpt    5     35400.007 ±       0.001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                         128  thrpt    5         0.027 ±       0.159  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    128  thrpt    5         0.711 ±       4.187    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen                                               128  thrpt    5      1358.246 ±      11.256  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5     36481.129 ±    1263.742    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                        128  thrpt    5         0.666 ±       5.736  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                   128  thrpt    5        17.924 ±     154.332    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.count                                                          128  thrpt    5        10.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.time                                                           128  thrpt    5        30.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala                                                             128  thrpt    5     98392.947 ±     461.270   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                              128  thrpt    5       669.165 ±       3.399  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5     10704.004 ±       0.001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                        128  thrpt    5       677.034 ±       1.553  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                   128  thrpt    5     10829.887 ±      38.029    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                 128  thrpt    5         0.266 ±       1.405  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                            128  thrpt    5         4.262 ±      22.474    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count                                                   128  thrpt    5         5.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time                                                    128  thrpt    5        23.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala                                                            128  thrpt    5    178735.923 ±    2047.360   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       735.852 ±       8.329  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5      6480.002 ±       0.001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                       128  thrpt    5       678.056 ±       0.180  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                  128  thrpt    5      5971.085 ±      68.891    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count                                                  128  thrpt    5         5.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time                                                   128  thrpt    5        18.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson                                                                 128  thrpt    5     21413.139 ±     697.922   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                  128  thrpt    5      1202.316 ±      39.059  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     88368.020 ±       0.009    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                            128  thrpt    5      1219.440 ±    1168.026  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                       128  thrpt    5     89728.654 ±   87132.892    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                     128  thrpt    5         1.066 ±       6.438  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                128  thrpt    5        77.975 ±     471.155    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.count                                                       128  thrpt    5         9.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.time                                                        128  thrpt    5        43.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala                                                            128  thrpt    5    161585.538 ±    5360.260   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                             128  thrpt    5      1039.696 ±      34.301  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5     10128.003 ±       0.001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                       128  thrpt    5       947.374 ±    1427.288  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                  128  thrpt    5      9248.056 ±   14170.206    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count                                                  128  thrpt    5         7.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time                                                   128  thrpt    5        33.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala                                                           128  thrpt    5    527399.779 ±    2999.509   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       587.171 ±       3.392  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5      1752.001 ±       0.001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                      128  thrpt    5       542.152 ±    1167.023  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                 128  thrpt    5      1617.030 ±    3480.789    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                               128  thrpt    5         0.133 ±       1.147  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                          128  thrpt    5         0.397 ±       3.418    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count                                                 128  thrpt    5         4.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time                                                  128  thrpt    5        14.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc                                                   128  thrpt    5    568693.440 ±    2260.871   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                    128  thrpt    5        11.562 ±       0.047  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                               128  thrpt    5        32.001 ±       0.001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                         128  thrpt    5           ≈ 0                counts
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson                                                                128  thrpt    5     63181.909 ±    2336.818   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate                                                 128  thrpt    5      1133.611 ±      41.643  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     28240.007 ±       0.001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                           128  thrpt    5      1083.190 ±    1427.674  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                      128  thrpt    5     27034.585 ±   36178.886    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                    128  thrpt    5         1.066 ±       7.822  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                               128  thrpt    5        26.415 ±     193.730    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.count                                                      128  thrpt    5         8.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.time                                                       128  thrpt    5        39.000                    ms
[info] MutableSetOfIntsBenchmark.readCirce                                                                              128  thrpt    5     77271.137 ±    2180.952   ops/s
[info] MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate                                                               128  thrpt    5      1351.581 ±      38.578  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                                          128  thrpt    5     27528.005 ±       0.001    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   128  thrpt    5         0.010 ±       0.087  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              128  thrpt    5         0.206 ±       1.774    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                         128  thrpt    5      1358.293 ±      10.992  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5     27666.087 ±     916.777    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                  128  thrpt    5         0.666 ±       5.736  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                             128  thrpt    5        13.664 ±     117.654    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.count                                                                    128  thrpt    5        10.000                counts
[info] MutableSetOfIntsBenchmark.readCirce:·gc.time                                                                     128  thrpt    5        31.000                    ms
[info] MutableSetOfIntsBenchmark.readJacksonScala                                                                       128  thrpt    5    153518.908 ±     232.420   ops/s
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                                        128  thrpt    5       656.282 ±       1.316  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                   128  thrpt    5      6728.003 ±       0.001    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                  128  thrpt    5       677.060 ±       1.265  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5      6941.012 ±      22.720    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.count                                                             128  thrpt    5         5.000                counts
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.time                                                              128  thrpt    5        23.000                    ms
[info] MutableSetOfIntsBenchmark.readJsoniterScala                                                                      128  thrpt    5    211531.140 ±    1046.317   ops/s
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                                       128  thrpt    5       753.640 ±       3.886  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                  128  thrpt    5      5608.002 ±       0.001    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                 128  thrpt    5       678.038 ±       0.280  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5      5045.441 ±      24.971    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.count                                                            128  thrpt    5         5.000                counts
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.time                                                             128  thrpt    5        19.000                    ms
[info] MutableSetOfIntsBenchmark.readPlayJson                                                                           128  thrpt    5     41474.366 ±    1524.215   ops/s
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                                            128  thrpt    5      1719.305 ±      63.541  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                       128  thrpt    5     65248.010 ±       0.001    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                128  thrpt    5         0.019 ±       0.104  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           128  thrpt    5         0.731 ±       3.942    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                      128  thrpt    5      1768.417 ±    1432.742  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5     67165.260 ±   55449.051    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                               128  thrpt    5         0.799 ±       6.881  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                          128  thrpt    5        30.201 ±     260.039    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.count                                                                 128  thrpt    5        13.000                counts
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.time                                                                  128  thrpt    5        31.000                    ms
[info] MutableSetOfIntsBenchmark.writeCirce                                                                             128  thrpt    5    249465.743 ±   13045.226   ops/s
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate                                                              128  thrpt    5      1178.080 ±      61.638  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                                         128  thrpt    5      7432.002 ±       0.001    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                        128  thrpt    5      1085.022 ±    1429.916  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5      6846.110 ±    9031.139    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                 128  thrpt    5         0.666 ±       5.737  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                            128  thrpt    5         4.260 ±      36.676    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.count                                                                   128  thrpt    5         8.000                counts
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.time                                                                    128  thrpt    5        30.000                    ms
[info] MutableSetOfIntsBenchmark.writeJacksonScala                                                                      128  thrpt    5    503532.053 ±   12834.642   ops/s
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                                       128  thrpt    5       404.353 ±      10.252  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                  128  thrpt    5      1264.001 ±       0.001    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                 128  thrpt    5       406.430 ±    1428.658  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5      1273.725 ±    4477.521    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.count                                                            128  thrpt    5         3.000                counts
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.time                                                             128  thrpt    5        15.000                    ms
[info] MutableSetOfIntsBenchmark.writeJsoniterScala                                                                     128  thrpt    5    592680.317 ±   18059.547   ops/s
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                      128  thrpt    5       313.273 ±       9.543  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                 128  thrpt    5       832.001 ±       0.001    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5       270.952 ±    1428.652  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5       724.884 ±    3822.215    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.count                                                           128  thrpt    5         2.000                counts
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.time                                                            128  thrpt    5         7.000                    ms
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc                                                             128  thrpt    5    639152.998 ±   61144.046   ops/s
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                              128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                         128  thrpt    5         0.001 ±       0.001    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                   128  thrpt    5           ≈ 0                counts
[info] MutableSetOfIntsBenchmark.writePlayJson                                                                          128  thrpt    5     29637.062 ±     835.629   ops/s
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                                           128  thrpt    5      1476.594 ±      42.095  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                      128  thrpt    5     78416.014 ±       0.002    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                               128  thrpt    5         0.034 ±       0.277  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          128  thrpt    5         1.806 ±      14.644    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                     128  thrpt    5      1358.037 ±      17.099  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5     72121.995 ±    1471.971    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         0.799 ±       6.883  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5        42.420 ±     365.245    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.count                                                                128  thrpt    5        10.000                counts
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.time                                                                 128  thrpt    5        30.000                    ms
[info] PrimitivesBenchmark.readCirce                                                                                    N/A  thrpt    5    627464.961 ±    8535.840   ops/s
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate                                                                     N/A  thrpt    5      1913.429 ±      25.975  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm                                                                N/A  thrpt    5      4800.001 ±       0.001    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                         N/A  thrpt    5         0.032 ±       0.253  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                    N/A  thrpt    5         0.081 ±       0.634    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                               N/A  thrpt    5      1905.197 ±    1167.834  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                          N/A  thrpt    5      4780.743 ±    2962.052    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                        N/A  thrpt    5         0.666 ±       5.736  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                                   N/A  thrpt    5         1.671 ±      14.390    B/op
[info] PrimitivesBenchmark.readCirce:·gc.count                                                                          N/A  thrpt    5        14.000                counts
[info] PrimitivesBenchmark.readCirce:·gc.time                                                                           N/A  thrpt    5        31.000                    ms
[info] PrimitivesBenchmark.readJacksonScala                                                                             N/A  thrpt    5   1334188.480 ±   85327.745   ops/s
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate                                                              N/A  thrpt    5      1010.464 ±      64.949  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                         N/A  thrpt    5      1192.000 ±       0.001    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                        N/A  thrpt    5       948.269 ±    1428.966  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                   N/A  thrpt    5      1123.846 ±    1756.519    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                                 N/A  thrpt    5         0.133 ±       1.147  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                            N/A  thrpt    5         0.157 ±       1.351    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.count                                                                   N/A  thrpt    5         7.000                counts
[info] PrimitivesBenchmark.readJacksonScala:·gc.time                                                                    N/A  thrpt    5        33.000                    ms
[info] PrimitivesBenchmark.readJsoniterScala                                                                            N/A  thrpt    5   7083350.228 ±  350463.690   ops/s
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate                                                             N/A  thrpt    5       216.005 ±      10.672  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                        N/A  thrpt    5        48.000 ±       0.001    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                       N/A  thrpt    5       271.353 ±    1430.764  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                  N/A  thrpt    5        60.914 ±     321.221    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.count                                                                  N/A  thrpt    5         2.000                counts
[info] PrimitivesBenchmark.readJsoniterScala:·gc.time                                                                   N/A  thrpt    5         6.000                    ms
[info] PrimitivesBenchmark.readPlayJson                                                                                 N/A  thrpt    5    200418.704 ±    3103.413   ops/s
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate                                                                  N/A  thrpt    5      1403.987 ±      21.895  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                             N/A  thrpt    5     11024.002 ±       0.001    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                      N/A  thrpt    5         0.028 ±       0.241  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                 N/A  thrpt    5         0.219 ±       1.889    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                            N/A  thrpt    5      1356.580 ±      16.334  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                       N/A  thrpt    5     10651.957 ±     252.680    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                     N/A  thrpt    5         0.933 ±       8.030  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                                N/A  thrpt    5         7.371 ±      63.463    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.count                                                                       N/A  thrpt    5        10.000                counts
[info] PrimitivesBenchmark.readPlayJson:·gc.time                                                                        N/A  thrpt    5        40.000                    ms
[info] PrimitivesBenchmark.writeCirce                                                                                   N/A  thrpt    5    840613.458 ±   12973.474   ops/s
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate                                                                    N/A  thrpt    5      1290.345 ±      20.314  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm                                                               N/A  thrpt    5      2416.000 ±       0.001    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                        N/A  thrpt    5         0.003 ±       0.026  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                   N/A  thrpt    5         0.006 ±       0.049    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                              N/A  thrpt    5      1221.042 ±    1168.576  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                         N/A  thrpt    5      2287.791 ±    2207.827    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                       N/A  thrpt    5         0.799 ±       6.882  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                                  N/A  thrpt    5         1.505 ±      12.955    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.count                                                                         N/A  thrpt    5         9.000                counts
[info] PrimitivesBenchmark.writeCirce:·gc.time                                                                          N/A  thrpt    5        34.000                    ms
[info] PrimitivesBenchmark.writeJacksonScala                                                                            N/A  thrpt    5   2113377.269 ±  102881.702   ops/s
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate                                                             N/A  thrpt    5       870.155 ±      42.642  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                        N/A  thrpt    5       648.000 ±       0.001    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                       N/A  thrpt    5       812.208 ±    1166.238  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                  N/A  thrpt    5       604.124 ±     853.382    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.count                                                                  N/A  thrpt    5         6.000                counts
[info] PrimitivesBenchmark.writeJacksonScala:·gc.time                                                                   N/A  thrpt    5        28.000                    ms
[info] PrimitivesBenchmark.writeJsoniterScala                                                                           N/A  thrpt    5   5671839.335 ±   69399.895   ops/s
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate                                                            N/A  thrpt    5       634.358 ±       7.418  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                       N/A  thrpt    5       176.000 ±       0.001    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                      N/A  thrpt    5       677.822 ±       1.267  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                 N/A  thrpt    5       188.060 ±       2.215    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                               N/A  thrpt    5         0.133 ±       1.147  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                          N/A  thrpt    5         0.037 ±       0.317    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.count                                                                 N/A  thrpt    5         5.000                counts
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.time                                                                  N/A  thrpt    5        18.000                    ms
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc                                                                   N/A  thrpt    5   5322961.530 ±  251839.567   ops/s
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                    N/A  thrpt    5       324.680 ±      15.235  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                               N/A  thrpt    5        96.000 ±       0.001    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                                              N/A  thrpt    5       270.992 ±    1428.865  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                                         N/A  thrpt    5        81.087 ±     427.571    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                         N/A  thrpt    5         2.000                counts
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                                          N/A  thrpt    5         7.000                    ms
[info] PrimitivesBenchmark.writePlayJson                                                                                N/A  thrpt    5    311658.178 ±   16214.878   ops/s
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate                                                                 N/A  thrpt    5      1587.259 ±      81.881  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm                                                            N/A  thrpt    5      8016.001 ±       0.001    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                     N/A  thrpt    5         0.039 ±       0.268  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                N/A  thrpt    5         0.194 ±       1.335    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                           N/A  thrpt    5      1630.445 ±    1432.991  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                      N/A  thrpt    5      8235.300 ±    7250.090    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                    N/A  thrpt    5         0.932 ±       8.028  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                               N/A  thrpt    5         4.687 ±      40.357    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.count                                                                      N/A  thrpt    5        12.000                counts
[info] PrimitivesBenchmark.writePlayJson:·gc.time                                                                       N/A  thrpt    5        38.000                    ms
[info] SetOfIntsBenchmark.readCirce                                                                                     128  thrpt    5     55666.650 ±    1183.386   ops/s
[info] SetOfIntsBenchmark.readCirce:·gc.alloc.rate                                                                      128  thrpt    5      1591.452 ±      34.508  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                                                 128  thrpt    5     44992.007 ±       0.001    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                          128  thrpt    5         0.031 ±       0.250  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                     128  thrpt    5         0.877 ±       7.141    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                                128  thrpt    5      1495.916 ±    1172.889  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                           128  thrpt    5     42325.940 ±   34180.152    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                         128  thrpt    5         0.666 ±       5.735  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                                    128  thrpt    5        18.996 ±     163.564    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.count                                                                           128  thrpt    5        11.000                counts
[info] SetOfIntsBenchmark.readCirce:·gc.time                                                                            128  thrpt    5        26.000                    ms
[info] SetOfIntsBenchmark.readJacksonScala                                                                              128  thrpt    5     81160.150 ±    4058.017   ops/s
[info] SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                                               128  thrpt    5      1250.019 ±      62.099  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                          128  thrpt    5     24240.005 ±       0.001    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   128  thrpt    5         0.003 ±       0.025  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              128  thrpt    5         0.056 ±       0.485    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                         128  thrpt    5      1220.358 ±    1168.799  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5     23693.828 ±   23027.417    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                                  128  thrpt    5         1.066 ±       7.824  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                             128  thrpt    5        21.031 ±     154.925    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.count                                                                    128  thrpt    5         9.000                counts
[info] SetOfIntsBenchmark.readJacksonScala:·gc.time                                                                     128  thrpt    5        37.000                    ms
[info] SetOfIntsBenchmark.readJsoniterScala                                                                             128  thrpt    5     88241.732 ±    1114.080   ops/s
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                                              128  thrpt    5      1297.166 ±      16.309  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                         128  thrpt    5     23136.005 ±       0.001    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  128  thrpt    5         0.021 ±       0.132  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             128  thrpt    5         0.374 ±       2.334    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                        128  thrpt    5      1221.925 ±    1163.398  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5     21806.764 ±   20914.110    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                                 128  thrpt    5         0.666 ±       5.735  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                            128  thrpt    5        11.888 ±     102.362    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.count                                                                   128  thrpt    5         9.000                counts
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.time                                                                    128  thrpt    5        28.000                    ms
[info] SetOfIntsBenchmark.readPlayJson                                                                                  128  thrpt    5     42857.664 ±     340.166   ops/s
[info] SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                                                   128  thrpt    5      2201.143 ±      17.608  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                              128  thrpt    5     80840.010 ±       0.001    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                       128  thrpt    5         0.028 ±       0.178  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                  128  thrpt    5         1.018 ±       6.542    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                             128  thrpt    5      2179.606 ±    1174.428  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                        128  thrpt    5     80047.057 ±   43046.140    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                      128  thrpt    5         0.799 ±       6.882  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                                 128  thrpt    5        29.446 ±     253.540    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.count                                                                        128  thrpt    5        16.000                counts
[info] SetOfIntsBenchmark.readPlayJson:·gc.time                                                                         128  thrpt    5        25.000                    ms
[info] SetOfIntsBenchmark.writeCirce                                                                                    128  thrpt    5    203766.514 ±    4687.999   ops/s
[info] SetOfIntsBenchmark.writeCirce:·gc.alloc.rate                                                                     128  thrpt    5       969.509 ±      22.542  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                                                128  thrpt    5      7488.002 ±       0.001    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                               128  thrpt    5      1084.982 ±    1429.752  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                          128  thrpt    5      8391.064 ±   11178.990    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.count                                                                          128  thrpt    5         8.000                counts
[info] SetOfIntsBenchmark.writeCirce:·gc.time                                                                           128  thrpt    5        32.000                    ms
[info] SetOfIntsBenchmark.writeJacksonScala                                                                             128  thrpt    5    456310.272 ±    7971.467   ops/s
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                                              128  thrpt    5       401.247 ±       7.046  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                         128  thrpt    5      1384.001 ±       0.001    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                        128  thrpt    5       406.212 ±    1427.892  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5      1402.538 ±    4930.133    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                                 128  thrpt    5         0.133 ±       1.147  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                            128  thrpt    5         0.461 ±       3.970    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.count                                                                   128  thrpt    5         3.000                counts
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.time                                                                    128  thrpt    5        15.000                    ms
[info] SetOfIntsBenchmark.writeJsoniterScala                                                                            128  thrpt    5    806142.638 ±   10863.884   ops/s
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                             128  thrpt    5       434.362 ±       5.825  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                        128  thrpt    5       848.001 ±       0.001    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                       128  thrpt    5       406.633 ±    1429.372  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5       795.645 ±    2796.805    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                                128  thrpt    5         0.133 ±       1.147  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                           128  thrpt    5         0.261 ±       2.246    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.count                                                                  128  thrpt    5         3.000                counts
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.time                                                                   128  thrpt    5        10.000                    ms
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc                                                                    128  thrpt    5    616161.669 ±    1669.266   ops/s
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                     128  thrpt    5         6.263 ±       0.018  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                                128  thrpt    5        16.001 ±       0.001    B/op
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                          128  thrpt    5           ≈ 0                counts
[info] SetOfIntsBenchmark.writePlayJson                                                                                 128  thrpt    5     30554.492 ±     694.849   ops/s
[info] SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                                                  128  thrpt    5      1528.029 ±      34.341  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                             128  thrpt    5     78704.014 ±       0.002    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                      128  thrpt    5         0.041 ±       0.227  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                 128  thrpt    5         2.085 ±      11.617    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                            128  thrpt    5      1494.465 ±    1166.245  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                       128  thrpt    5     77002.370 ±   60854.681    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                     128  thrpt    5         0.799 ±       6.882  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                                128  thrpt    5        41.323 ±     355.805    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.count                                                                       128  thrpt    5        11.000                counts
[info] SetOfIntsBenchmark.writePlayJson:·gc.time                                                                        128  thrpt    5        33.000                    ms
[info] StringOfAsciiCharsBenchmark.readCirce                                                                            128  thrpt    5   4544154.889 ±  204381.278   ops/s
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                                             128  thrpt    5      3348.888 ±     151.176  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                                                        128  thrpt    5      1160.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                 128  thrpt    5         0.002 ±       0.004  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                            128  thrpt    5         0.001 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                       128  thrpt    5      3406.906 ±       1.508  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5      1180.227 ±      53.614    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.count                                                                  128  thrpt    5        25.000                counts
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.time                                                                   128  thrpt    5        41.000                    ms
[info] StringOfAsciiCharsBenchmark.readDslJsonJava                                                                      128  thrpt    5   7810983.273 ±  114680.514   ops/s
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate                                                       128  thrpt    5       833.724 ±      12.327  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                  128  thrpt    5       168.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                 128  thrpt    5       809.296 ±    1162.627  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5       163.053 ±     233.771    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space                                          128  thrpt    5         0.266 ±       1.405  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                     128  thrpt    5         0.054 ±       0.283    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.count                                                            128  thrpt    5         6.000                counts
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.time                                                             128  thrpt    5        34.000                    ms
[info] StringOfAsciiCharsBenchmark.readJacksonScala                                                                     128  thrpt    5   3824429.714 ±   76370.654   ops/s
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                                                      128  thrpt    5      2157.853 ±      42.271  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                 128  thrpt    5       888.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                          128  thrpt    5         0.047 ±       0.394  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     128  thrpt    5         0.019 ±       0.163    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5      2044.428 ±       1.230  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5       841.341 ±      16.816    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count                                                           128  thrpt    5        15.000                counts
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time                                                            128  thrpt    5        23.000                    ms
[info] StringOfAsciiCharsBenchmark.readJsoniterScala                                                                    128  thrpt    5   7741239.257 ±  121897.247   ops/s
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                                     128  thrpt    5       826.231 ±      13.081  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                128  thrpt    5       168.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5       813.107 ±    1168.620  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5       165.529 ±     241.392    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                        128  thrpt    5         0.133 ±       1.147  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                   128  thrpt    5         0.027 ±       0.233    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count                                                          128  thrpt    5         6.000                counts
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time                                                           128  thrpt    5        21.000                    ms
[info] StringOfAsciiCharsBenchmark.readPlayJson                                                                         128  thrpt    5   4632558.383 ±  117688.118   ops/s
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate                                                          128  thrpt    5      2495.987 ±      61.813  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                     128  thrpt    5       848.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                              128  thrpt    5         0.005 ±       0.031  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         128  thrpt    5         0.002 ±       0.011    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                    128  thrpt    5      2453.269 ±    1438.278  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5       833.864 ±     499.497    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.count                                                               128  thrpt    5        18.000                counts
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.time                                                                128  thrpt    5        23.000                    ms
[info] StringOfAsciiCharsBenchmark.writeCirce                                                                           128  thrpt    5   3357316.179 ±   19423.392   ops/s
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                                            128  thrpt    5       802.000 ±       4.501  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                                       128  thrpt    5       376.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                      128  thrpt    5       812.881 ±    1166.794  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5       381.248 ±     549.859    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.count                                                                 128  thrpt    5         6.000                counts
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.time                                                                  128  thrpt    5        24.000                    ms
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava                                                                     128  thrpt    5   7231833.873 ±  566964.207   ops/s
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                      128  thrpt    5       698.415 ±      54.763  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                 128  thrpt    5       152.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                                128  thrpt    5       674.637 ±       1.286  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5       146.874 ±      11.628    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         0.133 ±       1.147  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5         0.029 ±       0.252    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.count                                                           128  thrpt    5         5.000                counts
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.time                                                            128  thrpt    5        29.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJacksonScala                                                                    128  thrpt    5   3209553.850 ±   27461.969   ops/s
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                                     128  thrpt    5       995.165 ±       9.385  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                128  thrpt    5       488.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5      1082.836 ±    1426.649  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5       531.333 ±     703.770    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count                                                          128  thrpt    5         8.000                counts
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time                                                           128  thrpt    5        35.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala                                                                   128  thrpt    5   9951048.507 ±  118803.796   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                    128  thrpt    5       961.059 ±      12.102  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                               128  thrpt    5       152.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                              128  thrpt    5      1084.345 ±    1428.611  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5       171.625 ±     227.483    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                       128  thrpt    5         0.400 ±       1.405  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                  128  thrpt    5         0.063 ±       0.222    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count                                                         128  thrpt    5         8.000                counts
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                                          128  thrpt    5        27.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                                           128  thrpt    5   7936361.677 ±  749029.701   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                            128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                       128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                 128  thrpt    5           ≈ 0                counts
[info] StringOfAsciiCharsBenchmark.writePlayJson                                                                        128  thrpt    5   3164720.264 ±   32194.749   ops/s
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                                                         128  thrpt    5      1013.378 ±       9.881  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                    128  thrpt    5       504.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       947.526 ±    1427.879  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5       471.571 ±     714.656    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.count                                                              128  thrpt    5         7.000                counts
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.time                                                               128  thrpt    5        31.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readCirce                                                                         128  thrpt    5    821466.159 ±   31289.808   ops/s
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                                          128  thrpt    5      1440.476 ±      55.114  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                                                     128  thrpt    5      2760.001 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                              128  thrpt    5         0.024 ±       0.208  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         128  thrpt    5         0.046 ±       0.397    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                    128  thrpt    5      1358.884 ±      14.034  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5      2603.854 ±      93.042    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         0.666 ±       5.736  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5         1.271 ±      10.942    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.count                                                               128  thrpt    5        10.000                counts
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.time                                                                128  thrpt    5        25.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava                                                                   128  thrpt    5   2197869.760 ±    2302.089   ops/s
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate                                                    128  thrpt    5       614.395 ±       0.650  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                               128  thrpt    5       440.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                              128  thrpt    5       674.731 ±       0.062  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5       483.210 ±       0.500    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.count                                                         128  thrpt    5         5.000                counts
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.time                                                          128  thrpt    5        25.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala                                                                  128  thrpt    5   1048830.416 ±    6859.315   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                                                   128  thrpt    5       772.959 ±       4.697  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                              128  thrpt    5      1160.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                             128  thrpt    5       677.394 ±       0.390  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                        128  thrpt    5      1016.586 ±       6.667    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count                                                        128  thrpt    5         5.000                counts
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time                                                         128  thrpt    5        22.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala                                                                 128  thrpt    5   2442910.096 ±   36220.594   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                                  128  thrpt    5       682.903 ±      10.176  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                             128  thrpt    5       440.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                            128  thrpt    5       678.189 ±       1.025  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                       128  thrpt    5       436.968 ±       6.514    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count                                                       128  thrpt    5         5.000                counts
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time                                                        128  thrpt    5        15.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readPlayJson                                                                      128  thrpt    5   1109555.473 ±   17242.220   ops/s
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate                                                       128  thrpt    5       789.594 ±      12.339  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                  128  thrpt    5      1120.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                 128  thrpt    5       812.965 ±    1166.980  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5      1153.046 ±    1653.058    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.count                                                            128  thrpt    5         6.000                counts
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.time                                                             128  thrpt    5        26.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeCirce                                                                        128  thrpt    5   1759998.195 ±   24021.640   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                                         128  thrpt    5      1476.018 ±      19.888  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                                    128  thrpt    5      1320.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                             128  thrpt    5         0.024 ±       0.204  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        128  thrpt    5         0.022 ±       0.183    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                   128  thrpt    5      1358.823 ±      14.571  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5      1215.199 ±      14.144    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         0.666 ±       5.735  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5         0.596 ±       5.135    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count                                                              128  thrpt    5        10.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time                                                               128  thrpt    5        27.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava                                                                  128  thrpt    5   2614090.184 ±   31615.686   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                   128  thrpt    5       677.588 ±       8.118  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                              128  thrpt    5       408.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                             128  thrpt    5       809.538 ±    1162.270  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                        128  thrpt    5       487.796 ±     706.453    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space                                      128  thrpt    5         0.133 ±       1.147  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                 128  thrpt    5         0.080 ±       0.689    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.count                                                        128  thrpt    5         6.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.time                                                         128  thrpt    5        31.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala                                                                 128  thrpt    5   2484739.970 ±   36078.551   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                                  128  thrpt    5      1174.484 ±      16.586  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                             128  thrpt    5       744.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                      128  thrpt    5         0.016 ±       0.139  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 128  thrpt    5         0.010 ±       0.088    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                            128  thrpt    5      1220.129 ±    1168.494  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                       128  thrpt    5       773.441 ±     746.885    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                     128  thrpt    5         0.799 ±       6.882  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                128  thrpt    5         0.506 ±       4.359    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count                                                       128  thrpt    5         9.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time                                                        128  thrpt    5        36.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala                                                                128  thrpt    5   2912578.848 ±   23328.111   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                 128  thrpt    5       755.009 ±       6.352  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                            128  thrpt    5       408.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                           128  thrpt    5       677.563 ±       1.123  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                      128  thrpt    5       366.151 ±       3.390    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count                                                      128  thrpt    5         5.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                                       128  thrpt    5        16.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                                        128  thrpt    5   2966011.271 ±   83600.460   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                         128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                    128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                              128  thrpt    5           ≈ 0                counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson                                                                     128  thrpt    5   2451003.876 ±   36375.061   ops/s
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                                                      128  thrpt    5      1183.445 ±      17.530  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                 128  thrpt    5       760.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                          128  thrpt    5         0.008 ±       0.067  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     128  thrpt    5         0.005 ±       0.043    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                128  thrpt    5      1220.095 ±    1168.180  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5       783.631 ±     751.379    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         0.799 ±       6.882  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5         0.511 ±       4.402    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count                                                           128  thrpt    5         9.000                counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time                                                            128  thrpt    5        34.000                    ms
[info] TwitterAPIBenchmark.readCirce                                                                                    N/A  thrpt    5     10788.938 ±     278.024   ops/s
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate                                                                     N/A  thrpt    5      1570.360 ±      40.694  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm                                                                N/A  thrpt    5    229090.752 ±      72.450    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                         N/A  thrpt    5         0.031 ±       0.180  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                    N/A  thrpt    5         4.479 ±      26.186    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                               N/A  thrpt    5      1630.646 ±    1435.940  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                          N/A  thrpt    5    238023.789 ±  212534.507    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                        N/A  thrpt    5         0.666 ±       5.735  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                                   N/A  thrpt    5        97.234 ±     837.218    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.count                                                                          N/A  thrpt    5        12.000                counts
[info] TwitterAPIBenchmark.readCirce:·gc.time                                                                           N/A  thrpt    5        42.000                    ms
[info] TwitterAPIBenchmark.readJacksonScala                                                                             N/A  thrpt    5     14537.943 ±     439.105   ops/s
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate                                                              N/A  thrpt    5       205.507 ±       5.943  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                         N/A  thrpt    5     22250.689 ±      28.597    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                        N/A  thrpt    5       135.343 ±    1165.347  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                   N/A  thrpt    5     14710.760 ±  126664.077    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.count                                                                   N/A  thrpt    5         1.000                counts
[info] TwitterAPIBenchmark.readJacksonScala:·gc.time                                                                    N/A  thrpt    5         5.000                    ms
[info] TwitterAPIBenchmark.readJsoniterScala                                                                            N/A  thrpt    5     37244.426 ±     979.606   ops/s
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                                             N/A  thrpt    5       341.143 ±       8.898  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                        N/A  thrpt    5     14416.011 ±       0.002    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                       N/A  thrpt    5       271.265 ±    1430.301  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                  N/A  thrpt    5     11537.112 ±   60832.859    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.count                                                                  N/A  thrpt    5         2.000                counts
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.time                                                                   N/A  thrpt    5         6.000                    ms
[info] TwitterAPIBenchmark.readPlayJson                                                                                 N/A  thrpt    5      3050.805 ±      64.068   ops/s
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate                                                                  N/A  thrpt    5      1000.615 ±      21.149  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                                             N/A  thrpt    5    516024.136 ±       0.016    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                            N/A  thrpt    5       947.689 ±    1427.773  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                       N/A  thrpt    5    489415.658 ±  745822.122    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.count                                                                       N/A  thrpt    5         7.000                counts
[info] TwitterAPIBenchmark.readPlayJson:·gc.time                                                                        N/A  thrpt    5        58.000                    ms
[info] TwitterAPIBenchmark.writeJacksonScala                                                                            N/A  thrpt    5     55118.988 ±    1619.034   ops/s
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                                             N/A  thrpt    5       703.866 ±      20.517  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                        N/A  thrpt    5     20100.010 ±       0.101    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                       N/A  thrpt    5       676.032 ±       0.275  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                  N/A  thrpt    5     19306.055 ±     569.182    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.count                                                                  N/A  thrpt    5         5.000                counts
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.time                                                                   N/A  thrpt    5        32.000                    ms
[info] TwitterAPIBenchmark.writeJsoniterScala                                                                           N/A  thrpt    5     86605.503 ±     778.954   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                                            N/A  thrpt    5       567.831 ±       5.059  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                       N/A  thrpt    5     10320.005 ±       0.001    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                      N/A  thrpt    5       541.918 ±    1166.519  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                 N/A  thrpt    5      9858.749 ±   21221.729    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.count                                                                 N/A  thrpt    5         4.000                counts
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.time                                                                  N/A  thrpt    5        15.000                    ms
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc                                                                   N/A  thrpt    5     89502.476 ±    1632.230   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                    N/A  thrpt    5         3.184 ±       0.059  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                               N/A  thrpt    5        56.005 ±       0.001    B/op
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                         N/A  thrpt    5           ≈ 0                counts
[info] VectorOfBooleansBenchmark.readCirce                                                                              128  thrpt    5    347058.044 ±    8550.288   ops/s
[info] VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                               128  thrpt    5      1859.233 ±      46.110  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                                          128  thrpt    5      8432.001 ±       0.001    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   128  thrpt    5         0.010 ±       0.067  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              128  thrpt    5         0.046 ±       0.305    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                         128  thrpt    5      1769.662 ±    1442.551  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5      8025.632 ±    6536.869    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                  128  thrpt    5         0.666 ±       5.735  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                             128  thrpt    5         3.044 ±      26.208    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.count                                                                    128  thrpt    5        13.000                counts
[info] VectorOfBooleansBenchmark.readCirce:·gc.time                                                                     128  thrpt    5        29.000                    ms
[info] VectorOfBooleansBenchmark.readJacksonScala                                                                       128  thrpt    5    405551.303 ±   20896.238   ops/s
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                                        128  thrpt    5       494.739 ±      25.186  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                   128  thrpt    5      1920.001 ±       0.001    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                  128  thrpt    5       406.471 ±    1428.804  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5      1583.763 ±    5568.355    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.count                                                             128  thrpt    5         3.000                counts
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.time                                                              128  thrpt    5        15.000                    ms
[info] VectorOfBooleansBenchmark.readJsoniterScala                                                                      128  thrpt    5   1010282.551 ±   27605.061   ops/s
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                                       128  thrpt    5       528.931 ±      14.632  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                  128  thrpt    5       824.000 ±       0.001    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                 128  thrpt    5       542.511 ±    1167.796  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5       844.208 ±    1817.420    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.count                                                            128  thrpt    5         4.000                counts
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.time                                                             128  thrpt    5        13.000                    ms
[info] VectorOfBooleansBenchmark.readPlayJson                                                                           128  thrpt    5     97094.999 ±    3643.492   ops/s
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                            128  thrpt    5      3374.826 ±     126.434  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                                       128  thrpt    5     54704.004 ±       0.001    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                128  thrpt    5         0.001 ±       0.003  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           128  thrpt    5         0.012 ±       0.044    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                      128  thrpt    5      3407.208 ±       2.195  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5     55233.086 ±    2072.343    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.count                                                                 128  thrpt    5        25.000                counts
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.time                                                                  128  thrpt    5        38.000                    ms
[info] VectorOfBooleansBenchmark.writeCirce                                                                             128  thrpt    5    325940.291 ±    6037.673   ops/s
[info] VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                              128  thrpt    5       511.953 ±       9.259  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                                         128  thrpt    5      2472.001 ±       0.001    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                        128  thrpt    5       542.396 ±    1167.548  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5      2621.460 ±    5643.174    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                 128  thrpt    5         0.133 ±       1.147  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                            128  thrpt    5         0.643 ±       5.533    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.count                                                                   128  thrpt    5         4.000                counts
[info] VectorOfBooleansBenchmark.writeCirce:·gc.time                                                                    128  thrpt    5        15.000                    ms
[info] VectorOfBooleansBenchmark.writeJacksonScala                                                                      128  thrpt    5    637964.951 ±   26435.418   ops/s
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                                       128  thrpt    5       486.415 ±      19.976  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                  128  thrpt    5      1200.001 ±       0.001    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                 128  thrpt    5       406.068 ±    1427.386  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5       999.861 ±    3514.831    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                          128  thrpt    5         0.133 ±       1.147  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                     128  thrpt    5         0.331 ±       2.850    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.count                                                            128  thrpt    5         3.000                counts
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.time                                                             128  thrpt    5        14.000                    ms
[info] VectorOfBooleansBenchmark.writeJsoniterScala                                                                     128  thrpt    5   1991126.596 ±   18325.239   ops/s
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                                      128  thrpt    5       920.970 ±       8.896  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                 128  thrpt    5       728.000 ±       0.001    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5       948.702 ±    1429.587  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5       750.075 ±    1132.186    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         0.133 ±       1.147  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5         0.105 ±       0.905    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.count                                                           128  thrpt    5         7.000                counts
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.time                                                            128  thrpt    5        24.000                    ms
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                             128  thrpt    5   2103678.007 ±    2719.298   ops/s
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                              128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                         128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                   128  thrpt    5           ≈ 0                counts
[info] VectorOfBooleansBenchmark.writePlayJson                                                                          128  thrpt    5    343187.741 ±    2290.100   ops/s
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                                           128  thrpt    5       507.625 ±       3.325  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                                      128  thrpt    5      2328.001 ±       0.001    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       541.970 ±    1166.632  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5      2486.655 ±    5352.737    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.count                                                                128  thrpt    5         4.000                counts
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.time                                                                 128  thrpt    5        17.000                    ms
[info] Benchmark result is saved to jdk10.json
[success] Total time: 6957 s, completed May 9, 2018 5:46:47 AM
